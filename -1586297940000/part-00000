{"title_page": "COBOL", "text_new": "{{distinguish|text=[[Kobol]], a fictional planet in Battlestar Galactica}}\n{{short description|Programming language with English-like syntax}}\n{{Use dmy dates|date=April 2019}}\n{{good article}}\n{{Use American English|date=October 2014}}\n{{Infobox programming language\n| name                   = COBOL\n| logo                   = [[File:COBOL Report Apr60.djvu|200px|alt=COBOL. Report to Conference on Data Systems Languages including initial specifications for a Common Business Oriented Language (COBOL) for programming digital electronic computers. Department of Defense, April 1960.]]\n| logo caption           = The cover of the ''COBOL 60'' report to [[CODASYL]] (April 1960)\n| paradigm               = [[Procedural programming|Procedural]], [[imperative programming|imperative]], [[Object-oriented programming|object-oriented]]\n| year                   = {{Start date and age|df=yes|1959}}\n| designers               = {{nowrap|Howard Bromberg}}, {{nowrap|Howard Discount}}, {{nowrap|Vernon Reeves}}, {{nowrap|[[Jean E. Sammet]]}}, {{nowrap|William Selden}}, {{nowrap|Gertrude Tierney}}, {{nowrap|Mary K. Hawes}}\n| developers              = [[CODASYL]], [[ANSI]], [[ISO]]\n| latest release version = ISO/IEC 1989:2014\n| latest release date    = 2014\n| typing                 = [[weak typing|Weak]], [[static typing|static]]\n| implementations        = {{nowraplinks|[[GnuCOBOL]], [[IBM COBOL]]}}, {{nowrap|[[Micro Focus]] Visual COBOL}} \n| dialects               = ACUCOBOL-GT, COBOL-IT, COBOL/2, DEC COBOL-10, DEC VAX COBOL, DOSVS COBOL, Fujitsu COBOL, Hitachi COBOL2002, HP3000 COBOL/II, IBM COBOL SAA, IBM COBOL/400, IBM COBOL/II, IBM Enterprise COBOL, IBM ILE COBOL, IBM OS/VS COBOL, ICL COBOL (VME),  isCOBOL, Micro Focus COBOL, Microsoft COBOL, Realia COBOL, Ryan McFarland RM/COBOL, Ryan McFarland RM/COBOL-85, Tandem (NonStop) COBOL85, Tandem (NonStop) SCOBOL, UNIVAC COBOL, Unisys MCP COBOL74, Unisys MCP COBOL85, Unix COBOL X/Open, Veryant isCOBOL, Visual COBOL, Wang VS COBOL\n| influenced_by          = [[AIMACO]], [[C++]],{{efn|name=2002 influence|Specifically influenced COBOL 2002's object-oriented features.<ref name=\"SW95\"/><ref name=\"Arranga98\"/><ref>{{cite journal | title=Cobol: Perception and Reality | journal=Computer | date=March 1997 | volume=30 | issue=3 | doi=10.1109/2.573683 | page=127 | issn=0018-9162 | first1=Edmund C. | last1=Arranga | first2=Frank P. | last2=Coyle }}</ref>}} [[COMTRAN]], [[Eiffel (programming language)|Eiffel]],{{efn|name=2002 influence}} [[FACT computer language|FACT]], [[FLOW-MATIC]], [[Smalltalk]]{{efn|name=2002 influence}}\n| influenced             = [[CobolScript]],<ref>{{cite conference | title=COBOL Script: a business-oriented scripting language | first1=Tetsuji | last1=Imajo | first2=Tatsuki | last2=Miyake | first3=Shinobu | last3=Sato | first4=Toshiyuki | last4=Ito | first5=Daisuke | last5=Yokotsuka | first6=Yoshihide | last6=Tsujihata | first7=Shunsuke | last7=Uemura | display-authors=1 | publisher=IEEE | date=September 2000 | conference=Enterprise Distributed Object Computing Conference | conference-url=http://dblp1.uni-trier.de/db/conf/edoc/edoc2000.html | location=Makuhari, Japan | isbn=0769508650 | doi=10.1109/EDOC.2000.882363 }}<!--| accessdate=4 March 2015 --></ref> [[EGL (programming language)|EGL]],<ref>{{cite web | url=https://www.omg.org/adm/EGLOverviewtoOMG.pdf | title=Introduction to EGL | publisher=IBM Software Group | date=7 May 2007 | first=Wing Hong | last=Ho}}</ref> [[PL/I]],<ref>{{cite conference | title=The early history and characteristics of PL/I | publisher=[[Academic Press]] | publication-date=1981 | conference=History of Programming Languages | last=Radin | first=George | authorlink=George Radin | editor-first=Richard L. | editor-last=Wexelblat | doi=10.1145/800025.1198410 | isbn=0127450408 | page=572 | year=1978 }}<!--| accessdate=23 November 2014 --></ref> [[Programming Language for Business|PL/B]]{{citation needed | date=October 2017 | reason=Most sources on PL/B or Databus describe it is as COBOL-like, not as *inspired by* COBOL.}}\n| file_ext               = <code>.cbl</code>, <code>.cob</code>, <code>.cpy</code>\n| wikibooks              = COBOL\n}}\n\n'''COBOL''' ({{IPAc-en|\u02c8|k|o\u028a|b|\u0252|l|,_|-|b|\u0254\u02d0|l}}; an [[acronym]] for <!-- do not insert bolding/italics per [[WP:EXPABBR]] -->\"common business-oriented language\") is a [[compiled]] English-like [[computer programming language]] designed for business use. It is [[imperative programming|imperative]], [[procedural programming|procedural]] and, since 2002, [[object-oriented programming|object-oriented]]. COBOL is primarily used in business, finance, and administrative systems for companies and governments. COBOL is still widely used in legacy applications deployed on [[mainframe computer]]s, such as large-scale [[batch processing|batch]] and [[transaction processing]] jobs. But due to its declining popularity and the retirement of experienced COBOL programmers, programs are being migrated to new platforms, rewritten in modern languages or replaced with software packages.<ref>{{cite web | url=http://www.computerworld.com/article/2502420/data-center/brain-drain-where-cobol-systems-go-from-here.html | title=Brain drain: Where Cobol systems go from here | work=Computerworld | date=14 March 2012 | accessdate=9 February 2015 | first=Robert L. | last=Mitchell}}</ref> Most programming in COBOL is now purely to maintain existing applications.<ref name=\"Computerworld Not Dead Yet\"/>\n\nCOBOL was designed in 1959 by [[CODASYL]] and was partly based on previous programming language design work by [[Grace Hopper]], commonly referred to as \"the (grand)mother of COBOL\".<ref>{{cite journal | url=https://books.google.com/books?id=JT0EAAAAMBAJ&pg=RA1-PA33 | title=Captain Grace M. Hopper: the Mother of COBOL | journal=InfoWorld | volume=3 | issue=20 | page=33 | first=Vicki | last=Porter Adams | date=5 October 1981 | issn=0199-6649}}</ref><ref>{{cite journal | url=https://books.google.com/books?id=J-_T3bxgvMwC&pg=PA14 | title=Grace Hopper, mother of Cobol, dies | journal=Computerworld | volume=26 | issue=1 | page=14 | first=Mitch | last=Betts | date=6 January 1992 | issn=0010-4841}}</ref><ref>{{cite book | url=https://books.google.com/books?id=XfPLVx6qS_cC&pg=PA52&lpg=PA52 | title=Go To: The Story of the Math Majors, Bridge Players, Engineers, Chess Wizards, Maverick Scientists, and Iconoclasts\u2014The Programmers Who Created the Software Revolution | publisher=[[Basic Books]] | year=2008 | page=52 | isbn=978-0786730766 | first=Steve | last=Lohr}}</ref> It was created as part of a [[US Department of Defense]] effort to create a [[Software portability|portable]] programming language for data processing. It was originally seen as a stopgap, but the Department of Defense promptly forced computer manufacturers to provide it, resulting in its widespread adoption.<ref>{{cite book | url=https://books.google.com/books?id=VCcsTPQ738oC&pg=PA100 | title=The Computer Boys Take Over: Computers, Programmers, and the Politics of Technical Expertise | publisher=[[MIT Press]] | year=2009 | page=100 | isbn=978-0262050937 | first=Nathan L. | last=Ensmenger | lccn=2009052638}}</ref> It was [[standardized]] in 1968 and has since been revised four times. Expansions include support for [[structured programming|structured]] and [[object-oriented programming]]. The current standard is ''[[ISO]]/[[International Electrotechnical Commission|IEC]] 1989:2014''.<ref>{{cite web | url=http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=51416 | title=ISO/IEC 1989:2014 | publisher=ISO | date=26 May 2014 | accessdate=7 June 2014}}</ref>\n\nCOBOL statements have an English-like syntax, which was designed to be self-documenting and highly readable. However, it is verbose and uses over 300 [[reserved word]]s. In contrast with modern, succinct syntax like {{code|1=y = x;|lang=c}}, COBOL has a more English-like syntax (in this case, {{code|MOVE x TO y|lang=cobolfree}}).\nCOBOL code is split into four ''divisions'' (identification, environment, data and procedure) containing a rigid hierarchy of sections, paragraphs and sentences. Lacking a large [[standard library]], the standard specifies 43 statements, 87 functions and just one class.\n\nAcademic computer scientists were generally uninterested in business applications when COBOL was created and were not involved in its design; it was (effectively) designed from the ground up as a computer language for business, with an emphasis on inputs and outputs, whose only data types were numbers and strings of text.<ref>{{cite web|url=http://cs.brown.edu/~adf/programming_languages.html|title=A History of Computer Programming Languages|first=Andrew|last=Ferguson|date=|website=cs.brown.edu}}</ref>\nCOBOL has been criticized throughout its life, for its verbosity, design process, and poor support for [[structured programming]]. These weaknesses result in monolithic and, though intended to be English-like, not easily comprehensible and verbose programs.\n\n==History and specification==\n===Background===\nIn the late 1950s, computer users and manufacturers were becoming concerned about the rising cost of programming. A 1959 survey had found that in any data processing installation, the programming cost US$800,000 on average and that translating programs to run on new hardware would cost $600,000. At a time when new [[Timeline of programming languages|programming languages were proliferating]] at an ever-increasing rate, the same survey suggested that if a common business-oriented language were used, conversion would be far cheaper and faster.{{sfn|Beyer|2009|p=282}}\n\n[[File:Grace Hopper.jpg|thumb|alt=caption|[[Grace Hopper]], the inventor of [[FLOW-MATIC]], a predecessor to COBOL]]\n\nOn 8 April 1959, [[Mary K. Hawes]], a computer scientist at [[Burroughs Corporation]], called a meeting of representatives from academia, computer users, and manufacturers at the [[University of Pennsylvania]] to organize a formal meeting on common business languages.<ref>{{Cite journal|last=G\u00fcrer|first=Denise|date=1 June 2002|title=Pioneering Women in Computer Science|journal=SIGCSE Bull.|volume=34|issue=2|pages=175\u2013180|doi=10.1145/543812.543853|issn=0097-8418}}</ref> Representatives included [[Grace Hopper]], inventor of the English-like data processing language [[FLOW-MATIC]], [[Jean Sammet]] and [[Saul Gorn]].{{sfn|Beyer|2009|pp=281\u2013282}}{{sfn|Sammet|1978a|p=200}}\n\nAt the April meeting, the group asked the [[United States Department of Defense|Department of Defense]] (DoD) to sponsor an effort to create a common business language. The delegation impressed Charles A. Phillips, director of the Data System Research Staff at the DoD,<ref name = \"Flahive, Texas Public Radio, 2019\" >{{ cite web | url = https://www.tpr.org/post/how-cobol-still-powers-global-economy-60-years-old | title = How COBOL Still Powers The Global Economy At 60 Years Old | access-date = 19 July 2019 | first = Paul | last = Flahive | date = 24 May 2019 | website = [[Texas Public Radio]] | quote = (Grace Hopper) Nicknamed Grandma Cobol, the code was based on some of her earlier work. She said \u2014 after hearing the rumors \u2014 one of her collaborators went out and bought a granite tombstone. \u201cHe had the word COBOL cut in the front of it. Then he shipped it express collect to Mr. Phillips in the pentagon.\u201d The prank on Charles Phillips, a leader for the project at the defense department, got the attention of the powers that be and was a turning point she said. COBOL would go on to become the most widely used and longest lasting computer languages in history. | archive-url = https://web.archive.org/web/20190524035248/https://www.tpr.org/post/how-cobol-still-powers-global-economy-60-years-old | archive-date = 24 May 2019 | df = dmy-all }}</ref> who thought that they \"thoroughly understood\" the DoD's problems. The DoD operated 225 computers, had a further 175 on order and had spent over $200 million on implementing programs to run on them. Portable programs would save time, reduce costs and ease modernization.{{sfn|Beyer|2009|p=283}}\n\nPhillips agreed to sponsor the meeting and tasked the delegation with drafting the agenda.{{sfn|Beyer|2009|p=284}}\n\n===COBOL 60===\nOn 28 and 29 May 1959 (exactly one year after the Z\u00fcrich [[ALGOL 58]] meeting), a meeting was held at the Pentagon to discuss the creation of a common programming language for business. It was attended by 41 people and was chaired by Phillips.<ref>{{Cite journal | doi = 10.1109/MAHC.1985.10047| title = Early Meetings of the Conference on Data Systems Languages| journal = IEEE Annals of the History of Computing| volume = 7| issue = 4| pages = 316\u2013325| year = 1985 }}</ref> The Department of Defense was concerned about whether it could run the same data processing programs on different computers. [[FORTRAN]], the only mainstream language at the time, lacked the features needed to write such programs.{{sfn|Sammet|2004|p=104}}\n\nRepresentatives enthusiastically described a language that could work in a wide variety of environments, from banking and insurance to utilities and inventory control. They agreed unanimously that more people should be able to program and that the new language should not be restricted by the limitations of contemporary technology. A majority agreed that the language should make maximal use of English, be capable of change, be machine-independent and be easy to use, even at the expense of power.{{sfn|Beyer|2009|p=286}}\n\nThe meeting resulted in the creation of a [[steering committee]] and short-, intermediate- and long-range committees. The short-range committee was given to September (three months) to produce specifications for an interim language, which would then be improved upon by the other committees.{{sfn|Conner|1984|p=ID/9}}{{sfn|Sammet|1978a|p=201}} Their official mission, however, was to identify the strengths and weaknesses of existing programming languages and did not explicitly direct them to create a new language.{{sfn|Sammet|2004|p=104}}\nThe deadline was met with disbelief by the short-range committee.{{sfn|Bemer|1971|p=132}}\nOne member, [[Betty Holberton]], described the three-month deadline as \"gross optimism\" and doubted that the language really would be a stopgap.{{sfn|Beyer|2009|p=288}}\n\nThe steering committee met on 4 June and agreed to name the entire activity as the ''Committee on Data Systems Languages'', or [[CODASYL]], and to form an executive committee.{{sfn|Sammet|1978a|p=203}}\n\nThe short-range committee was made up of members representing six computer manufacturers and three government agencies. The six computer manufacturers were [[Burroughs Corporation]], [[IBM]], [[Honeywell|Minneapolis-Honeywell]] (Honeywell Labs), [[RCA]], [[Sperry Rand]], and [[Sylvania Electric Products]]. The three government agencies were the [[US Air Force]], the Navy's [[David Taylor Model Basin]], and the [[National Bureau of Standards]] (now the National Institute of Standards and Technology).{{sfn|CODASYL|1969|loc=\u00a7 I.2.1.1}} The committee was chaired by [[Joseph Wegstein]] of the US National Bureau of Standards. Work began by investigating data description, statements, existing applications and user experiences.{{sfn|Sammet|1978a|p=204}}\n\nThe committee mainly examined the [[FLOW-MATIC]], [[AIMACO]] and [[COMTRAN]] programming languages.{{sfn|Sammet|2004|p=104}}{{sfn|CODASYL|1969|loc=\u00a7 I.1.2}}\nThe FLOW-MATIC language was particularly influential because it had been implemented and because AIMACO was a derivative of it with only minor changes.{{sfn|Beyer|2009|p=290}}<ref name=cisn>{{cite journal | last = Sammet | first = Jean | authorlink = Jean Sammet | title = The Early History of COBOL | journal = ACM SIGPLAN Notices | volume = 13 | issue = 8 | pages = 121\u2013161 | year = 1978 | doi =10.1145/960118.808378 }}</ref>\nFLOW-MATIC's inventor, Grace Hopper, also served as a technical adviser to the committee.{{sfn|Bemer|1971|p=132}} FLOW-MATIC's major contributions to COBOL were long variable names, English words for commands and the separation of data descriptions and instructions.{{sfn|Sammet|1978a|p=217}}\n\nIBM's COMTRAN language, invented by [[Bob Bemer]], was regarded as a competitor to FLOW-MATIC{{sfn|Beyer|2009|p=292}}{{sfn|Bemer|1971|p=131}} by a short-range committee made up of colleagues of Grace Hopper.{{sfn|Beyer|2009|p=296}}\nSome of its features were not incorporated into COBOL so that it would not look like IBM had dominated the design process,{{sfn|Conner|1984|p=ID/9}} and Jean Sammet said in 1981 that there had been a \"strong anti-IBM bias\" from some committee members (herself included).{{sfn|Sammet|1978a|p=221}}\nIn one case, after Roy Goldfinger, author of the COMTRAN manual and intermediate-range committee member, attended a subcommittee meeting to support his language and encourage the use of algebraic expressions, Grace Hopper sent a memo to the short-range committee reiterating Sperry Rand's efforts to create a language based on English.{{sfn|Beyer|2009|p=291}}\nIn 1980, Grace Hopper commented that \"COBOL 60 is 95% FLOW-MATIC\" and that COMTRAN had had an \"extremely small\" influence. Furthermore, she said that she would claim that work was influenced by both FLOW-MATIC and COMTRAN only to \"keep other people happy [so they] wouldn't try to knock us out\".<ref name=\"Hopper Oral History\">{{cite web | url=http://archive.computerhistory.org/resources/text/Oral_History/Hopper_Grace/102702026.05.01.pdf | title=Oral History of Captain Grace Hopper | publisher=[[Computer History Museum]] | date=December 1980 | accessdate=28 June 2014 | page=37 | archive-url=https://web.archive.org/web/20171225202555/http://archive.computerhistory.org/resources/text/Oral_History/Hopper_Grace/102702026.05.01.pdf | archive-date=25 December 2017 | url-status=dead }}</ref>\nFeatures from COMTRAN incorporated into COBOL included formulas,{{sfn|Sammet|1978a|p=218}} the [[#PICTURE clause|{{code|PICTURE}} clause]],{{sfn|Marcotty|1978|p=268}} an improved <code>IF</code> statement, which obviated the need for [[GO TO]]s, and a more robust file management system.{{sfn|Beyer|2009|p=292}}\n\nThe usefulness of the committee's work was subject of great debate. While some members thought the language had too many compromises and was the result of [[design by committee]], others felt it was better than the three languages examined. Some felt the language was too complex; others, too simple.{{sfn|Sammet|1978a|pp=205\u2013206}}\nControversial features included those some considered useless or too advanced for data processing users. Such features included [[boolean expression]]s, [[formula]]s and table ''{{dfn|subscripts}}'' (indices).{{sfn|Sammet|1978a|loc=Figure 8}}{{sfn|Sammet|1978a|pp=230\u2013231}} Another point of controversy was whether to make keywords context-sensitive and the effect that would have on readability.{{sfn|Sammet|1978a|loc=Figure 8}} Although context-sensitive keywords were rejected, the approach was later used in [[PL/I]] and partially in COBOL from 2002.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2001|p=846}} Little consideration was given to [[interactivity]], interaction with [[operating system]]s (few existed at that time) and functions (thought of as purely mathematical and of no use in data processing).{{sfn|Sammet|1978a|p=220}}{{sfn|Sammet|1978a|p=228}}\n\nThe specifications were presented to the Executive Committee on 4 September. They fell short of expectations: Joseph Wegstein noted that \"it contains rough spots and requires some additions\", and Bob Bemer later described them as a \"hodgepodge\". The subcommittee was given until December to improve it.{{sfn|Bemer|1971|p=132}}\n\nAt a mid-September meeting, the committee discussed the new language's name. Suggestions included \"BUSY\" (Business System), \"INFOSYL\" (Information System Language) and \"COCOSYL\" (Common Computer Systems Language).{{sfn|Sammet|1978a|p=210}} The name \"COBOL\" was suggested by Bob Bemer.<ref>{{cite news | url=https://www.washingtonpost.com/wp-dyn/articles/A4138-2004Jun24.html | title=Computer Pioneer Bob Bemer, 84 | work=The Washington Post | date=25 June 2004 | accessdate=28 June 2014 | page=B06 | first=Patricia | last=Sullivan}}</ref><ref>{{cite web|url=http://www.bobbemer.com/ |title=Thoughts on the Past and Future |accessdate=28 June 2014 |first=Bob |last=Bemer |url-status=dead |archiveurl=https://web.archive.org/web/20140516214531/http://bobbemer.com/ |archivedate=16 May 2014 }}</ref>\n\nIn October, the intermediate-range committee received copies of the [[FACT (computer language)|FACT]] language specification created by [[Roy Nutt]]. Its features impressed the committee so much that they passed a resolution to base COBOL on it.{{sfn|Beyer|2009|p=293}}\nThis was a blow to the short-range committee, who had made good progress on the specification. Despite being technically superior, FACT had not been created with portability in mind or through manufacturer and user consensus. It also lacked a demonstrable implementation,{{sfn|Bemer|1971|p=132}} allowing supporters of a FLOW-MATIC-based COBOL to overturn the resolution. RCA representative Howard Bromberg also blocked FACT, so that RCA's work on a COBOL implementation would not go to waste.{{sfn|Beyer|2009|p=294}}\n\n{{quotebox\n | quote=<poem>\n'And what name do you want inscribed?'\nI said, 'I'll write it for you.' I wrote the name down: COBOL.\n'What kind of name is that?'\n'Well it's a Polish name. We shortened it and got rid of a lot of unnecessary notation.'\n</poem>\n | source=Howard Bromberg on how he bought the COBOL tombstone<ref name=\"Tombstone story\">{{cite journal | url=http://ed-thelen.org/comp-hist/TCMR-V13.pdf | title=The Story of the COBOL Tombstone | journal=The Computer Museum Report | date=Summer 1985 | accessdate=29 June 2014 | volume=13 | pages=8\u20139 | archiveurl=https://web.archive.org/web/20140403015336/http://ed-thelen.org/comp-hist/TCMR-V13.pdf | archivedate=3 April 2014 | url-status=live }}</ref>\n | quoted=1\n}}\n\nIt soon became apparent that the committee was too large for any further progress to be made quickly. A frustrated Howard Bromberg bought a $15 tombstone with \"COBOL\" engraved on it and sent it to Charles Phillips to demonstrate his displeasure.{{efn|The tombstone is currently at the [[Computer History Museum]].<ref>{{cite web | title=COBOL Tombstone | url=http://www.computerhistory.org/collections/catalog/X572.85 | publisher=Computer History Museum | accessdate=29 June 2014}}</ref>}}<ref name=\"Tombstone story\"/>{{sfn|Bemer|1971|p=130}}\nA sub-committee was formed to analyze existing languages and was made up of six individuals:{{sfn|Sammet|2004|p=104}}{{sfn|Beyer|2009|p=289}}\n\n* William Selden and Gertrude Tierney of IBM,\n* Howard Bromberg and Howard Discount of RCA,\n* Vernon Reeves and [[Jean E. Sammet]] of Sylvania Electric Products.\n\nThe sub-committee did most of the work creating the specification, leaving the short-range committee to review and modify their work before producing the finished specification.{{sfn|Sammet|2004|p=104}}\n\nThe specifications were approved by the Executive Committee on 8 January 1960, and sent to the government printing office, which printed these as ''COBOL 60''. The language's stated objectives were to allow efficient, portable programs to be easily written, to allow users to move to new systems with minimal effort and cost, and to be suitable for inexperienced programmers.{{sfn|CODASYL|1969|loc=\u00a7 I.1.1}}\nThe CODASYL Executive Committee later created the COBOL Maintenance Committee to answer questions from users and vendors and to improve and expand the specifications.{{sfn|Brown|1976|p=47}}\n\nDuring 1960, the list of manufacturers planning to build COBOL compilers grew. By September, five more manufacturers had joined CODASYL ([[Bendix Corporation|Bendix]], [[Control Data Corporation]], [[General Electric]] (GE), [[National Cash Register]] and [[Philco]]), and all represented manufacturers had announced COBOL compilers. GE and IBM planned to integrate COBOL into their own languages, GECOM and COMTRAN, respectively. In contrast, [[International Computers and Tabulators]] planned to replace their language, CODEL, with COBOL.{{sfn|Bemer|1971|p=133}}\n\nMeanwhile, RCA and Sperry Rand worked on creating COBOL compilers. The first COBOL program ran on 17 August on an RCA 501.{{sfn|Beyer|2009|p=297}}\nOn 6 and 7 December, the same COBOL program (albeit with minor changes) ran on an RCA computer and a Remington-Rand [[Univac]] computer, demonstrating that compatibility could be achieved.<ref name=\"Williams12\">{{cite book | url=https://books.google.com/books?id=KKmiw-_2gYIC&pg=PT124 | title=Grace Hopper: Admiral of the Cyber Sea | publisher=US Naval Institute Press | isbn=978-1612512655 | date=10 November 2012 | last=Williams | first=Kathleen Broome | oclc=818867202}}</ref>\n\nThe relative influences of which languages were used continues to this day in the recommended advisory printed in all COBOL reference manuals:\n{{quote|COBOL is an industry language and is not the property of any company or group of companies, or of any organization or group of organizations.\nNo warranty, expressed or implied, is made by any contributor or by the CODASYL COBOL Committee as to the accuracy and functioning of the\nprogramming system and language. Moreover, no responsibility is assumed by any contributor, or by the committee, in connection therewith. The authors and copyright holders of the copyrighted material used herein are as follows:\n\n:FLOW-MATIC (trademark of Unisys Corporation), Programming for the UNIVAC (R) I and II, Data Automation Systems, copyrighted 1958, 1959, by Unisys Corporation; IBM Commercial Translator Form No. F28-8013, copyrighted 1959 by IBM; FACT, DSI 27A5260-2760, copyrighted 1960 by Minneapolis-Honeywell.\nThey have specifically authorized the use of this material, in whole or in part, in the COBOL specifications. Such authorization extends to the reproduction and use of COBOL specifications in programming manuals or similar publications.<ref>Compaq Computer Corporation: ''Compaq COBOL Reference Manual'', Order Number: AA\u2013Q2G0F\u2013TK October 2000, Page xviii; Fujitsu Corporation: ''Net Cobol Language Reference'', Version 15, January 2009; IBM Corporation: ''Enterprise COBOL for z/OS Language Reference'', Version 4 Release 1, SC23-8528-00, December 2007</ref>}}\n\n===COBOL-61 to COBOL-65===\n{{quotebox\n | quote=It is rather unlikely that Cobol will be around by the end of the decade.\n | width=30%\n | qouted=1\n | source=Anonymous, June 1960<ref>{{cite journal | url=https://books.google.com/books?id=CLbHc0Acrm4C&pg=RA1-PA67 | title=In defense of Cobol | journal=Computerworld | volume=18 | issue=24 | page=ID/19 | first=Jerome | last=Garfunkel | date=11 November 1984}}</ref>\n}}\n\nMany logical flaws were found in ''COBOL 60'', leading GE's [[Charles Katz]] to warn that it could not be interpreted unambiguously. A reluctant short-term committee enacted a total cleanup and, by March 1963, it was reported that COBOL's syntax was as definable as [[ALGOL]]'s, although semantic ambiguities remained.{{sfn|Bemer|1971|p=133}}\n\nEarly COBOL compilers were primitive and slow. A 1962 US Navy evaluation found compilation speeds of 3\u201311 statements per minute. By mid-1964, they had increased to 11\u20131000 statements per minute. It was observed that increasing memory would drastically increase speed and that compilation costs varied wildly: costs per statement were between $0.23 and $18.91.{{sfn|Bemer|1971|p=134}}\n\nIn late 1962, IBM announced that COBOL would be their primary development language and that development of COMTRAN would cease.{{sfn|Bemer|1971|p=134}}\n\nThe COBOL specification was revised three times in the five years after its publication.\nCOBOL-60 was replaced in 1961 by COBOL-61. This was then replaced by the COBOL-61 Extended specifications in 1963, which introduced the sort and report writer facilities.{{sfn|Brown|1976|p=48}}\nThe added facilities corrected flaws identified by Honeywell in late 1959 in a letter to the short-range committee.{{sfn|Beyer|2009|p=297}}\nCOBOL Edition 1965 brought further clarifications to the specifications and introduced facilities for handling [[mass storage]] files and [[table (information)|tables]].{{sfn|CODASYL|1969|loc=\u00a7 I.2.2.4}}\n\n===COBOL-68===\nEfforts began to standardize COBOL to overcome incompatibilities between versions. In late 1962, both ISO and the United States of America Standards Institute (now [[ANSI]]) formed groups to create standards. ANSI produced ''USA Standard COBOL X3.23'' in August 1968, which became the cornerstone for later versions.{{sfn|CODASYL|1969|loc=\u00a7 I.2.3}} This version was known as American National Standard (ANS) COBOL and was adopted by ISO in 1972.<ref name=\"FS2003\">{{cite book | url=http://dl.acm.org/citation.cfm?id=1074734 | title=Programming language standards | encyclopedia=Encyclopedia of Computer Science | publisher=Wiley | year=2003 | page=1467 | isbn=978-0470864128 | last1=Follet | first1=Robert H. | last2=Sammet | first2=Jean E. | authorlink2=Jean E. Sammet | edition=4th | editor1-first=Anthony | editor1-last=Ralston | editor2-first=Edwin D. | editor2-last=Reilly | editor3-first=David | editor3-last=Hemmendinger |url-access=subscription }}</ref>\n\n===COBOL-74===\nBy 1970, COBOL had become the most widely used programming language in the world.{{sfn|Beyer|2009|p=301}}\n\nIndependently of the ANSI committee, the CODASYL Programming Language Committee was working on improving the language. They described new versions in 1968, 1969, 1970 and 1973, including changes such as new inter-program communication, debugging and file merging facilities as well as improved string-handling and [[library (computing)|library]] inclusion features.{{sfn|Brown|1976|p=49}}\nAlthough CODASYL was independent of the ANSI committee, the ''CODASYL Journal of Development'' was used by ANSI to identify features that were popular enough to warrant implementing.{{sfn|Brown|1976|p=52}}\nThe Programming Language Committee also liaised with [[Ecma International|ECMA]] and the Japanese COBOL Standard committee.{{sfn|Brown|1976|p=49}}\n\nThe Programming Language Committee was not well-known, however. The vice-president, William Rinehuls, complained that two-thirds of the COBOL community did not know of the committee's existence. It was also poor, lacking the funds to make public documents, such as minutes of meetings and change proposals, freely available.<ref>{{cite journal | url=https://books.google.com/books?id=JBUJf4n2QxkC&pg=PT10 | title=Few Realise Wasted Resources of Local DP Schools | journal=Computerworld | volume=6 | issue=31 | pages=11 | first=Alan | last=Taylor | date=2 August 1972}}</ref>\n\nIn 1974, ANSI published a revised version of (ANS) COBOL, containing new features such as [[COBOL#Files|file organizations]], the {{code|DELETE}} statement<ref>{{cite book | url=https://books.google.com/books?id=Cs1RAQAAIAAJ&pg=PA87 | title=Programming in COBOL: A Course of Twelve Television Lectures | publisher=Manchester University Press | year=1974 | page=87 | isbn=978-0719005923 | last=Triance | first=J. M.}}</ref> and the [[memory segmentation|segmentation]] module.{{sfn|Klein|2010|p=16}}\nDeleted features included the {{code|NOTE}} statement, the {{code|EXAMINE}} statement (which was replaced by {{code|INSPECT}}) and the implementer-defined random access module (which was superseded by the new sequential and relative I/O modules). These made up 44 changes, which rendered existing statements incompatible with the new standard.<ref>{{cite techreport | url=http://www.dtic.mil/dtic/tr/fulltext/u2/a039740.pdf | title=Programming Language Standards\u2014Who Needs Them? | date=May 1977 | accessdate=7 January 2014 | pages=19\u201321 | first1=George N. | last1=Baird | first2=Paul | last2=Oliver | section=1974 Standard (X3.23\u20131974) | publisher=[[Department of the Navy]] | archiveurl=https://web.archive.org/web/20140107192439/http://www.dtic.mil/dtic/tr/fulltext/u2/a039740.pdf | archivedate=7 January 2014 | url-status=live}}</ref>\nThe report writer was slated to be removed from COBOL, but was reinstated before the standard was published.<ref>{{cite journal | url=https://books.google.com/books?id=8pMVcgpPyVMC&pg=PA17 | title='Spotty' Availability A Problem... | page=17 | date=23 July 1975 | last=Culleton, John R., Jr. | journal=Computerworld | issn=0010-4841 | volume=9 | issue=30}}</ref><ref>{{cite journal | url=https://books.google.com/books?id=X_3_D4RqzvIC&pg=PA20 | title=Does Cobol's Report Writer Really Miss the Mark? | journal=Computerworld | volume=9 | issue=25 | page=20 | first=Williams B. | last=Simmons | date=18 June 1975 | issn=0010-4841}}</ref> ISO later adopted the updated standard in 1978.<ref name=\"FS2003\"/>\n\n===COBOL-85===\nIn June 1978, work began on revising COBOL-74. The proposed standard (commonly called COBOL-80) differed significantly from the previous one, causing concerns about incompatibility and conversion costs. In January 1981, Joseph T. Brophy, Senior Vice-President of Travelers Insurance, threatened to sue the standard committee because it was not [[forward compatibility|upwards compatible]] with COBOL-74. Mr. Brophy described previous conversions of their 40-million-line code base as \"non-productive\" and a \"complete waste of our programmer resources\".<ref>{{cite journal | url=https://books.google.com/books?id=d514ApKzvjYC | title=User Threatens Suit Over Ansi Cobol-80 | journal=Computerworld | volume=15 | issue=4 | pages=1, 8 | first=Rita | last=Shoor | issn=0010-4841 | date=26 January 1981}}</ref>\nLater that year, the [[Data Processing Management Association]] (DPMA) said it was \"strongly opposed\" to the new standard, citing \"prohibitive\" conversion costs and enhancements that were \"forced on the user\".<ref>{{cite journal | url=https://books.google.com/books?id=1REkdf3I86oC | title=DPMA Takes Stand Against Cobol Draft | journal=Computerworld | volume=15 | issue=43 | pages=1\u20132 | date=26 October 1981 | first=Rita | last=Shoor | issn=0010-4841}}</ref><ref name=\"Computerworld 19 37\">{{cite journal | url=https://books.google.com/books?id=zrOC44tBR68C&pg=PA8 | title=Revised Cobol standard may be ready in late '85 | journal=Computerworld | volume=19 | issue=37 | pages=1, 8 | first=John | last=Gallant | date=16 September 1985 | issn=0010-4841}}</ref>\n\nDuring the first public review period, the committee received 2,200 responses, of which 1,700 were negative form letters.<ref name=\"Computerworld Garfunkel\">{{cite journal | url=https://books.google.com/books?id=zrOC44tBR68C&pg=PA41 | title=Expert addresses Cobol 85 standard | journal=Computerworld | volume=19 | issue=37 | pages=41, 48 | author=<!-- Staff writer(s); no by-line --> | date=16 September 1985 | issn=0010-4841}}</ref>\nOther responses were detailed analyses of the effect COBOL-80 would have on their systems; conversion costs were predicted to be at least 50 cents per line of code. Fewer than a dozen of the responses were in favor of the proposed standard.<ref>{{cite journal | url=https://books.google.com/books?id=Wz-oh7ZQo8MC | title=Responses to Cobol-80 Overwhelmingly Negative | journal=Computerworld | volume=16 | issue=11 | pages=1, 5 | date=15 March 1982 | first=Lois | last=Paul | issn=0010-4841}}</ref>\n\nISO TC97-SC5 installed in 1979 the international COBOL Experts Group, on initiative of [[Wim Ebbinkhuijsen]]. The group consisted of COBOL experts from many countries, including the USA. Its goal was to achieve mutual understanding and respect between ANSI and the rest of the world with regard to the need of new COBOL features. After three years, ISO changed the status of the group to a formal Working Group: [[ISO/IEC JTC 1/SC 22#History|WG4 COBOL]]. The group took primary ownership and development of the COBOL standard, where ANSI did most of the proposals.\n\nIn 1983, the DPMA withdrew its opposition to the standard, citing the responsiveness of the committee to public concerns. In the same year, a National Bureau of Standards study concluded that the proposed standard would present few problems.<ref name=\"Computerworld 19 37\" /><ref>{{cite journal | url=https://books.google.com/books?id=Of5OA6T_6UIC&pg=PA1 | title=Study Sees Few Problems Switching to Cobol-8X | journal=Computerworld | volume=17 | issue=17 | pages=1, 6 | first=Lois | last=Paul | date=25 April 1983}}</ref> A year later, a COBOL-80 compiler was released to [[DEC VAX]] users, who noted that conversion of COBOL-74 programs posed few problems. The new <code>EVALUATE</code> statement and inline <code>PERFORM</code> were particularly well received and improved productivity, thanks to simplified [[control flow]] and [[debugging]].<ref>{{cite journal | url=https://books.google.com/books?id=1qju5_k3q9AC&pg=PA1 | title=DEC users get head start implementing Cobol-80 | journal=Computerworld | volume=18 | issue=47 | pages=1, 6 | first=Paul | last=Gillin | date=19 November 1984 | issn=0010-4841}}</ref>\n\nThe second public review drew another 1,000 (mainly negative) responses, while the last drew just 25, by which time many concerns had been addressed.<ref name=\"Computerworld 19 37\"/>\n\nIn 1985, the ISO Working Group 4 accepted the then-version of the ANSI proposed standard, made several changes and set it as the new ISO standard COBOL 85. It was published in late 1985.\n\nSixty features were changed or deprecated and many{{quantify|date=March 2014}} were added, such as:{{sfn|Garfunkel|1987|p=150}}<ref>{{cite book | url=https://books.google.com/books?id=N066w1XgJXcC&pg=PA438&lpg=PA438#v=onepage&q&f=false | title=COBOL Programming: Problems and Solutions | publisher=McGraw-Hill Education | pages=438\u2013451 | isbn=978-0074603185 | first1=M. K. | last1=Roy | first2=D. Ghost | last2=Dastidar | date=1 June 1989 | edition=2nd | section=Features of COBOL-85}}</ref>\n\n* Scope terminators (<code>END-IF</code>, <code>END-PERFORM</code>, <code>END-READ</code>, etc.)\n* Nested subprograms\n* <code>CONTINUE</code>, a [[Placeholder (Computer syntax)|no-operation statement]]\n* <code>EVALUATE</code>, a [[switch statement]]\n* <code>INITIALIZE</code>, a statement that can set groups of data to their default values\n* Inline <code>PERFORM</code> loop bodies \u2013 previously, loop bodies had to be specified in a separate procedure\n* Reference modification, which allows access to substrings\n* I/O status codes.\n\nThe new standard was adopted by all national standard bodies, including ANSI.<ref name=\"FS2003\"/>\n\nTwo amendments followed in 1989 and 1993, the first introducing intrinsic functions and the other providing corrections.,<ref name=\"FS2003\" />\n\n===COBOL 2002 and object-oriented COBOL===\nIn 1997, [[Gartner Group]] estimated that there were a total of 200 billion lines of COBOL in existence, which ran 80% of all business programs.<ref>{{cite web | url=http://fcw.com/Articles/2009/07/13/TECH-COBOL-turns-50.aspx | title=Cobol remains old standby at agencies despite showing its age | publisher=Public Sector Media Group | work=FCW | accessdate=26 April 2014 | date=9 July 2009 | last=Robinson | first=Brian}}</ref>{{better source | reason=While this claim is ubiquitous, the actual Gartner report is needed to verify the claim. | date=January 2015}}\n\nIn the early 1990s, work began on adding object-orientation in the next full revision of COBOL. Object-oriented features were taken from [[C++]] and [[Smalltalk]].<ref name=\"SW95\">{{cite web | url=http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/1995/9510/9510e/9510e.htm | title=COBOL '97: A Status Report | work=Dr. Dobb's Journal | date=October 1995 | accessdate=21 April 2014 | last1=Saade | first1=Henry | first2=Ann | last2=Wallace | archive-url=https://web.archive.org/web/20140422232229/http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/1995/9510/9510e/9510e.htm | archive-date=22 April 2014 | url-status=dead }}</ref><ref name=\"Arranga98\">{{cite book | url=https://books.google.com/books?id=posN1cl6XFUC&pg=PA15 | title=Object-Oriented COBOL | publisher=[[Cambridge University Press]] | page=15 | isbn=978-0132611404 | first1=Edmund C. | last1=Arranga | first2=Frank P. | last2=Coyle | date=February 1998 | quote=Object-Oriented COBOL's style reflects the influence of Smalltalk and C++.}}</ref>\nThe initial estimate was to have this revision completed by 1997, and an ISO Committee Draft (CD) was available by 1997. Some vendors (including [[Micro Focus International|Micro Focus]], [[Fujitsu]], and [[IBM]]) introduced object-oriented syntax based on drafts of the full revision. The final approved ISO standard was approved and published in late 2002.<ref name=\"cobolstandards.com\">{{cite web | url=http://www.cobolstandards.com/ | title=COBOL Standards | accessdate=2 September 2014 | archiveurl=https://web.archive.org/web/20040331054413/http://www.cobolstandards.com/ | archivedate=31 March 2004 | publisher=Micro Focus | url-status=dead}}</ref>\n\nFujitsu/GTSoftware,<ref>{{cite web | url=http://www.netcobol.com/product/netcobol-for-net/ | title=NetCOBOL for .Net | publisher=GTSoftware | work=netcobol.com | year=2013 | accessdate=29 January 2014 | url-status=dead | archiveurl=https://web.archive.org/web/20140708210107/http://www.netcobol.com/product/netcobol-for-net/ | archivedate=8 July 2014}}</ref> Micro Focus and [[RainCode]] introduced object-oriented COBOL compilers targeting the [[.NET Framework]].\n\nThere were many other new features, many of which had been in the ''CODASYL COBOL Journal of Development'' since 1978 and had missed the opportunity to be included in COBOL-85.<ref>{{cite web | url=https://books.google.com/books?id=VQhbdDusHcsC&pg=RA1-PA60 | title=A list of Codasyl Cobol features | work=Computerworld | date=10 September 1984 | accessdate=8 June 2014 | author=<!-- Staff writer(s); No by-line --> | page=ID/28 | issn=0010-4841 | volume=18 | issue=37}}</ref> These other features included:{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2001|loc=Annex F}}{{sfn|Klein|2010|p=21}}\n\n* Free-form code\n* [[User-defined function]]s\n* [[Recursion]]\n* [[Locale (computer software)|Locale]]-based processing\n* Support for extended character sets such as [[Unicode]]\n* [[Floating-point]] and [[binary number|binary]] data types (until then, binary items were truncated based on their declaration's [[base-10]] specification)\n* Portable arithmetic results\n*[[Bit]] and [[Boolean data type|boolean]] data types\n* [[Pointer (computer programming)|Pointers]] and syntax for getting and freeing storage\n* The {{code|SCREEN SECTION}} for [[text-based user interface]]s\n* The {{code|VALIDATE}} facility\n* Improved interoperability with other programming languages and [[Application framework|framework environments]] such as .NET and [[Java (platform)|Java]].\n\nThree [[Erratum|corrigenda]] were published for the standard: two in 2006 and one in 2009.<ref name=\"WG4 Website\">{{cite web | url=http://www.cobolstandard.info/wg4/wg4.html | title=JTC1/SC22/WG4 \u2013 COBOL | publisher=ISO | date=30 June 2010 | accessdate=27 April 2014 | archiveurl=https://web.archive.org/web/20140214225220/http://www.cobolstandard.info/wg4/wg4.html | archivedate=14 February 2014 | url-status=dead}}</ref>\n\n===COBOL 2014===\nBetween 2003 and 2009, three technical reports were produced describing [[finalizer|object finalization]], [[XML]] processing and [[collection class]]es for COBOL.<ref name=\"WG4 Website\"/>\n\nCOBOL 2002 suffered from poor support: no compilers completely supported the standard. Micro Focus found that it was due to a lack of user demand for the new features and due to the abolition of the [[NIST]] test suite, which had been used to test compiler conformance. The standardization process was also found to be slow and under-resourced.<ref>{{cite web | url=http://www.cobolstandard.info/j4/files/08-0034.pdf | title=Thoughts on the Future of COBOL Standardization | date=27 February 2008 | accessdate=14 August 2014 | first1=John | last1=Billman | first2=Huib | last2=Klink | archiveurl=https://web.archive.org/web/20090711032647/http://www.cobolstandard.info/j4/files/08-0034.pdf | archivedate=11 July 2009 | url-status=dead}}</ref>\n\nCOBOL 2014 includes the following changes:{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=Annex E}}\n* Portable arithmetic results have been replaced by [[IEEE 754]] data types\n* Major features have been made optional, such as the <code>VALIDATE</code> facility, the report writer and the screen-handling facility.\n* Method overloading\n* Dynamic capacity tables (a feature dropped from the draft of COBOL 2002)<ref>{{cite web | url=http://www.microfocus.com/Standards/ | title=J4: COBOL Standardization | publisher=Micro Focus | date=2 December 1998 | accessdate=12 July 2014 | archiveurl=https://web.archive.org/web/19990224043617/http://www.microfocus.com/Standards/ | archivedate=24 February 1999 | url-status=dead | first=Don | last=Schricker}}</ref>\n\n===Legacy===\nCOBOL programs are used globally in governments and businesses and are running on diverse operating systems such as [[z/OS]], [[z/VSE]], [[ICL VME|VME]], [[Unix]], [[OpenVMS]] and [[Microsoft Windows|Windows]]. In 1997, the [[Gartner Group]] reported that 80% of the world's business ran on COBOL with over 200 billion lines of code and 5 billion lines more being written annually.<ref>{{cite journal |url=http://proc.isecon.org/2000/126/ISECON.2000.Kizior.pdf | title=Does COBOL Have a Future? |accessdate=30 September 2012 |first1=Ronald J. |last1=Kizior |first2=Donald |last2=Carr |first3=Paul |last3=Halpern |journal=The Proceedings of the Information Systems Education Conference 2000 |volume=17 |issue=126 | url-status=dead | archiveurl=https://web.archive.org/web/20160817115437/http://proc.isecon.org/2000/126/ISECON.2000.Kizior.pdf | archivedate=17 August 2016}}</ref>\n\nNear the end of the 20th century, the [[year 2000 problem]] (Y2K) was the focus of significant COBOL programming effort, sometimes by the same programmers who had designed the systems decades before. The particular level of effort required to correct COBOL code has been attributed{{by whom|date=March 2014}} to the large amount of business-oriented COBOL, as business applications use dates heavily, and to fixed-length data fields. After the clean-up effort put into these programs for Y2K, a 2003 survey found that many remained in use.{{sfn|Carr|Kizior|2003|p=16}}\nThe authors said that the survey data suggest \"a gradual decline in the importance of Cobol in application development over the [following] 10 years unless ... integration with other languages and technologies can be adopted\".{{sfn|Carr|Kizior|2003|p=10}}\n\nIn 2006 and 2012, ''[[Computerworld]]'' surveys found that over 60% of organizations used COBOL (more than [[C++]] and [[Visual Basic .NET]]) and that for half of those, COBOL was used for the majority of their internal software.<ref name=\"Computerworld Not Dead Yet\">{{cite web | url=http://www.computerworld.com/s/article/266156/Cobol_Not_Dead_Yet | title=Cobol: Not Dead Yet | work=Computerworld | date=4 October 2006 | accessdate=27 April 2014 | last=Mitchell | first=Robert L.}}</ref><ref>{{cite web | url=http://www.computerworld.com/s/article/9225099/Cobol_brain_drain_Survey_results | title=Cobol brain drain: Survey results | work=Computerworld | date=14 March 2012 | accessdate=27 April 2014 | author=<!-- N/A -->}}</ref> 36% of managers said they planned to migrate from COBOL, and 25% said they would like to if it was cheaper. Instead, some businesses have migrated their systems from expensive mainframes to cheaper, more modern systems, while maintaining their COBOL programs.<ref name=\"Computerworld Not Dead Yet\" />\n\nTestimony before the [[Committee on Oversight and Government Reform|House of Representatives]] in 2016 indicated that COBOL is still in use by many federal agencies.<ref name = \"Powner, GAO, 2016\" >{{ cite web | url = https://www.gao.gov/assets/680/677454.pdf | title = Federal Agencies Need to Address Aging Legacy Systems | access-date = 19 July 2019 | first = David A. | last = Powner | date = 25 May 2016 | website = [[Government Accountability Office]] | quote = Several agencies, such as the Department of Agriculture (USDA), DHS, HHS, Justice, Treasury, and VA, reported using Common Business Oriented Language (COBOL)\u2014a programming language developed in the late 1950s and early 1960s\u2014to program their legacy systems. It is widely known that agencies need to move to more modern, maintainable languages, as appropriate and feasible. | page = 18 | archive-url = https://web.archive.org/web/20160615044750/https://www.gao.gov/assets/680/677454.pdf | archive-date = 15 June 2016 | df = dmy-all }}</ref>\n\n==Features==\n\n===Syntax===\nCOBOL has an English-like syntax, which is used to describe nearly everything in a program. For example, a condition can be expressed as &nbsp;{{code|x IS GREATER THAN y|lang=cobolfree}} or more concisely as &nbsp;{{code|x GREATER y|lang=cobolfree}}&nbsp; or &nbsp;{{code|x > y|lang=cobolfree}}. More complex conditions can be \"abbreviated\" by removing repeated conditions and variables. For example, &nbsp;{{code|1=a > b AND a > c OR a = d|lang=cobolfree}}&nbsp; can be shortened to {{code|1=a > b AND c OR = d|lang=cobolfree}}. As a consequence of this English-like syntax, COBOL has over 300 [[keyword (computer programming)|keywords]].{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 8.9}}{{efn|Vendor-specific extensions cause many implementations to have far more: one implementation recognizes over 1,100 keywords.<ref>{{cite web | url=http://documentation.microfocus.com/help/topic/com.microfocus.eclipse.infocenter.visualcobol.vs2013/HRLHLHARES01U005.html | title=Reserved Words Table | publisher=[[Micro Focus]] | work=Micro Focus Visual COBOL 2.2 COBOL Language Reference | accessdate=3 March 2014}}</ref>}} Some of the keywords are simple alternative or pluralized spellings of the same word, which provides for more English-like statements and clauses; e.g., the {{code|IN}} and {{code|OF}} keywords can be used interchangeably, as can {{code|IS}} and {{code|ARE}}, and {{code|VALUE}} and {{code|VALUES}}.\n\nEach COBOL program is made up of four basic [[lexical items]]: words, literals, picture character-strings (see {{slink||PICTURE clause}}) and separators. Words include reserved words and user-defined identifiers. They are up to 31 characters long and may include letters, digits, hyphens and underscores. Literals include numerals (e.g. {{code|12}}) and strings (e.g. {{code|'Hello!'}}).{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 8.3.1.2}} Separators include the space character and commas and semi-colons followed by a space.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 8.3.2}}\n\nA COBOL program is split into four divisions: the identification division, the environment division, the data division and the procedure division. The identification division specifies the name and type of the source element and is where classes and interfaces are specified. The environment division specifies any program features that depend on the system running it, such as [[computer files|files]] and [[character sets]]. The data division is used to declare [[variable (computer science)|variable]]s and [[parameter (computer programming)|parameter]]s. The procedure division contains the program's [[statement (computer science)|statement]]s. Each division is sub-divided into sections, which are made up of paragraphs.\n\n====Metalanguage====\n\nCOBOL's syntax is usually described with a unique [[metalanguage]] using braces, brackets, bars and underlining. The metalanguage was developed for the original COBOL specifications. Although [[Backus\u2013Naur form]] did exist at the time, the committee had not heard of it.{{sfn|Shneiderman|1985|p=349}}\n\n{| class=\"wikitable\"\n|+ Elements of COBOL's metalanguage\n|-\n! Element\n! Appearance\n! Function\n|-\n|-\n| All capitals\n| EXAMPLE\n| Reserved word\n|-\n| Underlining\n| {{underline|EXAMPLE}}\n| The reserved word is compulsory\n|-\n| Braces\n| { }\n| Only one option may be selected\n|-\n| Brackets\n| []\n| Zero or one options may be selected\n|-\n| Ellipsis\n| ...\n| The preceding element may be repeated\n|-\n| rowspan=\"2\" | Bars\n| {{{pipe}} {{pipe}}}\n| One or more options may be selected. Any option may only be selected once.\n|-\n| [{{pipe}} {{pipe}}]\n| Zero or more options may be selected. Any option may only be selected once.\n|}\n\nAs an example, consider the following description of an <code>ADD</code> statement:\n\n<math>\n\\begin{array}{l}\n  \\underline{\\text{ADD}}\\,\n  \\begin{Bmatrix}\n    \\text{identifier-1} \\\\\n    \\text{literal-1}\n  \\end{Bmatrix}\\dots\n  \\;\\underline{\\text{TO}}\\,\\left\\{\\text{identifier-2}\\,\\left[\\,\\underline{\\text{ROUNDED}}\\,\\right]\\right\\}\\dots\n  \\\\\n\n  \\quad\n  \\left[\\left|\\begin{array}{l}\n     \\text{ON}\\,\\underline{\\text{SIZE}}\\,\\underline{\\text{ERROR}}\\,\\text{imperative-statement-1} \\\\\n     \\underline{\\text{NOT}}\\,\\text{ON}\\,\\underline{\\text{SIZE}}\\,\\underline{\\text{ERROR}}\\,\\text{imperative-statement-2} \\\\\n  \\end{array}\\right|\\right]\n  \\\\\n\n  \\quad\n  \\left[\\,\\underline{\\text{END-ADD}}\\,\\right]\n\\end{array}\n</math>\n\nThis description permits the following variants:\n\n<syntaxhighlight lang=\"cobolfree\">\nADD 1 TO x\nADD 1, a, b TO x ROUNDED, y, z ROUNDED\n\nADD a, b TO c\n    ON SIZE ERROR\n        DISPLAY \"Error\"\nEND-ADD\n\nADD a TO b\n    NOT SIZE ERROR\n        DISPLAY \"No error\"\n    ON SIZE ERROR\n        DISPLAY \"Error\"\n</syntaxhighlight>\n\n===Code format===\nCOBOL can be written in two formats: fixed (the default) or free. In fixed-format, code must be aligned to fit in certain areas (a hold-over from using punched cards). Until COBOL 2002, these were:\n\n{| class=\"wikitable\"\n|-\n! Name\n! Column(s)\n! Usage\n|-\n| Sequence number area\n| 1\u20136\n| Originally used for card/line numbers, this area is ignored by the compiler\n|-\n| Indicator area\n| 7\n| The following characters are allowed here:\n* <code>*</code> \u2013 Comment line\n* <code>/</code> \u2013 Comment line that will be printed on a new page of a source listing\n* <code>-</code> \u2013 Continuation line, where words or literals from the previous line are continued\n* <code>D</code> \u2013 Line enabled in debugging mode, which is otherwise ignored\n|-\n| Area A\n| 8\u201311\n| This contains: <code>DIVISION</code>, <code>SECTION</code> and procedure headers; 01 and 77 level numbers and file/report descriptors\n|-\n| Area B\n| 12\u201372\n| Any other code not allowed in Area A\n|-\n| Program name area\n| 73\u2013\n| Historically up to column 80 for punched cards, it is used to identify the program or sequence the card belongs to\n|}\n\nIn COBOL 2002, Areas A and B were merged to form the program-text area, which now ends at an implementor-defined column.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2001|loc=\u00a7 F.2}}\n\nCOBOL 2002 also introduced free-format code. Free-format code can be placed in any column of the file, as in newer programming languages. Comments are specified using <code>*></code>, which can be placed anywhere and can also be used in fixed-format source code. Continuation lines are not present, and the <code>>>PAGE</code> directive replaces the <code>/</code> indicator.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2001|loc=\u00a7 F.2}}\n\n===Identification division===\nThe identification division identifies the following code entity and contains the definition of a class or interface.\n\n====Object-oriented programming====\n[[class (computer programming)|Classes]] and [[Interface (object-oriented programming)|interfaces]] have been in COBOL since 2002. Classes have factory objects, containing class [[method (computer programming)|methods]] and variables, and instance objects, containing instance methods and variables.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 D.18.2}} Inheritance and interfaces provide [[polymorphism (computer science)|polymorphism]]. Support for [[generic programming]] is provided through parameterized classes, which can be instantiated to use any class or interface. Objects are stored as references which may be restricted to a certain type. There are two ways of calling a method: the {{code|INVOKE}} statement, which acts similarly to {{code|CALL}}, or through inline method invocation, which is analogous to using functions.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 D.18}}\n\n<syntaxhighlight lang=\"cobolfree\">\n*> These are equivalent.\nINVOKE my-class \"foo\" RETURNING var\nMOVE my-class::\"foo\" TO var *> Inline method invocation\n</syntaxhighlight>\n\nCOBOL does not provide a way to [[Member visibility|hide]] methods. Class data can be hidden, however, by declaring it without a [[property (programming)|{{code|PROPERTY}}]] clause, which leaves the user with no way to access it.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|p=108}} [[Method overloading]] was added in COBOL 2014.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|p=896}}\n\n===Environment division===\nThe environment division contains the configuration section and the input-output section. The configuration section is used to specify variable features such\nas currency signs, locales and character sets. The input-output section contains file-related information.\n\n====Files====\nCOBOL supports three file formats, or ''{{dfn|organizations}}'': sequential, indexed and relative. In sequential files, records are contiguous and must be traversed [[sequential access|sequentially]], similarly to a [[linked list]]. Indexed files have one or more indexes which allow records to be [[random access|randomly accessed]] and which can be sorted on them. Each record must have a [[unique key]], but other, ''{{dfn|alternate}}'', record keys need not be unique. Implementations of indexed files vary between vendors, although common implementations, such as [[C-ISAM|C&#8209;ISAM]] and [[VSAM]], are based on IBM's [[ISAM]]. Relative files, like indexed files, have a unique record key, but they do not have alternate keys. A relative record's key is its ordinal position; for example, the 10th record has a key of 10. This means that creating a record with a key of 5 may require the creation of (empty) preceding records. Relative files also allow for both sequential and random access.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 D.2.1}}\n\nA common non-standard extension is the ''{{dfn|line sequential}}'' organization, used to process text files. Records in a file are terminated by a [[newline]] and may be of varying length.<ref>{{cite web | url=http://supportline.microfocus.com/documentation/books/nx30books/fhorgs.htm | title=File Organizations | publisher=Micro Focus | work=File Handling | date=1998 | accessdate=27 June 2014}}</ref>\n\n===Data division===\nThe data division is split into six sections which declare different items: the file section, for file records; the working-storage section, for [[static variable]]s; the local-storage section, for [[automatic variable]]s; the linkage section, for parameters and the return value; the report section and the screen section, for [[text-based user interface]]s.\n\n====Aggregated data====\nData items in COBOL are declared hierarchically through the use of level-numbers which indicate if a data item is part of another. An item with a higher level-number is subordinate to an item with a lower one. Top-level data items, with a level-number of 1, are called ''{{dfn|records}}''. Items that have subordinate aggregate data are called ''{{dfn|group items}}''; those that do not are called ''{{dfn|elementary items}}''. Level-numbers used to describe standard data items are between 1 and 49.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 8.5.1.2}}{{sfn|Cutler|2014|loc=Appendix A}}\n\n<syntaxhighlight lang=\"cobol\">\n       01  some-record.                   *> Aggregate group record item\n           05  num            PIC 9(10).  *> Elementary item\n           05  the-date.                  *> Aggregate (sub)group record item\n               10  the-year   PIC 9(4).   *> Elementary item\n               10  the-month  PIC 99.     *> Elementary item\n               10  the-day    PIC 99.     *> Elementary item\n</syntaxhighlight>\n\nIn the above example, elementary item {{code|num}} and group item {{code|the-date}} are subordinate to the record {{code|some-record}}, while elementary items {{code|the-year}}, {{code|the-month}}, and {{code|the-day}} are part of the group item {{code|the-date}}.\n\nSubordinate items can be disambiguated with the {{code|IN}} (or {{code|OF}}) keyword. For example, consider the example code above along with the following example:\n<syntaxhighlight lang=\"cobol\">\n       01  sale-date.\n           05  the-year       PIC 9(4).\n           05  the-month      PIC 99.\n           05  the-day        PIC 99.\n</syntaxhighlight>\n\nThe names {{code|the-year}}, {{code|the-month}}, and {{code|the-day}} are ambiguous by themselves, since more than one data item is defined with those names. To specify a particular data item, for instance one of the items contained within the {{code|sale-date}} group, the programmer would use {{code|the-year IN sale-date}} (or the equivalent {{code|the-year OF sale-date}}). (This syntax is similar to the \"dot notation\" supported by most contemporary languages.)\n\n====Other data levels====\nA level-number of 66 is used to declare a re-grouping of previously defined items, irrespective of how those items are structured. This data level, also referred to by the associated {{dfn|{{code|RENAMES}} clause}}, is rarely used<ref>{{cite book | title=Sams Teach Yourself COBOL in 24 hours | publisher=[[Sams|SAMS Publishing]] | year=1999 | pages=40 | isbn=978-0672314537 | first=Thane | last=Hubbell | lccn=98087215}}</ref> and, circa 1988, was usually found in old programs. Its ability to ignore the hierarchical and logical structure data meant its use was not recommended and many installations forbade its use.{{sfn|McCracken|Golden|1988|loc=\u00a7 19.9}}\n<syntaxhighlight lang=\"cobol\">\n       01  customer-record.\n           05  cust-key            PIC X(10).\n           05  cust-name.\n               10  cust-first-name PIC X(30).\n               10  cust-last-name  PIC X(30).\n           05  cust-dob            PIC 9(8).\n           05  cust-balance        PIC 9(7)V99.\n           \n       66  cust-personal-details   RENAMES cust-name THRU cust-dob.\n       66  cust-all-details        RENAMES cust-name THRU cust-balance.\n</syntaxhighlight>\n\nA 77 level-number indicates the item is stand-alone, and in such situations is equivalent to the level-number 01. For example, the following code declares two 77-level data items, {{code|property-name}} and {{code|sales-region}}, which are non-group data items that are independent of (not subordinate to) any other data items:\n<syntaxhighlight lang=\"cobol\">\n       77  property-name      PIC X(80).\n       77  sales-region       PIC 9(5).\n</syntaxhighlight>\n\nAn 88 level-number declares a ''{{dfn|condition name}}'' (a so-called 88-level) which is true when its parent data item contains one of the values specified in its {{code|VALUE}} clause.{{sfn|Cutler|2014|loc=\u00a7 5.8.5}} For example, the following code defines two 88-level condition-name items that are true or false depending on the current character data value of the {{code|wage-type}} data item. When the data item contains a value of {{code|'H'}}, the condition-name {{code|wage-is-hourly}} is true, whereas when it contains a value of {{code|'S'}} or {{code|'Y'}}, the condition-name {{code|wage-is-yearly}} is true. If the data item contains some other value, both of the condition-names are false.\n<syntaxhighlight lang=\"cobol\">\n       01  wage-type          PIC X.\n           88  wage-is-hourly VALUE \"H\".\n           88  wage-is-yearly VALUE \"S\", \"Y\".\n</syntaxhighlight>\n\n====Data types====\nStandard COBOL provides the following data types:{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 8.5.2}}\n\n{| class=\"wikitable\"\n|-\n! Data type\n! Sample declaration\n! Notes\n|-\n| Alphabetic\n| {{code|PIC A(30)|lang=cobolfree}}\n| May only contain letters or spaces\n|-\n| Alphanumeric\n| {{code|PIC X(30)|lang=cobolfree}}\n| May contain any characters\n|-\n| Boolean\n| {{code|PIC 1 USAGE BIT|lang=cobolfree}}\n| Data stored in the form of 0s and 1s, as a binary number\n|-\n| Index\n| {{code|USAGE INDEX|lang=cobolfree}}\n| Used to reference table elements\n|-\n| National\n| {{code|PIC N(30)|lang=cobolfree}}\n| Similar to alphanumeric, but using an extended character set, e.g. [[UTF-8]]\n|-\n| Numeric\n| {{code|PIC 9(5)V9(5)|lang=cobolfree}}\n| May contain only numbers\n|-\n| Object\n| {{code|USAGE OBJECT REFERENCE|lang=cobolfree}}\n| May reference either an object or <code>NULL</code>\n|-\n| Pointer\n| {{code|USAGE POINTER|lang=cobolfree}}\n|\n|}\n\nType safety is variable in COBOL. Numeric data is converted between different representations and sizes silently and alphanumeric data can be placed in any data item that can be stored as a string, including numeric and group data.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 14.9.24}} In contrast, object references and pointers may only be assigned from items of the same type and their values may be restricted to a certain type.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 14.9.35}}\n\n=====PICTURE clause=====\nA {{code|PICTURE}} (or {{code|PIC}}) clause is a string of characters, each of which represents a portion of the data item and what it may contain. Some picture characters specify the type of the item and how many characters or digits it occupies in memory. For example, a {{code|9}} indicates a decimal digit, and an {{code|S}} indicates that the item is [[signedness|signed]]. Other picture characters (called ''{{dfn|insertion}}'' and ''{{dfn|editing}}'' characters) specify how an item should be formatted. For example, a series of {{code|+}} characters define character positions as well as how a leading sign character is to be positioned within the final character data; the rightmost non-numeric character will contain the item's sign, while other character positions corresponding to a {{code|+}} to the left of this position will contain a space. Repeated characters can be specified more concisely by specifying a number in parentheses after a picture character; for example, {{code|9(7)}} is equivalent to {{code|9999999}}. Picture specifications containing only digit ({{code|9}}) and sign ({{code|S}}) characters define purely ''{{dfn|numeric}}'' data items, while picture specifications containing alphabetic ({{code|A}}) or alphanumeric ({{code|X}}) characters define ''{{dfn|alphanumeric}}'' data items. The presence of other formatting characters define ''{{dfn|edited numeric}}'' or ''{{dfn|edited alphanumeric}}'' data items.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 13.18.40}}\n\n{| class=\"wikitable\"\n|+ Examples\n|-\n! {{code|PICTURE}} clause\n! Value in\n! Value out\n|-\n| rowspan=\"2\" | {{code|PIC 9(5)|lang=cobolfree}}\n| {{code|100}}\n| {{code|00100}}\n|-\n| {{code|\"Hello\"}}\n| {{code|\"Hello\"}} (this is legal, but results in [[undefined behavior]]){{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 14.9.24}}\n|-\n| {{code|PIC +++++|lang=cobolfree}}\n| {{code|-10}}\n| <code>\"&nbsp;&nbsp;-10\"</code><!-- {{code|   -10}} deletes one of the spaces --> (note leading spaces)\n|-\n| {{code|PIC 99/99/9(4)|lang=cobolfree}}\n| {{code|31042003}}\n| {{code|\"31/04/2003\"}}\n|-\n| rowspan=\"2\" | {{code|PIC *(4)9.99|lang=cobolfree}}\n| {{code|100.50}}\n| {{code|\"**100.50\"}}\n|-\n| <code>0</code> <!-- {{code|0}} produces a space for some reason -->\n| {{code|\"****0.00\"}}\n|-\n| {{code|PIC X(3)BX(3)BX(3)|lang=cobolfree}}\n| {{code|\"ABCDEFGHI\"}}\n| {{code|\"ABC DEF GHI\"}}\n|}\n\n=====USAGE clause=====\nThe {{code|USAGE}} clause declares the format data is stored in. Depending on the data type, it can either complement or be used instead of a {{code|PICTURE}} clause. While it can be used to declare pointers and object references, it is mostly geared towards specifying numeric types. These numeric formats are:{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 13.18.60.3}}\n\n* Binary, where a minimum size is either specified by the <code>PICTURE</code> clause or by a <code>USAGE</code> clause such as <code>BINARY-LONG</code>.\n* {{code|USAGE COMPUTATIONAL|lang=cobolfree}}, where data may be stored in whatever format the implementation provides; often equivalent to &nbsp;{{code|USAGE BINARY|lang=cobolfree}}\n* {{code|USAGE DISPLAY|lang=cobolfree}}, the default format, where data is stored as a string\n* Floating-point, in either an implementation-dependent format or according to IEEE 754.\n* {{code|USAGE NATIONAL|lang=cobolfree}}, where data is stored as a string using an extended character set\n* {{code|USAGE PACKED-DECIMAL|lang=cobolfree}}, where data is stored in the smallest possible decimal format (typically [[packed binary-coded decimal]])\n\n====Report writer====\nThe report writer is a [[declarative programming|declarative facility]] for creating reports. The programmer need only specify the report layout and the data required to produce it, freeing them from having to write code to handle things like page breaks, data formatting, and headings and footings.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|p=855}}\n\nReports are associated with report files, which are files which may only be written to through report writer statements.\n\n<syntaxhighlight lang=\"cobol\">\n       FD  report-out REPORT sales-report.\n</syntaxhighlight>\n\nEach report is defined in the report section of the data division. A report is split into report groups which define the report's headings, footings and details. Reports work around hierarchical ''{{dfn|control breaks}}''. Control breaks occur when a key variable changes it value; for example, when creating a report detailing customers' orders, a control break could occur when the program reaches a different customer's orders. Here is an example report description for a report which gives a salesperson's sales and which warns of any invalid records:\n\n<syntaxhighlight lang=\"cobol\">\n       RD  sales-report\n           PAGE LIMITS 60 LINES\n           FIRST DETAIL 3\n           CONTROLS seller-name.\n\n       01  TYPE PAGE HEADING.\n           03  COL 1                    VALUE \"Sales Report\".\n           03  COL 74                   VALUE \"Page\".\n           03  COL 79                   PIC Z9 SOURCE PAGE-COUNTER.\n\n       01  sales-on-day TYPE DETAIL, LINE + 1.\n           03  COL 3                    VALUE \"Sales on\".\n           03  COL 12                   PIC 99/99/9999 SOURCE sales-date.\n           03  COL 21                   VALUE \"were\".\n           03  COL 26                   PIC $$$$9.99 SOURCE sales-amount.\n\n       01  invalid-sales TYPE DETAIL, LINE + 1.\n           03  COL 3                    VALUE \"INVALID RECORD:\".\n           03  COL 19                   PIC X(34) SOURCE sales-record.\n\n       01  TYPE CONTROL HEADING seller-name, LINE + 2.\n           03  COL 1                    VALUE \"Seller:\".\n           03  COL 9                    PIC X(30) SOURCE seller-name.\n</syntaxhighlight>\n\nThe above report description describes the following layout:\n<pre>\nSales Report                                                             Page  1\n\nSeller: Howard Bromberg\n  Sales on 10/12/2008 were $1000.00\n  Sales on 12/12/2008 were    $0.00\n  Sales on 13/12/2008 were   $31.47\n  INVALID RECORD: Howard Bromberg             XXXXYY\n\nSeller: Howard Discount\n...\nSales Report                                                            Page 12\n\n  Sales on 08/05/2014 were  $543.98\n  INVALID RECORD: William Selden      12O52014FOOFOO\n  Sales on 30/05/2014 were    $0.00\n</pre>\n\nFour statements control the report writer: {{code|INITIATE}}, which prepares the report writer for printing; {{code|GENERATE}}, which prints a report group; {{code|SUPPRESS}}, which suppresses the printing of a report group; and {{code|TERMINATE}}, which terminates report processing. For the above sales report example, the procedure division might look like this:\n\n<syntaxhighlight lang=\"cobol\">\n           OPEN INPUT sales, OUTPUT report-out\n           INITIATE sales-report\n \n           PERFORM UNTIL 1 <> 1\n               READ sales\n                   AT END\n                       EXIT PERFORM\n               END-READ\n \n               VALIDATE sales-record\n               IF valid-record\n                   GENERATE sales-on-day\n               ELSE\n                   GENERATE invalid-sales\n               END-IF\n           END-PERFORM\n \n           TERMINATE sales-report\n           CLOSE sales, report-out\n           .\n</syntaxhighlight>\n\nUse of the Report Writer facility tended to vary considerably; some organizations used it extensively and some not at all.{{sfn|McCracken|1976|p=338}}  In addition, implementations of Report Writer ranged in quality, with those at the lower end sometimes using excessive amounts of memory at runtime.{{sfn|McCracken|1976|p=338}}\n\n===Procedure division===\n\n====Procedures====\nThe sections and paragraphs in the procedure division (collectively called procedures) can be used as [[label (programming)|labels]] and as simple [[subroutines]]. Unlike in other divisions, paragraphs do not need to be in sections.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 14.4}}\nExecution goes down through the procedures of a program until it is terminated.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 14.6.3}}\nTo use procedures as subroutines, the {{code|PERFORM}} verb is used.\n\nA {{code|PERFORM}} statement somewhat resembles a procedure call in a modern language in the sense that execution returns to the code following the {{code|PERFORM}} statement at the end of the called code; however, it does not provide any mechanism for [[Parameter (computer programming)|parameter passing]] or for returning a result value. If a subroutine is invoked using a simple statement like {{code|PERFORM subroutine|lang=cobolfree}}, then control returns at the end of the called procedure. However, {{code|PERFORM}} is unusual in that it may be used to call a range spanning a sequence of several adjacent procedures. This is done with the {{code|PERFORM sub-1 THRU sub-n|lang=cobolfree}} construct:\n\n<syntaxhighlight lang=\"cobolfree\">\nPROCEDURE so-and-so.\n    PERFORM ALPHA\n    PERFORM ALPHA THRU GAMMA\n    STOP RUN.\nALPHA.\n    DISPLAY 'A'.\nBETA.\n    DISPLAY 'B'.\nGAMMA.\n    DISPLAY 'C'.\n</syntaxhighlight>\n\nThe output of this program will be: \"A A B C\".\n\n{{code|PERFORM}} also differs from conventional procedure calls in that there is, at least traditionally, no notion of a call stack. As a consequence, nested invocations are possible (a sequence of code being {{code|PERFORM}}'ed may execute a {{code|PERFORM}} statement itself), but require extra care if parts of the same code are executed by both invocations. The problem arises when the code in the inner invocation reaches the exit point of the outer invocation. More formally, if control passes through the exit point of a {{code|PERFORM}} invocation that was called earlier but has not completed yet, the COBOL 2002 standard officially stipulates that the behaviour is [[Undefined behavior|undefined]].\n\nThe reason is that COBOL, rather than a \"return address\", operates with what may be called a continuation address. When control flow reaches the end of any procedure, the continuation address is looked up and control is transferred to that address. Before the program runs, the continuation address for every procedure is initialised to the start address of the procedure that comes next in the program text so that, if no {{code|PERFORM}} statements happen, control flows from top to bottom through the program. But when a {{code|PERFORM}} statement executes, it modifies the continuation address of the called procedure (or the last procedure of the called range, if {{code|PERFORM THRU}} was used), so that control will return to the call site at the end. The original value is saved and is restored afterwards, but there is only one storage position. If two nested invocations operate on overlapping code, they may interfere which each other's management of the continuation address in several ways.<ref name=\"FR99\">{{cite conference | url=http://pages.cs.wisc.edu/~ramali/Papers/paste99.pdf | title=Identifying Procedural Structure in Cobol Programs | doi=10.1145/381788.316163 | first1=John | last1=Field | first2=G. | last2=Ramalingam | conference=PASTE '99 | ISBN=1581131372 | conferenceurl=http://cseweb.ucsd.edu/~wgg/paste99.html | date=September 1999}}</ref><ref name=\"VV07\">{{cite journal | url=http://www.cs.vu.nl/~nveerman/research/minefield/minefield.pdf | title=Cobol minefield detection | journal=Software\u2014Practice and Experience |date=November 2006 | volume=36 | issue=14 | doi=10.1002/spe.v36:14 | archiveurl=https://web.archive.org/web/20070306135410/http://www.cs.vu.nl/~nveerman/research/minefield/minefield.pdf | url-status=dead | archivedate=6 March 2007 | last1=Veerman | first1=Niels | last2=Verhoeven | first2=Ernst-Jan }}</ref>\n\nThe following example (taken from Veerman/Verhoeven, 2006) illustrates the problem:\n\n<syntaxhighlight lang=\"cobolfree\">\nLABEL1.\n    DISPLAY '1'\n    PERFORM LABEL2 THRU LABEL3\n    STOP RUN.\nLABEL2.\n    DISPLAY '2'\n    PERFORM LABEL3 THRU LABEL4.\nLABEL3.\n    DISPLAY '3'.\nLABEL4.\n    DISPLAY '4'.\n</syntaxhighlight>\n\nOne might expect that the output of this program would be \"1 2 3 4 3\": After displaying \"2\", the second {{code|PERFORM}} causes \"3\" and \"4\" to be displayed, and then the first invocation continues on with \"3\". In traditional COBOL implementations, this is not the case. Rather, the first {{code|PERFORM}} statement sets the continuation address at the end of {{code|LABEL3}} so that it will jump back to the call site inside {{code|LABEL1}}. The second {{code|PERFORM}} statement sets the return at the end of {{code|LABEL4}} but does not modify the continuation address of {{code|LABEL3}}, expecting it to be the default continuation. Thus, when the inner invocation arrives at the end of {{code|LABEL3}}, it jumps back to the outer {{code|PERFORM}} statement, and the program stops having printed just \"1 2 3\". On the other hand, in some COBOL implementations like the open-source TinyCOBOL compiler, the two {{code|PERFORM}} statements do not interfere with each other and the output is indeed \"1 2 3 4 3\". Therefore, the behaviour in such cases is not only (perhaps) surprising, it is also not portable.<ref name=\"VV07\"/>\n\nA special consequence of this limitation is that {{code|PERFORM}} cannot be used to write recursive code. Another simple example to illustrate this (slightly simplified from Veerman/Verhoeven, 2006):\n\n<syntaxhighlight lang=\"cobolfree\">\n    MOVE 1 TO A\n    PERFORM LABEL\n    STOP RUN.\nLABEL.\n    DISPLAY A\n    IF A < 3\n        ADD 1 TO A\n        PERFORM LABEL\n    END-IF\n    DISPLAY 'END'.\n</syntaxhighlight>\n\nOne might expect that the output is \"1 2 3 END END END\", and in fact that is what some COBOL compilers will produce. But some compilers, like IBM COBOL, will produce code that prints \"1 2 3 END END END END ...\" and so on, printing \"END\" over and over in an endless loop. Since there is limited space to store backup continuation addresses, the backups get overwritten in the course of recursive invocations, and all that can be restored is the jump back to {{code|DISPLAY 'END'}}.<ref name=\"VV07\"/>\n\n====Statements====\nCOBOL 2014 has 47 statements (also called ''{{dfn|verbs}}''),{{sfn|ISO/IEC JTC 1/SC 22/WG4|2014|loc=\u00a7 14.9}} which can be grouped into the following broad categories: control flow, I/O, data manipulation and the report writer. The report writer statements are covered in the [[#Report writer|report writer section]].\n\n=====Control flow=====\nCOBOL's [[conditional (computer programming)|conditional statements]] are {{code|IF}} and {{code|EVALUATE}}. {{code|EVALUATE}} is a [[switch statement|switch-like statement]] with the added capability of evaluating multiple values and conditions. This can be used to implement [[decision table]]s. For example, the following might be used to control a [[CNC lathe]]: <!-- a more common appliance would be more suitable. -->\n\n<syntaxhighlight lang=\"cobolfree\">\nEVALUATE TRUE ALSO desired-speed ALSO current-speed\n    WHEN lid-closed ALSO min-speed THRU max-speed ALSO LESS THAN desired-speed\n        PERFORM speed-up-machine\n    WHEN lid-closed ALSO min-speed THRU max-speed ALSO GREATER THAN desired-speed\n        PERFORM slow-down-machine\n    WHEN lid-open ALSO ANY ALSO NOT ZERO\n        PERFORM emergency-stop\n    WHEN OTHER\n        CONTINUE\nEND-EVALUATE\n</syntaxhighlight>\n\nThe {{code|PERFORM}} statement is used to define loops which are executed {{em|until}} a condition is true (not {{em|while}} true, which is more common in other languages). It is also used to call procedures or ranges of procedures (see the [[#Procedures|procedures section]] for more details). {{code|CALL}} and {{code|INVOKE}} call subprograms and methods, respectively. The name of the subprogram/method is contained in a string which may be a literal or a data item.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7\u00a7 14.9.4, 14.9.22}} Parameters can be passed [[call by reference|by reference]], by content (where a copy is passed by reference) or [[call by value|by value]] (but only if a [[function prototype|prototype]] is available).{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 D.6.5.2.2}}\n{{code|CANCEL}} unloads subprograms from memory. {{code|GO TO}} causes the program to jump to a specified procedure.\n\nThe {{code|GOBACK}} statement is a [[return statement]] and the {{code|STOP}} statement stops the program. The {{code|EXIT}} statement has six different formats: it can be used as a return statement, a [[break statement]], a [[continue statement]], an end marker or to leave a procedure.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 14.9.13.1}}\n\n[[Exception handling|Exceptions]] are raised by a {{code|RAISE}} statement and caught with a handler, or ''{{dfn|declarative}}'', defined in the {{code|DECLARATIVES}} portion of the procedure division. Declaratives are sections beginning with a {{code|USE}} statement which specify the errors to handle. Exceptions can be names or objects. {{code|RESUME}} is used in a declarative to jump to the statement after the one that raised the exception or to a procedure outside the {{code|DECLARATIVES}}. Unlike other languages, uncaught exceptions may not terminate the program and the program can proceed unaffected.\n\n=====I/O=====\nFile I/O is handled by the self-describing {{code|OPEN}}, {{code|CLOSE}}, {{code|READ}}, and {{code|WRITE}} statements along with a further three: {{code|REWRITE}}, which updates a record; {{code|START}}, which selects subsequent records to access by finding a record with a certain key; and {{code|UNLOCK}}, which releases a [[lock (database)|lock]] on the last record accessed.\n\nUser interaction is done using {{code|ACCEPT}} and {{code|DISPLAY}}.\n\n=====Data manipulation=====\nThe following verbs manipulate data:\n* {{code|INITIALIZE}}, which sets data items to their default values.\n* {{code|MOVE}}, which [[assignment (computer science)|assigns]] values to data items ; ''MOVE CORRESPONDING'' assigns corresponding like-named [[Record (computer science)#COBOL|fields]].\n* {{code|SET}}, which has 15 formats: it can modify indices, assign object references and alter table capacities, among other functions.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a714.9.35.1}}\n* {{code|ADD}}, {{code|SUBTRACT}}, {{code|MULTIPLY}}, {{code|DIVIDE}}, and {{code|COMPUTE}}, which handle arithmetic (with {{code|COMPUTE}} assigning the result of a formula to a variable).\n* {{code|ALLOCATE}} and {{code|FREE}}, which handle [[dynamic memory]].\n* {{code|VALIDATE}}, which validates and distributes data as specified in an item's description in the data division.\n* {{code|STRING}} and {{code|UNSTRING}}, which [[Concatenation|concatenate]] and split [[string (computer science)|string]]s, respectively.\n* {{code|INSPECT}}, which tallies or replaces instances of specified [[substring]]s within a string.\n* {{code|SEARCH}}, which searches a table for the first entry satisfying a condition.\n\nFiles and tables are sorted using {{code|SORT}} and the {{code|MERGE}} verb merges and sorts files. The {{code|RELEASE}} verb provides records to sort and {{code|RETURN}} retrieves sorted records in order.\n\n====Scope termination====\nSome statements, such as {{code|IF}} and {{code|READ}}, may themselves contain statements. Such statements may be terminated in two ways: by a period (''{{dfn|implicit termination}}''), which terminates ''all'' unterminated statements contained, or by a scope terminator, which terminates the nearest matching open statement.\n\n<syntaxhighlight lang=\"cobolfree\">\n*> Terminator period (\"implicit termination\")\nIF invalid-record\n    IF no-more-records\n        NEXT SENTENCE\n    ELSE\n        READ record-file\n            AT END SET no-more-records TO TRUE.\n\n*> Scope terminators (\"explicit termination\")\nIF invalid-record\n    IF no-more-records\n        CONTINUE\n    ELSE\n        READ record-file\n            AT END SET no-more-records TO TRUE\n        END-READ\n    END-IF\nEND-IF\n</syntaxhighlight>\n\nNested statements terminated with a period are a common source of bugs.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|p=899}}{{sfn|McCracken|Golden|1988|loc=\u00a7 8.4}} For example, examine the following code:\n\n<syntaxhighlight lang=\"cobolfree\">\nIF x\n    DISPLAY y.\n    DISPLAY z.\n</syntaxhighlight>\n\nHere, the intent is to display <code>y</code> and <code>z</code> if condition <code>x</code> is true. However, <code>z</code> will be displayed whatever the value of <code>x</code> because the <code>IF</code> statement is terminated by an erroneous period after {{code|DISPLAY y|lang=cobolfree}}.\n\nAnother bug is a result of the [[dangling else problem]], when two <code>IF</code> statements can associate with an <code>ELSE</code>.\n\n<syntaxhighlight lang=\"cobolfree\">\nIF x\n    IF y\n        DISPLAY a\nELSE\n    DISPLAY b.\n</syntaxhighlight>\n\nIn the above fragment, the <code>ELSE</code> associates with the &nbsp;{{code|IF y|lang=cobolfree}}&nbsp; statement instead of the &nbsp;{{code|IF x|lang=cobolfree}}&nbsp; statement, causing a bug. Prior to the introduction of explicit scope terminators, preventing it would require &nbsp;{{code|ELSE NEXT SENTENCE|lang=cobolfree}}&nbsp; to be placed after the inner <code>IF</code>.{{sfn|McCracken|Golden|1988|loc=\u00a7 8.4}}\n\n====Self-modifying code====\nThe original (1959) COBOL specification supported the infamous &nbsp;{{code|ALTER X TO PROCEED TO Y|lang=cobolfree}}&nbsp; statement, for which many compilers generated [[self-modifying code]]. <code>X</code> and <code>Y</code> are procedure labels, and the single &nbsp;{{code|GO TO|lang=cobolfree}}&nbsp; statement in procedure <code>X</code> executed after such an {{code|ALTER}} statement means &nbsp;{{code|GO TO Y|lang=cobolfree}}&nbsp; instead. Many compilers still support it,<ref>Examples of compiler support for {{code|ALTER}} can be seen in the following:\n\n* {{cite web\n |last=Tiffin \n |first=Brian \n |title=September 2014 \n |url=http://sourceforge.net/p/open-cobol/discussion/cobol/thread/7dc2941f/#5ee9 \n |work=GNU Cobol \n |date=18 September 2013 \n |accessdate=5 January 2014 \n}}\n* {{cite web\n |url=http://documentation.microfocus.com/help/topic/com.microfocus.eclipse.infocenter.visualcobol.vs2013/HRLHLHPDF803.html \n |title=The ALTER Statement \n |publisher=Micro Focus \n |work=Micro Focus Visual COBOL 2.2 for Visual Studio 2013 COBOL Language Reference \n |accessdate=5 January 2014 \n}}\n* {{cite web\n |url=http://www.csim.scu.edu.tw/~kuo/COBOL/COBOLCompiler/COBOL%E6%89%8B%E5%86%8A/cob_lrf.pdf \n |title=ALTER Statement (Nucleus) \n |publisher=Fujitsu \n |work=COBOL85 Reference Manual \n |date=November 1996 \n |accessdate=5 January 2014 \n |page=555 \n |archiveurl=https://web.archive.org/web/20140106031540/http://www.csim.scu.edu.tw/~kuo/COBOL/COBOLCompiler/COBOL%E6%89%8B%E5%86%8A/cob_lrf.pdf \n |archivedate=6 January 2014 \n |url-status=dead \n}}\n* {{cite web\n |url=http://pic.dhe.ibm.com/infocenter/pdthelp/v1r1/topic/com.ibm.entcobol.doc_5.1/PGandLR/ref/rlpsalte.html \n |title=ALTER Statement \n |publisher=IBM \n |work=Enterprise COBOL for z/OS Language Reference \n |date=June 2013 \n |accessdate=5 January 2014 \n}}</ref>\nbut it was deemed [[deprecation|obsolete]] in the COBOL 1985 standard and deleted in 2002.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2001|loc=\u00a7 F.1}}\n\nThe {{code|ALTER}} statement was poorly regarded because it undermined \"locality of context\" and made a program's overall logic difficult to comprehend.{{sfn|McCracken|1976|p=355}}  As textbook author [[Daniel D. McCracken]] wrote in 1976, when \"someone who has never seen the program before must become familiar with it as quickly as possible, sometimes under critical time pressure because the program has failed ... the sight of a GO TO statement in a paragraph by itself, signaling as it does the existence of an unknown number of ALTER statements at unknown locations throughout the program, strikes fear in the heart of the bravest programmer.\"{{sfn|McCracken|1976|p=355}}\n\n===Hello, world===\nA \"[[Hello, world]]\" program in COBOL:\n<syntaxhighlight lang=\"cobol\">\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. hello-world.\n       PROCEDURE DIVISION.\n           DISPLAY \"Hello, world!\"\n           .\n</syntaxhighlight>\n\nWhen the \u2013 now famous \u2013 [[\"Hello, World!\" program]] example in ''[[The C Programming Language (book)|The C Programming Language]]'' was first published in 1978 a similar mainframe COBOL program sample would have been submitted through [[Job Control Language|JCL]], very likely using a punch card reader, and 80 column punch cards. The listing below, ''with an empty DATA DIVISION'', was tested using GNU/Linux and the System/370 [[Hercules emulator]] running [[MVS]] 3.8J. The JCL, written in July 2015, is derived from the Hercules tutorials and samples hosted by Jay Moseley.<ref>{{cite web | url=http://www.jaymoseley.com/hercules/compilers/cobol.htm | title=COBOL Compiler from MVT | date=17 January 2015 | accessdate=19 July 2015 | first=Jay | last=Moseley}}</ref> In keeping with COBOL programming of that era, HELLO, WORLD is displayed in all capital letters.\n\n<syntaxhighlight lang=\"cobolfree\">\n//COBUCLG  JOB (001),'COBOL BASE TEST',                                 00010000\n//             CLASS=A,MSGCLASS=A,MSGLEVEL=(1,1)                        00020000\n//BASETEST EXEC COBUCLG                                                 00030000\n//COB.SYSIN DD *                                                        00040000\n 00000* VALIDATION OF BASE COBOL INSTALL                                00050000\n 01000 IDENTIFICATION DIVISION.                                         00060000\n 01100 PROGRAM-ID. 'HELLO'.                                             00070000\n 02000 ENVIRONMENT DIVISION.                                            00080000\n 02100 CONFIGURATION SECTION.                                           00090000\n 02110 SOURCE-COMPUTER.  GNULINUX.                                      00100000\n 02120 OBJECT-COMPUTER.  HERCULES.                                      00110000\n 02200 SPECIAL-NAMES.                                                   00120000\n 02210     CONSOLE IS CONSL.                                            00130000\n 03000 DATA DIVISION.                                                   00140000\n 04000 PROCEDURE DIVISION.                                              00150000\n 04100 00-MAIN.                                                         00160000\n 04110     DISPLAY 'HELLO, WORLD' UPON CONSL.                           00170000\n 04900     STOP RUN.                                                    00180000\n//LKED.SYSLIB DD DSNAME=SYS1.COBLIB,DISP=SHR                            00190000\n//            DD DSNAME=SYS1.LINKLIB,DISP=SHR                           00200000\n//GO.SYSPRINT DD SYSOUT=A                                               00210000\n//                                                                      00220000\n</syntaxhighlight>\n\nAfter submitting the JCL, the MVS console displayed:\n\n<syntaxhighlight lang=\"text\" highlight=\"10\">\n    19.52.48 JOB    3  $HASP100 COBUCLG  ON READER1     COBOL BASE TEST\n    19.52.48 JOB    3  IEF677I WARNING MESSAGE(S) FOR JOB COBUCLG  ISSUED\n    19.52.48 JOB    3  $HASP373 COBUCLG  STARTED - INIT 1 - CLASS A - SYS BSP1\n    19.52.48 JOB    3  IEC130I SYSPUNCH DD STATEMENT MISSING\n    19.52.48 JOB    3  IEC130I SYSLIB   DD STATEMENT MISSING\n    19.52.48 JOB    3  IEC130I SYSPUNCH DD STATEMENT MISSING\n    19.52.48 JOB    3  IEFACTRT - Stepname  Procstep  Program   Retcode\n    19.52.48 JOB    3  COBUCLG    BASETEST  COB       IKFCBL00  RC= 0000\n    19.52.48 JOB    3  COBUCLG    BASETEST  LKED      IEWL      RC= 0000\n    19.52.48 JOB    3  +HELLO, WORLD\n    19.52.48 JOB    3  COBUCLG    BASETEST  GO        PGM=*.DD  RC= 0000\n    19.52.48 JOB    3  $HASP395 COBUCLG  ENDED\n</syntaxhighlight>\n\n''Line 10 of the console listing above is highlighted for effect, the highlighting is not part of the actual console output''.\n\nThe associated compiler listing generated over four pages of technical detail and job run information, for the single line of output from the 14 lines of COBOL.\n\n==Criticism and defense==\n\n===Lack of structure===\nIn the 1970s, adoption of the [[structured programming]] paradigm was becoming increasingly widespread. [[Edsger Dijkstra]], a preeminent computer scientist, wrote a [[letter to the editor]] of [[Communications of the ACM]], published 1975 entitled \"How do we tell truths that might hurt?\", in which he was critical of COBOL and several other contemporary languages; remarking that \"the use of COBOL cripples the mind\".<ref name=\"Dijkstra1\">{{cite web|url=http://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD498.html|title=How do we tell truths that might hurt?|accessdate=29 August 2007|publisher=University of Texas at Austin|date=18 June 1975|author=Dijkstra, Edsger W.|id=EWD498|archive-url=https://web.archive.org/web/20170502143353/http://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD498.html|archive-date=2 May 2017|url-status=dead}}</ref>\nIn a published dissent to Dijkstra's remarks, the computer scientist Howard E. Tompkins claimed that [[unstructured programming|unstructured]] COBOL tended to be \"written by programmers that have never had the benefit of structured COBOL taught well\", arguing that the issue was primarily one of training.<ref>{{Cite journal | doi = 10.1145/948176.948186| title = In defense of teaching structured COBOL as computer science| journal = ACM SIGPLAN Notices| volume = 18| issue = 4| pages = 86\u201394| year = 1983| last1 = Tompkins | first1 = H. E. }}</ref>\n\nOne cause of [[spaghetti code]] was the {{code|GO TO}} statement. Attempts to remove {{code|GO TO}}s from COBOL code, however, resulted in convoluted programs and reduced code quality.{{sfn|Riehle|1992|p=125}} {{code|GO TO}}s were largely replaced by the {{code|PERFORM}} statement and procedures, which promoted [[modular programming]]{{sfn|Riehle|1992|p=125}} and gave easy access to powerful looping facilities. However, {{code|PERFORM}} could only be used with procedures so loop bodies were not located where they were used, making programs harder to understand.{{sfn|Shneiderman|1985|pp=349\u2013350}}\n\nCOBOL programs were infamous for being monolithic and lacking modularization.<ref>{{cite book | url=https://books.google.com/books?id=MJmJAwAAQBAJ&pg=PA4 | title=Beginning COBOL for Programmers | publisher=Apress | accessdate=13 August 2014 | page=4 | first=Michael | last=Coughlan | isbn=978-1430262534 | date=16 March 2014}}</ref>\nCOBOL code could only be modularized through procedures, which were found to be inadequate for large systems. It was impossible to restrict access to data, meaning a procedure could access and modify {{em|any}} data item. Furthermore, there was no way to pass [[parameter (computer programming)|parameter]]s to a procedure, an omission Jean Sammet regarded as the committee's biggest mistake.{{sfn|Sammet|1978b|p=258}}\nAnother complication stemmed from the ability to {{code|PERFORM THRU}} a specified sequence of procedures. This meant that control could jump to and return from any procedure, creating convoluted control flow and permitting a programmer to break the [[single-entry single-exit]] rule.{{sfn|Riehle|1992|p=126}}\n\nThis situation improved as COBOL adopted more features. COBOL-74 added subprograms, giving programmers the ability to control the data each part of the program could access. COBOL-85 then added nested subprograms, allowing programmers to hide subprograms.{{sfn|Riehle|1992|p=127}} Further control over data and code came in 2002 when object-oriented programming, user-defined functions and user-defined data types were included.\n\nNevertheless, much important legacy COBOL software uses unstructured code, which has become unmaintainable. It can be too risky and costly to modify even a simple section of code, since it may be used from unknown places in unknown ways.<ref>{{Cite web|url=http://www.nakedcapitalism.com/2016/07/cobol-and-legacy-code-as-a-systemic-risk.html?imm_mid=0e6043&cmp=em-prog-na-na-newsltr_20160723|title=COBOL and Legacy Code as a Systemic Risk {{!}} naked capitalism|date=19 July 2016|language=en-US|access-date=23 July 2016}}</ref>\n\n===Compatibility issues===\nCOBOL was intended to be a highly portable, \"common\" language. However, by 2001, around 300 dialects had been created.<ref>{{cite journal | url=http://www.cs.vu.nl/grammarware/500/500.pdf | title=Cracking the 500-language problem | journal=IEEE Software |date=November\u2013December 2001 | volume=18 | issue=6 | page=79 | doi=10.1109/52.965809 | first1=Ralf | last1=L\u00e4mmel | first2=Chris | last2=Verhoef | author-link2 = Chris Verhoef| archiveurl=https://web.archive.org/web/20140819085841/http://www.cs.vu.nl/grammarware/500/500.pdf | archivedate=19 August 2014 | url-status=dead}}</ref> One source of dialects was the standard itself: the 1974 standard was composed of one mandatory nucleus and eleven functional modules, each containing two or three levels of support. This permitted 104,976 official variants.<ref>{{cite journal | url=http://comjnl.oxfordjournals.org/content/22/4/290.full.pdf+html | title=Towards more portable COBOL | journal=The Computer Journal | date=April 1979 | volume=22 | issue=4 | pages=290 | doi=10.1093/comjnl/22.4.290 | first1=T. J. | last1=Howkins | first2=M. T. | last2=Harandi }}</ref>\n\nCOBOL-85 was not fully compatible with earlier versions, and its development was controversial. Joseph T. Brophy, the [[Chief Information Officer|CIO]] of [[St. Paul Travelers|Travelers Insurance]], spearheaded an effort to inform COBOL users of the heavy reprogramming costs of implementing the new standard.{{sfn|Garfunkel|1987|p=11}} As a result, the ANSI COBOL Committee received more than 2,200 letters from the public, mostly negative, requiring the committee to make changes. On the other hand, conversion to COBOL-85 was thought to increase productivity in future years, thus justifying the conversion costs.{{sfn|Garfunkel|1987|p=15}}\n\n===Verbose syntax===\n{{quotebox\n | title=COBOL: /koh\u2032bol/, n.\n | tstyle=text-align: left;\n | quote=A weak, verbose, and flabby language used by code grinders to do boring mindless things on dinosaur mainframes. [...]  Its very name is seldom uttered without ritual expressions of disgust or horror.\n | source=[[The Jargon File]] 4.4.8.<ref>{{cite web | url=http://catb.org/jargon/html/C/COBOL.html | title=COBOL | work=The Jargon File, version 4.4.8 | date=1 October 2004 | accessdate=13 December 2014 | first=Eric S. | last=Raymond | authorlink=Eric S. Raymond | url-status=live | archiveurl=https://web.archive.org/web/20140830184553/http://www.catb.org/jargon/html/C/COBOL.html | archivedate=30 August 2014}}</ref>\n | align=right\n | width=30%\n | quoted=1\n}}\n\nCOBOL syntax has often been criticized for its verbosity. Proponents say that this was intended to make the code [[self-documenting]], easing program maintenance.{{sfn|Brown|1976|p=53}} COBOL was also intended to be easy for programmers to learn and use,{{sfn|CODASYL|1969|loc=\u00a7 II.1.1}} while still being readable to non-technical staff such as managers.{{sfn|Shneiderman|1985|p=350}}{{sfn|Sammet|1961|p=381}}{{sfn|Conner|1984|p=ID/10}}{{sfn|Marcotty|1978|p=263}}\nThe desire for readability led to the use of English-like syntax and structural elements, such as nouns, verbs, clauses, sentences, sections, and divisions. Yet by 1984, maintainers of COBOL programs were struggling to deal with \"incomprehensible\" code{{sfn|Conner|1984|p=ID/10}} and the main changes in COBOL-85 were there to help ease maintenance.<ref name=\"Computerworld Garfunkel\" />\n\nJean Sammet, a short-range committee member, noted that \"little attempt was made to cater to the professional programmer, in fact people whose main interest is programming tend to be very unhappy with COBOL\" which she attributed to COBOL's verbose syntax.{{sfn|Conner|1984|p=ID/14}}\n\n===Isolation from the computer science community===\nThe COBOL community has always been isolated from the computer science community. No academic computer scientists participated in the design of COBOL: all of those on the committee came from commerce or government. Computer scientists at the time were more interested in fields like numerical analysis, physics and system programming than the commercial file-processing problems which COBOL development tackled.{{sfn|Sammet|1961|p=380}} Jean Sammet attributed COBOL's unpopularity to an initial \"snob reaction\" due to its inelegance, the lack of influential computer scientists participating in the design process and a disdain for business data processing.{{sfn|Marcotty|1978|p=266}} The COBOL specification used a unique \"notation\", or [[metalanguage]], to define its syntax rather than the new [[Backus\u2013Naur form]] which the committee did not know of. This resulted in \"severe\" criticism.{{sfn|Sammet|1978b|p=255}}{{sfn|Shneiderman|1985|pp=348\u2013349}}{{sfn|Bemer|1971|p=133}}\n\nLater, COBOL suffered from a shortage of material covering it; it took until 1963 for introductory books to appear (with Richard D. Irwin publishing a college textbook on COBOL in 1966).<ref>{{Cite web |url=https://books.bibliopolis.com/main/find/2200821/COBOL-Logic-and-Programming-third-edition-1974-McCameron-Fritz-oldcomputerbooks-com.html |title=Archived copy |access-date=25 February 2016 |archive-url=https://web.archive.org/web/20160305083547/https://books.bibliopolis.com/main/find/2200821/COBOL-Logic-and-Programming-third-edition-1974-McCameron-Fritz-oldcomputerbooks-com.html |archive-date=5 March 2016 |url-status=dead }}</ref> By 1985, there were twice as many books on Fortran and four times as many on BASIC as on COBOL in the [[Library of Congress]].{{sfn|Shneiderman|1985|p=349}} University professors taught more modern, state-of-the-art languages and techniques instead of COBOL which was said to have a \"trade school\" nature.{{sfn|Shneiderman|1985|p=351}} Donald Nelson, chair of the CODASYL COBOL committee, said in 1984 that \"academics ... hate COBOL\" and that computer science graduates \"had 'hate COBOL' drilled into them\".<ref>{{cite web | url=https://books.google.com/books?id=VQhbdDusHcsC&pg=RA1-PA61 | title=An interview: Cobol defender | work=Computerworld | date=10 September 1984 | accessdate=8 June 2014 | author=<!-- Staff writer(s); No by-line --> | pages=ID/29\u2013ID/32 | issn=0010-4841 | volume=18 | issue=37}}</ref> A 2013 poll by [[Micro Focus]] found that 20% of university academics thought COBOL was outdated or dead and that 55% believed their students thought COBOL was outdated or dead. The same poll also found that only 25% of academics had COBOL programming on their curriculum even though 60% thought they should teach it.<ref>{{cite press release | url=http://www.microfocus.com/about/press/pressreleases/2013/pr070320131001.aspx | title=Academia needs more support to tackle the IT skills gap | publisher=Micro Focus | date=7 March 2013 | accessdate=4 August 2014}}</ref>\nIn contrast, in 2003, COBOL featured in 80% of [[information systems]] curricula in the United States, the same proportion as [[C++]] and [[Java (Programming language)|Java]].{{sfn|Carr|Kizior|2003|p=13}}\n\nThere was also significant condescension towards COBOL in the business community from users of other languages, for example [[FORTRAN]] or [[assembler language|assembler]], implying that COBOL could be used only for non-challenging problems.{{citation needed | date=March 2017}}\n\n===Concerns about the design process===\nDoubts have been raised about the competence of the standards committee. Short-term committee member Howard Bromberg said that there was \"little control\" over the development process and that it was \"plagued by discontinuity of personnel and ... a lack of talent.\"{{sfn|Beyer|2009|p=301}} Jean Sammet and Jerome Garfunkel also noted that changes introduced in one revision of the standard would be reverted in the next, due as much to changes in who was in the standard committee as to objective evidence.<ref>{{cite journal | title=Summary of Changes in COBOL, 1960\u20131985 | journal=Annals of the History of Computing | date=October 1985 | volume=7 | issue=4 | pages=342 | first1=Jean | last1=Sammet | first2=Jerome | last2=Garfunkel | doi=10.1109/MAHC.1985.10033 }}</ref>\n\nCOBOL standards have repeatedly suffered from delays: COBOL-85 arrived five years later than hoped,<ref>{{cite conference | url=http://www.computer.org/csdl/proceedings/afips/1978/5086/00/50861107.pdf | title=Data Base Facility for COBOL 80 | first=Margaret M. | last=Cook | conference=1978 National Computer Conference | quote=The earliest date that a new COBOL standard could be developed and approved is the year 1980 [...]. | pages=1107\u20131112 | publisher=AFIPS Press | date=June 1978 | location=Anaheim, California | lccn= 55-44701 | doi=10.1109/AFIPS.1978.63 | accessdate=2 September 2014 | editor1-last=Ghosh | editor1-first=Sakti P. | editor2-last=Liu | editor2-first=Leonard Y.}}</ref>\nCOBOL 2002 was five years late,<ref name=\"SW95\"/>\nand COBOL 2014 was six years late.<ref name=\"cobolstandards.com\"/><ref>{{cite web | url=http://www.cobolstandard.info/wg4/open/wg4n0188.doc | title=Resolutions from WG4 meeting 24 \u2013 June 26\u201328, 2003 Las Vegas, Nevada, USA | date=11 July 2003 | accessdate=29 June 2014 | format=doc | quote=a June 2008 revision of the COBOL standard | page=1 | url-status=dead | archiveurl=https://web.archive.org/web/20160308015945/http://www.cobolstandard.info/wg4/open/wg4n0188.doc | archivedate=8 March 2016}}</ref>\nTo combat delays, the standard committee allowed the creation of optional addenda which would add features more quickly than by waiting for the next standard revision. However, some committee members raised concerns about incompatibilities between implementations and frequent modifications of the standard.<ref>{{cite journal | url=https://books.google.com/books?id=tQOdtdJmVSsC&pg=PA12 | title=Cobol standard add-ons flayed | journal=Computerworld | volume=20 | issue=28 | pages=1, 12 | first=Charles | last=Babcock | date=14 July 1986}}</ref>\n\n===Influences on other languages===\nCOBOL's data structures influenced subsequent programming languages. Its record and file structure influenced [[PL/I]] and [[Pascal (programming language)|Pascal]], and the <code>REDEFINES</code> clause was a predecessor to Pascal's variant records. Explicit file structure definitions preceded the development of [[database management systems]] and aggregated data was a significant advance over Fortran's arrays.{{sfn|Shneiderman|1985|p=349}}\n<code>PICTURE</code> data declarations were incorporated into PL/I, with minor changes.\n\nCOBOL's {{code|COPY}} facility, although considered \"primitive\",<ref>{{cite conference | first=Michael | last=Marcotty | title=Full text of all questions submitted | editor1-last=Wexelblat | editor1-first=Richard L. | conference=History of Programming Languages | year=1978 | publisher=Academic Press | publication-date=1981 | isbn=0127450408 | doi=10.1145/800025.1198371 | page=[https://archive.org/details/historyofprogram0000hist/page/274 274] | url=https://archive.org/details/historyofprogram0000hist/page/274 }}</ref>\ninfluenced the development of [[include directive]]s.{{sfn|Shneiderman|1985|p=349}}\n\nThe focus on portability and standardization meant programs written in COBOL could be portable and facilitated the spread of the language to a wide variety of hardware platforms and operating systems.<ref>This can be seen in:\n\n* {{cite web | url=http://www-304.ibm.com/partnerworld/gsd/solutiondetails.do?solution=48040&expand=true&lc=en | title=Visual COBOL | publisher=[[IBM]] | work=IBM PartnerWorld | date=21 August 2013 | accessdate=5 February 2014 | quote=Micro Focus Visual COBOL delivers the next generation of COBOL development and deployment for Linux x86-64, Linux for System z, AIX, HP/UX, Solaris, and Windows. | archiveurl=https://web.archive.org/web/20140712183624/http://www-304.ibm.com/partnerworld/gsd/solutiondetails.do?solution=48040 | archivedate=12 July 2014 | url-status=live}}\n* {{cite web | url=https://www-03.ibm.com/software/products/en/cobocompfami | title=COBOL Compilers family | publisher=[[IBM]] | work=ibm.com | accessdate=5 February 2014 | archiveurl=https://web.archive.org/web/20140223004754/https://www-03.ibm.com/software/products/en/cobocompfami | archivedate=23 February 2014 | url-status=live}}\n* {{cite web | url=http://opencobol.add1tocobol.com/gnucobol/#what-platforms-are-supported-by-gnucobol | title=What platforms are supported by GNU Cobol? | date=4 January 2014 | accessdate=5 February 2014 | author=Tiffin, Brian | archiveurl=https://web.archive.org/web/20131214110557/http://opencobol.add1tocobol.com/gnucobol/#what-platforms-are-supported-by-gnu-cobol | archivedate=14 December 2013 | url-status=dead}}</ref> Additionally, the well-defined division structure restricts the definition of external references to the Environment Division, which simplifies platform changes in particular.<ref name=\"cobol-intro\">{{cite web | url=http://www.csis.ul.ie/cobol/course/COBOLIntro.htm#part1 | title=Introduction to COBOL | year=2002 | accessdate=3 February 2014 | author=Coughlan, Michael}}</ref>\n\n==See also==\n{{Portal|Computer programming}}\n* [[Alphabetical list of programming languages]]\n* [[BLIS/COBOL]]\n* [[COBOL ReSource]]\n* [[CODASYL]]\n* [[Comparison of programming languages]]\n* {{slink|Generational list of programming languages|COBOL based}}\n* {{slink|List of compilers|COBOL compilers}}\n\n== On the News ==\nDue to the [[COVID-19|corona-virus]] crisis, the New Jersey governor issued a plea for COBOL programmers to help maintain legacy systems used by the state<ref>{{Cite web|url=https://qz.com/1832988/covid-19-results-in-new-jersey-desperately-needing-cobol-coders/|title=Why Covid-19 has resulted in New Jersey desperately needing COBOL programmers|last=Mollman|first=Steve|website=Quartz|language=en|access-date=2020-04-06}}</ref>.\n\n==Notes==\n{{notelist}}\n\n== References ==\n\n=== Citations ===\n{{Reflist|30em}}\n\n=== Sources ===\n{{refbegin|2}}\n* {{cite journal\n | ref=harv\n | url=http://archive.computerhistory.org/resources/text/Knuth_Don_X4100/PDF_index/k-8-pdf/k-8-u2776-Honeywell-mag-History-Cobol.pdf\n | title=A View of the History of COBOL\n | journal=Honeywell Computer Journal\n | accessdate=28 June 2014\n | volume=5\n | issue=3\n | date=1971\n | first=Bob\n | last=Bemer\n | authorlink=Bob Bemer\n | archive-url=https://web.archive.org/web/20160122164500/http://archive.computerhistory.org/resources/text/Knuth_Don_X4100/PDF_index/k-8-pdf/k-8-u2776-Honeywell-mag-History-Cobol.pdf\n | archive-date=22 January 2016\n | url-status=dead\n }}\n* {{cite book\n | ref=harv\n | url=https://books.google.com/books?id=u5KKwGjulEwC&pg=PA282\n | title=Grace Hopper and the Invention of the Information Age\n | publisher=MIT Press\n | year=2009\n | isbn=978-0262013109\n | first=Kurt\n | last=Beyer\n | lccn=2008044229\n}}\n* {{cite book\n | ref=harv\n | url=https://books.google.com/books?id=G6a2tSuOoq8C&pg=PA47\n | title=Encyclopedia of Computer Science and Technology: Volume 5\n | publisher=[[CRC Press]]\n | isbn=978-0824722555\n | date=1 December 1976\n | section=COBOL\n | first=William R.\n | last=Brown\n | editor1-first=Jack\n | editor1-last=Belzer\n | editor2-first=Albert G.\n | editor2-last=Holzman\n | editor3-first=Allen\n | editor3-last=Kent\n}}\n\n* {{cite journal\n | ref=harv\n | url=http://www.isedj.org/1/52/ISEDJ.1(52).Carr.pdf\n | title=Continued Relevance of COBOL in Business and Academia: Current Situation and Comparison to the Year 2000 Study\n | date=31 December 2003\n | accessdate=4 August 2014\n | last1=Carr\n | first1=Donald E.\n | last2=Kizior\n | first2=Ronald J.\n | journal=Information Systems Education Journal\n | volume=1\n | issue=52\n | issn=1545-679X\n }}\n* {{cite journal\n | ref=harv\n | url=https://archive.org/details/codasylcoboljour00conf\n | title=CODASYL COBOL Journal of Development 1968 |date=July 1969 \n | lccn=73601243\n | author=CODASYL\n | authorlink=CODASYL\n | publisher=[[National Bureau of Standards]]\n | issn=0591-0218\n}}\n* {{cite journal\n | ref=harv\n | url=https://books.google.com/books?id=BrEo9KtAQH4C&pg=RA1-PA61\n | title=Cobol, your age is showing\n | journal=Computerworld\n | volume=18\n | issue=20\n | pages=ID/7\u2013ID/18\n | first=Richard L.\n | last=Conner\n | date=14 May 1984\n | issn=0010-4841\n }}\n* {{cite web\n | ref=harv\n | url=http://opencobol.add1tocobol.com/guides/GNU%20COBOL%202.1%2023NOV2013%20Programmers%20Guide%20(US%20Letter).pdf\n | title=GNU COBOL Programmer's Guide\n | date=9 April 2014\n | accessdate=25 February 2014\n | last=Cutler\n | first=Gary\n | edition=3rd\n}}\n* {{cite book\n | ref=harv\n | title=The COBOL 85 Example Book\n | first=Jerome\n | last=Garfunkel\n | publisher=[[John Wiley & Sons|Wiley]]\n | year=1987\n | isbn=978-0471804611\n}}\n* {{cite web\n | ref=harv\n | url=http://www.ncits.org/tc_home/j4htm/cobolv200112.zip\n | title=ISO/IEC IS 1989:2001 \u2013 Programming language COBOL\n | author=ISO/IEC JTC 1/SC 22/WG 4\n | authorlink=ISO/IEC JTC 1/SC 22\n | publisher=[[ISO]]\n | date=4 December 2001\n | accessdate=2 September 2014\n | archiveurl=https://web.archive.org/web/20020124065139/http://www.ncits.org/tc_home/j4htm/cobolv200112.zip\n | archivedate=24 January 2002\n | url-status=dead\n | format=ZIP of PDF\n}}\n* {{cite book\n | ref=harv\n | title=INCITS/ISO/IEC 1989:2014 [2014] \u2013 Programming language COBOL\n | author=ISO/IEC JTC 1/SC 22/WG 4\n | publisher=[[INCITS]]\n | date=31 October 2014\n}}\n* {{cite web\n | ref=harv\n | url=http://home.comcast.net/~wmklein/DOX/History.pdf\n | title=The History of COBOL\n | date=4 October 2010\n | accessdate=7 January 2014\n | last=Klein\n | first=William M.\n | archiveurl=https://web.archive.org/web/20140107192608/http://home.comcast.net/~wmklein/DOX/History.pdf\n | archivedate=7 January 2014\n | url-status=dead\n }}\n* {{cite conference\n | ref=harv\n | first=Michael\n | last=Marcotty\n | p=[https://archive.org/details/historyofprogram0000hist/page/263 263]\n | title=Transcript of question and answer session\n | editor1-last=Wexelblat\n | editor1-first=Richard L.\n | conference=History of Programming Languages\n | year=1978\n | publisher=Academic Press\n | publication-date=1981\n | isbn=0127450408\n | doi=10.1145/800025.1198370\n | url=https://archive.org/details/historyofprogram0000hist/page/263\n }}\n* {{cite book\n | ref=harv\n | title=A Simplified Guide to Structured COBOL Programming\n | publisher=Wiley\n | year=1976\n | isbn=0-471-58284-0\n | first=Daniel D.\n | last=McCracken\n | lccn=\n | authorlink=Daniel D. McCracken\n | url-access=registration\n | url=https://archive.org/details/simplifiedguidet0000mccr\n }}\n* {{cite book\n | ref=harv\n | title=A Simplified Guide to Structured COBOL Programming\n | publisher=Wiley\n | year=1988\n | isbn=978-0471610540\n | first1=Daniel D.\n | last1=McCracken\n | first2=Donald G.\n | last2=Golden\n | edition=2nd\n | lccn=87034608\n}}\n* {{cite journal\n | ref=harv\n | title=PERFORM considered harmful\n | journal=Communications of the ACM\n |date=August 1992\n |doi=10.1145/135226.376106 \n | volume=35\n | issue=8\n | pages=125\u2013128\n | first=Richard L.\n | last=Riehle\n \n}}\n* {{Cite conference\n | ref=harv\n | title=A method of combining ALGOL and COBOL\n | first=Jean E.\n | last=Sammet\n | authorlink=Jean E. Sammet\n | date=May 1961\n | conference=Papers presented at the 9\u201311 May 1961, western joint IRE\u2013AIEE\u2013ACM computer conference\n | doi=10.1145/1460690.1460734\n | pages=379\u2013387\n | publisher=[[Association for Computing Machinery|ACM]]\n \n}}\n* {{cite conference\n | ref=harv\n | first=Jean E.\n | last=Sammet\n | title=The early history of COBOL\n | editor1-last=Wexelblat\n | editor1-first=Richard L.\n | conference=History of Programming Languages\n | year=1978a\n | publisher=Academic Press\n | publication-date=1981\n | isbn=0127450408\n | doi=10.1145/800025.1198367\n | url-access=registration\n | url=https://archive.org/details/historyofprogram0000hist\n }}\n* {{cite conference\n | ref=harv\n | first=Jean E.\n | last=Sammet\n | title=Transcript of presentation\n | editor1-last=Wexelblat\n | editor1-first=Richard L.\n | conference=History of Programming Languages\n | year=1978b\n | publisher=Academic Press\n | publication-date=1981\n | isbn=0127450408\n | doi=10.1145/800025.1198368\n | url-access=registration\n | url=https://archive.org/details/historyofprogram0000hist\n }}\n* {{cite book\n | ref=harv\n | url=https://books.google.com/books?id=5Jaa1BVverIC&pg=PA104\n | title=Concise Encyclopedia of Computer Science\n | publisher=Wiley\n | first=Jean E.\n | last=Sammet\n | oclc=249810423\n | isbn=978-0470090954\n | editor-first=Edwin D.\n | editor-last=Reilly\n | date=23 July 2004\n | section=COBOL\n}}\n* {{cite journal\n | ref=harv\n | title=The Relationship Between COBOL and Computer Science\n | journal=[[Annals of the History of Computing]] |date=October 1985 \n | volume=7\n | issue=4\n | pages=348\u2013352\n | first=B.\n | last=Shneiderman\n | doi=10.1109/MAHC.1985.10041\n}}\n{{refend}}\n\n==External links==\n{{sisterlinks|d=Q131140|n=no|voy=no|s=no|q=no|m=no|mw=no|species=no|commons=Category:COBOL}}\n* {{Curlie|Computers/Programming/Languages/Cobol/}}\n\n{{Major programming languages}}\n{{ISO standards}}\n\n{{Authority control}}\n\n{{DEFAULTSORT:Cobol}}\n[[Category:COBOL| ]]\n[[Category:.NET programming languages]]\n[[Category:1959 software]]\n[[Category:Class-based programming languages]]\n[[Category:Computer-related introductions in 1959]]\n[[Category:Cross-platform software]]\n[[Category:Object-oriented programming languages]]\n[[Category:Procedural programming languages]]\n[[Category:Programming languages created by women]]\n[[Category:Programming languages created in 1959]]\n[[Category:Programming languages with an ISO standard]]\n[[Category:Statically typed programming languages]]\n[[Category:Structured programming languages]]\n", "text_old": "{{distinguish|text=[[Kobol]], a fictional planet in Battlestar Galactica}}\n{{short description|Programming language with English-like syntax}}\n{{Use dmy dates|date=April 2019}}\n{{good article}}\n{{Use American English|date=October 2014}}\n{{Infobox programming language\n| name                   = COBOL\n| logo                   = [[File:COBOL Report Apr60.djvu|200px|alt=COBOL. Report to Conference on Data Systems Languages including initial specifications for a Common Business Oriented Language (COBOL) for programming digital electronic computers. Department of Defense, April 1960.]]\n| logo caption           = The cover of the ''COBOL 60'' report to [[CODASYL]] (April 1960)\n| paradigm               = [[Procedural programming|Procedural]], [[imperative programming|imperative]], [[Object-oriented programming|object-oriented]]\n| year                   = {{Start date and age|df=yes|1959}}\n| designers               = {{nowrap|Howard Bromberg}}, {{nowrap|Howard Discount}}, {{nowrap|Vernon Reeves}}, {{nowrap|[[Jean E. Sammet]]}}, {{nowrap|William Selden}}, {{nowrap|Gertrude Tierney}}, {{nowrap|Mary K. Hawes}}\n| developers              = [[CODASYL]], [[ANSI]], [[ISO]]\n| latest release version = ISO/IEC 1989:2014\n| latest release date    = 2014\n| typing                 = [[weak typing|Weak]], [[static typing|static]]\n| implementations        = {{nowraplinks|[[GnuCOBOL]], [[IBM COBOL]]}}, {{nowrap|[[Micro Focus]] Visual COBOL}} \n| dialects               = ACUCOBOL-GT, COBOL-IT, COBOL/2, DEC COBOL-10, DEC VAX COBOL, DOSVS COBOL, Fujitsu COBOL, Hitachi COBOL2002, HP3000 COBOL/II, IBM COBOL SAA, IBM COBOL/400, IBM COBOL/II, IBM Enterprise COBOL, IBM ILE COBOL, IBM OS/VS COBOL, ICL COBOL (VME),  isCOBOL, Micro Focus COBOL, Microsoft COBOL, Realia COBOL, Ryan McFarland RM/COBOL, Ryan McFarland RM/COBOL-85, Tandem (NonStop) COBOL85, Tandem (NonStop) SCOBOL, UNIVAC COBOL, Unisys MCP COBOL74, Unisys MCP COBOL85, Unix COBOL X/Open, Veryant isCOBOL, Visual COBOL, Wang VS COBOL\n| influenced_by          = [[AIMACO]], [[C++]],{{efn|name=2002 influence|Specifically influenced COBOL 2002's object-oriented features.<ref name=\"SW95\"/><ref name=\"Arranga98\"/><ref>{{cite journal | title=Cobol: Perception and Reality | journal=Computer | date=March 1997 | volume=30 | issue=3 | doi=10.1109/2.573683 | page=127 | issn=0018-9162 | first1=Edmund C. | last1=Arranga | first2=Frank P. | last2=Coyle }}</ref>}} [[COMTRAN]], [[Eiffel (programming language)|Eiffel]],{{efn|name=2002 influence}} [[FACT computer language|FACT]], [[FLOW-MATIC]], [[Smalltalk]]{{efn|name=2002 influence}}\n| influenced             = [[CobolScript]],<ref>{{cite conference | title=COBOL Script: a business-oriented scripting language | first1=Tetsuji | last1=Imajo | first2=Tatsuki | last2=Miyake | first3=Shinobu | last3=Sato | first4=Toshiyuki | last4=Ito | first5=Daisuke | last5=Yokotsuka | first6=Yoshihide | last6=Tsujihata | first7=Shunsuke | last7=Uemura | display-authors=1 | publisher=IEEE | date=September 2000 | conference=Enterprise Distributed Object Computing Conference | conference-url=http://dblp1.uni-trier.de/db/conf/edoc/edoc2000.html | location=Makuhari, Japan | isbn=0769508650 | doi=10.1109/EDOC.2000.882363 }}<!--| accessdate=4 March 2015 --></ref> [[EGL (programming language)|EGL]],<ref>{{cite web | url=https://www.omg.org/adm/EGLOverviewtoOMG.pdf | title=Introduction to EGL | publisher=IBM Software Group | date=7 May 2007 | first=Wing Hong | last=Ho}}</ref> [[PL/I]],<ref>{{cite conference | title=The early history and characteristics of PL/I | publisher=[[Academic Press]] | publication-date=1981 | conference=History of Programming Languages | last=Radin | first=George | authorlink=George Radin | editor-first=Richard L. | editor-last=Wexelblat | doi=10.1145/800025.1198410 | isbn=0127450408 | page=572 | year=1978 }}<!--| accessdate=23 November 2014 --></ref> [[Programming Language for Business|PL/B]]{{citation needed | date=October 2017 | reason=Most sources on PL/B or Databus describe it is as COBOL-like, not as *inspired by* COBOL.}}\n| file_ext               = <code>.cbl</code>, <code>.cob</code>, <code>.cpy</code>\n| wikibooks              = COBOL\n}}\n\n'''COBOL''' ({{IPAc-en|\u02c8|k|o\u028a|b|\u0252|l|,_|-|b|\u0254\u02d0|l}}; an [[acronym]] for <!-- do not insert bolding/italics per [[WP:EXPABBR]] -->\"common business-oriented language\") is a [[compiled]] English-like [[computer programming language]] designed for business use. It is [[imperative programming|imperative]], [[procedural programming|procedural]] and, since 2002, [[object-oriented programming|object-oriented]]. COBOL is primarily used in business, finance, and administrative systems for companies and governments. COBOL is still widely used in legacy applications deployed on [[mainframe computer]]s, such as large-scale [[batch processing|batch]] and [[transaction processing]] jobs. But due to its declining popularity and the retirement of experienced COBOL programmers, programs are being migrated to new platforms, rewritten in modern languages or replaced with software packages.<ref>{{cite web | url=http://www.computerworld.com/article/2502420/data-center/brain-drain-where-cobol-systems-go-from-here.html | title=Brain drain: Where Cobol systems go from here | work=Computerworld | date=14 March 2012 | accessdate=9 February 2015 | first=Robert L. | last=Mitchell}}</ref> Most programming in COBOL is now purely to maintain existing applications.<ref name=\"Computerworld Not Dead Yet\"/>\n\nCOBOL was designed in 1959 by [[CODASYL]] and was partly based on previous programming language design work by [[Grace Hopper]], commonly referred to as \"the (grand)mother of COBOL\".<ref>{{cite journal | url=https://books.google.com/books?id=JT0EAAAAMBAJ&pg=RA1-PA33 | title=Captain Grace M. Hopper: the Mother of COBOL | journal=InfoWorld | volume=3 | issue=20 | page=33 | first=Vicki | last=Porter Adams | date=5 October 1981 | issn=0199-6649}}</ref><ref>{{cite journal | url=https://books.google.com/books?id=J-_T3bxgvMwC&pg=PA14 | title=Grace Hopper, mother of Cobol, dies | journal=Computerworld | volume=26 | issue=1 | page=14 | first=Mitch | last=Betts | date=6 January 1992 | issn=0010-4841}}</ref><ref>{{cite book | url=https://books.google.com/books?id=XfPLVx6qS_cC&pg=PA52&lpg=PA52 | title=Go To: The Story of the Math Majors, Bridge Players, Engineers, Chess Wizards, Maverick Scientists, and Iconoclasts\u2014The Programmers Who Created the Software Revolution | publisher=[[Basic Books]] | year=2008 | page=52 | isbn=978-0786730766 | first=Steve | last=Lohr}}</ref> It was created as part of a [[US Department of Defense]] effort to create a [[Software portability|portable]] programming language for data processing. It was originally seen as a stopgap, but the Department of Defense promptly forced computer manufacturers to provide it, resulting in its widespread adoption.<ref>{{cite book | url=https://books.google.com/books?id=VCcsTPQ738oC&pg=PA100 | title=The Computer Boys Take Over: Computers, Programmers, and the Politics of Technical Expertise | publisher=[[MIT Press]] | year=2009 | page=100 | isbn=978-0262050937 | first=Nathan L. | last=Ensmenger | lccn=2009052638}}</ref> It was [[standardized]] in 1968 and has since been revised four times. Expansions include support for [[structured programming|structured]] and [[object-oriented programming]]. The current standard is ''[[ISO]]/[[International Electrotechnical Commission|IEC]] 1989:2014''.<ref>{{cite web | url=http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=51416 | title=ISO/IEC 1989:2014 | publisher=ISO | date=26 May 2014 | accessdate=7 June 2014}}</ref>\n\nCOBOL statements have an English-like syntax, which was designed to be self-documenting and highly readable. However, it is verbose and uses over 300 [[reserved word]]s. In contrast with modern, succinct syntax like {{code|1=y = x;|lang=c}}, COBOL has a more English-like syntax (in this case, {{code|MOVE x TO y|lang=cobolfree}}).\nCOBOL code is split into four ''divisions'' (identification, environment, data and procedure) containing a rigid hierarchy of sections, paragraphs and sentences. Lacking a large [[standard library]], the standard specifies 43 statements, 87 functions and just one class.\n\nAcademic computer scientists were generally uninterested in business applications when COBOL was created and were not involved in its design; it was (effectively) designed from the ground up as a computer language for business, with an emphasis on inputs and outputs, whose only data types were numbers and strings of text.<ref>{{cite web|url=http://cs.brown.edu/~adf/programming_languages.html|title=A History of Computer Programming Languages|first=Andrew|last=Ferguson|date=|website=cs.brown.edu}}</ref>\nCOBOL has been criticized throughout its life, for its verbosity, design process, and poor support for [[structured programming]]. These weaknesses result in monolithic and, though intended to be English-like, not easily comprehensible and verbose programs.\n\n==History and specification==\n===Background===\nIn the late 1950s, computer users and manufacturers were becoming concerned about the rising cost of programming. A 1959 survey had found that in any data processing installation, the programming cost US$800,000 on average and that translating programs to run on new hardware would cost $600,000. At a time when new [[Timeline of programming languages|programming languages were proliferating]] at an ever-increasing rate, the same survey suggested that if a common business-oriented language were used, conversion would be far cheaper and faster.{{sfn|Beyer|2009|p=282}}\n\n[[File:Grace Hopper.jpg|thumb|alt=caption|[[Grace Hopper]], the inventor of [[FLOW-MATIC]], a predecessor to COBOL]]\n\nOn 8 April 1959, [[Mary K. Hawes]], a computer scientist at [[Burroughs Corporation]], called a meeting of representatives from academia, computer users, and manufacturers at the [[University of Pennsylvania]] to organize a formal meeting on common business languages.<ref>{{Cite journal|last=G\u00fcrer|first=Denise|date=1 June 2002|title=Pioneering Women in Computer Science|journal=SIGCSE Bull.|volume=34|issue=2|pages=175\u2013180|doi=10.1145/543812.543853|issn=0097-8418}}</ref> Representatives included [[Grace Hopper]], inventor of the English-like data processing language [[FLOW-MATIC]], [[Jean Sammet]] and [[Saul Gorn]].{{sfn|Beyer|2009|pp=281\u2013282}}{{sfn|Sammet|1978a|p=200}}\n\nAt the April meeting, the group asked the [[United States Department of Defense|Department of Defense]] (DoD) to sponsor an effort to create a common business language. The delegation impressed Charles A. Phillips, director of the Data System Research Staff at the DoD,<ref name = \"Flahive, Texas Public Radio, 2019\" >{{ cite web | url = https://www.tpr.org/post/how-cobol-still-powers-global-economy-60-years-old | title = How COBOL Still Powers The Global Economy At 60 Years Old | access-date = 19 July 2019 | first = Paul | last = Flahive | date = 24 May 2019 | website = [[Texas Public Radio]] | quote = (Grace Hopper) Nicknamed Grandma Cobol, the code was based on some of her earlier work. She said \u2014 after hearing the rumors \u2014 one of her collaborators went out and bought a granite tombstone. \u201cHe had the word COBOL cut in the front of it. Then he shipped it express collect to Mr. Phillips in the pentagon.\u201d The prank on Charles Phillips, a leader for the project at the defense department, got the attention of the powers that be and was a turning point she said. COBOL would go on to become the most widely used and longest lasting computer languages in history. | archive-url = https://web.archive.org/web/20190524035248/https://www.tpr.org/post/how-cobol-still-powers-global-economy-60-years-old | archive-date = 24 May 2019 | df = dmy-all }}</ref> who thought that they \"thoroughly understood\" the DoD's problems. The DoD operated 225 computers, had a further 175 on order and had spent over $200 million on implementing programs to run on them. Portable programs would save time, reduce costs and ease modernization.{{sfn|Beyer|2009|p=283}}\n\nPhillips agreed to sponsor the meeting and tasked the delegation with drafting the agenda.{{sfn|Beyer|2009|p=284}}\n\n===COBOL 60===\nOn 28 and 29 May 1959 (exactly one year after the Z\u00fcrich [[ALGOL 58]] meeting), a meeting was held at the Pentagon to discuss the creation of a common programming language for business. It was attended by 41 people and was chaired by Phillips.<ref>{{Cite journal | doi = 10.1109/MAHC.1985.10047| title = Early Meetings of the Conference on Data Systems Languages| journal = IEEE Annals of the History of Computing| volume = 7| issue = 4| pages = 316\u2013325| year = 1985 }}</ref> The Department of Defense was concerned about whether it could run the same data processing programs on different computers. [[FORTRAN]], the only mainstream language at the time, lacked the features needed to write such programs.{{sfn|Sammet|2004|p=104}}\n\nRepresentatives enthusiastically described a language that could work in a wide variety of environments, from banking and insurance to utilities and inventory control. They agreed unanimously that more people should be able to program and that the new language should not be restricted by the limitations of contemporary technology. A majority agreed that the language should make maximal use of English, be capable of change, be machine-independent and be easy to use, even at the expense of power.{{sfn|Beyer|2009|p=286}}\n\nThe meeting resulted in the creation of a [[steering committee]] and short-, intermediate- and long-range committees. The short-range committee was given to September (three months) to produce specifications for an interim language, which would then be improved upon by the other committees.{{sfn|Conner|1984|p=ID/9}}{{sfn|Sammet|1978a|p=201}} Their official mission, however, was to identify the strengths and weaknesses of existing programming languages and did not explicitly direct them to create a new language.{{sfn|Sammet|2004|p=104}}\nThe deadline was met with disbelief by the short-range committee.{{sfn|Bemer|1971|p=132}}\nOne member, [[Betty Holberton]], described the three-month deadline as \"gross optimism\" and doubted that the language really would be a stopgap.{{sfn|Beyer|2009|p=288}}\n\nThe steering committee met on 4 June and agreed to name the entire activity as the ''Committee on Data Systems Languages'', or [[CODASYL]], and to form an executive committee.{{sfn|Sammet|1978a|p=203}}\n\nThe short-range committee was made up of members representing six computer manufacturers and three government agencies. The six computer manufacturers were [[Burroughs Corporation]], [[IBM]], [[Honeywell|Minneapolis-Honeywell]] (Honeywell Labs), [[RCA]], [[Sperry Rand]], and [[Sylvania Electric Products]]. The three government agencies were the [[US Air Force]], the Navy's [[David Taylor Model Basin]], and the [[National Bureau of Standards]] (now the National Institute of Standards and Technology).{{sfn|CODASYL|1969|loc=\u00a7 I.2.1.1}} The committee was chaired by [[Joseph Wegstein]] of the US National Bureau of Standards. Work began by investigating data description, statements, existing applications and user experiences.{{sfn|Sammet|1978a|p=204}}\n\nThe committee mainly examined the [[FLOW-MATIC]], [[AIMACO]] and [[COMTRAN]] programming languages.{{sfn|Sammet|2004|p=104}}{{sfn|CODASYL|1969|loc=\u00a7 I.1.2}}\nThe FLOW-MATIC language was particularly influential because it had been implemented and because AIMACO was a derivative of it with only minor changes.{{sfn|Beyer|2009|p=290}}<ref name=cisn>{{cite journal | last = Sammet | first = Jean | authorlink = Jean Sammet | title = The Early History of COBOL | journal = ACM SIGPLAN Notices | volume = 13 | issue = 8 | pages = 121\u2013161 | year = 1978 | doi =10.1145/960118.808378 }}</ref>\nFLOW-MATIC's inventor, Grace Hopper, also served as a technical adviser to the committee.{{sfn|Bemer|1971|p=132}} FLOW-MATIC's major contributions to COBOL were long variable names, English words for commands and the separation of data descriptions and instructions.{{sfn|Sammet|1978a|p=217}}\n\nIBM's COMTRAN language, invented by [[Bob Bemer]], was regarded as a competitor to FLOW-MATIC{{sfn|Beyer|2009|p=292}}{{sfn|Bemer|1971|p=131}} by a short-range committee made up of colleagues of Grace Hopper.{{sfn|Beyer|2009|p=296}}\nSome of its features were not incorporated into COBOL so that it would not look like IBM had dominated the design process,{{sfn|Conner|1984|p=ID/9}} and Jean Sammet said in 1981 that there had been a \"strong anti-IBM bias\" from some committee members (herself included).{{sfn|Sammet|1978a|p=221}}\nIn one case, after Roy Goldfinger, author of the COMTRAN manual and intermediate-range committee member, attended a subcommittee meeting to support his language and encourage the use of algebraic expressions, Grace Hopper sent a memo to the short-range committee reiterating Sperry Rand's efforts to create a language based on English.{{sfn|Beyer|2009|p=291}}\nIn 1980, Grace Hopper commented that \"COBOL 60 is 95% FLOW-MATIC\" and that COMTRAN had had an \"extremely small\" influence. Furthermore, she said that she would claim that work was influenced by both FLOW-MATIC and COMTRAN only to \"keep other people happy [so they] wouldn't try to knock us out\".<ref name=\"Hopper Oral History\">{{cite web | url=http://archive.computerhistory.org/resources/text/Oral_History/Hopper_Grace/102702026.05.01.pdf | title=Oral History of Captain Grace Hopper | publisher=[[Computer History Museum]] | date=December 1980 | accessdate=28 June 2014 | page=37 | archive-url=https://web.archive.org/web/20171225202555/http://archive.computerhistory.org/resources/text/Oral_History/Hopper_Grace/102702026.05.01.pdf | archive-date=25 December 2017 | url-status=dead }}</ref>\nFeatures from COMTRAN incorporated into COBOL included formulas,{{sfn|Sammet|1978a|p=218}} the [[#PICTURE clause|{{code|PICTURE}} clause]],{{sfn|Marcotty|1978|p=268}} an improved <code>IF</code> statement, which obviated the need for [[GO TO]]s, and a more robust file management system.{{sfn|Beyer|2009|p=292}}\n\nThe usefulness of the committee's work was subject of great debate. While some members thought the language had too many compromises and was the result of [[design by committee]], others felt it was better than the three languages examined. Some felt the language was too complex; others, too simple.{{sfn|Sammet|1978a|pp=205\u2013206}}\nControversial features included those some considered useless or too advanced for data processing users. Such features included [[boolean expression]]s, [[formula]]s and table ''{{dfn|subscripts}}'' (indices).{{sfn|Sammet|1978a|loc=Figure 8}}{{sfn|Sammet|1978a|pp=230\u2013231}} Another point of controversy was whether to make keywords context-sensitive and the effect that would have on readability.{{sfn|Sammet|1978a|loc=Figure 8}} Although context-sensitive keywords were rejected, the approach was later used in [[PL/I]] and partially in COBOL from 2002.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2001|p=846}} Little consideration was given to [[interactivity]], interaction with [[operating system]]s (few existed at that time) and functions (thought of as purely mathematical and of no use in data processing).{{sfn|Sammet|1978a|p=220}}{{sfn|Sammet|1978a|p=228}}\n\nThe specifications were presented to the Executive Committee on 4 September. They fell short of expectations: Joseph Wegstein noted that \"it contains rough spots and requires some additions\", and Bob Bemer later described them as a \"hodgepodge\". The subcommittee was given until December to improve it.{{sfn|Bemer|1971|p=132}}\n\nAt a mid-September meeting, the committee discussed the new language's name. Suggestions included \"BUSY\" (Business System), \"INFOSYL\" (Information System Language) and \"COCOSYL\" (Common Computer Systems Language).{{sfn|Sammet|1978a|p=210}} The name \"COBOL\" was suggested by Bob Bemer.<ref>{{cite news | url=https://www.washingtonpost.com/wp-dyn/articles/A4138-2004Jun24.html | title=Computer Pioneer Bob Bemer, 84 | work=The Washington Post | date=25 June 2004 | accessdate=28 June 2014 | page=B06 | first=Patricia | last=Sullivan}}</ref><ref>{{cite web|url=http://www.bobbemer.com/ |title=Thoughts on the Past and Future |accessdate=28 June 2014 |first=Bob |last=Bemer |url-status=dead |archiveurl=https://web.archive.org/web/20140516214531/http://bobbemer.com/ |archivedate=16 May 2014 }}</ref>\n\nIn October, the intermediate-range committee received copies of the [[FACT (computer language)|FACT]] language specification created by [[Roy Nutt]]. Its features impressed the committee so much that they passed a resolution to base COBOL on it.{{sfn|Beyer|2009|p=293}}\nThis was a blow to the short-range committee, who had made good progress on the specification. Despite being technically superior, FACT had not been created with portability in mind or through manufacturer and user consensus. It also lacked a demonstrable implementation,{{sfn|Bemer|1971|p=132}} allowing supporters of a FLOW-MATIC-based COBOL to overturn the resolution. RCA representative Howard Bromberg also blocked FACT, so that RCA's work on a COBOL implementation would not go to waste.{{sfn|Beyer|2009|p=294}}\n\n{{quotebox\n | quote=<poem>\n'And what name do you want inscribed?'\nI said, 'I'll write it for you.' I wrote the name down: COBOL.\n'What kind of name is that?'\n'Well it's a Polish name. We shortened it and got rid of a lot of unnecessary notation.'\n</poem>\n | source=Howard Bromberg on how he bought the COBOL tombstone<ref name=\"Tombstone story\">{{cite journal | url=http://ed-thelen.org/comp-hist/TCMR-V13.pdf | title=The Story of the COBOL Tombstone | journal=The Computer Museum Report | date=Summer 1985 | accessdate=29 June 2014 | volume=13 | pages=8\u20139 | archiveurl=https://web.archive.org/web/20140403015336/http://ed-thelen.org/comp-hist/TCMR-V13.pdf | archivedate=3 April 2014 | url-status=live }}</ref>\n | quoted=1\n}}\n\nIt soon became apparent that the committee was too large for any further progress to be made quickly. A frustrated Howard Bromberg bought a $15 tombstone with \"COBOL\" engraved on it and sent it to Charles Phillips to demonstrate his displeasure.{{efn|The tombstone is currently at the [[Computer History Museum]].<ref>{{cite web | title=COBOL Tombstone | url=http://www.computerhistory.org/collections/catalog/X572.85 | publisher=Computer History Museum | accessdate=29 June 2014}}</ref>}}<ref name=\"Tombstone story\"/>{{sfn|Bemer|1971|p=130}}\nA sub-committee was formed to analyze existing languages and was made up of six individuals:{{sfn|Sammet|2004|p=104}}{{sfn|Beyer|2009|p=289}}\n\n* William Selden and Gertrude Tierney of IBM,\n* Howard Bromberg and Howard Discount of RCA,\n* Vernon Reeves and [[Jean E. Sammet]] of Sylvania Electric Products.\n\nThe sub-committee did most of the work creating the specification, leaving the short-range committee to review and modify their work before producing the finished specification.{{sfn|Sammet|2004|p=104}}\n\nThe specifications were approved by the Executive Committee on 8 January 1960, and sent to the government printing office, which printed these as ''COBOL 60''. The language's stated objectives were to allow efficient, portable programs to be easily written, to allow users to move to new systems with minimal effort and cost, and to be suitable for inexperienced programmers.{{sfn|CODASYL|1969|loc=\u00a7 I.1.1}}\nThe CODASYL Executive Committee later created the COBOL Maintenance Committee to answer questions from users and vendors and to improve and expand the specifications.{{sfn|Brown|1976|p=47}}\n\nDuring 1960, the list of manufacturers planning to build COBOL compilers grew. By September, five more manufacturers had joined CODASYL ([[Bendix Corporation|Bendix]], [[Control Data Corporation]], [[General Electric]] (GE), [[National Cash Register]] and [[Philco]]), and all represented manufacturers had announced COBOL compilers. GE and IBM planned to integrate COBOL into their own languages, GECOM and COMTRAN, respectively. In contrast, [[International Computers and Tabulators]] planned to replace their language, CODEL, with COBOL.{{sfn|Bemer|1971|p=133}}\n\nMeanwhile, RCA and Sperry Rand worked on creating COBOL compilers. The first COBOL program ran on 17 August on an RCA 501.{{sfn|Beyer|2009|p=297}}\nOn 6 and 7 December, the same COBOL program (albeit with minor changes) ran on an RCA computer and a Remington-Rand [[Univac]] computer, demonstrating that compatibility could be achieved.<ref name=\"Williams12\">{{cite book | url=https://books.google.com/books?id=KKmiw-_2gYIC&pg=PT124 | title=Grace Hopper: Admiral of the Cyber Sea | publisher=US Naval Institute Press | isbn=978-1612512655 | date=10 November 2012 | last=Williams | first=Kathleen Broome | oclc=818867202}}</ref>\n\nThe relative influences of which languages were used continues to this day in the recommended advisory printed in all COBOL reference manuals:\n{{quote|COBOL is an industry language and is not the property of any company or group of companies, or of any organization or group of organizations.\nNo warranty, expressed or implied, is made by any contributor or by the CODASYL COBOL Committee as to the accuracy and functioning of the\nprogramming system and language. Moreover, no responsibility is assumed by any contributor, or by the committee, in connection therewith. The authors and copyright holders of the copyrighted material used herein are as follows:\n\n:FLOW-MATIC (trademark of Unisys Corporation), Programming for the UNIVAC (R) I and II, Data Automation Systems, copyrighted 1958, 1959, by Unisys Corporation; IBM Commercial Translator Form No. F28-8013, copyrighted 1959 by IBM; FACT, DSI 27A5260-2760, copyrighted 1960 by Minneapolis-Honeywell.\nThey have specifically authorized the use of this material, in whole or in part, in the COBOL specifications. Such authorization extends to the reproduction and use of COBOL specifications in programming manuals or similar publications.<ref>Compaq Computer Corporation: ''Compaq COBOL Reference Manual'', Order Number: AA\u2013Q2G0F\u2013TK October 2000, Page xviii; Fujitsu Corporation: ''Net Cobol Language Reference'', Version 15, January 2009; IBM Corporation: ''Enterprise COBOL for z/OS Language Reference'', Version 4 Release 1, SC23-8528-00, December 2007</ref>}}\n\n===COBOL-61 to COBOL-65===\n{{quotebox\n | quote=It is rather unlikely that Cobol will be around by the end of the decade.\n | width=30%\n | qouted=1\n | source=Anonymous, June 1960<ref>{{cite journal | url=https://books.google.com/books?id=CLbHc0Acrm4C&pg=RA1-PA67 | title=In defense of Cobol | journal=Computerworld | volume=18 | issue=24 | page=ID/19 | first=Jerome | last=Garfunkel | date=11 November 1984}}</ref>\n}}\n\nMany logical flaws were found in ''COBOL 60'', leading GE's [[Charles Katz]] to warn that it could not be interpreted unambiguously. A reluctant short-term committee enacted a total cleanup and, by March 1963, it was reported that COBOL's syntax was as definable as [[ALGOL]]'s, although semantic ambiguities remained.{{sfn|Bemer|1971|p=133}}\n\nEarly COBOL compilers were primitive and slow. A 1962 US Navy evaluation found compilation speeds of 3\u201311 statements per minute. By mid-1964, they had increased to 11\u20131000 statements per minute. It was observed that increasing memory would drastically increase speed and that compilation costs varied wildly: costs per statement were between $0.23 and $18.91.{{sfn|Bemer|1971|p=134}}\n\nIn late 1962, IBM announced that COBOL would be their primary development language and that development of COMTRAN would cease.{{sfn|Bemer|1971|p=134}}\n\nThe COBOL specification was revised three times in the five years after its publication.\nCOBOL-60 was replaced in 1961 by COBOL-61. This was then replaced by the COBOL-61 Extended specifications in 1963, which introduced the sort and report writer facilities.{{sfn|Brown|1976|p=48}}\nThe added facilities corrected flaws identified by Honeywell in late 1959 in a letter to the short-range committee.{{sfn|Beyer|2009|p=297}}\nCOBOL Edition 1965 brought further clarifications to the specifications and introduced facilities for handling [[mass storage]] files and [[table (information)|tables]].{{sfn|CODASYL|1969|loc=\u00a7 I.2.2.4}}\n\n===COBOL-68===\nEfforts began to standardize COBOL to overcome incompatibilities between versions. In late 1962, both ISO and the United States of America Standards Institute (now [[ANSI]]) formed groups to create standards. ANSI produced ''USA Standard COBOL X3.23'' in August 1968, which became the cornerstone for later versions.{{sfn|CODASYL|1969|loc=\u00a7 I.2.3}} This version was known as American National Standard (ANS) COBOL and was adopted by ISO in 1972.<ref name=\"FS2003\">{{cite book | url=http://dl.acm.org/citation.cfm?id=1074734 | title=Programming language standards | encyclopedia=Encyclopedia of Computer Science | publisher=Wiley | year=2003 | page=1467 | isbn=978-0470864128 | last1=Follet | first1=Robert H. | last2=Sammet | first2=Jean E. | authorlink2=Jean E. Sammet | edition=4th | editor1-first=Anthony | editor1-last=Ralston | editor2-first=Edwin D. | editor2-last=Reilly | editor3-first=David | editor3-last=Hemmendinger |url-access=subscription }}</ref>\n\n===COBOL-74===\nBy 1970, COBOL had become the most widely used programming language in the world.{{sfn|Beyer|2009|p=301}}\n\nIndependently of the ANSI committee, the CODASYL Programming Language Committee was working on improving the language. They described new versions in 1968, 1969, 1970 and 1973, including changes such as new inter-program communication, debugging and file merging facilities as well as improved string-handling and [[library (computing)|library]] inclusion features.{{sfn|Brown|1976|p=49}}\nAlthough CODASYL was independent of the ANSI committee, the ''CODASYL Journal of Development'' was used by ANSI to identify features that were popular enough to warrant implementing.{{sfn|Brown|1976|p=52}}\nThe Programming Language Committee also liaised with [[Ecma International|ECMA]] and the Japanese COBOL Standard committee.{{sfn|Brown|1976|p=49}}\n\nThe Programming Language Committee was not well-known, however. The vice-president, William Rinehuls, complained that two-thirds of the COBOL community did not know of the committee's existence. It was also poor, lacking the funds to make public documents, such as minutes of meetings and change proposals, freely available.<ref>{{cite journal | url=https://books.google.com/books?id=JBUJf4n2QxkC&pg=PT10 | title=Few Realise Wasted Resources of Local DP Schools | journal=Computerworld | volume=6 | issue=31 | pages=11 | first=Alan | last=Taylor | date=2 August 1972}}</ref>\n\nIn 1974, ANSI published a revised version of (ANS) COBOL, containing new features such as [[COBOL#Files|file organizations]], the {{code|DELETE}} statement<ref>{{cite book | url=https://books.google.com/books?id=Cs1RAQAAIAAJ&pg=PA87 | title=Programming in COBOL: A Course of Twelve Television Lectures | publisher=Manchester University Press | year=1974 | page=87 | isbn=978-0719005923 | last=Triance | first=J. M.}}</ref> and the [[memory segmentation|segmentation]] module.{{sfn|Klein|2010|p=16}}\nDeleted features included the {{code|NOTE}} statement, the {{code|EXAMINE}} statement (which was replaced by {{code|INSPECT}}) and the implementer-defined random access module (which was superseded by the new sequential and relative I/O modules). These made up 44 changes, which rendered existing statements incompatible with the new standard.<ref>{{cite techreport | url=http://www.dtic.mil/dtic/tr/fulltext/u2/a039740.pdf | title=Programming Language Standards\u2014Who Needs Them? | date=May 1977 | accessdate=7 January 2014 | pages=19\u201321 | first1=George N. | last1=Baird | first2=Paul | last2=Oliver | section=1974 Standard (X3.23\u20131974) | publisher=[[Department of the Navy]] | archiveurl=https://web.archive.org/web/20140107192439/http://www.dtic.mil/dtic/tr/fulltext/u2/a039740.pdf | archivedate=7 January 2014 | url-status=live}}</ref>\nThe report writer was slated to be removed from COBOL, but was reinstated before the standard was published.<ref>{{cite journal | url=https://books.google.com/books?id=8pMVcgpPyVMC&pg=PA17 | title='Spotty' Availability A Problem... | page=17 | date=23 July 1975 | last=Culleton, John R., Jr. | journal=Computerworld | issn=0010-4841 | volume=9 | issue=30}}</ref><ref>{{cite journal | url=https://books.google.com/books?id=X_3_D4RqzvIC&pg=PA20 | title=Does Cobol's Report Writer Really Miss the Mark? | journal=Computerworld | volume=9 | issue=25 | page=20 | first=Williams B. | last=Simmons | date=18 June 1975 | issn=0010-4841}}</ref> ISO later adopted the updated standard in 1978.<ref name=\"FS2003\"/>\n\n===COBOL-85===\nIn June 1978, work began on revising COBOL-74. The proposed standard (commonly called COBOL-80) differed significantly from the previous one, causing concerns about incompatibility and conversion costs. In January 1981, Joseph T. Brophy, Senior Vice-President of Travelers Insurance, threatened to sue the standard committee because it was not [[forward compatibility|upwards compatible]] with COBOL-74. Mr. Brophy described previous conversions of their 40-million-line code base as \"non-productive\" and a \"complete waste of our programmer resources\".<ref>{{cite journal | url=https://books.google.com/books?id=d514ApKzvjYC | title=User Threatens Suit Over Ansi Cobol-80 | journal=Computerworld | volume=15 | issue=4 | pages=1, 8 | first=Rita | last=Shoor | issn=0010-4841 | date=26 January 1981}}</ref>\nLater that year, the [[Data Processing Management Association]] (DPMA) said it was \"strongly opposed\" to the new standard, citing \"prohibitive\" conversion costs and enhancements that were \"forced on the user\".<ref>{{cite journal | url=https://books.google.com/books?id=1REkdf3I86oC | title=DPMA Takes Stand Against Cobol Draft | journal=Computerworld | volume=15 | issue=43 | pages=1\u20132 | date=26 October 1981 | first=Rita | last=Shoor | issn=0010-4841}}</ref><ref name=\"Computerworld 19 37\">{{cite journal | url=https://books.google.com/books?id=zrOC44tBR68C&pg=PA8 | title=Revised Cobol standard may be ready in late '85 | journal=Computerworld | volume=19 | issue=37 | pages=1, 8 | first=John | last=Gallant | date=16 September 1985 | issn=0010-4841}}</ref>\n\nDuring the first public review period, the committee received 2,200 responses, of which 1,700 were negative form letters.<ref name=\"Computerworld Garfunkel\">{{cite journal | url=https://books.google.com/books?id=zrOC44tBR68C&pg=PA41 | title=Expert addresses Cobol 85 standard | journal=Computerworld | volume=19 | issue=37 | pages=41, 48 | author=<!-- Staff writer(s); no by-line --> | date=16 September 1985 | issn=0010-4841}}</ref>\nOther responses were detailed analyses of the effect COBOL-80 would have on their systems; conversion costs were predicted to be at least 50 cents per line of code. Fewer than a dozen of the responses were in favor of the proposed standard.<ref>{{cite journal | url=https://books.google.com/books?id=Wz-oh7ZQo8MC | title=Responses to Cobol-80 Overwhelmingly Negative | journal=Computerworld | volume=16 | issue=11 | pages=1, 5 | date=15 March 1982 | first=Lois | last=Paul | issn=0010-4841}}</ref>\n\nISO TC97-SC5 installed in 1979 the international COBOL Experts Group, on initiative of [[Wim Ebbinkhuijsen]]. The group consisted of COBOL experts from many countries, including the USA. Its goal was to achieve mutual understanding and respect between ANSI and the rest of the world with regard to the need of new COBOL features. After three years, ISO changed the status of the group to a formal Working Group: [[ISO/IEC JTC 1/SC 22#History|WG4 COBOL]]. The group took primary ownership and development of the COBOL standard, where ANSI did most of the proposals.\n\nIn 1983, the DPMA withdrew its opposition to the standard, citing the responsiveness of the committee to public concerns. In the same year, a National Bureau of Standards study concluded that the proposed standard would present few problems.<ref name=\"Computerworld 19 37\" /><ref>{{cite journal | url=https://books.google.com/books?id=Of5OA6T_6UIC&pg=PA1 | title=Study Sees Few Problems Switching to Cobol-8X | journal=Computerworld | volume=17 | issue=17 | pages=1, 6 | first=Lois | last=Paul | date=25 April 1983}}</ref> A year later, a COBOL-80 compiler was released to [[DEC VAX]] users, who noted that conversion of COBOL-74 programs posed few problems. The new <code>EVALUATE</code> statement and inline <code>PERFORM</code> were particularly well received and improved productivity, thanks to simplified [[control flow]] and [[debugging]].<ref>{{cite journal | url=https://books.google.com/books?id=1qju5_k3q9AC&pg=PA1 | title=DEC users get head start implementing Cobol-80 | journal=Computerworld | volume=18 | issue=47 | pages=1, 6 | first=Paul | last=Gillin | date=19 November 1984 | issn=0010-4841}}</ref>\n\nThe second public review drew another 1,000 (mainly negative) responses, while the last drew just 25, by which time many concerns had been addressed.<ref name=\"Computerworld 19 37\"/>\n\nIn 1985, the ISO Working Group 4 accepted the then-version of the ANSI proposed standard, made several changes and set it as the new ISO standard COBOL 85. It was published in late 1985.\n\nSixty features were changed or deprecated and many{{quantify|date=March 2014}} were added, such as:{{sfn|Garfunkel|1987|p=150}}<ref>{{cite book | url=https://books.google.com/books?id=N066w1XgJXcC&pg=PA438&lpg=PA438#v=onepage&q&f=false | title=COBOL Programming: Problems and Solutions | publisher=McGraw-Hill Education | pages=438\u2013451 | isbn=978-0074603185 | first1=M. K. | last1=Roy | first2=D. Ghost | last2=Dastidar | date=1 June 1989 | edition=2nd | section=Features of COBOL-85}}</ref>\n\n* Scope terminators (<code>END-IF</code>, <code>END-PERFORM</code>, <code>END-READ</code>, etc.)\n* Nested subprograms\n* <code>CONTINUE</code>, a [[Placeholder (Computer syntax)|no-operation statement]]\n* <code>EVALUATE</code>, a [[switch statement]]\n* <code>INITIALIZE</code>, a statement that can set groups of data to their default values\n* Inline <code>PERFORM</code> loop bodies \u2013 previously, loop bodies had to be specified in a separate procedure\n* Reference modification, which allows access to substrings\n* I/O status codes.\n\nThe new standard was adopted by all national standard bodies, including ANSI.<ref name=\"FS2003\"/>\n\nTwo amendments followed in 1989 and 1993, the first introducing intrinsic functions and the other providing corrections.,<ref name=\"FS2003\" />\n\n===COBOL 2002 and object-oriented COBOL===\nIn 1997, [[Gartner Group]] estimated that there were a total of 200 billion lines of COBOL in existence, which ran 80% of all business programs.<ref>{{cite web | url=http://fcw.com/Articles/2009/07/13/TECH-COBOL-turns-50.aspx | title=Cobol remains old standby at agencies despite showing its age | publisher=Public Sector Media Group | work=FCW | accessdate=26 April 2014 | date=9 July 2009 | last=Robinson | first=Brian}}</ref>{{better source | reason=While this claim is ubiquitous, the actual Gartner report is needed to verify the claim. | date=January 2015}}\n\nIn the early 1990s, work began on adding object-orientation in the next full revision of COBOL. Object-oriented features were taken from [[C++]] and [[Smalltalk]].<ref name=\"SW95\">{{cite web | url=http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/1995/9510/9510e/9510e.htm | title=COBOL '97: A Status Report | work=Dr. Dobb's Journal | date=October 1995 | accessdate=21 April 2014 | last1=Saade | first1=Henry | first2=Ann | last2=Wallace | archive-url=https://web.archive.org/web/20140422232229/http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/DDJ/1995/9510/9510e/9510e.htm | archive-date=22 April 2014 | url-status=dead }}</ref><ref name=\"Arranga98\">{{cite book | url=https://books.google.com/books?id=posN1cl6XFUC&pg=PA15 | title=Object-Oriented COBOL | publisher=[[Cambridge University Press]] | page=15 | isbn=978-0132611404 | first1=Edmund C. | last1=Arranga | first2=Frank P. | last2=Coyle | date=February 1998 | quote=Object-Oriented COBOL's style reflects the influence of Smalltalk and C++.}}</ref>\nThe initial estimate was to have this revision completed by 1997, and an ISO Committee Draft (CD) was available by 1997. Some vendors (including [[Micro Focus International|Micro Focus]], [[Fujitsu]], and [[IBM]]) introduced object-oriented syntax based on drafts of the full revision. The final approved ISO standard was approved and published in late 2002.<ref name=\"cobolstandards.com\">{{cite web | url=http://www.cobolstandards.com/ | title=COBOL Standards | accessdate=2 September 2014 | archiveurl=https://web.archive.org/web/20040331054413/http://www.cobolstandards.com/ | archivedate=31 March 2004 | publisher=Micro Focus | url-status=dead}}</ref>\n\nFujitsu/GTSoftware,<ref>{{cite web | url=http://www.netcobol.com/product/netcobol-for-net/ | title=NetCOBOL for .Net | publisher=GTSoftware | work=netcobol.com | year=2013 | accessdate=29 January 2014 | url-status=dead | archiveurl=https://web.archive.org/web/20140708210107/http://www.netcobol.com/product/netcobol-for-net/ | archivedate=8 July 2014}}</ref> Micro Focus and [[RainCode]] introduced object-oriented COBOL compilers targeting the [[.NET Framework]].\n\nThere were many other new features, many of which had been in the ''CODASYL COBOL Journal of Development'' since 1978 and had missed the opportunity to be included in COBOL-85.<ref>{{cite web | url=https://books.google.com/books?id=VQhbdDusHcsC&pg=RA1-PA60 | title=A list of Codasyl Cobol features | work=Computerworld | date=10 September 1984 | accessdate=8 June 2014 | author=<!-- Staff writer(s); No by-line --> | page=ID/28 | issn=0010-4841 | volume=18 | issue=37}}</ref> These other features included:{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2001|loc=Annex F}}{{sfn|Klein|2010|p=21}}\n\n* Free-form code\n* [[User-defined function]]s\n* [[Recursion]]\n* [[Locale (computer software)|Locale]]-based processing\n* Support for extended character sets such as [[Unicode]]\n* [[Floating-point]] and [[binary number|binary]] data types (until then, binary items were truncated based on their declaration's [[base-10]] specification)\n* Portable arithmetic results\n*[[Bit]] and [[Boolean data type|boolean]] data types\n* [[Pointer (computer programming)|Pointers]] and syntax for getting and freeing storage\n* The {{code|SCREEN SECTION}} for [[text-based user interface]]s\n* The {{code|VALIDATE}} facility\n* Improved interoperability with other programming languages and [[Application framework|framework environments]] such as .NET and [[Java (platform)|Java]].\n\nThree [[Erratum|corrigenda]] were published for the standard: two in 2006 and one in 2009.<ref name=\"WG4 Website\">{{cite web | url=http://www.cobolstandard.info/wg4/wg4.html | title=JTC1/SC22/WG4 \u2013 COBOL | publisher=ISO | date=30 June 2010 | accessdate=27 April 2014 | archiveurl=https://web.archive.org/web/20140214225220/http://www.cobolstandard.info/wg4/wg4.html | archivedate=14 February 2014 | url-status=dead}}</ref>\n\n===COBOL 2014===\nBetween 2003 and 2009, three technical reports were produced describing [[finalizer|object finalization]], [[XML]] processing and [[collection class]]es for COBOL.<ref name=\"WG4 Website\"/>\n\nCOBOL 2002 suffered from poor support: no compilers completely supported the standard. Micro Focus found that it was due to a lack of user demand for the new features and due to the abolition of the [[NIST]] test suite, which had been used to test compiler conformance. The standardization process was also found to be slow and under-resourced.<ref>{{cite web | url=http://www.cobolstandard.info/j4/files/08-0034.pdf | title=Thoughts on the Future of COBOL Standardization | date=27 February 2008 | accessdate=14 August 2014 | first1=John | last1=Billman | first2=Huib | last2=Klink | archiveurl=https://web.archive.org/web/20090711032647/http://www.cobolstandard.info/j4/files/08-0034.pdf | archivedate=11 July 2009 | url-status=dead}}</ref>\n\nCOBOL 2014 includes the following changes:{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=Annex E}}\n* Portable arithmetic results have been replaced by [[IEEE 754]] data types\n* Major features have been made optional, such as the <code>VALIDATE</code> facility, the report writer and the screen-handling facility.\n* Method overloading\n* Dynamic capacity tables (a feature dropped from the draft of COBOL 2002)<ref>{{cite web | url=http://www.microfocus.com/Standards/ | title=J4: COBOL Standardization | publisher=Micro Focus | date=2 December 1998 | accessdate=12 July 2014 | archiveurl=https://web.archive.org/web/19990224043617/http://www.microfocus.com/Standards/ | archivedate=24 February 1999 | url-status=dead | first=Don | last=Schricker}}</ref>\n\n===Legacy===\nCOBOL programs are used globally in governments and businesses and are running on diverse operating systems such as [[z/OS]], [[z/VSE]], [[ICL VME|VME]], [[Unix]], [[OpenVMS]] and [[Microsoft Windows|Windows]]. In 1997, the [[Gartner Group]] reported that 80% of the world's business ran on COBOL with over 200 billion lines of code and 5 billion lines more being written annually.<ref>{{cite journal |url=http://proc.isecon.org/2000/126/ISECON.2000.Kizior.pdf | title=Does COBOL Have a Future? |accessdate=30 September 2012 |first1=Ronald J. |last1=Kizior |first2=Donald |last2=Carr |first3=Paul |last3=Halpern |journal=The Proceedings of the Information Systems Education Conference 2000 |volume=17 |issue=126 | url-status=dead | archiveurl=https://web.archive.org/web/20160817115437/http://proc.isecon.org/2000/126/ISECON.2000.Kizior.pdf | archivedate=17 August 2016}}</ref>\n\nNear the end of the 20th century, the [[year 2000 problem]] (Y2K) was the focus of significant COBOL programming effort, sometimes by the same programmers who had designed the systems decades before. The particular level of effort required to correct COBOL code has been attributed{{by whom|date=March 2014}} to the large amount of business-oriented COBOL, as business applications use dates heavily, and to fixed-length data fields. After the clean-up effort put into these programs for Y2K, a 2003 survey found that many remained in use.{{sfn|Carr|Kizior|2003|p=16}}\nThe authors said that the survey data suggest \"a gradual decline in the importance of Cobol in application development over the [following] 10 years unless ... integration with other languages and technologies can be adopted\".{{sfn|Carr|Kizior|2003|p=10}}\n\nIn 2006 and 2012, ''[[Computerworld]]'' surveys found that over 60% of organizations used COBOL (more than [[C++]] and [[Visual Basic .NET]]) and that for half of those, COBOL was used for the majority of their internal software.<ref name=\"Computerworld Not Dead Yet\">{{cite web | url=http://www.computerworld.com/s/article/266156/Cobol_Not_Dead_Yet | title=Cobol: Not Dead Yet | work=Computerworld | date=4 October 2006 | accessdate=27 April 2014 | last=Mitchell | first=Robert L.}}</ref><ref>{{cite web | url=http://www.computerworld.com/s/article/9225099/Cobol_brain_drain_Survey_results | title=Cobol brain drain: Survey results | work=Computerworld | date=14 March 2012 | accessdate=27 April 2014 | author=<!-- N/A -->}}</ref> 36% of managers said they planned to migrate from COBOL, and 25% said they would like to if it was cheaper. Instead, some businesses have migrated their systems from expensive mainframes to cheaper, more modern systems, while maintaining their COBOL programs.<ref name=\"Computerworld Not Dead Yet\" />\n\nTestimony before the [[Committee on Oversight and Government Reform|House of Representatives]] in 2016 indicated that COBOL is still in use by many federal agencies.<ref name = \"Powner, GAO, 2016\" >{{ cite web | url = https://www.gao.gov/assets/680/677454.pdf | title = Federal Agencies Need to Address Aging Legacy Systems | access-date = 19 July 2019 | first = David A. | last = Powner | date = 25 May 2016 | website = [[Government Accountability Office]] | quote = Several agencies, such as the Department of Agriculture (USDA), DHS, HHS, Justice, Treasury, and VA, reported using Common Business Oriented Language (COBOL)\u2014a programming language developed in the late 1950s and early 1960s\u2014to program their legacy systems. It is widely known that agencies need to move to more modern, maintainable languages, as appropriate and feasible. | page = 18 | archive-url = https://web.archive.org/web/20160615044750/https://www.gao.gov/assets/680/677454.pdf | archive-date = 15 June 2016 | df = dmy-all }}</ref>\n\n==Features==\n\n===Syntax===\nCOBOL has an English-like syntax, which is used to describe nearly everything in a program. For example, a condition can be expressed as &nbsp;{{code|x IS GREATER THAN y|lang=cobolfree}} or more concisely as &nbsp;{{code|x GREATER y|lang=cobolfree}}&nbsp; or &nbsp;{{code|x > y|lang=cobolfree}}. More complex conditions can be \"abbreviated\" by removing repeated conditions and variables. For example, &nbsp;{{code|1=a > b AND a > c OR a = d|lang=cobolfree}}&nbsp; can be shortened to {{code|1=a > b AND c OR = d|lang=cobolfree}}. As a consequence of this English-like syntax, COBOL has over 300 [[keyword (computer programming)|keywords]].{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 8.9}}{{efn|Vendor-specific extensions cause many implementations to have far more: one implementation recognizes over 1,100 keywords.<ref>{{cite web | url=http://documentation.microfocus.com/help/topic/com.microfocus.eclipse.infocenter.visualcobol.vs2013/HRLHLHARES01U005.html | title=Reserved Words Table | publisher=[[Micro Focus]] | work=Micro Focus Visual COBOL 2.2 COBOL Language Reference | accessdate=3 March 2014}}</ref>}} Some of the keywords are simple alternative or pluralized spellings of the same word, which provides for more English-like statements and clauses; e.g., the {{code|IN}} and {{code|OF}} keywords can be used interchangeably, as can {{code|IS}} and {{code|ARE}}, and {{code|VALUE}} and {{code|VALUES}}.\n\nEach COBOL program is made up of four basic [[lexical items]]: words, literals, picture character-strings (see {{slink||PICTURE clause}}) and separators. Words include reserved words and user-defined identifiers. They are up to 31 characters long and may include letters, digits, hyphens and underscores. Literals include numerals (e.g. {{code|12}}) and strings (e.g. {{code|'Hello!'}}).{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 8.3.1.2}} Separators include the space character and commas and semi-colons followed by a space.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 8.3.2}}\n\nA COBOL program is split into four divisions: the identification division, the environment division, the data division and the procedure division. The identification division specifies the name and type of the source element and is where classes and interfaces are specified. The environment division specifies any program features that depend on the system running it, such as [[computer files|files]] and [[character sets]]. The data division is used to declare [[variable (computer science)|variable]]s and [[parameter (computer programming)|parameter]]s. The procedure division contains the program's [[statement (computer science)|statement]]s. Each division is sub-divided into sections, which are made up of paragraphs.\n\n====Metalanguage====\n\nCOBOL's syntax is usually described with a unique [[metalanguage]] using braces, brackets, bars and underlining. The metalanguage was developed for the original COBOL specifications. Although [[Backus\u2013Naur form]] did exist at the time, the committee had not heard of it.{{sfn|Shneiderman|1985|p=349}}\n\n{| class=\"wikitable\"\n|+ Elements of COBOL's metalanguage\n|-\n! Element\n! Appearance\n! Function\n|-\n|-\n| All capitals\n| EXAMPLE\n| Reserved word\n|-\n| Underlining\n| {{underline|EXAMPLE}}\n| The reserved word is compulsory\n|-\n| Braces\n| { }\n| Only one option may be selected\n|-\n| Brackets\n| []\n| Zero or one options may be selected\n|-\n| Ellipsis\n| ...\n| The preceding element may be repeated\n|-\n| rowspan=\"2\" | Bars\n| {{{pipe}} {{pipe}}}\n| One or more options may be selected. Any option may only be selected once.\n|-\n| [{{pipe}} {{pipe}}]\n| Zero or more options may be selected. Any option may only be selected once.\n|}\n\nAs an example, consider the following description of an <code>ADD</code> statement:\n\n<math>\n\\begin{array}{l}\n  \\underline{\\text{ADD}}\\,\n  \\begin{Bmatrix}\n    \\text{identifier-1} \\\\\n    \\text{literal-1}\n  \\end{Bmatrix}\\dots\n  \\;\\underline{\\text{TO}}\\,\\left\\{\\text{identifier-2}\\,\\left[\\,\\underline{\\text{ROUNDED}}\\,\\right]\\right\\}\\dots\n  \\\\\n\n  \\quad\n  \\left[\\left|\\begin{array}{l}\n     \\text{ON}\\,\\underline{\\text{SIZE}}\\,\\underline{\\text{ERROR}}\\,\\text{imperative-statement-1} \\\\\n     \\underline{\\text{NOT}}\\,\\text{ON}\\,\\underline{\\text{SIZE}}\\,\\underline{\\text{ERROR}}\\,\\text{imperative-statement-2} \\\\\n  \\end{array}\\right|\\right]\n  \\\\\n\n  \\quad\n  \\left[\\,\\underline{\\text{END-ADD}}\\,\\right]\n\\end{array}\n</math>\n\nThis description permits the following variants:\n\n<syntaxhighlight lang=\"cobolfree\">\nADD 1 TO x\nADD 1, a, b TO x ROUNDED, y, z ROUNDED\n\nADD a, b TO c\n    ON SIZE ERROR\n        DISPLAY \"Error\"\nEND-ADD\n\nADD a TO b\n    NOT SIZE ERROR\n        DISPLAY \"No error\"\n    ON SIZE ERROR\n        DISPLAY \"Error\"\n</syntaxhighlight>\n\n===Code format===\nCOBOL can be written in two formats: fixed (the default) or free. In fixed-format, code must be aligned to fit in certain areas (a hold-over from using punched cards). Until COBOL 2002, these were:\n\n{| class=\"wikitable\"\n|-\n! Name\n! Column(s)\n! Usage\n|-\n| Sequence number area\n| 1\u20136\n| Originally used for card/line numbers, this area is ignored by the compiler\n|-\n| Indicator area\n| 7\n| The following characters are allowed here:\n* <code>*</code> \u2013 Comment line\n* <code>/</code> \u2013 Comment line that will be printed on a new page of a source listing\n* <code>-</code> \u2013 Continuation line, where words or literals from the previous line are continued\n* <code>D</code> \u2013 Line enabled in debugging mode, which is otherwise ignored\n|-\n| Area A\n| 8\u201311\n| This contains: <code>DIVISION</code>, <code>SECTION</code> and procedure headers; 01 and 77 level numbers and file/report descriptors\n|-\n| Area B\n| 12\u201372\n| Any other code not allowed in Area A\n|-\n| Program name area\n| 73\u2013\n| Historically up to column 80 for punched cards, it is used to identify the program or sequence the card belongs to\n|}\n\nIn COBOL 2002, Areas A and B were merged to form the program-text area, which now ends at an implementor-defined column.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2001|loc=\u00a7 F.2}}\n\nCOBOL 2002 also introduced free-format code. Free-format code can be placed in any column of the file, as in newer programming languages. Comments are specified using <code>*></code>, which can be placed anywhere and can also be used in fixed-format source code. Continuation lines are not present, and the <code>>>PAGE</code> directive replaces the <code>/</code> indicator.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2001|loc=\u00a7 F.2}}\n\n===Identification division===\nThe identification division identifies the following code entity and contains the definition of a class or interface.\n\n====Object-oriented programming====\n[[class (computer programming)|Classes]] and [[Interface (object-oriented programming)|interfaces]] have been in COBOL since 2002. Classes have factory objects, containing class [[method (computer programming)|methods]] and variables, and instance objects, containing instance methods and variables.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 D.18.2}} Inheritance and interfaces provide [[polymorphism (computer science)|polymorphism]]. Support for [[generic programming]] is provided through parameterized classes, which can be instantiated to use any class or interface. Objects are stored as references which may be restricted to a certain type. There are two ways of calling a method: the {{code|INVOKE}} statement, which acts similarly to {{code|CALL}}, or through inline method invocation, which is analogous to using functions.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 D.18}}\n\n<syntaxhighlight lang=\"cobolfree\">\n*> These are equivalent.\nINVOKE my-class \"foo\" RETURNING var\nMOVE my-class::\"foo\" TO var *> Inline method invocation\n</syntaxhighlight>\n\nCOBOL does not provide a way to [[Member visibility|hide]] methods. Class data can be hidden, however, by declaring it without a [[property (programming)|{{code|PROPERTY}}]] clause, which leaves the user with no way to access it.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|p=108}} [[Method overloading]] was added in COBOL 2014.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|p=896}}\n\n===Environment division===\nThe environment division contains the configuration section and the input-output section. The configuration section is used to specify variable features such\nas currency signs, locales and character sets. The input-output section contains file-related information.\n\n====Files====\nCOBOL supports three file formats, or ''{{dfn|organizations}}'': sequential, indexed and relative. In sequential files, records are contiguous and must be traversed [[sequential access|sequentially]], similarly to a [[linked list]]. Indexed files have one or more indexes which allow records to be [[random access|randomly accessed]] and which can be sorted on them. Each record must have a [[unique key]], but other, ''{{dfn|alternate}}'', record keys need not be unique. Implementations of indexed files vary between vendors, although common implementations, such as [[C-ISAM|C&#8209;ISAM]] and [[VSAM]], are based on IBM's [[ISAM]]. Relative files, like indexed files, have a unique record key, but they do not have alternate keys. A relative record's key is its ordinal position; for example, the 10th record has a key of 10. This means that creating a record with a key of 5 may require the creation of (empty) preceding records. Relative files also allow for both sequential and random access.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 D.2.1}}\n\nA common non-standard extension is the ''{{dfn|line sequential}}'' organization, used to process text files. Records in a file are terminated by a [[newline]] and may be of varying length.<ref>{{cite web | url=http://supportline.microfocus.com/documentation/books/nx30books/fhorgs.htm | title=File Organizations | publisher=Micro Focus | work=File Handling | date=1998 | accessdate=27 June 2014}}</ref>\n\n===Data division===\nThe data division is split into six sections which declare different items: the file section, for file records; the working-storage section, for [[static variable]]s; the local-storage section, for [[automatic variable]]s; the linkage section, for parameters and the return value; the report section and the screen section, for [[text-based user interface]]s.\n\n====Aggregated data====\nData items in COBOL are declared hierarchically through the use of level-numbers which indicate if a data item is part of another. An item with a higher level-number is subordinate to an item with a lower one. Top-level data items, with a level-number of 1, are called ''{{dfn|records}}''. Items that have subordinate aggregate data are called ''{{dfn|group items}}''; those that do not are called ''{{dfn|elementary items}}''. Level-numbers used to describe standard data items are between 1 and 49.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 8.5.1.2}}{{sfn|Cutler|2014|loc=Appendix A}}\n\n<syntaxhighlight lang=\"cobol\">\n       01  some-record.                   *> Aggregate group record item\n           05  num            PIC 9(10).  *> Elementary item\n           05  the-date.                  *> Aggregate (sub)group record item\n               10  the-year   PIC 9(4).   *> Elementary item\n               10  the-month  PIC 99.     *> Elementary item\n               10  the-day    PIC 99.     *> Elementary item\n</syntaxhighlight>\n\nIn the above example, elementary item {{code|num}} and group item {{code|the-date}} are subordinate to the record {{code|some-record}}, while elementary items {{code|the-year}}, {{code|the-month}}, and {{code|the-day}} are part of the group item {{code|the-date}}.\n\nSubordinate items can be disambiguated with the {{code|IN}} (or {{code|OF}}) keyword. For example, consider the example code above along with the following example:\n<syntaxhighlight lang=\"cobol\">\n       01  sale-date.\n           05  the-year       PIC 9(4).\n           05  the-month      PIC 99.\n           05  the-day        PIC 99.\n</syntaxhighlight>\n\nThe names {{code|the-year}}, {{code|the-month}}, and {{code|the-day}} are ambiguous by themselves, since more than one data item is defined with those names. To specify a particular data item, for instance one of the items contained within the {{code|sale-date}} group, the programmer would use {{code|the-year IN sale-date}} (or the equivalent {{code|the-year OF sale-date}}). (This syntax is similar to the \"dot notation\" supported by most contemporary languages.)\n\n====Other data levels====\nA level-number of 66 is used to declare a re-grouping of previously defined items, irrespective of how those items are structured. This data level, also referred to by the associated {{dfn|{{code|RENAMES}} clause}}, is rarely used<ref>{{cite book | title=Sams Teach Yourself COBOL in 24 hours | publisher=[[Sams|SAMS Publishing]] | year=1999 | pages=40 | isbn=978-0672314537 | first=Thane | last=Hubbell | lccn=98087215}}</ref> and, circa 1988, was usually found in old programs. Its ability to ignore the hierarchical and logical structure data meant its use was not recommended and many installations forbade its use.{{sfn|McCracken|Golden|1988|loc=\u00a7 19.9}}\n<syntaxhighlight lang=\"cobol\">\n       01  customer-record.\n           05  cust-key            PIC X(10).\n           05  cust-name.\n               10  cust-first-name PIC X(30).\n               10  cust-last-name  PIC X(30).\n           05  cust-dob            PIC 9(8).\n           05  cust-balance        PIC 9(7)V99.\n           \n       66  cust-personal-details   RENAMES cust-name THRU cust-dob.\n       66  cust-all-details        RENAMES cust-name THRU cust-balance.\n</syntaxhighlight>\n\nA 77 level-number indicates the item is stand-alone, and in such situations is equivalent to the level-number 01. For example, the following code declares two 77-level data items, {{code|property-name}} and {{code|sales-region}}, which are non-group data items that are independent of (not subordinate to) any other data items:\n<syntaxhighlight lang=\"cobol\">\n       77  property-name      PIC X(80).\n       77  sales-region       PIC 9(5).\n</syntaxhighlight>\n\nAn 88 level-number declares a ''{{dfn|condition name}}'' (a so-called 88-level) which is true when its parent data item contains one of the values specified in its {{code|VALUE}} clause.{{sfn|Cutler|2014|loc=\u00a7 5.8.5}} For example, the following code defines two 88-level condition-name items that are true or false depending on the current character data value of the {{code|wage-type}} data item. When the data item contains a value of {{code|'H'}}, the condition-name {{code|wage-is-hourly}} is true, whereas when it contains a value of {{code|'S'}} or {{code|'Y'}}, the condition-name {{code|wage-is-yearly}} is true. If the data item contains some other value, both of the condition-names are false.\n<syntaxhighlight lang=\"cobol\">\n       01  wage-type          PIC X.\n           88  wage-is-hourly VALUE \"H\".\n           88  wage-is-yearly VALUE \"S\", \"Y\".\n</syntaxhighlight>\n\n====Data types====\nStandard COBOL provides the following data types:{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 8.5.2}}\n\n{| class=\"wikitable\"\n|-\n! Data type\n! Sample declaration\n! Notes\n|-\n| Alphabetic\n| {{code|PIC A(30)|lang=cobolfree}}\n| May only contain letters or spaces\n|-\n| Alphanumeric\n| {{code|PIC X(30)|lang=cobolfree}}\n| May contain any characters\n|-\n| Boolean\n| {{code|PIC 1 USAGE BIT|lang=cobolfree}}\n| Data stored in the form of 0s and 1s, as a binary number\n|-\n| Index\n| {{code|USAGE INDEX|lang=cobolfree}}\n| Used to reference table elements\n|-\n| National\n| {{code|PIC N(30)|lang=cobolfree}}\n| Similar to alphanumeric, but using an extended character set, e.g. [[UTF-8]]\n|-\n| Numeric\n| {{code|PIC 9(5)V9(5)|lang=cobolfree}}\n| May contain only numbers\n|-\n| Object\n| {{code|USAGE OBJECT REFERENCE|lang=cobolfree}}\n| May reference either an object or <code>NULL</code>\n|-\n| Pointer\n| {{code|USAGE POINTER|lang=cobolfree}}\n|\n|}\n\nType safety is variable in COBOL. Numeric data is converted between different representations and sizes silently and alphanumeric data can be placed in any data item that can be stored as a string, including numeric and group data.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 14.9.24}} In contrast, object references and pointers may only be assigned from items of the same type and their values may be restricted to a certain type.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 14.9.35}}\n\n=====PICTURE clause=====\nA {{code|PICTURE}} (or {{code|PIC}}) clause is a string of characters, each of which represents a portion of the data item and what it may contain. Some picture characters specify the type of the item and how many characters or digits it occupies in memory. For example, a {{code|9}} indicates a decimal digit, and an {{code|S}} indicates that the item is [[signedness|signed]]. Other picture characters (called ''{{dfn|insertion}}'' and ''{{dfn|editing}}'' characters) specify how an item should be formatted. For example, a series of {{code|+}} characters define character positions as well as how a leading sign character is to be positioned within the final character data; the rightmost non-numeric character will contain the item's sign, while other character positions corresponding to a {{code|+}} to the left of this position will contain a space. Repeated characters can be specified more concisely by specifying a number in parentheses after a picture character; for example, {{code|9(7)}} is equivalent to {{code|9999999}}. Picture specifications containing only digit ({{code|9}}) and sign ({{code|S}}) characters define purely ''{{dfn|numeric}}'' data items, while picture specifications containing alphabetic ({{code|A}}) or alphanumeric ({{code|X}}) characters define ''{{dfn|alphanumeric}}'' data items. The presence of other formatting characters define ''{{dfn|edited numeric}}'' or ''{{dfn|edited alphanumeric}}'' data items.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 13.18.40}}\n\n{| class=\"wikitable\"\n|+ Examples\n|-\n! {{code|PICTURE}} clause\n! Value in\n! Value out\n|-\n| rowspan=\"2\" | {{code|PIC 9(5)|lang=cobolfree}}\n| {{code|100}}\n| {{code|00100}}\n|-\n| {{code|\"Hello\"}}\n| {{code|\"Hello\"}} (this is legal, but results in [[undefined behavior]]){{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 14.9.24}}\n|-\n| {{code|PIC +++++|lang=cobolfree}}\n| {{code|-10}}\n| <code>\"&nbsp;&nbsp;-10\"</code><!-- {{code|   -10}} deletes one of the spaces --> (note leading spaces)\n|-\n| {{code|PIC 99/99/9(4)|lang=cobolfree}}\n| {{code|31042003}}\n| {{code|\"31/04/2003\"}}\n|-\n| rowspan=\"2\" | {{code|PIC *(4)9.99|lang=cobolfree}}\n| {{code|100.50}}\n| {{code|\"**100.50\"}}\n|-\n| <code>0</code> <!-- {{code|0}} produces a space for some reason -->\n| {{code|\"****0.00\"}}\n|-\n| {{code|PIC X(3)BX(3)BX(3)|lang=cobolfree}}\n| {{code|\"ABCDEFGHI\"}}\n| {{code|\"ABC DEF GHI\"}}\n|}\n\n=====USAGE clause=====\nThe {{code|USAGE}} clause declares the format data is stored in. Depending on the data type, it can either complement or be used instead of a {{code|PICTURE}} clause. While it can be used to declare pointers and object references, it is mostly geared towards specifying numeric types. These numeric formats are:{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 13.18.60.3}}\n\n* Binary, where a minimum size is either specified by the <code>PICTURE</code> clause or by a <code>USAGE</code> clause such as <code>BINARY-LONG</code>.\n* {{code|USAGE COMPUTATIONAL|lang=cobolfree}}, where data may be stored in whatever format the implementation provides; often equivalent to &nbsp;{{code|USAGE BINARY|lang=cobolfree}}\n* {{code|USAGE DISPLAY|lang=cobolfree}}, the default format, where data is stored as a string\n* Floating-point, in either an implementation-dependent format or according to IEEE 754.\n* {{code|USAGE NATIONAL|lang=cobolfree}}, where data is stored as a string using an extended character set\n* {{code|USAGE PACKED-DECIMAL|lang=cobolfree}}, where data is stored in the smallest possible decimal format (typically [[packed binary-coded decimal]])\n\n====Report writer====\nThe report writer is a [[declarative programming|declarative facility]] for creating reports. The programmer need only specify the report layout and the data required to produce it, freeing them from having to write code to handle things like page breaks, data formatting, and headings and footings.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|p=855}}\n\nReports are associated with report files, which are files which may only be written to through report writer statements.\n\n<syntaxhighlight lang=\"cobol\">\n       FD  report-out REPORT sales-report.\n</syntaxhighlight>\n\nEach report is defined in the report section of the data division. A report is split into report groups which define the report's headings, footings and details. Reports work around hierarchical ''{{dfn|control breaks}}''. Control breaks occur when a key variable changes it value; for example, when creating a report detailing customers' orders, a control break could occur when the program reaches a different customer's orders. Here is an example report description for a report which gives a salesperson's sales and which warns of any invalid records:\n\n<syntaxhighlight lang=\"cobol\">\n       RD  sales-report\n           PAGE LIMITS 60 LINES\n           FIRST DETAIL 3\n           CONTROLS seller-name.\n\n       01  TYPE PAGE HEADING.\n           03  COL 1                    VALUE \"Sales Report\".\n           03  COL 74                   VALUE \"Page\".\n           03  COL 79                   PIC Z9 SOURCE PAGE-COUNTER.\n\n       01  sales-on-day TYPE DETAIL, LINE + 1.\n           03  COL 3                    VALUE \"Sales on\".\n           03  COL 12                   PIC 99/99/9999 SOURCE sales-date.\n           03  COL 21                   VALUE \"were\".\n           03  COL 26                   PIC $$$$9.99 SOURCE sales-amount.\n\n       01  invalid-sales TYPE DETAIL, LINE + 1.\n           03  COL 3                    VALUE \"INVALID RECORD:\".\n           03  COL 19                   PIC X(34) SOURCE sales-record.\n\n       01  TYPE CONTROL HEADING seller-name, LINE + 2.\n           03  COL 1                    VALUE \"Seller:\".\n           03  COL 9                    PIC X(30) SOURCE seller-name.\n</syntaxhighlight>\n\nThe above report description describes the following layout:\n<pre>\nSales Report                                                             Page  1\n\nSeller: Howard Bromberg\n  Sales on 10/12/2008 were $1000.00\n  Sales on 12/12/2008 were    $0.00\n  Sales on 13/12/2008 were   $31.47\n  INVALID RECORD: Howard Bromberg             XXXXYY\n\nSeller: Howard Discount\n...\nSales Report                                                            Page 12\n\n  Sales on 08/05/2014 were  $543.98\n  INVALID RECORD: William Selden      12O52014FOOFOO\n  Sales on 30/05/2014 were    $0.00\n</pre>\n\nFour statements control the report writer: {{code|INITIATE}}, which prepares the report writer for printing; {{code|GENERATE}}, which prints a report group; {{code|SUPPRESS}}, which suppresses the printing of a report group; and {{code|TERMINATE}}, which terminates report processing. For the above sales report example, the procedure division might look like this:\n\n<syntaxhighlight lang=\"cobol\">\n           OPEN INPUT sales, OUTPUT report-out\n           INITIATE sales-report\n \n           PERFORM UNTIL 1 <> 1\n               READ sales\n                   AT END\n                       EXIT PERFORM\n               END-READ\n \n               VALIDATE sales-record\n               IF valid-record\n                   GENERATE sales-on-day\n               ELSE\n                   GENERATE invalid-sales\n               END-IF\n           END-PERFORM\n \n           TERMINATE sales-report\n           CLOSE sales, report-out\n           .\n</syntaxhighlight>\n\nUse of the Report Writer facility tended to vary considerably; some organizations used it extensively and some not at all.{{sfn|McCracken|1976|p=338}}  In addition, implementations of Report Writer ranged in quality, with those at the lower end sometimes using excessive amounts of memory at runtime.{{sfn|McCracken|1976|p=338}}\n\n===Procedure division===\n\n====Procedures====\nThe sections and paragraphs in the procedure division (collectively called procedures) can be used as [[label (programming)|labels]] and as simple [[subroutines]]. Unlike in other divisions, paragraphs do not need to be in sections.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 14.4}}\nExecution goes down through the procedures of a program until it is terminated.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 14.6.3}}\nTo use procedures as subroutines, the {{code|PERFORM}} verb is used.\n\nA {{code|PERFORM}} statement somewhat resembles a procedure call in a modern language in the sense that execution returns to the code following the {{code|PERFORM}} statement at the end of the called code; however, it does not provide any mechanism for [[Parameter (computer programming)|parameter passing]] or for returning a result value. If a subroutine is invoked using a simple statement like {{code|PERFORM subroutine|lang=cobolfree}}, then control returns at the end of the called procedure. However, {{code|PERFORM}} is unusual in that it may be used to call a range spanning a sequence of several adjacent procedures. This is done with the {{code|PERFORM sub-1 THRU sub-n|lang=cobolfree}} construct:\n\n<syntaxhighlight lang=\"cobolfree\">\nPROCEDURE so-and-so.\n    PERFORM ALPHA\n    PERFORM ALPHA THRU GAMMA\n    STOP RUN.\nALPHA.\n    DISPLAY 'A'.\nBETA.\n    DISPLAY 'B'.\nGAMMA.\n    DISPLAY 'C'.\n</syntaxhighlight>\n\nThe output of this program will be: \"A A B C\".\n\n{{code|PERFORM}} also differs from conventional procedure calls in that there is, at least traditionally, no notion of a call stack. As a consequence, nested invocations are possible (a sequence of code being {{code|PERFORM}}'ed may execute a {{code|PERFORM}} statement itself), but require extra care if parts of the same code are executed by both invocations. The problem arises when the code in the inner invocation reaches the exit point of the outer invocation. More formally, if control passes through the exit point of a {{code|PERFORM}} invocation that was called earlier but has not completed yet, the COBOL 2002 standard officially stipulates that the behaviour is [[Undefined behavior|undefined]].\n\nThe reason is that COBOL, rather than a \"return address\", operates with what may be called a continuation address. When control flow reaches the end of any procedure, the continuation address is looked up and control is transferred to that address. Before the program runs, the continuation address for every procedure is initialised to the start address of the procedure that comes next in the program text so that, if no {{code|PERFORM}} statements happen, control flows from top to bottom through the program. But when a {{code|PERFORM}} statement executes, it modifies the continuation address of the called procedure (or the last procedure of the called range, if {{code|PERFORM THRU}} was used), so that control will return to the call site at the end. The original value is saved and is restored afterwards, but there is only one storage position. If two nested invocations operate on overlapping code, they may interfere which each other's management of the continuation address in several ways.<ref name=\"FR99\">{{cite conference | url=http://pages.cs.wisc.edu/~ramali/Papers/paste99.pdf | title=Identifying Procedural Structure in Cobol Programs | doi=10.1145/381788.316163 | first1=John | last1=Field | first2=G. | last2=Ramalingam | conference=PASTE '99 | ISBN=1581131372 | conferenceurl=http://cseweb.ucsd.edu/~wgg/paste99.html | date=September 1999}}</ref><ref name=\"VV07\">{{cite journal | url=http://www.cs.vu.nl/~nveerman/research/minefield/minefield.pdf | title=Cobol minefield detection | journal=Software\u2014Practice and Experience |date=November 2006 | volume=36 | issue=14 | doi=10.1002/spe.v36:14 | archiveurl=https://web.archive.org/web/20070306135410/http://www.cs.vu.nl/~nveerman/research/minefield/minefield.pdf | url-status=dead | archivedate=6 March 2007 | last1=Veerman | first1=Niels | last2=Verhoeven | first2=Ernst-Jan }}</ref>\n\nThe following example (taken from Veerman/Verhoeven, 2006) illustrates the problem:\n\n<syntaxhighlight lang=\"cobolfree\">\nLABEL1.\n    DISPLAY '1'\n    PERFORM LABEL2 THRU LABEL3\n    STOP RUN.\nLABEL2.\n    DISPLAY '2'\n    PERFORM LABEL3 THRU LABEL4.\nLABEL3.\n    DISPLAY '3'.\nLABEL4.\n    DISPLAY '4'.\n</syntaxhighlight>\n\nOne might expect that the output of this program would be \"1 2 3 4 3\": After displaying \"2\", the second {{code|PERFORM}} causes \"3\" and \"4\" to be displayed, and then the first invocation continues on with \"3\". In traditional COBOL implementations, this is not the case. Rather, the first {{code|PERFORM}} statement sets the continuation address at the end of {{code|LABEL3}} so that it will jump back to the call site inside {{code|LABEL1}}. The second {{code|PERFORM}} statement sets the return at the end of {{code|LABEL4}} but does not modify the continuation address of {{code|LABEL3}}, expecting it to be the default continuation. Thus, when the inner invocation arrives at the end of {{code|LABEL3}}, it jumps back to the outer {{code|PERFORM}} statement, and the program stops having printed just \"1 2 3\". On the other hand, in some COBOL implementations like the open-source TinyCOBOL compiler, the two {{code|PERFORM}} statements do not interfere with each other and the output is indeed \"1 2 3 4 3\". Therefore, the behaviour in such cases is not only (perhaps) surprising, it is also not portable.<ref name=\"VV07\"/>\n\nA special consequence of this limitation is that {{code|PERFORM}} cannot be used to write recursive code. Another simple example to illustrate this (slightly simplified from Veerman/Verhoeven, 2006):\n\n<syntaxhighlight lang=\"cobolfree\">\n    MOVE 1 TO A\n    PERFORM LABEL\n    STOP RUN.\nLABEL.\n    DISPLAY A\n    IF A < 3\n        ADD 1 TO A\n        PERFORM LABEL\n    END-IF\n    DISPLAY 'END'.\n</syntaxhighlight>\n\nOne might expect that the output is \"1 2 3 END END END\", and in fact that is what some COBOL compilers will produce. But some compilers, like IBM COBOL, will produce code that prints \"1 2 3 END END END END ...\" and so on, printing \"END\" over and over in an endless loop. Since there is limited space to store backup continuation addresses, the backups get overwritten in the course of recursive invocations, and all that can be restored is the jump back to {{code|DISPLAY 'END'}}.<ref name=\"VV07\"/>\n\n====Statements====\nCOBOL 2014 has 47 statements (also called ''{{dfn|verbs}}''),{{sfn|ISO/IEC JTC 1/SC 22/WG4|2014|loc=\u00a7 14.9}} which can be grouped into the following broad categories: control flow, I/O, data manipulation and the report writer. The report writer statements are covered in the [[#Report writer|report writer section]].\n\n=====Control flow=====\nCOBOL's [[conditional (computer programming)|conditional statements]] are {{code|IF}} and {{code|EVALUATE}}. {{code|EVALUATE}} is a [[switch statement|switch-like statement]] with the added capability of evaluating multiple values and conditions. This can be used to implement [[decision table]]s. For example, the following might be used to control a [[CNC lathe]]: <!-- a more common appliance would be more suitable. -->\n\n<syntaxhighlight lang=\"cobolfree\">\nEVALUATE TRUE ALSO desired-speed ALSO current-speed\n    WHEN lid-closed ALSO min-speed THRU max-speed ALSO LESS THAN desired-speed\n        PERFORM speed-up-machine\n    WHEN lid-closed ALSO min-speed THRU max-speed ALSO GREATER THAN desired-speed\n        PERFORM slow-down-machine\n    WHEN lid-open ALSO ANY ALSO NOT ZERO\n        PERFORM emergency-stop\n    WHEN OTHER\n        CONTINUE\nEND-EVALUATE\n</syntaxhighlight>\n\nThe {{code|PERFORM}} statement is used to define loops which are executed {{em|until}} a condition is true (not {{em|while}} true, which is more common in other languages). It is also used to call procedures or ranges of procedures (see the [[#Procedures|procedures section]] for more details). {{code|CALL}} and {{code|INVOKE}} call subprograms and methods, respectively. The name of the subprogram/method is contained in a string which may be a literal or a data item.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7\u00a7 14.9.4, 14.9.22}} Parameters can be passed [[call by reference|by reference]], by content (where a copy is passed by reference) or [[call by value|by value]] (but only if a [[function prototype|prototype]] is available).{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 D.6.5.2.2}}\n{{code|CANCEL}} unloads subprograms from memory. {{code|GO TO}} causes the program to jump to a specified procedure.\n\nThe {{code|GOBACK}} statement is a [[return statement]] and the {{code|STOP}} statement stops the program. The {{code|EXIT}} statement has six different formats: it can be used as a return statement, a [[break statement]], a [[continue statement]], an end marker or to leave a procedure.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a7 14.9.13.1}}\n\n[[Exception handling|Exceptions]] are raised by a {{code|RAISE}} statement and caught with a handler, or ''{{dfn|declarative}}'', defined in the {{code|DECLARATIVES}} portion of the procedure division. Declaratives are sections beginning with a {{code|USE}} statement which specify the errors to handle. Exceptions can be names or objects. {{code|RESUME}} is used in a declarative to jump to the statement after the one that raised the exception or to a procedure outside the {{code|DECLARATIVES}}. Unlike other languages, uncaught exceptions may not terminate the program and the program can proceed unaffected.\n\n=====I/O=====\nFile I/O is handled by the self-describing {{code|OPEN}}, {{code|CLOSE}}, {{code|READ}}, and {{code|WRITE}} statements along with a further three: {{code|REWRITE}}, which updates a record; {{code|START}}, which selects subsequent records to access by finding a record with a certain key; and {{code|UNLOCK}}, which releases a [[lock (database)|lock]] on the last record accessed.\n\nUser interaction is done using {{code|ACCEPT}} and {{code|DISPLAY}}.\n\n=====Data manipulation=====\nThe following verbs manipulate data:\n* {{code|INITIALIZE}}, which sets data items to their default values.\n* {{code|MOVE}}, which [[assignment (computer science)|assigns]] values to data items ; ''MOVE CORRESPONDING'' assigns corresponding like-named [[Record (computer science)#COBOL|fields]].\n* {{code|SET}}, which has 15 formats: it can modify indices, assign object references and alter table capacities, among other functions.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|loc=\u00a714.9.35.1}}\n* {{code|ADD}}, {{code|SUBTRACT}}, {{code|MULTIPLY}}, {{code|DIVIDE}}, and {{code|COMPUTE}}, which handle arithmetic (with {{code|COMPUTE}} assigning the result of a formula to a variable).\n* {{code|ALLOCATE}} and {{code|FREE}}, which handle [[dynamic memory]].\n* {{code|VALIDATE}}, which validates and distributes data as specified in an item's description in the data division.\n* {{code|STRING}} and {{code|UNSTRING}}, which [[Concatenation|concatenate]] and split [[string (computer science)|string]]s, respectively.\n* {{code|INSPECT}}, which tallies or replaces instances of specified [[substring]]s within a string.\n* {{code|SEARCH}}, which searches a table for the first entry satisfying a condition.\n\nFiles and tables are sorted using {{code|SORT}} and the {{code|MERGE}} verb merges and sorts files. The {{code|RELEASE}} verb provides records to sort and {{code|RETURN}} retrieves sorted records in order.\n\n====Scope termination====\nSome statements, such as {{code|IF}} and {{code|READ}}, may themselves contain statements. Such statements may be terminated in two ways: by a period (''{{dfn|implicit termination}}''), which terminates ''all'' unterminated statements contained, or by a scope terminator, which terminates the nearest matching open statement.\n\n<syntaxhighlight lang=\"cobolfree\">\n*> Terminator period (\"implicit termination\")\nIF invalid-record\n    IF no-more-records\n        NEXT SENTENCE\n    ELSE\n        READ record-file\n            AT END SET no-more-records TO TRUE.\n\n*> Scope terminators (\"explicit termination\")\nIF invalid-record\n    IF no-more-records\n        CONTINUE\n    ELSE\n        READ record-file\n            AT END SET no-more-records TO TRUE\n        END-READ\n    END-IF\nEND-IF\n</syntaxhighlight>\n\nNested statements terminated with a period are a common source of bugs.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2014|p=899}}{{sfn|McCracken|Golden|1988|loc=\u00a7 8.4}} For example, examine the following code:\n\n<syntaxhighlight lang=\"cobolfree\">\nIF x\n    DISPLAY y.\n    DISPLAY z.\n</syntaxhighlight>\n\nHere, the intent is to display <code>y</code> and <code>z</code> if condition <code>x</code> is true. However, <code>z</code> will be displayed whatever the value of <code>x</code> because the <code>IF</code> statement is terminated by an erroneous period after {{code|DISPLAY y|lang=cobolfree}}.\n\nAnother bug is a result of the [[dangling else problem]], when two <code>IF</code> statements can associate with an <code>ELSE</code>.\n\n<syntaxhighlight lang=\"cobolfree\">\nIF x\n    IF y\n        DISPLAY a\nELSE\n    DISPLAY b.\n</syntaxhighlight>\n\nIn the above fragment, the <code>ELSE</code> associates with the &nbsp;{{code|IF y|lang=cobolfree}}&nbsp; statement instead of the &nbsp;{{code|IF x|lang=cobolfree}}&nbsp; statement, causing a bug. Prior to the introduction of explicit scope terminators, preventing it would require &nbsp;{{code|ELSE NEXT SENTENCE|lang=cobolfree}}&nbsp; to be placed after the inner <code>IF</code>.{{sfn|McCracken|Golden|1988|loc=\u00a7 8.4}}\n\n====Self-modifying code====\nThe original (1959) COBOL specification supported the infamous &nbsp;{{code|ALTER X TO PROCEED TO Y|lang=cobolfree}}&nbsp; statement, for which many compilers generated [[self-modifying code]]. <code>X</code> and <code>Y</code> are procedure labels, and the single &nbsp;{{code|GO TO|lang=cobolfree}}&nbsp; statement in procedure <code>X</code> executed after such an {{code|ALTER}} statement means &nbsp;{{code|GO TO Y|lang=cobolfree}}&nbsp; instead. Many compilers still support it,<ref>Examples of compiler support for {{code|ALTER}} can be seen in the following:\n\n* {{cite web\n |last=Tiffin \n |first=Brian \n |title=September 2014 \n |url=http://sourceforge.net/p/open-cobol/discussion/cobol/thread/7dc2941f/#5ee9 \n |work=GNU Cobol \n |date=18 September 2013 \n |accessdate=5 January 2014 \n}}\n* {{cite web\n |url=http://documentation.microfocus.com/help/topic/com.microfocus.eclipse.infocenter.visualcobol.vs2013/HRLHLHPDF803.html \n |title=The ALTER Statement \n |publisher=Micro Focus \n |work=Micro Focus Visual COBOL 2.2 for Visual Studio 2013 COBOL Language Reference \n |accessdate=5 January 2014 \n}}\n* {{cite web\n |url=http://www.csim.scu.edu.tw/~kuo/COBOL/COBOLCompiler/COBOL%E6%89%8B%E5%86%8A/cob_lrf.pdf \n |title=ALTER Statement (Nucleus) \n |publisher=Fujitsu \n |work=COBOL85 Reference Manual \n |date=November 1996 \n |accessdate=5 January 2014 \n |page=555 \n |archiveurl=https://web.archive.org/web/20140106031540/http://www.csim.scu.edu.tw/~kuo/COBOL/COBOLCompiler/COBOL%E6%89%8B%E5%86%8A/cob_lrf.pdf \n |archivedate=6 January 2014 \n |url-status=dead \n}}\n* {{cite web\n |url=http://pic.dhe.ibm.com/infocenter/pdthelp/v1r1/topic/com.ibm.entcobol.doc_5.1/PGandLR/ref/rlpsalte.html \n |title=ALTER Statement \n |publisher=IBM \n |work=Enterprise COBOL for z/OS Language Reference \n |date=June 2013 \n |accessdate=5 January 2014 \n}}</ref>\nbut it was deemed [[deprecation|obsolete]] in the COBOL 1985 standard and deleted in 2002.{{sfn|ISO/IEC JTC 1/SC 22/WG 4|2001|loc=\u00a7 F.1}}\n\nThe {{code|ALTER}} statement was poorly regarded because it undermined \"locality of context\" and made a program's overall logic difficult to comprehend.{{sfn|McCracken|1976|p=355}}  As textbook author [[Daniel D. McCracken]] wrote in 1976, when \"someone who has never seen the program before must become familiar with it as quickly as possible, sometimes under critical time pressure because the program has failed ... the sight of a GO TO statement in a paragraph by itself, signaling as it does the existence of an unknown number of ALTER statements at unknown locations throughout the program, strikes fear in the heart of the bravest programmer.\"{{sfn|McCracken|1976|p=355}}\n\n===Hello, world===\nA \"[[Hello, world]]\" program in COBOL:\n<syntaxhighlight lang=\"cobol\">\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. hello-world.\n       PROCEDURE DIVISION.\n           DISPLAY \"Hello, world!\"\n           .\n</syntaxhighlight>\n\nWhen the \u2013 now famous \u2013 [[\"Hello, World!\" program]] example in ''[[The C Programming Language (book)|The C Programming Language]]'' was first published in 1978 a similar mainframe COBOL program sample would have been submitted through [[Job Control Language|JCL]], very likely using a punch card reader, and 80 column punch cards. The listing below, ''with an empty DATA DIVISION'', was tested using GNU/Linux and the System/370 [[Hercules emulator]] running [[MVS]] 3.8J. The JCL, written in July 2015, is derived from the Hercules tutorials and samples hosted by Jay Moseley.<ref>{{cite web | url=http://www.jaymoseley.com/hercules/compilers/cobol.htm | title=COBOL Compiler from MVT | date=17 January 2015 | accessdate=19 July 2015 | first=Jay | last=Moseley}}</ref> In keeping with COBOL programming of that era, HELLO, WORLD is displayed in all capital letters.\n\n<syntaxhighlight lang=\"cobolfree\">\n//COBUCLG  JOB (001),'COBOL BASE TEST',                                 00010000\n//             CLASS=A,MSGCLASS=A,MSGLEVEL=(1,1)                        00020000\n//BASETEST EXEC COBUCLG                                                 00030000\n//COB.SYSIN DD *                                                        00040000\n 00000* VALIDATION OF BASE COBOL INSTALL                                00050000\n 01000 IDENTIFICATION DIVISION.                                         00060000\n 01100 PROGRAM-ID. 'HELLO'.                                             00070000\n 02000 ENVIRONMENT DIVISION.                                            00080000\n 02100 CONFIGURATION SECTION.                                           00090000\n 02110 SOURCE-COMPUTER.  GNULINUX.                                      00100000\n 02120 OBJECT-COMPUTER.  HERCULES.                                      00110000\n 02200 SPECIAL-NAMES.                                                   00120000\n 02210     CONSOLE IS CONSL.                                            00130000\n 03000 DATA DIVISION.                                                   00140000\n 04000 PROCEDURE DIVISION.                                              00150000\n 04100 00-MAIN.                                                         00160000\n 04110     DISPLAY 'HELLO, WORLD' UPON CONSL.                           00170000\n 04900     STOP RUN.                                                    00180000\n//LKED.SYSLIB DD DSNAME=SYS1.COBLIB,DISP=SHR                            00190000\n//            DD DSNAME=SYS1.LINKLIB,DISP=SHR                           00200000\n//GO.SYSPRINT DD SYSOUT=A                                               00210000\n//                                                                      00220000\n</syntaxhighlight>\n\nAfter submitting the JCL, the MVS console displayed:\n\n<syntaxhighlight lang=\"text\" highlight=\"10\">\n    19.52.48 JOB    3  $HASP100 COBUCLG  ON READER1     COBOL BASE TEST\n    19.52.48 JOB    3  IEF677I WARNING MESSAGE(S) FOR JOB COBUCLG  ISSUED\n    19.52.48 JOB    3  $HASP373 COBUCLG  STARTED - INIT 1 - CLASS A - SYS BSP1\n    19.52.48 JOB    3  IEC130I SYSPUNCH DD STATEMENT MISSING\n    19.52.48 JOB    3  IEC130I SYSLIB   DD STATEMENT MISSING\n    19.52.48 JOB    3  IEC130I SYSPUNCH DD STATEMENT MISSING\n    19.52.48 JOB    3  IEFACTRT - Stepname  Procstep  Program   Retcode\n    19.52.48 JOB    3  COBUCLG    BASETEST  COB       IKFCBL00  RC= 0000\n    19.52.48 JOB    3  COBUCLG    BASETEST  LKED      IEWL      RC= 0000\n    19.52.48 JOB    3  +HELLO, WORLD\n    19.52.48 JOB    3  COBUCLG    BASETEST  GO        PGM=*.DD  RC= 0000\n    19.52.48 JOB    3  $HASP395 COBUCLG  ENDED\n</syntaxhighlight>\n\n''Line 10 of the console listing above is highlighted for effect, the highlighting is not part of the actual console output''.\n\nThe associated compiler listing generated over four pages of technical detail and job run information, for the single line of output from the 14 lines of COBOL.\n\n==Criticism and defense==\n\n===Lack of structure===\nIn the 1970s, adoption of the [[structured programming]] paradigm was becoming increasingly widespread. [[Edsger Dijkstra]], a preeminent computer scientist, wrote a [[letter to the editor]] of [[Communications of the ACM]], published 1975 entitled \"How do we tell truths that might hurt?\", in which he was critical of COBOL and several other contemporary languages; remarking that \"the use of COBOL cripples the mind\".<ref name=\"Dijkstra1\">{{cite web|url=http://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD498.html|title=How do we tell truths that might hurt?|accessdate=29 August 2007|publisher=University of Texas at Austin|date=18 June 1975|author=Dijkstra, Edsger W.|id=EWD498|archive-url=https://web.archive.org/web/20170502143353/http://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD498.html|archive-date=2 May 2017|url-status=dead}}</ref>\nIn a published dissent to Dijkstra's remarks, the computer scientist Howard E. Tompkins claimed that [[unstructured programming|unstructured]] COBOL tended to be \"written by programmers that have never had the benefit of structured COBOL taught well\", arguing that the issue was primarily one of training.<ref>{{Cite journal | doi = 10.1145/948176.948186| title = In defense of teaching structured COBOL as computer science| journal = ACM SIGPLAN Notices| volume = 18| issue = 4| pages = 86\u201394| year = 1983| last1 = Tompkins | first1 = H. E. }}</ref>\n\nOne cause of [[spaghetti code]] was the {{code|GO TO}} statement. Attempts to remove {{code|GO TO}}s from COBOL code, however, resulted in convoluted programs and reduced code quality.{{sfn|Riehle|1992|p=125}} {{code|GO TO}}s were largely replaced by the {{code|PERFORM}} statement and procedures, which promoted [[modular programming]]{{sfn|Riehle|1992|p=125}} and gave easy access to powerful looping facilities. However, {{code|PERFORM}} could only be used with procedures so loop bodies were not located where they were used, making programs harder to understand.{{sfn|Shneiderman|1985|pp=349\u2013350}}\n\nCOBOL programs were infamous for being monolithic and lacking modularization.<ref>{{cite book | url=https://books.google.com/books?id=MJmJAwAAQBAJ&pg=PA4 | title=Beginning COBOL for Programmers | publisher=Apress | accessdate=13 August 2014 | page=4 | first=Michael | last=Coughlan | isbn=978-1430262534 | date=16 March 2014}}</ref>\nCOBOL code could only be modularized through procedures, which were found to be inadequate for large systems. It was impossible to restrict access to data, meaning a procedure could access and modify {{em|any}} data item. Furthermore, there was no way to pass [[parameter (computer programming)|parameter]]s to a procedure, an omission Jean Sammet regarded as the committee's biggest mistake.{{sfn|Sammet|1978b|p=258}}\nAnother complication stemmed from the ability to {{code|PERFORM THRU}} a specified sequence of procedures. This meant that control could jump to and return from any procedure, creating convoluted control flow and permitting a programmer to break the [[single-entry single-exit]] rule.{{sfn|Riehle|1992|p=126}}\n\nThis situation improved as COBOL adopted more features. COBOL-74 added subprograms, giving programmers the ability to control the data each part of the program could access. COBOL-85 then added nested subprograms, allowing programmers to hide subprograms.{{sfn|Riehle|1992|p=127}} Further control over data and code came in 2002 when object-oriented programming, user-defined functions and user-defined data types were included.\n\nNevertheless, much important legacy COBOL software uses unstructured code, which has become unmaintainable. It can be too risky and costly to modify even a simple section of code, since it may be used from unknown places in unknown ways.<ref>{{Cite web|url=http://www.nakedcapitalism.com/2016/07/cobol-and-legacy-code-as-a-systemic-risk.html?imm_mid=0e6043&cmp=em-prog-na-na-newsltr_20160723|title=COBOL and Legacy Code as a Systemic Risk {{!}} naked capitalism|date=19 July 2016|language=en-US|access-date=23 July 2016}}</ref>\n\n===Compatibility issues===\nCOBOL was intended to be a highly portable, \"common\" language. However, by 2001, around 300 dialects had been created.<ref>{{cite journal | url=http://www.cs.vu.nl/grammarware/500/500.pdf | title=Cracking the 500-language problem | journal=IEEE Software |date=November\u2013December 2001 | volume=18 | issue=6 | page=79 | doi=10.1109/52.965809 | first1=Ralf | last1=L\u00e4mmel | first2=Chris | last2=Verhoef | author-link2 = Chris Verhoef| archiveurl=https://web.archive.org/web/20140819085841/http://www.cs.vu.nl/grammarware/500/500.pdf | archivedate=19 August 2014 | url-status=dead}}</ref> One source of dialects was the standard itself: the 1974 standard was composed of one mandatory nucleus and eleven functional modules, each containing two or three levels of support. This permitted 104,976 official variants.<ref>{{cite journal | url=http://comjnl.oxfordjournals.org/content/22/4/290.full.pdf+html | title=Towards more portable COBOL | journal=The Computer Journal | date=April 1979 | volume=22 | issue=4 | pages=290 | doi=10.1093/comjnl/22.4.290 | first1=T. J. | last1=Howkins | first2=M. T. | last2=Harandi }}</ref>\n\nCOBOL-85 was not fully compatible with earlier versions, and its development was controversial. Joseph T. Brophy, the [[Chief Information Officer|CIO]] of [[St. Paul Travelers|Travelers Insurance]], spearheaded an effort to inform COBOL users of the heavy reprogramming costs of implementing the new standard.{{sfn|Garfunkel|1987|p=11}} As a result, the ANSI COBOL Committee received more than 2,200 letters from the public, mostly negative, requiring the committee to make changes. On the other hand, conversion to COBOL-85 was thought to increase productivity in future years, thus justifying the conversion costs.{{sfn|Garfunkel|1987|p=15}}\n\n===Verbose syntax===\n{{quotebox\n | title=COBOL: /koh\u2032bol/, n.\n | tstyle=text-align: left;\n | quote=A weak, verbose, and flabby language used by code grinders to do boring mindless things on dinosaur mainframes. [...]  Its very name is seldom uttered without ritual expressions of disgust or horror.\n | source=[[The Jargon File]] 4.4.8.<ref>{{cite web | url=http://catb.org/jargon/html/C/COBOL.html | title=COBOL | work=The Jargon File, version 4.4.8 | date=1 October 2004 | accessdate=13 December 2014 | first=Eric S. | last=Raymond | authorlink=Eric S. Raymond | url-status=live | archiveurl=https://web.archive.org/web/20140830184553/http://www.catb.org/jargon/html/C/COBOL.html | archivedate=30 August 2014}}</ref>\n | align=right\n | width=30%\n | quoted=1\n}}\n\nCOBOL syntax has often been criticized for its verbosity. Proponents say that this was intended to make the code [[self-documenting]], easing program maintenance.{{sfn|Brown|1976|p=53}} COBOL was also intended to be easy for programmers to learn and use,{{sfn|CODASYL|1969|loc=\u00a7 II.1.1}} while still being readable to non-technical staff such as managers.{{sfn|Shneiderman|1985|p=350}}{{sfn|Sammet|1961|p=381}}{{sfn|Conner|1984|p=ID/10}}{{sfn|Marcotty|1978|p=263}}\nThe desire for readability led to the use of English-like syntax and structural elements, such as nouns, verbs, clauses, sentences, sections, and divisions. Yet by 1984, maintainers of COBOL programs were struggling to deal with \"incomprehensible\" code{{sfn|Conner|1984|p=ID/10}} and the main changes in COBOL-85 were there to help ease maintenance.<ref name=\"Computerworld Garfunkel\" />\n\nJean Sammet, a short-range committee member, noted that \"little attempt was made to cater to the professional programmer, in fact people whose main interest is programming tend to be very unhappy with COBOL\" which she attributed to COBOL's verbose syntax.{{sfn|Conner|1984|p=ID/14}}\n\n===Isolation from the computer science community===\nThe COBOL community has always been isolated from the computer science community. No academic computer scientists participated in the design of COBOL: all of those on the committee came from commerce or government. Computer scientists at the time were more interested in fields like numerical analysis, physics and system programming than the commercial file-processing problems which COBOL development tackled.{{sfn|Sammet|1961|p=380}} Jean Sammet attributed COBOL's unpopularity to an initial \"snob reaction\" due to its inelegance, the lack of influential computer scientists participating in the design process and a disdain for business data processing.{{sfn|Marcotty|1978|p=266}} The COBOL specification used a unique \"notation\", or [[metalanguage]], to define its syntax rather than the new [[Backus\u2013Naur form]] which the committee did not know of. This resulted in \"severe\" criticism.{{sfn|Sammet|1978b|p=255}}{{sfn|Shneiderman|1985|pp=348\u2013349}}{{sfn|Bemer|1971|p=133}}\n\nLater, COBOL suffered from a shortage of material covering it; it took until 1963 for introductory books to appear (with Richard D. Irwin publishing a college textbook on COBOL in 1966).<ref>{{Cite web |url=https://books.bibliopolis.com/main/find/2200821/COBOL-Logic-and-Programming-third-edition-1974-McCameron-Fritz-oldcomputerbooks-com.html |title=Archived copy |access-date=25 February 2016 |archive-url=https://web.archive.org/web/20160305083547/https://books.bibliopolis.com/main/find/2200821/COBOL-Logic-and-Programming-third-edition-1974-McCameron-Fritz-oldcomputerbooks-com.html |archive-date=5 March 2016 |url-status=dead }}</ref> By 1985, there were twice as many books on Fortran and four times as many on BASIC as on COBOL in the [[Library of Congress]].{{sfn|Shneiderman|1985|p=349}} University professors taught more modern, state-of-the-art languages and techniques instead of COBOL which was said to have a \"trade school\" nature.{{sfn|Shneiderman|1985|p=351}} Donald Nelson, chair of the CODASYL COBOL committee, said in 1984 that \"academics ... hate COBOL\" and that computer science graduates \"had 'hate COBOL' drilled into them\".<ref>{{cite web | url=https://books.google.com/books?id=VQhbdDusHcsC&pg=RA1-PA61 | title=An interview: Cobol defender | work=Computerworld | date=10 September 1984 | accessdate=8 June 2014 | author=<!-- Staff writer(s); No by-line --> | pages=ID/29\u2013ID/32 | issn=0010-4841 | volume=18 | issue=37}}</ref> A 2013 poll by [[Micro Focus]] found that 20% of university academics thought COBOL was outdated or dead and that 55% believed their students thought COBOL was outdated or dead. The same poll also found that only 25% of academics had COBOL programming on their curriculum even though 60% thought they should teach it.<ref>{{cite press release | url=http://www.microfocus.com/about/press/pressreleases/2013/pr070320131001.aspx | title=Academia needs more support to tackle the IT skills gap | publisher=Micro Focus | date=7 March 2013 | accessdate=4 August 2014}}</ref>\nIn contrast, in 2003, COBOL featured in 80% of [[information systems]] curricula in the United States, the same proportion as [[C++]] and [[Java (Programming language)|Java]].{{sfn|Carr|Kizior|2003|p=13}}\n\nThere was also significant condescension towards COBOL in the business community from users of other languages, for example [[FORTRAN]] or [[assembler language|assembler]], implying that COBOL could be used only for non-challenging problems.{{citation needed | date=March 2017}}\n\n===Concerns about the design process===\nDoubts have been raised about the competence of the standards committee. Short-term committee member Howard Bromberg said that there was \"little control\" over the development process and that it was \"plagued by discontinuity of personnel and ... a lack of talent.\"{{sfn|Beyer|2009|p=301}} Jean Sammet and Jerome Garfunkel also noted that changes introduced in one revision of the standard would be reverted in the next, due as much to changes in who was in the standard committee as to objective evidence.<ref>{{cite journal | title=Summary of Changes in COBOL, 1960\u20131985 | journal=Annals of the History of Computing | date=October 1985 | volume=7 | issue=4 | pages=342 | first1=Jean | last1=Sammet | first2=Jerome | last2=Garfunkel | doi=10.1109/MAHC.1985.10033 }}</ref>\n\nCOBOL standards have repeatedly suffered from delays: COBOL-85 arrived five years later than hoped,<ref>{{cite conference | url=http://www.computer.org/csdl/proceedings/afips/1978/5086/00/50861107.pdf | title=Data Base Facility for COBOL 80 | first=Margaret M. | last=Cook | conference=1978 National Computer Conference | quote=The earliest date that a new COBOL standard could be developed and approved is the year 1980 [...]. | pages=1107\u20131112 | publisher=AFIPS Press | date=June 1978 | location=Anaheim, California | lccn= 55-44701 | doi=10.1109/AFIPS.1978.63 | accessdate=2 September 2014 | editor1-last=Ghosh | editor1-first=Sakti P. | editor2-last=Liu | editor2-first=Leonard Y.}}</ref>\nCOBOL 2002 was five years late,<ref name=\"SW95\"/>\nand COBOL 2014 was six years late.<ref name=\"cobolstandards.com\"/><ref>{{cite web | url=http://www.cobolstandard.info/wg4/open/wg4n0188.doc | title=Resolutions from WG4 meeting 24 \u2013 June 26\u201328, 2003 Las Vegas, Nevada, USA | date=11 July 2003 | accessdate=29 June 2014 | format=doc | quote=a June 2008 revision of the COBOL standard | page=1 | url-status=dead | archiveurl=https://web.archive.org/web/20160308015945/http://www.cobolstandard.info/wg4/open/wg4n0188.doc | archivedate=8 March 2016}}</ref>\nTo combat delays, the standard committee allowed the creation of optional addenda which would add features more quickly than by waiting for the next standard revision. However, some committee members raised concerns about incompatibilities between implementations and frequent modifications of the standard.<ref>{{cite journal | url=https://books.google.com/books?id=tQOdtdJmVSsC&pg=PA12 | title=Cobol standard add-ons flayed | journal=Computerworld | volume=20 | issue=28 | pages=1, 12 | first=Charles | last=Babcock | date=14 July 1986}}</ref>\n\n===Influences on other languages===\nCOBOL's data structures influenced subsequent programming languages. Its record and file structure influenced [[PL/I]] and [[Pascal (programming language)|Pascal]], and the <code>REDEFINES</code> clause was a predecessor to Pascal's variant records. Explicit file structure definitions preceded the development of [[database management systems]] and aggregated data was a significant advance over Fortran's arrays.{{sfn|Shneiderman|1985|p=349}}\n<code>PICTURE</code> data declarations were incorporated into PL/I, with minor changes.\n\nCOBOL's {{code|COPY}} facility, although considered \"primitive\",<ref>{{cite conference | first=Michael | last=Marcotty | title=Full text of all questions submitted | editor1-last=Wexelblat | editor1-first=Richard L. | conference=History of Programming Languages | year=1978 | publisher=Academic Press | publication-date=1981 | isbn=0127450408 | doi=10.1145/800025.1198371 | page=[https://archive.org/details/historyofprogram0000hist/page/274 274] | url=https://archive.org/details/historyofprogram0000hist/page/274 }}</ref>\ninfluenced the development of [[include directive]]s.{{sfn|Shneiderman|1985|p=349}}\n\nThe focus on portability and standardization meant programs written in COBOL could be portable and facilitated the spread of the language to a wide variety of hardware platforms and operating systems.<ref>This can be seen in:\n\n* {{cite web | url=http://www-304.ibm.com/partnerworld/gsd/solutiondetails.do?solution=48040&expand=true&lc=en | title=Visual COBOL | publisher=[[IBM]] | work=IBM PartnerWorld | date=21 August 2013 | accessdate=5 February 2014 | quote=Micro Focus Visual COBOL delivers the next generation of COBOL development and deployment for Linux x86-64, Linux for System z, AIX, HP/UX, Solaris, and Windows. | archiveurl=https://web.archive.org/web/20140712183624/http://www-304.ibm.com/partnerworld/gsd/solutiondetails.do?solution=48040 | archivedate=12 July 2014 | url-status=live}}\n* {{cite web | url=https://www-03.ibm.com/software/products/en/cobocompfami | title=COBOL Compilers family | publisher=[[IBM]] | work=ibm.com | accessdate=5 February 2014 | archiveurl=https://web.archive.org/web/20140223004754/https://www-03.ibm.com/software/products/en/cobocompfami | archivedate=23 February 2014 | url-status=live}}\n* {{cite web | url=http://opencobol.add1tocobol.com/gnucobol/#what-platforms-are-supported-by-gnucobol | title=What platforms are supported by GNU Cobol? | date=4 January 2014 | accessdate=5 February 2014 | author=Tiffin, Brian | archiveurl=https://web.archive.org/web/20131214110557/http://opencobol.add1tocobol.com/gnucobol/#what-platforms-are-supported-by-gnu-cobol | archivedate=14 December 2013 | url-status=dead}}</ref> Additionally, the well-defined division structure restricts the definition of external references to the Environment Division, which simplifies platform changes in particular.<ref name=\"cobol-intro\">{{cite web | url=http://www.csis.ul.ie/cobol/course/COBOLIntro.htm#part1 | title=Introduction to COBOL | year=2002 | accessdate=3 February 2014 | author=Coughlan, Michael}}</ref>\n\n==See also==\n{{Portal|Computer programming}}\n* [[Alphabetical list of programming languages]]\n* [[BLIS/COBOL]]\n* [[COBOL ReSource]]\n* [[CODASYL]]\n* [[Comparison of programming languages]]\n* {{slink|Generational list of programming languages|COBOL based}}\n* {{slink|List of compilers|COBOL compilers}}\n\n== On the News ==\nDue to the [[COVID-19|corona-virus]] crisis, the New Jersey governor issued a plea for COBOL programmer to help maintain legacy systems used by the state<ref>{{Cite web|url=https://qz.com/1832988/covid-19-results-in-new-jersey-desperately-needing-cobol-coders/|title=Why Covid-19 has resulted in New Jersey desperately needing COBOL programmers|last=Mollman|first=Steve|website=Quartz|language=en|access-date=2020-04-06}}</ref>.\n\n==Notes==\n{{notelist}}\n\n== References ==\n\n=== Citations ===\n{{Reflist|30em}}\n\n=== Sources ===\n{{refbegin|2}}\n* {{cite journal\n | ref=harv\n | url=http://archive.computerhistory.org/resources/text/Knuth_Don_X4100/PDF_index/k-8-pdf/k-8-u2776-Honeywell-mag-History-Cobol.pdf\n | title=A View of the History of COBOL\n | journal=Honeywell Computer Journal\n | accessdate=28 June 2014\n | volume=5\n | issue=3\n | date=1971\n | first=Bob\n | last=Bemer\n | authorlink=Bob Bemer\n | archive-url=https://web.archive.org/web/20160122164500/http://archive.computerhistory.org/resources/text/Knuth_Don_X4100/PDF_index/k-8-pdf/k-8-u2776-Honeywell-mag-History-Cobol.pdf\n | archive-date=22 January 2016\n | url-status=dead\n }}\n* {{cite book\n | ref=harv\n | url=https://books.google.com/books?id=u5KKwGjulEwC&pg=PA282\n | title=Grace Hopper and the Invention of the Information Age\n | publisher=MIT Press\n | year=2009\n | isbn=978-0262013109\n | first=Kurt\n | last=Beyer\n | lccn=2008044229\n}}\n* {{cite book\n | ref=harv\n | url=https://books.google.com/books?id=G6a2tSuOoq8C&pg=PA47\n | title=Encyclopedia of Computer Science and Technology: Volume 5\n | publisher=[[CRC Press]]\n | isbn=978-0824722555\n | date=1 December 1976\n | section=COBOL\n | first=William R.\n | last=Brown\n | editor1-first=Jack\n | editor1-last=Belzer\n | editor2-first=Albert G.\n | editor2-last=Holzman\n | editor3-first=Allen\n | editor3-last=Kent\n}}\n\n* {{cite journal\n | ref=harv\n | url=http://www.isedj.org/1/52/ISEDJ.1(52).Carr.pdf\n | title=Continued Relevance of COBOL in Business and Academia: Current Situation and Comparison to the Year 2000 Study\n | date=31 December 2003\n | accessdate=4 August 2014\n | last1=Carr\n | first1=Donald E.\n | last2=Kizior\n | first2=Ronald J.\n | journal=Information Systems Education Journal\n | volume=1\n | issue=52\n | issn=1545-679X\n }}\n* {{cite journal\n | ref=harv\n | url=https://archive.org/details/codasylcoboljour00conf\n | title=CODASYL COBOL Journal of Development 1968 |date=July 1969 \n | lccn=73601243\n | author=CODASYL\n | authorlink=CODASYL\n | publisher=[[National Bureau of Standards]]\n | issn=0591-0218\n}}\n* {{cite journal\n | ref=harv\n | url=https://books.google.com/books?id=BrEo9KtAQH4C&pg=RA1-PA61\n | title=Cobol, your age is showing\n | journal=Computerworld\n | volume=18\n | issue=20\n | pages=ID/7\u2013ID/18\n | first=Richard L.\n | last=Conner\n | date=14 May 1984\n | issn=0010-4841\n }}\n* {{cite web\n | ref=harv\n | url=http://opencobol.add1tocobol.com/guides/GNU%20COBOL%202.1%2023NOV2013%20Programmers%20Guide%20(US%20Letter).pdf\n | title=GNU COBOL Programmer's Guide\n | date=9 April 2014\n | accessdate=25 February 2014\n | last=Cutler\n | first=Gary\n | edition=3rd\n}}\n* {{cite book\n | ref=harv\n | title=The COBOL 85 Example Book\n | first=Jerome\n | last=Garfunkel\n | publisher=[[John Wiley & Sons|Wiley]]\n | year=1987\n | isbn=978-0471804611\n}}\n* {{cite web\n | ref=harv\n | url=http://www.ncits.org/tc_home/j4htm/cobolv200112.zip\n | title=ISO/IEC IS 1989:2001 \u2013 Programming language COBOL\n | author=ISO/IEC JTC 1/SC 22/WG 4\n | authorlink=ISO/IEC JTC 1/SC 22\n | publisher=[[ISO]]\n | date=4 December 2001\n | accessdate=2 September 2014\n | archiveurl=https://web.archive.org/web/20020124065139/http://www.ncits.org/tc_home/j4htm/cobolv200112.zip\n | archivedate=24 January 2002\n | url-status=dead\n | format=ZIP of PDF\n}}\n* {{cite book\n | ref=harv\n | title=INCITS/ISO/IEC 1989:2014 [2014] \u2013 Programming language COBOL\n | author=ISO/IEC JTC 1/SC 22/WG 4\n | publisher=[[INCITS]]\n | date=31 October 2014\n}}\n* {{cite web\n | ref=harv\n | url=http://home.comcast.net/~wmklein/DOX/History.pdf\n | title=The History of COBOL\n | date=4 October 2010\n | accessdate=7 January 2014\n | last=Klein\n | first=William M.\n | archiveurl=https://web.archive.org/web/20140107192608/http://home.comcast.net/~wmklein/DOX/History.pdf\n | archivedate=7 January 2014\n | url-status=dead\n }}\n* {{cite conference\n | ref=harv\n | first=Michael\n | last=Marcotty\n | p=[https://archive.org/details/historyofprogram0000hist/page/263 263]\n | title=Transcript of question and answer session\n | editor1-last=Wexelblat\n | editor1-first=Richard L.\n | conference=History of Programming Languages\n | year=1978\n | publisher=Academic Press\n | publication-date=1981\n | isbn=0127450408\n | doi=10.1145/800025.1198370\n | url=https://archive.org/details/historyofprogram0000hist/page/263\n }}\n* {{cite book\n | ref=harv\n | title=A Simplified Guide to Structured COBOL Programming\n | publisher=Wiley\n | year=1976\n | isbn=0-471-58284-0\n | first=Daniel D.\n | last=McCracken\n | lccn=\n | authorlink=Daniel D. McCracken\n | url-access=registration\n | url=https://archive.org/details/simplifiedguidet0000mccr\n }}\n* {{cite book\n | ref=harv\n | title=A Simplified Guide to Structured COBOL Programming\n | publisher=Wiley\n | year=1988\n | isbn=978-0471610540\n | first1=Daniel D.\n | last1=McCracken\n | first2=Donald G.\n | last2=Golden\n | edition=2nd\n | lccn=87034608\n}}\n* {{cite journal\n | ref=harv\n | title=PERFORM considered harmful\n | journal=Communications of the ACM\n |date=August 1992\n |doi=10.1145/135226.376106 \n | volume=35\n | issue=8\n | pages=125\u2013128\n | first=Richard L.\n | last=Riehle\n \n}}\n* {{Cite conference\n | ref=harv\n | title=A method of combining ALGOL and COBOL\n | first=Jean E.\n | last=Sammet\n | authorlink=Jean E. Sammet\n | date=May 1961\n | conference=Papers presented at the 9\u201311 May 1961, western joint IRE\u2013AIEE\u2013ACM computer conference\n | doi=10.1145/1460690.1460734\n | pages=379\u2013387\n | publisher=[[Association for Computing Machinery|ACM]]\n \n}}\n* {{cite conference\n | ref=harv\n | first=Jean E.\n | last=Sammet\n | title=The early history of COBOL\n | editor1-last=Wexelblat\n | editor1-first=Richard L.\n | conference=History of Programming Languages\n | year=1978a\n | publisher=Academic Press\n | publication-date=1981\n | isbn=0127450408\n | doi=10.1145/800025.1198367\n | url-access=registration\n | url=https://archive.org/details/historyofprogram0000hist\n }}\n* {{cite conference\n | ref=harv\n | first=Jean E.\n | last=Sammet\n | title=Transcript of presentation\n | editor1-last=Wexelblat\n | editor1-first=Richard L.\n | conference=History of Programming Languages\n | year=1978b\n | publisher=Academic Press\n | publication-date=1981\n | isbn=0127450408\n | doi=10.1145/800025.1198368\n | url-access=registration\n | url=https://archive.org/details/historyofprogram0000hist\n }}\n* {{cite book\n | ref=harv\n | url=https://books.google.com/books?id=5Jaa1BVverIC&pg=PA104\n | title=Concise Encyclopedia of Computer Science\n | publisher=Wiley\n | first=Jean E.\n | last=Sammet\n | oclc=249810423\n | isbn=978-0470090954\n | editor-first=Edwin D.\n | editor-last=Reilly\n | date=23 July 2004\n | section=COBOL\n}}\n* {{cite journal\n | ref=harv\n | title=The Relationship Between COBOL and Computer Science\n | journal=[[Annals of the History of Computing]] |date=October 1985 \n | volume=7\n | issue=4\n | pages=348\u2013352\n | first=B.\n | last=Shneiderman\n | doi=10.1109/MAHC.1985.10041\n}}\n{{refend}}\n\n==External links==\n{{sisterlinks|d=Q131140|n=no|voy=no|s=no|q=no|m=no|mw=no|species=no|commons=Category:COBOL}}\n* {{Curlie|Computers/Programming/Languages/Cobol/}}\n\n{{Major programming languages}}\n{{ISO standards}}\n\n{{Authority control}}\n\n{{DEFAULTSORT:Cobol}}\n[[Category:COBOL| ]]\n[[Category:.NET programming languages]]\n[[Category:1959 software]]\n[[Category:Class-based programming languages]]\n[[Category:Computer-related introductions in 1959]]\n[[Category:Cross-platform software]]\n[[Category:Object-oriented programming languages]]\n[[Category:Procedural programming languages]]\n[[Category:Programming languages created by women]]\n[[Category:Programming languages created in 1959]]\n[[Category:Programming languages with an ISO standard]]\n[[Category:Statically typed programming languages]]\n[[Category:Structured programming languages]]\n", "name_user": "Ortolan88", "label": "safe", "comment": "\u2192\u200eOn the News:pluralize programmers", "url_page": "//en.wikipedia.org/wiki/COBOL"}
{"title_page": "L\u00fc Shengzhong", "text_new": "{{tone|date=March 2014}}\n{{Chinese name|[[L\u00fc (surname)|L\u00fc]]}}\n\n'''L\u00fc Shengzhong''' ({{zh|s=\u5415\u80dc\u4e2d}}; born 1952) is a [[Chinese people|Chinese]] artist who specializes in the ancient Chinese art of [[paper cutting]]. He grew up during the turbulent Cultural Revolution, did not follow the pack of Chinese contemporary artists who embraced the international vogue for installation art as his country began opening up to the West in the 1980s. \"I walked away from the cultural confusion of the time and turned back to traditional folk art,\" he says.<ref>{{cite web|title=the official website of Michael Berger Gallery - Lu  Shengzhong|url=http://www.michaelbergergallery.com/Artist-Info.cfm?ArtistsID=426&Object=|publisher=ManagedArtwork.com|accessdate=6 May 2012}}</ref> \nFrom the first look, his red tissue-paper tableaux, with their centermost, adjust, mandala-like frames, look like antiquated calligraphic goes with falling streams of hand-drawn elements skimming over the musings of sages. In reality, those vertical lines of red checks are made up of the negative-space from Lu's greater outlines.\n\n==Early life==\n{{BLP unsourced section|date=May 2009}}\nL\u00fc was born in the [[Dayuji village]] in [[Shandong]], [[China]], in 1952. Shandong has long been known for its paper cutting art culture.  Lu's father was a farmer where his mother was a house-wife, who was well known around the village for her paper cutting talents.  As a child, Lu fell in love with the way his mother would create art with cut scraps of paper.\n\nAs L\u00fc got older, his fascination for paper cutting began to fade.  As a young adult he joined the army for a short while.  After the army, he worked for a short period of time as a film projectionist.  In the mid 1970s he attended art school at [[Shandong Normal University]], and graduated in 1978 with a degree in Fine Arts.  After Graduattion he later attended [[Central Academy of Fine Arts]] (CAFA) in [[Beijing]] for his masters program in the early 1980s. During this time period, China's art scene began a change from socialist realist paintings.  His classmates began to discover [[rock & roll]] music, [[blue jeans]], [[jazz]], as well as the art genre of Dada.  Lu Shengzhong graduated from Central Academy of Fine Art in 1987, with a masters in [[folk art]].\n\nAfter earning his masters, Lu began to travel through China's hinterland.  One of his memorable trips was the northern Shaanxi province, a rough area that's known for its rough, arid terrain, as well as the poverty within the area.   Lu embraced the culture, by watching the local peasant women create memorable shapes and objects out of paper.  For example, they would cut out, frogs, mice pomegranates, lotus flowers, rabbits, etc.\n\n==Early career==\nIn 1988, L\u00fc had his very first exhibition at China's National Art Gallery.  He turned the art gallery into a \"temple filled with totem-like images\", by using cutouts of footprints that were suspended in mid air, as well as silhouette patterns accompanied by illegible calligraphy.  Lu's display at China's National Art Gallery caught the attention of local art critics, but Lu Shengzhong felt no sense of glory as he described his art as \u201ca lonely struggle along a desolate path.\u201d  Lu later wrote a more detailed description stating:\n\n<blockquote>\n''\u201cExerting the utmost strength I squeezed out of a marketplace filled with contentious crowd, and found a silent, forgotten little path to walk on.  Intrigued by unfamiliarity and longing, I followed it to retrieve original characteristics of humankind that have been filtered out by civilization, to summon images of lost souls in the polluted air, to understand the spiritual pursuit of mankind in its infancy, and to search for the deep connection linking my native land with the rest of the world.  All my efforts are to nourish the ancient culture.  Thus suddenly I gain confidence, because in my mind I have paved a path for today\u2019s art.\u201d'' (Lu Shengzhong: Book of Humanity: Empty Book 2005)\n</blockquote>\n\nWithin Lu Shengzhong's early career as an emerging artist, he has entered many solo and group exhibitions between the late 1980s and mid 1990s including:\n\n* 1989: Life-Ephemeral and Eternal, Taipei, Taiwan\n* 1989: China Avant-Garde, NAGC, Beijing\n* 1990: Calling the Soul Hall, Central Academy of Fine Arts Gallery, Beijing\n* 1990\u20131992: Calling the Soul Around, Beijing, Hebei, Shanxi, Hunan, Guanxi, and Liaoning provinces\n* 1991: Calling the Soul, Museum of Contemporary Art, Beijing\n* 1992: Red Train, Emden, Berin, Wiesbaden, and Hamburg, Germany\n* 1992: Begenung Mit Den Anderen, Halle K18, Gesanthochschole, Kassel, Germany\n* 1992-1993: Post-Mao Product, New Art from China, traveling exhibition in Australia\n* 1994: Asian Art Show, Fukuoka Art Museum, Japan\n* 1994: Soul Stele, Adelaide, Australia\n* 1994: Soul Market, Beck Forum, Munich, Germany\n* 1994: Emergency Center, St. Petersburg, Russia\n* 1995:  ORT -+, Wuppertal, Germany\n* 1995: International Biennial Art Show, Gwangju, Korea\n* 1995: 4th Asian Art Show (Realism as an Attitude), Setagaya Art Museum, Japan\n* 1996: ARCOS DA LAPA, Rio de Janeiro, Brazil\n* 1996: Origin and Myths of Fire, The Museum of Modern Art, Saitama, Japan\n* 1996: Calling the Soul, Fukuoka Art Museum, Japan\n* 1998: Notes Across Asia, Berlin, Germany\n* 1998: Recalling Tradition, German Embassy, Beijing\n* 2000: First Encounter, [[Chambers Fine Art]], New York, USA\n* 2000: Record of Emotion, the Watchtower-Contemporary Art, Beijing\n* 2000: Gate of the Century (1979\u20131999) Chinese Art Invitational Exhibition, The Contemporary Art Museum, Chengdu\n* 2001: Lu Shengzhong: World!, Fukuoka Art Museum, Fukuoka, Japan\n* 2001: Beijing-Dachauer, Dachauer Schloss, Germany\n* 2001: Clues to the Future, Red Gate Gallery, Beijing, China\n* 2002 : A la nuit tomb\u00e9e: Lu Shengzhong, Grenoble, France\n* 2002 : De Waan Venray Asylum, the Netherlands\n* 2003 : Auspice From Above, Eslite Gallery, Taipei, Taiwan\n* 2003: Guangzhou Triennial, Guangzhou Museum of Fine Art, Guangzhou, China Blue Sky Exposure, Yizhuang, Beijing, China\n* 2003: Synthi-Scapes: Chinese Pavilion of the 50th Venice Biennale, (cancelled due to SARS), later shown in Guangzhou Museum of Fine Art, Guangzhou, China\n* 2003: Openness, China Art Museum, Beijing, China\n* 2003: Left Hand, Right Hand, 798 Art Space, Beijing, China\n* 2004: The Book of Humanity, [[Chambers Fine Art]], New York, USA\n* 2004: Cinesi artisti fra tradizione e presente, Marsilio Art Museum, Italy\n* 2004: Universal Figure\u2014A. R. Penck and Lu Shengzhong, White Space Gallery, Beijing, China\n* 2005: The New Emerging From the Old, University Art Museum, University at Albany, New York, USA\n* 2007: Square Earth, Round Heaven, [[Chambers Fine Art]], New York, USA\n\n==Chinese Folk Artist==\n<blockquote>\n''\"I use paper to cut this little red figure to demonstrate the delicate fragility of human beings. Ephemeral. A human\u2019s life is shorter than a paper\u2019s thickness. The material is not important. What is more important is the process you use to create that material. This is more valuable to me.\"''</blockquote>\n\nLu Shengzhong is a Chinese artist at the China Central Academy of Fine Art in Beijing, who specializes in the ancient Chinese paper cutting.\n\nHis most well-known craftsmanship is called \u201cLittle Red Figures\u201d, in reality, it is an old and famous procedure in China, named paper-cutting, which is utilized widely in the society specialty of china. The figure, which looks similar to a small kid, is an exceptionally regular element in Chinese time honored paper cutting, the nearby folks think this small squirt can evacuate the adversities so they continue cutting paper of small tyke, but it is unequivocally shown in the farmland far at a distance from the urban. This is a symbolization and universal society disregarded by virtuoso extended time, but Lu identify it and reproduces it, made it as a formal craftsmanship and considerable throughout giving the philosophical and customary nature.\n\n<blockquote>\n''\"For my project, there are two inspirations, the one is I think I really need to express something about culture in my design, try to find the culture meanings from Chinese folk art, actually, it is not hard, because Chinese folk art related with culture very close. The other thing is I should think about how to make my artwork more related with people\u2019s daily life, I should try to makes it looks like a thing in nowadays.\"<ref>{{cite news|title=Chinese Folk Artist-Lu Shengzhong|url=http://keqingli.wordpress.com/2010/06/25/chinese-folk-artist-%E2%80%93-lu-shengzhong/|date=25 June 2010|accessdate=21 April 2012}}</ref>''</blockquote>\n\n==Cutting to the Spirit==\nLu Shengzhong is a Chinese artist and he went to UAlbany on October, creating and installing a powerful new piece composed of red paper dolls. The cutting of Little Red Figures is ritual and performance in its pure sense, practiced for generations as a devotional act to bring fertility to the family and as a symbol of ancestral continuity.\n\nA celebration environment suffuses the twofold-stature studio. Red vibrations fill one's eyes and revive the faculties. A couple red cut-paper shades falling from the top side and cadenced swirls and rehashed plans in red, white and dark wrapping around the upper display dividers try to fill your fringe vision. Being a spot overpowered is an essential for a heavenly reaction, and this is feasibly an impact on Shengzhong. A combo of dread and interest frequently fabricated by reiteration and scale regularly are hung out with the eminent. They set up an environment of secret and open the brain to non rational methodologies. Since you've ever been in a Chinese temple you realize what I mean. The immeasurable space of the University Symbolization Exhibition hall works both for and in opposition to this impact. The scale allows an introduction of fabulous proportions, but the partitioning of units that might have reinforced one another make a less burnable air.\n\nThe sublime is not ordinarily hung out with hilariousness or modesty, but the apprehension that the swarming red vigor is made out of amusing small folks, some with ponytails, some with the oversize head of an infant child, fetus or frog, carries a grin to one's confront. Prolongation and fertility of both society and race is the subject, and it is treated with a gentility of spirit.\n\nThe ground surface-to-roof piece The Unfilled Book\u2014The Book of Mankind that Shengzhong finished at UAlbany contains several books at top side tallness, holding 900 pages that have been sliced to free and suspend portions of textless paper. Every coterminous line from every page joins similar to an umbilical line to small red individuals that splay out in the deck. This piece strongly sets aside doctrine and confirms the imperativeness of the individuals, and is the standout of the show.\n\nThe demonstration of cutting is moreover vital as an image of the Dao, the standard that grips positive and negative drives. Shengzhong's piece The Vertical of Negative and the Level of Negative, a 42-foot-extended cut-paper painting, encapsulates this guideline. Expansive, huge-headed children make islands around which masses of humbler figures swarm like schools of fish or sperm, raising momentums that convey the eye. Shapes in dark and red transform from figure to ground and to figure again in a euphoric showcase of formal stroke of genius.\n\nIn the four boards from the piece The Poetry of Congruity, Shengzhong likens allegorical recombination with the inference of dialect, a letter set of structure. He astutely makes mandalas from symmetrically put cut deciphers, and lays lines of shapes vertically or evenly beneath, made from snippets of broken set patterns. From a separation these pieces give off an impression of being conventional calligraphy parchments, but it is clear Shengzhong has an impulse regarding comicality that is a bit subversive.\n\nClose viewing is constantly remunerated. Subversive humor was a survival tactic that Shengzhong utilized in making suggestive subtexts covered up in the enchanting worker accounts of Adoration Tune, time honored compositions on silk. Alternate early plans showed on the ground stun of the display have a non specific, stylized hand that, however useful, will usually draw vigor at a distance from the surface explanation made by the in statement.<ref>{{cite web|last=Fintz|first=Jeanette|title=Cutting to the Spirit|url=http://metroland.net/back_issues/vol28_no47/art.html|publisher=University Art Museum, University at Albany|accessdate=27 April 2012}}</ref>\n\n==Three Elements==\nLu bases the theme of his paper cutting around the dynamic life cycle of paper cutting. The theme is an old technique that sustains vitality through infinite recreation and variation. With the art of recreation and variation as a basic technique, the art itself becomes a way becomes the art of constant renewal, not only in the art but life as well.  For instance the art was used in holidays, festivals, weddings, and funerals.  These events mark certain passages within a person's life. There are three basic elements in Lu Shengzhong's artwork that he finds essential in the art of paper cutting.\n\nThe first element is the dynamic relationship between positive and negative forms, in which is constantly created in the art of paper cutting.  Lu feels what's so significant to this is the fact one cannot us positive or negative forms alone, but for them to be used together, as in a single piece of paper that creates a conceptual whole.\n\nThe second element is referred to as the materiality of paper cutting.  First and foremost, the art of paper cutting always generates tension between two- dimensionality and three dimensionality, for the fact that a piece of paper is assumed to be two-dimensional for being such a flat surface.  Regardless of the way paper is cut, it still has a volume, as well as a front and back.  When Lu creates a piece, and attaches the paper cuts to aboard, he compares his work to a painting and a sculpture, he then begins to contest the relationship between the two art forms.  Lu also feels that a paper cut also represents fragility, for the fact that paper is vulnerable to natural and human disasters.  Fragility has been the theme and subject matter used in Lu Shengzhong's artworks.\n\nThe third element in Lu Shengzhong's work is the temporal, meditative nature of paper cutting.  This refers back to when he had the conversation with a local peasant woman while visiting the Shaanxi province.  Lu asked of her the thought process of the paper cuts she was creating, and she replied \u201cnothing, there is nothing in my mind.\u201d  To interpret the answer, Lu begins to approach his paper cutting with creative processes, emotion, and rational thinking, at the same time makes doesn't make him creative.  What makes Lu Shengzhong, and the peasant woman so significant, is the fact that when they create a piece, they are expressing as well as releasing themselves with abstract visual forms.\n\n==Publication==\n*1990: ''Works of Shenzhong'', Lu, Hunan Art Publication Press\n*1992: ''Folk Paper-cut'', Hunan Art Publication Press\n*1992: ''Huazhou Shadow Figures'', Hunan Art Publication Press\n*1994: ''Chinese Folk Wood Engraving'', Hunan Art Publication Press\n*1994: ''Selection of Line Drawing of Lu Shengzhong'', Guangxi Fine Arts Publication House Press\n*1995: ''Seeking the Soul'', Hunan Art Publication Press\n*1996: ''The Classic Appreciation of Folk Paper-cut'', China Films Press\n*1998: ''Lu Shengzhong: Calling the Soul'', Guangxi Fine Arts Publication House Press\n*2000: ''Drafting Characters'', China Youth Publication Press\n*2000: ''The First Meet'', New York Chambers Fine Art Press\n*2001: ''Walking and Observing'', SDX San Lian Bookstore Publishing\n*2001: ''Flourmade tiger of Langzhuang'' (collaborate with Li, Hongjun), Taiwan Echo Publishing Press\n*2002: ''Colored Clothes'', Guangxi Fine Arts Publication House Press\n*2002: ''Baby's Gallus'', Guangxi Fine Arts Publication House Press\n*2003: ''Original Manuscript of Molding'', SDX San Lian Bookstore Publishing\n*2003: ''Farewell Tradition I'', SDX San Lian Bookstore Publishing\n*2003: ''Farewell Tradition II'', SDX San Lian Bookstore Publishing\n*2003: ''The Arrival of Luck'', Taiwan Eslite Gallery Press\n*2003: ''The Story of Little Red Kid'', Shanghai Literature and Art Publishing Press\n*2004: ''Farewell Tradition III'', SDX San Lian Bookstore Publishing\n*2004: ''Farewell Tradition IV'', SDX San Lian Bookstore Publishing\n\n==Stamps Design==\n*1988: Countryside Culture (4 pieces of memorial), China Post\u3000\u3000\n*1988: Chinese Agricultural Sports Conference (2 pieces of memorial), China Post\n*1989: She Han Ling Zhi,  Safety with all Seasons (stamp with the animal of Chinese Birth year), China Post\n*1996: Xi Jian Guang Ming,  The Myriad of Lights (stamp with the animal of Chinese Birth year 2 pieces of memorial), China Post\n*2005: Rooster Crows (stamp with the animal of Chinese Birth year), China Post\n*2006: Guo Tai Min An (stamp with the animal of Chinese Birth year), China Post\n\n==Later career==\nLu published a book in 2005 entitled ''The Book of Humanities'', where he discusses as well as displays his past and present works.  The book also employs Lu's three elements behind paper cutting along with his philosophy towards his artwork in several volumes.  Some of the books collage pages were scraps from actual pieces that Lu Shengzhong created.  The collages in the book are of little red figures such as frog, paper people, and other various shapes.\n\nLu Shengzhong currently works as a professor at the very school where he earned his master's degree, Central Academy of Fine Art, in the department of Research Institute for Folk Art Studies in Beijing.  Lu teaches up to eight classes per semester, and is very enthusiastic and well involved with his students, in hopes that they will be the future for art\n\n==References==\n{{reflist}}\n* https://web.archive.org/web/20090502194042/http://www.chambersfineart.com/en/contemp/lshen-bio.html\n* http://findarticles.com/p/articles/mi_m1248/is_6_93/ai_n13804286/\n* https://web.archive.org/web/20110724083739/http://www2.thorn.net/~alexa/clips/lsz.html\n* Newell, L.B. (2007). ''Out of The Ordinary''.  South Kensington, London, England: V&A Publications\n* http://baike.baidu.com/view/899797.htm\n* https://archive.is/20130126004940/http://www.htsdart.com/html/artist/detail_2012_01/08/141_3.shtml\n* http://www.vam.ac.uk/vastatic/microsites/1637_outoftheordinary/artists_biography.php?artistTag=shengzhong\n\n{{DEFAULTSORT:Lu, Shengzhong}}\n[[Category:Artists from Shandong]]\n[[Category:Living people]]\n[[Category:1952 births]]\n[[Category:People from Dezhou]]\n[[Category:Chinese contemporary artists]]\n", "text_old": "{{tone|date=March 2014}}\n{{Chinese name|[[L\u00fc (surname)|L\u00fc]]}}\n\n'''L\u00fc Shengzhong''' ({{zh|s=\u5415\u80dc\u4e2d}}; born 1952) is a [[Chinese people|Chinese]] artist who specializes in the ancient Chinese art of [[paper cutting]]. He grew up during the turbulent Cultural Revolution, did not follow the pack of Chinese contemporary artists who embraced the international vogue for installation art as his country began opening up to the West in the 1980s. \"I walked away from the cultural confusion of the time and turned back to traditional folk art,\" he says.<ref>{{cite web|title=the official website of Michael Berger Gallery - Lu  Shengzhong|url=http://www.michaelbergergallery.com/Artist-Info.cfm?ArtistsID=426&Object=|publisher=ManagedArtwork.com|accessdate=6 May 2012}}</ref> \nFrom the first look, his red tissue-paper tableaux, with their centermost, adjust, mandala-like frames, look like antiquated calligraphic goes with falling streams of hand-drawn elements skimming over the musings of sages. In reality, those vertical lines of red checks are made up of the negative-space from Lu's greater outlines.\n\n==Early life==\n{{BLP unsourced section|date=May 2009}}\nL\u00fc was born in the [[Dayuji village]] in [[Shandong]], [[China]], in 1952. Shandong has long been known for its paper cutting art culture.  Lu's father was a farmer where his mother was a house-wife, who was well known around the village for her paper cutting talents.  As a child, Lu fell in love with the way his mother would create art with cut scraps of paper.\n\nAs L\u00fc got older, his fascination for paper cutting began to fade.  As a young adult he joined the army for a short while.  After the army, he worked for a short period of time as a film projectionist.  In the mid 1970s he attended art school at [[Shandong Normal University]], and graduated in 1978 with a degree in Fine Arts.  After Graduattion he later attended [[Central Academy of Fine Arts]] (CAFA) in [[Beijing]] for his masters program in the early 1980s. During this time period, China's art scene began a change from socialist realist paintings.  His classmates began to discover [[rock & roll]] music, [[blue jeans]], [[jazz]], as well as the art genre of Dada.  Lu Shengzhong graduated from Central Academy of Fine Art in 1987, with a masters in [[folk art]].\n\nAfter earning his masters, Lu began to travel through China's hinterland.  One of his memorable trips was the northern Shaanxi province, a rough area that's known for its rough, arid terrain, as well as the poverty within the area.   Lu embraced the culture, by watching the local peasant women create memorable shapes and objects out of paper.  For example, they would cut out, frogs, mice pomegranates, lotus flowers, rabbits, etc.\n\n==Early career==\nIn 1988, L\u00fc had his very first exhibition at China's National Art Gallery.  He turned the art gallery into a \"temple filled with totem-like images\", by using cutouts of footprints that were suspended in mid air, as well as silhouette patterns accompanied by illegible calligraphy.  Lu's display at China's National Art Gallery caught the attention of local art critics, but Lu Shengzhong felt no sense of glory as he described his art as \u201ca lonely struggle along a desolate path.\u201d  Lu later wrote a more detailed description stating:\n\n<blockquote>\n''\u201cExerting the utmost strength I squeezed out of a marketplace filled with contentious crowd, and found a silent, forgotten little path to walk on.  Intrigued by unfamiliarity and longing, I followed it to retrieve original characteristics of humankind that have been filtered out by civilization, to summon images of lost souls in the polluted air, to understand the spiritual pursuit of mankind in its infancy, and to search for the deep connection linking my native land with the rest of the world.  All my efforts are to nourish the ancient culture.  Thus suddenly I gain confidence, because in my mind I have paved a path for today\u2019s art.\u201d'' (Lu Shengzhong: Book of Humanity: Empty Book 2005)\n</blockquote>\n\nWithin Lu Shengzhong's early career as an emerging artist, he has entered many solo and group exhibitions between the late 1980s and mid 90's including:\n\n* 1989: Life-Ephemeral and Eternal, Taipei, Taiwan\n* 1989: China Avant-Garde, NAGC, Beijing\n* 1990: Calling the Soul Hall, Central Academy of Fine Arts Gallery, Beijing\n* 1990\u20131992: Calling the Soul Around, Beijing, Hebei, Shanxi, Hunan, Guanxi, and Liaoning provinces\n* 1991: Calling the Soul, Museum of Contemporary Art, Beijing\n* 1992: Red Train, Emden, Berin, Wiesbaden, and Hamburg, Germany\n* 1992: Begenung Mit Den Anderen, Halle K18, Gesanthochschole, Kassel, Germany\n* 1992-1993: Post-Mao Product, New Art from China, traveling exhibition in Australia\n* 1994: Asian Art Show, Fukuoka Art Museum, Japan\n* 1994: Soul Stele, Adelaide, Australia\n* 1994: Soul Market, Beck Forum, Munich, Germany\n* 1994: Emergency Center, St. Petersburg, Russia\n* 1995:  ORT -+, Wuppertal, Germany\n* 1995: International Biennial Art Show, Gwangju, Korea\n* 1995: 4th Asian Art Show (Realism as an Attitude), Setagaya Art Museum, Japan\n* 1996: ARCOS DA LAPA, Rio de Janeiro, Brazil\n* 1996: Origin and Myths of Fire, The Museum of Modern Art, Saitama, Japan\n* 1996: Calling the Soul, Fukuoka Art Museum, Japan\n* 1998: Notes Across Asia, Berlin, Germany\n* 1998: Recalling Tradition, German Embassy, Beijing\n* 2000: First Encounter, [[Chambers Fine Art]], New York, USA\n* 2000: Record of Emotion, the Watchtower-Contemporary Art, Beijing\n* 2000: Gate of the Century (1979\u20131999) Chinese Art Invitational Exhibition, The Contemporary Art Museum, Chengdu\n* 2001: Lu Shengzhong: World!, Fukuoka Art Museum, Fukuoka, Japan\n* 2001: Beijing-Dachauer, Dachauer Schloss, Germany\n* 2001: Clues to the Future, Red Gate Gallery, Beijing, China\n* 2002 : A la nuit tomb\u00e9e: Lu Shengzhong, Grenoble, France\n* 2002 : De Waan Venray Asylum, the Netherlands\n* 2003 : Auspice From Above, Eslite Gallery, Taipei, Taiwan\n* 2003: Guangzhou Triennial, Guangzhou Museum of Fine Art, Guangzhou, China Blue Sky Exposure, Yizhuang, Beijing, China\n* 2003: Synthi-Scapes: Chinese Pavilion of the 50th Venice Biennale, (cancelled due to SARS), later shown in Guangzhou Museum of Fine Art, Guangzhou, China\n* 2003: Openness, China Art Museum, Beijing, China\n* 2003: Left Hand, Right Hand, 798 Art Space, Beijing, China\n* 2004: The Book of Humanity, [[Chambers Fine Art]], New York, USA\n* 2004: Cinesi artisti fra tradizione e presente, Marsilio Art Museum, Italy\n* 2004: Universal Figure\u2014A. R. Penck and Lu Shengzhong, White Space Gallery, Beijing, China\n* 2005: The New Emerging From the Old, University Art Museum, University at Albany, New York, USA\n* 2007: Square Earth, Round Heaven, [[Chambers Fine Art]], New York, USA\n\n==Chinese Folk Artist==\n<blockquote>\n''\"I use paper to cut this little red figure to demonstrate the delicate fragility of human beings. Ephemeral. A human\u2019s life is shorter than a paper\u2019s thickness. The material is not important. What is more important is the process you use to create that material. This is more valuable to me.\"''</blockquote>\n\nLu Shengzhong is a Chinese artist at the China Central Academy of Fine Art in Beijing, who specializes in the ancient Chinese paper cutting.\n\nHis most well-known craftsmanship is called \u201cLittle Red Figures\u201d, in reality, it is an old and famous procedure in China, named paper-cutting, which is utilized widely in the society specialty of china. The figure, which looks similar to a small kid, is an exceptionally regular element in Chinese time honored paper cutting, the nearby folks think this small squirt can evacuate the adversities so they continue cutting paper of small tyke, but it is unequivocally shown in the farmland far at a distance from the urban. This is a symbolization and universal society disregarded by virtuoso extended time, but Lu identify it and reproduces it, made it as a formal craftsmanship and considerable throughout giving the philosophical and customary nature.\n\n<blockquote>\n''\"For my project, there are two inspirations, the one is I think I really need to express something about culture in my design, try to find the culture meanings from Chinese folk art, actually, it is not hard, because Chinese folk art related with culture very close. The other thing is I should think about how to make my artwork more related with people\u2019s daily life, I should try to makes it looks like a thing in nowadays.\"<ref>{{cite news|title=Chinese Folk Artist-Lu Shengzhong|url=http://keqingli.wordpress.com/2010/06/25/chinese-folk-artist-%E2%80%93-lu-shengzhong/|date=25 June 2010|accessdate=21 April 2012}}</ref>''</blockquote>\n\n==Cutting to the Spirit==\nLu Shengzhong is a Chinese artist and he went to UAlbany on October, creating and installing a powerful new piece composed of red paper dolls. The cutting of Little Red Figures is ritual and performance in its pure sense, practiced for generations as a devotional act to bring fertility to the family and as a symbol of ancestral continuity.\n\nA celebration environment suffuses the twofold-stature studio. Red vibrations fill one's eyes and revive the faculties. A couple red cut-paper shades falling from the top side and cadenced swirls and rehashed plans in red, white and dark wrapping around the upper display dividers try to fill your fringe vision. Being a spot overpowered is an essential for a heavenly reaction, and this is feasibly an impact on Shengzhong. A combo of dread and interest frequently fabricated by reiteration and scale regularly are hung out with the eminent. They set up an environment of secret and open the brain to non rational methodologies. Since you've ever been in a Chinese temple you realize what I mean. The immeasurable space of the University Symbolization Exhibition hall works both for and in opposition to this impact. The scale allows an introduction of fabulous proportions, but the partitioning of units that might have reinforced one another make a less burnable air.\n\nThe sublime is not ordinarily hung out with hilariousness or modesty, but the apprehension that the swarming red vigor is made out of amusing small folks, some with ponytails, some with the oversize head of an infant child, fetus or frog, carries a grin to one's confront. Prolongation and fertility of both society and race is the subject, and it is treated with a gentility of spirit.\n\nThe ground surface-to-roof piece The Unfilled Book\u2014The Book of Mankind that Shengzhong finished at UAlbany contains several books at top side tallness, holding 900 pages that have been sliced to free and suspend portions of textless paper. Every coterminous line from every page joins similar to an umbilical line to small red individuals that splay out in the deck. This piece strongly sets aside doctrine and confirms the imperativeness of the individuals, and is the standout of the show.\n\nThe demonstration of cutting is moreover vital as an image of the Dao, the standard that grips positive and negative drives. Shengzhong's piece The Vertical of Negative and the Level of Negative, a 42-foot-extended cut-paper painting, encapsulates this guideline. Expansive, huge-headed children make islands around which masses of humbler figures swarm like schools of fish or sperm, raising momentums that convey the eye. Shapes in dark and red transform from figure to ground and to figure again in a euphoric showcase of formal stroke of genius.\n\nIn the four boards from the piece The Poetry of Congruity, Shengzhong likens allegorical recombination with the inference of dialect, a letter set of structure. He astutely makes mandalas from symmetrically put cut deciphers, and lays lines of shapes vertically or evenly beneath, made from snippets of broken set patterns. From a separation these pieces give off an impression of being conventional calligraphy parchments, but it is clear Shengzhong has an impulse regarding comicality that is a bit subversive.\n\nClose viewing is constantly remunerated. Subversive humor was a survival tactic that Shengzhong utilized in making suggestive subtexts covered up in the enchanting worker accounts of Adoration Tune, time honored compositions on silk. Alternate early plans showed on the ground stun of the display have a non specific, stylized hand that, however useful, will usually draw vigor at a distance from the surface explanation made by the in statement.<ref>{{cite web|last=Fintz|first=Jeanette|title=Cutting to the Spirit|url=http://metroland.net/back_issues/vol28_no47/art.html|publisher=University Art Museum, University at Albany|accessdate=27 April 2012}}</ref>\n\n==Three Elements==\nLu bases the theme of his paper cutting around the dynamic life cycle of paper cutting. The theme is an old technique that sustains vitality through infinite recreation and variation. With the art of recreation and variation as a basic technique, the art itself becomes a way becomes the art of constant renewal, not only in the art but life as well.  For instance the art was used in holidays, festivals, weddings, and funerals.  These events mark certain passages within a person's life. There are three basic elements in Lu Shengzhong's artwork that he finds essential in the art of paper cutting.\n\nThe first element is the dynamic relationship between positive and negative forms, in which is constantly created in the art of paper cutting.  Lu feels what's so significant to this is the fact one cannot us positive or negative forms alone, but for them to be used together, as in a single piece of paper that creates a conceptual whole.\n\nThe second element is referred to as the materiality of paper cutting.  First and foremost, the art of paper cutting always generates tension between two- dimensionality and three dimensionality, for the fact that a piece of paper is assumed to be two-dimensional for being such a flat surface.  Regardless of the way paper is cut, it still has a volume, as well as a front and back.  When Lu creates a piece, and attaches the paper cuts to aboard, he compares his work to a painting and a sculpture, he then begins to contest the relationship between the two art forms.  Lu also feels that a paper cut also represents fragility, for the fact that paper is vulnerable to natural and human disasters.  Fragility has been the theme and subject matter used in Lu Shengzhong's artworks.\n\nThe third element in Lu Shengzhong's work is the temporal, meditative nature of paper cutting.  This refers back to when he had the conversation with a local peasant woman while visiting the Shaanxi province.  Lu asked of her the thought process of the paper cuts she was creating, and she replied \u201cnothing, there is nothing in my mind.\u201d  To interpret the answer, Lu begins to approach his paper cutting with creative processes, emotion, and rational thinking, at the same time makes doesn't make him creative.  What makes Lu Shengzhong, and the peasant woman so significant, is the fact that when they create a piece, they are expressing as well as releasing themselves with abstract visual forms.\n\n==Publication==\n*1990: ''Works of Shenzhong'', Lu, Hunan Art Publication Press\n*1992: ''Folk Paper-cut'', Hunan Art Publication Press\n*1992: ''Huazhou Shadow Figures'', Hunan Art Publication Press\n*1994: ''Chinese Folk Wood Engraving'', Hunan Art Publication Press\n*1994: ''Selection of Line Drawing of Lu Shengzhong'', Guangxi Fine Arts Publication House Press\n*1995: ''Seeking the Soul'', Hunan Art Publication Press\n*1996: ''The Classic Appreciation of Folk Paper-cut'', China Films Press\n*1998: ''Lu Shengzhong: Calling the Soul'', Guangxi Fine Arts Publication House Press\n*2000: ''Drafting Characters'', China Youth Publication Press\n*2000: ''The First Meet'', New York Chambers Fine Art Press\n*2001: ''Walking and Observing'', SDX San Lian Bookstore Publishing\n*2001: ''Flourmade tiger of Langzhuang'' (collaborate with Li, Hongjun), Taiwan Echo Publishing Press\n*2002: ''Colored Clothes'', Guangxi Fine Arts Publication House Press\n*2002: ''Baby's Gallus'', Guangxi Fine Arts Publication House Press\n*2003: ''Original Manuscript of Molding'', SDX San Lian Bookstore Publishing\n*2003: ''Farewell Tradition I'', SDX San Lian Bookstore Publishing\n*2003: ''Farewell Tradition II'', SDX San Lian Bookstore Publishing\n*2003: ''The Arrival of Luck'', Taiwan Eslite Gallery Press\n*2003: ''The Story of Little Red Kid'', Shanghai Literature and Art Publishing Press\n*2004: ''Farewell Tradition III'', SDX San Lian Bookstore Publishing\n*2004: ''Farewell Tradition IV'', SDX San Lian Bookstore Publishing\n\n==Stamps Design==\n*1988: Countryside Culture (4 pieces of memorial), China Post\u3000\u3000\n*1988: Chinese Agricultural Sports Conference (2 pieces of memorial), China Post\n*1989: She Han Ling Zhi,  Safety with all Seasons (stamp with the animal of Chinese Birth year), China Post\n*1996: Xi Jian Guang Ming,  The Myriad of Lights (stamp with the animal of Chinese Birth year 2 pieces of memorial), China Post\n*2005: Rooster Crows (stamp with the animal of Chinese Birth year), China Post\n*2006: Guo Tai Min An (stamp with the animal of Chinese Birth year), China Post\n\n==Later career==\nLu published a book in 2005 entitled ''The Book of Humanities'', where he discusses as well as displays his past and present works.  The book also employs Lu's three elements behind paper cutting along with his philosophy towards his artwork in several volumes.  Some of the books collage pages were scraps from actual pieces that Lu Shengzhong created.  The collages in the book are of little red figures such as frog, paper people, and other various shapes.\n\nLu Shengzhong currently works as a professor at the very school where he earned his master's degree, Central Academy of Fine Art, in the department of Research Institute for Folk Art Studies in Beijing.  Lu teaches up to eight classes per semester, and is very enthusiastic and well involved with his students, in hopes that they will be the future for art\n\n==References==\n{{reflist}}\n* https://web.archive.org/web/20090502194042/http://www.chambersfineart.com/en/contemp/lshen-bio.html\n* http://findarticles.com/p/articles/mi_m1248/is_6_93/ai_n13804286/\n* https://web.archive.org/web/20110724083739/http://www2.thorn.net/~alexa/clips/lsz.html\n* Newell, L.B. (2007). ''Out of The Ordinary''.  South Kensington, London, England: V&A Publications\n* http://baike.baidu.com/view/899797.htm\n* https://archive.is/20130126004940/http://www.htsdart.com/html/artist/detail_2012_01/08/141_3.shtml\n* http://www.vam.ac.uk/vastatic/microsites/1637_outoftheordinary/artists_biography.php?artistTag=shengzhong\n\n{{DEFAULTSORT:Lu, Shengzhong}}\n[[Category:Artists from Shandong]]\n[[Category:Living people]]\n[[Category:1952 births]]\n[[Category:People from Dezhou]]\n[[Category:Chinese contemporary artists]]\n", "name_user": "Alistair1978", "label": "safe", "comment": "typo/fmt (viaWP:JWB)", "url_page": "//en.wikipedia.org/wiki/L%C3%BC_Shengzhong"}
{"title_page": "Universal Co-Masonry", "text_new": "{{Freemasonry}}\n[[File:Universal Co-Masonry Headquarters.jpg|thumb|The Larkspur, Colorado Headquarters of Universal Co-Masonry]]\n'''Universal Co-Masonry''' (incorporated under the laws of [[Colorado]] as '''The American Federation of Human Rights''', A.F.H.R. for short), is an international fraternal [[Freemasonry|Masonic]] organization headquartered in [[Larkspur, Colorado]].<ref>{{cite web |title=American Federation of Human Rights Headquarters |url=http://www.larkspurhistoricalsociety.com/locations/larkspur/amfed_humanrights.html |website=Douglas County Historical Society}}</ref><ref>{{Cite web|url=https://www.denverpost.com/2015/02/24/co-masonic-history-still-alive-in-present-day-larkspur/|title=Co-Masonic History Still Alive In Present Day Larkspur|last=Hernandez|first=Elizabeth|date=Feb 24, 2015|website=Denver Post|archive-url=|archive-date=|access-date=}}</ref>  Formally a national Federation of [[Le Droit Humain]], the international order of mixed [[co-freemasonry]], Universal Co-Masonry split off in 1994 to become an independent masonic obedience.<ref>{{Cite web|url=http://ca10.washburnlaw.edu/cases/2002/07/99-1581.htm|title=VOIRIOL vs. AMERICAN FEDERATION OF HUMAN RIGHTS|last=|first=|date=|website=|archive-url=|archive-date=|access-date=}}</ref> The organization seeks to \u201ccombat ignorance in all its forms\u201d and works \u201cto the Glory of God and the Perfection of Humanity\u201d. Universal Co-Masonry has created \u201ca Masonic Government that ensures the maximum liberty compatible with a voluntarily accepted discipline and is organized upon the precepts of the Ancient Mystery Schools, the [[Scottish Rite]], and the [[English Rite]]\u201d.<ref>{{cite web |title=What is Universal Co-Masonry |url=https://www.universalfreemasonry.org/}}</ref> Universal Co-Masonry is active in North America, South America, Europe, Africa and Asia. Universal Co-Masonry also oversees the administration of the Masonic Philosophical Society, a philosophical discussion and educational society that meets online and in several countries.<ref>{{Cite web|url=https://www.universalfreemasonry.org/en/masonic-philosophical-society|title=Masonic Philosophical Society|last=|first=|date=|website=Universal Co-Masonry|archive-url=|archive-date=|access-date=}}</ref>\n\n==Philosophy==\n\nUniversal Co-Masonry espouses the idea that all human beings are equal, regardless of race, gender, creed or nationality and does not believe that the privileges of Freemasonry should be restricted on the basis of any of these. Universal Co-Masonry views the teachings and philosophies of Freemasonry and other ancient mystery traditions as being essential for the improvement of human society and works to promote values common to all religions throughout the world.<ref>{{cite web |title=VORIOL vs. AMERICAN FEDERATION OF HUMAN RIGHTS  |url=http://ca10.washburnlaw.edu/cases/2002/07/99-1581.htm }}</ref><ref name=\"Gu\u00e9non2004\">{{cite book|author=Ren\u00e9 Gu\u00e9non|title=Theosophy: History of a Pseudo-religion|url=https://books.google.com/books?id=7_WwVFntyFwC&pg=PA242|accessdate=22 August 2019|date=May 2004|publisher=Sophia Perennis|isbn=978-0-900588-80-8|page=242}}</ref>\n\n===Theosophical influence===\n\nThe [[Theosophical Society]] has had a major influence on the development of Co-Masonry. Founded in 1875 by [[Helena Blavatsky]], [[Henry Olcott]] and [[William Quan Judge]], the Theosophical Society promoted ideas of religious unity and philosophical exploration, both central tenets of Universal Co-Masonry.<ref>{{Cite book|title=The Hidden Life In Freemasonry|last=Leadbeater|first=Charles|publisher=The Theosophical Publishing House|year=1926|isbn=|location=|pages=115}}</ref> Many Theosophists were women and the Society promoted an interest in the symbolism and rituals of Freemasonry and other similar organizations but as women were barred from participating in the male-only Freemasonry popular at that time many of its members were encouraged to join Co-Masonry. One of the most prominent female Theosophists to join the order was [[Annie Besant]],<ref>{{cite web |title=Universal Co-Masonry: Annie Besant |url=https://www.universalfreemasonry.org/en/famous-freemasons/annie-besant}}</ref> who attracted numerous English and international Theosophists to the organization. By the late 1930s the American Federation of Le Droit Humain was heavily influenced by Theosophical teachings.<ref>{{Cite book|url=https://www.worldcat.org/oclc/871426072|title=On holy ground : history of the honorable order of American co-masonry|last=Kidd, Karen.|first=|date=2011|publisher=Masonic Publishing Company|year=|isbn=9781613640050|edition= 1st|location=[New York]|pages=248|oclc=871426072|url-status=live}}</ref>\n\n==Structure & Organization==\n\nUniversal Co-Masonry is organized as the United Federation of Lodges, and it practices the Universal rite of Co-Masonry, which is an amalgamation of the Scottish Rite and English Rite Degrees, and is governed by a Supreme Council of the Thirty-Third Degree.\n\n===Degrees===\n\nSymbolic Masonry \"Symbolic Degrees\"\n\n*1 - Entered Apprentice \n*2 - Fellowcraft\n*3 - Master Mason\n\nEnglish Rite (or York Rite) \"Chapter Degrees\"\n\n*Mark Master Mason\n*Royal Ark Mariner\n*Excellent Master\n*Holy Royal Arch of Jerusalem\n\nLodge of Perfection \"Ineffable Degrees\"\n\n*4 - Secret Master\n*5 - Perfect Master\n*6 - Intimate Secretary\n*7 - Provost & Judge\n*8 - Intendant of the Building\n*9 - Master Elect of Nine\n*10 - Master Elect of Fifteen\n*11 - Sublime Master Elect\n*12 - Grand Master Architect\n*13 - Royal Arch of Enoch\n*14 - Grand Elect and Sublime Mason\n\nChapter Rose Croix \"Historic Degrees\"\n\n*15 - Knight of the East\n*16 - Prince of Jerusalem\n*17 - Knight of the East & West\n*18 - Knight of Rose Croix of Heredom\n\nCouncil Kadosh \"Philosophical and chivalric Degrees\"\n\n*19 - Grand Pontiff or Sublime Scottish Knight\n*20 - Sovereign Prince or Master ad Vitam\n*21 - Noachite or Prussian Knight\n*22 - Prince of Lebanon or Royal Axe\n*23 - Chief of the Tabernacle\n*24 - Prince of the Tabernacle\n*25 - Knight of the Brazen Serpent\n*26 - Prince of Mercy\n*27 - Sovereign Commander of the Temple\n*28 - Knight of the Sun, Prince Adept\n*29 - Knight of Saint Andrew\n*30 - Knight Kadosh\n\nConsistory \"Official and Ceremonial Degrees\"\n\n*31 - Grand Inquisitor Commanders\n*32 - Sublime Prince of the Royal Secret\n\nCourt of Honor \"Honorary Degrees\"'''<br>'''\n\n*33 - Grand Inspector General<ref>{{cite web |title=Universal Co-Masonry: Degrees of Freemasonry |url=https://www.universalfreemasonry.org/en/masonic-degrees-freemasonry |website=universalfreemasonry}}</ref><ref>{{cite web |title=VORIOL vs. AMERICAN FEDERATION OF HUMAN RIGHTS  |url=http://ca10.washburnlaw.edu/cases/2002/07/99-1581.htm }}</ref>\n\n===Grand Commanders===\n\nLouis Goaziou (1903-1937)<br>\nEdith Armour (1937-1959)<br>\nBertha Williams (1959-1968)<br>\nHelen Wycherley (1968-1983)<br>\nCalla Haack (1983 -1992)<br>\nVera Bressler (1992-1994)<br>\nMagdalena Cumsille (1994\u2013present)\n\n===The Masonic Philosophical Society===\n\nIn early 2008, Universal Co-Masonry began to organize philosophical discussion groups in several countries and online.<ref>{{Cite web|url=https://www.sos.state.co.us/biz/BusinessEntityDetail.do?quitButtonDestination=BusinessEntityResults&nameTyp=ENT&masterFileId=20131158567&entityId2=20131158567&fileId=20131158567&srchTyp=ENTITY|title=Masonic Philosophical Society|last=|first=|date=|website=Colorado Secretary of State|archive-url=|archive-date=|access-date=}}</ref> These groups are organized for the purpose of combating human ignorance through open and civil discussion and debate on a wide variety of topics. MPS study centers are usually tied to a local lodge and volunteers from the order work to hold meetings and run the administrative aspects of the organization. Membership and participation in the Masonic Philosophical Society is open to all people.\n\n===Headquarters===\n\nThe Headquarters of Universal Co-Masonry is located in Larkspur, Colorado on nearly 250 acres dedicated to the Masonic Work of Co-Masonry. The campus contains an Administrative building, Grand Temple, Dormitories, and Conservatory. The Administration was built in 1924 for sole purpose of supporting the work of Co-Masonry in North America. Today this building houses the Co-Masonic Library and Museum, Archive Rooms, and the Executive Chambers of the 33rd Degree. In 1998, it was recognized and listed on The National Register of Historic Places and awarded Landmark status in 2008. The Order's Grand Temple, which was consecrated in 2009 and contains different Temples for the various degrees practiced by the Order. The campus has two dormitories, respectively called the Helen Wycherley and Ursula Monroe Dormitory, and allows Brothers to stay during international conventions and for other Masonic functions. In 2019, the Federation Conservatory was constructed as a dining facility and public forum for presentations and round table discussions. Most of the property is forest that rests at the base of Monkey Face Mountain, once called Human Rights Mountain in the early 20th century. Members can hike the property and enjoy the serenity of nature without the disturbances of modern life.<ref>{{Cite journal|last=|first=|date=September 2019|title=Headquarters|url=|journal=The Phoenix|volume=45 no.3|pages=3-4|via=}}</ref>\n\n==History==\n\n===Early history 1903-1939===\n\nUniversal Co-Masonry was first established in North America under the name The American Federation of Human Rights. It was an affiliate branch of Le Droit Humain, the world's first Co-Masonic organization, which was founded in 1882 in [[Paris]], France. The American Federation of Human Rights, the predecessor to Universal Co-Masonry, was first established in North America by Antoine Muzzarelli, an educator and life-long Freemason, and Louis Goaziou,<ref>{{Cite journal|last=Slifko|first=Slifko|date=30 December 2014|title=An Historical Geography of Louis Goaziou and the Early Years of L\u2019Ordre Ma\u00e7onnique Mixte et International \u2018Le Droit Humain\u2019, American Federation of Human Rights: the Significance of the Industrial Monongahela Valley of Western Pennsylvania|url=https://journals.equinoxpub.com/JRFF/article/viewArticle/19353|journal=JOURNAL FOR RESEARCH INTO FREEMASONRY AND FRATERNALISM|volume=4|pages=|via=}}</ref> a French immigrant who had long been active in the [[industrial labor]], [[women's rights]] and immigrant movements of [[Pennsylvania]]. An [[anarchist]] turned [[socialist]], Goaziou believed that there was potential contained within the teachings and philosophies of Co-Masonry to shape a more just society and dedicated his life to its promotion. The American Federation of Human Rights, American Co-Masonry, established its first [[masonic lodge]], Alpha Lodge #301, in [[Charleroi, Pennsylvania]] in 1903.<ref>{{cite book |last1=Roberts |first1=Richard |title=The Enigma of Freemasonry}}</ref> In 1916, the organization moved its headquarters to Larkspur, Colorado in order to be more centrally located and establish a retirement center for ageing members.<ref>{{Cite web|url=https://nationalregisterofhistoricplaces.com/co/douglas/state.html|title=American Federation of Human RIghts|last=|first=|date=|website=National Register of Historic Places|archive-url=|archive-date=|access-date=}}</ref>\n\nDuring the 1920s, American Co-Masonry continued to expand, founding lodge after lodge. It was at this time that Theosophy began to become a significant part of American Co-Masonry, and Louis Goaziou decided that it was in the best interests of the American Federation to maintain a balance between Theosophists and non-Theosophists in the organization. This balance would be maintained until the time of Edith Armour as Grand Commander.\n\nWhen the stock market crashed in 1929 American Co-Masonry was heavily affected. The organization's membership base had long been poor minors and workers, who were drawn to the organization by its sense of community, and its potential to help organize them. As the Great Depression wore on, many of these members were unable to pay their dues, as their jobs disappeared. Lodges in rural areas began to struggle, and the more wealthy Theosophists became a greater and greater share of the membership, slowly eroding the balance sought by Goaziou. It was during this decade that Louis Goaziou passed, and Edith Armour, a prominent Theosophist, became Grand Commander in 1937.<ref>{{Cite book|url=https://www.worldcat.org/oclc/871426072|title=On holy ground : history of the honorable order of American co-masonry|last=Kidd, Karen.|first=|date=2011|publisher=Masonic Publishing Company|year=|isbn=9781613640050|edition= 1st|location=[New York]|pages=221\u2013246|oclc=871426072|url-status=live}}</ref>\n\n===World War Two & Aftermath 1939-1990===\n\nDuring the [[Nazi invasion of France]] in [[World War II]] the Nazis launched a [[Suppression of Freemasonry#Nazi Germany and occupied Europe|campaign of repression against all Masonic organizations]] in the occupied territory. The Supreme Council of Le Droit Humain, the governing body of the institution, went into hiding without having a chance to make arrangements for the future leadership of international Co-Masonry in their absence. In response to this crisis in the international organization, The Most Puissant Grand Commander of the British Federation of Le Droit Humain, suggested to Edith Armour, M.P.G.C. of the American Federation that the two of them set up two temporary Supreme Councils to administer Co-Masonry in several countries while France was under Nazi occupation. Armour agreed, and the Western Supreme Council under Armour administered the Western Hemisphere of International Co-Freemasonry until the liberation of France and the reformation of the Supreme Council of Le Droit Humain in 1945.<ref>{{Cite book|url=https://www.worldcat.org/oclc/871426072|title=On holy ground : history of the honorable order of American co-masonry|last=Kidd, Karen.|first=|date=2011|publisher=Masonic Publishing Company|year=|isbn=9781613640050|edition= 1st|location=[New York]|pages=257|oclc=871426072|url-status=live}}</ref>\n\nAfter the war and the return of the supreme council, the almost entirely Theosophical American Co-Masonry begin to decline in membership. This was largely tied to the organizations dominance by the Theosophical society, which encouraged the admission of only Theosophists into the ranks. As the Theosophical society began to decline in membership, so too did American Co-Masonry. This decline continued until the mid-1990s.<ref>{{Cite book|url=https://www.worldcat.org/oclc/871426072|title=On holy ground : history of the honorable order of American co-masonry|last=Kidd, Karen.|first=|date=2011|publisher=Masonic Publishing Company|year=|isbn=9781613640050|edition= 1st|location=[New York]|pages=274\u2013281|oclc=871426072|url-status=live}}</ref>\n\n===The Split From Le Droit Humain 1990-1994===\n\nIn the early 1990s, philosophical differences between the French leadership of International Co-Masonry (Le Droit Humain) and the members of the American Federation that had been growing for some time came to ahead. The members of the American Federation voted by an overwhelming majority to declare its independence and separate from Le Droit Humain a split that was effected in April 1994. Because The American Federation was incorporated in the United States and was a legally independent corporate entity from Le Droit Humain, this transition was accomplished smoothly and the two organizations parted ways.<ref>{{Cite book|url=https://www.worldcat.org/oclc/871426072|title=On holy ground : history of the honorable order of American co-masonry|last=Kidd, Karen.|first=|date=2011|publisher=Masonic Publishing Company|year=|isbn=9781613640050|edition= 1st|location=[New York]|pages=333|oclc=871426072|url-status=live}}</ref>\n\n===American Co-Masonry 1995-2017===\n\nAfter the split, The American Federation of Le Droit Humain created its own Supreme Council headquartered in Larkspur, to replace the Supreme Council of Le Droit Humain.<ref>{{cite web |title=VORIOL vs. AMERICAN FEDERATION OF HUMAN RIGHTS |url=http://ca10.washburnlaw.edu/cases/2002/07/99-1581.htm }}</ref> Renaming itself American Co-Masonry the newly independent order also began establishing lodges outside the United States as an independent organization no longer bound by the system of national Federations that Le Droit Humain had used to organize its members. In 2010, the construction of a new Grand Temple was finished in Larkspur, Colorado, the headquarters of the newly formed international organization.<ref>{{Cite book|url=https://www.worldcat.org/oclc/871426072|title=On holy ground : history of the honorable order of American co-masonry|last=Kidd, Karen.|first=|date=2011|publisher=Masonic Publishing Company|year=|isbn=9781613640050|edition= 1st|location=[New York]|pages=340|oclc=871426072|url-status=live}}</ref>\n\n===Universal Co-Masonry 2017-Present===\n\nIn 2017, the Honorable Order of American Co-Masonry: American Federation of Human Rights changed its name to \"The Honorable Order of Universal Co-Masonry: United Federation of Lodges\" to better reflect the international character of the order.<ref>{{Cite web|url=https://www.sos.state.co.us/biz/TradeNameSummary.do?quitButtonDestination=BusinessEntityResults&nameTyp=TRDNM&masterFileId=20171771393&entityId2=20171771393&fileId=20171771393&srchTyp=TRDNM|title=Colorado Secretary of State - Trade Name|last=|first=|date=|website=|archive-url=|archive-date=|access-date=}}</ref><ref>{{Cite web|url=http://tsdr.uspto.gov/#caseNumber=87667881&caseType=SERIAL_NO&searchType=statusSearch|title=US Trademark Office - Universal Co-Masonry|last=|first=|date=|website=|archive-url=|archive-date=|access-date=}}</ref>\n\n== References ==\n<!-- Inline citations added to your article will automatically display here. See en.wikipedia.org/wiki/WP:REFB for instructions on how to add citations. -->\n{{reflist}}\n\n==External links==\n*[http://www.philosophicalsociety.org Masonic Philosophical Society]\n\n[[Category:Freemasonry in the United States]]\n[[Category:Co-Freemasonry]]\n[[Category:Organizations established in 1994]]\n[[Category:Douglas County, Colorado]]\n", "text_old": "{{Freemasonry}}\n[[File:Universal Co-Masonry Headquarters.jpg|thumb|The Larkspur, Colorado Headquarters of Universal Co-Masonry]]\n'''Universal Co-Masonry''' (incorporated under the laws of [[Colorado]] as '''The American Federation of Human Rights''', A.F.H.R. for short), is an international fraternal [[Freemasonry|Masonic]] organization headquartered in [[Larkspur, Colorado]].<ref>{{cite web |title=American Federation of Human Rights Headquarters |url=http://www.larkspurhistoricalsociety.com/locations/larkspur/amfed_humanrights.html |website=Douglas County Historical Society}}</ref><ref>{{Cite web|url=https://www.denverpost.com/2015/02/24/co-masonic-history-still-alive-in-present-day-larkspur/|title=Co-Masonic History Still Alive In Present Day Larkspur|last=Hernandez|first=Elizabeth|date=Feb 24, 2015|website=Denver Post|archive-url=|archive-date=|access-date=}}</ref>  Formally a national Federation of [[Le Droit Humain]], the international order of mixed [[co-freemasonry]], Universal Co-Masonry split off in 1994 to become an independent masonic obedience.<ref>{{Cite web|url=http://ca10.washburnlaw.edu/cases/2002/07/99-1581.htm|title=VOIRIOL vs. AMERICAN FEDERATION OF HUMAN RIGHTS|last=|first=|date=|website=|archive-url=|archive-date=|access-date=}}</ref> The organization seeks to \u201ccombat ignorance in all its forms\u201d and works \u201cto the Glory of God and the Perfection of Humanity\u201d. Universal Co-Masonry has created \u201ca Masonic Government that ensures the maximum liberty compatible with a voluntarily accepted discipline and is organized upon the precepts of the Ancient Mystery Schools, the [[Scottish Rite]], and the [[English Rite]]\u201d.<ref>{{cite web |title=What is Universal Co-Masonry |url=https://www.universalfreemasonry.org/}}</ref> Universal Co-Masonry is active in North America, South America, Europe, Africa and Asia. Universal Co-Masonry also oversees the administration of the Masonic Philosophical Society, a philosophical discussion and educational society that meets online and in several countries.<ref>{{Cite web|url=https://www.universalfreemasonry.org/en/masonic-philosophical-society|title=Masonic Philosophical Society|last=|first=|date=|website=Universal Co-Masonry|archive-url=|archive-date=|access-date=}}</ref>\n\n==Philosophy==\n\nUniversal Co-Masonry espouses the idea that all human beings are equal, regardless of race, gender, creed or nationality and does not believe that the privileges of Freemasonry should be restricted on the basis of any of these. Universal Co-Masonry views the teachings and philosophies of Freemasonry and other ancient mystery traditions as being essential for the improvement of human society and works to promote values common to all religions throughout the world.<ref>{{cite web |title=VORIOL vs. AMERICAN FEDERATION OF HUMAN RIGHTS  |url=http://ca10.washburnlaw.edu/cases/2002/07/99-1581.htm }}</ref><ref name=\"Gu\u00e9non2004\">{{cite book|author=Ren\u00e9 Gu\u00e9non|title=Theosophy: History of a Pseudo-religion|url=https://books.google.com/books?id=7_WwVFntyFwC&pg=PA242|accessdate=22 August 2019|date=May 2004|publisher=Sophia Perennis|isbn=978-0-900588-80-8|page=242}}</ref>\n\n===Theosophical influence===\n\nThe [[Theosophical Society]] has had a major influence on the development of Co-Masonry. Founded in 1875 by [[Helena Blavatsky]], [[Henry Olcott]] and [[William Quan Judge]], the Theosophical Society promoted ideas of religious unity and philosophical exploration, both central tenets of Universal Co-Masonry.<ref>{{Cite book|title=The Hidden Life In Freemasonry|last=Leadbeater|first=Charles|publisher=The Theosophical Publishing House|year=1926|isbn=|location=|pages=115}}</ref> Many Theosophists were women and the Society promoted an interest in the symbolism and rituals of Freemasonry and other similar organizations but as women were barred from participating in the male-only Freemasonry popular at that time many of its members were encouraged to join Co-Masonry. One of the most prominent female Theosophists to join the order was [[Annie Besant]],<ref>{{cite web |title=Universal Co-Masonry: Annie Besant |url=https://www.universalfreemasonry.org/en/famous-freemasons/annie-besant}}</ref> who attracted numerous English and international Theosophists to the organization. By the late 1930s the American Federation of Le Droit Humain was heavily influenced by Theosophical teachings.<ref>{{Cite book|url=https://www.worldcat.org/oclc/871426072|title=On holy ground : history of the honorable order of American co-masonry|last=Kidd, Karen.|first=|date=2011|publisher=Masonic Publishing Company|year=|isbn=9781613640050|edition= 1st|location=[New York]|pages=248|oclc=871426072|url-status=live}}</ref>\n\n==Structure & Organization==\n\nUniversal Co-Masonry is organized as the United Federation of Lodges, and it practices the Universal rite of Co-Masonry, which is an amalgamation of the Scottish Rite and English Rite Degrees, and is governed by a Supreme Council of the Thirty-Third Degree.\n\n===Degrees===\n\nSymbolic Masonry \"Symbolic Degrees\"\n\n*1 - Entered Apprentice \n*2 - Fellowcraft\n*3 - Master Mason\n\nEnglish Rite (or York Rite) \"Chapter Degrees\"\n\n*Mark Master Mason\n*Royal Ark Mariner\n*Excellent Master\n*Holy Royal Arch of Jerusalem\n\nLodge of Perfection \"Ineffable Degrees\"\n\n*4 - Secret Master\n*5 - Perfect Master\n*6 - Intimate Secretary\n*7 - Provost & Judge\n*8 - Intendant of the Building\n*9 - Master Elect of Nine\n*10 - Master Elect of Fifteen\n*11 - Sublime Master Elect\n*12 - Grand Master Architect\n*13 - Royal Arch of Enoch\n*14 - Grand Elect and Sublime Mason\n\nChapter Rose Croix \"Historic Degrees\"\n\n*15 - Knight of the East\n*16 - Prince of Jerusalem\n*17 - Knight of the East & West\n*18 - Knight of Rose Croix of Heredom\n\nCouncil Kadosh \"Philosophical and chivalric Degrees\"\n\n*19 - Grand Pontiff or Sublime Scottish Knight\n*20 - Sovereign Prince or Master ad Vitam\n*21 - Noachite or Prussian Knight\n*22 - Prince of Lebanon or Royal Axe\n*23 - Chief of the Tabernacle\n*24 - Prince of the Tabernacle\n*25 - Knight of the Brazen Serpent\n*26 - Prince of Mercy\n*27 - Sovereign Commander of the Temple\n*28 - Knight of the Sun, Prince Adept\n*29 - Knight of Saint Andrew\n*30 - Knight Kadosh\n\nConsistory \"Official and Ceremonial Degrees\"\n\n*31 - Grand Inquisitor Commanders\n*32 - Sublime Prince of the Royal Secret\n\nCourt of Honor \"Honorary Degrees\"'''<br>'''\n\n*33 - Grand Inspector General<ref>{{cite web |title=Universal Co-Masonry: Degrees of Freemasonry |url=https://www.universalfreemasonry.org/en/masonic-degrees-freemasonry |website=universalfreemasonry}}</ref><ref>{{cite web |title=VORIOL vs. AMERICAN FEDERATION OF HUMAN RIGHTS  |url=http://ca10.washburnlaw.edu/cases/2002/07/99-1581.htm }}</ref>\n\n===Grand Commanders===\n\nLouis Goaziou (1903-1937)<br>\nEdith Armour (1937-1959)<br>\nBertha Williams (1959-1968)<br>\nHelen Wycherley (1968-1983)<br>\nCalla Haack (1983 -1992)<br>\nVera Bressler (1992-1994)<br>\nMagdalena Cumsille (1994\u2013present)\n\n===The Masonic Philosophical Society===\n\nIn early 2008, Universal Co-Masonry began to organize philosophical discussion groups in several countries and online.<ref>{{Cite web|url=https://www.sos.state.co.us/biz/BusinessEntityDetail.do?quitButtonDestination=BusinessEntityResults&nameTyp=ENT&masterFileId=20131158567&entityId2=20131158567&fileId=20131158567&srchTyp=ENTITY|title=Masonic Philosophical Society|last=|first=|date=|website=Colorado Secretary of State|archive-url=|archive-date=|access-date=}}</ref> These groups are organized for the purpose of combating human ignorance through open and civil discussion and debate on a wide variety of topics. MPS study centers are usually tied to a local lodge and volunteers from the order work to hold meetings and run the administrative aspects of the organization. Membership and participation in the Masonic Philosophical Society is open to all people.\n\n===Headquarters===\n\nThe Headquarters of Universal Co-Masonry is located in Larkspur, Colorado on nearly 250 acres dedicated to the Masonic Work of Co-Masonry. The campus contains an Administrative building, Grand Temple, Dormitories, and Conservatory. The Administration was built in 1924 for sole purpose of supporting the work of Co-Masonry in North America. Today this building houses the Co-Masonic Library and Museum, Archive Rooms, and the Executive Chambers of the 33rd Degree. In 1998, it was recognized and listed on The National Register of Historic Places and awarded Landmark status in 2008. The Order's Grand Temple, which was consecrated in 2009 and contains different Temples for the various degrees practiced by the Order. The campus has two dormitories, respectively called the Helen Wycherley and Ursula Monroe Dormitory, and allows Brothers to stay during international conventions and for other Masonic functions. In 2019, the Federation Conservatory was constructed as a dining facility and public forum for presentations and round table discussions. Most of the property is forest that rests at the base of Monkey Face Mountain, once called Human Rights Mountain in the early 20th century. Members can hike the property and enjoy the serenity of nature without the disturbances of modern life.<ref>{{Cite journal|last=|first=|date=September 2019|title=Headquarters|url=|journal=The Phoenix|volume=45 no.3|pages=3-4|via=}}</ref>\n\n==History==\n\n===Early history 1903-1939===\n\nUniversal Co-Masonry was first established in North America under the name The American Federation of Human Rights. It was an affiliate branch of Le Droit Humain, the world's first Co-Masonic organization, which was founded in 1882 in [[Paris]], France. The American Federation of Human Rights, the predecessor to Universal Co-Masonry, was first established in North America by Antoine Muzzarelli, an educator and life-long Freemason, and Louis Goaziou,<ref>{{Cite journal|last=Slifko|first=Slifko|date=30 December 2014|title=An Historical Geography of Louis Goaziou and the Early Years of L\u2019Ordre Ma\u00e7onnique Mixte et International \u2018Le Droit Humain\u2019, American Federation of Human Rights: the Significance of the Industrial Monongahela Valley of Western Pennsylvania|url=https://journals.equinoxpub.com/JRFF/article/viewArticle/19353|journal=JOURNAL FOR RESEARCH INTO FREEMASONRY AND FRATERNALISM|volume=4|pages=|via=}}</ref> a French immigrant who had long been active in the [[industrial labor]], [[women's rights]] and immigrant movements of [[Pennsylvania]]. An [[anarchist]] turned [[socialist]], Goaziou believed that there was potential contained within the teachings and philosophies of Co-Masonry to shape a more just society and dedicated his life to its promotion. The American Federation of Human Rights, American Co-Masonry, established its first [[masonic lodge]], Alpha Lodge #301, in [[Charleroi, Pennsylvania]] in 1903.<ref>{{cite book |last1=Roberts |first1=Richard |title=The Enigma of Freemasonry}}</ref> In 1916, the organization moved its headquarters to Larkspur, Colorado in order to be more centrally located and establish a retirement center for ageing members.<ref>{{Cite web|url=https://nationalregisterofhistoricplaces.com/co/douglas/state.html|title=American Federation of Human RIghts|last=|first=|date=|website=National Register of Historic Places|archive-url=|archive-date=|access-date=}}</ref>\n\nDuring the 1920s, American Co-Masonry continued to expand, founding lodge after lodge. It was at this time that Theosophy began to become a significant part of American Co-Masonry, and Louis Goaziou decided that it was in the best interests of the American Federation to maintain a balance between Theosophists and non-Theosophists in the organization. This balance would be maintained until the time of Edith Armour as Grand Commander.\n\nWhen the stock market crashed in 1929 American Co-Masonry was heavily affected. The organization's membership base had long been poor minors and workers, who were drawn to the organization by its sense of community, and its potential to help organize them. As the Great Depression wore on, many of these members were unable to pay their dues, as their jobs disappeared. Lodges in rural areas began to struggle, and the more wealthy Theosophists became a greater and greater share of the membership, slowly eroding the balance sought by Goaziou. It was during this decade that Louis Goaziou passed, and Edith Armour, a prominent Theosophist, became Grand Commander in 1937.<ref>{{Cite book|url=https://www.worldcat.org/oclc/871426072|title=On holy ground : history of the honorable order of American co-masonry|last=Kidd, Karen.|first=|date=2011|publisher=Masonic Publishing Company|year=|isbn=9781613640050|edition= 1st|location=[New York]|pages=221\u2013246|oclc=871426072|url-status=live}}</ref>\n\n===World War Two & Aftermath 1939-1990===\n\nDuring the [[Nazi invasion of France]] in [[World War II]] the Nazis launched a [[Suppression of Freemasonry#Nazi Germany and occupied Europe|campaign of repression against all Masonic organizations]] in the occupied territory. The Supreme Council of Le Droit Humain, the governing body of the institution, went into hiding without having a chance to make arrangements for the future leadership of international Co-Masonry in their absence. In response to this crisis in the international organization, The Most Puissant Grand Commander of the British Federation of Le Droit Humain, suggested to Edith Armour, M.P.G.C. of the American Federation that the two of them set up two temporary Supreme Councils to administer Co-Masonry in several countries while France was under Nazi occupation. Armour agreed, and the Western Supreme Council under Armour administered the Western Hemisphere of International Co-Freemasonry until the liberation of France and the reformation of the Supreme Council of Le Droit Humain in 1945.<ref>{{Cite book|url=https://www.worldcat.org/oclc/871426072|title=On holy ground : history of the honorable order of American co-masonry|last=Kidd, Karen.|first=|date=2011|publisher=Masonic Publishing Company|year=|isbn=9781613640050|edition= 1st|location=[New York]|pages=257|oclc=871426072|url-status=live}}</ref>\n\nAfter the war and the return of the supreme council, the almost entirely Theosophical American Co-Masonry begin to decline in membership. This was largely tied to the organizations dominance by the Theosophical society, which encouraged the admission of only Theosophists into the ranks. As the Theosophical society began to decline in membership, so too did American Co-Masonry. This decline continued until the mid-90's.<ref>{{Cite book|url=https://www.worldcat.org/oclc/871426072|title=On holy ground : history of the honorable order of American co-masonry|last=Kidd, Karen.|first=|date=2011|publisher=Masonic Publishing Company|year=|isbn=9781613640050|edition= 1st|location=[New York]|pages=274\u2013281|oclc=871426072|url-status=live}}</ref>\n\n===The Split From Le Droit Humain 1990-1994===\n\nIn the early 1990s, philosophical differences between the French leadership of International Co-Masonry (Le Droit Humain) and the members of the American Federation that had been growing for some time came to ahead. The members of the American Federation voted by an overwhelming majority to declare its independence and separate from Le Droit Humain a split that was effected in April 1994. Because The American Federation was incorporated in the United States and was a legally independent corporate entity from Le Droit Humain, this transition was accomplished smoothly and the two organizations parted ways.<ref>{{Cite book|url=https://www.worldcat.org/oclc/871426072|title=On holy ground : history of the honorable order of American co-masonry|last=Kidd, Karen.|first=|date=2011|publisher=Masonic Publishing Company|year=|isbn=9781613640050|edition= 1st|location=[New York]|pages=333|oclc=871426072|url-status=live}}</ref>\n\n===American Co-Masonry 1995-2017===\n\nAfter the split, The American Federation of Le Droit Humain created its own Supreme Council headquartered in Larkspur, to replace the Supreme Council of Le Droit Humain.<ref>{{cite web |title=VORIOL vs. AMERICAN FEDERATION OF HUMAN RIGHTS |url=http://ca10.washburnlaw.edu/cases/2002/07/99-1581.htm }}</ref> Renaming itself American Co-Masonry the newly independent order also began establishing lodges outside the United States as an independent organization no longer bound by the system of national Federations that Le Droit Humain had used to organize its members. In 2010, the construction of a new Grand Temple was finished in Larkspur, Colorado, the headquarters of the newly formed international organization.<ref>{{Cite book|url=https://www.worldcat.org/oclc/871426072|title=On holy ground : history of the honorable order of American co-masonry|last=Kidd, Karen.|first=|date=2011|publisher=Masonic Publishing Company|year=|isbn=9781613640050|edition= 1st|location=[New York]|pages=340|oclc=871426072|url-status=live}}</ref>\n\n===Universal Co-Masonry 2017-Present===\n\nIn 2017, the Honorable Order of American Co-Masonry: American Federation of Human Rights changed its name to \"The Honorable Order of Universal Co-Masonry: United Federation of Lodges\" to better reflect the international character of the order.<ref>{{Cite web|url=https://www.sos.state.co.us/biz/TradeNameSummary.do?quitButtonDestination=BusinessEntityResults&nameTyp=TRDNM&masterFileId=20171771393&entityId2=20171771393&fileId=20171771393&srchTyp=TRDNM|title=Colorado Secretary of State - Trade Name|last=|first=|date=|website=|archive-url=|archive-date=|access-date=}}</ref><ref>{{Cite web|url=http://tsdr.uspto.gov/#caseNumber=87667881&caseType=SERIAL_NO&searchType=statusSearch|title=US Trademark Office - Universal Co-Masonry|last=|first=|date=|website=|archive-url=|archive-date=|access-date=}}</ref>\n\n== References ==\n<!-- Inline citations added to your article will automatically display here. See en.wikipedia.org/wiki/WP:REFB for instructions on how to add citations. -->\n{{reflist}}\n\n==External links==\n*[http://www.philosophicalsociety.org Masonic Philosophical Society]\n\n[[Category:Freemasonry in the United States]]\n[[Category:Co-Freemasonry]]\n[[Category:Organizations established in 1994]]\n[[Category:Douglas County, Colorado]]\n", "name_user": "Alistair1978", "label": "safe", "comment": "typo/fmt (viaWP:JWB)", "url_page": "//en.wikipedia.org/wiki/Universal_Co-Masonry"}
