{"title_page": "Kim Seon-dong (politician, born 1967)", "text_new": "{{Korean name}}{{Infobox officeholder\n| name                = Kim Seon-dong\n| nationality         = [[Demographics of South Korea|South Korean]]\n| image_size          = 180px\n| image               = KimSeonDong.jpg\n| module              = {{Infobox Korean name\n|hangul = {{linktext|\uae40|\uc120|\ub3d9}}\n|hanja  = {{linktext|\u91d1|\u5148|\u6771}}\n|rr     = Gim Seon-dong\n|mr     = Kim Sun-dong\n| koreanipa = gim seondo\u014b\n| child  = yes}}\n| otherparty          = [[People's United Party (South Korea)|People's United Party]] {{small| (2016-2017)}} <br>\n[[Independent politician|Independent]] {{small| (2014-2016)}}\n[[Unified Progressive Party]] {{small| (2011-2014)}}\n[[Democratic Labor Party (South Korea)|Democratic Labor Party]] {{small| (2011)}}\n| party               = [[Minjung Party]]\n| alma_mater          = [[Korea University]]\n| birth_place         = [[Goheung-gun]], [[South Jeolla Province]], [[Third Republic of Korea|South Korea]]\n| native_name         = {{nobold| \uae40\uc120\ub3d9}}\n| birth_date          = {{birth date and age|1967|9|9}}\n| constituency        = [[Suncheon]]\n| termend             = 12 June 2014\n| termstart           = 27 April 2011\n| office              = Member of the [[National Assembly of the Republic of Korea|National Assembly]]\n| native_name_lang    = ko\n| caption             = Photo of Kim at a rally\n| predecessor         = [[Suh Gab-won]]\n}}\n\n'''Kim Seon-dong''' ([[Korean language|Korean]]: \uae40\uc120\ub3d9; [[Hanja]]: \u91d1\u5148\u6771; [[Revised Romanization of Korean|RR]]: ''Gim Seondong''; born 9 September 1967) is a [[South Korea]]n politician. He was the [[presidential nominee]] of the [[People's United Party (South Korea)|People's United Party]] in the [[2017 South Korean presidential election]].\n\n== Early life and education ==\nKim was born on September 9, 1967 in [[Goheung County|Goheung-gun]], [[South Jeolla Province]], [[Third Republic of Korea|South Korea]]. He graduated from [[Korea University]].\n\n== Political career ==\n\n=== Representative of Suncheon (2011-2014) ===\nKim ran under the [[Democratic Labor Party (South Korea)|Democratic Labor Party]] and was elected as representative of [[Suncheon]] in 2011 during [[snap election]]s. He opposed the passing of the [[United States\u2013Korea Free Trade Agreement|United States-Korea Free Trade Agreement]] in 2011 and opened a can of tear gas in the [[National Assembly (South Korea)|National Assembly]] as a protest. As a result, he was removed from his position on June 12, 2014.<ref>{{Cite web|url=http://www.ohmynews.com/nws_web/view/at_pg.aspx?CNTN_CD=A0002002623|title='\uad6d\ud68c \ucd5c\ub8e8\ud0c4' \ud130\ub728\ub9b0 \ud1b5\uc9c4\ub2f9 \uae40\uc120\ub3d9 \uc758\uc6d0\uc9c1 \uc0c1\uc2e4|date=2014-06-12|website=\uc624\ub9c8\uc774\ub274\uc2a4|language=ko|access-date=2020-04-12}}</ref> He said he did not regret his actions.<ref>{{Cite web|url=https://news.chosun.com/site/data/html_dir/2011/11/25/2011112501494.html|title=\uae40\uc120\ub3d9 \"\ucd5c\ub8e8\ud0c4 \uc798\ubabb\ub410\ub2e4 \uc0dd\uac01 \uc548\ud574\"|date=2011-11-25|website=news.chosun.com|language=ko|access-date=2020-04-12}}</ref>\n\n=== Presidential Nominee of the People's United Party (2016) ===\nKim joined the [[People's United Party (South Korea)|People's United Party]] on March 20, 2016 along with Kim Jae-yeon; a fellow [[Progressivism|progressive]] politician.<ref>{{Cite web|url=https://namu.wiki/w/%EA%B9%80%EC%84%A0%EB%8F%99(1967)|title=\uae40\uc120\ub3d9(1967) - \ub098\ubb34\uc704\ud0a4|website=namu.wiki|access-date=2020-04-12}}</ref> He was the [[presidential nominee]] of the [[People's United Party (South Korea)|People's United Party]] for the [[2017 South Korean presidential election]]. He came in eighth place however, only receiving 0.08% of the vote.<ref>{{Cite web|url=http://www.tongilnews.com/news/articleView.html?idxno=120721|title=[19\ub300 \ub300\uc120] \uc870\uc6d0\uc9c4 0.13%, \uae40\uc120\ub3d9 0.08%, \uc774\uc7ac\uc624 0.02% - \ud1b5\uc77c\ub274\uc2a4|website=www.tongilnews.com|language=ko|access-date=2020-04-12}}</ref>\n\n=== 2020 South Korean legislative election ===\nHe announced that he will be running for representative of [[Suncheon]] in the upcoming [[2020 South Korean legislative election]].<ref>{{Cite web|url=http://www.nbn-news.co.kr/news/articleView.html?idxno=44842|title=\uae40\uc120\ub3d9 \uc804 \uad6d\ud68c\uc758\uc6d0, \ubbfc\uc911\ub2f9 \uc21c\ucc9c \ucd9c\ub9c8 \ud6c4\ubcf4 \ud655\uc815|date=2020-02-06|website=\ub0a8\ub3c4\ubc29\uc1a1|language=ko|access-date=2020-04-12}}</ref><ref>{{Cite web|url=http://www.gwangjuin.com/news/articleView.html?idxno=207971|title=\uae40\uc120\ub3d9 \ubbfc\uc911\ub2f9 \uc804 \uc758\uc6d0, \ub0b4\ub144 \ucd1d\uc120 \uc21c\ucc9c \ucd9c\ub9c8\uc120\uc5b8 \uae30|date=2019-12-18|website=\uad11\uc8fcin|language=ko|access-date=2020-04-12}}</ref>\n\n== References ==\n{{Reflist}}\n\n[[Category:1967 births]]\n[[Category:Living people]]\n", "text_old": "{{Korean name}}{{Infobox officeholder\n| name                = Kim Seon-dong\n| nationality         = [[Demographics of South Korea|South Korean]]\n| image_size          = 180px\n| image               = KimSeonDong.jpg\n| module              = {{Infobox Korean name\n|hangul = {{linktext|\uae40|\uc120|\ub3d9}}\n|hanja  = {{linktext|\u91d1|\u5148|\u6771}}\n|rr     = Gim Seon-dong\n|mr     = Kim Sun-dong\n| koreanipa = gim seondo\u014b\n| child  = yes}}\n| otherparty          = [[People's United Party (South Korea)| People's United Party]] {{small| (2016-2017)}} <br>\n[[Independent politician| Independent]] {{small| (2014-2016)}}\n[[Unified Progressive Party]] {{small| (2011-2014)}}\n[[Democratic Labor Party (South Korea)| Democratic Labor Party]] {{small| (2011)}}\n| party               = [[Minjung Party]]\n| alma_mater          = [[Korea University]]\n| birth_place         = [[Goheung-gun]], [[South Jeolla Province]], [[Third Republic of Korea| South Korea]]\n| native_name         = {{nobold| \uae40\uc120\ub3d9}}\n| birth_date          = {{birth date and age|1967|9|9}}\n| constituency        = [[Suncheon]]\n| termend             = 12 June 2014\n| termstart           = 27 April 2011\n| office              = Member of the [[National Assembly of the Republic of Korea| National Assembly]]\n| native_name_lang    = ko\n| caption             = Photo of Kim at a rally\n| predecessor         = [[Suh Gab-won]]\n}}\n\n'''Kim Seon-dong''' ([[Korean language|Korean]]: \uae40\uc120\ub3d9; [[Hanja]]: \u91d1\u5148\u6771; [[Revised Romanization of Korean|RR]]: ''Gim Seondong''; born 9 September 1967) is a [[South Korea|South Korean]] politician. He was the [[presidential nominee]] of the [[People's United Party (South Korea)|People's United Party]] in the [[2017 South Korean presidential election]]. \n\n== Early life and education ==\nKim was born on September 9, 1967 in [[Goheung County|Goheung-gun]], [[South Jeolla Province]], [[Third Republic of Korea|South Korea]]. He graduated from [[Korea University]].\n\n== Political Career ==\n\n=== Representative of Suncheon (2011-2014) ===\nKim ran under the [[Democratic Labor Party (South Korea)|Democratic Labor Party]] and was elected as representative of [[Suncheon]] in 2011 during [[Snap election|snap elections]]. He opposed the passing of the [[United States\u2013Korea Free Trade Agreement|United States-Korea Free Trade Agreement]] in 2011 and opened a can of tear gas in the [[National Assembly (South Korea)|National Assembly]] as a protest. As a result, he was removed from his position on June 12, 2014<ref>{{Cite web|url=http://www.ohmynews.com/nws_web/view/at_pg.aspx?CNTN_CD=A0002002623|title='\uad6d\ud68c \ucd5c\ub8e8\ud0c4' \ud130\ub728\ub9b0 \ud1b5\uc9c4\ub2f9 \uae40\uc120\ub3d9 \uc758\uc6d0\uc9c1 \uc0c1\uc2e4|date=2014-06-12|website=\uc624\ub9c8\uc774\ub274\uc2a4|language=ko|access-date=2020-04-12}}</ref>. He said he did not regret his actions<ref>{{Cite web|url=https://news.chosun.com/site/data/html_dir/2011/11/25/2011112501494.html|title=\uae40\uc120\ub3d9 \"\ucd5c\ub8e8\ud0c4 \uc798\ubabb\ub410\ub2e4 \uc0dd\uac01 \uc548\ud574\"|date=2011-11-25|website=news.chosun.com|language=ko|access-date=2020-04-12}}</ref>.\n\n=== Presidential Nominee of the People's United Party (2016) ===\nKim joined the [[People's United Party (South Korea)|People's United Party]] on March 20, 2016 along with Kim Jae-yeon; a fellow [[Progressivism|progressive]] politician<ref>{{Cite web|url=https://namu.wiki/w/%EA%B9%80%EC%84%A0%EB%8F%99(1967)|title=\uae40\uc120\ub3d9(1967) - \ub098\ubb34\uc704\ud0a4|website=namu.wiki|access-date=2020-04-12}}</ref>. He was the [[presidential nominee]] of the [[People's United Party (South Korea)|People's United Party]] for the [[2017 South Korean presidential election]]. He came in eighth place however, only receiving 0.08% of the vote<ref>{{Cite web|url=http://www.tongilnews.com/news/articleView.html?idxno=120721|title=[19\ub300 \ub300\uc120] \uc870\uc6d0\uc9c4 0.13%, \uae40\uc120\ub3d9 0.08%, \uc774\uc7ac\uc624 0.02% - \ud1b5\uc77c\ub274\uc2a4|website=www.tongilnews.com|language=ko|access-date=2020-04-12}}</ref>. \n\n=== 2020 South Korean legislative election ===\nHe announced that he will be running for representative of [[Suncheon]] in the upcoming [[2020 South Korean legislative election]]<ref>{{Cite web|url=http://www.nbn-news.co.kr/news/articleView.html?idxno=44842|title=\uae40\uc120\ub3d9 \uc804 \uad6d\ud68c\uc758\uc6d0, \ubbfc\uc911\ub2f9 \uc21c\ucc9c \ucd9c\ub9c8 \ud6c4\ubcf4 \ud655\uc815|date=2020-02-06|website=\ub0a8\ub3c4\ubc29\uc1a1|language=ko|access-date=2020-04-12}}</ref><ref>{{Cite web|url=http://www.gwangjuin.com/news/articleView.html?idxno=207971|title=\uae40\uc120\ub3d9 \ubbfc\uc911\ub2f9 \uc804 \uc758\uc6d0, \ub0b4\ub144 \ucd1d\uc120 \uc21c\ucc9c \ucd9c\ub9c8\uc120\uc5b8 \uae30|date=2019-12-18|website=\uad11\uc8fcin|language=ko|access-date=2020-04-12}}</ref>.\n\n== References ==\n", "name_user": "G\u00fcnniX", "label": "safe", "comment": "Reflist", "url_page": "//en.wikipedia.org/wiki/Kim_Seon-dong_(politician,_born_1967)"}
{"title_page": "Ibrahimwal Taraf Gulam Nabi Khan", "text_new": "{{Orphan|date=February 2019}}\n\n{{Use dmy dates|date=April 2018}}\n{{Use Indian English|date=April 2018}}\n{{Infobox settlement\n| name                    = Ibrahimwal Taraf Gulam Nabi Khan\n| native_name             = \n| native_name_lang        = \n| settlement_type         = Village\n| pushpin_map             = India Punjab#India\n| pushpin_label_position  = \n| pushpin_map_alt         = \n| pushpin_map_caption     = Location in Punjab, India\n| coordinates             = {{coord|31.5741|N|75.4351|E|display=inline,title}}\n| subdivision_type        = Country\n| subdivision_name        = [[India]]\n| subdivision_type1       = [[States and territories of India|State]]\n| subdivision_name1       = [[Punjab, India|Punjab]]\n| subdivision_type2       = [[List of districts of India|District]]\n| subdivision_name2       = [[Kapurthala district|Kapurthala]]\n| subdivision_type3       = Tehsil\n| subdivision_name3       = [[Bhulath]]\n| subdivision_type4       = Region\n| subdivision_name4       = [[Majha]]\n| government_type         = [[Panchayati raj (India)|Panchayat raj]]\n| governing_body          = [[Gram panchayat]]\n| unit_pref               = Metric\n<!-- ALL fields with measurements have automatic unit conversion -->\n<!-- for references: use <ref>tags -->\n| elevation_m             = \n| population_as_of        = 2011\n| population_blank2_title = Total Households\n| population_blank2      = 4\n| population_footnotes    =\n| population_total        = 16<br/><small>10/6 [[male|\u2642]]/[[female|\u2640]]</small>\n| population_density_km2  = \n| population_note         = \n| population_demonym      = \n| demographics_type1      = Languages\n| demographics1_title1    = Official\n| demographics1_info1     = [[Punjabi language|Punjabi]]\n| demographics1_title2    = \n| demographics1_info2     = \n| timezone1               = [[Indian Standard Time|IST]]\n| utc_offset1             = +5:30\n| postal_code_type        = \n| postal_code             = \n| area_total_ha           = 270\n| area_code_type          = Telephone\n| area_code               = \n| registration_plate      = \n| iso_code                = IN-PB\n| blank1_name_sec2        = \n| blank1_info_sec2        = \n| website                 = {{URL|kapurthala.gov.in}}\n| footnotes               =\n}}\n'''Ibrahimwal Taraf Gulam Nabi Khan''' is a village in [[Bhulath]] in [[Kapurthala district]] of [[Punjab, India|Punjab]] [[States and territories of India|State]], India. It is located {{convert|6|km}} from sub district headquarter and {{convert|26|km}} from district headquarter. The village is [[Administration (government)|administrated]] by [[Sarpanch]] an elected representative of the village.\n\n== Demography ==\n{{as of|2011}}, The village has a total number of 4 houses and the population of 16 of which 10 are males while 6 are females.<ref name=census>{{cite web|url=https://www.censusindia.gov.in/2011census/dchb/DCHB_Village_Release_0300.xlsx|title=DCHB Village Release|work=[[Census of India, 2011]]}}</ref> According to the report [[published]] by [[Census India]] in 2011, the village does not have any [[Scheduled Castes and Scheduled Tribes|Schedule Caste]] or [[Scheduled Castes and Scheduled Tribes|Schedule Tribe]] population so far.<ref name=census /><ref>{{cite web|last1=ORGI|accessdate=2018-04-19|title=Census of India: Search Details|url=https://www.censusindia.gov.in/pca/SearchDetails.aspx?Id=31742|website=www.censusindia.gov.in}}</ref>\n\n==See also==\n*[[List of villages in India]]\n\n== References ==\n{{reflist}}\n\n== External links ==\n* [https://web.archive.org/web/20180608165116/http://punjabtourism.gov.in/ Tourism of Punjab]\n* [https://web.archive.org/web/20180804201629/http://punjabcensus.gov.in/ Census of Punjab]\n{{Kapurthala district}}\n\n[[Category:Villages in Kapurthala district]]\n\n\n{{Kapurthala-geo-stub}}\n", "text_old": "{{Orphan|date=February 2019}}\n\n{{Use dmy dates|date=April 2018}}\n{{Use Indian English|date=April 2018}}\n{{Infobox settlement\n| name                    = Ibrahimwal Taraf Gulam Nabi Khan\n| native_name             = \n| native_name_lang        = \n| settlement_type         = Village\n| pushpin_map             = India Punjab#India\n| pushpin_label_position  = \n| pushpin_map_alt         = \n| pushpin_map_caption     = Location in Punjab, India\n| coordinates             = {{coord|31.5741|N|75.4351|E|display=inline,title}}\n| subdivision_type        = Country\n| subdivision_name        = [[India]]\n| subdivision_type1       = [[States and territories of India|State]]\n| subdivision_name1       = [[Punjab, India|Punjab]]\n| subdivision_type2       = [[List of districts of India|District]]\n| subdivision_name2       = [[Kapurthala district|Kapurthala]]\n| subdivision_type3       = Tehsil\n| subdivision_name3       = [[Bhulath]]\n| subdivision_type4       = Region\n| subdivision_name4       = [[Majha]]\n| government_type         = [[Panchayati raj (India)|Panchayat raj]]\n| governing_body          = [[Gram panchayat]]\n| unit_pref               = Metric\n<!-- ALL fields with measurements have automatic unit conversion -->\n<!-- for references: use <ref>tags -->\n| elevation_m             = \n| population_as_of        = 2011\n| population_blank2_title = Total Households\n| population_blank2      = 4\n| population_footnotes    =\n| population_total        = 16<br/><small>10/6 [[male|\u2642]]/[[female|\u2640]]</small>\n| population_density_km2  = \n| population_note         = \n| population_demonym      = \n| demographics_type1      = Languages\n| demographics1_title1    = Official\n| demographics1_info1     = [[Punjabi language|Punjabi]]\n| demographics1_title2    = \n| demographics1_info2     = \n| timezone1               = [[Indian Standard Time|IST]]\n| utc_offset1             = +5:30\n| postal_code_type        = \n| postal_code             = \n| area_total_ha           = 270\n| area_code_type          = Telephone\n| area_code               = \n| registration_plate      = \n| iso_code                = IN-PB\n| blank1_name_sec2        = \n| blank1_info_sec2        = \n| website                 = {{URL|kapurthala.gov.in}}\n| footnotes               =\n}}\n'''Ibrahimwal Taraf Gulam Nabi Khan''' is a village in [[Bhulath]] in [[Kapurthala district]] of [[Punjab, India|Punjab]] [[States and territories of India|State]], India. It is located {{convert|6|km}} from sub district headquarter and {{convert|26|km}} from district headquarter. The village is [[Administration (government)|administrated]] by [[Sarpanch]] an elected representative of the village.\n\n== Demography ==\n{{as of|2011}}, The village has a total number of 4 houses and the population of 16 of which 10 are males while 6 are females.<ref name=census>{{cite web|url=https://www.censusindia.gov.in/2011census/dchb/DCHB_Village_Release_0300.xlsx|title=DCHB Village Release|work=[[Census of India, 2011]]}}</ref> According to the report [[published]] by [[Census India]] in 2011, the village does not have any [[Scheduled Castes and Scheduled Tribes|Schedule Caste]] or [[Scheduled Castes and Scheduled Tribes|Schedule Tribe]] population so far.<ref name=census /><ref>{{cite web|last1=ORGI|accessdate=2018-04-19|title=Census of India: Search Details|url=https://www.censusindia.gov.in/pca/SearchDetails.aspx?Id=31742|website=www.censusindia.gov.in}}</ref>\n\n==See also==\n*[[List of villages in India]]\n\n== References ==\n{{reflist}}\n\n== External links ==\n* [https://web.archive.org/web/20180608165116/http://punjabtourism.gov.in/ Tourism of Punjab]\n* [https://web.archive.org/web/20180804201629/http://punjabcensus.gov.in/ Census of Punjab]\n{{Kapurthala district}}\n\n[[Category:Villages in Kapurthala district]]\n\n\n{{PunjabIN-geo-stub}}\n", "name_user": "SDZeroBot", "label": "safe", "comment": "Stub sorting: replacing PunjabIN-geo-stub with Kapurthala-geo-stub", "url_page": "//en.wikipedia.org/wiki/Ibrahimwal_Taraf_Gulam_Nabi_Khan"}
{"title_page": "Swedish language", "text_new": "{{short description|Scandinavia language spoken in Sweden and Finland}}\n{{Use dmy dates|date=June 2011}}\n{{Infobox language\n| name = Swedish\n| nativename = ''svenska''\n| pronunciation = {{IPA-sv|\u02c8sv\u025b\u0302n\u02d0ska|}}\n| states = [[Sweden]], [[Finland]], [[Estonia]]\n| region = \n| ethnicity = [[Swedes]]\n| speakers = {{sigfig|10|2}} million<br/>[[Second language|L2 speakers]]: 3.2 million\n| date = 2018\n| ref = <ref name=ethnologue>[https://www.ethnologue.com/language/swe Ethnologue 21st Edition], retrieved 21 February 2018</ref>\n| familycolor = Indo-European\n| fam2 = [[Scandinavian languages|Scandinavian]]\n| fam3 = [[North Scandinavian languages|North Scandinavian]]\n| fam4 = East Scandinavian\n| ancestor = [[Old Norse language|Old Norse]]\n| ancestor2 = [[Old East Norse]]\n| ancestor3 = [[Old Swedish]]\n| script = [[Latin script|Latin]] ([[Swedish alphabet]])<br/>[[Swedish Braille]]\n| nation = {{SWE|Sweden}}<br />{{FIN|Finland}}<br />{{flag|\u00c5land Islands}}<br/>''{{EU|European Union}}''<br />''{{flag|Nordic Council}}''<!--Do add Estonia here without first reading the talkpage.-->\n| agency = [[Swedish Language Council]] (in Sweden) <br />[[Swedish Academy]] (in Sweden)<br/>[[Institute for the Languages of Finland]] (in Finland)\n| iso1 = sv\n| iso2 = swe\n| iso3 = swe\n| lingua = 52-AAA-ck to -cw\n| map = Distribution-sv.png\n| mapcaption = Major Swedish-speaking areas\n| notice = IPA\n| sign = [[Swedish Sign Language]]<br>[[Tecknad svenska]] (falling out of use)\n| ancestor4 = [[Modern Swedish]]\n| glotto = swed1254\n| glottorefname = Swedish\n}}\n\n'''Swedish''' ({{lang|sv|svenska}} {{IPA-sv|\u02c8sv\u025b\u0302n\u02d0ska||Sv-svenska.ogg}}) is a [[North Scandinavian language]] spoken [[First language|natively]] by 10 million people, predominantly in [[Sweden]] (as the sole official language) and in parts of [[Finland]], where it has equal legal standing with [[Finnish language|Finnish]]. It is largely [[mutually intelligible]] with [[Norwegian language|Norwegian]] and [[Danish language|Danish]], although the degree of mutual intelligibility is largely dependent on the [[dialect]] and accent of the speaker. Written Norwegian and Danish are usually more easily understood by Swedish speakers than the spoken languages, due to the differences in [[Tone (linguistics)|tone]], accent and intonation. Swedish is a descendant of [[Old Norse]], the common language of the [[Scandinavian peoples]] living in Scandinavia during the [[Viking Era]]. It has the most speakers of the North Germanic languages.\n\n[[Standard Swedish]], spoken by most [[Swedes]], is the [[national language]] that evolved from the Central Swedish dialects in the 19th century and was well established by the beginning of the 20th century. While distinct regional [[Variety (linguistics)|varieties]] descending from the older rural dialects still exist, the spoken and written language is uniform and [[Standard language|standardized]].\n\nThe standard word order is, as in most [[Scandinavian]], [[V2 word order|V2]], which means that the [[finite verb]] (V) appears in the second position (2) of a declarative [[main clause]]. [[Swedish morphology]] is similar to English; that is, words have comparatively few [[inflections]]. Swedish has two [[grammatical gender|genders]] and is generally seen to have two [[grammatical cases]] \u2013 [[nominative]] and [[genitive]] (except for pronouns that, as in English, also are inflected in the [[Object (grammar)|object]] form) \u2013 although it is debated if the genitive in Swedish should be seen as a genitive case or just the nominative plus the so-called genitive ''s'', then seen as a [[clitic]]. Swedish has two [[Grammatical number|grammatical numbers]] \u2013 [[plural]] and [[Grammatical number|singular]]. [[Adjectives]] have discrete [[Comparison (grammar)|comparative and superlative]] forms and are also inflected according to gender, number and [[definiteness]]. The definiteness of nouns is marked primarily through [[suffixes]] (endings), complemented with separate definite and indefinite [[article (grammar)|articles]]. The [[prosody (linguistics)|prosody]] features both [[stress (linguistics)|stress]] and in most dialects tonal qualities. The language has a comparatively large [[vowel]] inventory. Swedish is also notable for the [[voiceless dorso-palatal velar fricative]], a highly variable consonant [[phoneme]].\n\nSwedish has also had historic use in [[Estonia]], although the current status of the [[Estonian Swedish]] speakers is almost extinct. Instead, it is used in the [[Swedish diaspora]], most notably in [[Oslo]], [[Norway]], with more than 50,000 resident Swedes.<ref>{{cite web|url=https://sverige-norge.se/var-tionde-oslobo-ar-nu-svensk/|title=Var tionde Oslobo \u00e4r nu svensk|publisher=Sverige-Norge Personalf\u00f6rmedling|language=sv|accessdate=11 October 2018}}</ref>\n\n==Classification==\nSwedish is an [[Indo-European language]] belonging to the [[Scandinavian languages|North Scandinavian]] branch of the [[Scandinavian languages]]. In the established classification, it belongs to the [[East Scandinavian languages]], together with [[Danish language|Danish]], separating it from the [[West Scandinavian languages]], consisting of [[Faroese language|Faroese]], [[Icelandic language|Icelandic]], and [[Norwegian language|Norwegian]]. However, more recent analyses divide the North Scandinavian languages into two groups: ''Insular Scandinavian'' (Faroese and Icelandic), and ''Continental Scandinavian'' (Danish, Norwegian, and Swedish), based on mutual intelligibility due to heavy influence of East Scandinavian (particularly Danish) on Norwegian during the last millennium and divergence from both Faroese and Icelandic.<ref name=\"crystal\"/>\n\nBy many general criteria of mutual intelligibility, the Continental Scandinavian languages could very well be considered [[dialect]]s of a common Scandinavian language. However, because of several hundred years of sometimes quite intense rivalry between [[Denmark]] and Sweden, including a long series of wars from the 16th to 18th centuries, and the [[nationalist]] ideas that emerged during the late 19th and early 20th centuries, the languages have separate [[Orthography|orthographies]], dictionaries, grammars, and regulatory bodies. Danish, Norwegian, and Swedish are thus from a linguistic perspective more accurately described as a [[dialect continuum]] of Scandinavian (North Scandinavian\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n), and some of the dialects, such as those on the border between Norway and Sweden, especially parts of [[Bohusl\u00e4n]], [[Dalsland]], western [[V\u00e4rmland]], western [[Dalarna]], [[H\u00e4rjedalen]], [[J\u00e4mtland]], and [[Scania]], could be described as intermediate dialects of the national standard languages.<ref name=\"crystal\">{{Harvnb|Crystal|1999|loc=''Scandinavian''}}</ref>\n\nSwedish pronunciations also vary greatly from one region to another, a legacy of the vast geographic distances and historical isolation. Even so, the vocabulary is standardized to a level that make dialects within Sweden virtually fully mutually intelligible.\n\n==History==\n{{Main|History of Swedish}}\n\n===Old Norse===\n{{Main|Old Norse}}\n{{Old Norse language map}}\nIn the 8th century, the common Germanic language of Scandinavia, [[Proto-Norse language|Proto-Norse]], evolved into Old Norse. This language underwent more changes that did not spread to all of Scandinavia, which resulted in the appearance of two similar dialects: ''Old West Norse'' (Norway, the Faroe Islands and Iceland) and ''Old East Norse'' (Denmark and Sweden). The dialects of Old East Norse spoken in Sweden are called ''[[Runic Swedish]]'', while the dialects of Denmark are referred to as ''Runic Danish''. The dialects are described as \"runic\" because the main body of text appears in the [[runic alphabet]]. Unlike Proto-Norse, which was written with the [[Elder Futhark]] alphabet, Old Norse was written with the [[Younger Futhark]] alphabet, which had only 16 letters. Because the number of runes was limited, some runes were used for a range of [[phoneme]]s, such as the rune for the vowel ''u'', which was also used for the vowels ''o'', ''\u00f8'' and ''y'', and the rune for ''i'', also used for ''e''.<ref name=Edlund2010p26-31>Lars-Erik Edlund, \"Spr\u00e5khistorisk \u00f6versikt\" in {{harvnb|Dahl|Edlund|2010|pp=26\u201331}}</ref>\n\nFrom 1200 onwards, the dialects in Denmark began to diverge from those of Sweden. The innovations spread unevenly from Denmark which created a series of minor dialectal boundaries, or [[isogloss]]es, ranging from [[Zealand (Denmark)|Zealand]] in the south to [[Norrland]], [[Ostrobothnia (historical province)|\u00d6sterbotten]] and northwestern [[Finland]] in the north.<ref name=Edlund2010p26-31/>\n\nAn early change that separated Runic Danish from the other dialects of Old East Norse was the change of the [[diphthong]] ''\u00e6i'' to the [[monophthong]] ''\u00e9'', as in ''st\u00e6inn'' to ''st\u00e9nn'' \"stone\". This is reflected in runic inscriptions where the older read ''stain'' and the later ''stin''. There was also a change of ''au'' as in ''dau\u00f0r'' into a long open ''\u00f8'' as in ''d\u00f8\u00f0r'' \"dead\". This change is shown in runic inscriptions as a change from ''tau\u00fer'' into ''tu\u00fer''. Moreover, the ''\u00f8y'' diphthong changed into a long, [[close vowel|close]] ''\u00f8'', as in the Old Norse word for \"island\". By the end of the period, these innovations had affected most of the Runic Swedish-speaking area as well, with the exception of the dialects spoken north and east of [[M\u00e4lardalen]] where the diphthongs still exist in remote areas.<ref>{{Harvnb|Bergman|1984|pp=21\u201323}}</ref>\n\n===Old Swedish===\n[[File:V\u00e4stg\u00f6talagen blad 21.jpg|thumb|right|The initial page of the first complete copy of ''[[V\u00e4stg\u00f6talagen]]'', the [[code of law|law code]] of [[V\u00e4sterg\u00f6tland]], from {{circa|1280}}. It is one of the earliest texts in Swedish written in the [[Latin script]].]]\n{{Main|Old Swedish}}\nOld Swedish (Swedish: ''fornsvenska'') is the term used for the [[medieval]] Swedish language. The start date is usually set to 1225 since this is the year that ''[[V\u00e4stg\u00f6talagen]]'' (\"the V\u00e4stg\u00f6ta Law\") is believed to have been compiled for the first time.<ref>The oldest dated fragments are from 1250 and the oldest complete manuscript is from c. 1280</ref> It is among the most important documents of the period written in [[Latin script]] and the oldest Swedish [[code of law|law codes]]. Old Swedish is divided into ''\u00e4ldre fornsvenska'' (1225\u20131375) and ''yngre fornsvenska'' (1375\u20131526), \"older\" and \"younger\" Old Swedish.<ref>Lars-Erik Edlund, \"Spr\u00e5khistorisk \u00f6versikt\" in {{harvnb|Dahl|Edlund|2010|pp=28\u201329}}</ref> Important outside influences during this time came with the firm establishment of the [[Roman Catholic Church|Christian church]] and various [[Monasticism|monastic]] orders, introducing many [[Greek language|Greek]] and [[Latin]] loanwords. With the rise of [[Hanseatic league|Hanseatic]] power in the late 13th and early 14th century, [[Middle Low German]] became very influential. The Hanseatic league provided Swedish commerce and administration with a large number of [[Low German]]-speaking immigrants. Many became quite influential members of Swedish medieval society, and brought terms from their native languages into the vocabulary. Besides a great number of loanwords for such areas as warfare, trade and administration, general grammatical suffixes and even conjunctions were imported. The League also brought a certain measure of influence from [[Danish language|Danish]] (at the time much more similar than today's language).<ref name=Edlund2010p29,31>Lars-Erik Edlund, \"Spr\u00e5khistorisk \u00f6versikt\" in {{harvnb|Dahl|Edlund|2010|pp=29, 31}}</ref>\n\nEarly Old Swedish was markedly different from the modern language in that it had a more complex [[case (linguistics)|case]] structure and also retained the original Germanic three-[[gender (grammar)|gender]] system. [[Noun]]s, [[adjective]]s, [[pronoun]]s and certain [[Grammatical number|numerals]] were inflected in four cases; besides the extant [[Nominative case|nominative]], there were also the [[Genitive case|genitive]] (later [[possessive case|possessive]]), [[Dative case|dative]] and [[Accusative case|accusative]]. The gender system resembled that of modern [[German language|German]], having masculine, feminine and neuter genders. The masculine and feminine genders were later merged into a ''common gender'' with the [[Definiteness|definite suffix]] ''-en'' and the [[definite article]] ''den'', in contrast with the neuter gender equivalents ''-et'' and ''det''. The verb system was also more complex: it included [[subjunctive]] and [[Imperative mood|imperative]] [[mood (grammar)|moods]] and verbs were conjugated according to [[person (grammar)|person]] as well as [[number (grammar)|number]]. By the 16th century, the case and gender systems of the colloquial spoken language and the profane literature had been largely reduced to the two cases and two genders of modern Swedish.<ref>{{Harvnb|Pettersson|1996|pp=150\u2013157}}</ref>\n\nA transitional change of the Latin script in the Nordic countries was to spell the letter combination \"ae\" as \u00e6 \u2013 and sometimes as a' \u2013 though it varied between persons and regions. The combination \"ao\" was similarly rendered a<sup>o</sup>, and \"oe\" became o<sup>e</sup>. These three were later to evolve into the separate letters [[\u00e4]], [[\u00e5]] and [[\u00f6]].<ref>{{Harvnb|Pettersson|1996|p=139}}</ref> The first time the new letters were used in print was in ''Aff dy\u00e4ffwlsens fr\u00e4stilse'' (\"By the Devil's temptation\") published by [[Johan Gerson]] in 1495.<ref>Lars-Erik Edlund, \"Spr\u00e5khistorisk \u00f6versikt\" in {{harvnb|Dahl|Edlund|2010|p=29}}</ref>\n\n===Modern Swedish===\n{{Main|Modern Swedish}}\n[[File:Gustav Vasa Bible 1541.jpg|thumb|upright|Front page of [[Gustav Vasa]]'s Bible from 1541, using [[Fraktur (script)|Fraktur]]. The title translated to English reads: \"The Bible / That is / The Holy Scripture / in Swedish. Printed in [[Uppsala]]. 1541\".]]\n\nModern Swedish (Swedish: ''nysvenska'') begins with the advent of the [[printing press]] and the European [[Protestant Reformation|Reformation]]. After assuming power, the new monarch [[Gustav Vasa]] ordered a Swedish translation of the [[Bible]]. The [[New Testament]] was published in 1526, followed by a full [[Bible translation]] in 1541, usually referred to as the ''[[Gustav Vasa Bible]]'', a translation deemed so successful and influential that, with revisions incorporated in successive editions, it remained the most common Bible translation until 1917. The main translators were [[Laurentius Andre\u00e6]] and the brothers [[Laurentius Petri|Laurentius]] and [[Olaus Petri]].<ref>Lars-Erik Edlund, \"Spr\u00e5khistorisk \u00f6versikt\" in {{harvnb|Dahl|Edlund|2010|p=33}}</ref>\n\nThe Vasa Bible is often considered to be a reasonable compromise between old and new; while not adhering to the colloquial spoken language of its day, it was not overly conservative in its use of archaic forms.<ref>{{Harvnb|Pettersson|1996|p=151}}</ref> It was a major step towards a more consistent [[Swedish orthography]]. It established the use of the vowels \"\u00e5\", \"\u00e4\", and \"\u00f6\", and the spelling \"ck\" in place of \"kk\", distinguishing it clearly from the Danish Bible, perhaps intentionally, given the ongoing rivalry between the countries. All three translators came from central Sweden which is generally seen as adding specific Central Swedish features to the new Bible.<ref>{{cite book |title=The Nordic Languages |url=https://books.google.com/books?id=Z17C7s3r_nwC&pg=PA1900 |year=2005 |publisher=Walter de Gruyter |isbn=978-3-11-019706-8 |page=1900}}</ref>\n\nThough it might seem as if the Bible translation set a very powerful precedent for orthographic standards, spelling actually became more inconsistent during the remainder of the century. It was not until the 17th century that spelling began to be discussed, around the time when the first grammars were written.<ref name=\"Gr\u00fcnbaum2012\">{{cite web |author=Gr\u00fcnbaun, Katharina |url=http://www.sweden.se/upload/Sweden_se/otherlanguages/factsheets/SI/Svenska_spraket.pdf |title=Svenska spr\u00e5ket |trans-title=The Swedish language |date=2012 |publisher=Svenska institutet |language=Swedish |url-status=dead |archive-url=https://web.archive.org/web/20121025181238/http://www.sweden.se/upload/Sweden_se/otherlanguages/factsheets/SI/Svenska_spraket.pdf |archive-date=25 October 2012 |df=dmy-all }}</ref> [[Capitalization]] during this time was not standardized. It depended on the authors and their background. Those influenced by [[German language|German]] capitalized all nouns, while others capitalized more sparsely. It is also not always apparent which letters are capitalized owing to the Gothic or [[blackletter]] typeface which was used to print the Bible. This typeface was in use until the mid-18th century, when it was gradually replaced with a Latin typeface (often [[Antiqua (typeface class)|antiqua]]).<ref>{{cite book |last1=Bandle |first1=Oskar |last2=Elmevik |first2=Lennart |last3=Widmark |first3=Gun |title=The Nordic Languages |url=https://books.google.com/books?id=RqkBXIJkkuEC&pg=PA517 |year=2002 |publisher=Walter de Gruyter |isbn=978-3-11-014876-3 |page=517}}</ref>\n\nSome important changes in sound during the Modern Swedish period were the gradual assimilation of several different consonant clusters into the [[voiceless alveolar fricative|fricative]] {{IPA|[\u0283]}} and later into {{IPA|[\u0267]}}. There was also the gradual softening of {{IPA|[\u0261]}} and {{IPA|[k]}} into {{IPA|[j]}} and the [[voiceless alveolopalatal fricative|fricative]] {{IPA|[\u0255]}} before [[front vowel]]s. The [[voiced velar fricative|velar fricative]] {{IPA|[\u0263]}} was also transformed into the corresponding [[voiced velar plosive|plosive]] {{IPA|[\u0261]}}.<ref>{{Harvnb|Pettersson|1996|p=138}}</ref>\n\n[[File:August Strindberg.jpg|upright=0.8|thumb|[[August Strindberg]], one of the most influential writers in modern Swedish literature.]]\n\n===Contemporary Swedish===\n[[File:Dem-dom.jpg|thumb|right|A sign on the wall of a Swedish hotel, using both the recommended<ref>{{cite book |last1=Svanlund |first1=Jan (Ed.) |title=Spr\u00e5kriktighetsboken |date=2013 |publisher=Svenska spr\u00e5kn\u00e4mnden and Norstedts |isbn=978-91-1-304370-8 |pages=210-211 |edition=2}}</ref> ''dem'' and the colloquial ''dom'' for the word \"them\" on the same sign.]]\nThe period that includes Swedish as it is spoken today is termed ''nusvenska'' (lit., \"Now-Swedish\") in linguistics, and started in the last decades of the 19th century. It saw a democratization of the language with a less formal written form that approached the spoken one. The growth of a public school system also led to the evolution of so-called ''boksvenska'' (literally, \"book Swedish\"), especially among the working classes, where spelling to some extent influenced pronunciation, particularly in official contexts. With the industrialization and urbanization of Sweden well under way by the last decades of the 19th century, a new breed of authors made their mark on [[Swedish literature]]. Many scholars, politicians and other public figures had a great influence on the emerging national language, among them prolific authors like the poet [[Gustaf Fr\u00f6ding]], Nobel laureate [[Selma Lagerl\u00f6f]], and radical writer and playwright [[August Strindberg]].<ref>{{Harvnb|Josephson|2005|loc=chapter 2}}</ref>\n\nIt was during the 20th century that a common, standardized national language became available to all Swedes. The orthography finally stabilized and became almost completely uniform, with some minor deviations, by the time of the spelling reform of 1906.<ref>{{cite book |title=Sociolinguistics |url=https://books.google.com/books?id=MGl35Q3W5twC&pg=PA1751 |year=2006 |publisher=Walter de Gruyter |isbn=978-3-11-019987-1 |page=1751}}</ref> With the exception of plural forms of verbs and a slightly different syntax, particularly in the written language, the language was the same as the Swedish of today. The plural verb forms appeared decreasingly in formal writing into the 1950s, when their use was removed from all official recommendations.<ref>{{cite book|last1=Taavitsainen |first1=Irma |last2=Melchers |first2=Gunnel |last3=Pahta |first3=P\u00e4ivi |title=Writing in Nonstandard English |url=https://books.google.com/books?id=5cQ9AAAAQBAJ&pg=PA302|year=2000 |publisher=John Benjamins Publishing |isbn=978-90-272-9903-1 |page=302}}</ref><ref>{{cite book|last1=Bandle|first1=Oskar |last2=Braunmuller|first2=Kurt |last3=Jahr|first3=Ernst Hakon|title=The Nordic Languages|url=https://books.google.com/books?id=6b7WwBC5tRAC&pg=PA1805|year=2005|publisher=Walter de Gruyter |isbn=978-3-11-017149-5|page=1805}}</ref>\n\nA very significant change in Swedish occurred in the late 1960s, with the so-called ''[[du-reformen]]'', \"the you-reform\". Previously, the proper way to address people of the same or higher social status had been by title and surname. The use of  ''herr'' (\"Mr\" or \"Sir\"), ''fru'' (\"Mrs\" or \"Ma'am\") or ''fr\u00f6ken'' (\"Miss\") was considered the only acceptable way to begin conversation with strangers of unknown occupation, academic title or military rank. The fact that the listener should preferably be referred to in the third person tended to further complicate spoken communication between members of society. In the early 20th century, an unsuccessful attempt was made to replace the insistence on titles with ''ni''\u2014the standard [[Grammatical person|second person plural]] pronoun)\u2014analogous to the [[French language|French]] ''vous''. (Cf. [[T-V distinction]].) ''Ni'' wound up being used as a slightly less familiar form of ''du'', the singular second person pronoun, used to address people of lower social status. With the liberalization and radicalization of Swedish society in the 1950s and 1960s, these class distinctions  became less important, and ''du'' became the standard, even in formal and official contexts. Though the reform was not an act of any centralized political decree, but rather the result of sweeping change in social attitudes, it was completed in just a few years, from the late 1960s to early 1970s.<ref>Nationalencyklopedin, ''du-tilltal'' and ''ni-tilltal''</ref> The use of ''ni'' as a polite form of address is sometimes encountered today in both the written and spoken language, particularly among older speakers.<ref>{{cite book|last1=Holmes|first1=Philip|last2=Hinchliffe|first2=Ian|title=Swedish: An Essential Grammar|url=https://books.google.com/books?id=XGasMbSR-8gC&pg=PA86|year=2008|publisher=Psychology Press|isbn=978-0-415-45800-9|page=86}}</ref>\n\n==Geographic distribution==\nSwedish is the sole official national language of [[Sweden]], and one of two in [[Finland]] (alongside [[Finnish language|Finnish]]). As of 2006, it was the first or sole native language of 7.5 to 8 million Swedish residents.{{sfn|Parkvall|2009|p=24}} In 2007 around 5.5% (c. 290,000) of the population of [[Finland]] were native speakers of Swedish,<ref name=\"StatsFinland\">[http://www.stat.fi/tup/suoluk/suoluk_vaesto_en.html#structure Population structure]. [[Statistics Finland]] (2007-03-29). Retrieved on 2007-11-27.</ref> partially due to a decline following the Russian annexation of Finland after the [[Finnish War]] 1808\u20131809.<ref>[http://finland.fi/public/default.aspx?contentid=160058&contentlan=2&culture=en-US Main outlines of Finnish History \u2013 thisisFINLAND].</ref> The [[Finland Swedish]] minority is concentrated in the coastal areas and [[archipelago]]s of southern and western Finland. In some of these areas, Swedish is the predominant language; in 19 [[municipality|municipalities]], 16 of which are located in [[\u00c5land]], Swedish is the sole official language. \u00c5land county is an autonomous region of Finland.<ref>{{citation|url=http://www.kommunerna.net/sv/kommuner/svensk-tvasprakiga/Sidor/default.aspx|title=Svensk- och tv\u00e5spr\u00e5kiga kommuner|work=kommunerna.net|date=February 2007|accessdate=3 December 2007|language=Swedish}}</ref>\n\nAccording to a rough estimation, as of 2010 there were up to 300,000 Swedish-speakers living outside Sweden and Finland. The largest populations were in the United States (up to 100,000), the UK, Spain and Germany (c. 30,000 each) and a large proportion of the remaining 100,000 in the Scandinavian countries, France, Switzerland, Belgium, the Netherlands, Canada and Australia.<ref>Mikael Parkvall & Gunvor Flodell, \"Sveriges spr\u00e5k ute i v\u00e4rlden\" in {{harvnb|Dahl|Edlund|2010|p=154}}</ref> Over 3 million people speak Swedish as a second language, with about 2,410,000 of those in Finland.<ref name=ethnologue/> According to a survey by the [[European Commission]], 44% of respondents from Finland who did not have Swedish as a native language considered themselves to be proficient enough in Swedish to hold a conversation.<ref>''[http://ec.europa.eu/public_opinion/archives/ebs/ebs_386_en.pdf Europeans and their languages] {{webarchive|url=https://web.archive.org/web/20160106183351/http://ec.europa.eu/public_opinion/archives/ebs/ebs_386_en.pdf |date=6 January 2016 }}'', Special Eurobarometer 386, 2012.</ref> Due to the close relation between the Scandinavian languages, a considerable proportion of speakers of Danish and especially Norwegian are able to understand Swedish.<ref>{{citation|last=Gooskens|first=Charlotte|year=2007|url=http://www.let.rug.nl/gooskens/pdf/publ_JMMD_2007.pdf|title=The Contribution of Linguistic Factors to the Intelligibility of Closely Related Languages|journal=Journal of Multilingual and Multicultural Development|volume=28|issue=6|pages=445\u2013467|doi=10.2167/jmmd511.0|citeseerx=10.1.1.414.7645}}</ref>\n\nThere is considerable migration between the [[Nordic countries]], but owing to the similarity between the cultures and languages (with the exception of [[Finnish language|Finnish]]), expatriates generally [[Assimilation (sociology)|assimilate]] quickly and do not stand out as a group. According to the 2000 [[United States Census]], some 67,000 people over the age of five were reported as Swedish speakers, though without any information on the degree of language proficiency.<ref>[http://www.usefoundation.org/userdata/file/Research/Languages/swedish.pdf Swedish] {{webarchive|url=https://web.archive.org/web/20160304203311/http://www.usefoundation.org/userdata/file/Research/Languages/swedish.pdf |date=4 March 2016 }}. [http://www.usefoundation.org/view/29 Many Languages, One America] {{webarchive|url=https://web.archive.org/web/20090525112805/http://www.usefoundation.org/view/29 |date=25 May 2009 }}. U.S. English Foundation (2005). Retrieved on 2015-02-27.</ref> Similarly, there were 16,915 reported Swedish speakers in Canada from the 2001 census.<ref>{{citation|url=http://www12.statcan.ca/english/census06/data/highlights/index.cfm |title=2006 Census: Highlight tables |publisher=2.statcan.ca |date= |accessdate=28 September 2008}}</ref> Although there are no certain numbers, some 40,000 Swedes are estimated to live in the [[London]] area in the [[United Kingdom]].<ref>{{citation|url=http://www.dn.se/nyheter/varlden/krisberedskap-pa-svenska-ambassaden-i-london |title=Krisberedskap p\u00e5 svenska ambassaden |publisher=[[Dagens Nyheter]] |date=22 July 2005 |accessdate=4 January 2012}}</ref> Outside Sweden and Finland, there are about 40,000 active learners enrolled in Swedish language courses.<ref>[http://www.studyinsweden.se/Learn-Swedish/University-courses-outside-Sweden/ Learn Swedish]. [http://www.studyinsweden.se/ Studyinsweden.se]. Retrieved on 2011-01-27.</ref>\n\n===Official status===\n[[File:Oikokatu.JPG|thumb|A [[Finnish language|Finnish]]/Swedish street sign in [[Helsinki]], [[Finland]] ]]\nSwedish is the official main language of Sweden.<ref>{{citation|url=http://www.sprakforsvaret.se/sf/fileadmin/PDF/spraklagen_200509.pdf|title=Spr\u00e5klagen|date=1 July 2009|work=Spr\u00e5kf\u00f6rsvaret|language=Swedish|accessdate=15 July 2009}}</ref><ref>{{citation|url=http://www.thelocal.se/20090701/20404/|title=Swedish becomes official 'main language'|last=Landes|first=David|date=1 July 2009|work=The Local|publisher=thelocal.se|accessdate=15 July 2009}}</ref> Swedish is also one of two official languages of Finland. In Sweden, it has long been used in local and state government, and most of the educational system, but remained only a ''de facto'' primary language with no official status in law until 2009. A bill was proposed in 2005 that would have made Swedish an official language, but failed to pass by the narrowest possible margin (145\u2013147) due to a [[Pair (parliamentary convention)|pairing-off]] failure.<ref>{{citation|url=http://www.svt.se/nyheter/inrikes/svenskan-blir-inte-officiellt-sprak|title=Svenskan blir inte officiellt spr\u00e5k|work=[[Sveriges Television]]|date=7 December 2005|accessdate=23 June 2006|language=Swedish}}</ref> A proposal for a broader language law, designating Swedish as the main language of the country and bolstering the status of the minority languages, was submitted by an expert committee to the Swedish Ministry of Culture in March 2008. It was subsequently enacted by the [[Riksdag]], and entered into effect on 1 July 2009.<ref>{{citation|url=http://www.regeringen.se/sb/d/10016/a/100959|title=V\u00e4rna spr\u00e5ken \u2013 f\u00f6rslag till spr\u00e5klag|work=[[Government Offices of Sweden]]|date=18 March 2008|accessdate=19 June 2008|language=Swedish}}</ref>\n\nSwedish is the sole official language of [[\u00c5land]] (an [[Autonomous entity|autonomous]] province under the [[sovereignty]] of [[Finland]]), where the vast majority of the 26,000 inhabitants speak Swedish as a first language. In Finland as a whole, Swedish is one of the two \"national\" languages, with the same official status as [[Finnish language|Finnish]] (spoken by the majority) at the state level and an official language in some [[municipalities of Finland|municipalities]].\n\nSwedish is one of the official languages of the [[European Union]], and one of the working languages of the [[Nordic Council]]. Under the [[Nordic Language Convention]], citizens of the [[Nordic countries]] speaking Swedish have the opportunity to use their native language when interacting with official bodies in other Nordic countries without being liable for interpretation or translation costs.<ref>{{citation|url=http://www.norden.org/avtal/sprak/sk/sprak_sprak.asp?lang=|title=Konvention mellan Sverige, Danmark, Finland, Island, och Norge om nordiska medborgares r\u00e4tt att anv\u00e4nda sitt eget spr\u00e5k i annat nordiskt land|work=[[Nordic Council]]|date=2 May 2007|accessdate=25 April 2007|language=Swedish|archiveurl=https://web.archive.org/web/20070418154217/http://www.norden.org/avtal/sprak/sk/sprak_sprak.asp?lang=|archivedate=18 April 2007}}</ref><ref>{{citation|url=http://www.norden.org/webb/news/news.asp?id=6777&lang=6|title=20th anniversary of the Nordic Language Convention|work=Nordic news|date=22 February 2007|accessdate=25 April 2007|language=Swedish}}</ref>\n\n===Regulatory bodies===\n[[File:Estonian archipelago (Saaremaa and Hiiumaa).jpg|thumb|right|Map of the [[West Estonian archipelago|Estonian islands]] which formerly housed \"''Coastal Swede''\" populations]]\n\nThe [[Swedish Language Council]] (''Spr\u00e5kr\u00e5det'') is the regulator of Swedish in Sweden but does not attempt to enforce control of the language, as for instance the ''[[Acad\u00e9mie fran\u00e7aise]]'' does for [[French language|French]]. However, many organizations and agencies require the use of the council's publication ''Svenska skrivregler'' in official contexts, with it otherwise being regarded as a ''de facto'' orthographic standard. Among the many organizations that make up the Swedish Language Council, the [[Swedish Academy]] (established 1786) is arguably the most influential. Its primary instruments are the glossary ''[[Svenska Akademiens ordlista]]'' (''SAOL'', currently in its 14th edition) and the dictionary ''[[Svenska Akademiens Ordbok]]'', in addition to various books on grammar, spelling and manuals of style. Although the dictionaries have a [[Linguistic prescription|prescriptive]] element, they mainly describe current usage.<ref>{{cite web |last1=Gellerstam |first1=Martin |title=Norm och bruk i SAOL|url=https://gupea.ub.gu.se/handle/2077/24007 |publisher=Nordisk forening for leksikografi i samarbeit med Nordisk spr\u00e5ksekretariat |accessdate=2 March 2018 |language=Swedish |date=2002}}</ref>\n\nIn Finland, a special branch of the [[Research Institute for the Languages of Finland]] has official status as the regulatory body for Swedish in Finland. Among its highest priorities is to maintain intelligibility with the language spoken in Sweden. It has published ''Finlandssvensk ordbok'', a dictionary about the differences between Swedish in Finland and Sweden.<ref>{{Cite journal|url = http://ojs.statsbiblioteket.dk/index.php/lexn/article/view/18709/16362|title = Normeringen i Finlandssvensk ordbok|last = af H\u00e4llstr\u00f6m|first = Charlotta|date = 2002|journal = LexicoNordica 9, 2002, S. 51\u201362|volume = 0|issue = 9|doi = |pmid = |accessdate = }}</ref>\n\n===Language minorities in Estonia and Ukraine===\nFrom the 13th to 20th century, there were [[Estonian Swedes|Swedish-speaking communities in Estonia]], particularly on the islands (e. g., [[Hiiumaa]], [[Vormsi]], [[Ruhnu]]; in Swedish, known as ''Dag\u00f6'', ''Orms\u00f6'', ''Run\u00f6'', respectively) along the coast of the [[Baltic Sea|Baltic]], communities which today have all disappeared. The Swedish-speaking minority was represented in [[parliament]], and entitled to use their native language in parliamentary debates. After the loss of Estonia to the [[Russian Empire]] in the early 18th century, around 1,000 Estonian Swedish speakers were forced to march to southern [[Ukraine]], where they founded a village, ''[[Gammalsvenskby]]'' (\"Old Swedish Village\"). A few elderly people in the village still speak Swedish and observe the holidays of the Swedish calendar, although the dialect is most likely facing extinction.<ref>The number of registered Swedes in Zmeyovka (the modern Ukrainian name of ''Gammalsvenskby'') in 1994 was 116 according to [[Nationalencyklopedin]], article ''svenskbyborna''.</ref>\n\nFrom 1918\u20131940, when Estonia was independent, the small Swedish community was well treated. Municipalities with a Swedish majority, mainly found along the coast, used Swedish as the administrative language and Swedish-Estonian culture saw an upswing. However, most Swedish-speaking people fled to Sweden before the end of [[World War II]], that is, before the invasion of Estonia by the Soviet army in 1944. Only a handful of speakers remain.<ref>''Nationalencyklopedin'', ''estlandssvenskar''.</ref>\n\n==Phonology==\n{{Main|Swedish phonology}}\n\n[[File:Swedish monophthongs chart.svg|thumb|right|The vowel phonemes of Central Standard Swedish<ref>{{Harvnb|Engstrand|1999|p=140}}</ref>]]\n\nSwedish dialects have either 17 or 18 vowel [[phoneme]]s, 9 long and 9 short. As in the other Germanic languages, including English, most long vowels are phonetically paired with one of the short vowels, and the pairs are such that the two vowels are of similar [[vowel quality|quality]], but with the short vowel being slightly lower and slightly centralized. In contrast to e.g. Danish, which has only tense vowels, the short vowels are slightly more lax, but the tense vs. lax contrast is not nearly as pronounced as in English, German or Dutch. In most dialects, the short vowel sound pronounced {{IPA|[\u025b]}} or {{IPA|[\u00e6]}} has merged with the short {{IPA|/e/}} (transcribed {{angbr IPA|\u025b}} in the chart below).<ref name=AndersonEngstrand>{{Harvnb|Andersson|2002|pp=271\u2013312}}; {{Harvnb|Engstrand|1999}}</ref>\n\nThere are 18 consonant phonemes, two of which, {{IPAslink|\u0267}} and {{IPA|/r/}}, vary considerably in pronunciation depending on the dialect and social status of the speaker. In many dialects, sequences of {{IPA|/r/}} (pronounced alveolarly) with a dental consonant result in [[retroflex consonant]]s; alveolarity of the pronunciation of {{IPA|/r/}} is a precondition for this retroflexion. {{IPA|/r/}} has a [[guttural R|guttural]] or \"French R\" pronunciation in the [[South Swedish dialects]]; consequently, these dialects lack [[retroflex consonant]]s.<ref>{{Harvnb|Garl\u00e9n|1988|pp=73\u201374}}</ref>\n\nSwedish is a [[stress-timed]] language, where the time intervals between [[Stress (linguistics)|stressed syllables]] are equal. However, when casually spoken, it tends to be [[syllable-timed]].<ref>{{cite journal|url=https://flov.gu.se/forskning/konferenser/fonetikkonferenser/fonetik2005|title=Fonetik 2005|last1=Eriksson|first1=Anders|last2=Abelin|first2=\u00c5sa|last3=Lindh|first3=Jonas|publisher=[[University of Gothenburg]]|date=May 2005|pp=34\u201336}}</ref> Any stressed syllable carries one of two [[tone (linguistics)|tones]], which gives Swedish much of its characteristic sound. [[Prosody (linguistics)|Prosody]] is often one of the most noticeable differences between dialects.<ref>{{Harvnb|Garl\u00e9n|1988}}</ref>\n\n{| class=\"wikitable\" style=\"text-align:center\"\n|- \n! colspan=\"2\"| \n! [[Bilabial consonant|Bilabial]]\n! [[Labiodental consonant|Labio-<br/>dental]]\n! [[Dental consonant|Dental]]\n! [[Retroflex consonant|Retroflex]]<br/>/[[Alveolar consonant|Alveolar]]\n! [[Palatal consonant|Palatal]]\n! [[Velar consonant|Velar]]\n! [[glottal consonant|Glottal]]\n|-\n!colspan=2| [[Nasal consonant|Nasal]]\n| {{IPA link|m}}\n| \n| {{IPA link|n\u032a|n}}\n| \n| \n| {{IPA link|\u014b}}\n| \n|-\n!rowspan=2| [[Stop consonant|Plosive]]\n! {{small|[[voicelessness|voiceless]]}}\n| {{IPA link|p}}\n| \n| {{IPA link|t\u032a|t}}\n| \n| \n| {{IPA link|k}}\n| \n|-\n! {{small|[[voice (phonetics)|voiced]]}}\n|rowspan=2| {{IPA link|b}}\n| \n|rowspan=2| {{IPA link|d\u032a|d}}\n| \n| \n|rowspan=2| {{IPA link|\u0261}}\n| \n|-\n!colspan=2| [[Approximant consonant|Approximant]]\n|rowspan=2| {{IPA link|v}}\n|rowspan=4| {{IPA|r}}\n|rowspan=2| {{IPA link|j}}\n|rowspan=3| {{IPA link|h}}\n|-\n!rowspan=2| [[Fricative consonant|Fricative]]\n! {{small|[[voice (phonetics)|voiced]]}}\n| \n| \n| \n|-\n! {{small|[[voicelessness|voiceless]]}}\n| \n| {{IPA link|f}}\n| {{IPA link|s\u032a|s}}\n| {{IPA link|\u0255}}\n| {{IPA link|\u0267}}\n|-\n!colspan=2| [[Trill consonant|Trill]]\n| \n| \n| \n| \n| \n| \n|-\n!colspan=2| [[Lateral consonant|Lateral]]\n| \n| \n| {{IPA link|l\u032a|l}}\n| \n| \n| \n| \n|}\n\n==Grammar==\n{{Main|Swedish grammar}}\nSwedish [[noun]]s and [[adjective]]s are declined in [[grammatical gender|genders]] as well as [[grammatical number|number]]. Nouns are of [[common gender]] (''en'' form) or [[neuter gender]] (''ett'' form).<ref>{{Harvnb|Granberry|1991|pp=18\u201319}}</ref> The gender determines the declension of the [[adjective]]s. For example, the word ''fisk'' (\"fish\") is a noun of common gender (''en fisk'') and can have the following forms:\n\n{| class=\"wikitable\"\n|-\n!\n! Singular\n! Plural\n|-\n! Indefinite form\n| ''fisk''\n| ''fiskar''\n|-\n! Definite form\n| ''fisken''\n| ''fiskarna''\n|}\n\nThe definite singular form of a noun is created by adding a suffix (''-en'', ''-n'', ''-et'' or ''-t''), depending on its gender and if the noun ends in a vowel or not. The definite articles ''den'', ''det'', and ''de'' are used for variations to the definitiveness of a noun. They can double as [[demonstrative]] [[pronoun]]s or [[Determiner (class)|demonstrative determiners]] when used with [[adverb]]s such as ''h\u00e4r'' (\"here\") or ''d\u00e4r'' (\"there\") to form ''den/det h\u00e4r (can also be \"denna/detta\")'' (\"this\"), ''de h\u00e4r (can also be \"dessa\")'' (\"these\"), ''den/det d\u00e4r'' (\"that\"), and ''de d\u00e4r'' (\"those\"). For example, ''den d\u00e4r fisken'' means \"that fish\" and refers to a specific fish; ''den fisken'' is less definite and means \"that fish\" in a more abstract sense, such as that set of fish; while ''fisken'' means \"the fish\". In certain cases, the definite form indicates possession, e. g., ''jag m\u00e5ste tv\u00e4tta h\u00e5r'''et''''' (\"I must wash ''my'' hair\").<ref name=\"Haugen\"/>\n\n[[Adjective]]s are inflected in two declensions \u2013 indefinite and definite \u2013 and they must match the noun they modify in gender and number. The indefinite neuter and plural forms of an adjective are usually created by adding a suffix (''-t'' or ''-a'') to the common form of the adjective, e. g., ''en gr\u00f6n stol'' (a green chair), ''ett gr\u00f6nt hus'' (a green house), and ''gr\u00f6na stolar'' (\"green chairs\"). The definite form of an adjective is identical to the indefinite plural form, e. g., ''den gr\u00f6na stolen'' (\"the green chair\"), ''det gr\u00f6na huset'' (\"the green house\"), and ''de gr\u00f6na stolarna'' (\"the green chairs\").<ref name=\"Haugen\">{{Harvnb|Haugen|2009}}</ref>\n\nSwedish [[pronoun]]s are similar to those of English. Besides the two natural genders ''han'' and ''hon'' (\"he\" and \"she\"), there are also the two [[grammatical gender]]s ''den'' and ''det'', usually termed [[Gender in Danish and Swedish|common and neuter]]. Unlike the nouns, pronouns have an additional [[object (linguistics)|object]] form, derived from the old [[dative]] form. ''Hon'', for example, has the following nominative, possessive, and object forms:<ref name=\"Haugen\"/>\n\n:''hon'' \u2013 ''hennes'' \u2013 ''henne''\n\nSwedish also uses third-person possessive [[reflexive pronoun]]s that refer to the subject in a clause, a trait which is restricted to North Germanic languages:\n\n:''Anna gav Maria sin bok.''; \"Anna gave Maria her [Anna's] book.\" (reflexive)\n:''Anna gav Maria hennes bok.''; \"Anna gave Maria her [Maria's] book.\" (not reflexive)\n\nSwedish used to have [[genitive]] that was placed at the end of the head of a noun phrase. In modern Swedish, it has become an [[enclitic]] ''-s'', which attaches to the end of the noun phrase, rather than the noun itself.<ref>{{Harvnb|Hultman|2003|pp=70, 212\u2013213}}</ref>\n\n:''h\u00e4sten''; \"the horse\" \u2013 ''h\u00e4stens'' \"the horse's\"\n:''h\u00e4sten p\u00e5 den blommande \u00e4ngens svarta man''; \"the horse in the flowering meadow's black mane\"\n\nIn formal written language, it used to be considered correct to place the genitive ''-s'' after the head of the noun phrase (''h\u00e4sten''), though this is today considered dated, and different grammatical constructions are often used.<ref>{{Harvnb|Hultman|2003|p=213}}</ref>\n\nVerbs are [[Grammatical conjugation|conjugated]] according to [[grammatical tense|tense]]. One group of verbs (the ones ending in ''-er'' in present tense) has a special [[Imperative mood|imperative]] form (generally the verb [[word stem|stem]]), but with most verbs the imperative is identical to the [[infinitive]] form. [[perfect (grammar)|Perfect]] and [[present tense|present]] [[participle]]s as adjectival verbs are very common:<ref name=\"Haugen\"/>\n\n:Perfect participle: ''en stekt fisk''; \"a fried fish\" (steka = to fry)\n:Present participle: ''en stinkande fisk''; \"a stinking fish\" (stinka = to stink)\n\nIn contrast to English and many other languages, Swedish does not use the perfect participle to form the present perfect and past perfect. Rather, the [[auxiliary verb]] ''har'' (\"have\"), ''hade'' (\"had\") is followed by a special form, called [[supine]], used solely for this purpose (although often identical to the neuter form of the perfect participle):<ref name=\"Haugen\"/>\n\n:Perfect participle: ''m\u00e5lad'', \"painted\" \u2013 supine ''m\u00e5lat'', present perfect ''har m\u00e5lat''; \"have painted\"\n:Perfect participle: ''stekt'', \"fried\" \u2013 supine ''stekt'', present perfect ''har stekt''; \"have fried\"\n:Perfect participle: ''skriven'', \"written\" \u2013 supine ''skrivit'', present perfect ''har skrivit''; \"have written\"\n\nWhen building the compound passive voice using the verb ''att bli'', the past participle is used:\n\n:''den blir m\u00e5lad''; \"it's being painted\"\n:''den blev m\u00e5lad''; \"it was painted\"\n\nThere exists also an inflected passive voice formed by adding ''-s'', replacing the final ''r'' in the present tense:\n\n:''den m\u00e5las''; \"it's being painted\"\n:''den m\u00e5lades''; \"it was painted\"\n\nIn a subordinate [[clause]], the auxiliary ''har'' is optional and often omitted, particularly in written Swedish.\n\n:''Jag ser att han (har) stekt fisken''; \"I see that he has fried the fish\"\n\n[[Subjunctive mood]] is occasionally used for some verbs, but its use is in sharp decline and few speakers perceive the handful of commonly used verbs (as for instance: ''vore, m\u00e5nne'') as separate conjugations, most of them remaining only as set of [[Idiom|idiomatic expressions]].<ref name=\"Haugen\"/>\n\nWhere other languages may use [[grammatical cases]], Swedish uses numerous [[preposition]]s, similar to those found in [[English language|English]]. As in modern [[German language|German]], prepositions formerly determined case in Swedish, but this feature can only be found in certain idiomatic expressions like ''till fots'' (\"on foot\", genitive).<ref>{{Harvnb|Hultman|2003|pp=182\u2013183}}</ref>\n\nAs Swedish is a Germanic language, the [[syntax]] shows similarities to both English and German. Like English, Swedish has a [[subject\u2013verb\u2013object]] basic word order, but like German it utilizes [[V2 word order|verb-second word order]] in main clauses, for instance after [[adverbs]] and adverbial phrases, and [[dependent clauses]]. (Adverbial phrases denoting time are usually placed at the beginning of a main clause that is at the head of a sentence.) [[Prepositional phrase]]s are placed in a [[place\u2013manner\u2013time]] order, as in English (but not German). Adjectives precede the noun they modify.<ref>{{Harvnb|Bolander|2002}}</ref> Verb-second (inverted) word order is also used for questions.<ref name=\"Stensson 2013\">{{cite web|last1=Stensson|first1=Leif|title=Swedish Grammar {{!}} Syntax|url=https://www.lysator.liu.se/language/Languages/Swedish/Grammar.html#syntax|publisher=Lysator Society, Link\u00f6ping University|accessdate=9 March 2018|date=August 2013}}</ref>\n\n==Vocabulary==\nThe [[vocabulary]] of Swedish is mainly Germanic, either through common Germanic heritage or through loans from German, Middle Low German, and to some extent, English. Examples of Germanic words in Swedish are ''mus'' (\"mouse\"), ''kung'' (\"king\"), and ''g\u00e5s'' (\"goose\"). A significant part of the religious and scientific vocabulary is of [[Latin]] or [[Greek language|Greek]] origin, often borrowed from [[French language|French]] and, lately, English. Some 1\u2013200 words are also borrowed from [[Scandoromani language|Scandoromani]] or [[Romani language|Romani]], often as slang varieties; a commonly used word from Romani is ''[[:wikt:tjej|tjej]]'' (\"girl\").<ref>{{Harvnb|Wess\u00e9n|1998}}</ref>\n\nA large number of [[French language|French]] words were imported into Sweden around the 18th century. These words have been [[transcription (linguistics)|transcribed]] to the Swedish spelling system and are therefore pronounced recognizably to a French-speaker. Most of them are distinguished by a \"French accent\", characterized by emphasis on the last syllable. For example, ''niv\u00e5'' (fr. ''niveau'', \"level\"), ''f\u00e5t\u00f6lj'' (fr. ''fauteuil'', \"armchair\") and ''aff\u00e4r'' (\"shop; affair\"), etc. Cross-borrowing from other Germanic languages has also been common, at first from Middle Low German, the [[lingua franca]] of the [[Hanseatic League|Hanseatic league]] and later from [[Standard German]]. Some compounds are translations of the elements ([[calque]]s) of German original compounds into Swedish, like ''{{lang|sv|bomull}}'' from German ''{{lang|de|Baumwolle}}'' (\"cotton\"; literally, ''tree-wool'').<ref>Nationalencyklopedin, ''svenska: spr\u00e5khistoria''</ref>\n\nAs with many Germanic languages, new words can be formed by compounding, e. g., nouns like ''{{lang|sv|nagellackborttagningsmedel}}'' (\"nail polish remover\") or verbs like ''{{lang|sv|smyglyssna}}'' (\"to eavesdrop\").<ref name=CompoundNoun/><ref>{{cite web |title=Smyglyssna |url=http://ordbok.woxikon.se/sv-en/smyglyssna |website=Woxikon |accessdate=3 March 2018}}</ref> Compound nouns take their [[grammatical gender|gender]] from the [[head (linguistics)|head]], which in Swedish is always the last morpheme.<ref name=CompoundNoun>{{cite web |title=Minor Grammar English-Swedish |url=https://www.scribd.com/document/194349317/Minor-Grammar-English-Swedish |publisher=Scribd |accessdate=3 March 2018}}</ref> New words can also be coined by [[Morphological derivation|derivation]] from other established words, such as the [[verbification]] of [[noun]]s by the adding of the [[suffix#Derivational suffixes|suffix]] ''-a'', as in ''{{lang|sv|bil}}'' (\"car\") and ''{{lang|sv|bila}}'' (\"travel (recreationally) by car\").<ref>{{cite book |editor1-last=Gomer |editor1-first=Eva |editor2-last=Morris-Nygren |editor2-first=Mona |title=Bila |work=Modern Svensk Engelsk Ordbok |date=1976 |publisher=Prisma |page=57}}</ref> The opposite, making nouns of verbs, is also possible, as in ''{{lang|sv|t\u00e4nk}}'' (\"way of thinking; concept\") from ''{{lang|sv|t\u00e4nka}}'' (\"to think\").<ref>{{cite web|title=Spr\u00e5ket lever {{!}} t\u00e4nk|url=https://www.sprakinstitutet.fi/sv/aktuellt/spraket_lever/tank.20235.news|publisher=Institutet f\u00f6r de inhemska spr\u00e5ken|accessdate=3 March 2018|language=Swedish|date=18 February 2016}}</ref>\n\n==Writing system==\n{{Main|Swedish orthography}}\nThe [[Swedish alphabet]] is a 29-letter [[alphabet]], using the 26-letter [[ISO basic Latin alphabet]] plus the three additional letters ''[[\u00c5|\u00c5''/''\u00e5]]'', ''[[\u00c4|\u00c4''/''\u00e4]]'', and ''[[\u00d6|\u00d6''/''\u00f6]]'' constructed in the 16th century by writing \"o\" and \"e\" on top of an \"a\", and an \"e\" on top of an \"o\". Though these combinations are historically modified versions of [[A]] and [[O]] according to the English range of usage for the term [[diacritic]], these three characters are not considered to be diacritics within the Swedish application, but rather separate letters, and are independent letters following ''z''. Before the release of the 13th edition of ''[[Svenska Akademiens ordlista]]'' in April 2006, ''w'' was treated as merely a variant of ''v'' used only in names (such as \"Wallenberg\") and foreign words (\"bowling\"), and so was both sorted and pronounced as a ''v''. Other [[diacritic]]s (to use the broader English term usage referenced here) are unusual in Swedish; [[\u00e9]] is sometimes used to indicate that the stress falls on a terminal syllable containing ''e'', especially when the stress changes the meaning (''ide'' vs. ''id\u00e9'', \"winter lair\" vs. \"idea\") as well as in some names, like ''Kastr\u00e9n''; occasionally other [[acute accent]]s and, less often, [[grave accent]]s can be seen in names and some foreign words. The letter [[\u00e0]] is used to refer to unit cost (a loan from the French), equivalent to the [[at sign]] (@) in English.<ref>{{Harvnb|Svenska spr\u00e5kn\u00e4mnden|2000}}</ref>\n\nThe German ''[[\u00fc]]'' is treated as a variant of ''[[y]]'' and sometimes retained in foreign names and words, e. g., ''m\u00fcsli'' (\"muesli/granola\"). A proper [[Diaeresis (diacritic)|diaeresis]] may very exceptionally be seen in elaborated style (for instance: \"A\u00efda\"). The German convention of writing ''\u00e4'' and ''\u00f6'' as ''ae'' and ''oe'' if the characters are unavailable is an unusual convention for speakers of modern Swedish. Despite the availability of all these characters in the Swedish national [[top-level domain|top-level Internet domain]] and other such domains, Swedish sites are frequently labelled using ''a'' and ''o'', based on visual similarity, though Swedish domains could be registered using the characters \u00e5, \u00e4, and \u00f6 from 2003.<ref>{{cite web|title=Domain names with characters like \u00e5, \u00e4, \u00f6 (IDN)|url=https://www.iis.se/english/domains/se/idn/|publisher=iiS|accessdate=3 March 2018}}</ref>\n\nIn Swedish [[orthography]], the [[Colon (punctuation)|colon]] is used in a [[Colon (punctuation)#Usage|similar manner as in English]], with some exceptions: the colon is used for some abbreviations, such as ''3:e'' for ''tredje'' (\"third\") and ''S:t'' for ''Sankt'' (\"Saint\"), and for all types of [[suffix|endings]] that can be added to numbers, letters and abbreviations, such as ''a:et'' (\"the a\") and ''CD:n'' (\"the CD\"), or the genitive form ''USA:s'' (\"USA's\").<ref>{{Harvnb|Svenska spr\u00e5kn\u00e4mnden|2000|pp=154\u2013156}}</ref>\n\n==Dialects==\n[[File:R-pronounciation in Swedish language.JPG|thumb|[[Isogloss]] for the pronunciation of \"R\" (c. 1960), being [[Alveolar trill|alveolar]] north of the boundary and [[guttural R|uvular]] (\"French R\") south of it. It follows that the R+S combination is pronounced as spelled south of the boundary, while pronounced {{IPAblink|\u0282}} (similar to \"sh\" in \"shark\") north of it. This isogloss is the most imperative of all Swedish pronunciation differences.]]\n{{Main|Swedish dialects}}\nAccording to a traditional division of Swedish [[dialect]]s, there are six main groups of dialects:<ref>{{Harvnb|Leinonen|2011}};{{Harvnb|Dahl|2000|pp=117\u2013119}}; Lars-Erik Edlund \"Spr\u00e5klig variation i tid och rum\" in {{harvnb|Dahl|Edlund|2010|p=9}}</ref><ref>{{cite web|title=Hur m\u00e5nga dialekter finns det i Sverige? Var g\u00e5r gr\u00e4nsen mellan olika dialekter?|url=http://www.sprakochfolkminnen.se/sprak/dialekter/fragor-och-svar-om-dialekter/faq/2013-10-21-hur-manga-dialekter-finns-det-i-sverige-var-gar-gransen-mellan-olika-dialekter.html|publisher=Institutet f\u00f6r spr\u00e5k och folkminnen|accessdate=2 March 2018|date=3 February 2017 |language=Swedish}}</ref>\n* [[Norrland dialects]]\n* [[Finland Swedish]]\n* [[Svealand Swedish|Svealand dialects]]\n* [[Gutnish|Gotland dialects]]\n* [[G\u00f6tam\u00e5l dialect|G\u00f6taland dialects]]\n* [[South Swedish dialects]]\n\nThe traditional definition of a Swedish [[dialect]] has been a local variant that has not been heavily influenced by the standard language and that can trace a separate development all the way back to [[Old Norse]]. Many of the genuine rural dialects, such as those of [[Orsa, Sweden|Orsa]] in [[Dalarna]] or [[N\u00e4rpes]] in [[Ostrobothnia (region)|\u00d6sterbotten]], have very distinct phonetic and grammatical features, such as plural forms of verbs or archaic [[case (linguistics)|case]] inflections. These dialects can be near-incomprehensible to a majority of Swedes, and most of their speakers are also fluent in Standard Swedish. The different dialects are often so localized that they are limited to individual [[parish]]es and are referred to by Swedish linguists as ''sockenm\u00e5l'' (lit., \"parish speech\"). They are generally separated into six major groups, with common characteristics of prosody, grammar and vocabulary. One or several examples from each group are given here. Though each example is intended to be also representative of the nearby dialects, the actual number of dialects is several hundred if each individual community is considered separately.<ref>{{Harvnb|Engstrand|2004|p=120}}; {{Harvnb|Pettersson|1996|p=184}}</ref>\n\nThis type of classification, however, is based on a somewhat romanticized [[nationalism|nationalist]] view of ethnicity and language. The idea that only rural variants of Swedish should be considered \"genuine\" is not generally accepted by modern scholars. No dialects, no matter how remote or obscure, remained unchanged or undisturbed by a minimum of influences from surrounding dialects or the standard language, especially not from the late 19th century onwards with the advent of [[mass media]] and advanced forms of transport. The differences are today more accurately described by a scale that runs from \"standard language\" to \"rural dialect\" where the speech even of the same person may vary from one extreme to the other depending on the situation. All Swedish dialects with the exception of the highly diverging forms of speech in [[Dalarna]], [[Norrbotten]] and, to some extent, [[Gotland]] can be considered to be part of a common, mutually intelligible [[dialect continuum]]. This continuum may also include [[Norwegian dialects|Norwegian]] and some [[Danish dialects]].<ref>{{Harvnb|Dahl|2000|pp=117\u2013119}}</ref>\n\nThe samples linked below have been taken from SweDia, a research project on Swedish modern dialects available for download (though with information in Swedish only), with many more samples from 100 different dialects with recordings from four different speakers: older female, older male, younger female and younger male. The dialect groups are those traditionally used by dialectologists.<ref>{{Harvnb|Pettersson|1996|p=184}}</ref>\n\n[[File:Map of Swedish dialects.png|thumb|upright=1.6|Map showing location of the various modern dialect samples]]\n# [[\u00d6verkalix]], [[Norrbotten]]; [http://swedia.ling.gu.se/Norrland/Norrbotten/Overkalix/yw.html younger female]\n# [[Burtr\u00e4sk]], [[V\u00e4sterbotten]]; [http://swedia.ling.gu.se/Norrland/Vasterbotten/Burtrask/ow.html older female]\n# [[Asp\u00e5s]], [[J\u00e4mtland]]; [http://swedia.ling.gu.se/Norrland/Jamtland/Aspas/yw.html younger female]\n# [[F\u00e4rila]], [[H\u00e4lsingland]]; [http://swedia.ling.gu.se/Norrland/Halsingland/Farila/om.html older male]\n# [[\u00c4lvdalen]], [[Dalarna]]; [http://swedia.ling.gu.se/Svealand/Dalarna/Alvdalen/ow.html older female]; traditionally considered a dialect, but now often recognized as [[Elfdalian]], a separate language\n# [[Gr\u00e4s\u00f6]], [[Uppland]]; [http://swedia.ling.gu.se/Svealand/Uppland/Graso/om.html older male]\n# [[Sorunda]], [[S\u00f6dermanland]]; [http://swedia.ling.gu.se/Svealand/Sodermanland/Sorunda/ym.html younger male]\n# [[K\u00f6la]], [[V\u00e4rmland]] [http://swedia.ling.gu.se/Svealand/Varmland/Kola/yw.html younger female]\n# [[Viby, N\u00e4rke|Viby]], [[N\u00e4rke]]; [http://swedia.ling.gu.se/Svealand/Narke/Viby/om.html older male]\n# [[Sproge]], [[Gotland]]; [http://swedia.ling.gu.se/Gotaland/Gotland/Sproge/yw.html younger female]\n# [[N\u00e4rpes]], [[Ostrobothnia (region)|Ostrobothnia]]; [http://swedia.ling.gu.se/Finland/Osterbotten/Narpes/yw.html younger female]\n# [[Dragsfj\u00e4rd]], [[Southwest Finland]]; [http://swedia.ling.gu.se/Finland/Aboland/Dragsfjard/om.html older male]\n# [[Borg\u00e5]], [[Eastern Uusimaa]]; [http://swedia.ling.gu.se/Finland/Nyland/Borga/ym.html younger male]\n# [[Orust]], [[Bohusl\u00e4n]]; [http://swedia.ling.gu.se/Gotaland/Bohuslan/Orust/om.html older male]\n# [[Floby]], [[V\u00e4sterg\u00f6tland]]; [http://swedia.ling.gu.se/Gotaland/Vastergotland/Floby/ow.html older female]\n# [[Rimforsa]], [[\u00d6sterg\u00f6tland]]; [http://swedia.ling.gu.se/Gotaland/Ostergotland/Rimforsa/ow.html older female]\n# [[\u00c5rstad, Falkenberg|\u00c5rstad]]-[[Heberg]], [[Halland]]; [http://swedia.ling.gu.se/Gotaland/Halland/Arstad/ym.html younger male]\n# [[Stenberga]], [[Sm\u00e5land]]; [http://swedia.ling.gu.se/Gotaland/Smaland/Stenberga/yw.html younger female]\n# [[J\u00e4msh\u00f6g]], [[Blekinge]]; [http://swedia.ling.gu.se/Gotaland/Blekinge/Jamshog/ow.html older female]\n# [[Bara, Scania|Bara]], [[Sk\u00e5ne]]; [http://swedia.ling.gu.se/Gotaland/Skane/Bara/om.html older male]\n\n===Standard Swedish===\n[[Standard Swedish]] is the language used by virtually all Swedes and most [[Swedish-speaking population of Finland|Swedish-speaking Finns]]. It is called ''rikssvenska'' or ''standardsvenska'' (\"Standard Swedish\") in Sweden.<ref>{{cite web |title=standardspr\u00e5k |url=https://www.ne.se/uppslagsverk/encyklopedi/l%C3%A5ng/standardspr%C3%A5k |publisher=Nationalencyklopedin AB |accessdate=3 March 2018 |language=Swedish}}</ref> In Finland, ''h\u00f6gsvenska'' (\"High Swedish\") is used for the Finnish variant of standard Swedish and ''rikssvenska'' refers to Swedish as spoken in Sweden in general.<ref>{{cite web|last1=Mattfolk|first1=Leila|title=Do answers to a questionnaire give reliable data?|url=http://www.nordiska.uu.se/ICLaVE2/Kristiansen_w/Mattfolkw.pdf|publisher=Helsinki University|access-date=3 March 2018|quote=Employees on radio and television do not always follow the same Swedish norm. What do you think about them using their own ordinary spoken language instead of standard Finland-Swedish (''h\u00f6gsvenska'') in the broadcasted programs?|url-status=dead|archive-url=https://web.archive.org/web/20041102231321/http://www.nordiska.uu.se/ICLaVE2/Kristiansen_w/Mattfolkw.pdf|archive-date=2 November 2004|df=dmy-all}}</ref>\n\nIn a poll conducted in 2005 by the [[Swedish Retail Institute]] (''[http://www.hui.se/ Handelns Utredningsinstitut]''), the attitudes of Swedes to the use of certain dialects by salesmen revealed that 54% believed that ''rikssvenska'' was the variety they would prefer to hear when speaking with salesmen over the phone, even though dialects such as ''gotl\u00e4ndska'' or ''[[Scanian dialect|sk\u00e5nska]]'' were provided as alternatives in the poll.<ref>{{citation|last=Aronsson |first=Cecilia |url=http://www.di.se/Nyheter/?page=/Avdelningar/Artikel.aspx%3FArticleID%3D2005%5C05%5C03%5C142710%26words%3Drikssvenska%26SectionID%3DEttan%26menusection%3DStartsidan%3BHuvudnyheter |title=Norrl\u00e4ndska l\u00e5ter b\u00e4st |work=[[Dagens Industri]] |date=3 May 2005 |access-date=24 August 2007 |quote=Norrl\u00e4ndska och rikssvenska \u00e4r de mest f\u00f6rtroendeingivande dialekterna. Men gotl\u00e4ndska och v\u00e4rml\u00e4ndska g\u00f6r svenskarna misst\u00e4nksamma, enligt en ny riksomfattande unders\u00f6kning. Handelns utredningsinstitut (HUI) har fr\u00e5gat 800 svenskar om hur de uppfattar olika dialekter som de h\u00f6r i telefonservicesamtal, exempelvis fr\u00e5n f\u00f6rs\u00e4ljare eller upplysningscentraler. Unders\u00f6kningen visar att 54 procent f\u00f6redrar att motparten pratar rikssvenska, vilket troligen h\u00e4nger ihop med dess tydlighet. Men \u00e4ven norrl\u00e4ndskan plockar h\u00f6ga po\u00e4ng \u2013 25 procent tycker att det \u00e4r den mest f\u00f6rtroendeingivande dialekten. Tilltron till norrl\u00e4ndska \u00e4r \u00e4nnu st\u00f6rre hos personer under 29 \u00e5r, medan st\u00f6det f\u00f6r rikssvenska \u00e4r st\u00f6rst bland personer \u00f6ver 55 \u00e5r. |archive-url=https://web.archive.org/web/20071013152413/http://www.di.se/Nyheter/?page=%2FAvdelningar%2FArtikel.aspx%3FArticleID%3D2005%5C05%5C03%5C142710&words=rikssvenska&SectionID=Ettan&menusection=Startsidan%3BHuvudnyheter |archive-date=13 October 2007 |url-status=dead |df= }}</ref>\n\n===Finland Swedish===\n{{Main|Finland Swedish|\u00c5land Swedish}}\nFinland was a part of Sweden from the 13th century until the loss of the Finnish territories to [[Russia]] in 1809. Swedish was the sole administrative language until 1902 as well as the dominant language of culture and education until Finnish independence in 1917. The percentage of Swedish speakers in Finland has steadily decreased since then. The Swedish-speaking population is mainly concentrated in the coastal areas of [[Ostrobothnia (region)|Ostrobothnia]], [[Southwest Finland]] and [[Uusimaa|Nyland]] where the percentage of Finland Swedes partly is high, with Swedish being spoken by more than 90% of the population in several municipalities, and on \u00c5land, where Swedish is spoken by a vast majority of the population and is the only official language. Swedish is an official language also in the rest of Finland, though, with the same official status as [[Finnish language|Finnish]].<ref>http://www.finlex.fi/sv/laki/ajantasa/1999/19990731 Finlands grundlag \u2013 Constituiton of Finland \"17 \u00a7\n\nR\u00e4tt till eget spr\u00e5k och egen kultur\n\nFinlands nationalspr\u00e5k \u00e4r finska och svenska.\n\nVars och ens r\u00e4tt att hos domstol och andra myndigheter i egen sak anv\u00e4nda sitt eget spr\u00e5k, antingen finska eller svenska, samt att f\u00e5 expeditioner p\u00e5 detta spr\u00e5k skall tryggas genom lag. Det allm\u00e4nna skall tillgodose landets finskspr\u00e5kiga och svenskspr\u00e5kiga befolknings kulturella och samh\u00e4lleliga behov enligt lika grunder.\"</ref> The country's public broadcaster, [[Yle]], provides two Swedish-language radio stations, [[Yle Vega]] and [[Yle X3M]], as well a TV channel, [[Yle Fem]].<ref>[https://svenska.yle.fi/ Svenska Yle, scroll to the bottom of the page]</ref>\n\n===Immigrant variants===\n[[Rinkeby Swedish]] (after [[Rinkeby]], a suburb of northern Stockholm with a large immigrant population) is a common name among linguists for varieties of Swedish spoken by young people of foreign heritage in certain suburbs and urban districts in the major cities of Stockholm, [[Gothenburg]] and [[Malm\u00f6]]. These varieties could alternatively be classified as [[sociolect]]s, because the immigrant dialects share common traits independent of their geographical spread or the native country of the speakers. However, some studies have found distinctive features and led to terms such as Roseng\u00e5rd Swedish (after [[Roseng\u00e5rd]] in Malm\u00f6), a variant of [[Scanian dialect|Scanian]].<ref>{{citation|url=http://person.sol.lu.se/PetraBoden/papers/Ey_mannen_wazzup.htm |title=Ey, mannen! Wazzup? / P\u00e5 jakt efter \"roseng\u00e5rdssvenskan\" |last=Bod\u00e9n |first=Petra |publisher=Institutionen f\u00f6r nordiska spr\u00e5k och Institutionen f\u00f6r lingvistik, [[Lunds universitet]] |url-status=dead |archive-url=https://web.archive.org/web/20080506132803/http://person.sol.lu.se/PetraBoden/papers/Ey_mannen_wazzup.htm |archive-date=6 May 2008 }}</ref> A survey made by the Swedish linguist [[Ulla-Britt Kotsinas]] showed that foreign learners had difficulties in guessing the origins of Rinkeby Swedish speakers in Stockholm. The greatest difficulty proved to be identifying the speech of a boy speaking Rinkeby Swedish whose parents were both Swedish; only 1.8% guessed his native language correctly.<ref>{{Harvnb|Kotsinas|1994|p=151}}</ref>\n\nNew linguistic practices in multilingual urban contexts in fiction and hip-hop culture and rap lyrics have been introduced that goes beyond traditional socio-linguistic domains.<ref>https://www.academia.edu/13820691/Multilingual_urban_Scandinavia</ref> K\u00e4llstr\u00f6m (Chapter 12) and Knudsen (Chapter 13).\n\n==Sample==\nExcerpt from ''[[Barfotabarn]]'' (1933), by [[Nils Ferlin]] (1898\u20131961):{{sfn|Ferlin|1976}}\n{| border=\"0\" style=\"width:100%; text-align:left;\"\n|-\n!|Original\n!|Free translation\n|-\n|''Du har tappat ditt ord och din papperslapp'',\n|\"You have lost your word and your paper note,\n|-\n|''du barfotabarn i livet.''\n|you barefooted child in life.\n|-\n|''S\u00e5 sitter du \u00e5ter p\u00e5 handlar'ns trapp''\n|So you sit on the porch of the grocer anew\n|-\n|''och gr\u00e5ter s\u00e5 \u00f6vergivet.''\n|and cry so abandoned.\n|-\n|''Vad var det f\u00f6r ord \u2013 var det l\u00e5ngt eller kort'',\n|What word was it \u2013 was it long or short,\n|-\n|''var det v\u00e4l eller illa skrivet?''\n|was it well or poorly written?\n|-\n|''T\u00e4nk efter nu \u2013 f\u00f6rr'n vi f\u00f6ser dig bort'',\n|Think twice now \u2013 before we shove you away,\n|-\n|''du barfotabarn i livet.''\n|you barefooted child in life.\"\n|}\n\n==See also==\n* [[Languages of Sweden]]\n* [[Languages of Finland]]\n* [[Swedish as a foreign language]]\n* [[Swenglish]]\n\n==Notes==\n{{Reflist|30em}}\n\n==References==\n{{Refbegin}}\n* {{citation\n|last=Andersson\n|first=Erik\n|editor-last=K\u00f6nig\n|editor-first=Ekkehard\n|editor2-last=van der Auwera\n|editor2-first=Johan\n|year=2002\n|chapter=Swedish\n|title=The Germanic Languages\n|series=Routledge language family descriptions\n|publisher=Routledge\n|isbn=978-0-415-28079-2\n|pages=271\u2013312\n}}\n* {{Citation\n|last = Bergman\n|first = G\u00f6sta\n|year = 1984\n|title = Kortfattad svensk spr\u00e5khistoria\n|edition = 4th\n|place = Stockholm\n|publisher = Prisma\n|series = Prisma Magnum\n|isbn = 978-91-518-1747-7\n|oclc = 13259382\n|language = Swedish\n}}\n* {{Citation\n|last = Bolander\n|first = Maria\n|year = 2002\n|title = Funktionell svensk grammatik\n|place = Stockholm\n|publisher = Liber\n|isbn = 978-91-47-05054-3\n|oclc = 67138445\n|language = Swedish\n}}\n* {{Citation\n|last = Crystal\n|first = David\n|author-link = David Crystal\n|year = 1999\n|edition = 2nd\n|title = The Penguin dictionary of language\n|place = London\n|publisher = [[Penguin Books]]\n|isbn = 978-0-14-051416-2\n|oclc = 59441560\n}}\n* {{Citation\n|last = Dahl\n|first = \u00d6sten\n|year = 2000\n|title = Spr\u00e5kets enhet och m\u00e5ngfald\n|place = Lund\n|publisher = [[Studentlitteratur]]\n|isbn = 978-91-44-01158-5\n|oclc = 61100963\n|language = Swedish\n}}\n* {{Citation\n| editor1-last = Dahl\n| editor1-first = \u00d6sten\n| editor2-last = Edlund\n| editor2-first = Lars-Erik\n|year = 2010\n|title = Sveriges nationalatlas. Spr\u00e5ken i Sverige\n|place = Stockholm\n|publisher = Kungl. Vitterhets historie och antikvitets akademien \n|isbn = 978-91-87-76057-0\n|oclc =\n|language = Swedish\n}}\n* {{Citation\n|last = Elert\n|first = Claes-Christian\n|year = 2000\n|title = Allm\u00e4n och svensk fonetik\n|edition = 8th\n|place = Stockholm\n|publisher = Norstedts Akademiska F\u00f6rlag\n|isbn = 978-91-1-300939-1\n|oclc =\n|language = Swedish\n}}\n* {{Citation\n|last = Engstrand\n|first = Olle\n|year = 1999\n|chapter = Swedish\n|title = Handbook of the International Phonetic Association: A Guide to the usage of the International Phonetic Alphabet.\n|place = Cambridge\n|publisher = Cambridge University Press\n|isbn = 978-0-521-63751-0\n|oclc = 40305532\n|pages = 140\u2013142\n}}\n* {{Citation\n|last = Engstrand\n|first = Olle\n|year = 2004\n|title = Fonetikens grunder\n|place = Lund\n|publisher = Studentlitteratur\n|isbn = 978-91-44-04238-1\n|oclc = 66026795\n|language = Swedish\n}}\n* {{Citation\n|last = Ferlin\n|first = Nils\n|title = Barfotabarn\n|year = 1976\n|orig-year=1933\n|place = Stockholm\n|publisher = Bonnier\n|isbn = 978-91-0-024187-2\n|language = Swedish\n }}\n* {{Citation\n|last = Garl\u00e9n\n|first = Claes\n|year = 1988\n|title = Svenskans fonologi\n|place = Lund\n|publisher = Studentlitteratur\n|isbn = 978-91-44-28151-3\n|oclc = 67420810\n|language = Swedish\n}}\n* {{Citation\n|last = Granberry\n|first = Julian\n|year = 1991\n|title = Essential Swedish Grammar\n|place = New York\n|publisher = [[Dover Publications]]\n|isbn = 978-0-486-26953-5\n|oclc = 23692877\n}}\n* {{cite book\n|last=Haugen\n|first=Einar\n|year=2009\n|chapter=Danish, Norwegian and Swedish\n|title=The World's Major Languages\n|editor=Bernard Comrie\n|pages=125\u2013144\n|location= New York\n|publisher=Routledge\n|isbn = 978-0-415-35339-7\n|ref=harv}}\n* {{Citation\n|last = Hultman\n|first = Tor G.\n|year = 2003\n|title = Svenska Akademiens spr\u00e5kl\u00e4ra\n|place = Stockholm\n|publisher = Norstedts\n|isbn = 978-9172273511\n|oclc = 55849724\n|language = Swedish\n}}\n* {{Citation\n|last = Josephson\n|first = Olle\n|year = 2005\n|title = Ju: ifr\u00e5gasatta sj\u00e4lvklarheter om svenskan, engelskan och alla andra spr\u00e5k i Sverige\n|edition = 2nd\n|place = Stockholm\n|publisher = Nordstedts ordbok\n|isbn = 978-91-7227-446-4\n|language = Swedish\n }}\n* {{Citation\n|last = Kotsinas\n|first = Ulla-Britt\n|year = 1994\n|title = Ungdomsspr\u00e5k\n|place = Uppsala\n|publisher = Hallgren & Fallgren\n|isbn = 978-91-7382-718-8\n|oclc = 60994967\n|language = Swedish\n}}\n* {{Citation\n|last = Leinonen\n|first = Therese\n|title = Aggregate analysis of vowel pronunciation in Swedish dialects\n|journal = Oslo Studies in Language\n|volume = 3\n|issue = 2\n|year = 2011\n|url = https://www.journals.uio.no/index.php/osla/article/view/101\n }}\n* [[Nationalencyklopedin]], [http://www.ne.se/svenska online edition] {{in lang|sv}}\n* {{Citation\n|last = Parkvall\n|first = Mikael\n|title = Sveriges spr\u00e5k. Vem talar vad och var?\n|journal = RAPPLING 1. Rapporter Fr\u00e5n Institutionen f\u00f6r Lingvistik Vid Stockholms Universitet.\n|year = 2009\n|url = http://www.spr\u00e5kf\u00f6rsvaret.se/sf/fileadmin/PDF/Parkvall_spraakstatistik.pdf\n|language = Swedish\n }}\n* {{Citation\n|last = Pettersson\n|first = Gertrud\n|year = 1996\n|title = Svenska spr\u00e5ket under sjuhundra \u00e5r: en historia om svenskan och dess utforskande\n|place = Lund\n|publisher = Studentlitteratur\n|isbn = 978-91-44-48221-7\n|oclc = 36130929\n|language = Swedish\n}}\n* {{Citation\n|author = Svenska spr\u00e5kn\u00e4mnden\n|authorlink = Svenska spr\u00e5kn\u00e4mnden\n|title = Svenska skrivregler\n|edition = 2nd\n|year = 2000\n|publication-date = 2002\n|publisher = Liber\n|place = Stockholm\n|isbn = 978-91-47-04974-5\n|language = Swedish\n}}\n* {{Citation\n|last = Svensson\n|first = Lars\n|year = 1974\n|title = Nordisk paleografi: Handbok med transkriberade och kommenterade skriftprov\n|place = Lund\n|publisher = Studentlitteratur\n|isbn = 978-91-44-05391-2\n|oclc = 1303752\n|language = Swedish\n}}\n* {{Citation\n|last=Wess\u00e9n\n|first=Elias\n|title=V\u00e5ra ord: deras uttal och ursprung : kortfattad etymologisk ordbok\n|edition=2nd\n|year=1998\n|origyear=1973\n|publisher=Norstedts\n|location=Stockholm\n|language=sv\n|isbn=978-91-7227-053-4\n}}\n{{Refend}}\n\n==Further reading==\n* ''Swedish Essentials of Grammar'' Viberg, \u00c5ke; et al. (1991) Chicago: Passport Books. {{ISBN|0-8442-8539-0}}\n* ''Swedish: An Essential Grammar''. Holmes, Philip; Hinchliffe, Ian; (2000). London; New York: Routledge. {{ISBN|0-415-16048-0}}.\n* ''Swedish: A Comprehensive Grammar Second Edition''. Holmes, Philip; Hinchliffe, Ian; (2003). London; New York: Routledge. {{ISBN|0-415-27884-8}}.\n* ''Svenska utifr\u00e5n. Schematic grammar-Swedish structures and everyday phrases'' Byrman, Gunilla; Holm, Britta; (1998) {{ISBN|91-520-0519-4}}.\n\n==External links==\n{{InterWiki|code=sv}}\n{{Wikibooks|Swedish}}\n{{Wiktionary category|Swedish language}}\n{{Wikivoyage|Swedish phrasebook|Swedish|a phrasebook}}\n{{NIE Poster|year=1905|Swedish Language and Literature|Swedish language}}\n* [http://en.wiktionary.org/wiki/Appendix:Swedish_Swadesh_list Swadesh list of Swedish basic vocabulary words] (from Wiktionary's [http://en.wiktionary.org/wiki/Appendix:Swadesh_lists Swadesh-list appendix])\n* [http://lexin2.nada.kth.se/swe-eng.html Swedish-English]/[http://lexin2.nada.kth.se/sve-ara.html Swedish-Arabic]/[http://lexin2.nada.kth.se/sve-rys.html Swedish-Russian]/[http://lexin2.nada.kth.se/sve-spa.html Swedish-Spanish] Dictionaries from [http://lexin2.nada.kth.se/ Spr\u00e5kr\u00e5det \u2013 Institute for Language and Folklore]\n* [http://folkets-lexikon.csc.kth.se/folkets/folkets.en.html People's dictionary]\n* [https://www.saob.se Online version] of ''[[Svenska Akademiens ordbok]]'' (Swedish)\n\n{{Swedish language|state=expanded}}\n{{Languages of Sweden}}\n{{Languages of Finland}}\n{{Germanic languages}}\n\n{{Authority control}}\n\n[[Category:Swedish language| ]]\n[[Category:Languages of Finland]]\n[[Category:Languages of Estonia]]\n[[Category:Languages of Sweden]]\n[[Category:East Scandinavian languages]]\n[[Category:North Germanic languages]]\n[[Category:Scandinavian culture]]\n[[Category:Stress-timed languages]]\n[[Category:Subject\u2013verb\u2013object languages]]\n[[Category:Tonal languages in non-tonal families]]\n[[Category:Verb-second languages]]\n", "text_old": "{{short description|North Germanic language spoken in Sweden and Finland}}\n{{Use dmy dates|date=June 2011}}\n{{Infobox language\n| name = Swedish\n| nativename = ''svenska''\n| pronunciation = {{IPA-sv|\u02c8sv\u025b\u0302n\u02d0ska|}}\n| states = [[Sweden]], [[Finland]], [[Estonia]]\n| region = \n| ethnicity = [[Swedes]]\n| speakers = {{sigfig|10|2}} million<br/>[[Second language|L2 speakers]]: 3.2 million\n| date = 2018\n| ref = <ref name=ethnologue>[https://www.ethnologue.com/language/swe Ethnologue 21st Edition], retrieved 21 February 2018</ref>\n| familycolor = Indo-European\n| fam2 = [[Germanic languages|Germanic]]\n| fam3 = [[North Germanic languages|North Germanic]]\n| fam4 = East Scandinavian\n| ancestor = [[Old Norse language|Old Norse]]\n| ancestor2 = [[Old East Norse]]\n| ancestor3 = [[Old Swedish]]\n| script = [[Latin script|Latin]] ([[Swedish alphabet]])<br/>[[Swedish Braille]]\n| nation = {{SWE|Sweden}}<br />{{FIN|Finland}}<br />{{flag|\u00c5land Islands}}<br/>''{{EU|European Union}}''<br />''{{flag|Nordic Council}}''<!--Do not add Estonia here without first reading the talkpage.-->\n| agency = [[Swedish Language Council]] (in Sweden) <br />[[Swedish Academy]] (in Sweden)<br/>[[Institute for the Languages of Finland]] (in Finland)\n| iso1 = sv\n| iso2 = swe\n| iso3 = swe\n| lingua = 52-AAA-ck to -cw\n| map = Distribution-sv.png\n| mapcaption = Major Swedish-speaking areas\n| notice = IPA\n| sign = [[Swedish Sign Language]]<br>[[Tecknad svenska]] (falling out of use)\n| ancestor4 = [[Modern Swedish]]\n| glotto = swed1254\n| glottorefname = Swedish\n}}\n\n'''Swedish''' ({{lang|sv|svenska}} {{IPA-sv|\u02c8sv\u025b\u0302n\u02d0ska||Sv-svenska.ogg}}) is a [[North Germanic language]] spoken [[First language|natively]] by 10 million people, predominantly in [[Sweden]] (as the sole official language) and in parts of [[Finland]], where it has equal legal standing with [[Finnish language|Finnish]]. It is largely [[mutually intelligible]] with [[Norwegian language|Norwegian]] and [[Danish language|Danish]], although the degree of mutual intelligibility is largely dependent on the [[dialect]] and accent of the speaker. Written Norwegian and Danish are usually more easily understood by Swedish speakers than the spoken languages, due to the differences in [[Tone (linguistics)|tone]], accent and intonation. Swedish is a descendant of [[Old Norse]], the common language of the [[Germanic peoples]] living in Scandinavia during the [[Viking Era]]. It has the most speakers of the North Germanic languages.\n\n[[Standard Swedish]], spoken by most [[Swedes]], is the [[national language]] that evolved from the Central Swedish dialects in the 19th century and was well established by the beginning of the 20th century. While distinct regional [[Variety (linguistics)|varieties]] descending from the older rural dialects still exist, the spoken and written language is uniform and [[Standard language|standardized]].\n\nThe standard word order is, as in most [[Germanic languages]], [[V2 word order|V2]], which means that the [[finite verb]] (V) appears in the second position (2) of a declarative [[main clause]]. [[Swedish morphology]] is similar to English; that is, words have comparatively few [[inflections]]. Swedish has two [[grammatical gender|genders]] and is generally seen to have two [[grammatical cases]] \u2013 [[nominative]] and [[genitive]] (except for pronouns that, as in English, also are inflected in the [[Object (grammar)|object]] form) \u2013 although it is debated if the genitive in Swedish should be seen as a genitive case or just the nominative plus the so-called genitive ''s'', then seen as a [[clitic]]. Swedish has two [[Grammatical number|grammatical numbers]] \u2013 [[plural]] and [[Grammatical number|singular]]. [[Adjectives]] have discrete [[Comparison (grammar)|comparative and superlative]] forms and are also inflected according to gender, number and [[definiteness]]. The definiteness of nouns is marked primarily through [[suffixes]] (endings), complemented with separate definite and indefinite [[article (grammar)|articles]]. The [[prosody (linguistics)|prosody]] features both [[stress (linguistics)|stress]] and in most dialects tonal qualities. The language has a comparatively large [[vowel]] inventory. Swedish is also notable for the [[voiceless dorso-palatal velar fricative]], a highly variable consonant [[phoneme]].\n\nSwedish has also had historic use in [[Estonia]], although the current status of the [[Estonian Swedish]] speakers is almost extinct. Instead, it is used in the [[Swedish diaspora]], most notably in [[Oslo]], [[Norway]], with more than 50,000 resident Swedes.<ref>{{cite web|url=https://sverige-norge.se/var-tionde-oslobo-ar-nu-svensk/|title=Var tionde Oslobo \u00e4r nu svensk|publisher=Sverige-Norge Personalf\u00f6rmedling|language=sv|accessdate=11 October 2018}}</ref>\n\n==Classification==\nSwedish is an [[Indo-European language]] belonging to the [[North Germanic languages|North Germanic]] branch of the [[Germanic languages]]. In the established classification, it belongs to the [[East Scandinavian languages]], together with [[Danish language|Danish]], separating it from the [[West Scandinavian languages]], consisting of [[Faroese language|Faroese]], [[Icelandic language|Icelandic]], and [[Norwegian language|Norwegian]]. However, more recent analyses divide the North Germanic languages into two groups: ''Insular Scandinavian'' (Faroese and Icelandic), and ''Continental Scandinavian'' (Danish, Norwegian, and Swedish), based on mutual intelligibility due to heavy influence of East Scandinavian (particularly Danish) on Norwegian during the last millennium and divergence from both Faroese and Icelandic.<ref name=\"crystal\"/>\n\nBy many general criteria of mutual intelligibility, the Continental Scandinavian languages could very well be considered [[dialect]]s of a common Scandinavian language. However, because of several hundred years of sometimes quite intense rivalry between [[Denmark]] and Sweden, including a long series of wars from the 16th to 18th centuries, and the [[nationalist]] ideas that emerged during the late 19th and early 20th centuries, the languages have separate [[Orthography|orthographies]], dictionaries, grammars, and regulatory bodies. Danish, Norwegian, and Swedish are thus from a linguistic perspective more accurately described as a [[dialect continuum]] of Scandinavian (North Germanic), and some of the dialects, such as those on the border between Norway and Sweden, especially parts of [[Bohusl\u00e4n]], [[Dalsland]], western [[V\u00e4rmland]], western [[Dalarna]], [[H\u00e4rjedalen]], [[J\u00e4mtland]], and [[Scania]], could be described as intermediate dialects of the national standard languages.<ref name=\"crystal\">{{Harvnb|Crystal|1999|loc=''Scandinavian''}}</ref>\n\nSwedish pronunciations also vary greatly from one region to another, a legacy of the vast geographic distances and historical isolation. Even so, the vocabulary is standardized to a level that make dialects within Sweden virtually fully mutually intelligible.\n\n==History==\n{{Main|History of Swedish}}\n\n===Old Norse===\n{{Main|Old Norse}}\n{{Old Norse language map}}\nIn the 8th century, the common Germanic language of Scandinavia, [[Proto-Norse language|Proto-Norse]], evolved into Old Norse. This language underwent more changes that did not spread to all of Scandinavia, which resulted in the appearance of two similar dialects: ''Old West Norse'' (Norway, the Faroe Islands and Iceland) and ''Old East Norse'' (Denmark and Sweden). The dialects of Old East Norse spoken in Sweden are called ''[[Runic Swedish]]'', while the dialects of Denmark are referred to as ''Runic Danish''. The dialects are described as \"runic\" because the main body of text appears in the [[runic alphabet]]. Unlike Proto-Norse, which was written with the [[Elder Futhark]] alphabet, Old Norse was written with the [[Younger Futhark]] alphabet, which had only 16 letters. Because the number of runes was limited, some runes were used for a range of [[phoneme]]s, such as the rune for the vowel ''u'', which was also used for the vowels ''o'', ''\u00f8'' and ''y'', and the rune for ''i'', also used for ''e''.<ref name=Edlund2010p26-31>Lars-Erik Edlund, \"Spr\u00e5khistorisk \u00f6versikt\" in {{harvnb|Dahl|Edlund|2010|pp=26\u201331}}</ref>\n\nFrom 1200 onwards, the dialects in Denmark began to diverge from those of Sweden. The innovations spread unevenly from Denmark which created a series of minor dialectal boundaries, or [[isogloss]]es, ranging from [[Zealand (Denmark)|Zealand]] in the south to [[Norrland]], [[Ostrobothnia (historical province)|\u00d6sterbotten]] and northwestern [[Finland]] in the north.<ref name=Edlund2010p26-31/>\n\nAn early change that separated Runic Danish from the other dialects of Old East Norse was the change of the [[diphthong]] ''\u00e6i'' to the [[monophthong]] ''\u00e9'', as in ''st\u00e6inn'' to ''st\u00e9nn'' \"stone\". This is reflected in runic inscriptions where the older read ''stain'' and the later ''stin''. There was also a change of ''au'' as in ''dau\u00f0r'' into a long open ''\u00f8'' as in ''d\u00f8\u00f0r'' \"dead\". This change is shown in runic inscriptions as a change from ''tau\u00fer'' into ''tu\u00fer''. Moreover, the ''\u00f8y'' diphthong changed into a long, [[close vowel|close]] ''\u00f8'', as in the Old Norse word for \"island\". By the end of the period, these innovations had affected most of the Runic Swedish-speaking area as well, with the exception of the dialects spoken north and east of [[M\u00e4lardalen]] where the diphthongs still exist in remote areas.<ref>{{Harvnb|Bergman|1984|pp=21\u201323}}</ref>\n\n===Old Swedish===\n[[File:V\u00e4stg\u00f6talagen blad 21.jpg|thumb|right|The initial page of the first complete copy of ''[[V\u00e4stg\u00f6talagen]]'', the [[code of law|law code]] of [[V\u00e4sterg\u00f6tland]], from {{circa|1280}}. It is one of the earliest texts in Swedish written in the [[Latin script]].]]\n{{Main|Old Swedish}}\nOld Swedish (Swedish: ''fornsvenska'') is the term used for the [[medieval]] Swedish language. The start date is usually set to 1225 since this is the year that ''[[V\u00e4stg\u00f6talagen]]'' (\"the V\u00e4stg\u00f6ta Law\") is believed to have been compiled for the first time.<ref>The oldest dated fragments are from 1250 and the oldest complete manuscript is from c. 1280</ref> It is among the most important documents of the period written in [[Latin script]] and the oldest Swedish [[code of law|law codes]]. Old Swedish is divided into ''\u00e4ldre fornsvenska'' (1225\u20131375) and ''yngre fornsvenska'' (1375\u20131526), \"older\" and \"younger\" Old Swedish.<ref>Lars-Erik Edlund, \"Spr\u00e5khistorisk \u00f6versikt\" in {{harvnb|Dahl|Edlund|2010|pp=28\u201329}}</ref> Important outside influences during this time came with the firm establishment of the [[Roman Catholic Church|Christian church]] and various [[Monasticism|monastic]] orders, introducing many [[Greek language|Greek]] and [[Latin]] loanwords. With the rise of [[Hanseatic league|Hanseatic]] power in the late 13th and early 14th century, [[Middle Low German]] became very influential. The Hanseatic league provided Swedish commerce and administration with a large number of [[Low German]]-speaking immigrants. Many became quite influential members of Swedish medieval society, and brought terms from their native languages into the vocabulary. Besides a great number of loanwords for such areas as warfare, trade and administration, general grammatical suffixes and even conjunctions were imported. The League also brought a certain measure of influence from [[Danish language|Danish]] (at the time much more similar than today's language).<ref name=Edlund2010p29,31>Lars-Erik Edlund, \"Spr\u00e5khistorisk \u00f6versikt\" in {{harvnb|Dahl|Edlund|2010|pp=29, 31}}</ref>\n\nEarly Old Swedish was markedly different from the modern language in that it had a more complex [[case (linguistics)|case]] structure and also retained the original Germanic three-[[gender (grammar)|gender]] system. [[Noun]]s, [[adjective]]s, [[pronoun]]s and certain [[Grammatical number|numerals]] were inflected in four cases; besides the extant [[Nominative case|nominative]], there were also the [[Genitive case|genitive]] (later [[possessive case|possessive]]), [[Dative case|dative]] and [[Accusative case|accusative]]. The gender system resembled that of modern [[German language|German]], having masculine, feminine and neuter genders. The masculine and feminine genders were later merged into a ''common gender'' with the [[Definiteness|definite suffix]] ''-en'' and the [[definite article]] ''den'', in contrast with the neuter gender equivalents ''-et'' and ''det''. The verb system was also more complex: it included [[subjunctive]] and [[Imperative mood|imperative]] [[mood (grammar)|moods]] and verbs were conjugated according to [[person (grammar)|person]] as well as [[number (grammar)|number]]. By the 16th century, the case and gender systems of the colloquial spoken language and the profane literature had been largely reduced to the two cases and two genders of modern Swedish.<ref>{{Harvnb|Pettersson|1996|pp=150\u2013157}}</ref>\n\nA transitional change of the Latin script in the Nordic countries was to spell the letter combination \"ae\" as \u00e6 \u2013 and sometimes as a' \u2013 though it varied between persons and regions. The combination \"ao\" was similarly rendered a<sup>o</sup>, and \"oe\" became o<sup>e</sup>. These three were later to evolve into the separate letters [[\u00e4]], [[\u00e5]] and [[\u00f6]].<ref>{{Harvnb|Pettersson|1996|p=139}}</ref> The first time the new letters were used in print was in ''Aff dy\u00e4ffwlsens fr\u00e4stilse'' (\"By the Devil's temptation\") published by [[Johan Gerson]] in 1495.<ref>Lars-Erik Edlund, \"Spr\u00e5khistorisk \u00f6versikt\" in {{harvnb|Dahl|Edlund|2010|p=29}}</ref>\n\n===Modern Swedish===\n{{Main|Modern Swedish}}\n[[File:Gustav Vasa Bible 1541.jpg|thumb|upright|Front page of [[Gustav Vasa]]'s Bible from 1541, using [[Fraktur (script)|Fraktur]]. The title translated to English reads: \"The Bible / That is / The Holy Scripture / in Swedish. Printed in [[Uppsala]]. 1541\".]]\n\nModern Swedish (Swedish: ''nysvenska'') begins with the advent of the [[printing press]] and the European [[Protestant Reformation|Reformation]]. After assuming power, the new monarch [[Gustav Vasa]] ordered a Swedish translation of the [[Bible]]. The [[New Testament]] was published in 1526, followed by a full [[Bible translation]] in 1541, usually referred to as the ''[[Gustav Vasa Bible]]'', a translation deemed so successful and influential that, with revisions incorporated in successive editions, it remained the most common Bible translation until 1917. The main translators were [[Laurentius Andre\u00e6]] and the brothers [[Laurentius Petri|Laurentius]] and [[Olaus Petri]].<ref>Lars-Erik Edlund, \"Spr\u00e5khistorisk \u00f6versikt\" in {{harvnb|Dahl|Edlund|2010|p=33}}</ref>\n\nThe Vasa Bible is often considered to be a reasonable compromise between old and new; while not adhering to the colloquial spoken language of its day, it was not overly conservative in its use of archaic forms.<ref>{{Harvnb|Pettersson|1996|p=151}}</ref> It was a major step towards a more consistent [[Swedish orthography]]. It established the use of the vowels \"\u00e5\", \"\u00e4\", and \"\u00f6\", and the spelling \"ck\" in place of \"kk\", distinguishing it clearly from the Danish Bible, perhaps intentionally, given the ongoing rivalry between the countries. All three translators came from central Sweden which is generally seen as adding specific Central Swedish features to the new Bible.<ref>{{cite book |title=The Nordic Languages |url=https://books.google.com/books?id=Z17C7s3r_nwC&pg=PA1900 |year=2005 |publisher=Walter de Gruyter |isbn=978-3-11-019706-8 |page=1900}}</ref>\n\nThough it might seem as if the Bible translation set a very powerful precedent for orthographic standards, spelling actually became more inconsistent during the remainder of the century. It was not until the 17th century that spelling began to be discussed, around the time when the first grammars were written.<ref name=\"Gr\u00fcnbaum2012\">{{cite web |author=Gr\u00fcnbaun, Katharina |url=http://www.sweden.se/upload/Sweden_se/otherlanguages/factsheets/SI/Svenska_spraket.pdf |title=Svenska spr\u00e5ket |trans-title=The Swedish language |date=2012 |publisher=Svenska institutet |language=Swedish |url-status=dead |archive-url=https://web.archive.org/web/20121025181238/http://www.sweden.se/upload/Sweden_se/otherlanguages/factsheets/SI/Svenska_spraket.pdf |archive-date=25 October 2012 |df=dmy-all }}</ref> [[Capitalization]] during this time was not standardized. It depended on the authors and their background. Those influenced by [[German language|German]] capitalized all nouns, while others capitalized more sparsely. It is also not always apparent which letters are capitalized owing to the Gothic or [[blackletter]] typeface which was used to print the Bible. This typeface was in use until the mid-18th century, when it was gradually replaced with a Latin typeface (often [[Antiqua (typeface class)|antiqua]]).<ref>{{cite book |last1=Bandle |first1=Oskar |last2=Elmevik |first2=Lennart |last3=Widmark |first3=Gun |title=The Nordic Languages |url=https://books.google.com/books?id=RqkBXIJkkuEC&pg=PA517 |year=2002 |publisher=Walter de Gruyter |isbn=978-3-11-014876-3 |page=517}}</ref>\n\nSome important changes in sound during the Modern Swedish period were the gradual assimilation of several different consonant clusters into the [[voiceless alveolar fricative|fricative]] {{IPA|[\u0283]}} and later into {{IPA|[\u0267]}}. There was also the gradual softening of {{IPA|[\u0261]}} and {{IPA|[k]}} into {{IPA|[j]}} and the [[voiceless alveolopalatal fricative|fricative]] {{IPA|[\u0255]}} before [[front vowel]]s. The [[voiced velar fricative|velar fricative]] {{IPA|[\u0263]}} was also transformed into the corresponding [[voiced velar plosive|plosive]] {{IPA|[\u0261]}}.<ref>{{Harvnb|Pettersson|1996|p=138}}</ref>\n\n[[File:August Strindberg.jpg|upright=0.8|thumb|[[August Strindberg]], one of the most influential writers in modern Swedish literature.]]\n\n===Contemporary Swedish===\n[[File:Dem-dom.jpg|thumb|right|A sign on the wall of a Swedish hotel, using both the recommended<ref>{{cite book |last1=Svanlund |first1=Jan (Ed.) |title=Spr\u00e5kriktighetsboken |date=2013 |publisher=Svenska spr\u00e5kn\u00e4mnden and Norstedts |isbn=978-91-1-304370-8 |pages=210-211 |edition=2}}</ref> ''dem'' and the colloquial ''dom'' for the word \"them\" on the same sign.]]\nThe period that includes Swedish as it is spoken today is termed ''nusvenska'' (lit., \"Now-Swedish\") in linguistics, and started in the last decades of the 19th century. It saw a democratization of the language with a less formal written form that approached the spoken one. The growth of a public school system also led to the evolution of so-called ''boksvenska'' (literally, \"book Swedish\"), especially among the working classes, where spelling to some extent influenced pronunciation, particularly in official contexts. With the industrialization and urbanization of Sweden well under way by the last decades of the 19th century, a new breed of authors made their mark on [[Swedish literature]]. Many scholars, politicians and other public figures had a great influence on the emerging national language, among them prolific authors like the poet [[Gustaf Fr\u00f6ding]], Nobel laureate [[Selma Lagerl\u00f6f]], and radical writer and playwright [[August Strindberg]].<ref>{{Harvnb|Josephson|2005|loc=chapter 2}}</ref>\n\nIt was during the 20th century that a common, standardized national language became available to all Swedes. The orthography finally stabilized and became almost completely uniform, with some minor deviations, by the time of the spelling reform of 1906.<ref>{{cite book |title=Sociolinguistics |url=https://books.google.com/books?id=MGl35Q3W5twC&pg=PA1751 |year=2006 |publisher=Walter de Gruyter |isbn=978-3-11-019987-1 |page=1751}}</ref> With the exception of plural forms of verbs and a slightly different syntax, particularly in the written language, the language was the same as the Swedish of today. The plural verb forms appeared decreasingly in formal writing into the 1950s, when their use was removed from all official recommendations.<ref>{{cite book|last1=Taavitsainen |first1=Irma |last2=Melchers |first2=Gunnel |last3=Pahta |first3=P\u00e4ivi |title=Writing in Nonstandard English |url=https://books.google.com/books?id=5cQ9AAAAQBAJ&pg=PA302|year=2000 |publisher=John Benjamins Publishing |isbn=978-90-272-9903-1 |page=302}}</ref><ref>{{cite book|last1=Bandle|first1=Oskar |last2=Braunmuller|first2=Kurt |last3=Jahr|first3=Ernst Hakon|title=The Nordic Languages|url=https://books.google.com/books?id=6b7WwBC5tRAC&pg=PA1805|year=2005|publisher=Walter de Gruyter |isbn=978-3-11-017149-5|page=1805}}</ref>\n\nA very significant change in Swedish occurred in the late 1960s, with the so-called ''[[du-reformen]]'', \"the you-reform\". Previously, the proper way to address people of the same or higher social status had been by title and surname. The use of  ''herr'' (\"Mr\" or \"Sir\"), ''fru'' (\"Mrs\" or \"Ma'am\") or ''fr\u00f6ken'' (\"Miss\") was considered the only acceptable way to begin conversation with strangers of unknown occupation, academic title or military rank. The fact that the listener should preferably be referred to in the third person tended to further complicate spoken communication between members of society. In the early 20th century, an unsuccessful attempt was made to replace the insistence on titles with ''ni''\u2014the standard [[Grammatical person|second person plural]] pronoun)\u2014analogous to the [[French language|French]] ''vous''. (Cf. [[T-V distinction]].) ''Ni'' wound up being used as a slightly less familiar form of ''du'', the singular second person pronoun, used to address people of lower social status. With the liberalization and radicalization of Swedish society in the 1950s and 1960s, these class distinctions  became less important, and ''du'' became the standard, even in formal and official contexts. Though the reform was not an act of any centralized political decree, but rather the result of sweeping change in social attitudes, it was completed in just a few years, from the late 1960s to early 1970s.<ref>Nationalencyklopedin, ''du-tilltal'' and ''ni-tilltal''</ref> The use of ''ni'' as a polite form of address is sometimes encountered today in both the written and spoken language, particularly among older speakers.<ref>{{cite book|last1=Holmes|first1=Philip|last2=Hinchliffe|first2=Ian|title=Swedish: An Essential Grammar|url=https://books.google.com/books?id=XGasMbSR-8gC&pg=PA86|year=2008|publisher=Psychology Press|isbn=978-0-415-45800-9|page=86}}</ref>\n\n==Geographic distribution==\nSwedish is the sole official national language of [[Sweden]], and one of two in [[Finland]] (alongside [[Finnish language|Finnish]]). As of 2006, it was the first or sole native language of 7.5 to 8 million Swedish residents.{{sfn|Parkvall|2009|p=24}} In 2007 around 5.5% (c. 290,000) of the population of [[Finland]] were native speakers of Swedish,<ref name=\"StatsFinland\">[http://www.stat.fi/tup/suoluk/suoluk_vaesto_en.html#structure Population structure]. [[Statistics Finland]] (2007-03-29). Retrieved on 2007-11-27.</ref> partially due to a decline following the Russian annexation of Finland after the [[Finnish War]] 1808\u20131809.<ref>[http://finland.fi/public/default.aspx?contentid=160058&contentlan=2&culture=en-US Main outlines of Finnish History \u2013 thisisFINLAND].</ref> The [[Finland Swedish]] minority is concentrated in the coastal areas and [[archipelago]]s of southern and western Finland. In some of these areas, Swedish is the predominant language; in 19 [[municipality|municipalities]], 16 of which are located in [[\u00c5land]], Swedish is the sole official language. \u00c5land county is an autonomous region of Finland.<ref>{{citation|url=http://www.kommunerna.net/sv/kommuner/svensk-tvasprakiga/Sidor/default.aspx|title=Svensk- och tv\u00e5spr\u00e5kiga kommuner|work=kommunerna.net|date=February 2007|accessdate=3 December 2007|language=Swedish}}</ref>\n\nAccording to a rough estimation, as of 2010 there were up to 300,000 Swedish-speakers living outside Sweden and Finland. The largest populations were in the United States (up to 100,000), the UK, Spain and Germany (c. 30,000 each) and a large proportion of the remaining 100,000 in the Scandinavian countries, France, Switzerland, Belgium, the Netherlands, Canada and Australia.<ref>Mikael Parkvall & Gunvor Flodell, \"Sveriges spr\u00e5k ute i v\u00e4rlden\" in {{harvnb|Dahl|Edlund|2010|p=154}}</ref> Over 3 million people speak Swedish as a second language, with about 2,410,000 of those in Finland.<ref name=ethnologue/> According to a survey by the [[European Commission]], 44% of respondents from Finland who did not have Swedish as a native language considered themselves to be proficient enough in Swedish to hold a conversation.<ref>''[http://ec.europa.eu/public_opinion/archives/ebs/ebs_386_en.pdf Europeans and their languages] {{webarchive|url=https://web.archive.org/web/20160106183351/http://ec.europa.eu/public_opinion/archives/ebs/ebs_386_en.pdf |date=6 January 2016 }}'', Special Eurobarometer 386, 2012.</ref> Due to the close relation between the Scandinavian languages, a considerable proportion of speakers of Danish and especially Norwegian are able to understand Swedish.<ref>{{citation|last=Gooskens|first=Charlotte|year=2007|url=http://www.let.rug.nl/gooskens/pdf/publ_JMMD_2007.pdf|title=The Contribution of Linguistic Factors to the Intelligibility of Closely Related Languages|journal=Journal of Multilingual and Multicultural Development|volume=28|issue=6|pages=445\u2013467|doi=10.2167/jmmd511.0|citeseerx=10.1.1.414.7645}}</ref>\n\nThere is considerable migration between the [[Nordic countries]], but owing to the similarity between the cultures and languages (with the exception of [[Finnish language|Finnish]]), expatriates generally [[Assimilation (sociology)|assimilate]] quickly and do not stand out as a group. According to the 2000 [[United States Census]], some 67,000 people over the age of five were reported as Swedish speakers, though without any information on the degree of language proficiency.<ref>[http://www.usefoundation.org/userdata/file/Research/Languages/swedish.pdf Swedish] {{webarchive|url=https://web.archive.org/web/20160304203311/http://www.usefoundation.org/userdata/file/Research/Languages/swedish.pdf |date=4 March 2016 }}. [http://www.usefoundation.org/view/29 Many Languages, One America] {{webarchive|url=https://web.archive.org/web/20090525112805/http://www.usefoundation.org/view/29 |date=25 May 2009 }}. U.S. English Foundation (2005). Retrieved on 2015-02-27.</ref> Similarly, there were 16,915 reported Swedish speakers in Canada from the 2001 census.<ref>{{citation|url=http://www12.statcan.ca/english/census06/data/highlights/index.cfm |title=2006 Census: Highlight tables |publisher=2.statcan.ca |date= |accessdate=28 September 2008}}</ref> Although there are no certain numbers, some 40,000 Swedes are estimated to live in the [[London]] area in the [[United Kingdom]].<ref>{{citation|url=http://www.dn.se/nyheter/varlden/krisberedskap-pa-svenska-ambassaden-i-london |title=Krisberedskap p\u00e5 svenska ambassaden |publisher=[[Dagens Nyheter]] |date=22 July 2005 |accessdate=4 January 2012}}</ref> Outside Sweden and Finland, there are about 40,000 active learners enrolled in Swedish language courses.<ref>[http://www.studyinsweden.se/Learn-Swedish/University-courses-outside-Sweden/ Learn Swedish]. [http://www.studyinsweden.se/ Studyinsweden.se]. Retrieved on 2011-01-27.</ref>\n\n===Official status===\n[[File:Oikokatu.JPG|thumb|A [[Finnish language|Finnish]]/Swedish street sign in [[Helsinki]], [[Finland]] ]]\nSwedish is the official main language of Sweden.<ref>{{citation|url=http://www.sprakforsvaret.se/sf/fileadmin/PDF/spraklagen_200509.pdf|title=Spr\u00e5klagen|date=1 July 2009|work=Spr\u00e5kf\u00f6rsvaret|language=Swedish|accessdate=15 July 2009}}</ref><ref>{{citation|url=http://www.thelocal.se/20090701/20404/|title=Swedish becomes official 'main language'|last=Landes|first=David|date=1 July 2009|work=The Local|publisher=thelocal.se|accessdate=15 July 2009}}</ref> Swedish is also one of two official languages of Finland. In Sweden, it has long been used in local and state government, and most of the educational system, but remained only a ''de facto'' primary language with no official status in law until 2009. A bill was proposed in 2005 that would have made Swedish an official language, but failed to pass by the narrowest possible margin (145\u2013147) due to a [[Pair (parliamentary convention)|pairing-off]] failure.<ref>{{citation|url=http://www.svt.se/nyheter/inrikes/svenskan-blir-inte-officiellt-sprak|title=Svenskan blir inte officiellt spr\u00e5k|work=[[Sveriges Television]]|date=7 December 2005|accessdate=23 June 2006|language=Swedish}}</ref> A proposal for a broader language law, designating Swedish as the main language of the country and bolstering the status of the minority languages, was submitted by an expert committee to the Swedish Ministry of Culture in March 2008. It was subsequently enacted by the [[Riksdag]], and entered into effect on 1 July 2009.<ref>{{citation|url=http://www.regeringen.se/sb/d/10016/a/100959|title=V\u00e4rna spr\u00e5ken \u2013 f\u00f6rslag till spr\u00e5klag|work=[[Government Offices of Sweden]]|date=18 March 2008|accessdate=19 June 2008|language=Swedish}}</ref>\n\nSwedish is the sole official language of [[\u00c5land]] (an [[Autonomous entity|autonomous]] province under the [[sovereignty]] of [[Finland]]), where the vast majority of the 26,000 inhabitants speak Swedish as a first language. In Finland as a whole, Swedish is one of the two \"national\" languages, with the same official status as [[Finnish language|Finnish]] (spoken by the majority) at the state level and an official language in some [[municipalities of Finland|municipalities]].\n\nSwedish is one of the official languages of the [[European Union]], and one of the working languages of the [[Nordic Council]]. Under the [[Nordic Language Convention]], citizens of the [[Nordic countries]] speaking Swedish have the opportunity to use their native language when interacting with official bodies in other Nordic countries without being liable for interpretation or translation costs.<ref>{{citation|url=http://www.norden.org/avtal/sprak/sk/sprak_sprak.asp?lang=|title=Konvention mellan Sverige, Danmark, Finland, Island, och Norge om nordiska medborgares r\u00e4tt att anv\u00e4nda sitt eget spr\u00e5k i annat nordiskt land|work=[[Nordic Council]]|date=2 May 2007|accessdate=25 April 2007|language=Swedish|archiveurl=https://web.archive.org/web/20070418154217/http://www.norden.org/avtal/sprak/sk/sprak_sprak.asp?lang=|archivedate=18 April 2007}}</ref><ref>{{citation|url=http://www.norden.org/webb/news/news.asp?id=6777&lang=6|title=20th anniversary of the Nordic Language Convention|work=Nordic news|date=22 February 2007|accessdate=25 April 2007|language=Swedish}}</ref>\n\n===Regulatory bodies===\n[[File:Estonian archipelago (Saaremaa and Hiiumaa).jpg|thumb|right|Map of the [[West Estonian archipelago|Estonian islands]] which formerly housed \"''Coastal Swede''\" populations]]\n\nThe [[Swedish Language Council]] (''Spr\u00e5kr\u00e5det'') is the regulator of Swedish in Sweden but does not attempt to enforce control of the language, as for instance the ''[[Acad\u00e9mie fran\u00e7aise]]'' does for [[French language|French]]. However, many organizations and agencies require the use of the council's publication ''Svenska skrivregler'' in official contexts, with it otherwise being regarded as a ''de facto'' orthographic standard. Among the many organizations that make up the Swedish Language Council, the [[Swedish Academy]] (established 1786) is arguably the most influential. Its primary instruments are the glossary ''[[Svenska Akademiens ordlista]]'' (''SAOL'', currently in its 14th edition) and the dictionary ''[[Svenska Akademiens Ordbok]]'', in addition to various books on grammar, spelling and manuals of style. Although the dictionaries have a [[Linguistic prescription|prescriptive]] element, they mainly describe current usage.<ref>{{cite web |last1=Gellerstam |first1=Martin |title=Norm och bruk i SAOL|url=https://gupea.ub.gu.se/handle/2077/24007 |publisher=Nordisk forening for leksikografi i samarbeit med Nordisk spr\u00e5ksekretariat |accessdate=2 March 2018 |language=Swedish |date=2002}}</ref>\n\nIn Finland, a special branch of the [[Research Institute for the Languages of Finland]] has official status as the regulatory body for Swedish in Finland. Among its highest priorities is to maintain intelligibility with the language spoken in Sweden. It has published ''Finlandssvensk ordbok'', a dictionary about the differences between Swedish in Finland and Sweden.<ref>{{Cite journal|url = http://ojs.statsbiblioteket.dk/index.php/lexn/article/view/18709/16362|title = Normeringen i Finlandssvensk ordbok|last = af H\u00e4llstr\u00f6m|first = Charlotta|date = 2002|journal = LexicoNordica 9, 2002, S. 51\u201362|volume = 0|issue = 9|doi = |pmid = |accessdate = }}</ref>\n\n===Language minorities in Estonia and Ukraine===\nFrom the 13th to 20th century, there were [[Estonian Swedes|Swedish-speaking communities in Estonia]], particularly on the islands (e. g., [[Hiiumaa]], [[Vormsi]], [[Ruhnu]]; in Swedish, known as ''Dag\u00f6'', ''Orms\u00f6'', ''Run\u00f6'', respectively) along the coast of the [[Baltic Sea|Baltic]], communities which today have all disappeared. The Swedish-speaking minority was represented in [[parliament]], and entitled to use their native language in parliamentary debates. After the loss of Estonia to the [[Russian Empire]] in the early 18th century, around 1,000 Estonian Swedish speakers were forced to march to southern [[Ukraine]], where they founded a village, ''[[Gammalsvenskby]]'' (\"Old Swedish Village\"). A few elderly people in the village still speak Swedish and observe the holidays of the Swedish calendar, although the dialect is most likely facing extinction.<ref>The number of registered Swedes in Zmeyovka (the modern Ukrainian name of ''Gammalsvenskby'') in 1994 was 116 according to [[Nationalencyklopedin]], article ''svenskbyborna''.</ref>\n\nFrom 1918\u20131940, when Estonia was independent, the small Swedish community was well treated. Municipalities with a Swedish majority, mainly found along the coast, used Swedish as the administrative language and Swedish-Estonian culture saw an upswing. However, most Swedish-speaking people fled to Sweden before the end of [[World War II]], that is, before the invasion of Estonia by the Soviet army in 1944. Only a handful of speakers remain.<ref>''Nationalencyklopedin'', ''estlandssvenskar''.</ref>\n\n==Phonology==\n{{Main|Swedish phonology}}\n\n[[File:Swedish monophthongs chart.svg|thumb|right|The vowel phonemes of Central Standard Swedish<ref>{{Harvnb|Engstrand|1999|p=140}}</ref>]]\n\nSwedish dialects have either 17 or 18 vowel [[phoneme]]s, 9 long and 9 short. As in the other Germanic languages, including English, most long vowels are phonetically paired with one of the short vowels, and the pairs are such that the two vowels are of similar [[vowel quality|quality]], but with the short vowel being slightly lower and slightly centralized. In contrast to e.g. Danish, which has only tense vowels, the short vowels are slightly more lax, but the tense vs. lax contrast is not nearly as pronounced as in English, German or Dutch. In most dialects, the short vowel sound pronounced {{IPA|[\u025b]}} or {{IPA|[\u00e6]}} has merged with the short {{IPA|/e/}} (transcribed {{angbr IPA|\u025b}} in the chart below).<ref name=AndersonEngstrand>{{Harvnb|Andersson|2002|pp=271\u2013312}}; {{Harvnb|Engstrand|1999}}</ref>\n\nThere are 18 consonant phonemes, two of which, {{IPAslink|\u0267}} and {{IPA|/r/}}, vary considerably in pronunciation depending on the dialect and social status of the speaker. In many dialects, sequences of {{IPA|/r/}} (pronounced alveolarly) with a dental consonant result in [[retroflex consonant]]s; alveolarity of the pronunciation of {{IPA|/r/}} is a precondition for this retroflexion. {{IPA|/r/}} has a [[guttural R|guttural]] or \"French R\" pronunciation in the [[South Swedish dialects]]; consequently, these dialects lack [[retroflex consonant]]s.<ref>{{Harvnb|Garl\u00e9n|1988|pp=73\u201374}}</ref>\n\nSwedish is a [[stress-timed]] language, where the time intervals between [[Stress (linguistics)|stressed syllables]] are equal. However, when casually spoken, it tends to be [[syllable-timed]].<ref>{{cite journal|url=https://flov.gu.se/forskning/konferenser/fonetikkonferenser/fonetik2005|title=Fonetik 2005|last1=Eriksson|first1=Anders|last2=Abelin|first2=\u00c5sa|last3=Lindh|first3=Jonas|publisher=[[University of Gothenburg]]|date=May 2005|pp=34\u201336}}</ref> Any stressed syllable carries one of two [[tone (linguistics)|tones]], which gives Swedish much of its characteristic sound. [[Prosody (linguistics)|Prosody]] is often one of the most noticeable differences between dialects.<ref>{{Harvnb|Garl\u00e9n|1988}}</ref>\n\n{| class=\"wikitable\" style=\"text-align:center\"\n|- \n! colspan=\"2\"| \n! [[Bilabial consonant|Bilabial]]\n! [[Labiodental consonant|Labio-<br/>dental]]\n! [[Dental consonant|Dental]]\n! [[Retroflex consonant|Retroflex]]<br/>/[[Alveolar consonant|Alveolar]]\n! [[Palatal consonant|Palatal]]\n! [[Velar consonant|Velar]]\n! [[glottal consonant|Glottal]]\n|-\n!colspan=2| [[Nasal consonant|Nasal]]\n| {{IPA link|m}}\n| \n| {{IPA link|n\u032a|n}}\n| \n| \n| {{IPA link|\u014b}}\n| \n|-\n!rowspan=2| [[Stop consonant|Plosive]]\n! {{small|[[voicelessness|voiceless]]}}\n| {{IPA link|p}}\n| \n| {{IPA link|t\u032a|t}}\n| \n| \n| {{IPA link|k}}\n| \n|-\n! {{small|[[voice (phonetics)|voiced]]}}\n|rowspan=2| {{IPA link|b}}\n| \n|rowspan=2| {{IPA link|d\u032a|d}}\n| \n| \n|rowspan=2| {{IPA link|\u0261}}\n| \n|-\n!colspan=2| [[Approximant consonant|Approximant]]\n|rowspan=2| {{IPA link|v}}\n|rowspan=4| {{IPA|r}}\n|rowspan=2| {{IPA link|j}}\n|rowspan=3| {{IPA link|h}}\n|-\n!rowspan=2| [[Fricative consonant|Fricative]]\n! {{small|[[voice (phonetics)|voiced]]}}\n| \n| \n| \n|-\n! {{small|[[voicelessness|voiceless]]}}\n| \n| {{IPA link|f}}\n| {{IPA link|s\u032a|s}}\n| {{IPA link|\u0255}}\n| {{IPA link|\u0267}}\n|-\n!colspan=2| [[Trill consonant|Trill]]\n| \n| \n| \n| \n| \n| \n|-\n!colspan=2| [[Lateral consonant|Lateral]]\n| \n| \n| {{IPA link|l\u032a|l}}\n| \n| \n| \n| \n|}\n\n==Grammar==\n{{Main|Swedish grammar}}\nSwedish [[noun]]s and [[adjective]]s are declined in [[grammatical gender|genders]] as well as [[grammatical number|number]]. Nouns are of [[common gender]] (''en'' form) or [[neuter gender]] (''ett'' form).<ref>{{Harvnb|Granberry|1991|pp=18\u201319}}</ref> The gender determines the declension of the [[adjective]]s. For example, the word ''fisk'' (\"fish\") is a noun of common gender (''en fisk'') and can have the following forms:\n\n{| class=\"wikitable\"\n|-\n!\n! Singular\n! Plural\n|-\n! Indefinite form\n| ''fisk''\n| ''fiskar''\n|-\n! Definite form\n| ''fisken''\n| ''fiskarna''\n|}\n\nThe definite singular form of a noun is created by adding a suffix (''-en'', ''-n'', ''-et'' or ''-t''), depending on its gender and if the noun ends in a vowel or not. The definite articles ''den'', ''det'', and ''de'' are used for variations to the definitiveness of a noun. They can double as [[demonstrative]] [[pronoun]]s or [[Determiner (class)|demonstrative determiners]] when used with [[adverb]]s such as ''h\u00e4r'' (\"here\") or ''d\u00e4r'' (\"there\") to form ''den/det h\u00e4r (can also be \"denna/detta\")'' (\"this\"), ''de h\u00e4r (can also be \"dessa\")'' (\"these\"), ''den/det d\u00e4r'' (\"that\"), and ''de d\u00e4r'' (\"those\"). For example, ''den d\u00e4r fisken'' means \"that fish\" and refers to a specific fish; ''den fisken'' is less definite and means \"that fish\" in a more abstract sense, such as that set of fish; while ''fisken'' means \"the fish\". In certain cases, the definite form indicates possession, e. g., ''jag m\u00e5ste tv\u00e4tta h\u00e5r'''et''''' (\"I must wash ''my'' hair\").<ref name=\"Haugen\"/>\n\n[[Adjective]]s are inflected in two declensions \u2013 indefinite and definite \u2013 and they must match the noun they modify in gender and number. The indefinite neuter and plural forms of an adjective are usually created by adding a suffix (''-t'' or ''-a'') to the common form of the adjective, e. g., ''en gr\u00f6n stol'' (a green chair), ''ett gr\u00f6nt hus'' (a green house), and ''gr\u00f6na stolar'' (\"green chairs\"). The definite form of an adjective is identical to the indefinite plural form, e. g., ''den gr\u00f6na stolen'' (\"the green chair\"), ''det gr\u00f6na huset'' (\"the green house\"), and ''de gr\u00f6na stolarna'' (\"the green chairs\").<ref name=\"Haugen\">{{Harvnb|Haugen|2009}}</ref>\n\nSwedish [[pronoun]]s are similar to those of English. Besides the two natural genders ''han'' and ''hon'' (\"he\" and \"she\"), there are also the two [[grammatical gender]]s ''den'' and ''det'', usually termed [[Gender in Danish and Swedish|common and neuter]]. Unlike the nouns, pronouns have an additional [[object (linguistics)|object]] form, derived from the old [[dative]] form. ''Hon'', for example, has the following nominative, possessive, and object forms:<ref name=\"Haugen\"/>\n\n:''hon'' \u2013 ''hennes'' \u2013 ''henne''\n\nSwedish also uses third-person possessive [[reflexive pronoun]]s that refer to the subject in a clause, a trait which is restricted to North Germanic languages:\n\n:''Anna gav Maria sin bok.''; \"Anna gave Maria her [Anna's] book.\" (reflexive)\n:''Anna gav Maria hennes bok.''; \"Anna gave Maria her [Maria's] book.\" (not reflexive)\n\nSwedish used to have [[genitive]] that was placed at the end of the head of a noun phrase. In modern Swedish, it has become an [[enclitic]] ''-s'', which attaches to the end of the noun phrase, rather than the noun itself.<ref>{{Harvnb|Hultman|2003|pp=70, 212\u2013213}}</ref>\n\n:''h\u00e4sten''; \"the horse\" \u2013 ''h\u00e4stens'' \"the horse's\"\n:''h\u00e4sten p\u00e5 den blommande \u00e4ngens svarta man''; \"the horse in the flowering meadow's black mane\"\n\nIn formal written language, it used to be considered correct to place the genitive ''-s'' after the head of the noun phrase (''h\u00e4sten''), though this is today considered dated, and different grammatical constructions are often used.<ref>{{Harvnb|Hultman|2003|p=213}}</ref>\n\nVerbs are [[Grammatical conjugation|conjugated]] according to [[grammatical tense|tense]]. One group of verbs (the ones ending in ''-er'' in present tense) has a special [[Imperative mood|imperative]] form (generally the verb [[word stem|stem]]), but with most verbs the imperative is identical to the [[infinitive]] form. [[perfect (grammar)|Perfect]] and [[present tense|present]] [[participle]]s as adjectival verbs are very common:<ref name=\"Haugen\"/>\n\n:Perfect participle: ''en stekt fisk''; \"a fried fish\" (steka = to fry)\n:Present participle: ''en stinkande fisk''; \"a stinking fish\" (stinka = to stink)\n\nIn contrast to English and many other languages, Swedish does not use the perfect participle to form the present perfect and past perfect. Rather, the [[auxiliary verb]] ''har'' (\"have\"), ''hade'' (\"had\") is followed by a special form, called [[supine]], used solely for this purpose (although often identical to the neuter form of the perfect participle):<ref name=\"Haugen\"/>\n\n:Perfect participle: ''m\u00e5lad'', \"painted\" \u2013 supine ''m\u00e5lat'', present perfect ''har m\u00e5lat''; \"have painted\"\n:Perfect participle: ''stekt'', \"fried\" \u2013 supine ''stekt'', present perfect ''har stekt''; \"have fried\"\n:Perfect participle: ''skriven'', \"written\" \u2013 supine ''skrivit'', present perfect ''har skrivit''; \"have written\"\n\nWhen building the compound passive voice using the verb ''att bli'', the past participle is used:\n\n:''den blir m\u00e5lad''; \"it's being painted\"\n:''den blev m\u00e5lad''; \"it was painted\"\n\nThere exists also an inflected passive voice formed by adding ''-s'', replacing the final ''r'' in the present tense:\n\n:''den m\u00e5las''; \"it's being painted\"\n:''den m\u00e5lades''; \"it was painted\"\n\nIn a subordinate [[clause]], the auxiliary ''har'' is optional and often omitted, particularly in written Swedish.\n\n:''Jag ser att han (har) stekt fisken''; \"I see that he has fried the fish\"\n\n[[Subjunctive mood]] is occasionally used for some verbs, but its use is in sharp decline and few speakers perceive the handful of commonly used verbs (as for instance: ''vore, m\u00e5nne'') as separate conjugations, most of them remaining only as set of [[Idiom|idiomatic expressions]].<ref name=\"Haugen\"/>\n\nWhere other languages may use [[grammatical cases]], Swedish uses numerous [[preposition]]s, similar to those found in [[English language|English]]. As in modern [[German language|German]], prepositions formerly determined case in Swedish, but this feature can only be found in certain idiomatic expressions like ''till fots'' (\"on foot\", genitive).<ref>{{Harvnb|Hultman|2003|pp=182\u2013183}}</ref>\n\nAs Swedish is a Germanic language, the [[syntax]] shows similarities to both English and German. Like English, Swedish has a [[subject\u2013verb\u2013object]] basic word order, but like German it utilizes [[V2 word order|verb-second word order]] in main clauses, for instance after [[adverbs]] and adverbial phrases, and [[dependent clauses]]. (Adverbial phrases denoting time are usually placed at the beginning of a main clause that is at the head of a sentence.) [[Prepositional phrase]]s are placed in a [[place\u2013manner\u2013time]] order, as in English (but not German). Adjectives precede the noun they modify.<ref>{{Harvnb|Bolander|2002}}</ref> Verb-second (inverted) word order is also used for questions.<ref name=\"Stensson 2013\">{{cite web|last1=Stensson|first1=Leif|title=Swedish Grammar {{!}} Syntax|url=https://www.lysator.liu.se/language/Languages/Swedish/Grammar.html#syntax|publisher=Lysator Society, Link\u00f6ping University|accessdate=9 March 2018|date=August 2013}}</ref>\n\n==Vocabulary==\nThe [[vocabulary]] of Swedish is mainly Germanic, either through common Germanic heritage or through loans from German, Middle Low German, and to some extent, English. Examples of Germanic words in Swedish are ''mus'' (\"mouse\"), ''kung'' (\"king\"), and ''g\u00e5s'' (\"goose\"). A significant part of the religious and scientific vocabulary is of [[Latin]] or [[Greek language|Greek]] origin, often borrowed from [[French language|French]] and, lately, English. Some 1\u2013200 words are also borrowed from [[Scandoromani language|Scandoromani]] or [[Romani language|Romani]], often as slang varieties; a commonly used word from Romani is ''[[:wikt:tjej|tjej]]'' (\"girl\").<ref>{{Harvnb|Wess\u00e9n|1998}}</ref>\n\nA large number of [[French language|French]] words were imported into Sweden around the 18th century. These words have been [[transcription (linguistics)|transcribed]] to the Swedish spelling system and are therefore pronounced recognizably to a French-speaker. Most of them are distinguished by a \"French accent\", characterized by emphasis on the last syllable. For example, ''niv\u00e5'' (fr. ''niveau'', \"level\"), ''f\u00e5t\u00f6lj'' (fr. ''fauteuil'', \"armchair\") and ''aff\u00e4r'' (\"shop; affair\"), etc. Cross-borrowing from other Germanic languages has also been common, at first from Middle Low German, the [[lingua franca]] of the [[Hanseatic League|Hanseatic league]] and later from [[Standard German]]. Some compounds are translations of the elements ([[calque]]s) of German original compounds into Swedish, like ''{{lang|sv|bomull}}'' from German ''{{lang|de|Baumwolle}}'' (\"cotton\"; literally, ''tree-wool'').<ref>Nationalencyklopedin, ''svenska: spr\u00e5khistoria''</ref>\n\nAs with many Germanic languages, new words can be formed by compounding, e. g., nouns like ''{{lang|sv|nagellackborttagningsmedel}}'' (\"nail polish remover\") or verbs like ''{{lang|sv|smyglyssna}}'' (\"to eavesdrop\").<ref name=CompoundNoun/><ref>{{cite web |title=Smyglyssna |url=http://ordbok.woxikon.se/sv-en/smyglyssna |website=Woxikon |accessdate=3 March 2018}}</ref> Compound nouns take their [[grammatical gender|gender]] from the [[head (linguistics)|head]], which in Swedish is always the last morpheme.<ref name=CompoundNoun>{{cite web |title=Minor Grammar English-Swedish |url=https://www.scribd.com/document/194349317/Minor-Grammar-English-Swedish |publisher=Scribd |accessdate=3 March 2018}}</ref> New words can also be coined by [[Morphological derivation|derivation]] from other established words, such as the [[verbification]] of [[noun]]s by the adding of the [[suffix#Derivational suffixes|suffix]] ''-a'', as in ''{{lang|sv|bil}}'' (\"car\") and ''{{lang|sv|bila}}'' (\"travel (recreationally) by car\").<ref>{{cite book |editor1-last=Gomer |editor1-first=Eva |editor2-last=Morris-Nygren |editor2-first=Mona |title=Bila |work=Modern Svensk Engelsk Ordbok |date=1976 |publisher=Prisma |page=57}}</ref> The opposite, making nouns of verbs, is also possible, as in ''{{lang|sv|t\u00e4nk}}'' (\"way of thinking; concept\") from ''{{lang|sv|t\u00e4nka}}'' (\"to think\").<ref>{{cite web|title=Spr\u00e5ket lever {{!}} t\u00e4nk|url=https://www.sprakinstitutet.fi/sv/aktuellt/spraket_lever/tank.20235.news|publisher=Institutet f\u00f6r de inhemska spr\u00e5ken|accessdate=3 March 2018|language=Swedish|date=18 February 2016}}</ref>\n\n==Writing system==\n{{Main|Swedish orthography}}\nThe [[Swedish alphabet]] is a 29-letter [[alphabet]], using the 26-letter [[ISO basic Latin alphabet]] plus the three additional letters ''[[\u00c5|\u00c5''/''\u00e5]]'', ''[[\u00c4|\u00c4''/''\u00e4]]'', and ''[[\u00d6|\u00d6''/''\u00f6]]'' constructed in the 16th century by writing \"o\" and \"e\" on top of an \"a\", and an \"e\" on top of an \"o\". Though these combinations are historically modified versions of [[A]] and [[O]] according to the English range of usage for the term [[diacritic]], these three characters are not considered to be diacritics within the Swedish application, but rather separate letters, and are independent letters following ''z''. Before the release of the 13th edition of ''[[Svenska Akademiens ordlista]]'' in April 2006, ''w'' was treated as merely a variant of ''v'' used only in names (such as \"Wallenberg\") and foreign words (\"bowling\"), and so was both sorted and pronounced as a ''v''. Other [[diacritic]]s (to use the broader English term usage referenced here) are unusual in Swedish; [[\u00e9]] is sometimes used to indicate that the stress falls on a terminal syllable containing ''e'', especially when the stress changes the meaning (''ide'' vs. ''id\u00e9'', \"winter lair\" vs. \"idea\") as well as in some names, like ''Kastr\u00e9n''; occasionally other [[acute accent]]s and, less often, [[grave accent]]s can be seen in names and some foreign words. The letter [[\u00e0]] is used to refer to unit cost (a loan from the French), equivalent to the [[at sign]] (@) in English.<ref>{{Harvnb|Svenska spr\u00e5kn\u00e4mnden|2000}}</ref>\n\nThe German ''[[\u00fc]]'' is treated as a variant of ''[[y]]'' and sometimes retained in foreign names and words, e. g., ''m\u00fcsli'' (\"muesli/granola\"). A proper [[Diaeresis (diacritic)|diaeresis]] may very exceptionally be seen in elaborated style (for instance: \"A\u00efda\"). The German convention of writing ''\u00e4'' and ''\u00f6'' as ''ae'' and ''oe'' if the characters are unavailable is an unusual convention for speakers of modern Swedish. Despite the availability of all these characters in the Swedish national [[top-level domain|top-level Internet domain]] and other such domains, Swedish sites are frequently labelled using ''a'' and ''o'', based on visual similarity, though Swedish domains could be registered using the characters \u00e5, \u00e4, and \u00f6 from 2003.<ref>{{cite web|title=Domain names with characters like \u00e5, \u00e4, \u00f6 (IDN)|url=https://www.iis.se/english/domains/se/idn/|publisher=iiS|accessdate=3 March 2018}}</ref>\n\nIn Swedish [[orthography]], the [[Colon (punctuation)|colon]] is used in a [[Colon (punctuation)#Usage|similar manner as in English]], with some exceptions: the colon is used for some abbreviations, such as ''3:e'' for ''tredje'' (\"third\") and ''S:t'' for ''Sankt'' (\"Saint\"), and for all types of [[suffix|endings]] that can be added to numbers, letters and abbreviations, such as ''a:et'' (\"the a\") and ''CD:n'' (\"the CD\"), or the genitive form ''USA:s'' (\"USA's\").<ref>{{Harvnb|Svenska spr\u00e5kn\u00e4mnden|2000|pp=154\u2013156}}</ref>\n\n==Dialects==\n[[File:R-pronounciation in Swedish language.JPG|thumb|[[Isogloss]] for the pronunciation of \"R\" (c. 1960), being [[Alveolar trill|alveolar]] north of the boundary and [[guttural R|uvular]] (\"French R\") south of it. It follows that the R+S combination is pronounced as spelled south of the boundary, while pronounced {{IPAblink|\u0282}} (similar to \"sh\" in \"shark\") north of it. This isogloss is the most imperative of all Swedish pronunciation differences.]]\n{{Main|Swedish dialects}}\nAccording to a traditional division of Swedish [[dialect]]s, there are six main groups of dialects:<ref>{{Harvnb|Leinonen|2011}};{{Harvnb|Dahl|2000|pp=117\u2013119}}; Lars-Erik Edlund \"Spr\u00e5klig variation i tid och rum\" in {{harvnb|Dahl|Edlund|2010|p=9}}</ref><ref>{{cite web|title=Hur m\u00e5nga dialekter finns det i Sverige? Var g\u00e5r gr\u00e4nsen mellan olika dialekter?|url=http://www.sprakochfolkminnen.se/sprak/dialekter/fragor-och-svar-om-dialekter/faq/2013-10-21-hur-manga-dialekter-finns-det-i-sverige-var-gar-gransen-mellan-olika-dialekter.html|publisher=Institutet f\u00f6r spr\u00e5k och folkminnen|accessdate=2 March 2018|date=3 February 2017 |language=Swedish}}</ref>\n* [[Norrland dialects]]\n* [[Finland Swedish]]\n* [[Svealand Swedish|Svealand dialects]]\n* [[Gutnish|Gotland dialects]]\n* [[G\u00f6tam\u00e5l dialect|G\u00f6taland dialects]]\n* [[South Swedish dialects]]\n\nThe traditional definition of a Swedish [[dialect]] has been a local variant that has not been heavily influenced by the standard language and that can trace a separate development all the way back to [[Old Norse]]. Many of the genuine rural dialects, such as those of [[Orsa, Sweden|Orsa]] in [[Dalarna]] or [[N\u00e4rpes]] in [[Ostrobothnia (region)|\u00d6sterbotten]], have very distinct phonetic and grammatical features, such as plural forms of verbs or archaic [[case (linguistics)|case]] inflections. These dialects can be near-incomprehensible to a majority of Swedes, and most of their speakers are also fluent in Standard Swedish. The different dialects are often so localized that they are limited to individual [[parish]]es and are referred to by Swedish linguists as ''sockenm\u00e5l'' (lit., \"parish speech\"). They are generally separated into six major groups, with common characteristics of prosody, grammar and vocabulary. One or several examples from each group are given here. Though each example is intended to be also representative of the nearby dialects, the actual number of dialects is several hundred if each individual community is considered separately.<ref>{{Harvnb|Engstrand|2004|p=120}}; {{Harvnb|Pettersson|1996|p=184}}</ref>\n\nThis type of classification, however, is based on a somewhat romanticized [[nationalism|nationalist]] view of ethnicity and language. The idea that only rural variants of Swedish should be considered \"genuine\" is not generally accepted by modern scholars. No dialects, no matter how remote or obscure, remained unchanged or undisturbed by a minimum of influences from surrounding dialects or the standard language, especially not from the late 19th century onwards with the advent of [[mass media]] and advanced forms of transport. The differences are today more accurately described by a scale that runs from \"standard language\" to \"rural dialect\" where the speech even of the same person may vary from one extreme to the other depending on the situation. All Swedish dialects with the exception of the highly diverging forms of speech in [[Dalarna]], [[Norrbotten]] and, to some extent, [[Gotland]] can be considered to be part of a common, mutually intelligible [[dialect continuum]]. This continuum may also include [[Norwegian dialects|Norwegian]] and some [[Danish dialects]].<ref>{{Harvnb|Dahl|2000|pp=117\u2013119}}</ref>\n\nThe samples linked below have been taken from SweDia, a research project on Swedish modern dialects available for download (though with information in Swedish only), with many more samples from 100 different dialects with recordings from four different speakers: older female, older male, younger female and younger male. The dialect groups are those traditionally used by dialectologists.<ref>{{Harvnb|Pettersson|1996|p=184}}</ref>\n\n[[File:Map of Swedish dialects.png|thumb|upright=1.6|Map showing location of the various modern dialect samples]]\n# [[\u00d6verkalix]], [[Norrbotten]]; [http://swedia.ling.gu.se/Norrland/Norrbotten/Overkalix/yw.html younger female]\n# [[Burtr\u00e4sk]], [[V\u00e4sterbotten]]; [http://swedia.ling.gu.se/Norrland/Vasterbotten/Burtrask/ow.html older female]\n# [[Asp\u00e5s]], [[J\u00e4mtland]]; [http://swedia.ling.gu.se/Norrland/Jamtland/Aspas/yw.html younger female]\n# [[F\u00e4rila]], [[H\u00e4lsingland]]; [http://swedia.ling.gu.se/Norrland/Halsingland/Farila/om.html older male]\n# [[\u00c4lvdalen]], [[Dalarna]]; [http://swedia.ling.gu.se/Svealand/Dalarna/Alvdalen/ow.html older female]; traditionally considered a dialect, but now often recognized as [[Elfdalian]], a separate language\n# [[Gr\u00e4s\u00f6]], [[Uppland]]; [http://swedia.ling.gu.se/Svealand/Uppland/Graso/om.html older male]\n# [[Sorunda]], [[S\u00f6dermanland]]; [http://swedia.ling.gu.se/Svealand/Sodermanland/Sorunda/ym.html younger male]\n# [[K\u00f6la]], [[V\u00e4rmland]] [http://swedia.ling.gu.se/Svealand/Varmland/Kola/yw.html younger female]\n# [[Viby, N\u00e4rke|Viby]], [[N\u00e4rke]]; [http://swedia.ling.gu.se/Svealand/Narke/Viby/om.html older male]\n# [[Sproge]], [[Gotland]]; [http://swedia.ling.gu.se/Gotaland/Gotland/Sproge/yw.html younger female]\n# [[N\u00e4rpes]], [[Ostrobothnia (region)|Ostrobothnia]]; [http://swedia.ling.gu.se/Finland/Osterbotten/Narpes/yw.html younger female]\n# [[Dragsfj\u00e4rd]], [[Southwest Finland]]; [http://swedia.ling.gu.se/Finland/Aboland/Dragsfjard/om.html older male]\n# [[Borg\u00e5]], [[Eastern Uusimaa]]; [http://swedia.ling.gu.se/Finland/Nyland/Borga/ym.html younger male]\n# [[Orust]], [[Bohusl\u00e4n]]; [http://swedia.ling.gu.se/Gotaland/Bohuslan/Orust/om.html older male]\n# [[Floby]], [[V\u00e4sterg\u00f6tland]]; [http://swedia.ling.gu.se/Gotaland/Vastergotland/Floby/ow.html older female]\n# [[Rimforsa]], [[\u00d6sterg\u00f6tland]]; [http://swedia.ling.gu.se/Gotaland/Ostergotland/Rimforsa/ow.html older female]\n# [[\u00c5rstad, Falkenberg|\u00c5rstad]]-[[Heberg]], [[Halland]]; [http://swedia.ling.gu.se/Gotaland/Halland/Arstad/ym.html younger male]\n# [[Stenberga]], [[Sm\u00e5land]]; [http://swedia.ling.gu.se/Gotaland/Smaland/Stenberga/yw.html younger female]\n# [[J\u00e4msh\u00f6g]], [[Blekinge]]; [http://swedia.ling.gu.se/Gotaland/Blekinge/Jamshog/ow.html older female]\n# [[Bara, Scania|Bara]], [[Sk\u00e5ne]]; [http://swedia.ling.gu.se/Gotaland/Skane/Bara/om.html older male]\n\n===Standard Swedish===\n[[Standard Swedish]] is the language used by virtually all Swedes and most [[Swedish-speaking population of Finland|Swedish-speaking Finns]]. It is called ''rikssvenska'' or ''standardsvenska'' (\"Standard Swedish\") in Sweden.<ref>{{cite web |title=standardspr\u00e5k |url=https://www.ne.se/uppslagsverk/encyklopedi/l%C3%A5ng/standardspr%C3%A5k |publisher=Nationalencyklopedin AB |accessdate=3 March 2018 |language=Swedish}}</ref> In Finland, ''h\u00f6gsvenska'' (\"High Swedish\") is used for the Finnish variant of standard Swedish and ''rikssvenska'' refers to Swedish as spoken in Sweden in general.<ref>{{cite web|last1=Mattfolk|first1=Leila|title=Do answers to a questionnaire give reliable data?|url=http://www.nordiska.uu.se/ICLaVE2/Kristiansen_w/Mattfolkw.pdf|publisher=Helsinki University|access-date=3 March 2018|quote=Employees on radio and television do not always follow the same Swedish norm. What do you think about them using their own ordinary spoken language instead of standard Finland-Swedish (''h\u00f6gsvenska'') in the broadcasted programs?|url-status=dead|archive-url=https://web.archive.org/web/20041102231321/http://www.nordiska.uu.se/ICLaVE2/Kristiansen_w/Mattfolkw.pdf|archive-date=2 November 2004|df=dmy-all}}</ref>\n\nIn a poll conducted in 2005 by the [[Swedish Retail Institute]] (''[http://www.hui.se/ Handelns Utredningsinstitut]''), the attitudes of Swedes to the use of certain dialects by salesmen revealed that 54% believed that ''rikssvenska'' was the variety they would prefer to hear when speaking with salesmen over the phone, even though dialects such as ''gotl\u00e4ndska'' or ''[[Scanian dialect|sk\u00e5nska]]'' were provided as alternatives in the poll.<ref>{{citation|last=Aronsson |first=Cecilia |url=http://www.di.se/Nyheter/?page=/Avdelningar/Artikel.aspx%3FArticleID%3D2005%5C05%5C03%5C142710%26words%3Drikssvenska%26SectionID%3DEttan%26menusection%3DStartsidan%3BHuvudnyheter |title=Norrl\u00e4ndska l\u00e5ter b\u00e4st |work=[[Dagens Industri]] |date=3 May 2005 |access-date=24 August 2007 |quote=Norrl\u00e4ndska och rikssvenska \u00e4r de mest f\u00f6rtroendeingivande dialekterna. Men gotl\u00e4ndska och v\u00e4rml\u00e4ndska g\u00f6r svenskarna misst\u00e4nksamma, enligt en ny riksomfattande unders\u00f6kning. Handelns utredningsinstitut (HUI) har fr\u00e5gat 800 svenskar om hur de uppfattar olika dialekter som de h\u00f6r i telefonservicesamtal, exempelvis fr\u00e5n f\u00f6rs\u00e4ljare eller upplysningscentraler. Unders\u00f6kningen visar att 54 procent f\u00f6redrar att motparten pratar rikssvenska, vilket troligen h\u00e4nger ihop med dess tydlighet. Men \u00e4ven norrl\u00e4ndskan plockar h\u00f6ga po\u00e4ng \u2013 25 procent tycker att det \u00e4r den mest f\u00f6rtroendeingivande dialekten. Tilltron till norrl\u00e4ndska \u00e4r \u00e4nnu st\u00f6rre hos personer under 29 \u00e5r, medan st\u00f6det f\u00f6r rikssvenska \u00e4r st\u00f6rst bland personer \u00f6ver 55 \u00e5r. |archive-url=https://web.archive.org/web/20071013152413/http://www.di.se/Nyheter/?page=%2FAvdelningar%2FArtikel.aspx%3FArticleID%3D2005%5C05%5C03%5C142710&words=rikssvenska&SectionID=Ettan&menusection=Startsidan%3BHuvudnyheter |archive-date=13 October 2007 |url-status=dead |df= }}</ref>\n\n===Finland Swedish===\n{{Main|Finland Swedish|\u00c5land Swedish}}\nFinland was a part of Sweden from the 13th century until the loss of the Finnish territories to [[Russia]] in 1809. Swedish was the sole administrative language until 1902 as well as the dominant language of culture and education until Finnish independence in 1917. The percentage of Swedish speakers in Finland has steadily decreased since then. The Swedish-speaking population is mainly concentrated in the coastal areas of [[Ostrobothnia (region)|Ostrobothnia]], [[Southwest Finland]] and [[Uusimaa|Nyland]] where the percentage of Finland Swedes partly is high, with Swedish being spoken by more than 90% of the population in several municipalities, and on \u00c5land, where Swedish is spoken by a vast majority of the population and is the only official language. Swedish is an official language also in the rest of Finland, though, with the same official status as [[Finnish language|Finnish]].<ref>http://www.finlex.fi/sv/laki/ajantasa/1999/19990731 Finlands grundlag \u2013 Constituiton of Finland \"17 \u00a7\n\nR\u00e4tt till eget spr\u00e5k och egen kultur\n\nFinlands nationalspr\u00e5k \u00e4r finska och svenska.\n\nVars och ens r\u00e4tt att hos domstol och andra myndigheter i egen sak anv\u00e4nda sitt eget spr\u00e5k, antingen finska eller svenska, samt att f\u00e5 expeditioner p\u00e5 detta spr\u00e5k skall tryggas genom lag. Det allm\u00e4nna skall tillgodose landets finskspr\u00e5kiga och svenskspr\u00e5kiga befolknings kulturella och samh\u00e4lleliga behov enligt lika grunder.\"</ref> The country's public broadcaster, [[Yle]], provides two Swedish-language radio stations, [[Yle Vega]] and [[Yle X3M]], as well a TV channel, [[Yle Fem]].<ref>[https://svenska.yle.fi/ Svenska Yle, scroll to the bottom of the page]</ref>\n\n===Immigrant variants===\n[[Rinkeby Swedish]] (after [[Rinkeby]], a suburb of northern Stockholm with a large immigrant population) is a common name among linguists for varieties of Swedish spoken by young people of foreign heritage in certain suburbs and urban districts in the major cities of Stockholm, [[Gothenburg]] and [[Malm\u00f6]]. These varieties could alternatively be classified as [[sociolect]]s, because the immigrant dialects share common traits independent of their geographical spread or the native country of the speakers. However, some studies have found distinctive features and led to terms such as Roseng\u00e5rd Swedish (after [[Roseng\u00e5rd]] in Malm\u00f6), a variant of [[Scanian dialect|Scanian]].<ref>{{citation|url=http://person.sol.lu.se/PetraBoden/papers/Ey_mannen_wazzup.htm |title=Ey, mannen! Wazzup? / P\u00e5 jakt efter \"roseng\u00e5rdssvenskan\" |last=Bod\u00e9n |first=Petra |publisher=Institutionen f\u00f6r nordiska spr\u00e5k och Institutionen f\u00f6r lingvistik, [[Lunds universitet]] |url-status=dead |archive-url=https://web.archive.org/web/20080506132803/http://person.sol.lu.se/PetraBoden/papers/Ey_mannen_wazzup.htm |archive-date=6 May 2008 }}</ref> A survey made by the Swedish linguist [[Ulla-Britt Kotsinas]] showed that foreign learners had difficulties in guessing the origins of Rinkeby Swedish speakers in Stockholm. The greatest difficulty proved to be identifying the speech of a boy speaking Rinkeby Swedish whose parents were both Swedish; only 1.8% guessed his native language correctly.<ref>{{Harvnb|Kotsinas|1994|p=151}}</ref>\n\nNew linguistic practices in multilingual urban contexts in fiction and hip-hop culture and rap lyrics have been introduced that goes beyond traditional socio-linguistic domains.<ref>https://www.academia.edu/13820691/Multilingual_urban_Scandinavia</ref> K\u00e4llstr\u00f6m (Chapter 12) and Knudsen (Chapter 13).\n\n==Sample==\nExcerpt from ''[[Barfotabarn]]'' (1933), by [[Nils Ferlin]] (1898\u20131961):{{sfn|Ferlin|1976}}\n{| border=\"0\" style=\"width:100%; text-align:left;\"\n|-\n!|Original\n!|Free translation\n|-\n|''Du har tappat ditt ord och din papperslapp'',\n|\"You have lost your word and your paper note,\n|-\n|''du barfotabarn i livet.''\n|you barefooted child in life.\n|-\n|''S\u00e5 sitter du \u00e5ter p\u00e5 handlar'ns trapp''\n|So you sit on the porch of the grocer anew\n|-\n|''och gr\u00e5ter s\u00e5 \u00f6vergivet.''\n|and cry so abandoned.\n|-\n|''Vad var det f\u00f6r ord \u2013 var det l\u00e5ngt eller kort'',\n|What word was it \u2013 was it long or short,\n|-\n|''var det v\u00e4l eller illa skrivet?''\n|was it well or poorly written?\n|-\n|''T\u00e4nk efter nu \u2013 f\u00f6rr'n vi f\u00f6ser dig bort'',\n|Think twice now \u2013 before we shove you away,\n|-\n|''du barfotabarn i livet.''\n|you barefooted child in life.\"\n|}\n\n==See also==\n* [[Languages of Sweden]]\n* [[Languages of Finland]]\n* [[Swedish as a foreign language]]\n* [[Swenglish]]\n\n==Notes==\n{{Reflist|30em}}\n\n==References==\n{{Refbegin}}\n* {{citation\n|last=Andersson\n|first=Erik\n|editor-last=K\u00f6nig\n|editor-first=Ekkehard\n|editor2-last=van der Auwera\n|editor2-first=Johan\n|year=2002\n|chapter=Swedish\n|title=The Germanic Languages\n|series=Routledge language family descriptions\n|publisher=Routledge\n|isbn=978-0-415-28079-2\n|pages=271\u2013312\n}}\n* {{Citation\n|last = Bergman\n|first = G\u00f6sta\n|year = 1984\n|title = Kortfattad svensk spr\u00e5khistoria\n|edition = 4th\n|place = Stockholm\n|publisher = Prisma\n|series = Prisma Magnum\n|isbn = 978-91-518-1747-7\n|oclc = 13259382\n|language = Swedish\n}}\n* {{Citation\n|last = Bolander\n|first = Maria\n|year = 2002\n|title = Funktionell svensk grammatik\n|place = Stockholm\n|publisher = Liber\n|isbn = 978-91-47-05054-3\n|oclc = 67138445\n|language = Swedish\n}}\n* {{Citation\n|last = Crystal\n|first = David\n|author-link = David Crystal\n|year = 1999\n|edition = 2nd\n|title = The Penguin dictionary of language\n|place = London\n|publisher = [[Penguin Books]]\n|isbn = 978-0-14-051416-2\n|oclc = 59441560\n}}\n* {{Citation\n|last = Dahl\n|first = \u00d6sten\n|year = 2000\n|title = Spr\u00e5kets enhet och m\u00e5ngfald\n|place = Lund\n|publisher = [[Studentlitteratur]]\n|isbn = 978-91-44-01158-5\n|oclc = 61100963\n|language = Swedish\n}}\n* {{Citation\n| editor1-last = Dahl\n| editor1-first = \u00d6sten\n| editor2-last = Edlund\n| editor2-first = Lars-Erik\n|year = 2010\n|title = Sveriges nationalatlas. Spr\u00e5ken i Sverige\n|place = Stockholm\n|publisher = Kungl. Vitterhets historie och antikvitets akademien \n|isbn = 978-91-87-76057-0\n|oclc =\n|language = Swedish\n}}\n* {{Citation\n|last = Elert\n|first = Claes-Christian\n|year = 2000\n|title = Allm\u00e4n och svensk fonetik\n|edition = 8th\n|place = Stockholm\n|publisher = Norstedts Akademiska F\u00f6rlag\n|isbn = 978-91-1-300939-1\n|oclc =\n|language = Swedish\n}}\n* {{Citation\n|last = Engstrand\n|first = Olle\n|year = 1999\n|chapter = Swedish\n|title = Handbook of the International Phonetic Association: A Guide to the usage of the International Phonetic Alphabet.\n|place = Cambridge\n|publisher = Cambridge University Press\n|isbn = 978-0-521-63751-0\n|oclc = 40305532\n|pages = 140\u2013142\n}}\n* {{Citation\n|last = Engstrand\n|first = Olle\n|year = 2004\n|title = Fonetikens grunder\n|place = Lund\n|publisher = Studentlitteratur\n|isbn = 978-91-44-04238-1\n|oclc = 66026795\n|language = Swedish\n}}\n* {{Citation\n|last = Ferlin\n|first = Nils\n|title = Barfotabarn\n|year = 1976\n|orig-year=1933\n|place = Stockholm\n|publisher = Bonnier\n|isbn = 978-91-0-024187-2\n|language = Swedish\n }}\n* {{Citation\n|last = Garl\u00e9n\n|first = Claes\n|year = 1988\n|title = Svenskans fonologi\n|place = Lund\n|publisher = Studentlitteratur\n|isbn = 978-91-44-28151-3\n|oclc = 67420810\n|language = Swedish\n}}\n* {{Citation\n|last = Granberry\n|first = Julian\n|year = 1991\n|title = Essential Swedish Grammar\n|place = New York\n|publisher = [[Dover Publications]]\n|isbn = 978-0-486-26953-5\n|oclc = 23692877\n}}\n* {{cite book\n|last=Haugen\n|first=Einar\n|year=2009\n|chapter=Danish, Norwegian and Swedish\n|title=The World's Major Languages\n|editor=Bernard Comrie\n|pages=125\u2013144\n|location= New York\n|publisher=Routledge\n|isbn = 978-0-415-35339-7\n|ref=harv}}\n* {{Citation\n|last = Hultman\n|first = Tor G.\n|year = 2003\n|title = Svenska Akademiens spr\u00e5kl\u00e4ra\n|place = Stockholm\n|publisher = Norstedts\n|isbn = 978-9172273511\n|oclc = 55849724\n|language = Swedish\n}}\n* {{Citation\n|last = Josephson\n|first = Olle\n|year = 2005\n|title = Ju: ifr\u00e5gasatta sj\u00e4lvklarheter om svenskan, engelskan och alla andra spr\u00e5k i Sverige\n|edition = 2nd\n|place = Stockholm\n|publisher = Nordstedts ordbok\n|isbn = 978-91-7227-446-4\n|language = Swedish\n }}\n* {{Citation\n|last = Kotsinas\n|first = Ulla-Britt\n|year = 1994\n|title = Ungdomsspr\u00e5k\n|place = Uppsala\n|publisher = Hallgren & Fallgren\n|isbn = 978-91-7382-718-8\n|oclc = 60994967\n|language = Swedish\n}}\n* {{Citation\n|last = Leinonen\n|first = Therese\n|title = Aggregate analysis of vowel pronunciation in Swedish dialects\n|journal = Oslo Studies in Language\n|volume = 3\n|issue = 2\n|year = 2011\n|url = https://www.journals.uio.no/index.php/osla/article/view/101\n }}\n* [[Nationalencyklopedin]], [http://www.ne.se/svenska online edition] {{in lang|sv}}\n* {{Citation\n|last = Parkvall\n|first = Mikael\n|title = Sveriges spr\u00e5k. Vem talar vad och var?\n|journal = RAPPLING 1. Rapporter Fr\u00e5n Institutionen f\u00f6r Lingvistik Vid Stockholms Universitet.\n|year = 2009\n|url = http://www.spr\u00e5kf\u00f6rsvaret.se/sf/fileadmin/PDF/Parkvall_spraakstatistik.pdf\n|language = Swedish\n }}\n* {{Citation\n|last = Pettersson\n|first = Gertrud\n|year = 1996\n|title = Svenska spr\u00e5ket under sjuhundra \u00e5r: en historia om svenskan och dess utforskande\n|place = Lund\n|publisher = Studentlitteratur\n|isbn = 978-91-44-48221-7\n|oclc = 36130929\n|language = Swedish\n}}\n* {{Citation\n|author = Svenska spr\u00e5kn\u00e4mnden\n|authorlink = Svenska spr\u00e5kn\u00e4mnden\n|title = Svenska skrivregler\n|edition = 2nd\n|year = 2000\n|publication-date = 2002\n|publisher = Liber\n|place = Stockholm\n|isbn = 978-91-47-04974-5\n|language = Swedish\n}}\n* {{Citation\n|last = Svensson\n|first = Lars\n|year = 1974\n|title = Nordisk paleografi: Handbok med transkriberade och kommenterade skriftprov\n|place = Lund\n|publisher = Studentlitteratur\n|isbn = 978-91-44-05391-2\n|oclc = 1303752\n|language = Swedish\n}}\n* {{Citation\n|last=Wess\u00e9n\n|first=Elias\n|title=V\u00e5ra ord: deras uttal och ursprung : kortfattad etymologisk ordbok\n|edition=2nd\n|year=1998\n|origyear=1973\n|publisher=Norstedts\n|location=Stockholm\n|language=sv\n|isbn=978-91-7227-053-4\n}}\n{{Refend}}\n\n==Further reading==\n* ''Swedish Essentials of Grammar'' Viberg, \u00c5ke; et al. (1991) Chicago: Passport Books. {{ISBN|0-8442-8539-0}}\n* ''Swedish: An Essential Grammar''. Holmes, Philip; Hinchliffe, Ian; (2000). London; New York: Routledge. {{ISBN|0-415-16048-0}}.\n* ''Swedish: A Comprehensive Grammar Second Edition''. Holmes, Philip; Hinchliffe, Ian; (2003). London; New York: Routledge. {{ISBN|0-415-27884-8}}.\n* ''Svenska utifr\u00e5n. Schematic grammar-Swedish structures and everyday phrases'' Byrman, Gunilla; Holm, Britta; (1998) {{ISBN|91-520-0519-4}}.\n\n==External links==\n{{InterWiki|code=sv}}\n{{Wikibooks|Swedish}}\n{{Wiktionary category|Swedish language}}\n{{Wikivoyage|Swedish phrasebook|Swedish|a phrasebook}}\n{{NIE Poster|year=1905|Swedish Language and Literature|Swedish language}}\n* [http://en.wiktionary.org/wiki/Appendix:Swedish_Swadesh_list Swadesh list of Swedish basic vocabulary words] (from Wiktionary's [http://en.wiktionary.org/wiki/Appendix:Swadesh_lists Swadesh-list appendix])\n* [http://lexin2.nada.kth.se/swe-eng.html Swedish-English]/[http://lexin2.nada.kth.se/sve-ara.html Swedish-Arabic]/[http://lexin2.nada.kth.se/sve-rys.html Swedish-Russian]/[http://lexin2.nada.kth.se/sve-spa.html Swedish-Spanish] Dictionaries from [http://lexin2.nada.kth.se/ Spr\u00e5kr\u00e5det \u2013 Institute for Language and Folklore]\n* [http://folkets-lexikon.csc.kth.se/folkets/folkets.en.html People's dictionary]\n* [https://www.saob.se Online version] of ''[[Svenska Akademiens ordbok]]'' (Swedish)\n\n{{Swedish language|state=expanded}}\n{{Languages of Sweden}}\n{{Languages of Finland}}\n{{Germanic languages}}\n\n{{Authority control}}\n\n[[Category:Swedish language| ]]\n[[Category:Languages of Finland]]\n[[Category:Languages of Estonia]]\n[[Category:Languages of Sweden]]\n[[Category:East Scandinavian languages]]\n[[Category:North Germanic languages]]\n[[Category:Scandinavian culture]]\n[[Category:Stress-timed languages]]\n[[Category:Subject\u2013verb\u2013object languages]]\n[[Category:Tonal languages in non-tonal families]]\n[[Category:Verb-second languages]]\n", "name_user": "MarkSuccerburg69", "label": "safe", "comment": "I edited about the scandinavia", "url_page": "//en.wikipedia.org/wiki/Swedish_language"}
{"title_page": "Ibban", "text_new": "{{unreferenced|date=February 2019}}\n{{Use dmy dates|date=April 2018}}\n{{Use Indian English|date=April 2018}}\n{{Infobox settlement\n| name                    = Ibban\n| settlement_type         = Village\n| pushpin_map             = India Punjab#India\n| pushpin_map_caption     = Location in Punjab, India\n| coordinates             = {{coord|31.340292|N|75.450495|E|display=inline,title}}\n| subdivision_type        = Country\n| subdivision_name        = {{flag|India}}\n| subdivision_type1       = [[States and territories of India|State]]\n| subdivision_name1       = [[Punjab, India|Punjab]]\n| subdivision_type2       = [[List of districts of India|District]]\n| subdivision_name2       = [[Kapurthala district|Kapurthala]]\n| subdivision_type3       = \n| subdivision_name3       = \n| unit_pref               = Metric\n<!-- ALL fields with measurements have automatic unit conversion -->\n<!-- for references: use <ref>tags -->\n| elevation_m             = \n| population_as_of        = 2011\n| population_footnotes    =\n| population_total        = 1,516 \t \n| population_density_km2  = auto \n| population_note         =  [[Human sex ratio|Sex ratio]] 776/740[[male|\u2642]]/[[female|\u2640]]     \n| population_demonym      =\n| demographics_type1      = Languages\n| demographics1_title1    = Official\n| demographics1_info1     = [[Punjabi language|Punjabi]]\n| demographics1_title2    = Other spoken\n| demographics1_info2     = [[Hindi language|Hindi]]\n| timezone1               = [[Indian Standard Time|IST]]\n| utc_offset1             = +5:30\n| postal_code_type        = [[Postal Index Number|PIN]]\n| postal_code             = 144601\n| area_code_type          = [[Telephone code]]\n| area_code               = 01822 \n| registration_plate      = [[List of RTO districts in India#PB.E2.80.94Punjab|PB]]-09 \n| iso_code                = [[ISO 3166-2:IN|IN-PB]]\n| blank1_name_sec2        = \n| blank1_info_sec2        = \n| government_type         = [[Panchayati raj (India)]]\n| governing_body          = [[Gram panchayat]]\n| website                 = {{URL|kapurthala.gov.in}}\n| footnotes               =\n}}\n'''Ibban'''  is a village in [[Kapurthala district]] of [[Punjab, India|Punjab]] [[States and territories of India|State]], India. It is located {{convert|10|km}} from [[Kapurthala]], which is both district and sub-district headquarters of Ibban. The village is [[Administration (government)|administrated]] by a [[Sarpanch]], who is an [[elected representative]]\n\n== Demography ==\nAccording to the report published by [[Census India]] in 2011, Ibban has total number of 325 houses and population of 1,516 of which include 776 males and 740 females. [[Literacy in India|Literacy]] rate of Ibban is 80.51%, higher than state average of 75.84%.  The population of children under the age of 6 years is 141 which is 9.30% of total population of Ibban, and child sex ratio is approximately  855, higher than state average of 846.\n\n==Air travel connectivity== \nThe closest airport to the village is [[Sri Guru Ram Dass Jee International Airport]].\n\n==Villages in Kapurthala ==\n{{Main|List of villages in Kapurthala}}\n\n==References==\n{{Reflist}}\n\n==External links==\n* [https://www.censusindia.gov.in/2011census/Listofvillagesandtowns.aspx  Villages in Kapurthala]\n* [https://web.archive.org/web/20160915101605/http://punjabdata.com/Villages/Villages-In-Kapurthala-Tehsil-In-Kapurthala-District.html Kapurthala Villages List]\n\n{{Kapurthala district |state=collapsed}}\n\n[[Category:Villages in Kapurthala district]]\n\n\n{{Kapurthala-geo-stub}}\n", "text_old": "{{unreferenced|date=February 2019}}\n{{Use dmy dates|date=April 2018}}\n{{Use Indian English|date=April 2018}}\n{{Infobox settlement\n| name                    = Ibban\n| settlement_type         = Village\n| pushpin_map             = India Punjab#India\n| pushpin_map_caption     = Location in Punjab, India\n| coordinates             = {{coord|31.340292|N|75.450495|E|display=inline,title}}\n| subdivision_type        = Country\n| subdivision_name        = {{flag|India}}\n| subdivision_type1       = [[States and territories of India|State]]\n| subdivision_name1       = [[Punjab, India|Punjab]]\n| subdivision_type2       = [[List of districts of India|District]]\n| subdivision_name2       = [[Kapurthala district|Kapurthala]]\n| subdivision_type3       = \n| subdivision_name3       = \n| unit_pref               = Metric\n<!-- ALL fields with measurements have automatic unit conversion -->\n<!-- for references: use <ref>tags -->\n| elevation_m             = \n| population_as_of        = 2011\n| population_footnotes    =\n| population_total        = 1,516 \t \n| population_density_km2  = auto \n| population_note         =  [[Human sex ratio|Sex ratio]] 776/740[[male|\u2642]]/[[female|\u2640]]     \n| population_demonym      =\n| demographics_type1      = Languages\n| demographics1_title1    = Official\n| demographics1_info1     = [[Punjabi language|Punjabi]]\n| demographics1_title2    = Other spoken\n| demographics1_info2     = [[Hindi language|Hindi]]\n| timezone1               = [[Indian Standard Time|IST]]\n| utc_offset1             = +5:30\n| postal_code_type        = [[Postal Index Number|PIN]]\n| postal_code             = 144601\n| area_code_type          = [[Telephone code]]\n| area_code               = 01822 \n| registration_plate      = [[List of RTO districts in India#PB.E2.80.94Punjab|PB]]-09 \n| iso_code                = [[ISO 3166-2:IN|IN-PB]]\n| blank1_name_sec2        = \n| blank1_info_sec2        = \n| government_type         = [[Panchayati raj (India)]]\n| governing_body          = [[Gram panchayat]]\n| website                 = {{URL|kapurthala.gov.in}}\n| footnotes               =\n}}\n'''Ibban'''  is a village in [[Kapurthala district]] of [[Punjab, India|Punjab]] [[States and territories of India|State]], India. It is located {{convert|10|km}} from [[Kapurthala]], which is both district and sub-district headquarters of Ibban. The village is [[Administration (government)|administrated]] by a [[Sarpanch]], who is an [[elected representative]]\n\n== Demography ==\nAccording to the report published by [[Census India]] in 2011, Ibban has total number of 325 houses and population of 1,516 of which include 776 males and 740 females. [[Literacy in India|Literacy]] rate of Ibban is 80.51%, higher than state average of 75.84%.  The population of children under the age of 6 years is 141 which is 9.30% of total population of Ibban, and child sex ratio is approximately  855, higher than state average of 846.\n\n==Air travel connectivity== \nThe closest airport to the village is [[Sri Guru Ram Dass Jee International Airport]].\n\n==Villages in Kapurthala ==\n{{Main|List of villages in Kapurthala}}\n\n==References==\n{{Reflist}}\n\n==External links==\n* [https://www.censusindia.gov.in/2011census/Listofvillagesandtowns.aspx  Villages in Kapurthala]\n* [https://web.archive.org/web/20160915101605/http://punjabdata.com/Villages/Villages-In-Kapurthala-Tehsil-In-Kapurthala-District.html Kapurthala Villages List]\n\n{{Kapurthala district |state=collapsed}}\n\n[[Category:Villages in Kapurthala district]]\n\n\n{{PunjabIN-geo-stub}}\n", "name_user": "SDZeroBot", "label": "safe", "comment": "Stub sorting: replacing PunjabIN-geo-stub with Kapurthala-geo-stub", "url_page": "//en.wikipedia.org/wiki/Ibban"}
{"title_page": "Python (programming language)", "text_new": "{{about|the programming language||Python (disambiguation)}}\n{{Short description|General-purpose, high-level programming language}}\n{{Use dmy dates |date=August 2015}}\n{{Infobox programming language\n| logo = Python logo and wordmark.svg\n| logo size = 250px\n| paradigm = [[Multi-paradigm programming language|Multi-paradigm]]: [[functional programming|functional]], [[imperative programming|imperative]], [[object-oriented programming|object-oriented]], [[structured programming|structured]], [[reflective programming|reflective]]\n| released = {{start date and age|1990}}<ref name=guttag />\n| designer = [[Guido van Rossum]]\n| developer = [[Python Software Foundation]]\n| latest release version = 3.8.2\n| latest release date = {{Start date and age|2020|02|24|df=yes}}<ref>{{Cite web|url=https://www.python.org/downloads/release/python-382/|title=Python Release Python 3.8.2|website=Python.org}}</ref>\n| latest preview version = 3.9.0a5\n| latest preview date = {{Start date and age|2020|03|23|df=yes}}<ref>{{Cite web|url=https://www.python.org/downloads/release/python-390a5/|title=Python Release Python 3.9.0a5|website=Python.org}}</ref> and 2.7.18rc1<ref>{{Cite web|url=https://pythoninsider.blogspot.com/2020/04/python-2718-release-candidate-1.html|title=Python Insider: Python 2.7.18 release candidate 1 available|author=Benjamin|date=2020-04-06|quote=Python 2.7.18 will be the last release of the Python 2.7 series, and thus Python 2.|website=Python Insider|access-date=2020-04-14}}</ref><ref>{{Cite web|url=https://discuss.python.org/t/petition-abandon-plans-to-ship-a-2-7-18-in-april/2946/4|title=Petition: abandon plans to ship a 2.7.18 in April|date=2020-01-03|quote=Any changes that might have been made since 2.7.17 shipped haven\u2019t yet been released, but as a final service to the community, python-dev will bundle those fixes (and only those fixes) and release a 2.7.18. We plan on doing that in April|website=Discussions on Python.org|language=en-US|access-date=2020-04-14}}</ref>\n| typing = [[duck typing|Duck]], [[dynamic typing|dynamic]], [[gradual typing|gradual]] (since 3.5)<ref>{{cite web|url=https://www.python.org/dev/peps/pep-0483/|title=PEP 483 -- The Theory of Type Hints|website=Python.org}}</ref>\n| implementations = [[CPython]], [[PyPy]], [[Stackless Python]], [[MicroPython]], [[CircuitPython]], [[IronPython]], [[Jython]], [[RustPython]]\n| dialects = [[Cython]], [[RPython]], [[Bazel (software)|Starlark]]<ref>{{cite web|title=Starlark Language|url=https://docs.bazel.build/versions/master/skylark/language.html|accessdate=25 May 2019}}</ref>\n| influenced = [[Apache Groovy]], [[Boo (programming language)|Boo]], [[Cobra (programming language)|Cobra]], [[CoffeeScript]]<ref>{{Cite web|url=https://coffeescript.org/|title=CoffeeScript|website=coffeescript.org}}</ref>, [[D (programming language)|D]], [[F Sharp (programming language)|F#]], [[Genie (programming language)|Genie]]<ref>{{cite web \n |url=https://wiki.gnome.org/action/show/Projects/Genie\n |title=The Genie Programming Language Tutorial\n |accessdate=28 February 2020}}</ref>, [[Go (programming language)|Go]], [[JavaScript]]<ref>{{cite web\n|title=Perl and Python influences in JavaScript\n |date=24 February 2013\n|website= www.2ality.com\n |url=http://www.2ality.com/2013/02/javascript-influences.html\n |accessdate= 15 May 2015}}</ref><ref>{{cite web\n|title=Chapter 3: The Nature of JavaScript; Influences\n |last=Rauschmayer\n |first=Axel\n|website=O'Reilly, Speaking JavaScript\n |url=http://speakingjs.com/es5/ch03.html\n |accessdate= 15 May 2015}}</ref>, [[Julia (programming language)|Julia]]<ref name=Julia/>, [[Nim (programming language)|Nim]], Ring<ref name=\"The Ring programming language and other languages\">{{cite web |url=http://ring-lang.sourceforge.net/doc1.6/introduction.html#ring-and-other-languages |title=Ring and other languages |author=Ring Team |date=4 December 2017 |work=ring-lang.net |publisher=[[ring-lang]]}}</ref>, [[Ruby (programming language)|Ruby]]<ref name=\"bini\"/>, [[Swift (programming language)|Swift]]<ref name=\"lattner2014\">{{cite web |url=http://nondot.org/sabre/ |title=Chris Lattner's Homepage |last=Lattner |first=Chris |date=3 June 2014 |accessdate=3 June 2014 |publisher=Chris Lattner|quote=The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.}}</ref>\n| license = [[Python Software Foundation License]]\n| website = {{URL|https://www.python.org/}}\n| wikibooks = Python Programming\n| influenced_by = [[ABC (programming language)|ABC]]<ref name=\"faq-created\"/>, [[Ada (programming language)|Ada]]<ref>{{cite web | url=http://archive.adaic.com/standards/83lrm/html/lrm-11-03.html#11.3 | title=Ada 83 Reference Manual (raise statement)}}</ref>, [[ALGOL 68]]<ref name=\"98-interview\"/>, [[APL (programming language)|APL]]<ref name=\"python.org\">{{cite web|url=https://docs.python.org/3/library/itertools.html|title=itertools \u2014 Functions creating iterators for efficient looping \u2014 Python 3.7.1 documentation|website=docs.python.org}}</ref>, [[C (programming language)|C]]<ref name=\"AutoNT-1\"/>, [[C++]]<ref name=\"classmix\"/>, [[CLU (programming language)|CLU]]<ref name=\"effbot-call-by-object\"/>, [[Dylan (programming language)|Dylan]]<ref name=\"AutoNT-2\"/>, [[Haskell (programming language)|Haskell]]<ref name=\"AutoNT-3\"/>, [[Icon (programming language)|Icon]]<ref name=\"AutoNT-4\"/>, [[Java (programming language)|Java]]<ref name=\"AutoNT-5\"/>, [[Lisp (programming language)|Lisp]]<ref name=\"AutoNT-6\"/>, [[Modula-3]]<ref name=\"classmix\" />, [[Perl]], [[Standard ML]]<ref name=\"python.org\"/>\n| file ext = .py, .pyi, .pyc, .pyd, .pyo (prior to 3.5),<ref>File extension .pyo was removed in Python 3.5. See [https://www.python.org/dev/peps/pep-0488/ PEP 0488]</ref> {{notatypo|.pyw}}, .pyz (since 3.5)<ref>{{cite web |url=https://www.python.org/dev/peps/pep-0441/ |last=Holth |first=Moore |date=30 March 2014 |accessdate=12 November 2015 |title=PEP 0441 -- Improving Python ZIP Application Support}}</ref>\n}}\n\n'''Python''' is an [[interpreted language|interpreted]], [[high-level programming language|high-level]], [[general-purpose programming language|general-purpose]] [[programming language]]. Created by [[Guido van Rossum]] and first released in 1991, Python's design philosophy emphasizes [[code readability]] with its notable use of [[Off-side rule|significant whitespace]]. Its [[language construct]]s and [[object-oriented programming|object-oriented]] approach aim to help programmers write clear, logical code for small and large-scale projects.<ref name=\"AutoNT-7\" />\n\nPython is [[Dynamic programming language|dynamically typed]] and [[garbage collection (computer science)|garbage-collected]]. It supports multiple [[programming paradigms]], including [[structured programming|structured]] (particularly, [[procedural programming|procedural]]), object-oriented, and  [[functional programming]]. Python is often described as a \"batteries included\" language due to its comprehensive [[standard library]].<ref name=\"About\" />\n\nPython was conceived in the late 1980s as a successor to the [[ABC (programming language)|ABC language]]. Python&nbsp;2.0, released in 2000, introduced features like [[list comprehension]]s and a garbage collection system capable of collecting [[reference cycle]]s. Python&nbsp;3.0, released in 2008, was a major revision of the language that is not completely [[backward compatibility|backward-compatible]], and much Python&nbsp;2 code does not run unmodified on Python&nbsp;3.\n\nThe Python&nbsp;2 language, i.e. Python 2.7.x, was officially discontinued on 1 January 2020 (first planned for 2015) after which security patches and other improvements will not be released for it.<ref>{{Cite web|url=https://www.python.org/doc/sunset-python-2/|title=Sunsetting Python 2|website=Python.org|language=en|access-date=2019-09-22}}</ref><ref>{{Cite web|url=https://www.python.org/dev/peps/pep-0373/|title=PEP 373 -- Python 2.7 Release Schedule|website=Python.org|language=en|access-date=2019-09-22}}</ref> With Python 2's [[end-of-life (product)|end-of-life]], only <!-- shortened for the lead: Python&nbsp;3.7.x and later will be supported,<ref>{{Cite web|url=https://www.python.org/dev/peps/pep-0537/|title=PEP 537 -- Python 3.7 Release Schedule|website=Python.org|language=en|access-date=2019-11-06}}</ref> plus 3.5.x<ref>{{Cite web|url=https://www.python.org/downloads/release/python-359/|title=Python Release Python 3.5.9|quote=Python 3.5 has now entered \"security fixes only\" mode, and as such the only changes since Python 3.5.4 are security fixes.|website=Python.org|language=en|access-date=2019-11-06}}</ref><ref>{{Cite web|url=https://www.python.org/downloads/release/python-3410/|title=Python Release Python 3.4.10|quote=Python 3.4 has reached end-of-life.|website=Python.org|language=en|access-date=2019-11-06}}</ref> and 3.6.x with security updates only (and [[source code|source]]s only).<ref>{{Cite web|url=https://www.python.org/dev/peps/pep-0494/|title=PEP 494 -- Python 3.6 Release Schedule|website=Python.org|language=en|access-date=2019-11-06}}</ref><ref>{{Cite web|url=https://www.python.org/downloads/release/python-369/|title=Python Release Python 3.6.9|website=Python.org|language=en|access-date=2019-11-06}}</ref> --> Python&nbsp;3.5.x<ref>{{Cite web|url=https://devguide.python.org/#status-of-python-branches|title=Python Developer\u2019s Guide \u2014 Python Developer's Guide|website=devguide.python.org|access-date=2019-12-17}}</ref> and later are supported.\n\nPython [[interpreter (computing)|interpreters]] are available for many [[operating system]]s. A global community of programmers develops and maintains [[CPython]], an [[open-source software|open source]]<ref>{{cite web |url=https://docs.python.org/3/license.html |title=History and License |accessdate=5 December 2016}} \"All Python releases are Open Source\"</ref> [[reference implementation]]. A [[nonprofit organization|non-profit organization]], the [[Python Software Foundation]], manages and directs resources for Python and CPython development.\n\n== History ==\n[[File:Guido van Rossum OSCON 2006 cropped.png|thumb|150px|[[Guido van Rossum]] at OSCON 2006]]\n\n{{Main|History of Python}}\n\nPython was conceived in the late 1980s<ref name=\"venners-interview-pt-1\" /> by [[Guido van Rossum]] at [[Centrum Wiskunde & Informatica]] (CWI) in the [[Netherlands]] as a successor to the [[ABC (programming language)|ABC language]] (itself inspired by [[SETL]]),<ref name=\"AutoNT-12\" /> capable of [[exception handling]] and interfacing with the [[Amoeba (operating system)|Amoeba]] operating system.<ref name=\"faq-created\" /> Its implementation began in December 1989.<ref name=\"timeline-of-python\" /> Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his \"permanent vacation\" from his responsibilities as Python's ''[[Benevolent Dictator For Life]]'', a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker.<ref name=\"lj-bdfl-resignation\" /> He now shares his leadership as a member of a five-person steering council.<ref>{{cite web |title=Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life {{!}} Linux Journal |url=https://www.linuxjournal.com/content/guido-van-rossum-stepping-down-role-pythons-benevolent-dictator-life |website=www.linuxjournal.com |language=en}}</ref><ref>{{cite news |title=Python boss Guido van Rossum steps down after 30 years |url=https://www.theinquirer.net/inquirer/news/3035842/python-boss-guido-van-rossum-steps-down-after-30-years |newspaper=[[The Inquirer]]|language=en}}</ref><ref>{{cite web |title=PEP 8100 |url=https://www.python.org/dev/peps/pep-8100/ |website=python |publisher=Python Software Foundation |accessdate=4 May 2019}}</ref> In January 2019, active Python core developers elected Brett Cannon, Nick Coghlan, Barry Warsaw, Carol Willing and Van Rossum to a five-member \"Steering Council\" to lead the project.<ref>{{cite web |title=PEP 8100 |url=https://www.python.org/dev/peps/pep-8100/ |publisher=Python Software Foundation |accessdate=4 May 2019}}</ref>\n\nPython 2.0 was released on 16 October 2000 with many major new features, including a [[Cycle detection|cycle-detecting]] [[garbage collection (computer science)|garbage collector]] and support for [[Unicode]].<ref name=\"newin-2.0\" />\n\nPython 3.0 was released on 3 December 2008. It was a major revision of the language that is not completely [[backward compatibility|backward-compatible]].<ref name=\"3.0-release\" /> Many of its major features were [[backporting|backported]] to Python 2.6.x<ref name=\"pep-3000\" /> and 2.7.x version series.  Releases of Python 3 include the <code>2to3</code> utility, which automates (at least partially) the translation of Python 2 code to Python 3.<ref>{{cite web |url=https://docs.python.org/3/library/2to3.html |title=Automated Python 2 to 3 code translation \u2014 Python Documentation |accessdate=11 February 2018 }}</ref>\n\nPython 2.7's [[end-of-life (product)|end-of-life]] date was initially set at 2015 then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.<ref>{{cite web |url=https://legacy.python.org/dev/peps/pep-0373/ |title=PEP 373 -- Python 2.7 Release Schedule |work=python.org |accessdate=9 January 2017}}</ref><ref>{{cite web |url=https://www.python.org/dev/peps/pep-0466/ |title=PEP 466 -- Network Security Enhancements for Python 2.7.x |work=python.org |accessdate=9 January 2017}}</ref>\n\n== Features and philosophy ==\nPython is a [[multi-paradigm programming language]]. [[Object-oriented programming]] and [[structured programming]] are fully supported, and many of its features support [[functional programming]] and [[aspect-oriented programming]] (including by [[metaprogramming]]<ref name=\"AutoNT-13\" /> and [[metaobject]]s (magic methods)).<ref name=\"AutoNT-14\" /> Many other paradigms are supported via extensions, including [[design by contract]]<ref name=\"AutoNT-15\" /><ref name=\"AutoNT-16\" /> and [[logic programming]].<ref name=\"AutoNT-17\" />\n\nPython uses [[dynamic typing]] and a combination of [[reference counting]] and a cycle-detecting garbage collector for [[memory management]]. It also features dynamic [[Name resolution (programming languages)|name resolution]] ([[late binding]]), which binds method and variable names during program execution.\n\nPython's design offers some support for [[functional programming]] in the [[Lisp (programming language)|Lisp]] tradition. It has <code>filter</code>, <code>map</code>, and <code>reduce</code> functions; [[list comprehension]]s, [[Associative array|dictionaries]], sets, and [[generator (computer programming)|generator]] expressions.<ref name=\"AutoNT-59\"/> The standard library has two modules (itertools and functools) that implement functional tools borrowed from [[Haskell (programming language)|Haskell]] and [[Standard ML]].<ref name=\"AutoNT-18\" />\n\nThe language's core philosophy is summarized in the document ''The [[Zen of Python]]'' (''PEP 20''), which includes [[aphorism]]s such as:<ref name=\"PEP20\" />\n\n<!-- Note this isn't a full list, just some of the more significant aphorisms -->\n* Beautiful is better than ugly.\n* Explicit is better than implicit.\n* Simple is better than complex.\n* Complex is better than complicated.\n* Readability counts.\n\nRather than having all of its functionality built into its core, Python was designed to be highly [[Extensibility|extensible]]. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with [[ABC (programming language)|ABC]], which espoused the opposite approach.<ref name=\"venners-interview-pt-1\" />\n\nPython strives for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to [[Perl]]'s \"[[there is more than one way to do it]]\" motto, Python embraces a \"there should be one\u2014and preferably only one\u2014obvious way to do it\" design philosophy.<ref name=\"PEP20\" /> [[Alex Martelli]], a Fellow at the Python Software Foundation and Python book author, writes that \"To describe something as 'clever' is ''not'' considered a compliment in the Python culture.\"<ref name=\"AutoNT-19\" />\n\nPython's developers strive to avoid [[premature optimization]], and reject patches to non-critical parts of the [[CPython]] reference implementation that would offer marginal increases in speed at the cost of clarity.<ref name=\"AutoNT-20\" /> When speed is important, a Python programmer can move time-critical functions to extension modules written in languages such as C, or use [[PyPy]], a [[just-in-time compilation|just-in-time compiler]]. [[Cython]] is also available, which translates a Python script into C and makes direct C-level API calls into the Python interpreter.\n\nAn important goal of Python's developers is keeping it fun to use. This is reflected in the language's name\u2014a tribute to the British comedy group [[Monty Python]]<ref name=\"AutoNT-24\"/>\u2014and in occasionally playful approaches to tutorials and reference materials, such as examples that refer to spam and eggs (from a [[Spam (Monty Python)|famous Monty Python sketch]]) instead of the standard [[Foobar|foo and bar]].<ref>{{Cite web|url=https://insidetech.monster.com/training/articles/8114-15-ways-python-is-a-powerful-force-on-the-web|title=15 Ways Python Is a Powerful Force on the Web}}</ref><ref>{{Cite web|url=https://docs.python.org/2/library/pprint.html|title=8.18. pprint \u2014 Data pretty printer \u2014 Python 2.7.18rc1 documentation|website=docs.python.org}}</ref>\n\nA common [[neologism]] in the Python community is ''pythonic'', which can have a wide range of meanings related to program style. To say that code is pythonic is to say that it uses Python idioms well, that it is natural or shows fluency in the language, that it conforms with Python's minimalist philosophy and emphasis on readability. In contrast, code that is difficult to understand or reads like a rough transcription from another programming language is called ''unpythonic''.\n\nUsers and admirers of Python, especially those considered knowledgeable or experienced, are often referred to as ''Pythonistas''.<ref name=\"AutoNT-27\" /><ref name=\"AutoNT-25\" />\n\n== Syntax and semantics ==\n{{Main|Python syntax and semantics}}\n\nPython is meant to be an easily readable language. Its formatting is visually uncluttered, and it often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use [[curly bracket programming language|curly brackets]] to delimit blocks, and semicolons after statements are optional. It has fewer syntactic exceptions and special cases than [[C (programming language)|C]] or [[Pascal (programming language)|Pascal]].<ref name=\"AutoNT-52\" />\n\n=== Indentation ===\n{{Main|Python syntax and semantics#Indentation}}\n\nPython uses [[whitespace character|whitespace]] indentation, rather than [[curly bracket programming language|curly brackets]] or keywords, to delimit [[block (programming)|blocks]]. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.<ref name=\"AutoNT-53\" /> Thus, the program's visual structure accurately represents the program's semantic structure.<ref name=guttag>{{Cite book| publisher = MIT Press| isbn = 978-0-262-52962-4| last = Guttag| first = John V.| title = Introduction to Computation and Programming Using Python: With Application to Understanding Data| date = 2016-08-12}}</ref> This feature is sometimes termed the [[off-side rule]], which some other languages share, but in most languages indentation doesn't have any semantic meaning.\n\n=== Statements and control flow ===\nPython's [[Statement (computer science)|statements]] include (among others):\n\n* The assignment statement (token '=', the equals sign). This operates differently than in traditional [[imperative programming]] languages, and this fundamental mechanism (including the nature of Python's version of ''variables'') illuminates many other features of the language. Assignment in [[C (programming language)|C]], e.g., <code>x = 2</code>, translates to \"typed variable name {{var|x}} receives a copy of numeric value 2\". The (right-hand) value is copied into an [[Memory allocation|allocated storage location]] for which the (left-hand) [[Variable (computer science)|variable name]] is the symbolic address. The memory allocated to the variable is large enough (potentially quite large) for the declared [[Type system|type]]. In the simplest case of Python assignment, using the same example, <code>x = 2</code>, translates to \"(generic) name x receives a [[Pointer (computer programming)|reference]] to a separate, dynamically allocated [[Object (computer science)|object]] of numeric (int) type of value 2.\" This is termed ''binding'' the name to the object. Since the name's storage location doesn't ''contain'' the indicated value, it is improper to call it a ''variable''. Names may be subsequently rebound at any time to objects of greatly varying types, including strings, procedures, complex objects with data and methods, etc. Successive assignments of a common value to multiple names, e.g., <code>x = 2</code>; <code>y = 2</code>; <code>z = 2</code> result in allocating storage to (at most) three names and one numeric object, to which all three names are bound. Since a name is a generic reference holder it is unreasonable to associate a fixed [[Type system|data type]] with it. However at a given time a name will be bound to ''some'' object, which '''will''' have a type; thus there is [[Dynamic type|dynamic typing]].\n* The <code>[[if-then-else|if]]</code> statement, which conditionally executes a block of code, along with <code>else</code> and <code>elif</code> (a contraction of else-if).\n* The <code>[[Foreach#Python|for]]</code> statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block.\n* The <code>[[While loop#Python|while]]</code> statement, which executes a block of code as long as its condition is true.\n* The <code>[[Exception handling syntax#Python|try]]</code> statement, which allows exceptions raised in its attached code block to be caught and handled by <code>except</code> clauses; it also ensures that clean-up code in a <code>finally</code> block will always be run regardless of how the block exits.\n* The <code>raise</code> statement, used to raise a specified exception or re-raise a caught exception.\n* The <code>class</code> statement, which executes a block of code and attaches its local namespace to a [[class (computer science)|class]], for use in [[object-oriented programming]].\n* The <code>def</code> statement, which defines a [[function (computing)|function]] or [[method (computing)|method]].\n* The <code>with</code> statement, from Python 2.5 released in September 2006,<ref>{{cite web|url=https://www.python.org/download/releases/2.5/|title=Python 2.5 Release|website=Python.org}}</ref> which encloses a code block within a context manager (for example, acquiring a [[lock (computer science)|lock]] before the block of code is run and releasing the lock afterwards, or opening a [[Computer file|file]] and then closing it), allowing [[resource acquisition is initialization|Resource Acquisition Is Initialization]] (RAII)-like behavior and replaces a common try/finally idiom.<ref>{{cite web|url=https://www.python.org/download/releases/2.5/highlights/|title=Highlights: Python 2.5|website=Python.org}}</ref>\n*The [[break statement|<code>break</code>]] statement, exits from the loop.\n*The <code>continue</code> statement, skips this iteration and continues with the next item.\n* The <code>pass</code> statement, which serves as a [[NOP (code)|NOP]]. It is syntactically needed to create an empty code block.\n* The <code>[[assertion (programming)|assert]]</code> statement, used during debugging to check for conditions that ought to apply.\n* The <code>yield</code> statement, which returns a value from a [[generator (computer programming)#Python|generator]] function. From Python 2.5, <code>yield</code> is also an operator. This form is used to implement [[coroutine]]s.\n* The <code>import</code> statement, which is used to import modules whose functions or variables can be used in the current program. There are three ways of using import: <code>import <module name> [as <alias>]</code> or <code>from <module name> import *</code> or <code>from <module name> import <definition 1> [as <alias 1>], <definition 2> [as <alias 2>], ...</code>.\n* The <code>print</code> statement was changed to the <code>print()</code> function in Python 3.\n\nPython does not support [[tail call]] optimization or [[first-class continuations]], and, according to Guido van Rossum, it never will.<ref name=\"AutoNT-55\" /><ref name=\"AutoNT-56\" /> However, better support for [[coroutine]]-like functionality is provided in 2.5, by extending Python's [[generator (computer programming)|generators]].<ref name=\"AutoNT-57\" /> Before 2.5, generators were [[lazy evaluation|lazy]] [[iterator]]s; information was passed unidirectionally out of the generator. From Python 2.5, it is possible to pass information back into a generator function, and from Python 3.3, the information can be passed through multiple stack levels.<ref name=\"AutoNT-58\" />\n\n=== Expressions ===\nSome Python [[Expression (computer science)|expressions]] are similar to languages such as [[C (programming language)|C]] and [[Java (programming language)|Java]], while some are not:\n\n* Addition, subtraction, and multiplication are the same, but the behavior of division differs. There are two types of divisions in Python. They are floor division (or integer division) <code>//</code> and floating point<code>/</code>division.<ref>{{cite web|title=division|url=https://docs.python.org|website=python.org}}</ref> Python also added the <code>**</code> operator for exponentiation.\n* From Python 3.5, the new <code>@</code> infix operator was introduced. It is intended to be used by libraries such as [[NumPy]] for [[matrix multiplication]].<ref name=PEP465>{{cite web |title=PEP 0465 -- A dedicated infix operator for matrix multiplication |url=https://www.python.org/dev/peps/pep-0465/|website=python.org |accessdate=1 January 2016}}</ref><ref name=Python3.5Changelog>{{cite web |title=Python 3.5.1 Release and Changelog |url=https://www.python.org/downloads/release/python-351/|website=python.org |accessdate=1 January 2016}}</ref>\n* From Python 3.8, the syntax <code>:=</code>, called the 'walrus operator' was introduced. It assigns values to variables as part of a larger expression.<ref name=Python3.8Changelog>{{cite web |title=What\u2019s New In Python 3.8 |url=https://docs.python.org/3.8/whatsnew/3.8.html |accessdate=14 October 2019}}</ref>\n* In Python, <code>==</code> compares by value, versus Java, which compares numerics by value<ref>{{cite web |url=https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.21.1 |title=Chapter 15. Expressions - 15.21.1. Numerical Equality Operators == and != |publisher=[[Oracle Corporation]] |accessdate=28 August 2016}}</ref> and objects by reference.<ref>{{cite web |url=https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.21.3 |title=Chapter 15. Expressions - 15.21.3. Reference Equality Operators == and != |publisher=Oracle Corporation |accessdate=28 August 2016}}</ref> (Value comparisons in Java on objects can be performed with the <code>equals()</code> method.) Python's <code>is</code> operator may be used to compare object identities (comparison by reference). In Python, comparisons may be chained, for example <code>a <= b <= c</code>.\n* Python uses the words <code>and</code>, <code>or</code>, <code>not</code> for its boolean operators rather than the symbolic <code>&&</code>, <code>||</code>, <code>!</code> used in Java and C.\n* Python has a type of expression termed a ''[[list comprehension#Python|list comprehension]]''. Python 2.4 extended list comprehensions into a more general expression termed a ''[[generator (computer programming)|generator]] expression''.<ref name=\"AutoNT-59\" />\n* [[Anonymous function]]s are implemented using [[Lambda (programming)|lambda expressions]]; however, these are limited in that the body can only be one expression.\n* Conditional expressions in Python are written as <code>x if c else y</code><ref name=\"AutoNT-60\" /> (different in order of operands from the <code>[[?:|c ? x : y]]</code> operator common to many other languages).\n* Python makes a distinction between [[list (computer science)|lists]] and [[tuple]]s. Lists are written as <code>[1, 2, 3]</code>, are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be [[immutable]] in Python). Tuples are written as <code>(1, 2, 3)</code>, are immutable and thus can be used as the keys of dictionaries, provided all elements of the tuple are immutable. The <code>+</code> operator can be used to concatenate two tuples, which does not directly modify their contents, but rather produces a new tuple containing the elements of both provided tuples. Thus, given the variable <code>t</code> initially equal to <code>(1, 2, 3)</code>, executing <code>t = t + (4, 5)</code> first evaluates <code>t + (4, 5)</code>, which yields <code>(1, 2, 3, 4, 5)</code>, which is then assigned back to <code>t</code>, thereby effectively \"modifying the contents\" of <code>t</code>, while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous contexts.<ref>{{cite web|title=4. Built-in Types &#8212; Python 3.6.3rc1 documentation|url=https://docs.python.org/3/library/stdtypes.html#tuple|website=python.org|accessdate=1 October 2017}}</ref> \n* Python features ''sequence unpacking'' wherein multiple expressions, each evaluating to anything that can be assigned to (a variable, a writable property, etc.), are associated in the identical manner to that forming tuple literals and, as a whole, are put on the left hand side of the equal sign in an assignment statement. The statement expects an ''iterable'' object on the right hand side of the equal sign that produces the same number of values as the provided writable expressions when iterated through, and will iterate through it, assigning each of the produced values to the corresponding expression on the left.<ref>{{cite web|title=5.3. Tuples and Sequences &#8212; Python 3.7.1rc2 documentation|url=https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences|website=python.org|accessdate=17 October 2018}}</ref>  \n* Python has a \"string format\" operator <code>%</code>. This functions analogous to <code>[[printf format string|printf]]</code> format strings in [[C (programming language)|C]], e.g. <code>\"spam=%s eggs=%d\" % (\"blah\", 2)</code> evaluates to <code>\"spam=blah eggs=2\"</code>. In Python 3 and 2.6+, this was supplemented by the <code>format()</code> method of the <code>str</code> class, e.g. <code>\"spam={0} eggs={1}\".format(\"blah\", 2)</code>. Python 3.6 added \"f-strings\": <code>blah = \"blah\"; eggs = 2; f'spam={blah} eggs={eggs}'</code>.<ref name=\"pep-0498\">{{cite web |title=PEP 498 -- Literal String Interpolation |url=https://www.python.org/dev/peps/pep-0498/|website=python.org |accessdate=8 March 2017}}</ref>\n* Python has various kinds of [[string literal]]s:\n** Strings delimited by single or double quote marks. Unlike in [[Unix shell]]s, [[Perl]] and Perl-influenced languages, single quote marks and double quote marks function identically. Both kinds of string use the backslash (<code>\\</code>) as an [[escape character]]. [[String interpolation]] became available in Python 3.6 as \"formatted string literals\".<ref name=\"pep-0498\"/>\n** Triple-quoted strings, which begin and end with a series of three single or double quote marks. They may span multiple lines and function like [[here document]]s in shells, Perl and [[Ruby (programming language)|Ruby]].\n** [[Raw string]] varieties, denoted by prefixing the string literal with an <code>r</code>. Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as [[regular expression]]s and [[Microsoft Windows|Windows]]-style paths. Compare \"<code>@</code>-quoting\" in [[C Sharp (programming language)|C#]].\n* Python has [[array index]] and [[array slicing]] expressions on lists, denoted as <code>a[key]</code>, <code>a[start:stop]</code> or <code>a[start:stop:step]</code>. Indexes are [[zero-based]], and negative indexes are relative to the end. Slices take elements from the ''start'' index up to, but not including, the ''stop'' index. The third slice parameter, called ''step'' or ''stride'', allows elements to be skipped and reversed. Slice indexes may be omitted, for example <code>a[:]</code> returns a copy of the entire list. Each element of a slice is a [[shallow copy]].\n\nIn Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as [[Common Lisp]], [[Scheme (programming language)|Scheme]], or [[Ruby (programming language)|Ruby]]. This leads to duplicating some functionality. For example:\n\n* [[List comprehensions]] vs. <code>for</code>-loops\n* [[Conditional (programming)|Conditional]] expressions vs. <code>if</code> blocks\n* The <code>eval()</code> vs. <code>exec()</code> built-in functions (in Python 2, <code>exec</code> is a statement); the former is for expressions, the latter is for statements.\n\nStatements cannot be a part of an expression, so list and other comprehensions or [[Lambda (programming)|lambda expressions]], all being expressions, cannot contain statements. A particular case of this is that an assignment statement such as <code>a = 1</code> cannot form part of the conditional expression of a conditional statement. This has the advantage of avoiding a classic C error of mistaking an assignment operator <code>=</code> for an equality operator <code>==</code> in conditions: <code>if (c = 1) { ... }</code> is syntactically valid (but probably unintended) C code but <code>if c = 1: ...</code> causes a syntax error in Python.\n\n=== Methods ===\n[[Method (programming)|Methods]] on objects are [[function (programming)|functions]] attached to the object's class; the syntax <code>instance.method(argument)</code> is, for normal methods and functions, [[syntactic sugar]] for <code>Class.method(instance, argument)</code>. Python methods have an explicit <code>[[this (computer programming)|self]]</code> parameter to access [[instance data]], in contrast to the implicit <code>self</code> (or <code>this</code>) in some other object-oriented programming languages (e.g., [[C++]], [[Java (programming language)|Java]], [[Objective-C]], or [[Ruby (programming language)|Ruby]]).<ref name=\"AutoNT-61\" />\n\n=== Typing ===\n[[File:Python 3. The standard type hierarchy.png|thumb|The standard type hierarchy in Python 3]]\nPython uses [[duck typing]] and has typed objects but untyped variable names. Type constraints are not checked at [[compile time]]; rather, operations on an object may fail, signifying that the given object is not of a suitable type. Despite being [[Type system#Dynamic type checking and runtime type information|dynamically typed]], Python is [[strongly typed programming language|strongly typed]], forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.\n\nPython allows programmers to define their own types using [[class (computer science)|classes]], which are most often used for [[object-oriented programming]]. New [[object (computer science)|instances]] of classes are constructed by calling the class (for example, <code>SpamClass()</code> or <code>EggsClass()</code>), and the classes are instances of the [[metaclass]] <code>type</code> (itself an instance of itself), allowing [[metaprogramming]] and [[reflection (computer science)|reflection]].\n\nBefore version 3.0, Python had two kinds of classes: ''old-style'' and ''new-style''.<ref name=\"classy\" /> The syntax of both styles is the same, the difference being whether the class <code>object</code> is inherited from, directly or indirectly (all new-style classes inherit from <code>object</code> and are instances of <code>type</code>). In versions of Python 2 from Python 2.2 onwards, both kinds of classes can be used. Old-style classes were eliminated in Python 3.0.\n\nThe long term plan is to support [[gradual typing]]<ref>{{cite web |url=https://lwn.net/Articles/627418/ |title=Type hinting for Python |publisher=LWN.net |date=24 December 2014 |accessdate=5 May 2015}}</ref> and from Python 3.5, the syntax of the language allows specifying static types but they are not checked in the default implementation, CPython. An experimental optional static type checker named ''mypy'' supports compile-time type checking.<ref>{{cite web |url=http://mypy-lang.org/ |title=mypy - Optional Static Typing for Python |accessdate=28 January 2017}}</ref>\n\n{|class=\"wikitable\"\n|+Summary of Python 3's built-in types\n|-\n! Type\n! [[immutable object|Mutability]]\n! Description\n! style=\"width: 23em;\" | Syntax examples\n|-\n| <code>bool</code>\n| immutable\n| [[Boolean value]]\n| {{code|lang=python|True}}<br>{{code|lang=python|False}}\n|-\n| <code>bytearray</code>\n| mutable\n| Sequence of [[byte]]s\n| {{code|lang=python|bytearray(b'Some ASCII')}}<br>{{code|lang=python|bytearray(b\"Some ASCII\")}}<br>{{code|lang=python|bytearray([119, 105, 107, 105])}}\n|-\n| <code>bytes</code>\n| immutable\n| Sequence of bytes\n| {{code|lang=python|b'Some ASCII'}}<br>{{code|lang=python|b\"Some ASCII\"}}<br>{{code|lang=python|bytes([119, 105, 107, 105])}}\n|-\n| <code>complex</code>\n| immutable\n| [[Complex number]] with real and imaginary parts\n| {{code|lang=python|3+2.7j}}\n|-\n| <code>dict</code>\n| mutable\n| [[Associative array]] (or dictionary) of key and value pairs; can contain mixed types (keys and values), keys must be a hashable type\n| {{code|lang=python|{'key1': 1.0, 3: False} }}<br>{{code|lang=python|{} }}\n|-\n| <code>ellipsis</code>{{ref|inaccessible-type|a}}\n| immutable\n| An [[Ellipsis (programming operator)|ellipsis]] placeholder to be used as an index in [[NumPy]] arrays\n| {{code|lang=python|...}}<br>{{code|lang=python|Ellipsis}}\n|-\n| <code>float</code>\n| immutable\n| [[Double precision]] [[floating point]] number. The precision is machine dependent but in practice is 64 bits.{{Citation needed|date=December 2019}}\n| {{code|lang=python|3.1415927}}\n|-\n| <code>frozenset</code>\n| immutable\n| Unordered [[Set (computer science)|set]], contains no duplicates; can contain mixed types, if hashable\n| {{code|lang=python|frozenset([4.0, 'string', True])}}\n|-\n| <code>int</code>\n| immutable\n| [[Integer (computer science)|Integer]] of unlimited magnitude<ref name=\"pep0237\" />\n| {{code|lang=python|42}}\n|-\n| <code>list</code>\n| mutable\n| [[list (computer science)|List]], can contain mixed types\n| {{code|lang=python|[4.0, 'string', True]}}<br>{{code|lang=python|[]}}\n|-\n| <code>NoneType</code>{{ref|inaccessible-type|a}}\n| immutable\n| An object representing the absence of a value, often called [[Null pointer|Null]] in other languages\n| {{code|lang=python|None}}\n|-\n| <code>NotImplementedType</code>{{ref|inaccessible-type|a}}\n| immutable\n| A placeholder that can be returned from [[Operator overloading|overloaded operators]] to indicate unsupported operand types.\n| {{code|lang=python|NotImplemented}}\n|-\n| <code>range</code>\n| immutable\n| A Sequence of numbers commonly used for looping specific number of times in <code>for</code> loops<ref>{{cite web |title=Built-in Types |url=https://docs.python.org/3/library/stdtypes.html#typesseq-range |accessdate=3 October 2019}}</ref>\n| {{code|lang=python|range(1, 10)}}<br>{{code|lang=python|range(10, -5, -2)}} \n|-\n| <code>set</code>\n| mutable\n| Unordered [[set (computer science)|set]], contains no duplicates; can contain mixed types, if hashable\n| {{code|lang=python|{4.0, 'string', True} }}<br>{{code|lang=python|set()}}\n|-\n| <code>str</code>\n| immutable\n| A [[string (computer science)|character string]]: sequence of Unicode codepoints\n| {{code|lang=python|'Wikipedia'}}<br>{{code|lang=python|\"Wikipedia\"}}<br><syntaxhighlight lang=\"python\">\"\"\"Spanning\nmultiple\nlines\"\"\"</syntaxhighlight>\n|-\n| <code>tuple</code>\n| immutable\n| Can contain mixed types\n| {{code|lang=python|(4.0, 'string', True)}}<br>{{code|lang=python|('single element',)}}<br>{{code|lang=python|()}}\n|}\n\n{{note|inaccessible-type|a|Not directly accessible by name}}\n\n=== Mathematics ===\nPython has the usual symbols for arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>), the floor division operator <code>//</code> and the [[modulo operation|remainder operator]] <code>%</code> (where the remainder can be negative, <!--unlike in C language depending on compiler,<ref>{{Cite web|url=https://stackoverflow.com/questions/11720656/modulo-operation-with-negative-numbers/42131603|title=c - Modulo operation with negative numbers|quote=Note that, in C89, whether the result round upward or downward is implementation-defined.|website=Stack Overflow|access-date=2019-09-25}}</ref>--> e.g. <code>4 % -3 == -2</code>). It also has <code>**</code> for [[exponentiation]], e.g. <code>5**3 == 125</code> and <code>9**0.5 == 3.0</code>, and a matrix multiply operator <code>@</code> .<ref>{{cite web |url=https://legacy.python.org/dev/peps/pep-0465/ |title=PEP 465 -- A dedicated infix operator for matrix multiplication |work=python.org}}</ref> These operators work like in traditional math; with the same [[order of operations|precedence rules]], the operators [[Infix notation|infix]] ( <code>+</code> and <code>-</code> can also be [[Unary operation|unary]] to represent positive and negative numbers respectively). Additionally, it has a unary operator (<code>~</code>), which essentially inverts all the bits of its one argument. For integers, this means <code>~x=-x-1</code>.<ref>{{cite web |url=https://stackoverflow.com/questions/8305199/the-tilde-operator-in-python |title=The tilde operator in Python - Stackoverflow |work=stackoverflow.com}}</ref> Other operators include bitwise shift operators <code>x << y</code>, which shifts <code>x</code> to the left <code>y</code> places, the same as <code>x*(2**y) </code>, and <code>x >> y</code>, which shifts <code>x</code> to the right <code>y</code> places, the same as <code>x//(2**y)</code>.<ref>{{cite web |url=https://wiki.python.org/moin/BitwiseOperators |title=BitwiseOperators - Python Wiki |work=wiki.python.org}}</ref>\n\nDivision between integers produces floating point results. The behavior of division has changed significantly over time:<ref name=\"pep0238\"/>\n\n* Python 2.1 and earlier used C's division behavior. The <code>/</code> operator is integer division if both operands are integers, and floating-point division otherwise. Integer division rounds towards 0, e.g. {{nowrap|1=<code>7/3 == 2</code>}} and {{nowrap|1=<code>-7/3 == -2</code>.}}\n* Python 2.2 changed integer division to round towards negative infinity, e.g. <code>7/3 == 2</code> and <code>-7/3 == -3</code>. The floor division <code>//</code> operator was introduced. So <code>7//3 == 2</code>, <code>-7//3 == -3</code>, <code>7.5//3 == 2.0</code> and <code>-7.5//3 == -3.0</code>. Adding <code>from __future__ import division</code> causes a module to use Python 3.0 rules for division (see next).\n* Python 3.0 changed <code>/</code> to always be floating-point division, e.g. {{nowrap|1=<code>5/2 == 2.5</code>}}.\n\nIn Python terms, <code>/</code> is ''true division'' (or simply ''division''), and <code>//</code> is ''floor division.'' <code>/</code> before version 3.0 is ''classic division''.<ref name=\"pep0238\"/>\n\nRounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation <code>(a + b)//b == a//b + 1</code> is always true. It also means that the equation <code>b*(a//b) + a%b == a</code> is valid for both positive and negative values of <code>a</code>. However, maintaining the validity of this equation means that while the result of <code>a%b</code> is, as expected, in the [[half-open interval]] [0, ''b''), where <code>b</code> is a positive integer, it has to lie in the interval (''b'', 0] when <code>b</code> is negative.<ref name=\"AutoNT-62\" />\n\nPython provides a <code>round</code> function for [[rounding]] a float to the nearest integer. For [[Rounding#Tie-breaking|tie-breaking]], Python 3 uses [[round to even]]: <code>round(1.5)</code> and <code>round(2.5)</code> both produce <code>2</code>.<ref name=\"AutoNT-64\" /> Versions before 3 used [[Rounding#Rounding away from zero|round-away-from-zero]]: <code>round(0.5)</code> is <code>1.0</code>, <code>round(-0.5)</code> is <code>\u22121.0</code>.<ref name=\"AutoNT-63\" /> \n\nPython allows boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression <code>a < b < c</code> tests whether <code>a</code> is less than <code>b</code> and <code>b</code> is less than <code>c</code>.<ref name=\"AutoNT-65\" />  C-derived languages interpret this expression differently: in C, the expression would first evaluate <code>a < b</code>, resulting in 0 or 1, and that result would then be compared with <code>c</code>.<ref name=\"CPL\" />\n\nPython uses [[arbitrary-precision arithmetic]] for all integer operations. The <code>Decimal</code> type/class in the <code>decimal</code> module provides decimal floating point numbers to a pre-defined arbitrary precision and several rounding modes.<ref>{{cite web|title = PEP 0327 -- Decimal Data Type|url = https://www.python.org/dev/peps/pep-0327/|website = Python.org|accessdate = 26 September 2015|last = Batista|first = Facundo}}</ref> The <code>Fraction</code> class in the <code>fractions</code> module provides arbitrary precision for [[Rational number|rational numbers]].<ref>{{cite web|title = What's New in Python 2.6 \u2014 Python v2.6.9 documentation|url = https://docs.python.org/2.6/whatsnew/2.6.html|website = docs.python.org|accessdate = 26 September 2015}}</ref>\n\nDue to Python's extensive mathematics library, and the third-party library [[NumPy]] that further extends the native capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation.<ref>{{Cite web|url=https://www.stat.washington.edu/~hoytak/blog/whypython.html|title=10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) \u2014 Hoyt Koepke|website=www.stat.washington.edu|access-date=2019-02-03}}</ref><ref>{{Cite web|url=https://engineering.ucsb.edu/~shell/che210d/python.pdf|title=An introduction to Python for scientific computing|last=Shell|first=Scott|date=17 June 2014|website=|access-date=3 Feb 2019}}</ref>\n\n== Python programming examples ==\n[[\"Hello, World!\" program|Hello world]] program:\n<syntaxhighlight lang=\"python\">\nprint('Hello, world!')\n</syntaxhighlight>\n\nProgram to calculate the [[factorial]] of a positive integer:\n<syntaxhighlight lang=\"python\">\nn = int(input('Type a number, then its factorial will be printed: '))\n\nif n < 0:\n    raise ValueError('You must enter a positive number')\n\nfact = 1\ni = 2\nwhile i <= n:\n    fact = fact * i\n    i += 1\n\nprint(fact)\n</syntaxhighlight>\n\n== Libraries ==\nPython's large [[standard library]], commonly cited as one of its greatest strengths,<ref name=\"AutoNT-86\" /> provides tools suited to many tasks. For Internet-facing applications, many standard formats and protocols such as [[MIME]] and [[Hypertext Transfer Protocol|HTTP]] are supported. It includes modules for creating [[graphical user interface]]s, connecting to [[relational database]]s, [[pseudorandom number generator|generating pseudorandom numbers]], arithmetic with arbitrary-precision decimals,<ref name=\"AutoNT-88\" /> manipulating [[regular expression]]s, and [[unit testing]].\n\nSome parts of the standard library are covered by specifications (for example, the [[Web Server Gateway Interface]] (WSGI) implementation <code>wsgiref</code> follows PEP 333<ref name=\"AutoNT-89\" />), but most modules are not. They are specified by their code, internal documentation, and test suites. However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations.\n\n{{As of|2019|11|post=,}} the [[Python Package Index]] (PyPI), the official repository for third-party Python software, contains over 200,000<ref>{{cite web |url=http://www.modulecounts.com/ |title=Module Counts |date=|website=ModuleCounts |last1=Debill|first1=Erik |accessdate=5 November 2019}}</ref> packages with a wide range of functionality, including:\n\n* [[Graphical user interfaces]]\n* [[Web framework]]s\n* [[Multimedia]]\n* [[Databases]]\n* Networking \n* [[Test framework]]s\n* [[Automation]]\n* [[Web scraping]]<ref>{{cite web|url=https://likegeeks.com/python-web-scraping/|title=20+ Python Web Scraping Examples (Beautiful Soup & Selenium) - Like Geeks|date=5 December 2017|website=likegeeks.com|accessdate=12 March 2018}}</ref>\n* Documentation\n* [[System administration]]\n* [[Scientific computing]]\n* [[Text processing]]\n* [[Image processing]]\n* [[Machine learning]]\n* [[Data analytics]]\n\n== Development environments ==\n{{See also|Comparison of integrated development environments#Python}}\n\nMost Python implementations (including CPython) include a [[read\u2013eval\u2013print loop]] (REPL), permitting them to function as a [[command line interpreter]] for which the user enters statements sequentially and receives results immediately.\n\nOther shells, including [[IDLE]] and [[IPython]], add further abilities such as improved auto-completion, session state retention and [[syntax highlighting]].\n\nAs well as standard desktop [[integrated development environment]]s, there are [[Web browser]]-based IDEs; [[SageMath]] (intended for developing science and math-related Python programs); [[PythonAnywhere]], a browser-based IDE and hosting environment; and Canopy IDE, a commercial Python IDE emphasizing [[scientific computing]].<ref>{{cite web|last1=Enthought|first1=Canopy |title=Canopy |url=https://www.enthought.com/products/canopy/|website=www.enthought.com |accessdate=20 August 2016}}</ref>\n\n== Implementations ==\n{{See also|List of Python software#Python implementations}}\n\n=== Reference implementation ===\n[[CPython]] is the [[reference implementation]] of Python. It is written in [[C (programming language)|C]], meeting the [[C89 (C version)|C89]] standard with several select [[C99]] features.<ref name=\"AutoNT-66\" /> It compiles Python programs into an intermediate [[bytecode]]<ref name=\"AutoNT-67\" /> which is then executed by its [[virtual machine]].<ref name=\"AutoNT-68\" /> CPython is distributed with a large standard library written in a mixture of C and native Python. It is available for many platforms, including [[Microsoft Windows|Windows]] and most modern [[Unix-like]] systems. Platform portability was one of its earliest priorities.<ref name=\"AutoNT-69\" />\n\n=== Other implementations ===\n[[PyPy]] is a fast, compliant interpreter of Python 2.7 and 3.6.<ref name=\"AutoNT-70\" /> Its [[Just-in-time compilation|just-in-time compiler]] brings a significant speed improvement over CPython but several libraries written in C cannot be used with it.<ref name=\"AutoNT-71\" /><ref>{{cite web|url=https://hackernoon.com/which-is-the-fastest-version-of-python-2ae7c61a6b2b|title=Which is the fastest version of Python?|first=Anthony|last=Shaw|publisher=Hacker Noon|date=2018-03-30|accessdate=2019-12-20}}</ref>\n\n[[Stackless Python]] is a significant fork of CPython that implements [[microthread]]s; it does not use the C memory stack, thus allowing massively concurrent programs. PyPy also has a stackless version.<ref name=\"AutoNT-73\" />\n\n[[MicroPython]] and [[CircuitPython]] are Python 3 variants optimized for [[microcontroller]]s. This includes [[Lego Mindstorms EV3]].<ref>{{Cite web|url=https://education.lego.com/en-us/support/mindstorms-ev3/python-for-ev3|title=Python-for-EV3|website=LEGO Education|language=en|access-date=2019-04-17}}</ref>\n\n=== Unsupported implementations ===\nOther just-in-time Python compilers have been developed, but are now unsupported:\n\n* Google began a project named [[Unladen Swallow]] in 2009, with the aim of speeding up the Python interpreter five-fold by using the [[LLVM]], and of improving its multithreading ability to scale to thousands of cores,<ref name=\"AutoNT-74\" /> while ordinary implementations suffer from the [[global interpreter lock]].\n* [[Psyco]] was a [[Just-in-time compilation|just-in-time]] [[Run-time algorithm specialisation|specializing]] compiler that integrates with CPython and transforms bytecode to machine code at runtime. The emitted code is specialized for certain [[data type]]s and is faster than standard Python code.\n\nIn 2005, [[Nokia]] released a Python interpreter for the [[Series 60]] mobile phones named [[PyS60]]. It includes many of the modules from the CPython implementations and some additional modules to integrate with the [[Symbian]] operating system. The project has been kept up-to-date to run on all variants of the S60 platform, and several third-party modules are available. The Nokia [[N900]] also supports Python with [[GTK]] widget libraries, enabling programs to be written and run on the target device.<ref>{{cite web |title=Python on the Nokia N900 |url=http://www.stochasticgeometry.ie/2010/04/29/python-on-the-nokia-n900/|website=Stochastic Geometry|date=2010-04-29}}</ref>\n\n=== Cross-compilers to other languages ===\nThere are several compilers to high-level [[object language]]s, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language:\n\n* [[Jython]] enables the use of the Java class library from a Python program.\n* [[IronPython]] follows a similar approach in order to run Python programs on the .NET [[Common Language Runtime]].\n* The [[RPython]] language can be compiled to [[C (programming language)|C]], and is used to build the PyPy interpreter of Python.\n* [[Pyjs]] compiles Python to [[JavaScript]].\n* [[Cython]] compiles Python to [[C (programming language)|C]] and [[C++]].\n* [[Numba]] uses [[LLVM]] to compile Python to machine code.\n* Pythran compiles Python to [[C++]].<ref>{{Cite web|url=https://medium.com/@olivier.borderies/pythran-python-at-c-speed-518f26af60e8|title=Pythran: Python at C++ speed !|first=Olivier|last=Borderies|date=January 24, 2019|website=Medium}}</ref><ref>{{Cite web|url=https://pythran.readthedocs.io/en/latest/|title=Pythran \u2014 Pythran 0.9.5 documentation|website=pythran.readthedocs.io}}</ref>\n* Somewhat dated [[Pyrex (programming language)|Pyrex]] (latest release in 2010) and [[Shed Skin]] (latest release in 2013) compile to C and C++ respectively.\n* Google's Grumpy compiles Python to [[Go (programming language)|Go]].<ref>{{Cite web|url=https://github.com/google/grumpy|title=google/grumpy|date=April 10, 2020|via=GitHub}}</ref><ref>{{Cite web|url=https://opensource.google/projects/|title=Projects|website=opensource.google}}</ref>\n* [[MyHDL]] compiles Python to [[VHDL]].\n* [[Nuitka]] compiles Python into C++.<ref>{{cite web|url=http://nuitka.net/|title=Nuitka Home {{!}} Nuitka Home|website=nuitka.net|language=en|access-date=18 August 2017}}</ref>\n\n=== Performance ===\nA performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy '13.<ref>{{cite conference |title=Performance of Python runtimes on a non-numeric scientific code |last=Murri |first=Riccardo |conference=European Conference on Python in Science (EuroSciPy) |year=2013 |arxiv=1404.6388|bibcode=2014arXiv1404.6388M }}</ref>\n\n== Development ==\nPython's development is conducted largely through the ''Python Enhancement Proposal'' (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues and documenting Python design decisions.<ref name=\"PepCite000\" /> Python coding style is covered in PEP 8.<ref>{{cite web|url=https://www.python.org/dev/peps/pep-0008/|title=PEP 8 -- Style Guide for Python Code|website=Python.org}}</ref> Outstanding PEPs are reviewed and commented on by the Python community and the steering council.<ref name=\"PepCite000\" />\n\nEnhancement of the language corresponds with development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues are discussed in the [[Roundup (issue tracker)|Roundup]] [[bug tracker]] hosted at [https://bugs.python.org bugs.python.org].<ref name=\"AutoNT-21\" /> Development originally took place on a [[Self-hosting (web services)|self-hosted]] source-code repository running [[Mercurial]], until Python moved to [[GitHub]] in January 2017.<ref name=py_dev_guide>{{Cite web|url=https://docs.python.org/devguide/|title=Python Developer's Guide}}</ref>\n\nCPython's public releases come in three types, distinguished by which part of the version number is incremented:\n\n* Backward-incompatible versions, where code is expected to break and need to be manually [[ported]]. The first part of the version number is incremented. These releases happen infrequently\u2014for example, version 3.0 was released 8 years after 2.0.\n* Major or \"feature\" releases, about every 18 months, are largely compatible but introduce new features. The second part of the version number is incremented. Each major version is supported by bugfixes for several years after its release.<ref name=\"release-schedule\" />\n* Bugfix releases, which introduce no new features, occur about every 3 months and are made when a sufficient number of bugs have been fixed upstream since the last release. Security vulnerabilities are also patched in these releases. The third and final part of the version number is incremented.<ref name=\"AutoNT-22\" />\n\nPython 3.9 alpha1 was announced in November 2019<ref>{{Cite web|url=https://docs.python.org/3.9/whatsnew/3.9.html|title=What\u2019s New In Python 3.9|last=|first=|date=|website=Python|url-status=live|archive-url=|archive-date=|access-date=2019-11-28}}</ref> and with the adoption of a new yearly release cadence,<ref>{{Cite web|url=https://www.python.org/dev/peps/pep-0602/|title=PEP 602 -- Annual Release Cycle for Python|website=Python.org|language=en|access-date=2019-11-06}}</ref><ref>{{Cite web|url=https://lwn.net/Articles/802777/|title=Changing the Python release cadence [LWN.net]|website=lwn.net|access-date=2019-11-06}}</ref> the first release of 3.9 is slated for November 2020.<ref>{{Cite web|url=https://www.python.org/dev/peps/pep-0596/|title=PEP 596 -- Python 3.9 Release Schedule|website=Python.org|language=en|access-date=2019-11-06}}</ref>\n\nMany [[beta release|alpha, beta, and release-candidates]] are also released as previews and for testing before final releases. Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python's development team monitors the state of the code by running the large [[unit test]] suite during development, and using the [[BuildBot]] [[continuous integration]] system.<ref name=\"AutoNT-23\" />\n\nThe community of Python developers has also contributed over 206,000<ref>{{cite web|last1=DeBill|first1=Erik |title=Module Counts |url=http://www.modulecounts.com/#|website=www.modulecounts.com |accessdate=29 November 2019}}</ref> software modules ({{as of|2019|11|29|lc=yes}}) to the [[Python Package Index]] (PyPI), the official repository of third-party Python libraries.\n\nThe major [[academic conference]] on Python is [[PyCon]]. There are also special Python mentoring programmes, such as [[Pyladies]].\n\n== Naming ==\nPython's name is derived from the British comedy group [[Monty Python]], whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;<ref name=\"tutorial-chapter1\" /> for example, the [[metasyntactic variable]]s often used in Python literature are [[Spam (Monty Python)|''spam'' and ''eggs'']] instead of the traditional [[foobar|''foo'' and ''bar'']].<ref name=\"tutorial-chapter1\" /><ref name=\"AutoNT-26\" /> The official Python documentation also contains various references to Monty Python routines.<ref>{{cite book |last1=Lutz |first1=Mark |title=Learning Python: Powerful Object-Oriented Programming |year=2009 |publisher=O'Reilly Media, Inc. |isbn=9781449379322 |page=17 |url=https://books.google.com/books?id=1HxWGezDZcgC&pg=PA17 |language=en}}</ref><ref>{{cite book |last1=Fehily |first1=Chris |title=Python |year=2002 |publisher=Peachpit Press |isbn=9780201748840 |page=xv |url=https://books.google.com/books?id=carqdIdfVlYC&pg=PR15 |language=en}}</ref>\n\nThe prefix ''Py-'' is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include [[Pygame]], a [[language binding|binding]] of [[Simple DirectMedia Layer|SDL]] to Python (commonly used to create games); [[PyQt]] and [[PyGTK]], which bind [[Qt (software)|Qt]] and [[GTK]] to Python respectively; and [[PyPy]], a Python implementation originally written in Python.\n\n== API documentation generators ==\nPython API documentation generators include:\n\n* [[Sphinx (documentation generator)|Sphinx]]\n* [[Epydoc]]\n* [[HeaderDoc]]\n* [[pydoc]]\n\n== Uses ==\n{{Main|List of Python software}}\nSince 2003, Python has consistently ranked in the top ten most popular programming languages in the [[TIOBE Programming Community Index]] where, {{as of|2020|2|lc=y|df=}}, it is the third most popular language (behind [[Java (programming language)|Java]], and [[C (programming language)|C]]).<ref>{{cite web |url=http://www.tiobe.com/tiobe-index/ |title=TIOBE Index |publisher=TIOBE - The Software Quality Company |accessdate=7 March 2017}}</ref> It was selected Programming Language of the Year in 2007, 2010, and 2018.<ref name=\"AutoNT-34\" />\n\nAn empirical study found that scripting languages, such as Python, are more productive than conventional languages, such as C and Java, for programming problems involving string manipulation and search in a dictionary, and determined that memory consumption was often \"better than Java and not much worse than C or C++\".<ref name=\"AutoNT-28\" />\n\nLarge organizations that use Python include [[Wikipedia]], [[Google]],<ref name=\"quotes-about-python\" /> [[Yahoo!]],<ref name=\"AutoNT-29\" /> [[CERN]],<ref name=\"AutoNT-30\" /> [[NASA]],<ref name=\"AutoNT-31\" /> [[Facebook]],<ref>{{Cite web|url=https://developers.facebook.com/blog/post/301|title=Tornado: Facebook's Real-Time Web Framework for Python - Facebook for Developers|website=Facebook for Developers|language=en-US|access-date=2018-06-19}}</ref> [[Amazon (company)|Amazon]], [[Instagram]],<ref>{{cite web |url=https://instagram-engineering.com/what-powers-instagram-hundreds-of-instances-dozens-of-technologies-adf2e22da2ad |title=What Powers Instagram: Hundreds of Instances, Dozens of Technologies |publisher=Instagram Engineering |accessdate=27 May 2019}}</ref> [[Spotify]]<ref>{{Cite web|url=https://labs.spotify.com/2013/03/20/how-we-use-python-at-spotify/|title=How we use Python at Spotify|website=Spotify Labs|language=en-US|access-date=2018-07-25|date=2013-03-20}}</ref> and some smaller entities like [[Industrial Light & Magic|ILM]]<ref name=\"AutoNT-32\" /> and [[ITA Software|ITA]].<ref name=\"AutoNT-33\" /> The social news networking site [[Reddit]] is written entirely in Python.<ref>{{Citation|title=GitHub - reddit-archive/reddit: historical code from reddit.com.|date=2019-03-19|url=https://github.com/reddit-archive/reddit|publisher=The Reddit Archives|access-date=2019-03-20}}</ref>\n\nPython can serve as a [[scripting language]] for [[web application]]s, e.g., via [[mod_wsgi]] for the [[Apache web server]].<ref name=\"AutoNT-35\" /> With [[Web Server Gateway Interface]], a standard API has evolved to facilitate these applications. [[Web framework]]s like [[Django (web framework)|Django]], [[Pylons (web framework)|Pylons]], [[Pyramid (web framework)|Pyramid]], [[TurboGears]], [[web2py]], [[Tornado (web server)|Tornado]], [[Flask (web framework)|Flask]], [[Bottle (web framework)|Bottle]] and [[Zope]] support developers in the design and maintenance of complex applications. [[Pyjs]] and [[IronPython]] can be used to develop the client-side of Ajax-based applications. [[SQLAlchemy]] can be used as [[Data mapper pattern|data mapper]] to a relational database. [[Twisted (software)|Twisted]] is a framework to program communications between computers, and is used (for example) by [[Dropbox (service)|Dropbox]].\n\nLibraries such as [[NumPy]], [[SciPy]] and [[Matplotlib]] allow the effective use of Python in [[scientific computing]],<ref name=\"cise\">{{cite journal |last=Oliphant |first=Travis |title=Python for Scientific Computing |journal=Computing in Science and Engineering |volume=9 |issue=3 |pages=10\u201320 |year=2007 |url=https://www.h2desk.com/blog/python-scientific-computing/|doi=10.1109/MCSE.2007.58 |citeseerx=10.1.1.474.6460 |bibcode=2007CSE.....9c..10O }}</ref><ref name=\"millman\">{{cite journal |first1=K. Jarrod |last1=Millman |first2=Michael |last2=Aivazis |title=Python for Scientists and Engineers |journal=Computing in Science and Engineering |volume=13 |number=2 |pages=9\u201312 |year=2011 |url=http://www.computer.org/csdl/mags/cs/2011/02/mcs2011020009.html|doi=10.1109/MCSE.2011.36 |bibcode=2011CSE....13b...9M }}</ref> with specialized libraries such as [[Biopython]] and [[Astropy]] providing domain-specific functionality. [[SageMath]] is a [[mathematical software]] with a [[notebook interface]] programmable in Python: its library covers many aspects of [[mathematics]], including [[algebra]], [[combinatorics]], [[numerical mathematics]], [[number theory]], and [[calculus]]. \n\nPython has been successfully embedded in many software products as a scripting language, including in [[finite element method]] software such as [[Abaqus]], 3D parametric modeler like [[FreeCAD]], 3D animation packages such as [[3ds Max]], [[Blender (software)|Blender]], [[Cinema 4D]], [[Lightwave]], [[Houdini (software)|Houdini]], [[Maya (software)|Maya]], [[modo (software)|modo]], [[MotionBuilder]], [[Autodesk Softimage|Softimage]], the visual effects compositor [[Nuke (software)|Nuke]], 2D imaging programs like [[GIMP]],<ref>{{cite web |url=http://gimp-win.sourceforge.net/faq.html |title=Installers for GIMP for Windows - Frequently Asked Questions |author=<!-- Staff writer(s); no by-line. --> |date=26 July 2013 |accessdate=26 July 2013 |url-status=dead |archiveurl=https://web.archive.org/web/20130717070814/http://gimp-win.sourceforge.net/faq.html |archivedate=17 July 2013 |df=dmy-all }}</ref> [[Inkscape]], [[Scribus]] and [[Paint Shop Pro]],<ref name=\"AutoNT-38\" /> and [[musical notation]] programs like [[scorewriter]] and [[Capella (notation program)|capella]]. [[GNU Debugger]] uses Python as a [[Prettyprint|pretty printer]] to show complex structures such as C++ containers. [[Esri]] promotes Python as the best choice for writing scripts in [[ArcGIS]].<ref name=\"AutoNT-39\" /> It has also been used in several video games,<ref name=\"AutoNT-40\" /><ref name=\"AutoNT-41\" /> and has been adopted as first of the three available [[programming language]]s in [[Google App Engine]], the other two being [[Java (software platform)|Java]] and [[Go (programming language)|Go]].<ref name=\"AutoNT-42\" />\n\nPython is commonly used in [[artificial intelligence]] projects with the help of libraries like [[TensorFlow]], [[Keras]], [[PyTorch|Pytorch]] and [[Scikit-learn]].<ref name=whitepaper2015>{{cite web |last1 = Dean |first1 = Jeff |last2 = Monga |first2 = Rajat |first3 = Sanjay |last3 = Ghemawat |display-authors = 2 |authorlink1 = Jeff Dean (computer scientist) |title = TensorFlow: Large-scale machine learning on heterogeneous systems |url = http://download.tensorflow.org/paper/whitepaper2015.pdf |website = TensorFlow.org |publisher = Google Research |accessdate = 10 November 2015 |date = 9 November 2015 }}</ref><ref>{{cite web |last1=Piatetsky |first1=Gregory |title=Python eats away at R: Top Software for Analytics, Data Science, Machine Learning in 2018: Trends and Analysis |url=https://www.kdnuggets.com/2018/05/poll-tools-analytics-data-science-machine-learning-results.html/2 |website=KDnuggets |publisher=KDnuggets |accessdate=30 May 2018}}</ref><ref>{{cite web|url=https://scikit-learn.org/stable/testimonials/testimonials.html|title=Who is using scikit-learn? \u2014 scikit-learn 0.20.1 documentation|website=scikit-learn.org}}</ref><ref>{{cite web |authorlink1=Norman Jouppi|last1 = Jouppi |first1 = Norm |title = Google supercharges machine learning tasks with TPU custom chip |url = https://cloudplatform.googleblog.com/2016/05/Google-supercharges-machine-learning-tasks-with-custom-chip.html |website = Google Cloud Platform Blog |accessdate = 19 May 2016 }}</ref> As a scripting language with [[modular programming|modular architecture]], simple syntax and rich text processing tools, Python is often used for [[natural language processing]].<ref name=\"AutoNT-47\" />\n\nMany operating systems include Python as a standard component. It ships with most [[Linux distribution]]s<ref>{{Cite web|url=https://docs.python.org/3/using/unix.html|title=Python Setup and Usage|last=|first=|date=|website=|publisher=Python Software Foundation|url-status=live|archive-url=|archive-date=|access-date=10 January 2020}}</ref>, [[AmigaOS 4]], [[FreeBSD]] (as a package), [[NetBSD]], [[OpenBSD]] (as a package) and [[macOS]] and can be used from the command line (terminal). Many Linux distributions use installers written in Python: [[Ubuntu (operating system)|Ubuntu]] uses the [[Ubiquity (software)|Ubiquity]] installer, while [[Red Hat Linux]] and [[Fedora (operating system)|Fedora]] use the [[Anaconda (installer)|Anaconda]] installer. [[Gentoo Linux]] uses Python in its [[package management system]], [[Portage (software)|Portage]].\n\nPython is used extensively in the [[information security]] industry, including in exploit development.<ref name=\"AutoNT-49\" /><ref name=\"AutoNT-50\" />\n\nMost of the [[Sugar (software)|Sugar]] software for the [[One Laptop per Child]] XO, now developed at [[Sugar Labs]], is written in Python.<ref name=\"AutoNT-51\" /> The [[Raspberry Pi]] [[single-board computer]] project has adopted Python as its main user-programming language.\n\nDue to Python's user-friendly conventions and easy-to-understand language, it is commonly used as an intro language into computing sciences with students. This allows students to easily learn computing theories and concepts and then apply them to other programming languages.\n\n[[LibreOffice]] includes Python, and intends to replace Java with Python. Its Python Scripting Provider is a core feature<ref>{{cite web |title=4.0 New Features and Fixes |publisher=[[The Document Foundation]] |work=LibreOffice.org |year=2013 |url=http://www.libreoffice.org/download/4-0-new-features-and-fixes/ |accessdate=25 February 2013}}</ref> since Version 4.0 from 7 February 2013.\n\n== Languages influenced by Python ==\nPython's design and philosophy have influenced many other programming languages:\n\n* [[Boo (programming language)|Boo]] uses indentation, a similar syntax, and a similar object model.<ref name=\"AutoNT-90\" />\n* [[Cobra (programming language)|Cobra]] uses indentation and a similar syntax, and its \"Acknowledgements\" document lists Python first among languages that influenced it.<ref name=\"AutoNT-91\" /> However, Cobra directly supports [[Design by contract|design-by-contract]], [[Unit testing|unit tests]], and optional [[static typing]].<ref name=\"AutoNT-92\" />\n* [[CoffeeScript]], a [[programming language]] that cross-compiles to JavaScript, has Python-inspired syntax.\n* [[ECMAScript]] borrowed [[iterator]]s and [[generator (computer science)|generators]] from Python.<ref name=\"AutoNT-93\" />\n* [[Go (programming language)|Go]] is designed for the \"speed of working in a dynamic language like Python\"<ref name=\"AutoNT-94\"/> and shares the same syntax for slicing arrays.\n* [[Groovy (programming language)|Groovy]] was motivated by the desire to bring the Python design philosophy to [[Java (programming language)|Java]].<ref name=\"AutoNT-95\" />\n* [[Julia (programming language)|Julia]] was designed \"with [[hygienic macro|true macros]] [.. and to be] as usable for general programming as Python<!--, as easy for statistics as R, as natural for string processing as Perl, as powerful for linear algebra as Matlab, as good at gluing programs together as the shell. Something that is dirt simple to learn, yet keeps the most serious hackers happy. We want it interactive and we want it compiled.\n(Did we mention it --> [and] should be as fast as C<!--?-->\".<ref name=Julia>{{cite web| title= Why We Created Julia| date= February 2012| website= Julia website| url= https://julialang.org/blog/2012/02/why-we-created-julia| accessdate= 5 June 2014}}</ref> Calling to or from Julia is possible; to with PyCall.jl and a Python package pyjulia allows calling, in the other direction, from Python.\n* [[Kotlin (programming language)|Kotlin]] is a functional programming language with an interactive shell similar to Python. However, Kotlin is statically typed with access to standard Java libraries.<ref>{{cite web|url=https://kotlinlang.org/docs/tutorials/command-line.html|title=Working with the Command Line Compiler - Kotlin Programming Language|website=Kotlin|accessdate=12 March 2018}}</ref>\n* [[Nim (programming language)|Nim]] uses indentation and a similar syntax, however it is statically typed, and offers powerful macros.{{fact|date=February 2020}}\n* [[Ruby (programming language)|Ruby]]'s creator, [[Yukihiro Matsumoto]], has said: \"I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language.\"<ref name=\"linuxdevcenter\" />\n* [[Swift (programming language)|Swift]], a programming language developed by Apple, has some Python-inspired syntax.<ref>{{cite web |url=http://nondot.org/sabre |title=Chris Lattner's Homepage |publisher=Chris Lattner |first=Chris |last=Lattner |authorlink=Chris Lattner |date=3 June 2014 |accessdate=3 June 2014 |quote=I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.}}</ref>\n* [[Gdscript|GDScript]], dynamically typed programming language used to create video-games. It is extremely similar to Python with a few minor differences.\n\nPython's development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in [[Tcl]]<ref name=\"AutoNT-99\" /> and [[Erlang (programming language)|Erlang]].<ref name=\"AutoNT-100\" />\n\n== See also ==\n{{Portal|Computer programming|Free and open-source software}}\n\n* [[Python syntax and semantics]]\n* [[pip (package manager)]]\n* [[IPython]]\n\n== References ==\n{{Reflist|30em|refs=\n\n<ref name=\"faq-created\">{{cite web |url=https://docs.python.org/faq/general.html#why-was-python-created-in-the-first-place |title=Why was Python created in the first place? |work=General Python FAQ |publisher=Python Software Foundation |accessdate=22 March 2007}}</ref>\n\n<ref name=\"98-interview\">{{cite web |url=http://www.amk.ca/python/writing/gvr-interview |title=Interview with Guido van Rossum (July 1998) |last=Kuchling |first=Andrew M. |work=amk.ca |date=22 December 2006 |accessdate=12 March 2012 |url-status=dead |archiveurl=https://web.archive.org/web/20070501105422/http://www.amk.ca/python/writing/gvr-interview |archivedate=1 May 2007 |df=dmy-all }}</ref>\n\n<ref name=\"AutoNT-1\">{{ cite journal |last=van Rossum |first=Guido |year=1993 |title=An Introduction to Python for UNIX/C Programmers |journal=Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group) |quote=even though the design of C is far from ideal, its influence on Python is considerable. |citeseerx=10.1.1.38.2023 }}</ref>\n\n<ref name=\"classmix\">{{cite web |url=https://docs.python.org/tutorial/classes.html |title=Classes |work=The Python Tutorial |publisher=Python Software Foundation |accessdate=20 February 2012 |quote=It is a mixture of the class mechanisms found in C++ and Modula-3}}</ref>\n\n<ref name=\"effbot-call-by-object\">{{cite web |url=http://effbot.org/zone/call-by-object.htm |title=Call By Object |work=effbot.org |last=Lundh |first=Fredrik |quote=replace \"CLU\" with \"Python\", \"record\" with \"instance\", and \"procedure\" with \"function or method\", and you get a pretty accurate description of Python's object model. |accessdate=21 November 2017}}</ref>\n\n<ref name=\"AutoNT-2\">{{cite web |url=https://www.python.org/download/releases/2.3/mro/ |title=The Python 2.3 Method Resolution Order |last=Simionato |first=Michele |publisher=Python Software Foundation |quote=The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers}}</ref>\n\n<ref name=\"AutoNT-3\">{{cite web |url=https://docs.python.org/howto/functional.html |title=Functional Programming HOWTO |last=Kuchling |first=A. M. |work=Python v2.7.2 documentation |publisher=Python Software Foundation |accessdate=9 February 2012}}</ref>\n\n<ref name=\"pep0238\">{{cite web |url=https://www.python.org/dev/peps/pep-0238/ |title=PEP 238&nbsp;\u2013 Changing the Division Operator |first1=Moshe |last1=Zadka |first2=Guido |last2=van Rossum |date=11 March 2001 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=23 October 2013}}</ref>\n\n<ref name=\"AutoNT-4\">{{cite web |url=https://www.python.org/dev/peps/pep-0255/ |title=PEP 255&nbsp;\u2013 Simple Generators |first1=Neil |last1=Schemenauer |first2=Tim |last2=Peters |first3=Magnus Lie |last3=Hetland |date=18 May 2001 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=9 February 2012}}</ref>\n\n<ref name=\"AutoNT-5\">{{cite web |url=https://www.python.org/dev/peps/pep-0318/ |title=PEP 318&nbsp;\u2013 Decorators for Functions and Methods |first1=Kevin D. |last1=Smith |first2=Jim J. |last2=Jewett |first3=Skip |last3=Montanaro |first4=Anthony |last4=Baxter |date=2 September 2004 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=24 February 2012}}</ref>\n\n<ref name=\"AutoNT-6\">{{cite web |url=https://docs.python.org/3.2/tutorial/controlflow.html |title=More Control Flow Tools |work=Python 3 documentation |publisher=Python Software Foundation |accessdate=24 July 2015}}</ref>\n\n<ref name=\"bini\">{{cite book |last=Bini |first=Ola |title=Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform |year=2007 |publisher=APress |location=Berkeley |isbn=978-1-59059-881-8 |page=[https://archive.org/details/practicaljrubyon0000bini/page/3 3] |url-access=registration |url=https://archive.org/details/practicaljrubyon0000bini/page/3 }}</ref>\n\n<ref name=\"AutoNT-7\">{{cite web |last=Kuhlman |first=Dave |url=https://www.davekuhlman.org/python_book_01.pdf|title=A Python Book: Beginning Python, Advanced Python, and Python Exercises |at=Section 1.1|url-status=dead |archiveurl=https://web.archive.org/web/20120623165941/http://cutter.rexx.com/~dkuhlman/python_book_01.html |archivedate=23 June 2012 |df=dmy-all }}</ref>\n\n<ref name=\"About\">{{cite web |url=https://www.python.org/about |title=About Python |publisher=Python Software Foundation |accessdate=24 April 2012}}, second section \"Fans of Python use the phrase \"batteries included\" to describe the standard library, which covers everything from asynchronous processing to zip files.\"</ref>\n\n<ref name=\"venners-interview-pt-1\">{{cite web |url=http://www.artima.com/intv/pythonP.html |title=The Making of Python |last=Venners |first=Bill |date=13 January 2003 |work=Artima Developer |publisher=Artima |accessdate=22 March 2007}}</ref>\n\n<ref name=\"timeline-of-python\">{{cite web |url=https://python-history.blogspot.com/2009/01/brief-timeline-of-python.html \n|title=A Brief Timeline of Python |last=van Rossum |first=Guido |date=20 January 2009 |work=The History of Python |accessdate=20 January 2009}}</ref>\n\n<ref name=\"AutoNT-12\">{{ cite mailing list |url=https://mail.python.org/pipermail/python-dev/2000-August/008881.html |title=SETL (was: Lukewarm about range literals) |date=29 August 2000 |accessdate=13 March 2011 |mailinglist=Python-Dev |last=van Rossum |first=Guido |authorlink=Guido van Rossum}}</ref>\n\n<ref name=\"newin-2.0\">{{cite web |url=https://docs.python.org/whatsnew/2.0.html |title=What's New in Python 2.0 |last1=Kuchling |first1=A. M. |last2=Zadka |first2=Moshe |date=16 October 2000 |publisher=Python Software Foundation |accessdate=11 February 2012}}</ref>\n\n<ref name=\"3.0-release\">{{cite web |url=https://www.python.org/download/releases/3.0/ |title=Python 3.0 Release |publisher=Python Software Foundation |accessdate=8 July 2009}}</ref>\n\n<ref name=\"pep-3000\">{{cite web |url=https://www.python.org/dev/peps/pep-3000/ |title=PEP 3000&nbsp;\u2013 Python 3000 |last=van Rossum |first=Guido |date=5 April 2006 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=27 June 2009}}</ref>\n\n<ref name=\"AutoNT-13\">{{cite web |url=https://www.python.org/community/pycon/dc2004/papers/24/metaclasses-pycon.pdf |archiveurl=https://web.archive.org/web/20090530030205/http://www.python.org/community/pycon/dc2004/papers/24/metaclasses-pycon.pdf |archivedate=30 May 2009 |title=Python Metaclasses: Who? Why? When? |last=The Cain Gang Ltd. |accessdate=27 June 2009 |url-status=dead |df=dmy-all }}</ref>\n\n<ref name=\"AutoNT-14\">{{cite web |url=https://docs.python.org/3.0/reference/datamodel.html#special-method-names |title=3.3. Special method names |work=The Python Language Reference |publisher=Python Software Foundation |accessdate=27 June 2009}}</ref>\n\n<ref name=\"AutoNT-15\">{{cite web |url=http://www.nongnu.org/pydbc/ |title=PyDBC: method preconditions, method postconditions and class invariants for Python |accessdate=24 September 2011}}</ref>\n\n<ref name=\"AutoNT-16\">{{cite web |url=http://www.wayforward.net/pycontract/ |title=Contracts for Python |accessdate=24 September 2011}}</ref>\n\n<ref name=\"AutoNT-17\">{{cite web |url=https://sites.google.com/site/pydatalog/ |title=PyDatalog |accessdate=22 July 2012}}</ref>\n\n<ref name=\"AutoNT-18\">{{cite web |url=https://docs.python.org/3/library/itertools.html |title=6.5 itertools&nbsp;\u2013 Functions creating iterators for efficient looping |publisher=Docs.python.org |accessdate=22 November 2016}}</ref>\n\n<ref name=\"PEP20\">{{cite web |url=https://www.python.org/dev/peps/pep-0020/ |title=PEP 20&nbsp;\u2013 The Zen of Python |last=Peters |first=Tim |date=19 August 2004 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=24 November 2008}}</ref>\n\n<ref name=\"AutoNT-19\">{{cite book | url=http://shop.oreilly.com/product/9780596007973.do | title=Python Cookbook, 2nd Edition | publisher=[[O'Reilly Media]] |last1=Martelli |first1=Alex |last2=Ravenscroft |first2=Anna |last3=Ascher |first3=David | year=2005 | page=230 | isbn=978-0-596-00797-3}}</ref>\n\n<ref name=\"AutoNT-20\">{{Cite web|url=http://ebeab.com/2014/01/21/python-culture/|title=Ebeab.com|website=ebeab.com}}</ref>\n\n<ref name=\"PepCite000\">{{cite web |url=https://www.python.org/dev/peps/pep-0001/ |title=PEP 1&nbsp;\u2013 PEP Purpose and Guidelines |last1=Warsaw |first1=Barry |last2=Hylton |first2=Jeremy |last3=Goodger |first3=David |date=13 June 2000 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=19 April 2011}}</ref>\n\n<ref name=\"AutoNT-21\">{{cite web |url=https://www.python.org/dev/intro/ |title=Guido, Some Guys, and a Mailing List: How Python is Developed |last=Cannon |first=Brett |work=python.org |publisher=Python Software Foundation |accessdate=27 June 2009 |url-status=dead |archiveurl=https://web.archive.org/web/20090601134342/http://www.python.org/dev/intro/ |archivedate=1 June 2009 }}</ref>\n\n<ref name=\"release-schedule\">{{cite web |url=https://mail.python.org/pipermail/python-dev/2002-April/022739.html |title=&#91;Python-Dev&#93; Release Schedules (was Stability & change) |last=Norwitz |first=Neal |date=8 April 2002 |accessdate=27 June 2009}}</ref>\n\n<ref name=\"AutoNT-22\">{{cite web |url=https://www.python.org/dev/peps/pep-0006/ |title=PEP 6&nbsp;\u2013 Bug Fix Releases |last1=Aahz |last2=Baxter |first2=Anthony |date=15 March 2001 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=27 June 2009}}</ref>\n\n<ref name=\"AutoNT-23\">{{cite web |url=https://www.python.org/dev/buildbot/ |title=Python Buildbot |work=Python Developer\u2019s Guide |publisher=Python Software Foundation |accessdate=24 September 2011}}</ref>\n\n<ref name=\"AutoNT-24\">{{cite web |url=https://docs.python.org/2/faq/general.html#why-is-it-called-python |title=General Python FAQ |work=Python v2.7.3 documentation |publisher=Docs.python.org |date= |accessdate=3 December 2012}}</ref>\n\n<ref name=\"tutorial-chapter1\">{{cite web |url=https://docs.python.org/tutorial/appetite.html |title=Whetting Your Appetite |work=The Python Tutorial |publisher=Python Software Foundation |accessdate=20 February 2012}}</ref>\n\n<ref name=\"AutoNT-25\">{{cite web |url=http://python.net/crew/mwh/hacks/objectthink.html |title=How to think like a Pythonista}}</ref>\n\n<ref name=\"AutoNT-26\">{{cite web |url=https://stackoverflow.com/questions/5033906/in-python-should-i-use-else-after-a-return-in-an-if-block |title=In Python, should I use else after a return in an if block? |date=17 February 2011 |work=[[Stack Overflow]] |publisher=Stack Exchange |accessdate=6 May 2011}}</ref>\n\n<ref name=\"AutoNT-27\">{{cite web |url=http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html |title=Code Like a Pythonista: Idiomatic Python |last=Goodger |first=David}}</ref>\n\n<ref name=\"AutoNT-28\">{{cite web |url=http://page.mi.fu-berlin.de/prechelt/Biblio/jccpprt_computer2000.pdf |title=An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl |first=Lutz |last=Prechelt <!-- \"work\" doesn't work.. |work=[http://page.mi.fu-berlin.de/prechelt/Biblio/ Bibliography of Lutz Prechelt]--> |date=14 March 2000 |accessdate=30 August 2013}}</ref>\n\n<ref name=\"quotes-about-python\">{{cite web |url=https://www.python.org/about/quotes/ |title=Quotes about Python |publisher=Python Software Foundation |accessdate=8 January 2012}}</ref>\n\n<ref name=\"AutoNT-29\">{{cite web |url=https://wiki.python.org/moin/OrganizationsUsingPython |title=Organizations Using Python |publisher=Python Software Foundation |accessdate=15 January 2009}}</ref>\n\n<ref name=\"AutoNT-30\">{{ cite journal |title=Python : the holy grail of programming |journal=CERN Bulletin |issue=31/2006 |publisher=CERN Publications |date=31 July 2006 |url=http://cdsweb.cern.ch/journal/CERNBulletin/2006/31/News%20Articles/974627?ln=en |accessdate=11 February 2012}}</ref>\n\n<ref name=\"AutoNT-31\">{{cite web |url=https://www.python.org/about/success/usa/ |title=Python Streamlines Space Shuttle Mission Design |last=Shafer |first=Daniel G. |date=17 January 2003 |publisher=Python Software Foundation |accessdate=24 November 2008}}</ref>\n\n<ref name=\"AutoNT-32\">{{cite web |url=https://www.python.org/about/success/ilm/ |title=Industrial Light & Magic Runs on Python |last=Fortenberry |first=Tim |date=17 January 2003 |publisher=Python Software Foundation |accessdate=11 February 2012}}</ref>\n\n<ref name=\"AutoNT-33\">{{cite web |url=http://www.eweek.com/c/a/Application-Development/Python-Slithers-into-Systems/ |title=Python Slithers into Systems |last=Taft |first=Darryl K. |date=5 March 2007 |work=eWeek.com |publisher=Ziff Davis Holdings |accessdate=24 September 2011}}</ref>\n\n<ref name=\"AutoNT-34\">{{cite web |title=TIOBE Programming Community Index Python |author=TIOBE Software Index |year=2015 |url=http://www.tiobe.com/index.php/paperinfo/tpci/Python.html |accessdate=10 September 2015}}</ref>\n\n<ref name=\"AutoNT-35\">{{cite web |title=Usage statistics and market share of Python for websites |year=2012 |url=http://w3techs.com/technologies/details/pl-python/all/all |accessdate=18 December 2012}}</ref>\n\n<ref name=\"AutoNT-38\">{{cite web |url=http://www.jasc.com/support/customercare/articles/psp9components.asp |title=jasc psp9components |url-status=dead |archiveurl=https://web.archive.org/web/20080319061519/http://www.jasc.com/support/customercare/articles/psp9components.asp |archivedate=19 March 2008 }}</ref>\n\n<ref name=\"AutoNT-39\">{{cite web |url=http://webhelp.esri.com/arcgisdesktop/9.2/index.cfm?TopicName=About_getting_started_with_writing_geoprocessing_scripts |title=About getting started with writing geoprocessing scripts |date=17 November 2006 |work=ArcGIS Desktop Help 9.2 |publisher=Environmental Systems Research Institute |accessdate=11 February 2012}}</ref>\n\n<ref name=\"AutoNT-40\">{{cite web |url=http://community.eveonline.com/news/dev-blogs/stackless-python-2.7/ |title=Stackless Python 2.7 |publisher=[[CCP Games]] |date=24 August 2010 |author=CCP porkbelly |work=EVE Community Dev Blogs |quote=As you may know, EVE has at its core the programming language known as Stackless Python.}}</ref>\n\n<ref name=\"AutoNT-41\">{{cite web |url=http://www.2kgames.com/civ4/blog_03.htm |title=Modding Sid Meier's Civilization IV |last=Caudill |first=Barry |date=20 September 2005 |publisher=[[Firaxis Games]] |archiveurl=https://web.archive.org/web/20101202164144/http://www.2kgames.com/civ4/blog_03.htm |archivedate=2 December 2010 |work=Sid Meier's Civilization IV Developer Blog |quote=we created three levels of tools ... The next level offers Python and XML support, letting modders with more experience manipulate the game world and everything in it. |url-status=dead |df=dmy-all }}</ref>\n\n<ref name=\"AutoNT-42\">{{cite web |url=https://code.google.com/apis/documents/docs/1.0/developers_guide_python.html |title=Python Language Guide (v1.0) |work=Google Documents List Data API v1.0 |archiveurl=https://web.archive.org/web/20100715145616/http://code.google.com/apis/documents/docs/1.0/developers_guide_python.html |archivedate=15 July 2010 |url-status=dead |df=dmy-all }}</ref>\n\n<ref name=\"AutoNT-47\">{{Cite web|url=http://www.nltk.org/|title=Natural Language Toolkit \u2014 NLTK 3.5b1 documentation|website=www.nltk.org}}</ref>\n\n<ref name=\"AutoNT-49\">{{cite web |url=http://www.immunitysec.com/products-immdbg.shtml |title=Immunity: Knowing You're Secure |url-status=dead |archiveurl=https://web.archive.org/web/20090216134332/http://immunitysec.com/products-immdbg.shtml |archivedate=16 February 2009 |df=dmy-all }}</ref>\n\n<ref name=\"AutoNT-50\">{{Cite web|url=https://www.coresecurity.com/|title=Core Security|website=Core Security}}</ref>\n\n<ref name=\"AutoNT-51\">{{cite web |url=http://sugarlabs.org/go/Sugar |title=What is Sugar? |publisher=Sugar Labs |accessdate=11 February 2012}}</ref>\n\n<ref name=\"AutoNT-52\">{{cite web |title=Is Python a good language for beginning programmers? |url=https://docs.python.org/faq/general.html#is-python-a-good-language-for-beginning-programmers |work=General Python FAQ |publisher=Python Software Foundation |accessdate=21 March 2007}}</ref>\n\n<ref name=\"AutoNT-53\">{{cite web |url=http://www.secnetix.de/~olli/Python/block_indentation.hawk |title=Myths about indentation in Python |publisher=Secnetix.de |accessdate=19 April 2011}}</ref>\n\n<!--ref name=\"AutoNT-54\">{{cite web |url=http://c2.com/cgi/wiki?PythonWhiteSpaceDiscussion |title=White Space Discussion |accessdate=1 January 2013}}</ref-->\n\n<ref name=\"AutoNT-55\">{{cite web |last=van Rossum |first=Guido |url=http://neopythonic.blogspot.be/2009/04/tail-recursion-elimination.html |title=Tail Recursion Elimination |publisher=Neopythonic.blogspot.be |date=22 April 2009 |accessdate=3 December 2012}}</ref>\n\n<ref name=\"AutoNT-56\">{{cite web |title=Language Design Is Not Just Solving Puzzles |url=http://www.artima.com/weblogs/viewpost.jsp?thread=147358 |first=Guido |last=van Rossum |date=9 February 2006 |accessdate=21 March 2007 |work=Artima forums |publisher=Artima}}</ref>\n\n<ref name=\"AutoNT-57\">{{cite web |url=https://www.python.org/dev/peps/pep-0342/ |title=PEP 342&nbsp;\u2013 Coroutines via Enhanced Generators |last1=van Rossum |first1=Guido |last2=Eby |first2=Phillip J. |date=10 May 2005 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=19 February 2012}}</ref>\n\n<ref name=\"AutoNT-58\">{{cite web |url=https://www.python.org/dev/peps/pep-0380/ |title=PEP 380 |publisher=Python.org |date= |accessdate=3 December 2012}}</ref>\n\n<ref name=\"AutoNT-59\">{{cite web |url=https://www.python.org/dev/peps/pep-0289/ |title=PEP 289&nbsp;\u2013 Generator Expressions |last=Hettinger |first=Raymond |date=30 January 2002 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=19 February 2012}}</ref>\n\n<ref name=\"AutoNT-60\">{{cite web |url=https://www.python.org/dev/peps/pep-0308/ |title=PEP 308&nbsp;\u2013 Conditional Expressions |last1=van Rossum |first1=Guido |last2=Hettinger |first2=Raymond |date=7 February 2003 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=13 July 2011}}</ref>\n\n<ref name=\"AutoNT-61\">{{cite web |url=https://docs.python.org/faq/design.html#why-must-self-be-used-explicitly-in-method-definitions-and-calls |title=Why must 'self' be used explicitly in method definitions and calls? |work=Design and History FAQ |publisher=Python Software Foundation |accessdate=19 February 2012}}</ref>\n\n<ref name=\"classy\">{{cite web |title=The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1 |accessdate=12 January 2011 |url=https://docs.python.org/reference/datamodel.html#new-style-and-classic-classes}}</ref>\n\n<ref name=\"pep0237\">{{cite web |url=https://www.python.org/dev/peps/pep-0237/ |title=PEP 237&nbsp;\u2013 Unifying Long Integers and Integers |last1=Zadka |first1=Moshe |last2=van Rossum |first2=Guido |date=11 March 2001 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=24 September 2011}}</ref>\n\n<ref name=\"AutoNT-62\">{{cite web |url=https://python-history.blogspot.com/2010/08/why-pythons-integer-division-floors.html |title=Why Python's Integer Division Floors |accessdate=25 August 2010}}</ref>\n\n<ref name=\"AutoNT-63\">{{citation |url=https://docs.python.org/library/functions.html#round |accessdate=14 August 2011 |title=round |work=The Python standard library, release 2.7, \u00a72: Built-in functions}}</ref>\n\n<ref name=\"AutoNT-64\">{{citation |url=https://docs.python.org/py3k/library/functions.html#round |accessdate=14 August 2011 |title=round |work=The Python standard library, release 3.2, \u00a72: Built-in functions}}</ref>\n\n<ref name=\"AutoNT-65\">{{cite book | title=Python Essential Reference | first1=David M. |last1=Beazley | edition=4th | year = 2009 | page =66 }}</ref>\n\n<ref name=\"CPL\">{{cite book | title=The C Programming Language | first1=Brian W. | last1=Kernighan | first2=Dennis M. | last2=Ritchie |titlelink=The C Programming Language | edition=2nd | year=1988 | page=[https://archive.org/details/cprogramminglang00bria/page/206 206] }}</ref>\n\n<ref name=\"AutoNT-66\">{{cite web |url=https://www.python.org/dev/peps/pep-0007/ |title=PEP 7&nbsp;\u2013 Style Guide for C Code |last=van Rossum |first=Guido |date=5 June 2001 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=24 November 2008}}</ref>\n\n<ref name=\"AutoNT-67\">{{cite web |url=https://docs.python.org/3/library/dis.html#python-bytecode-instructions |title=CPython byte code |publisher=Docs.python.org |accessdate=16 February 2016}}</ref>\n\n<ref name=\"AutoNT-68\">{{cite web |url=http://www.troeger.eu/teaching/pythonvm08.pdf |title=Python 2.5 internals |accessdate=19 April 2011}}</ref>\n\n<ref name=\"AutoNT-69\">{{cite web |url=http://www.oreilly.com/pub/a/oreilly/frank/rossum_1099.html |title=An Interview with Guido van Rossum |publisher=Oreilly.com |accessdate=24 November 2008}}</ref>\n\n<ref name=\"AutoNT-70\">{{cite web |url=https://pypy.org/compat.html |title=PyPy compatibility |publisher=Pypy.org |date= |accessdate=3 December 2012}}</ref>\n\n<ref name=\"AutoNT-71\">{{cite web |url=http://speed.pypy.org/ |title=speed comparison between CPython and Pypy |publisher=Speed.pypy.org |date= |accessdate=3 December 2012}}</ref>\n\n<ref name=\"AutoNT-73\">{{cite web |url=http://doc.pypy.org/en/latest/stackless.html |title=Application-level Stackless features \u2014 PyPy 2.0.2 documentation |publisher=Doc.pypy.org |accessdate=17 July 2013}}</ref>\n\n<ref name=\"AutoNT-74\">{{cite web |url=https://code.google.com/p/unladen-swallow/wiki/ProjectPlan |title=Plans for optimizing Python |work=Google Project Hosting |date=15 December 2009 |accessdate=24 September 2011}}</ref>\n\n<ref name=\"AutoNT-86\">{{cite web |first=Przemyslaw |last=Piotrowski |url=http://www.oracle.com/technetwork/articles/piotrowski-pythoncore-084049.html |title=Build a Rapid Web Development Environment for Python Server Pages and Oracle |work=Oracle Technology Network |publisher=Oracle |date=July 2006 |accessdate=12 March 2012}}</ref>\n\n<ref name=\"AutoNT-88\">{{cite web |url=https://www.python.org/dev/peps/pep-0327/ |title=PEP 327&nbsp;\u2013 Decimal Data Type |last=Batista |first=Facundo |date=17 October 2003 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=24 November 2008}}</ref>\n\n<ref name=\"AutoNT-89\">{{cite web |url=https://www.python.org/dev/peps/pep-0333/ |title=PEP 333&nbsp;\u2013 Python Web Server Gateway Interface v1.0 |last=Eby |first=Phillip J. |date=7 December 2003 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=19 February 2012}}</ref>\n\n<ref name=\"AutoNT-90\">{{cite web |url=http://boo.codehaus.org/Gotchas+for+Python+Users |title=Gotchas for Python Users |work=boo.codehaus.org |publisher=Codehaus Foundation |accessdate=24 November 2008 |url-status=dead |archiveurl=https://web.archive.org/web/20081211062108/http://boo.codehaus.org/Gotchas+for+Python+Users |archivedate=11 December 2008 |df=dmy-all }}</ref>\n\n<ref name=\"AutoNT-91\">{{cite web |url=http://cobra-language.com/docs/acknowledgements/ |title=Acknowledgements |last=Esterbrook |first=Charles |work=cobra-language.com |publisher=Cobra Language |accessdate=7 April 2010}}</ref>\n\n<ref name=\"AutoNT-92\">{{cite web |url=http://cobra-language.com/docs/python/ |title=Comparison to Python |last=Esterbrook |first=Charles |work=cobra-language.com |publisher=Cobra Language |accessdate=7 April 2010}}</ref>\n\n<ref name=\"AutoNT-93\">{{cite web |url=http://wiki.ecmascript.org/doku.php?id=proposals:iterators_and_generators |archive-url=https://web.archive.org/web/20071020082650/http://wiki.ecmascript.org/doku.php?id=proposals:iterators_and_generators |url-status=dead |archive-date=20 October 2007 |title=Proposals: iterators and generators [ES4 Wiki&#93; |publisher=wiki.ecmascript.org |accessdate=24 November 2008 }}</ref>\n\n<ref name=\"AutoNT-94\">{{cite news |url=https://techcrunch.com/2009/11/10/google-go-language/ |title=Google's Go: A New Programming Language That's Python Meets C++ |last=Kincaid |first=Jason |date=10 November 2009 |work=TechCrunch |accessdate=29 January 2010}}</ref>\n\n<ref name=\"AutoNT-95\">{{cite web |last=Strachan |first=James |date=29 August 2003 |title=Groovy&nbsp;\u2013 the birth of a new dynamic language for the Java platform |url=http://radio.weblogs.com/0112098/2003/08/29.html}}</ref>\n\n<ref name=\"linuxdevcenter\">{{cite web |url=http://www.linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html |title=An Interview with the Creator of Ruby |publisher=Linuxdevcenter.com |date= |accessdate=3 December 2012}}</ref>\n\n<ref name=\"AutoNT-99\">{{cite web |url=http://www.tcl.tk/cgi-bin/tct/tip/3.html |title=TIP #3: TIP Format |last1=Kupries |first1=Andreas |last2=Fellows |first2=Donal K. |work=tcl.tk |publisher=Tcl Developer Xchange |date=14 September 2000 |accessdate=24 November 2008}}</ref>\n\n<ref name=\"AutoNT-100\">{{cite web |url=http://www.erlang.org/eeps/eep-0001.html |title=EEP 1: EEP Purpose and Guidelines |last1=Gustafsson |first1=Per |last2=Niskanen |first2=Raimo |publisher=erlang.org |date=29 January 2007 |accessdate=19 April 2011}}</ref>\n\n<!--  <ref name=\"AutoNT-101\">{{cite web |url=http://www.tiobe.com/index.php/content/paperinfo/tpci/ |title=TIOBE Programming Community Index for March 2012 |date=March 2012 |publisher=TIOBE Software |accessdate=25 March 2012}}</ref>-->\n\n<ref name=\"lj-bdfl-resignation\">{{cite magazine |url=https://www.linuxjournal.com/content/guido-van-rossum-stepping-down-role-pythons-benevolent-dictator-life |title=Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life |last=Fairchild |first=Carlie |magazine=Linux Journal |date=12 July 2018 |accessdate=13 July 2018}}</ref>\n\n}}\n\n===Sources===\n*{{cite web |url=https://wiki.python.org/moin/PythonForArtificialIntelligence |title=Python for Artificial Intelligence |publisher=Wiki.python.org |date=19 July 2012 |accessdate=3 December 2012 |url-status=dead |archiveurl=https://web.archive.org/web/20121101045354/http://wiki.python.org/moin/PythonForArtificialIntelligence |archivedate=1 November 2012 }}\n*{{cite journal |editor-last=Paine |editor-first=Jocelyn |title=AI in Python |journal=AI Expert Newsletter |publisher=Amzi! |date=August 2005 |url=http://www.ainewsletter.com/newsletters/aix_0508.htm#python_ai_ai |accessdate=11 February 2012}}\n*{{cite web |url=https://pypi.python.org/pypi/PyAIML |title=PyAIML 0.8.5 : Python Package Index |publisher=Pypi.python.org |accessdate=17 July 2013}}\n*{{cite book |title=Artificial Intelligence: A Modern Approach |last1=Russell |first1=Stuart J. |authorlink1=Stuart J. Russell |last2=Norvig |first2=Peter |authorlink2=Peter Norvig |lastauthoramp=y |edition=3rd |year=2009 |publisher=Prentice Hall |location=Upper Saddle River, NJ |isbn=978-0-13-604259-4 }}\n\n== Further reading ==\n<!-- THIS IS *NOT* A LIST OF ALL PYTHON BOOKS\nAccording to [[Wikipedia:Further reading]], criteria for inclusion includes:\n1. Should clearly qualify as WP:RS, as indicated by reviews and citations to it.\n...\n5. There should be guidelines on limiting the number of sources.\n6. To avoid spam, any book included should have received more than one good review in RS: newspapers and scholarly journals being the norm, and the clear balance of RS reviews should be positive. This would avoid self-publish spamming, POV pushing, and attempts by publishers to get books promoted through inclusion on Wikipedia. At the moment \"editorial recommendations\" as described in the manual smacks of OR.\n7. Neutrality on the part of editors is essential. In terms of major debates, items representing all major positions should be included, with annotations indicating the specific POV of each. We may have to work out rules where topic disputes are irreconcilable.\n-->\n\n* {{cite book |last=Downey |first=Allen B. |title=Think Python: How to Think Like a Computer Scientist |edition=Version 1.6.6 |date=May 2012 |isbn=978-0-521-72596-5 }}\n* {{cite news |url=http://www.computerworld.com.au/index.php/id;66665771 |title=The A-Z of Programming Languages: Python |last=Hamilton |first=Naomi |date=5 August 2008 |work=Computerworld |accessdate=31 March 2010 |url-status=dead |archiveurl=https://web.archive.org/web/20081229095320/http://www.computerworld.com.au/index.php/id%3B66665771 |archivedate=29 December 2008 |df=dmy-all }}\n* {{cite book |last=Lutz |first=Mark |title=Learning Python |publisher=O'Reilly Media |year=2013 |edition=5th |isbn=978-0-596-15806-4 }}\n* {{cite book |last=Pilgrim |first=Mark |title=Dive Into Python |publisher=Apress |year=2004 |isbn=978-1-59059-356-1 |url-access=registration |url=https://archive.org/details/diveintopython0000pilg }}\n* {{cite book |last=Pilgrim |first=Mark |title=Dive Into Python 3 |publisher=Apress |year=2009 |isbn=978-1-4302-2415-0 }}\n* {{cite book |last=Summerfield |first=Mark |title=Programming in Python 3 |publisher=Addison-Wesley Professional|year=2009|edition=2nd|isbn=978-0-321-68056-3 }}\n\n== External links ==\n<!-- ===================== {{No more links}} =========================\n| PLEASE BE CAUTIOUS IN ADDING MORE LINKS TO THIS ARTICLE. Wikipedia  |\n| is not a collection of links nor should it be used for advertising. |\n|                                                                     |\n| Excessive or inappropriate links WILL BE DELETED.                   |\n| See [[Wikipedia:External links]] & [[Wikipedia:Spam]] for details.  |\n|                                                                     |\n| If there are already plentiful links, please propose additions or   |\n| replacements on this article's discussion page, or submit your link |\n| to the relevant category at the Open Directory Project (dmoz.org)   |\n| and link back to that category using the {{Dmoz}} template.         |\n========================== {{No more links}} ====================== -->\n\n{{Sister project links |wikt=no |commons=Category:Python (programming language) |b=Python Programming |n=no |s=no  |voy=no |species=no |d=no }}\n* {{Official website}}\n* {{Curlie|Computers/Programming/Languages/Python}}\n\n{{Programming languages}}\n{{Python (programming language)}}\n{{Python web frameworks}}\n{{FOSS}}\n\n{{Authority control}}\n{{Good article}}\n\n[[Category:Programming languages]]\n[[Category:Class-based programming languages]]\n[[Category:Computational notebook]]\n[[Category:Computer science in the Netherlands]]\n[[Category:Cross-platform free software]]\n[[Category:Dutch inventions]]\n[[Category:Dynamically typed programming languages]]\n[[Category:Educational programming languages]]\n[[Category:High-level programming languages]]\n[[Category:Information technology in the Netherlands]]\n[[Category:Multi-paradigm programming languages]]\n[[Category:Object-oriented programming languages]]\n[[Category:Programming languages created in 1991]]\n[[Category:Python (programming language)| ]]\n[[Category:Scripting languages]]\n[[Category:Text-oriented programming languages]]\n[[Category:Cross-platform software]]\n[[Category:Articles with example Python code]]\n", "text_old": "{{about|the programming language||Python (disambiguation)}}\n{{Short description|General-purpose, high-level programming language}}\n{{Use dmy dates |date=August 2015}}\n{{Infobox programming language\n| logo = Python logo and wordmark.svg\n| logo size = 250px\n| paradigm = [[Multi-paradigm programming language|Multi-paradigm]]: [[functional programming|functional]], [[imperative programming|imperative]], [[object-oriented programming|object-oriented]], [[structured programming|structured]], [[reflective programming|reflective]]\n| released = {{start date and age|1990}}<ref name=guttag />\n| designer = [[Guido van Rossum]]\n| developer = [[Python Software Foundation]]\n| latest release version = 3.8.2\n| latest release date = {{Start date and age|2020|02|24|df=yes}}<ref>{{Cite web|url=https://www.python.org/downloads/release/python-382/|title=Python Release Python 3.8.2|website=Python.org}}</ref>\n| latest preview version = 3.9.0a5\n| latest preview date = {{Start date and age|2020|03|23|df=yes}}<ref>{{Cite web|url=https://www.python.org/downloads/release/python-390a5/|title=Python Release Python 3.9.0a5|website=Python.org}}</ref> and 2.7.18rc1<ref>{{Cite web|url=https://pythoninsider.blogspot.com/2020/04/python-2718-release-candidate-1.html|title=Python Insider: Python 2.7.18 release candidate 1 available|author=Benjamin|date=2020-04-06|quote=Python 2.7.18 will be the last release of the Python 2.7 series, and thus Python 2.|website=Python Insider|access-date=2020-04-14}}</ref><ref>{{Cite web|url=https://discuss.python.org/t/petition-abandon-plans-to-ship-a-2-7-18-in-april/2946/4|title=Petition: abandon plans to ship a 2.7.18 in April|date=2020-01-03|quote=Any changes that might have been made since 2.7.17 shipped haven\u2019t yet been released, but as a final service to the community, python-dev will bundle those fixes (and only those fixes) and release a 2.7.18. We plan on doing that in April|website=Discussions on Python.org|language=en-US|access-date=2020-04-14}}</ref>\n| typing = [[duck typing|Duck]], [[dynamic typing|dynamic]], [[gradual typing|gradual]] (since 3.5)<ref>{{cite web|url=https://www.python.org/dev/peps/pep-0483/|title=PEP 483 -- The Theory of Type Hints|website=Python.org}}</ref>\n| implementations = [[CPython]], [[PyPy]], [[Stackless Python]], [[MicroPython]], [[CircuitPython]], [[IronPython]], [[Jython]], [[RustPython]]\n| dialects = [[Cython]], [[RPython]], [[Bazel (software)|Starlark]]<ref>{{cite web|title=Starlark Language|url=https://docs.bazel.build/versions/master/skylark/language.html|accessdate=25 May 2019}}</ref>\n| influenced = [[Apache Groovy]], [[Boo (programming language)|Boo]], [[Cobra (programming language)|Cobra]], [[CoffeeScript]],<ref>{{Cite web|url=https://coffeescript.org/|title=CoffeeScript|website=coffeescript.org}}</ref> [[D (programming language)|D]], [[F Sharp (programming language)|F#]], [[Genie (programming language)|Genie]],<ref>{{cite web \n |url=https://wiki.gnome.org/action/show/Projects/Genie\n |title=The Genie Programming Language Tutorial\n |accessdate=28 February 2020}}</ref> [[Go (programming language)|Go]], [[JavaScript]],<ref>{{cite web\n|title=Perl and Python influences in JavaScript\n |date=24 February 2013\n|website= www.2ality.com\n |url=http://www.2ality.com/2013/02/javascript-influences.html\n |accessdate= 15 May 2015}}</ref><ref>{{cite web\n|title=Chapter 3: The Nature of JavaScript; Influences\n |last=Rauschmayer\n |first=Axel\n|website=O'Reilly, Speaking JavaScript\n |url=http://speakingjs.com/es5/ch03.html\n |accessdate= 15 May 2015}}</ref> [[Julia (programming language)|Julia]],<ref name=Julia/> [[Nim (programming language)|Nim]], Ring,<ref name=\"The Ring programming language and other languages\">{{cite web |url=http://ring-lang.sourceforge.net/doc1.6/introduction.html#ring-and-other-languages |title=Ring and other languages |author=Ring Team |date=4 December 2017 |work=ring-lang.net |publisher=[[ring-lang]]}}</ref> [[Ruby (programming language)|Ruby]],<ref name=\"bini\"/> [[Swift (programming language)|Swift]]<ref name=\"lattner2014\">{{cite web |url=http://nondot.org/sabre/ |title=Chris Lattner's Homepage |last=Lattner |first=Chris |date=3 June 2014 |accessdate=3 June 2014 |publisher=Chris Lattner|quote=The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.}}</ref>\n| license = [[Python Software Foundation License]]\n| website = {{URL|https://www.python.org/}}\n| wikibooks = Python Programming\n| influenced_by = [[ABC (programming language)|ABC]],<ref name=\"faq-created\"/>, [[Ada (programming language)|Ada]]<ref>{{cite web | url=http://archive.adaic.com/standards/83lrm/html/lrm-11-03.html#11.3 | title=Ada 83 Reference Manual (raise statement)}}</ref>, [[ALGOL 68]],<ref name=\"98-interview\"/> [[APL (programming language)|APL]],<ref name=\"python.org\">{{cite web|url=https://docs.python.org/3/library/itertools.html|title=itertools \u2014 Functions creating iterators for efficient looping \u2014 Python 3.7.1 documentation|website=docs.python.org}}</ref> [[C (programming language)|C]],<ref name=\"AutoNT-1\"/> [[C++]],<ref name=\"classmix\"/> [[CLU (programming language)|CLU]],<ref name=\"effbot-call-by-object\"/> [[Dylan (programming language)|Dylan]],<ref name=\"AutoNT-2\"/> [[Haskell (programming language)|Haskell]],<ref name=\"AutoNT-3\"/> [[Icon (programming language)|Icon]],<ref name=\"AutoNT-4\"/> [[Java (programming language)|Java]],<ref name=\"AutoNT-5\"/> [[Lisp (programming language)|Lisp]],<ref name=\"AutoNT-6\"/> [[Modula-3]],<ref name=\"classmix\" /> [[Perl]], [[Standard ML]]<ref name=\"python.org\"/>\n| file ext = .py, .pyi, .pyc, .pyd, .pyo (prior to 3.5),<ref>File extension .pyo was removed in Python 3.5. See [https://www.python.org/dev/peps/pep-0488/ PEP 0488]</ref> {{notatypo|.pyw}}, .pyz (since 3.5)<ref>{{cite web |url=https://www.python.org/dev/peps/pep-0441/ |last=Holth |first=Moore |date=30 March 2014 |accessdate=12 November 2015 |title=PEP 0441 -- Improving Python ZIP Application Support}}</ref>\n}}\n\n'''Python''' is an [[interpreted language|interpreted]], [[high-level programming language|high-level]], [[general-purpose programming language|general-purpose]] [[programming language]]. Created by [[Guido van Rossum]] and first released in 1991, Python's design philosophy emphasizes [[code readability]] with its notable use of [[Off-side rule|significant whitespace]]. Its [[language construct]]s and [[object-oriented programming|object-oriented]] approach aim to help programmers write clear, logical code for small and large-scale projects.<ref name=\"AutoNT-7\" />\n\nPython is [[Dynamic programming language|dynamically typed]] and [[garbage collection (computer science)|garbage-collected]]. It supports multiple [[programming paradigms]], including [[structured programming|structured]] (particularly, [[procedural programming|procedural]]), object-oriented, and  [[functional programming]]. Python is often described as a \"batteries included\" language due to its comprehensive [[standard library]].<ref name=\"About\" />\n\nPython was conceived in the late 1980s as a successor to the [[ABC (programming language)|ABC language]]. Python&nbsp;2.0, released in 2000, introduced features like [[list comprehension]]s and a garbage collection system capable of collecting [[reference cycle]]s. Python&nbsp;3.0, released in 2008, was a major revision of the language that is not completely [[backward compatibility|backward-compatible]], and much Python&nbsp;2 code does not run unmodified on Python&nbsp;3.\n\nThe Python&nbsp;2 language, i.e. Python 2.7.x, was officially discontinued on 1 January 2020 (first planned for 2015) after which security patches and other improvements will not be released for it.<ref>{{Cite web|url=https://www.python.org/doc/sunset-python-2/|title=Sunsetting Python 2|website=Python.org|language=en|access-date=2019-09-22}}</ref><ref>{{Cite web|url=https://www.python.org/dev/peps/pep-0373/|title=PEP 373 -- Python 2.7 Release Schedule|website=Python.org|language=en|access-date=2019-09-22}}</ref> With Python 2's [[end-of-life (product)|end-of-life]], only <!-- shortened for the lead: Python&nbsp;3.7.x and later will be supported,<ref>{{Cite web|url=https://www.python.org/dev/peps/pep-0537/|title=PEP 537 -- Python 3.7 Release Schedule|website=Python.org|language=en|access-date=2019-11-06}}</ref> plus 3.5.x<ref>{{Cite web|url=https://www.python.org/downloads/release/python-359/|title=Python Release Python 3.5.9|quote=Python 3.5 has now entered \"security fixes only\" mode, and as such the only changes since Python 3.5.4 are security fixes.|website=Python.org|language=en|access-date=2019-11-06}}</ref><ref>{{Cite web|url=https://www.python.org/downloads/release/python-3410/|title=Python Release Python 3.4.10|quote=Python 3.4 has reached end-of-life.|website=Python.org|language=en|access-date=2019-11-06}}</ref> and 3.6.x with security updates only (and [[source code|source]]s only).<ref>{{Cite web|url=https://www.python.org/dev/peps/pep-0494/|title=PEP 494 -- Python 3.6 Release Schedule|website=Python.org|language=en|access-date=2019-11-06}}</ref><ref>{{Cite web|url=https://www.python.org/downloads/release/python-369/|title=Python Release Python 3.6.9|website=Python.org|language=en|access-date=2019-11-06}}</ref> --> Python&nbsp;3.5.x<ref>{{Cite web|url=https://devguide.python.org/#status-of-python-branches|title=Python Developer\u2019s Guide \u2014 Python Developer's Guide|website=devguide.python.org|access-date=2019-12-17}}</ref> and later are supported.\n\nPython [[interpreter (computing)|interpreters]] are available for many [[operating system]]s. A global community of programmers develops and maintains [[CPython]], an [[open-source software|open source]]<ref>{{cite web |url=https://docs.python.org/3/license.html |title=History and License |accessdate=5 December 2016}} \"All Python releases are Open Source\"</ref> [[reference implementation]]. A [[nonprofit organization|non-profit organization]], the [[Python Software Foundation]], manages and directs resources for Python and CPython development.\n\n== History ==\n[[File:Guido van Rossum OSCON 2006 cropped.png|thumb|150px|[[Guido van Rossum]] at OSCON 2006]]\n\n{{Main|History of Python}}\n\nPython was conceived in the late 1980s<ref name=\"venners-interview-pt-1\" /> by [[Guido van Rossum]] at [[Centrum Wiskunde & Informatica]] (CWI) in the [[Netherlands]] as a successor to the [[ABC (programming language)|ABC language]] (itself inspired by [[SETL]]),<ref name=\"AutoNT-12\" /> capable of [[exception handling]] and interfacing with the [[Amoeba (operating system)|Amoeba]] operating system.<ref name=\"faq-created\" /> Its implementation began in December 1989.<ref name=\"timeline-of-python\" /> Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his \"permanent vacation\" from his responsibilities as Python's ''[[Benevolent Dictator For Life]]'', a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker.<ref name=\"lj-bdfl-resignation\" /> He now shares his leadership as a member of a five-person steering council.<ref>{{cite web |title=Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life {{!}} Linux Journal |url=https://www.linuxjournal.com/content/guido-van-rossum-stepping-down-role-pythons-benevolent-dictator-life |website=www.linuxjournal.com |language=en}}</ref><ref>{{cite news |title=Python boss Guido van Rossum steps down after 30 years |url=https://www.theinquirer.net/inquirer/news/3035842/python-boss-guido-van-rossum-steps-down-after-30-years |newspaper=[[The Inquirer]]|language=en}}</ref><ref>{{cite web |title=PEP 8100 |url=https://www.python.org/dev/peps/pep-8100/ |website=python |publisher=Python Software Foundation |accessdate=4 May 2019}}</ref> In January 2019, active Python core developers elected Brett Cannon, Nick Coghlan, Barry Warsaw, Carol Willing and Van Rossum to a five-member \"Steering Council\" to lead the project.<ref>{{cite web |title=PEP 8100 |url=https://www.python.org/dev/peps/pep-8100/ |publisher=Python Software Foundation |accessdate=4 May 2019}}</ref>\n\nPython 2.0 was released on 16 October 2000 with many major new features, including a [[Cycle detection|cycle-detecting]] [[garbage collection (computer science)|garbage collector]] and support for [[Unicode]].<ref name=\"newin-2.0\" />\n\nPython 3.0 was released on 3 December 2008. It was a major revision of the language that is not completely [[backward compatibility|backward-compatible]].<ref name=\"3.0-release\" /> Many of its major features were [[backporting|backported]] to Python 2.6.x<ref name=\"pep-3000\" /> and 2.7.x version series.  Releases of Python 3 include the <code>2to3</code> utility, which automates (at least partially) the translation of Python 2 code to Python 3.<ref>{{cite web |url=https://docs.python.org/3/library/2to3.html |title=Automated Python 2 to 3 code translation \u2014 Python Documentation |accessdate=11 February 2018 }}</ref>\n\nPython 2.7's [[end-of-life (product)|end-of-life]] date was initially set at 2015 then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.<ref>{{cite web |url=https://legacy.python.org/dev/peps/pep-0373/ |title=PEP 373 -- Python 2.7 Release Schedule |work=python.org |accessdate=9 January 2017}}</ref><ref>{{cite web |url=https://www.python.org/dev/peps/pep-0466/ |title=PEP 466 -- Network Security Enhancements for Python 2.7.x |work=python.org |accessdate=9 January 2017}}</ref>\n\n== Features and philosophy ==\nPython is a [[multi-paradigm programming language]]. [[Object-oriented programming]] and [[structured programming]] are fully supported, and many of its features support [[functional programming]] and [[aspect-oriented programming]] (including by [[metaprogramming]]<ref name=\"AutoNT-13\" /> and [[metaobject]]s (magic methods)).<ref name=\"AutoNT-14\" /> Many other paradigms are supported via extensions, including [[design by contract]]<ref name=\"AutoNT-15\" /><ref name=\"AutoNT-16\" /> and [[logic programming]].<ref name=\"AutoNT-17\" />\n\nPython uses [[dynamic typing]] and a combination of [[reference counting]] and a cycle-detecting garbage collector for [[memory management]]. It also features dynamic [[Name resolution (programming languages)|name resolution]] ([[late binding]]), which binds method and variable names during program execution.\n\nPython's design offers some support for [[functional programming]] in the [[Lisp (programming language)|Lisp]] tradition. It has <code>filter</code>, <code>map</code>, and <code>reduce</code> functions; [[list comprehension]]s, [[Associative array|dictionaries]], sets, and [[generator (computer programming)|generator]] expressions.<ref name=\"AutoNT-59\"/> The standard library has two modules (itertools and functools) that implement functional tools borrowed from [[Haskell (programming language)|Haskell]] and [[Standard ML]].<ref name=\"AutoNT-18\" />\n\nThe language's core philosophy is summarized in the document ''The [[Zen of Python]]'' (''PEP 20''), which includes [[aphorism]]s such as:<ref name=\"PEP20\" />\n\n<!-- Note this isn't a full list, just some of the more significant aphorisms -->\n* Beautiful is better than ugly.\n* Explicit is better than implicit.\n* Simple is better than complex.\n* Complex is better than complicated.\n* Readability counts.\n\nRather than having all of its functionality built into its core, Python was designed to be highly [[Extensibility|extensible]]. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with [[ABC (programming language)|ABC]], which espoused the opposite approach.<ref name=\"venners-interview-pt-1\" />\n\nPython strives for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to [[Perl]]'s \"[[there is more than one way to do it]]\" motto, Python embraces a \"there should be one\u2014and preferably only one\u2014obvious way to do it\" design philosophy.<ref name=\"PEP20\" /> [[Alex Martelli]], a Fellow at the Python Software Foundation and Python book author, writes that \"To describe something as 'clever' is ''not'' considered a compliment in the Python culture.\"<ref name=\"AutoNT-19\" />\n\nPython's developers strive to avoid [[premature optimization]], and reject patches to non-critical parts of the [[CPython]] reference implementation that would offer marginal increases in speed at the cost of clarity.<ref name=\"AutoNT-20\" /> When speed is important, a Python programmer can move time-critical functions to extension modules written in languages such as C, or use [[PyPy]], a [[just-in-time compilation|just-in-time compiler]]. [[Cython]] is also available, which translates a Python script into C and makes direct C-level API calls into the Python interpreter.\n\nAn important goal of Python's developers is keeping it fun to use. This is reflected in the language's name\u2014a tribute to the British comedy group [[Monty Python]]<ref name=\"AutoNT-24\"/>\u2014and in occasionally playful approaches to tutorials and reference materials, such as examples that refer to spam and eggs (from a [[Spam (Monty Python)|famous Monty Python sketch]]) instead of the standard [[Foobar|foo and bar]].<ref>{{Cite web|url=https://insidetech.monster.com/training/articles/8114-15-ways-python-is-a-powerful-force-on-the-web|title=15 Ways Python Is a Powerful Force on the Web}}</ref><ref>{{Cite web|url=https://docs.python.org/2/library/pprint.html|title=8.18. pprint \u2014 Data pretty printer \u2014 Python 2.7.18rc1 documentation|website=docs.python.org}}</ref>\n\nA common [[neologism]] in the Python community is ''pythonic'', which can have a wide range of meanings related to program style. To say that code is pythonic is to say that it uses Python idioms well, that it is natural or shows fluency in the language, that it conforms with Python's minimalist philosophy and emphasis on readability. In contrast, code that is difficult to understand or reads like a rough transcription from another programming language is called ''unpythonic''.\n\nUsers and admirers of Python, especially those considered knowledgeable or experienced, are often referred to as ''Pythonistas''.<ref name=\"AutoNT-27\" /><ref name=\"AutoNT-25\" />\n\n== Syntax and semantics ==\n{{Main|Python syntax and semantics}}\n\nPython is meant to be an easily readable language. Its formatting is visually uncluttered, and it often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use [[curly bracket programming language|curly brackets]] to delimit blocks, and semicolons after statements are optional. It has fewer syntactic exceptions and special cases than [[C (programming language)|C]] or [[Pascal (programming language)|Pascal]].<ref name=\"AutoNT-52\" />\n\n=== Indentation ===\n{{Main|Python syntax and semantics#Indentation}}\n\nPython uses [[whitespace character|whitespace]] indentation, rather than [[curly bracket programming language|curly brackets]] or keywords, to delimit [[block (programming)|blocks]]. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.<ref name=\"AutoNT-53\" /> Thus, the program's visual structure accurately represents the program's semantic structure.<ref name=guttag>{{Cite book| publisher = MIT Press| isbn = 978-0-262-52962-4| last = Guttag| first = John V.| title = Introduction to Computation and Programming Using Python: With Application to Understanding Data| date = 2016-08-12}}</ref> This feature is sometimes termed the [[off-side rule]], which some other languages share, but in most languages indentation doesn't have any semantic meaning.\n\n=== Statements and control flow ===\nPython's [[Statement (computer science)|statements]] include (among others):\n\n* The assignment statement (token '=', the equals sign). This operates differently than in traditional [[imperative programming]] languages, and this fundamental mechanism (including the nature of Python's version of ''variables'') illuminates many other features of the language. Assignment in [[C (programming language)|C]], e.g., <code>x = 2</code>, translates to \"typed variable name {{var|x}} receives a copy of numeric value 2\". The (right-hand) value is copied into an [[Memory allocation|allocated storage location]] for which the (left-hand) [[Variable (computer science)|variable name]] is the symbolic address. The memory allocated to the variable is large enough (potentially quite large) for the declared [[Type system|type]]. In the simplest case of Python assignment, using the same example, <code>x = 2</code>, translates to \"(generic) name x receives a [[Pointer (computer programming)|reference]] to a separate, dynamically allocated [[Object (computer science)|object]] of numeric (int) type of value 2.\" This is termed ''binding'' the name to the object. Since the name's storage location doesn't ''contain'' the indicated value, it is improper to call it a ''variable''. Names may be subsequently rebound at any time to objects of greatly varying types, including strings, procedures, complex objects with data and methods, etc. Successive assignments of a common value to multiple names, e.g., <code>x = 2</code>; <code>y = 2</code>; <code>z = 2</code> result in allocating storage to (at most) three names and one numeric object, to which all three names are bound. Since a name is a generic reference holder it is unreasonable to associate a fixed [[Type system|data type]] with it. However at a given time a name will be bound to ''some'' object, which '''will''' have a type; thus there is [[Dynamic type|dynamic typing]].\n* The <code>[[if-then-else|if]]</code> statement, which conditionally executes a block of code, along with <code>else</code> and <code>elif</code> (a contraction of else-if).\n* The <code>[[Foreach#Python|for]]</code> statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block.\n* The <code>[[While loop#Python|while]]</code> statement, which executes a block of code as long as its condition is true.\n* The <code>[[Exception handling syntax#Python|try]]</code> statement, which allows exceptions raised in its attached code block to be caught and handled by <code>except</code> clauses; it also ensures that clean-up code in a <code>finally</code> block will always be run regardless of how the block exits.\n* The <code>raise</code> statement, used to raise a specified exception or re-raise a caught exception.\n* The <code>class</code> statement, which executes a block of code and attaches its local namespace to a [[class (computer science)|class]], for use in [[object-oriented programming]].\n* The <code>def</code> statement, which defines a [[function (computing)|function]] or [[method (computing)|method]].\n* The <code>with</code> statement, from Python 2.5 released in September 2006,<ref>{{cite web|url=https://www.python.org/download/releases/2.5/|title=Python 2.5 Release|website=Python.org}}</ref> which encloses a code block within a context manager (for example, acquiring a [[lock (computer science)|lock]] before the block of code is run and releasing the lock afterwards, or opening a [[Computer file|file]] and then closing it), allowing [[resource acquisition is initialization|Resource Acquisition Is Initialization]] (RAII)-like behavior and replaces a common try/finally idiom.<ref>{{cite web|url=https://www.python.org/download/releases/2.5/highlights/|title=Highlights: Python 2.5|website=Python.org}}</ref>\n*The [[break statement|<code>break</code>]] statement, exits from the loop.\n*The <code>continue</code> statement, skips this iteration and continues with the next item.\n* The <code>pass</code> statement, which serves as a [[NOP (code)|NOP]]. It is syntactically needed to create an empty code block.\n* The <code>[[assertion (programming)|assert]]</code> statement, used during debugging to check for conditions that ought to apply.\n* The <code>yield</code> statement, which returns a value from a [[generator (computer programming)#Python|generator]] function. From Python 2.5, <code>yield</code> is also an operator. This form is used to implement [[coroutine]]s.\n* The <code>import</code> statement, which is used to import modules whose functions or variables can be used in the current program. There are three ways of using import: <code>import <module name> [as <alias>]</code> or <code>from <module name> import *</code> or <code>from <module name> import <definition 1> [as <alias 1>], <definition 2> [as <alias 2>], ...</code>.\n* The <code>print</code> statement was changed to the <code>print()</code> function in Python 3.\n\nPython does not support [[tail call]] optimization or [[first-class continuations]], and, according to Guido van Rossum, it never will.<ref name=\"AutoNT-55\" /><ref name=\"AutoNT-56\" /> However, better support for [[coroutine]]-like functionality is provided in 2.5, by extending Python's [[generator (computer programming)|generators]].<ref name=\"AutoNT-57\" /> Before 2.5, generators were [[lazy evaluation|lazy]] [[iterator]]s; information was passed unidirectionally out of the generator. From Python 2.5, it is possible to pass information back into a generator function, and from Python 3.3, the information can be passed through multiple stack levels.<ref name=\"AutoNT-58\" />\n\n=== Expressions ===\nSome Python [[Expression (computer science)|expressions]] are similar to languages such as [[C (programming language)|C]] and [[Java (programming language)|Java]], while some are not:\n\n* Addition, subtraction, and multiplication are the same, but the behavior of division differs. There are two types of divisions in Python. They are floor division (or integer division) <code>//</code> and floating point<code>/</code>division.<ref>{{cite web|title=division|url=https://docs.python.org|website=python.org}}</ref> Python also added the <code>**</code> operator for exponentiation.\n* From Python 3.5, the new <code>@</code> infix operator was introduced. It is intended to be used by libraries such as [[NumPy]] for [[matrix multiplication]].<ref name=PEP465>{{cite web |title=PEP 0465 -- A dedicated infix operator for matrix multiplication |url=https://www.python.org/dev/peps/pep-0465/|website=python.org |accessdate=1 January 2016}}</ref><ref name=Python3.5Changelog>{{cite web |title=Python 3.5.1 Release and Changelog |url=https://www.python.org/downloads/release/python-351/|website=python.org |accessdate=1 January 2016}}</ref>\n* From Python 3.8, the syntax <code>:=</code>, called the 'walrus operator' was introduced. It assigns values to variables as part of a larger expression.<ref name=Python3.8Changelog>{{cite web |title=What\u2019s New In Python 3.8 |url=https://docs.python.org/3.8/whatsnew/3.8.html |accessdate=14 October 2019}}</ref>\n* In Python, <code>==</code> compares by value, versus Java, which compares numerics by value<ref>{{cite web |url=https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.21.1 |title=Chapter 15. Expressions - 15.21.1. Numerical Equality Operators == and != |publisher=[[Oracle Corporation]] |accessdate=28 August 2016}}</ref> and objects by reference.<ref>{{cite web |url=https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.21.3 |title=Chapter 15. Expressions - 15.21.3. Reference Equality Operators == and != |publisher=Oracle Corporation |accessdate=28 August 2016}}</ref> (Value comparisons in Java on objects can be performed with the <code>equals()</code> method.) Python's <code>is</code> operator may be used to compare object identities (comparison by reference). In Python, comparisons may be chained, for example <code>a <= b <= c</code>.\n* Python uses the words <code>and</code>, <code>or</code>, <code>not</code> for its boolean operators rather than the symbolic <code>&&</code>, <code>||</code>, <code>!</code> used in Java and C.\n* Python has a type of expression termed a ''[[list comprehension#Python|list comprehension]]''. Python 2.4 extended list comprehensions into a more general expression termed a ''[[generator (computer programming)|generator]] expression''.<ref name=\"AutoNT-59\" />\n* [[Anonymous function]]s are implemented using [[Lambda (programming)|lambda expressions]]; however, these are limited in that the body can only be one expression.\n* Conditional expressions in Python are written as <code>x if c else y</code><ref name=\"AutoNT-60\" /> (different in order of operands from the <code>[[?:|c ? x : y]]</code> operator common to many other languages).\n* Python makes a distinction between [[list (computer science)|lists]] and [[tuple]]s. Lists are written as <code>[1, 2, 3]</code>, are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be [[immutable]] in Python). Tuples are written as <code>(1, 2, 3)</code>, are immutable and thus can be used as the keys of dictionaries, provided all elements of the tuple are immutable. The <code>+</code> operator can be used to concatenate two tuples, which does not directly modify their contents, but rather produces a new tuple containing the elements of both provided tuples. Thus, given the variable <code>t</code> initially equal to <code>(1, 2, 3)</code>, executing <code>t = t + (4, 5)</code> first evaluates <code>t + (4, 5)</code>, which yields <code>(1, 2, 3, 4, 5)</code>, which is then assigned back to <code>t</code>, thereby effectively \"modifying the contents\" of <code>t</code>, while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous contexts.<ref>{{cite web|title=4. Built-in Types &#8212; Python 3.6.3rc1 documentation|url=https://docs.python.org/3/library/stdtypes.html#tuple|website=python.org|accessdate=1 October 2017}}</ref> \n* Python features ''sequence unpacking'' wherein multiple expressions, each evaluating to anything that can be assigned to (a variable, a writable property, etc.), are associated in the identical manner to that forming tuple literals and, as a whole, are put on the left hand side of the equal sign in an assignment statement. The statement expects an ''iterable'' object on the right hand side of the equal sign that produces the same number of values as the provided writable expressions when iterated through, and will iterate through it, assigning each of the produced values to the corresponding expression on the left.<ref>{{cite web|title=5.3. Tuples and Sequences &#8212; Python 3.7.1rc2 documentation|url=https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences|website=python.org|accessdate=17 October 2018}}</ref>  \n* Python has a \"string format\" operator <code>%</code>. This functions analogous to <code>[[printf format string|printf]]</code> format strings in [[C (programming language)|C]], e.g. <code>\"spam=%s eggs=%d\" % (\"blah\", 2)</code> evaluates to <code>\"spam=blah eggs=2\"</code>. In Python 3 and 2.6+, this was supplemented by the <code>format()</code> method of the <code>str</code> class, e.g. <code>\"spam={0} eggs={1}\".format(\"blah\", 2)</code>. Python 3.6 added \"f-strings\": <code>blah = \"blah\"; eggs = 2; f'spam={blah} eggs={eggs}'</code>.<ref name=\"pep-0498\">{{cite web |title=PEP 498 -- Literal String Interpolation |url=https://www.python.org/dev/peps/pep-0498/|website=python.org |accessdate=8 March 2017}}</ref>\n* Python has various kinds of [[string literal]]s:\n** Strings delimited by single or double quote marks. Unlike in [[Unix shell]]s, [[Perl]] and Perl-influenced languages, single quote marks and double quote marks function identically. Both kinds of string use the backslash (<code>\\</code>) as an [[escape character]]. [[String interpolation]] became available in Python 3.6 as \"formatted string literals\".<ref name=\"pep-0498\"/>\n** Triple-quoted strings, which begin and end with a series of three single or double quote marks. They may span multiple lines and function like [[here document]]s in shells, Perl and [[Ruby (programming language)|Ruby]].\n** [[Raw string]] varieties, denoted by prefixing the string literal with an <code>r</code>. Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as [[regular expression]]s and [[Microsoft Windows|Windows]]-style paths. Compare \"<code>@</code>-quoting\" in [[C Sharp (programming language)|C#]].\n* Python has [[array index]] and [[array slicing]] expressions on lists, denoted as <code>a[key]</code>, <code>a[start:stop]</code> or <code>a[start:stop:step]</code>. Indexes are [[zero-based]], and negative indexes are relative to the end. Slices take elements from the ''start'' index up to, but not including, the ''stop'' index. The third slice parameter, called ''step'' or ''stride'', allows elements to be skipped and reversed. Slice indexes may be omitted, for example <code>a[:]</code> returns a copy of the entire list. Each element of a slice is a [[shallow copy]].\n\nIn Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as [[Common Lisp]], [[Scheme (programming language)|Scheme]], or [[Ruby (programming language)|Ruby]]. This leads to duplicating some functionality. For example:\n\n* [[List comprehensions]] vs. <code>for</code>-loops\n* [[Conditional (programming)|Conditional]] expressions vs. <code>if</code> blocks\n* The <code>eval()</code> vs. <code>exec()</code> built-in functions (in Python 2, <code>exec</code> is a statement); the former is for expressions, the latter is for statements.\n\nStatements cannot be a part of an expression, so list and other comprehensions or [[Lambda (programming)|lambda expressions]], all being expressions, cannot contain statements. A particular case of this is that an assignment statement such as <code>a = 1</code> cannot form part of the conditional expression of a conditional statement. This has the advantage of avoiding a classic C error of mistaking an assignment operator <code>=</code> for an equality operator <code>==</code> in conditions: <code>if (c = 1) { ... }</code> is syntactically valid (but probably unintended) C code but <code>if c = 1: ...</code> causes a syntax error in Python.\n\n=== Methods ===\n[[Method (programming)|Methods]] on objects are [[function (programming)|functions]] attached to the object's class; the syntax <code>instance.method(argument)</code> is, for normal methods and functions, [[syntactic sugar]] for <code>Class.method(instance, argument)</code>. Python methods have an explicit <code>[[this (computer programming)|self]]</code> parameter to access [[instance data]], in contrast to the implicit <code>self</code> (or <code>this</code>) in some other object-oriented programming languages (e.g., [[C++]], [[Java (programming language)|Java]], [[Objective-C]], or [[Ruby (programming language)|Ruby]]).<ref name=\"AutoNT-61\" />\n\n=== Typing ===\n[[File:Python 3. The standard type hierarchy.png|thumb|The standard type hierarchy in Python 3]]\nPython uses [[duck typing]] and has typed objects but untyped variable names. Type constraints are not checked at [[compile time]]; rather, operations on an object may fail, signifying that the given object is not of a suitable type. Despite being [[Type system#Dynamic type checking and runtime type information|dynamically typed]], Python is [[strongly typed programming language|strongly typed]], forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.\n\nPython allows programmers to define their own types using [[class (computer science)|classes]], which are most often used for [[object-oriented programming]]. New [[object (computer science)|instances]] of classes are constructed by calling the class (for example, <code>SpamClass()</code> or <code>EggsClass()</code>), and the classes are instances of the [[metaclass]] <code>type</code> (itself an instance of itself), allowing [[metaprogramming]] and [[reflection (computer science)|reflection]].\n\nBefore version 3.0, Python had two kinds of classes: ''old-style'' and ''new-style''.<ref name=\"classy\" /> The syntax of both styles is the same, the difference being whether the class <code>object</code> is inherited from, directly or indirectly (all new-style classes inherit from <code>object</code> and are instances of <code>type</code>). In versions of Python 2 from Python 2.2 onwards, both kinds of classes can be used. Old-style classes were eliminated in Python 3.0.\n\nThe long term plan is to support [[gradual typing]]<ref>{{cite web |url=https://lwn.net/Articles/627418/ |title=Type hinting for Python |publisher=LWN.net |date=24 December 2014 |accessdate=5 May 2015}}</ref> and from Python 3.5, the syntax of the language allows specifying static types but they are not checked in the default implementation, CPython. An experimental optional static type checker named ''mypy'' supports compile-time type checking.<ref>{{cite web |url=http://mypy-lang.org/ |title=mypy - Optional Static Typing for Python |accessdate=28 January 2017}}</ref>\n\n{|class=\"wikitable\"\n|+Summary of Python 3's built-in types\n|-\n! Type\n! [[immutable object|Mutability]]\n! Description\n! style=\"width: 23em;\" | Syntax examples\n|-\n| <code>bool</code>\n| immutable\n| [[Boolean value]]\n| {{code|lang=python|True}}<br>{{code|lang=python|False}}\n|-\n| <code>bytearray</code>\n| mutable\n| Sequence of [[byte]]s\n| {{code|lang=python|bytearray(b'Some ASCII')}}<br>{{code|lang=python|bytearray(b\"Some ASCII\")}}<br>{{code|lang=python|bytearray([119, 105, 107, 105])}}\n|-\n| <code>bytes</code>\n| immutable\n| Sequence of bytes\n| {{code|lang=python|b'Some ASCII'}}<br>{{code|lang=python|b\"Some ASCII\"}}<br>{{code|lang=python|bytes([119, 105, 107, 105])}}\n|-\n| <code>complex</code>\n| immutable\n| [[Complex number]] with real and imaginary parts\n| {{code|lang=python|3+2.7j}}\n|-\n| <code>dict</code>\n| mutable\n| [[Associative array]] (or dictionary) of key and value pairs; can contain mixed types (keys and values), keys must be a hashable type\n| {{code|lang=python|{'key1': 1.0, 3: False} }}<br>{{code|lang=python|{} }}\n|-\n| <code>ellipsis</code>{{ref|inaccessible-type|a}}\n| immutable\n| An [[Ellipsis (programming operator)|ellipsis]] placeholder to be used as an index in [[NumPy]] arrays\n| {{code|lang=python|...}}<br>{{code|lang=python|Ellipsis}}\n|-\n| <code>float</code>\n| immutable\n| [[Double precision]] [[floating point]] number. The precision is machine dependent but in practice is 64 bits.{{Citation needed|date=December 2019}}\n| {{code|lang=python|3.1415927}}\n|-\n| <code>frozenset</code>\n| immutable\n| Unordered [[Set (computer science)|set]], contains no duplicates; can contain mixed types, if hashable\n| {{code|lang=python|frozenset([4.0, 'string', True])}}\n|-\n| <code>int</code>\n| immutable\n| [[Integer (computer science)|Integer]] of unlimited magnitude<ref name=\"pep0237\" />\n| {{code|lang=python|42}}\n|-\n| <code>list</code>\n| mutable\n| [[list (computer science)|List]], can contain mixed types\n| {{code|lang=python|[4.0, 'string', True]}}<br>{{code|lang=python|[]}}\n|-\n| <code>NoneType</code>{{ref|inaccessible-type|a}}\n| immutable\n| An object representing the absence of a value, often called [[Null pointer|Null]] in other languages\n| {{code|lang=python|None}}\n|-\n| <code>NotImplementedType</code>{{ref|inaccessible-type|a}}\n| immutable\n| A placeholder that can be returned from [[Operator overloading|overloaded operators]] to indicate unsupported operand types.\n| {{code|lang=python|NotImplemented}}\n|-\n| <code>range</code>\n| immutable\n| A Sequence of numbers commonly used for looping specific number of times in <code>for</code> loops<ref>{{cite web |title=Built-in Types |url=https://docs.python.org/3/library/stdtypes.html#typesseq-range |accessdate=3 October 2019}}</ref>\n| {{code|lang=python|range(1, 10)}}<br>{{code|lang=python|range(10, -5, -2)}} \n|-\n| <code>set</code>\n| mutable\n| Unordered [[set (computer science)|set]], contains no duplicates; can contain mixed types, if hashable\n| {{code|lang=python|{4.0, 'string', True} }}<br>{{code|lang=python|set()}}\n|-\n| <code>str</code>\n| immutable\n| A [[string (computer science)|character string]]: sequence of Unicode codepoints\n| {{code|lang=python|'Wikipedia'}}<br>{{code|lang=python|\"Wikipedia\"}}<br><syntaxhighlight lang=\"python\">\"\"\"Spanning\nmultiple\nlines\"\"\"</syntaxhighlight>\n|-\n| <code>tuple</code>\n| immutable\n| Can contain mixed types\n| {{code|lang=python|(4.0, 'string', True)}}<br>{{code|lang=python|('single element',)}}<br>{{code|lang=python|()}}\n|}\n\n{{note|inaccessible-type|a|Not directly accessible by name}}\n\n=== Mathematics ===\nPython has the usual symbols for arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>), the floor division operator <code>//</code> and the [[modulo operation|remainder operator]] <code>%</code> (where the remainder can be negative, <!--unlike in C language depending on compiler,<ref>{{Cite web|url=https://stackoverflow.com/questions/11720656/modulo-operation-with-negative-numbers/42131603|title=c - Modulo operation with negative numbers|quote=Note that, in C89, whether the result round upward or downward is implementation-defined.|website=Stack Overflow|access-date=2019-09-25}}</ref>--> e.g. <code>4 % -3 == -2</code>). It also has <code>**</code> for [[exponentiation]], e.g. <code>5**3 == 125</code> and <code>9**0.5 == 3.0</code>, and a matrix multiply operator <code>@</code> .<ref>{{cite web |url=https://legacy.python.org/dev/peps/pep-0465/ |title=PEP 465 -- A dedicated infix operator for matrix multiplication |work=python.org}}</ref> These operators work like in traditional math; with the same [[order of operations|precedence rules]], the operators [[Infix notation|infix]] ( <code>+</code> and <code>-</code> can also be [[Unary operation|unary]] to represent positive and negative numbers respectively). Additionally, it has a unary operator (<code>~</code>), which essentially inverts all the bits of its one argument. For integers, this means <code>~x=-x-1</code>.<ref>{{cite web |url=https://stackoverflow.com/questions/8305199/the-tilde-operator-in-python |title=The tilde operator in Python - Stackoverflow |work=stackoverflow.com}}</ref> Other operators include bitwise shift operators <code>x << y</code>, which shifts <code>x</code> to the left <code>y</code> places, the same as <code>x*(2**y) </code>, and <code>x >> y</code>, which shifts <code>x</code> to the right <code>y</code> places, the same as <code>x//(2**y)</code>.<ref>{{cite web |url=https://wiki.python.org/moin/BitwiseOperators |title=BitwiseOperators - Python Wiki |work=wiki.python.org}}</ref>\n\nDivision between integers produces floating point results. The behavior of division has changed significantly over time:<ref name=\"pep0238\"/>\n\n* Python 2.1 and earlier used C's division behavior. The <code>/</code> operator is integer division if both operands are integers, and floating-point division otherwise. Integer division rounds towards 0, e.g. {{nowrap|1=<code>7/3 == 2</code>}} and {{nowrap|1=<code>-7/3 == -2</code>.}}\n* Python 2.2 changed integer division to round towards negative infinity, e.g. <code>7/3 == 2</code> and <code>-7/3 == -3</code>. The floor division <code>//</code> operator was introduced. So <code>7//3 == 2</code>, <code>-7//3 == -3</code>, <code>7.5//3 == 2.0</code> and <code>-7.5//3 == -3.0</code>. Adding <code>from __future__ import division</code> causes a module to use Python 3.0 rules for division (see next).\n* Python 3.0 changed <code>/</code> to always be floating-point division, e.g. {{nowrap|1=<code>5/2 == 2.5</code>}}.\n\nIn Python terms, <code>/</code> is ''true division'' (or simply ''division''), and <code>//</code> is ''floor division.'' <code>/</code> before version 3.0 is ''classic division''.<ref name=\"pep0238\"/>\n\nRounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation <code>(a + b)//b == a//b + 1</code> is always true. It also means that the equation <code>b*(a//b) + a%b == a</code> is valid for both positive and negative values of <code>a</code>. However, maintaining the validity of this equation means that while the result of <code>a%b</code> is, as expected, in the [[half-open interval]] [0, ''b''), where <code>b</code> is a positive integer, it has to lie in the interval (''b'', 0] when <code>b</code> is negative.<ref name=\"AutoNT-62\" />\n\nPython provides a <code>round</code> function for [[rounding]] a float to the nearest integer. For [[Rounding#Tie-breaking|tie-breaking]], Python 3 uses [[round to even]]: <code>round(1.5)</code> and <code>round(2.5)</code> both produce <code>2</code>.<ref name=\"AutoNT-64\" /> Versions before 3 used [[Rounding#Rounding away from zero|round-away-from-zero]]: <code>round(0.5)</code> is <code>1.0</code>, <code>round(-0.5)</code> is <code>\u22121.0</code>.<ref name=\"AutoNT-63\" /> \n\nPython allows boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression <code>a < b < c</code> tests whether <code>a</code> is less than <code>b</code> and <code>b</code> is less than <code>c</code>.<ref name=\"AutoNT-65\" />  C-derived languages interpret this expression differently: in C, the expression would first evaluate <code>a < b</code>, resulting in 0 or 1, and that result would then be compared with <code>c</code>.<ref name=\"CPL\" />\n\nPython uses [[arbitrary-precision arithmetic]] for all integer operations. The <code>Decimal</code> type/class in the <code>decimal</code> module provides decimal floating point numbers to a pre-defined arbitrary precision and several rounding modes.<ref>{{cite web|title = PEP 0327 -- Decimal Data Type|url = https://www.python.org/dev/peps/pep-0327/|website = Python.org|accessdate = 26 September 2015|last = Batista|first = Facundo}}</ref> The <code>Fraction</code> class in the <code>fractions</code> module provides arbitrary precision for [[Rational number|rational numbers]].<ref>{{cite web|title = What's New in Python 2.6 \u2014 Python v2.6.9 documentation|url = https://docs.python.org/2.6/whatsnew/2.6.html|website = docs.python.org|accessdate = 26 September 2015}}</ref>\n\nDue to Python's extensive mathematics library, and the third-party library [[NumPy]] that further extends the native capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation.<ref>{{Cite web|url=https://www.stat.washington.edu/~hoytak/blog/whypython.html|title=10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) \u2014 Hoyt Koepke|website=www.stat.washington.edu|access-date=2019-02-03}}</ref><ref>{{Cite web|url=https://engineering.ucsb.edu/~shell/che210d/python.pdf|title=An introduction to Python for scientific computing|last=Shell|first=Scott|date=17 June 2014|website=|access-date=3 Feb 2019}}</ref>\n\n== Python programming examples ==\n[[\"Hello, World!\" program|Hello world]] program:\n<syntaxhighlight lang=\"python\">\nprint('Hello, world!')\n</syntaxhighlight>\n\nProgram to calculate the [[factorial]] of a positive integer:\n<syntaxhighlight lang=\"python\">\nn = int(input('Type a number, then its factorial will be printed: '))\n\nif n < 0:\n    raise ValueError('You must enter a positive number')\n\nfact = 1\ni = 2\nwhile i <= n:\n    fact = fact * i\n    i += 1\n\nprint(fact)\n</syntaxhighlight>\n\n== Libraries ==\nPython's large [[standard library]], commonly cited as one of its greatest strengths,<ref name=\"AutoNT-86\" /> provides tools suited to many tasks. For Internet-facing applications, many standard formats and protocols such as [[MIME]] and [[Hypertext Transfer Protocol|HTTP]] are supported. It includes modules for creating [[graphical user interface]]s, connecting to [[relational database]]s, [[pseudorandom number generator|generating pseudorandom numbers]], arithmetic with arbitrary-precision decimals,<ref name=\"AutoNT-88\" /> manipulating [[regular expression]]s, and [[unit testing]].\n\nSome parts of the standard library are covered by specifications (for example, the [[Web Server Gateway Interface]] (WSGI) implementation <code>wsgiref</code> follows PEP 333<ref name=\"AutoNT-89\" />), but most modules are not. They are specified by their code, internal documentation, and test suites. However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations.\n\n{{As of|2019|11|post=,}} the [[Python Package Index]] (PyPI), the official repository for third-party Python software, contains over 200,000<ref>{{cite web |url=http://www.modulecounts.com/ |title=Module Counts |date=|website=ModuleCounts |last1=Debill|first1=Erik |accessdate=5 November 2019}}</ref> packages with a wide range of functionality, including:\n\n* [[Graphical user interfaces]]\n* [[Web framework]]s\n* [[Multimedia]]\n* [[Databases]]\n* Networking \n* [[Test framework]]s\n* [[Automation]]\n* [[Web scraping]]<ref>{{cite web|url=https://likegeeks.com/python-web-scraping/|title=20+ Python Web Scraping Examples (Beautiful Soup & Selenium) - Like Geeks|date=5 December 2017|website=likegeeks.com|accessdate=12 March 2018}}</ref>\n* Documentation\n* [[System administration]]\n* [[Scientific computing]]\n* [[Text processing]]\n* [[Image processing]]\n* [[Machine learning]]\n* [[Data analytics]]\n\n== Development environments ==\n{{See also|Comparison of integrated development environments#Python}}\n\nMost Python implementations (including CPython) include a [[read\u2013eval\u2013print loop]] (REPL), permitting them to function as a [[command line interpreter]] for which the user enters statements sequentially and receives results immediately.\n\nOther shells, including [[IDLE]] and [[IPython]], add further abilities such as improved auto-completion, session state retention and [[syntax highlighting]].\n\nAs well as standard desktop [[integrated development environment]]s, there are [[Web browser]]-based IDEs; [[SageMath]] (intended for developing science and math-related Python programs); [[PythonAnywhere]], a browser-based IDE and hosting environment; and Canopy IDE, a commercial Python IDE emphasizing [[scientific computing]].<ref>{{cite web|last1=Enthought|first1=Canopy |title=Canopy |url=https://www.enthought.com/products/canopy/|website=www.enthought.com |accessdate=20 August 2016}}</ref>\n\n== Implementations ==\n{{See also|List of Python software#Python implementations}}\n\n=== Reference implementation ===\n[[CPython]] is the [[reference implementation]] of Python. It is written in [[C (programming language)|C]], meeting the [[C89 (C version)|C89]] standard with several select [[C99]] features.<ref name=\"AutoNT-66\" /> It compiles Python programs into an intermediate [[bytecode]]<ref name=\"AutoNT-67\" /> which is then executed by its [[virtual machine]].<ref name=\"AutoNT-68\" /> CPython is distributed with a large standard library written in a mixture of C and native Python. It is available for many platforms, including [[Microsoft Windows|Windows]] and most modern [[Unix-like]] systems. Platform portability was one of its earliest priorities.<ref name=\"AutoNT-69\" />\n\n=== Other implementations ===\n[[PyPy]] is a fast, compliant interpreter of Python 2.7 and 3.6.<ref name=\"AutoNT-70\" /> Its [[Just-in-time compilation|just-in-time compiler]] brings a significant speed improvement over CPython but several libraries written in C cannot be used with it.<ref name=\"AutoNT-71\" /><ref>{{cite web|url=https://hackernoon.com/which-is-the-fastest-version-of-python-2ae7c61a6b2b|title=Which is the fastest version of Python?|first=Anthony|last=Shaw|publisher=Hacker Noon|date=2018-03-30|accessdate=2019-12-20}}</ref>\n\n[[Stackless Python]] is a significant fork of CPython that implements [[microthread]]s; it does not use the C memory stack, thus allowing massively concurrent programs. PyPy also has a stackless version.<ref name=\"AutoNT-73\" />\n\n[[MicroPython]] and [[CircuitPython]] are Python 3 variants optimized for [[microcontroller]]s. This includes [[Lego Mindstorms EV3]].<ref>{{Cite web|url=https://education.lego.com/en-us/support/mindstorms-ev3/python-for-ev3|title=Python-for-EV3|website=LEGO Education|language=en|access-date=2019-04-17}}</ref>\n\n=== Unsupported implementations ===\nOther just-in-time Python compilers have been developed, but are now unsupported:\n\n* Google began a project named [[Unladen Swallow]] in 2009, with the aim of speeding up the Python interpreter five-fold by using the [[LLVM]], and of improving its multithreading ability to scale to thousands of cores,<ref name=\"AutoNT-74\" /> while ordinary implementations suffer from the [[global interpreter lock]].\n* [[Psyco]] was a [[Just-in-time compilation|just-in-time]] [[Run-time algorithm specialisation|specializing]] compiler that integrates with CPython and transforms bytecode to machine code at runtime. The emitted code is specialized for certain [[data type]]s and is faster than standard Python code.\n\nIn 2005, [[Nokia]] released a Python interpreter for the [[Series 60]] mobile phones named [[PyS60]]. It includes many of the modules from the CPython implementations and some additional modules to integrate with the [[Symbian]] operating system. The project has been kept up-to-date to run on all variants of the S60 platform, and several third-party modules are available. The Nokia [[N900]] also supports Python with [[GTK]] widget libraries, enabling programs to be written and run on the target device.<ref>{{cite web |title=Python on the Nokia N900 |url=http://www.stochasticgeometry.ie/2010/04/29/python-on-the-nokia-n900/|website=Stochastic Geometry|date=2010-04-29}}</ref>\n\n=== Cross-compilers to other languages ===\nThere are several compilers to high-level [[object language]]s, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language:\n\n* [[Jython]] enables the use of the Java class library from a Python program.\n* [[IronPython]] follows a similar approach in order to run Python programs on the .NET [[Common Language Runtime]].\n* The [[RPython]] language can be compiled to [[C (programming language)|C]], and is used to build the PyPy interpreter of Python.\n* [[Pyjs]] compiles Python to [[JavaScript]].\n* [[Cython]] compiles Python to [[C (programming language)|C]] and [[C++]].\n* [[Numba]] uses [[LLVM]] to compile Python to machine code.\n* Pythran compiles Python to [[C++]].<ref>{{Cite web|url=https://medium.com/@olivier.borderies/pythran-python-at-c-speed-518f26af60e8|title=Pythran: Python at C++ speed !|first=Olivier|last=Borderies|date=January 24, 2019|website=Medium}}</ref><ref>{{Cite web|url=https://pythran.readthedocs.io/en/latest/|title=Pythran \u2014 Pythran 0.9.5 documentation|website=pythran.readthedocs.io}}</ref>\n* Somewhat dated [[Pyrex (programming language)|Pyrex]] (latest release in 2010) and [[Shed Skin]] (latest release in 2013) compile to C and C++ respectively.\n* Google's Grumpy compiles Python to [[Go (programming language)|Go]].<ref>{{Cite web|url=https://github.com/google/grumpy|title=google/grumpy|date=April 10, 2020|via=GitHub}}</ref><ref>{{Cite web|url=https://opensource.google/projects/|title=Projects|website=opensource.google}}</ref>\n* [[MyHDL]] compiles Python to [[VHDL]].\n* [[Nuitka]] compiles Python into C++.<ref>{{cite web|url=http://nuitka.net/|title=Nuitka Home {{!}} Nuitka Home|website=nuitka.net|language=en|access-date=18 August 2017}}</ref>\n\n=== Performance ===\nA performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy '13.<ref>{{cite conference |title=Performance of Python runtimes on a non-numeric scientific code |last=Murri |first=Riccardo |conference=European Conference on Python in Science (EuroSciPy) |year=2013 |arxiv=1404.6388|bibcode=2014arXiv1404.6388M }}</ref>\n\n== Development ==\nPython's development is conducted largely through the ''Python Enhancement Proposal'' (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues and documenting Python design decisions.<ref name=\"PepCite000\" /> Python coding style is covered in PEP 8.<ref>{{cite web|url=https://www.python.org/dev/peps/pep-0008/|title=PEP 8 -- Style Guide for Python Code|website=Python.org}}</ref> Outstanding PEPs are reviewed and commented on by the Python community and the steering council.<ref name=\"PepCite000\" />\n\nEnhancement of the language corresponds with development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues are discussed in the [[Roundup (issue tracker)|Roundup]] [[bug tracker]] hosted at [https://bugs.python.org bugs.python.org].<ref name=\"AutoNT-21\" /> Development originally took place on a [[Self-hosting (web services)|self-hosted]] source-code repository running [[Mercurial]], until Python moved to [[GitHub]] in January 2017.<ref name=py_dev_guide>{{Cite web|url=https://docs.python.org/devguide/|title=Python Developer's Guide}}</ref>\n\nCPython's public releases come in three types, distinguished by which part of the version number is incremented:\n\n* Backward-incompatible versions, where code is expected to break and need to be manually [[ported]]. The first part of the version number is incremented. These releases happen infrequently\u2014for example, version 3.0 was released 8 years after 2.0.\n* Major or \"feature\" releases, about every 18 months, are largely compatible but introduce new features. The second part of the version number is incremented. Each major version is supported by bugfixes for several years after its release.<ref name=\"release-schedule\" />\n* Bugfix releases, which introduce no new features, occur about every 3 months and are made when a sufficient number of bugs have been fixed upstream since the last release. Security vulnerabilities are also patched in these releases. The third and final part of the version number is incremented.<ref name=\"AutoNT-22\" />\n\nPython 3.9 alpha1 was announced in November 2019<ref>{{Cite web|url=https://docs.python.org/3.9/whatsnew/3.9.html|title=What\u2019s New In Python 3.9|last=|first=|date=|website=Python|url-status=live|archive-url=|archive-date=|access-date=2019-11-28}}</ref> and with the adoption of a new yearly release cadence,<ref>{{Cite web|url=https://www.python.org/dev/peps/pep-0602/|title=PEP 602 -- Annual Release Cycle for Python|website=Python.org|language=en|access-date=2019-11-06}}</ref><ref>{{Cite web|url=https://lwn.net/Articles/802777/|title=Changing the Python release cadence [LWN.net]|website=lwn.net|access-date=2019-11-06}}</ref> the first release of 3.9 is slated for November 2020.<ref>{{Cite web|url=https://www.python.org/dev/peps/pep-0596/|title=PEP 596 -- Python 3.9 Release Schedule|website=Python.org|language=en|access-date=2019-11-06}}</ref>\n\nMany [[beta release|alpha, beta, and release-candidates]] are also released as previews and for testing before final releases. Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python's development team monitors the state of the code by running the large [[unit test]] suite during development, and using the [[BuildBot]] [[continuous integration]] system.<ref name=\"AutoNT-23\" />\n\nThe community of Python developers has also contributed over 206,000<ref>{{cite web|last1=DeBill|first1=Erik |title=Module Counts |url=http://www.modulecounts.com/#|website=www.modulecounts.com |accessdate=29 November 2019}}</ref> software modules ({{as of|2019|11|29|lc=yes}}) to the [[Python Package Index]] (PyPI), the official repository of third-party Python libraries.\n\nThe major [[academic conference]] on Python is [[PyCon]]. There are also special Python mentoring programmes, such as [[Pyladies]].\n\n== Naming ==\nPython's name is derived from the British comedy group [[Monty Python]], whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;<ref name=\"tutorial-chapter1\" /> for example, the [[metasyntactic variable]]s often used in Python literature are [[Spam (Monty Python)|''spam'' and ''eggs'']] instead of the traditional [[foobar|''foo'' and ''bar'']].<ref name=\"tutorial-chapter1\" /><ref name=\"AutoNT-26\" /> The official Python documentation also contains various references to Monty Python routines.<ref>{{cite book |last1=Lutz |first1=Mark |title=Learning Python: Powerful Object-Oriented Programming |year=2009 |publisher=O'Reilly Media, Inc. |isbn=9781449379322 |page=17 |url=https://books.google.com/books?id=1HxWGezDZcgC&pg=PA17 |language=en}}</ref><ref>{{cite book |last1=Fehily |first1=Chris |title=Python |year=2002 |publisher=Peachpit Press |isbn=9780201748840 |page=xv |url=https://books.google.com/books?id=carqdIdfVlYC&pg=PR15 |language=en}}</ref>\n\nThe prefix ''Py-'' is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include [[Pygame]], a [[language binding|binding]] of [[Simple DirectMedia Layer|SDL]] to Python (commonly used to create games); [[PyQt]] and [[PyGTK]], which bind [[Qt (software)|Qt]] and [[GTK]] to Python respectively; and [[PyPy]], a Python implementation originally written in Python.\n\n== API documentation generators ==\nPython API documentation generators include:\n\n* [[Sphinx (documentation generator)|Sphinx]]\n* [[Epydoc]]\n* [[HeaderDoc]]\n* [[pydoc]]\n\n== Uses ==\n{{Main|List of Python software}}\nSince 2003, Python has consistently ranked in the top ten most popular programming languages in the [[TIOBE Programming Community Index]] where, {{as of|2020|2|lc=y|df=}}, it is the third most popular language (behind [[Java (programming language)|Java]], and [[C (programming language)|C]]).<ref>{{cite web |url=http://www.tiobe.com/tiobe-index/ |title=TIOBE Index |publisher=TIOBE - The Software Quality Company |accessdate=7 March 2017}}</ref> It was selected Programming Language of the Year in 2007, 2010, and 2018.<ref name=\"AutoNT-34\" />\n\nAn empirical study found that scripting languages, such as Python, are more productive than conventional languages, such as C and Java, for programming problems involving string manipulation and search in a dictionary, and determined that memory consumption was often \"better than Java and not much worse than C or C++\".<ref name=\"AutoNT-28\" />\n\nLarge organizations that use Python include [[Wikipedia]], [[Google]],<ref name=\"quotes-about-python\" /> [[Yahoo!]],<ref name=\"AutoNT-29\" /> [[CERN]],<ref name=\"AutoNT-30\" /> [[NASA]],<ref name=\"AutoNT-31\" /> [[Facebook]],<ref>{{Cite web|url=https://developers.facebook.com/blog/post/301|title=Tornado: Facebook's Real-Time Web Framework for Python - Facebook for Developers|website=Facebook for Developers|language=en-US|access-date=2018-06-19}}</ref> [[Amazon (company)|Amazon]], [[Instagram]],<ref>{{cite web |url=https://instagram-engineering.com/what-powers-instagram-hundreds-of-instances-dozens-of-technologies-adf2e22da2ad |title=What Powers Instagram: Hundreds of Instances, Dozens of Technologies |publisher=Instagram Engineering |accessdate=27 May 2019}}</ref> [[Spotify]]<ref>{{Cite web|url=https://labs.spotify.com/2013/03/20/how-we-use-python-at-spotify/|title=How we use Python at Spotify|website=Spotify Labs|language=en-US|access-date=2018-07-25|date=2013-03-20}}</ref> and some smaller entities like [[Industrial Light & Magic|ILM]]<ref name=\"AutoNT-32\" /> and [[ITA Software|ITA]].<ref name=\"AutoNT-33\" /> The social news networking site [[Reddit]] is written entirely in Python.<ref>{{Citation|title=GitHub - reddit-archive/reddit: historical code from reddit.com.|date=2019-03-19|url=https://github.com/reddit-archive/reddit|publisher=The Reddit Archives|access-date=2019-03-20}}</ref>\n\nPython can serve as a [[scripting language]] for [[web application]]s, e.g., via [[mod_wsgi]] for the [[Apache web server]].<ref name=\"AutoNT-35\" /> With [[Web Server Gateway Interface]], a standard API has evolved to facilitate these applications. [[Web framework]]s like [[Django (web framework)|Django]], [[Pylons (web framework)|Pylons]], [[Pyramid (web framework)|Pyramid]], [[TurboGears]], [[web2py]], [[Tornado (web server)|Tornado]], [[Flask (web framework)|Flask]], [[Bottle (web framework)|Bottle]] and [[Zope]] support developers in the design and maintenance of complex applications. [[Pyjs]] and [[IronPython]] can be used to develop the client-side of Ajax-based applications. [[SQLAlchemy]] can be used as [[Data mapper pattern|data mapper]] to a relational database. [[Twisted (software)|Twisted]] is a framework to program communications between computers, and is used (for example) by [[Dropbox (service)|Dropbox]].\n\nLibraries such as [[NumPy]], [[SciPy]] and [[Matplotlib]] allow the effective use of Python in [[scientific computing]],<ref name=\"cise\">{{cite journal |last=Oliphant |first=Travis |title=Python for Scientific Computing |journal=Computing in Science and Engineering |volume=9 |issue=3 |pages=10\u201320 |year=2007 |url=https://www.h2desk.com/blog/python-scientific-computing/|doi=10.1109/MCSE.2007.58 |citeseerx=10.1.1.474.6460 |bibcode=2007CSE.....9c..10O }}</ref><ref name=\"millman\">{{cite journal |first1=K. Jarrod |last1=Millman |first2=Michael |last2=Aivazis |title=Python for Scientists and Engineers |journal=Computing in Science and Engineering |volume=13 |number=2 |pages=9\u201312 |year=2011 |url=http://www.computer.org/csdl/mags/cs/2011/02/mcs2011020009.html|doi=10.1109/MCSE.2011.36 |bibcode=2011CSE....13b...9M }}</ref> with specialized libraries such as [[Biopython]] and [[Astropy]] providing domain-specific functionality. [[SageMath]] is a [[mathematical software]] with a [[notebook interface]] programmable in Python: its library covers many aspects of [[mathematics]], including [[algebra]], [[combinatorics]], [[numerical mathematics]], [[number theory]], and [[calculus]]. \n\nPython has been successfully embedded in many software products as a scripting language, including in [[finite element method]] software such as [[Abaqus]], 3D parametric modeler like [[FreeCAD]], 3D animation packages such as [[3ds Max]], [[Blender (software)|Blender]], [[Cinema 4D]], [[Lightwave]], [[Houdini (software)|Houdini]], [[Maya (software)|Maya]], [[modo (software)|modo]], [[MotionBuilder]], [[Autodesk Softimage|Softimage]], the visual effects compositor [[Nuke (software)|Nuke]], 2D imaging programs like [[GIMP]],<ref>{{cite web |url=http://gimp-win.sourceforge.net/faq.html |title=Installers for GIMP for Windows - Frequently Asked Questions |author=<!-- Staff writer(s); no by-line. --> |date=26 July 2013 |accessdate=26 July 2013 |url-status=dead |archiveurl=https://web.archive.org/web/20130717070814/http://gimp-win.sourceforge.net/faq.html |archivedate=17 July 2013 |df=dmy-all }}</ref> [[Inkscape]], [[Scribus]] and [[Paint Shop Pro]],<ref name=\"AutoNT-38\" /> and [[musical notation]] programs like [[scorewriter]] and [[Capella (notation program)|capella]]. [[GNU Debugger]] uses Python as a [[Prettyprint|pretty printer]] to show complex structures such as C++ containers. [[Esri]] promotes Python as the best choice for writing scripts in [[ArcGIS]].<ref name=\"AutoNT-39\" /> It has also been used in several video games,<ref name=\"AutoNT-40\" /><ref name=\"AutoNT-41\" /> and has been adopted as first of the three available [[programming language]]s in [[Google App Engine]], the other two being [[Java (software platform)|Java]] and [[Go (programming language)|Go]].<ref name=\"AutoNT-42\" />\n\nPython is commonly used in [[artificial intelligence]] projects with the help of libraries like [[TensorFlow]], [[Keras]], [[PyTorch|Pytorch]] and [[Scikit-learn]].<ref name=whitepaper2015>{{cite web |last1 = Dean |first1 = Jeff |last2 = Monga |first2 = Rajat |first3 = Sanjay |last3 = Ghemawat |display-authors = 2 |authorlink1 = Jeff Dean (computer scientist) |title = TensorFlow: Large-scale machine learning on heterogeneous systems |url = http://download.tensorflow.org/paper/whitepaper2015.pdf |website = TensorFlow.org |publisher = Google Research |accessdate = 10 November 2015 |date = 9 November 2015 }}</ref><ref>{{cite web |last1=Piatetsky |first1=Gregory |title=Python eats away at R: Top Software for Analytics, Data Science, Machine Learning in 2018: Trends and Analysis |url=https://www.kdnuggets.com/2018/05/poll-tools-analytics-data-science-machine-learning-results.html/2 |website=KDnuggets |publisher=KDnuggets |accessdate=30 May 2018}}</ref><ref>{{cite web|url=https://scikit-learn.org/stable/testimonials/testimonials.html|title=Who is using scikit-learn? \u2014 scikit-learn 0.20.1 documentation|website=scikit-learn.org}}</ref><ref>{{cite web |authorlink1=Norman Jouppi|last1 = Jouppi |first1 = Norm |title = Google supercharges machine learning tasks with TPU custom chip |url = https://cloudplatform.googleblog.com/2016/05/Google-supercharges-machine-learning-tasks-with-custom-chip.html |website = Google Cloud Platform Blog |accessdate = 19 May 2016 }}</ref> As a scripting language with [[modular programming|modular architecture]], simple syntax and rich text processing tools, Python is often used for [[natural language processing]].<ref name=\"AutoNT-47\" />\n\nMany operating systems include Python as a standard component. It ships with most [[Linux distribution]]s<ref>{{Cite web|url=https://docs.python.org/3/using/unix.html|title=Python Setup and Usage|last=|first=|date=|website=|publisher=Python Software Foundation|url-status=live|archive-url=|archive-date=|access-date=10 January 2020}}</ref>, [[AmigaOS 4]], [[FreeBSD]] (as a package), [[NetBSD]], [[OpenBSD]] (as a package) and [[macOS]] and can be used from the command line (terminal). Many Linux distributions use installers written in Python: [[Ubuntu (operating system)|Ubuntu]] uses the [[Ubiquity (software)|Ubiquity]] installer, while [[Red Hat Linux]] and [[Fedora (operating system)|Fedora]] use the [[Anaconda (installer)|Anaconda]] installer. [[Gentoo Linux]] uses Python in its [[package management system]], [[Portage (software)|Portage]].\n\nPython is used extensively in the [[information security]] industry, including in exploit development.<ref name=\"AutoNT-49\" /><ref name=\"AutoNT-50\" />\n\nMost of the [[Sugar (software)|Sugar]] software for the [[One Laptop per Child]] XO, now developed at [[Sugar Labs]], is written in Python.<ref name=\"AutoNT-51\" /> The [[Raspberry Pi]] [[single-board computer]] project has adopted Python as its main user-programming language.\n\nDue to Python's user-friendly conventions and easy-to-understand language, it is commonly used as an intro language into computing sciences with students. This allows students to easily learn computing theories and concepts and then apply them to other programming languages.\n\n[[LibreOffice]] includes Python, and intends to replace Java with Python. Its Python Scripting Provider is a core feature<ref>{{cite web |title=4.0 New Features and Fixes |publisher=[[The Document Foundation]] |work=LibreOffice.org |year=2013 |url=http://www.libreoffice.org/download/4-0-new-features-and-fixes/ |accessdate=25 February 2013}}</ref> since Version 4.0 from 7 February 2013.\n\n== Languages influenced by Python ==\nPython's design and philosophy have influenced many other programming languages:\n\n* [[Boo (programming language)|Boo]] uses indentation, a similar syntax, and a similar object model.<ref name=\"AutoNT-90\" />\n* [[Cobra (programming language)|Cobra]] uses indentation and a similar syntax, and its \"Acknowledgements\" document lists Python first among languages that influenced it.<ref name=\"AutoNT-91\" /> However, Cobra directly supports [[Design by contract|design-by-contract]], [[Unit testing|unit tests]], and optional [[static typing]].<ref name=\"AutoNT-92\" />\n* [[CoffeeScript]], a [[programming language]] that cross-compiles to JavaScript, has Python-inspired syntax.\n* [[ECMAScript]] borrowed [[iterator]]s and [[generator (computer science)|generators]] from Python.<ref name=\"AutoNT-93\" />\n* [[Go (programming language)|Go]] is designed for the \"speed of working in a dynamic language like Python\"<ref name=\"AutoNT-94\"/> and shares the same syntax for slicing arrays.\n* [[Groovy (programming language)|Groovy]] was motivated by the desire to bring the Python design philosophy to [[Java (programming language)|Java]].<ref name=\"AutoNT-95\" />\n* [[Julia (programming language)|Julia]] was designed \"with [[hygienic macro|true macros]] [.. and to be] as usable for general programming as Python<!--, as easy for statistics as R, as natural for string processing as Perl, as powerful for linear algebra as Matlab, as good at gluing programs together as the shell. Something that is dirt simple to learn, yet keeps the most serious hackers happy. We want it interactive and we want it compiled.\n(Did we mention it --> [and] should be as fast as C<!--?-->\".<ref name=Julia>{{cite web| title= Why We Created Julia| date= February 2012| website= Julia website| url= https://julialang.org/blog/2012/02/why-we-created-julia| accessdate= 5 June 2014}}</ref> Calling to or from Julia is possible; to with PyCall.jl and a Python package pyjulia allows calling, in the other direction, from Python.\n* [[Kotlin (programming language)|Kotlin]] is a functional programming language with an interactive shell similar to Python. However, Kotlin is statically typed with access to standard Java libraries.<ref>{{cite web|url=https://kotlinlang.org/docs/tutorials/command-line.html|title=Working with the Command Line Compiler - Kotlin Programming Language|website=Kotlin|accessdate=12 March 2018}}</ref>\n* [[Nim (programming language)|Nim]] uses indentation and a similar syntax, however it is statically typed, and offers powerful macros.{{fact|date=February 2020}}\n* [[Ruby (programming language)|Ruby]]'s creator, [[Yukihiro Matsumoto]], has said: \"I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language.\"<ref name=\"linuxdevcenter\" />\n* [[Swift (programming language)|Swift]], a programming language developed by Apple, has some Python-inspired syntax.<ref>{{cite web |url=http://nondot.org/sabre |title=Chris Lattner's Homepage |publisher=Chris Lattner |first=Chris |last=Lattner |authorlink=Chris Lattner |date=3 June 2014 |accessdate=3 June 2014 |quote=I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.}}</ref>\n* [[Gdscript|GDScript]], dynamically typed programming language used to create video-games. It is extremely similar to Python with a few minor differences.\n\nPython's development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in [[Tcl]]<ref name=\"AutoNT-99\" /> and [[Erlang (programming language)|Erlang]].<ref name=\"AutoNT-100\" />\n\n== See also ==\n{{Portal|Computer programming|Free and open-source software}}\n\n* [[Python syntax and semantics]]\n* [[pip (package manager)]]\n* [[IPython]]\n\n== References ==\n{{Reflist|30em|refs=\n\n<ref name=\"faq-created\">{{cite web |url=https://docs.python.org/faq/general.html#why-was-python-created-in-the-first-place |title=Why was Python created in the first place? |work=General Python FAQ |publisher=Python Software Foundation |accessdate=22 March 2007}}</ref>\n\n<ref name=\"98-interview\">{{cite web |url=http://www.amk.ca/python/writing/gvr-interview |title=Interview with Guido van Rossum (July 1998) |last=Kuchling |first=Andrew M. |work=amk.ca |date=22 December 2006 |accessdate=12 March 2012 |url-status=dead |archiveurl=https://web.archive.org/web/20070501105422/http://www.amk.ca/python/writing/gvr-interview |archivedate=1 May 2007 |df=dmy-all }}</ref>\n\n<ref name=\"AutoNT-1\">{{ cite journal |last=van Rossum |first=Guido |year=1993 |title=An Introduction to Python for UNIX/C Programmers |journal=Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group) |quote=even though the design of C is far from ideal, its influence on Python is considerable. |citeseerx=10.1.1.38.2023 }}</ref>\n\n<ref name=\"classmix\">{{cite web |url=https://docs.python.org/tutorial/classes.html |title=Classes |work=The Python Tutorial |publisher=Python Software Foundation |accessdate=20 February 2012 |quote=It is a mixture of the class mechanisms found in C++ and Modula-3}}</ref>\n\n<ref name=\"effbot-call-by-object\">{{cite web |url=http://effbot.org/zone/call-by-object.htm |title=Call By Object |work=effbot.org |last=Lundh |first=Fredrik |quote=replace \"CLU\" with \"Python\", \"record\" with \"instance\", and \"procedure\" with \"function or method\", and you get a pretty accurate description of Python's object model. |accessdate=21 November 2017}}</ref>\n\n<ref name=\"AutoNT-2\">{{cite web |url=https://www.python.org/download/releases/2.3/mro/ |title=The Python 2.3 Method Resolution Order |last=Simionato |first=Michele |publisher=Python Software Foundation |quote=The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers}}</ref>\n\n<ref name=\"AutoNT-3\">{{cite web |url=https://docs.python.org/howto/functional.html |title=Functional Programming HOWTO |last=Kuchling |first=A. M. |work=Python v2.7.2 documentation |publisher=Python Software Foundation |accessdate=9 February 2012}}</ref>\n\n<ref name=\"pep0238\">{{cite web |url=https://www.python.org/dev/peps/pep-0238/ |title=PEP 238&nbsp;\u2013 Changing the Division Operator |first1=Moshe |last1=Zadka |first2=Guido |last2=van Rossum |date=11 March 2001 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=23 October 2013}}</ref>\n\n<ref name=\"AutoNT-4\">{{cite web |url=https://www.python.org/dev/peps/pep-0255/ |title=PEP 255&nbsp;\u2013 Simple Generators |first1=Neil |last1=Schemenauer |first2=Tim |last2=Peters |first3=Magnus Lie |last3=Hetland |date=18 May 2001 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=9 February 2012}}</ref>\n\n<ref name=\"AutoNT-5\">{{cite web |url=https://www.python.org/dev/peps/pep-0318/ |title=PEP 318&nbsp;\u2013 Decorators for Functions and Methods |first1=Kevin D. |last1=Smith |first2=Jim J. |last2=Jewett |first3=Skip |last3=Montanaro |first4=Anthony |last4=Baxter |date=2 September 2004 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=24 February 2012}}</ref>\n\n<ref name=\"AutoNT-6\">{{cite web |url=https://docs.python.org/3.2/tutorial/controlflow.html |title=More Control Flow Tools |work=Python 3 documentation |publisher=Python Software Foundation |accessdate=24 July 2015}}</ref>\n\n<ref name=\"bini\">{{cite book |last=Bini |first=Ola |title=Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform |year=2007 |publisher=APress |location=Berkeley |isbn=978-1-59059-881-8 |page=[https://archive.org/details/practicaljrubyon0000bini/page/3 3] |url-access=registration |url=https://archive.org/details/practicaljrubyon0000bini/page/3 }}</ref>\n\n<ref name=\"AutoNT-7\">{{cite web |last=Kuhlman |first=Dave |url=https://www.davekuhlman.org/python_book_01.pdf|title=A Python Book: Beginning Python, Advanced Python, and Python Exercises |at=Section 1.1|url-status=dead |archiveurl=https://web.archive.org/web/20120623165941/http://cutter.rexx.com/~dkuhlman/python_book_01.html |archivedate=23 June 2012 |df=dmy-all }}</ref>\n\n<ref name=\"About\">{{cite web |url=https://www.python.org/about |title=About Python |publisher=Python Software Foundation |accessdate=24 April 2012}}, second section \"Fans of Python use the phrase \"batteries included\" to describe the standard library, which covers everything from asynchronous processing to zip files.\"</ref>\n\n<ref name=\"venners-interview-pt-1\">{{cite web |url=http://www.artima.com/intv/pythonP.html |title=The Making of Python |last=Venners |first=Bill |date=13 January 2003 |work=Artima Developer |publisher=Artima |accessdate=22 March 2007}}</ref>\n\n<ref name=\"timeline-of-python\">{{cite web |url=https://python-history.blogspot.com/2009/01/brief-timeline-of-python.html \n|title=A Brief Timeline of Python |last=van Rossum |first=Guido |date=20 January 2009 |work=The History of Python |accessdate=20 January 2009}}</ref>\n\n<ref name=\"AutoNT-12\">{{ cite mailing list |url=https://mail.python.org/pipermail/python-dev/2000-August/008881.html |title=SETL (was: Lukewarm about range literals) |date=29 August 2000 |accessdate=13 March 2011 |mailinglist=Python-Dev |last=van Rossum |first=Guido |authorlink=Guido van Rossum}}</ref>\n\n<ref name=\"newin-2.0\">{{cite web |url=https://docs.python.org/whatsnew/2.0.html |title=What's New in Python 2.0 |last1=Kuchling |first1=A. M. |last2=Zadka |first2=Moshe |date=16 October 2000 |publisher=Python Software Foundation |accessdate=11 February 2012}}</ref>\n\n<ref name=\"3.0-release\">{{cite web |url=https://www.python.org/download/releases/3.0/ |title=Python 3.0 Release |publisher=Python Software Foundation |accessdate=8 July 2009}}</ref>\n\n<ref name=\"pep-3000\">{{cite web |url=https://www.python.org/dev/peps/pep-3000/ |title=PEP 3000&nbsp;\u2013 Python 3000 |last=van Rossum |first=Guido |date=5 April 2006 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=27 June 2009}}</ref>\n\n<ref name=\"AutoNT-13\">{{cite web |url=https://www.python.org/community/pycon/dc2004/papers/24/metaclasses-pycon.pdf |archiveurl=https://web.archive.org/web/20090530030205/http://www.python.org/community/pycon/dc2004/papers/24/metaclasses-pycon.pdf |archivedate=30 May 2009 |title=Python Metaclasses: Who? Why? When? |last=The Cain Gang Ltd. |accessdate=27 June 2009 |url-status=dead |df=dmy-all }}</ref>\n\n<ref name=\"AutoNT-14\">{{cite web |url=https://docs.python.org/3.0/reference/datamodel.html#special-method-names |title=3.3. Special method names |work=The Python Language Reference |publisher=Python Software Foundation |accessdate=27 June 2009}}</ref>\n\n<ref name=\"AutoNT-15\">{{cite web |url=http://www.nongnu.org/pydbc/ |title=PyDBC: method preconditions, method postconditions and class invariants for Python |accessdate=24 September 2011}}</ref>\n\n<ref name=\"AutoNT-16\">{{cite web |url=http://www.wayforward.net/pycontract/ |title=Contracts for Python |accessdate=24 September 2011}}</ref>\n\n<ref name=\"AutoNT-17\">{{cite web |url=https://sites.google.com/site/pydatalog/ |title=PyDatalog |accessdate=22 July 2012}}</ref>\n\n<ref name=\"AutoNT-18\">{{cite web |url=https://docs.python.org/3/library/itertools.html |title=6.5 itertools&nbsp;\u2013 Functions creating iterators for efficient looping |publisher=Docs.python.org |accessdate=22 November 2016}}</ref>\n\n<ref name=\"PEP20\">{{cite web |url=https://www.python.org/dev/peps/pep-0020/ |title=PEP 20&nbsp;\u2013 The Zen of Python |last=Peters |first=Tim |date=19 August 2004 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=24 November 2008}}</ref>\n\n<ref name=\"AutoNT-19\">{{cite book | url=http://shop.oreilly.com/product/9780596007973.do | title=Python Cookbook, 2nd Edition | publisher=[[O'Reilly Media]] |last1=Martelli |first1=Alex |last2=Ravenscroft |first2=Anna |last3=Ascher |first3=David | year=2005 | page=230 | isbn=978-0-596-00797-3}}</ref>\n\n<ref name=\"AutoNT-20\">{{Cite web|url=http://ebeab.com/2014/01/21/python-culture/|title=Ebeab.com|website=ebeab.com}}</ref>\n\n<ref name=\"PepCite000\">{{cite web |url=https://www.python.org/dev/peps/pep-0001/ |title=PEP 1&nbsp;\u2013 PEP Purpose and Guidelines |last1=Warsaw |first1=Barry |last2=Hylton |first2=Jeremy |last3=Goodger |first3=David |date=13 June 2000 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=19 April 2011}}</ref>\n\n<ref name=\"AutoNT-21\">{{cite web |url=https://www.python.org/dev/intro/ |title=Guido, Some Guys, and a Mailing List: How Python is Developed |last=Cannon |first=Brett |work=python.org |publisher=Python Software Foundation |accessdate=27 June 2009 |url-status=dead |archiveurl=https://web.archive.org/web/20090601134342/http://www.python.org/dev/intro/ |archivedate=1 June 2009 }}</ref>\n\n<ref name=\"release-schedule\">{{cite web |url=https://mail.python.org/pipermail/python-dev/2002-April/022739.html |title=&#91;Python-Dev&#93; Release Schedules (was Stability & change) |last=Norwitz |first=Neal |date=8 April 2002 |accessdate=27 June 2009}}</ref>\n\n<ref name=\"AutoNT-22\">{{cite web |url=https://www.python.org/dev/peps/pep-0006/ |title=PEP 6&nbsp;\u2013 Bug Fix Releases |last1=Aahz |last2=Baxter |first2=Anthony |date=15 March 2001 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=27 June 2009}}</ref>\n\n<ref name=\"AutoNT-23\">{{cite web |url=https://www.python.org/dev/buildbot/ |title=Python Buildbot |work=Python Developer\u2019s Guide |publisher=Python Software Foundation |accessdate=24 September 2011}}</ref>\n\n<ref name=\"AutoNT-24\">{{cite web |url=https://docs.python.org/2/faq/general.html#why-is-it-called-python |title=General Python FAQ |work=Python v2.7.3 documentation |publisher=Docs.python.org |date= |accessdate=3 December 2012}}</ref>\n\n<ref name=\"tutorial-chapter1\">{{cite web |url=https://docs.python.org/tutorial/appetite.html |title=Whetting Your Appetite |work=The Python Tutorial |publisher=Python Software Foundation |accessdate=20 February 2012}}</ref>\n\n<ref name=\"AutoNT-25\">{{cite web |url=http://python.net/crew/mwh/hacks/objectthink.html |title=How to think like a Pythonista}}</ref>\n\n<ref name=\"AutoNT-26\">{{cite web |url=https://stackoverflow.com/questions/5033906/in-python-should-i-use-else-after-a-return-in-an-if-block |title=In Python, should I use else after a return in an if block? |date=17 February 2011 |work=[[Stack Overflow]] |publisher=Stack Exchange |accessdate=6 May 2011}}</ref>\n\n<ref name=\"AutoNT-27\">{{cite web |url=http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html |title=Code Like a Pythonista: Idiomatic Python |last=Goodger |first=David}}</ref>\n\n<ref name=\"AutoNT-28\">{{cite web |url=http://page.mi.fu-berlin.de/prechelt/Biblio/jccpprt_computer2000.pdf |title=An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl |first=Lutz |last=Prechelt <!-- \"work\" doesn't work.. |work=[http://page.mi.fu-berlin.de/prechelt/Biblio/ Bibliography of Lutz Prechelt]--> |date=14 March 2000 |accessdate=30 August 2013}}</ref>\n\n<ref name=\"quotes-about-python\">{{cite web |url=https://www.python.org/about/quotes/ |title=Quotes about Python |publisher=Python Software Foundation |accessdate=8 January 2012}}</ref>\n\n<ref name=\"AutoNT-29\">{{cite web |url=https://wiki.python.org/moin/OrganizationsUsingPython |title=Organizations Using Python |publisher=Python Software Foundation |accessdate=15 January 2009}}</ref>\n\n<ref name=\"AutoNT-30\">{{ cite journal |title=Python : the holy grail of programming |journal=CERN Bulletin |issue=31/2006 |publisher=CERN Publications |date=31 July 2006 |url=http://cdsweb.cern.ch/journal/CERNBulletin/2006/31/News%20Articles/974627?ln=en |accessdate=11 February 2012}}</ref>\n\n<ref name=\"AutoNT-31\">{{cite web |url=https://www.python.org/about/success/usa/ |title=Python Streamlines Space Shuttle Mission Design |last=Shafer |first=Daniel G. |date=17 January 2003 |publisher=Python Software Foundation |accessdate=24 November 2008}}</ref>\n\n<ref name=\"AutoNT-32\">{{cite web |url=https://www.python.org/about/success/ilm/ |title=Industrial Light & Magic Runs on Python |last=Fortenberry |first=Tim |date=17 January 2003 |publisher=Python Software Foundation |accessdate=11 February 2012}}</ref>\n\n<ref name=\"AutoNT-33\">{{cite web |url=http://www.eweek.com/c/a/Application-Development/Python-Slithers-into-Systems/ |title=Python Slithers into Systems |last=Taft |first=Darryl K. |date=5 March 2007 |work=eWeek.com |publisher=Ziff Davis Holdings |accessdate=24 September 2011}}</ref>\n\n<ref name=\"AutoNT-34\">{{cite web |title=TIOBE Programming Community Index Python |author=TIOBE Software Index |year=2015 |url=http://www.tiobe.com/index.php/paperinfo/tpci/Python.html |accessdate=10 September 2015}}</ref>\n\n<ref name=\"AutoNT-35\">{{cite web |title=Usage statistics and market share of Python for websites |year=2012 |url=http://w3techs.com/technologies/details/pl-python/all/all |accessdate=18 December 2012}}</ref>\n\n<ref name=\"AutoNT-38\">{{cite web |url=http://www.jasc.com/support/customercare/articles/psp9components.asp |title=jasc psp9components |url-status=dead |archiveurl=https://web.archive.org/web/20080319061519/http://www.jasc.com/support/customercare/articles/psp9components.asp |archivedate=19 March 2008 }}</ref>\n\n<ref name=\"AutoNT-39\">{{cite web |url=http://webhelp.esri.com/arcgisdesktop/9.2/index.cfm?TopicName=About_getting_started_with_writing_geoprocessing_scripts |title=About getting started with writing geoprocessing scripts |date=17 November 2006 |work=ArcGIS Desktop Help 9.2 |publisher=Environmental Systems Research Institute |accessdate=11 February 2012}}</ref>\n\n<ref name=\"AutoNT-40\">{{cite web |url=http://community.eveonline.com/news/dev-blogs/stackless-python-2.7/ |title=Stackless Python 2.7 |publisher=[[CCP Games]] |date=24 August 2010 |author=CCP porkbelly |work=EVE Community Dev Blogs |quote=As you may know, EVE has at its core the programming language known as Stackless Python.}}</ref>\n\n<ref name=\"AutoNT-41\">{{cite web |url=http://www.2kgames.com/civ4/blog_03.htm |title=Modding Sid Meier's Civilization IV |last=Caudill |first=Barry |date=20 September 2005 |publisher=[[Firaxis Games]] |archiveurl=https://web.archive.org/web/20101202164144/http://www.2kgames.com/civ4/blog_03.htm |archivedate=2 December 2010 |work=Sid Meier's Civilization IV Developer Blog |quote=we created three levels of tools ... The next level offers Python and XML support, letting modders with more experience manipulate the game world and everything in it. |url-status=dead |df=dmy-all }}</ref>\n\n<ref name=\"AutoNT-42\">{{cite web |url=https://code.google.com/apis/documents/docs/1.0/developers_guide_python.html |title=Python Language Guide (v1.0) |work=Google Documents List Data API v1.0 |archiveurl=https://web.archive.org/web/20100715145616/http://code.google.com/apis/documents/docs/1.0/developers_guide_python.html |archivedate=15 July 2010 |url-status=dead |df=dmy-all }}</ref>\n\n<ref name=\"AutoNT-47\">{{Cite web|url=http://www.nltk.org/|title=Natural Language Toolkit \u2014 NLTK 3.5b1 documentation|website=www.nltk.org}}</ref>\n\n<ref name=\"AutoNT-49\">{{cite web |url=http://www.immunitysec.com/products-immdbg.shtml |title=Immunity: Knowing You're Secure |url-status=dead |archiveurl=https://web.archive.org/web/20090216134332/http://immunitysec.com/products-immdbg.shtml |archivedate=16 February 2009 |df=dmy-all }}</ref>\n\n<ref name=\"AutoNT-50\">{{Cite web|url=https://www.coresecurity.com/|title=Core Security|website=Core Security}}</ref>\n\n<ref name=\"AutoNT-51\">{{cite web |url=http://sugarlabs.org/go/Sugar |title=What is Sugar? |publisher=Sugar Labs |accessdate=11 February 2012}}</ref>\n\n<ref name=\"AutoNT-52\">{{cite web |title=Is Python a good language for beginning programmers? |url=https://docs.python.org/faq/general.html#is-python-a-good-language-for-beginning-programmers |work=General Python FAQ |publisher=Python Software Foundation |accessdate=21 March 2007}}</ref>\n\n<ref name=\"AutoNT-53\">{{cite web |url=http://www.secnetix.de/~olli/Python/block_indentation.hawk |title=Myths about indentation in Python |publisher=Secnetix.de |accessdate=19 April 2011}}</ref>\n\n<!--ref name=\"AutoNT-54\">{{cite web |url=http://c2.com/cgi/wiki?PythonWhiteSpaceDiscussion |title=White Space Discussion |accessdate=1 January 2013}}</ref-->\n\n<ref name=\"AutoNT-55\">{{cite web |last=van Rossum |first=Guido |url=http://neopythonic.blogspot.be/2009/04/tail-recursion-elimination.html |title=Tail Recursion Elimination |publisher=Neopythonic.blogspot.be |date=22 April 2009 |accessdate=3 December 2012}}</ref>\n\n<ref name=\"AutoNT-56\">{{cite web |title=Language Design Is Not Just Solving Puzzles |url=http://www.artima.com/weblogs/viewpost.jsp?thread=147358 |first=Guido |last=van Rossum |date=9 February 2006 |accessdate=21 March 2007 |work=Artima forums |publisher=Artima}}</ref>\n\n<ref name=\"AutoNT-57\">{{cite web |url=https://www.python.org/dev/peps/pep-0342/ |title=PEP 342&nbsp;\u2013 Coroutines via Enhanced Generators |last1=van Rossum |first1=Guido |last2=Eby |first2=Phillip J. |date=10 May 2005 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=19 February 2012}}</ref>\n\n<ref name=\"AutoNT-58\">{{cite web |url=https://www.python.org/dev/peps/pep-0380/ |title=PEP 380 |publisher=Python.org |date= |accessdate=3 December 2012}}</ref>\n\n<ref name=\"AutoNT-59\">{{cite web |url=https://www.python.org/dev/peps/pep-0289/ |title=PEP 289&nbsp;\u2013 Generator Expressions |last=Hettinger |first=Raymond |date=30 January 2002 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=19 February 2012}}</ref>\n\n<ref name=\"AutoNT-60\">{{cite web |url=https://www.python.org/dev/peps/pep-0308/ |title=PEP 308&nbsp;\u2013 Conditional Expressions |last1=van Rossum |first1=Guido |last2=Hettinger |first2=Raymond |date=7 February 2003 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=13 July 2011}}</ref>\n\n<ref name=\"AutoNT-61\">{{cite web |url=https://docs.python.org/faq/design.html#why-must-self-be-used-explicitly-in-method-definitions-and-calls |title=Why must 'self' be used explicitly in method definitions and calls? |work=Design and History FAQ |publisher=Python Software Foundation |accessdate=19 February 2012}}</ref>\n\n<ref name=\"classy\">{{cite web |title=The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1 |accessdate=12 January 2011 |url=https://docs.python.org/reference/datamodel.html#new-style-and-classic-classes}}</ref>\n\n<ref name=\"pep0237\">{{cite web |url=https://www.python.org/dev/peps/pep-0237/ |title=PEP 237&nbsp;\u2013 Unifying Long Integers and Integers |last1=Zadka |first1=Moshe |last2=van Rossum |first2=Guido |date=11 March 2001 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=24 September 2011}}</ref>\n\n<ref name=\"AutoNT-62\">{{cite web |url=https://python-history.blogspot.com/2010/08/why-pythons-integer-division-floors.html |title=Why Python's Integer Division Floors |accessdate=25 August 2010}}</ref>\n\n<ref name=\"AutoNT-63\">{{citation |url=https://docs.python.org/library/functions.html#round |accessdate=14 August 2011 |title=round |work=The Python standard library, release 2.7, \u00a72: Built-in functions}}</ref>\n\n<ref name=\"AutoNT-64\">{{citation |url=https://docs.python.org/py3k/library/functions.html#round |accessdate=14 August 2011 |title=round |work=The Python standard library, release 3.2, \u00a72: Built-in functions}}</ref>\n\n<ref name=\"AutoNT-65\">{{cite book | title=Python Essential Reference | first1=David M. |last1=Beazley | edition=4th | year = 2009 | page =66 }}</ref>\n\n<ref name=\"CPL\">{{cite book | title=The C Programming Language | first1=Brian W. | last1=Kernighan | first2=Dennis M. | last2=Ritchie |titlelink=The C Programming Language | edition=2nd | year=1988 | page=[https://archive.org/details/cprogramminglang00bria/page/206 206] }}</ref>\n\n<ref name=\"AutoNT-66\">{{cite web |url=https://www.python.org/dev/peps/pep-0007/ |title=PEP 7&nbsp;\u2013 Style Guide for C Code |last=van Rossum |first=Guido |date=5 June 2001 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=24 November 2008}}</ref>\n\n<ref name=\"AutoNT-67\">{{cite web |url=https://docs.python.org/3/library/dis.html#python-bytecode-instructions |title=CPython byte code |publisher=Docs.python.org |accessdate=16 February 2016}}</ref>\n\n<ref name=\"AutoNT-68\">{{cite web |url=http://www.troeger.eu/teaching/pythonvm08.pdf |title=Python 2.5 internals |accessdate=19 April 2011}}</ref>\n\n<ref name=\"AutoNT-69\">{{cite web |url=http://www.oreilly.com/pub/a/oreilly/frank/rossum_1099.html |title=An Interview with Guido van Rossum |publisher=Oreilly.com |accessdate=24 November 2008}}</ref>\n\n<ref name=\"AutoNT-70\">{{cite web |url=https://pypy.org/compat.html |title=PyPy compatibility |publisher=Pypy.org |date= |accessdate=3 December 2012}}</ref>\n\n<ref name=\"AutoNT-71\">{{cite web |url=http://speed.pypy.org/ |title=speed comparison between CPython and Pypy |publisher=Speed.pypy.org |date= |accessdate=3 December 2012}}</ref>\n\n<ref name=\"AutoNT-73\">{{cite web |url=http://doc.pypy.org/en/latest/stackless.html |title=Application-level Stackless features \u2014 PyPy 2.0.2 documentation |publisher=Doc.pypy.org |accessdate=17 July 2013}}</ref>\n\n<ref name=\"AutoNT-74\">{{cite web |url=https://code.google.com/p/unladen-swallow/wiki/ProjectPlan |title=Plans for optimizing Python |work=Google Project Hosting |date=15 December 2009 |accessdate=24 September 2011}}</ref>\n\n<ref name=\"AutoNT-86\">{{cite web |first=Przemyslaw |last=Piotrowski |url=http://www.oracle.com/technetwork/articles/piotrowski-pythoncore-084049.html |title=Build a Rapid Web Development Environment for Python Server Pages and Oracle |work=Oracle Technology Network |publisher=Oracle |date=July 2006 |accessdate=12 March 2012}}</ref>\n\n<ref name=\"AutoNT-88\">{{cite web |url=https://www.python.org/dev/peps/pep-0327/ |title=PEP 327&nbsp;\u2013 Decimal Data Type |last=Batista |first=Facundo |date=17 October 2003 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=24 November 2008}}</ref>\n\n<ref name=\"AutoNT-89\">{{cite web |url=https://www.python.org/dev/peps/pep-0333/ |title=PEP 333&nbsp;\u2013 Python Web Server Gateway Interface v1.0 |last=Eby |first=Phillip J. |date=7 December 2003 |work=Python Enhancement Proposals |publisher=Python Software Foundation |accessdate=19 February 2012}}</ref>\n\n<ref name=\"AutoNT-90\">{{cite web |url=http://boo.codehaus.org/Gotchas+for+Python+Users |title=Gotchas for Python Users |work=boo.codehaus.org |publisher=Codehaus Foundation |accessdate=24 November 2008 |url-status=dead |archiveurl=https://web.archive.org/web/20081211062108/http://boo.codehaus.org/Gotchas+for+Python+Users |archivedate=11 December 2008 |df=dmy-all }}</ref>\n\n<ref name=\"AutoNT-91\">{{cite web |url=http://cobra-language.com/docs/acknowledgements/ |title=Acknowledgements |last=Esterbrook |first=Charles |work=cobra-language.com |publisher=Cobra Language |accessdate=7 April 2010}}</ref>\n\n<ref name=\"AutoNT-92\">{{cite web |url=http://cobra-language.com/docs/python/ |title=Comparison to Python |last=Esterbrook |first=Charles |work=cobra-language.com |publisher=Cobra Language |accessdate=7 April 2010}}</ref>\n\n<ref name=\"AutoNT-93\">{{cite web |url=http://wiki.ecmascript.org/doku.php?id=proposals:iterators_and_generators |archive-url=https://web.archive.org/web/20071020082650/http://wiki.ecmascript.org/doku.php?id=proposals:iterators_and_generators |url-status=dead |archive-date=20 October 2007 |title=Proposals: iterators and generators [ES4 Wiki&#93; |publisher=wiki.ecmascript.org |accessdate=24 November 2008 }}</ref>\n\n<ref name=\"AutoNT-94\">{{cite news |url=https://techcrunch.com/2009/11/10/google-go-language/ |title=Google's Go: A New Programming Language That's Python Meets C++ |last=Kincaid |first=Jason |date=10 November 2009 |work=TechCrunch |accessdate=29 January 2010}}</ref>\n\n<ref name=\"AutoNT-95\">{{cite web |last=Strachan |first=James |date=29 August 2003 |title=Groovy&nbsp;\u2013 the birth of a new dynamic language for the Java platform |url=http://radio.weblogs.com/0112098/2003/08/29.html}}</ref>\n\n<ref name=\"linuxdevcenter\">{{cite web |url=http://www.linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html |title=An Interview with the Creator of Ruby |publisher=Linuxdevcenter.com |date= |accessdate=3 December 2012}}</ref>\n\n<ref name=\"AutoNT-99\">{{cite web |url=http://www.tcl.tk/cgi-bin/tct/tip/3.html |title=TIP #3: TIP Format |last1=Kupries |first1=Andreas |last2=Fellows |first2=Donal K. |work=tcl.tk |publisher=Tcl Developer Xchange |date=14 September 2000 |accessdate=24 November 2008}}</ref>\n\n<ref name=\"AutoNT-100\">{{cite web |url=http://www.erlang.org/eeps/eep-0001.html |title=EEP 1: EEP Purpose and Guidelines |last1=Gustafsson |first1=Per |last2=Niskanen |first2=Raimo |publisher=erlang.org |date=29 January 2007 |accessdate=19 April 2011}}</ref>\n\n<!--  <ref name=\"AutoNT-101\">{{cite web |url=http://www.tiobe.com/index.php/content/paperinfo/tpci/ |title=TIOBE Programming Community Index for March 2012 |date=March 2012 |publisher=TIOBE Software |accessdate=25 March 2012}}</ref>-->\n\n<ref name=\"lj-bdfl-resignation\">{{cite magazine |url=https://www.linuxjournal.com/content/guido-van-rossum-stepping-down-role-pythons-benevolent-dictator-life |title=Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life |last=Fairchild |first=Carlie |magazine=Linux Journal |date=12 July 2018 |accessdate=13 July 2018}}</ref>\n\n}}\n\n===Sources===\n*{{cite web |url=https://wiki.python.org/moin/PythonForArtificialIntelligence |title=Python for Artificial Intelligence |publisher=Wiki.python.org |date=19 July 2012 |accessdate=3 December 2012 |url-status=dead |archiveurl=https://web.archive.org/web/20121101045354/http://wiki.python.org/moin/PythonForArtificialIntelligence |archivedate=1 November 2012 }}\n*{{cite journal |editor-last=Paine |editor-first=Jocelyn |title=AI in Python |journal=AI Expert Newsletter |publisher=Amzi! |date=August 2005 |url=http://www.ainewsletter.com/newsletters/aix_0508.htm#python_ai_ai |accessdate=11 February 2012}}\n*{{cite web |url=https://pypi.python.org/pypi/PyAIML |title=PyAIML 0.8.5 : Python Package Index |publisher=Pypi.python.org |accessdate=17 July 2013}}\n*{{cite book |title=Artificial Intelligence: A Modern Approach |last1=Russell |first1=Stuart J. |authorlink1=Stuart J. Russell |last2=Norvig |first2=Peter |authorlink2=Peter Norvig |lastauthoramp=y |edition=3rd |year=2009 |publisher=Prentice Hall |location=Upper Saddle River, NJ |isbn=978-0-13-604259-4 }}\n\n== Further reading ==\n<!-- THIS IS *NOT* A LIST OF ALL PYTHON BOOKS\nAccording to [[Wikipedia:Further reading]], criteria for inclusion includes:\n1. Should clearly qualify as WP:RS, as indicated by reviews and citations to it.\n...\n5. There should be guidelines on limiting the number of sources.\n6. To avoid spam, any book included should have received more than one good review in RS: newspapers and scholarly journals being the norm, and the clear balance of RS reviews should be positive. This would avoid self-publish spamming, POV pushing, and attempts by publishers to get books promoted through inclusion on Wikipedia. At the moment \"editorial recommendations\" as described in the manual smacks of OR.\n7. Neutrality on the part of editors is essential. In terms of major debates, items representing all major positions should be included, with annotations indicating the specific POV of each. We may have to work out rules where topic disputes are irreconcilable.\n-->\n\n* {{cite book |last=Downey |first=Allen B. |title=Think Python: How to Think Like a Computer Scientist |edition=Version 1.6.6 |date=May 2012 |isbn=978-0-521-72596-5 }}\n* {{cite news |url=http://www.computerworld.com.au/index.php/id;66665771 |title=The A-Z of Programming Languages: Python |last=Hamilton |first=Naomi |date=5 August 2008 |work=Computerworld |accessdate=31 March 2010 |url-status=dead |archiveurl=https://web.archive.org/web/20081229095320/http://www.computerworld.com.au/index.php/id%3B66665771 |archivedate=29 December 2008 |df=dmy-all }}\n* {{cite book |last=Lutz |first=Mark |title=Learning Python |publisher=O'Reilly Media |year=2013 |edition=5th |isbn=978-0-596-15806-4 }}\n* {{cite book |last=Pilgrim |first=Mark |title=Dive Into Python |publisher=Apress |year=2004 |isbn=978-1-59059-356-1 |url-access=registration |url=https://archive.org/details/diveintopython0000pilg }}\n* {{cite book |last=Pilgrim |first=Mark |title=Dive Into Python 3 |publisher=Apress |year=2009 |isbn=978-1-4302-2415-0 }}\n* {{cite book |last=Summerfield |first=Mark |title=Programming in Python 3 |publisher=Addison-Wesley Professional|year=2009|edition=2nd|isbn=978-0-321-68056-3 }}\n\n== External links ==\n<!-- ===================== {{No more links}} =========================\n| PLEASE BE CAUTIOUS IN ADDING MORE LINKS TO THIS ARTICLE. Wikipedia  |\n| is not a collection of links nor should it be used for advertising. |\n|                                                                     |\n| Excessive or inappropriate links WILL BE DELETED.                   |\n| See [[Wikipedia:External links]] & [[Wikipedia:Spam]] for details.  |\n|                                                                     |\n| If there are already plentiful links, please propose additions or   |\n| replacements on this article's discussion page, or submit your link |\n| to the relevant category at the Open Directory Project (dmoz.org)   |\n| and link back to that category using the {{Dmoz}} template.         |\n========================== {{No more links}} ====================== -->\n\n{{Sister project links |wikt=no |commons=Category:Python (programming language) |b=Python Programming |n=no |s=no  |voy=no |species=no |d=no }}\n* {{Official website}}\n* {{Curlie|Computers/Programming/Languages/Python}}\n\n{{Programming languages}}\n{{Python (programming language)}}\n{{Python web frameworks}}\n{{FOSS}}\n\n{{Authority control}}\n{{Good article}}\n\n[[Category:Programming languages]]\n[[Category:Class-based programming languages]]\n[[Category:Computational notebook]]\n[[Category:Computer science in the Netherlands]]\n[[Category:Cross-platform free software]]\n[[Category:Dutch inventions]]\n[[Category:Dynamically typed programming languages]]\n[[Category:Educational programming languages]]\n[[Category:High-level programming languages]]\n[[Category:Information technology in the Netherlands]]\n[[Category:Multi-paradigm programming languages]]\n[[Category:Object-oriented programming languages]]\n[[Category:Programming languages created in 1991]]\n[[Category:Python (programming language)| ]]\n[[Category:Scripting languages]]\n[[Category:Text-oriented programming languages]]\n[[Category:Cross-platform software]]\n[[Category:Articles with example Python code]]\n", "name_user": "Hooman Mallahzadeh", "label": "safe", "comment": "False comma positions in the Infobox, in \"Influenced\" and \"Influenced by\" parts corrected.", "url_page": "//en.wikipedia.org/wiki/Python_(programming_language)"}
