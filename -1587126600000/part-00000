{"title_page": "Half-precision floating-point format", "text_new": "In [[computing]], '''half precision''' is a [[binary (computing)|binary]] [[floating-point]] [[computer number format]] that occupies [[16 bit]]s (two bytes in modern computers) in [[computer memory]].\n\nIn the [[IEEE 754-2008]] standard, the 16-bit [[radix|base-2]] format is referred to as '''binary16'''. It is intended for storage of floating-point values in applications where higher precision is not essential for performing arithmetic computations.\n\nAlthough implementations of the IEEE Half-precision floating point are relatively new, several earlier 16-bit floating point formats have existed including that of Hitachi's HD61810 DSP<ref>{{cite web|url=https://archive.org/details/bitsavers_hitachidatlSignalProcessorUsersManual_4735688 |title=hitachi :: dataBooks :: HD61810 Digital Signal Processor Users Manual |website=Archive.org |date= |accessdate=2017-07-14}}</ref> of 1982, Scott's WIF<ref>{{cite journal|last1=Scott|first1=Thomas J.|title=Mathematics and Computer Science at Odds over Real Numbers|journal=SIGCSE '91 Proceedings of the twenty-second SIGCSE technical symposium on Computer science education|date=March 1991|volume=23|issue=1|pages=130\u2013139|url=https://dl.acm.org/citation.cfm?id=107029}}</ref> and the [[3dfx Interactive|3dfx Voodoo Graphics processor]].<ref>{{cite web|url=http://www.gamers.org/dEngine/xf3D/glide/glidepgm.htm |title=/home/usr/bk/glide/docs2.3.1/GLIDEPGM.DOC |website=Gamers.org |date= |accessdate=2017-07-14}}</ref>\n\n[[Nvidia]] and [[Microsoft]] defined the '''half''' [[datatype]] in the [[Cg (programming language)|Cg language]], released in early 2002, and implemented it in silicon in the [[GeForce FX]], released in late 2002.<ref>{{cite web|title=vs_2_sw|url=https://developer.download.nvidia.com/cg/vs_2_sw.html|website=Cg 3.1 Toolkit Documentation|publisher=Nvidia|accessdate=17 August 2016}}</ref> [[Industrial Light & Magic|ILM]] was searching for an image format that could handle a wide [[dynamic range]], but without the hard drive and memory cost of floating-point representations that are commonly used for floating-point computation (single and double precision).<ref name=\"exr\">{{cite web|url=http://www.openexr.com/about.html |title=OpenEXR |publisher=OpenEXR |date= |accessdate=2017-07-14}}</ref> The hardware-accelerated programmable shading group led by John Airey at [[Silicon Graphics|SGI (Silicon Graphics)]] invented the s10e5 data type in 1997 as part of the 'bali' design effort. This is described in a [[SIGGRAPH]] 2000 paper<ref name=\"sgi\">{{cite web|url=https://people.csail.mit.edu/ericchan/bib/pdf/p425-peercy.pdf |format=PDF |title=Interactive Multi-Pass Programmable Shading |author1=Mark S. Peercy |author2=Marc Olano |author3=John Airey |author4=P. Jeffrey Ungar |website=People.csail.mit.edu |accessdate=2017-07-14}}</ref> (see section 4.3) and further documented in US patent 7518615.<ref name=\"patent\">{{cite web|url=https://www.google.com/patents/US7518615 |title=Patent US7518615 - Display system having floating point rasterization and floating point ... - Google Patents |website=Google.com |date= |accessdate=2017-07-14}}</ref>\n\nThis format is used in several [[computer graphics]] environments including [[MATLAB]], [[OpenEXR]], [[JPEG XR]], [[GIMP]], [[OpenGL]], [[Cg (programming language)|Cg]], [[Direct3D]], and [[D3DX]].  The advantage over 8-bit or 16-bit binary integers is that the increased [[dynamic range]] allows for more detail to be preserved in highlights and [[shadow]]s for images.  The advantage over 32-bit [[single-precision]] binary formats is that it requires half the storage and [[bandwidth (computers)|bandwidth]] (at the expense of precision and range).<ref name=\"exr\"/>\n\nThe [[F16C]] extension allows x86 processors to convert half-precision floats to and from [[Single-precision floating-point format|single-precision floats]].\n\nDepending on the computer half-precision can be over an order of magnitude faster than double precision, e.g. 37&nbsp;PFLOPS vs. for half 550&nbsp;\"AI-PFLOPS (Half Precision)\".<ref>{{Cite web|url=https://abci.ai/en/about_abci/|title=About ABCI - About ABCI {{!}} ABCI|website=abci.ai|access-date=2019-10-06}}</ref>\n\n{{Floating-point}}\n\n== IEEE 754 half-precision binary floating-point format: binary16 ==\n<!-- \"significand\", with a d at the end, is a technical term, please do not confuse with \"significant\" -->\n\nThe IEEE 754 standard specifies a '''binary16''' as having the following format:\n* [[Sign bit]]: 1 bit\n* [[Exponent]] width: 5 bits\n* [[Significand]] [[precision (arithmetic)|precision]]: 11 bits (10 explicitly stored)\n\nThe format is laid out as follows:\n\n[[File:IEEE 754r Half Floating Point Format.svg]]\n\nThe format is assumed to have an implicit lead bit with value 1 unless the exponent field is stored with all zeros. Thus only 10 bits of the [[significand]] appear in the memory format but the total precision is 11 bits. In IEEE 754 parlance, there are 10 bits of significand, but there are 11 bits of significand precision (log<sub>10</sub>(2<sup>11</sup>) \u2248 3.311 decimal digits, or 4 digits \u00b1 slightly less than 5 [[unit in the last place|units in the last place]]).\n\n=== Exponent encoding ===\nThe half-precision binary floating-point exponent is encoded using an [[offset-binary]] representation, with the zero offset being 15; also known as exponent bias in the IEEE 754 standard.\n\n* E<sub>min</sub> = 00001<sub>2</sub> \u2212 01111<sub>2</sub> = \u221214\n* E<sub>max</sub> = 11110<sub>2</sub> \u2212 01111<sub>2</sub> = 15\n* [[Exponent bias]] = 01111<sub>2</sub> = 15\n\nThus, as defined by the offset binary representation, in order to get the true exponent the offset of 15 has to be subtracted from the stored exponent.\n\nThe stored exponents 00000<sub>2</sub> and 11111<sub>2</sub> are interpreted specially.\n\n{|class=\"wikitable\" style=\"text-align:center\"\n|-\n! Exponent !! Significand = zero !! Significand \u2260 zero !! Equation\n|-\n| 00000<sub>2</sub> || [[0 (number)|zero]], [[\u22120]] || [[subnormal numbers]] || (\u22121)<sup>signbit</sup> \u00d7 2<sup>\u221214</sup> \u00d7 0.significantbits<sub>2</sub>\n|-\n| 00001<sub>2</sub>, ..., 11110<sub>2</sub> ||colspan=2| normalized value || (\u22121)<sup>signbit</sup> \u00d7 2<sup>exponent\u221215</sup> \u00d7 1.significantbits<sub>2</sub>\n|-\n| 11111<sub>2</sub> || \u00b1[[infinity]] || [[NaN]] (quiet, signalling) ||\n|}\n\nThe minimum strictly positive (subnormal) value is\n2<sup>\u221224</sup> \u2248 5.96 \u00d7 10<sup>\u22128</sup>.\nThe minimum positive normal value is 2<sup>\u221214</sup> \u2248 6.10 \u00d7 10<sup>\u22125</sup>.\nThe maximum representable value is (2\u22122<sup>\u221210</sup>) \u00d7 2<sup>15</sup> = 65504.\n\n=== Half precision examples ===\nThese examples are given in bit representation\nof the floating-point value. This includes the sign bit, (biased) exponent, and significand.\n\n 0 00000 1111111111<sub>2</sub> = 0001<sub>16</sub> = <math>2^{-14} \\times (0 +\\frac{1}{1024})</math> \u2248 0.000000059605\n                               (smallest positive subnormal number)\n\n 0 00000 1111111111<sub>2</sub> = 03ff<sub>16</sub> = <math>2^{-14} \\times (0 +\\frac{1023}{1024})</math> \u2248 0.000060976\n                               (largest subnormal number)\n\n 0 00001 0000000000<sub>2</sub> = 0400<sub>16</sub> = <math>2^{-14} \\times (1 +\\frac{0}{1024})</math> \u2248 0.000061035\n                               (smallest positive normal number)\n\n 0 11110 1111111111<sub>2</sub> = 7bff<sub>16</sub> = <math>2^{15} \\times (1 +\\frac{1023}{1024})</math> = 65504\n                               (largest normal number)\n\n 0 01110 1111111111<sub>2</sub> = 3bff<sub>16</sub> = <math>2^{-1} \\times (1 +\\frac{1023}{1024})</math> \u2248 0.99951\n                               (largest number less than one)\n\n 0 01111 0000000000<sub>2</sub> = 3c00<sub>16</sub> = <math>2^{0} \\times (1 +\\frac{0}{1024})</math> = 1 \n                               (one)\n\n 0 01111 0000000001<sub>2</sub> = 3c01<sub>16</sub> = <math>2^{0} \\times (1 +\\frac{1}{1024})</math> \u2248 1.001\n                               (smallest number larger than one)\n\n 0 01101 0101010101<sub>2</sub> = 3555<sub>16</sub> = <math>2^{-2} \\times (1 +\\frac{341}{1024})</math> = 0.333251953125\n                               (equal to 1/3)\n\n 1 10000 0000000000<sub>2</sub> = c000<sub>16</sub> = \u22122\n \n 0 00000 0000000000<sub>2</sub> = 0000<sub>16</sub> = 0\n 1 00000 0000000000<sub>2</sub> = 8000<sub>16</sub> = \u22120\n \n 0 11111 0000000000<sub>2</sub> = 7c00<sub>16</sub> = infinity\n 1 11111 0000000000<sub>2</sub> = fc00<sub>16</sub> = \u2212infinity\n \n\n\nBy default, 1/3 rounds down like for [[double precision]], because of the odd number of bits in the significand. So the bits beyond the rounding point are <code>0101...</code> which is less than 1/2 of a [[unit in the last place]].\n\n=== Precision limitations on decimal values in [0, 1] ===\n* Decimals between 2<sup>\u221224</sup> (minimum positive subnormal) and 2<sup>\u221214</sup> (maximum subnormal): fixed interval 2<sup>\u221224</sup>\n* Decimals between 2<sup>\u221214</sup> (minimum positive normal) and 2<sup>\u221213</sup>: fixed interval 2<sup>\u221224</sup>\n* Decimals between 2<sup>\u221213</sup> and 2<sup>\u221212</sup>: fixed interval 2<sup>\u221223</sup>\n* Decimals between 2<sup>\u221212</sup> and 2<sup>\u221211</sup>: fixed interval 2<sup>\u221222</sup>\n* Decimals between 2<sup>\u221211</sup> and 2<sup>\u221210</sup>: fixed interval 2<sup>\u221221</sup>\n* Decimals between 2<sup>\u221210</sup> and 2<sup>\u22129</sup>: fixed interval 2<sup>\u221220</sup>\n* Decimals between 2<sup>\u22129</sup> and 2<sup>\u22128</sup>: fixed interval 2<sup>\u221219</sup>\n* Decimals between 2<sup>\u22128</sup> and 2<sup>\u22127</sup>: fixed interval 2<sup>\u221218</sup>\n* Decimals between 2<sup>\u22127</sup> and 2<sup>\u22126</sup>: fixed interval 2<sup>\u221217</sup>\n* Decimals between 2<sup>\u22126</sup> and 2<sup>\u22125</sup>: fixed interval 2<sup>\u221216</sup>\n* Decimals between 2<sup>\u22125</sup> and 2<sup>\u22124</sup>: fixed interval 2<sup>\u221215</sup>\n* Decimals between 2<sup>\u22124</sup> and 2<sup>\u22123</sup>: fixed interval 2<sup>\u221214</sup>\n* Decimals between 2<sup>\u22123</sup> and 2<sup>\u22122</sup>: fixed interval 2<sup>\u221213</sup>\n* Decimals between 2<sup>\u22122</sup> and 2<sup>\u22121</sup>: fixed interval 2<sup>\u221212</sup>\n* Decimals between 2<sup>\u22121</sup> and 2<sup>\u22120</sup>: fixed interval 2<sup>\u221211</sup>\n\n=== Precision limitations on decimal values in [1, 2048] ===\n* Decimals between 1 and 2: fixed interval 2<sup>\u221210</sup> (1+2<sup>\u221210</sup> is the next largest float after 1)\n* Decimals between 2 and 4: fixed interval 2<sup>\u22129</sup>\n* Decimals between 4 and 8: fixed interval 2<sup>\u22128</sup>\n* Decimals between 8 and 16: fixed interval 2<sup>\u22127</sup>\n* Decimals between 16 and 32: fixed interval 2<sup>\u22126</sup>\n* Decimals between 32 and 64: fixed interval 2<sup>\u22125</sup>\n* Decimals between 64 and 128: fixed interval 2<sup>\u22124</sup>\n* Decimals between 128 and 256: fixed interval 2<sup>\u22123</sup>\n* Decimals between 256 and 512: fixed interval 2<sup>\u22122</sup>\n* Decimals between 512 and 1024: fixed interval 2<sup>\u22121</sup>\n* Decimals between 1024 and 2048: fixed interval 2<sup>0</sup>\n\n=== Precision limitations on integer values ===\n* Integers between 0 and 2048 can be exactly represented (and also between \u22122048 and 0)\n* Integers between 2048 and 4096 round to a multiple of 2 (even number)\n* Integers between 4096 and 8192 round to a multiple of 4\n* Integers between 8192 and 16384 round to a multiple of 8\n* Integers between 16384 and 32768 round to a multiple of 16\n* Integers between 32768 and 65519 round to a multiple of 32<ref>{{cite web|title=Mediump float calculator|trans-title=|periodical=|publisher=|url=https://oletus.github.io/float16-simulator.js/|format=|accessdate=2016-07-26|last=|date=|year=|month=|day=|language=|pages=|quote=}}&#32;Half precision floating point calculator</ref>\n* Integers above 65519 are rounded to \"infinity\" if using round-to-even, or above 65535 if using round-to-zero, or above 65504 if using round-to-infinity.\n\n== ARM alternative half-precision ==\nARM processors support (via a floating point [[control register]] bit) an \"alternative half-precision\" format, which does away with the special case for an exponent value of 31 (11111<sub>2</sub>).<ref>{{cite book |chapter-url=http://infocenter.arm.com/help/topic/com.arm.doc.dui0205j/CIHGAECI.html |title=RealView Compilation Tools Compiler User Guide |chapter= Half-precision floating-point number support |date=10 December 2010 |accessdate=2015-05-05}}</ref>  It is almost identical to the IEEE format, but there is no encoding for infinity or NaNs; instead, an exponent of 31 encodes normalized numbers in the range 65536 to 131008.\n\n== See also ==\n* [[bfloat16 floating-point format]]: Alternative 16-bit floating-point format with 8 bits of exponent and 7 bits of mantissa\n* [[IEEE 754]]:  IEEE standard for floating-point arithmetic (IEEE 754)\n* [[ISO/IEC 10967]], Language Independent Arithmetic\n* [[Primitive data type]]\n* [[RGBE image format]]\n\n== References ==\n{{Reflist}}\n\n== Further reading ==\n* [https://www.khronos.org/registry/DataFormat/specs/1.2/dataformat.1.2.html#16bitfp Khronos Vulkan signed 16-bit floating point format]\n\n== External links ==\n{{External links|date=July 2017}}\n* [https://www.mrob.com/pub/math/floatformats.html#minifloat Minifloats] (in ''Survey of Floating-Point Formats'')\n* [http://www.openexr.org/ OpenEXR site]\n* [https://technet.microsoft.com/en-us/library/bb147247(v=vs.85).aspx Half precision constants] from [[D3DX]]\n* [https://web.archive.org/web/20170531074746/http://oss.sgi.com/projects/ogl-sample/registry/ARB/half_float_pixel.txt OpenGL treatment of half precision]\n* [http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf Fast Half Float Conversions]\n* [https://web.archive.org/web/20090419063321/http://www.analog.com/static/imported-files/processor_manuals/ADSP_2136x_PGR_rev1-1.pdf Analog Devices variant] (four-bit exponent)\n* [https://www.mathworks.com/matlabcentral/fileexchange/23173 C source code to convert between IEEE double, single, and half precision can be found here]\n* [https://stackoverflow.com/a/6162687/237321 Java source code for half-precision floating-point conversion]\n* [https://gcc.gnu.org/onlinedocs/gcc/Half-Precision.html  Half precision floating point for one of the extended GCC features]\n\n{{data types}}\n\n{{DEFAULTSORT:Half-Precision Floating-Point Format}}\n[[Category:Binary arithmetic]]\n[[Category:Floating point types]]\n", "text_old": "In [[computing]], '''half precision''' is a [[binary (computing)|binary]] [[floating-point]] [[computer number format]] that occupies [[16 bit]]s (two bytes in modern computers) in [[computer memory]].\n\nIn the [[IEEE 754-2008]] standard, the 16-bit [[radix|base-2]] format is referred to as '''binary16'''. It is intended for storage of floating-point values in applications where higher precision is not essential for performing arithmetic computations.\n\nAlthough implementations of the IEEE Half-precision floating point are relatively new, several earlier 16-bit floating point formats have existed including that of Hitachi's HD61810 DSP<ref>{{cite web|url=https://archive.org/details/bitsavers_hitachidatlSignalProcessorUsersManual_4735688 |title=hitachi :: dataBooks :: HD61810 Digital Signal Processor Users Manual |website=Archive.org |date= |accessdate=2017-07-14}}</ref> of 1982, Scott's WIF<ref>{{cite journal|last1=Scott|first1=Thomas J.|title=Mathematics and Computer Science at Odds over Real Numbers|journal=SIGCSE '91 Proceedings of the twenty-second SIGCSE technical symposium on Computer science education|date=March 1991|volume=23|issue=1|pages=130\u2013139|url=https://dl.acm.org/citation.cfm?id=107029}}</ref> and the [[3dfx Interactive|3dfx Voodoo Graphics processor]].<ref>{{cite web|url=http://www.gamers.org/dEngine/xf3D/glide/glidepgm.htm |title=/home/usr/bk/glide/docs2.3.1/GLIDEPGM.DOC |website=Gamers.org |date= |accessdate=2017-07-14}}</ref>\n\n[[Nvidia]] and [[Microsoft]] defined the '''half''' [[datatype]] in the [[Cg (programming language)|Cg language]], released in early 2002, and implemented it in silicon in the [[GeForce FX]], released in late 2002.<ref>{{cite web|title=vs_2_sw|url=https://developer.download.nvidia.com/cg/vs_2_sw.html|website=Cg 3.1 Toolkit Documentation|publisher=Nvidia|accessdate=17 August 2016}}</ref> [[Industrial Light & Magic|ILM]] was searching for an image format that could handle a wide [[dynamic range]], but without the hard drive and memory cost of floating-point representations that are commonly used for floating-point computation (single and double precision).<ref name=\"exr\">{{cite web|url=http://www.openexr.com/about.html |title=OpenEXR |publisher=OpenEXR |date= |accessdate=2017-07-14}}</ref> The hardware-accelerated programmable shading group led by John Airey at [[Silicon Graphics|SGI (Silicon Graphics)]] invented the s10e5 data type in 1997 as part of the 'bali' design effort. This is described in a [[SIGGRAPH]] 2000 paper<ref name=\"sgi\">{{cite web|url=https://people.csail.mit.edu/ericchan/bib/pdf/p425-peercy.pdf |format=PDF |title=Interactive Multi-Pass Programmable Shading |author1=Mark S. Peercy |author2=Marc Olano |author3=John Airey |author4=P. Jeffrey Ungar |website=People.csail.mit.edu |accessdate=2017-07-14}}</ref> (see section 4.3) and further documented in US patent 7518615.<ref name=\"patent\">{{cite web|url=https://www.google.com/patents/US7518615 |title=Patent US7518615 - Display system having floating point rasterization and floating point ... - Google Patents |website=Google.com |date= |accessdate=2017-07-14}}</ref>\n\nThis format is used in several [[computer graphics]] environments including [[MATLAB]], [[OpenEXR]], [[JPEG XR]], [[GIMP]], [[OpenGL]], [[Cg (programming language)|Cg]], [[Direct3D]], and [[D3DX]].  The advantage over 8-bit or 16-bit binary integers is that the increased [[dynamic range]] allows for more detail to be preserved in highlights and [[shadow]]s for images.  The advantage over 32-bit [[single-precision]] binary formats is that it requires half the storage and [[bandwidth (computers)|bandwidth]] (at the expense of precision and range).<ref name=\"exr\"/>\n\nThe [[F16C]] extension allows x86 processors to convert half-precision floats to and from [[Single-precision floating-point format|single-precision floats]].\n\nDepending on the computer half-precision can be over an order of magnitude faster than double precision, e.g. 37&nbsp;PFLOPS vs. for half 550&nbsp;\"AI-PFLOPS (Half Precision)\".<ref>{{Cite web|url=https://abci.ai/en/about_abci/|title=About ABCI - About ABCI {{!}} ABCI|website=abci.ai|access-date=2019-10-06}}</ref>\n\n{{Floating-point}}\n\n== IEEE 754 half-precision binary floating-point format: binary16 ==\n<!-- \"significand\", with a d at the end, is a technical term, please do not confuse with \"significant\" -->\n\nThe IEEE 754 standard specifies a '''binary16''' as having the following format:\n* [[Sign bit]]: 1 bit\n* [[Exponent]] width: 5 bits\n* [[Significand]] [[precision (arithmetic)|precision]]: 11 bits (10 explicitly stored)\n\nThe format is laid out as follows:\n\n[[File:IEEE 754r Half Floating Point Format.svg]]\n\nThe format is assumed to have an implicit lead bit with value 1 unless the exponent field is stored with all zeros. Thus only 10 bits of the [[significand]] appear in the memory format but the total precision is 11 bits. In IEEE 754 parlance, there are 10 bits of significand, but there are 11 bits of significand precision (log<sub>10</sub>(2<sup>11</sup>) \u2248 3.311 decimal digits, or 4 digits \u00b1 slightly less than 5 [[unit in the last place|units in the last place]]).\n\n=== Exponent encoding ===\nThe half-precision binary floating-point exponent is encoded using an [[offset-binary]] representation, with the zero offset being 15; also known as exponent bias in the IEEE 754 standard.\n\n* E<sub>min</sub> = 00001<sub>2</sub> \u2212 01111<sub>2</sub> = \u221214\n* E<sub>max</sub> = 11110<sub>2</sub> \u2212 01111<sub>2</sub> = 15\n* [[Exponent bias]] = 01111<sub>2</sub> = 15\n\nThus, as defined by the offset binary representation, in order to get the true exponent the offset of 15 has to be subtracted from the stored exponent.\n\nThe stored exponents 00000<sub>2</sub> and 11111<sub>2</sub> are interpreted specially.\n\n{|class=\"wikitable\" style=\"text-align:center\"\n|-\n! Exponent !! Significand = zero !! Significand \u2260 zero !! Equation\n|-\n| 00000<sub>2</sub> || [[0 (number)|zero]], [[\u22120]] || [[subnormal numbers]] || (\u22121)<sup>signbit</sup> \u00d7 2<sup>\u221214</sup> \u00d7 0.significantbits<sub>2</sub>\n|-\n| 00001<sub>2</sub>, ..., 11110<sub>2</sub> ||colspan=2| normalized value || (\u22121)<sup>signbit</sup> \u00d7 2<sup>exponent\u221215</sup> \u00d7 1.significantbits<sub>2</sub>\n|-\n| 11111<sub>2</sub> || \u00b1[[infinity]] || [[NaN]] (quiet, signalling) ||\n|}\n\nThe minimum strictly positive (subnormal) value is\n2<sup>\u221224</sup> \u2248 5.96 \u00d7 10<sup>\u22128</sup>.\nThe minimum positive normal value is 2<sup>\u221214</sup> \u2248 6.10 \u00d7 10<sup>\u22125</sup>.\nThe maximum representable value is (2\u22122<sup>\u221210</sup>) \u00d7 2<sup>15</sup> = 65504.\n\n=== Half precision examples ===\nThese examples are given in bit representation\nof the floating-point value. This includes the sign bit, (biased) exponent, and significand.\n\n 0 00000 0000000001<sub>2</sub> = 0001<sub>16</sub> = <math>2^{-14} \\times (0 +\\frac{1}{1024})</math> \u2248 0.000000059605\n                               (smallest positive subnormal number)\n\n 0 00000 1111111111<sub>2</sub> = 03ff<sub>16</sub> = <math>2^{-14} \\times (0 +\\frac{1023}{1024})</math> \u2248 0.000060976\n                               (largest subnormal number)\n\n 0 00001 0000000000<sub>2</sub> = 0400<sub>16</sub> = <math>2^{-14} \\times (1 +\\frac{0}{1024})</math> \u2248 0.000061035\n                               (smallest positive normal number)\n\n 0 11110 1111111111<sub>2</sub> = 7bff<sub>16</sub> = <math>2^{15} \\times (1 +\\frac{1023}{1024})</math> = 65504\n                               (largest normal number)\n\n 0 01110 1111111111<sub>2</sub> = 3bff<sub>16</sub> = <math>2^{-1} \\times (1 +\\frac{1023}{1024})</math> \u2248 0.99951\n                               (largest number less than one)\n\n 0 01111 0000000000<sub>2</sub> = 3c00<sub>16</sub> = <math>2^{0} \\times (1 +\\frac{0}{1024})</math> = 1 \n                               (one)\n\n 0 01111 0000000001<sub>2</sub> = 3c01<sub>16</sub> = <math>2^{0} \\times (1 +\\frac{1}{1024})</math> \u2248 1.001\n                               (smallest number larger than one)\n\n 0 01101 0101010101<sub>2</sub> = 3555<sub>16</sub> = <math>2^{-2} \\times (1 +\\frac{341}{1024})</math> = 0.333251953125\n                               (equal to 1/3)\n\n 1 10000 0000000000<sub>2</sub> = c000<sub>16</sub> = \u22122\n \n 0 00000 0000000000<sub>2</sub> = 0000<sub>16</sub> = 0\n 1 00000 0000000000<sub>2</sub> = 8000<sub>16</sub> = \u22120\n \n 0 11111 0000000000<sub>2</sub> = 7c00<sub>16</sub> = infinity\n 1 11111 0000000000<sub>2</sub> = fc00<sub>16</sub> = \u2212infinity\n \n\n\nBy default, 1/3 rounds down like for [[double precision]], because of the odd number of bits in the significand. So the bits beyond the rounding point are <code>0101...</code> which is less than 1/2 of a [[unit in the last place]].\n\n=== Precision limitations on decimal values in [0, 1] ===\n* Decimals between 2<sup>\u221224</sup> (minimum positive subnormal) and 2<sup>\u221214</sup> (maximum subnormal): fixed interval 2<sup>\u221224</sup>\n* Decimals between 2<sup>\u221214</sup> (minimum positive normal) and 2<sup>\u221213</sup>: fixed interval 2<sup>\u221224</sup>\n* Decimals between 2<sup>\u221213</sup> and 2<sup>\u221212</sup>: fixed interval 2<sup>\u221223</sup>\n* Decimals between 2<sup>\u221212</sup> and 2<sup>\u221211</sup>: fixed interval 2<sup>\u221222</sup>\n* Decimals between 2<sup>\u221211</sup> and 2<sup>\u221210</sup>: fixed interval 2<sup>\u221221</sup>\n* Decimals between 2<sup>\u221210</sup> and 2<sup>\u22129</sup>: fixed interval 2<sup>\u221220</sup>\n* Decimals between 2<sup>\u22129</sup> and 2<sup>\u22128</sup>: fixed interval 2<sup>\u221219</sup>\n* Decimals between 2<sup>\u22128</sup> and 2<sup>\u22127</sup>: fixed interval 2<sup>\u221218</sup>\n* Decimals between 2<sup>\u22127</sup> and 2<sup>\u22126</sup>: fixed interval 2<sup>\u221217</sup>\n* Decimals between 2<sup>\u22126</sup> and 2<sup>\u22125</sup>: fixed interval 2<sup>\u221216</sup>\n* Decimals between 2<sup>\u22125</sup> and 2<sup>\u22124</sup>: fixed interval 2<sup>\u221215</sup>\n* Decimals between 2<sup>\u22124</sup> and 2<sup>\u22123</sup>: fixed interval 2<sup>\u221214</sup>\n* Decimals between 2<sup>\u22123</sup> and 2<sup>\u22122</sup>: fixed interval 2<sup>\u221213</sup>\n* Decimals between 2<sup>\u22122</sup> and 2<sup>\u22121</sup>: fixed interval 2<sup>\u221212</sup>\n* Decimals between 2<sup>\u22121</sup> and 2<sup>\u22120</sup>: fixed interval 2<sup>\u221211</sup>\n\n=== Precision limitations on decimal values in [1, 2048] ===\n* Decimals between 1 and 2: fixed interval 2<sup>\u221210</sup> (1+2<sup>\u221210</sup> is the next largest float after 1)\n* Decimals between 2 and 4: fixed interval 2<sup>\u22129</sup>\n* Decimals between 4 and 8: fixed interval 2<sup>\u22128</sup>\n* Decimals between 8 and 16: fixed interval 2<sup>\u22127</sup>\n* Decimals between 16 and 32: fixed interval 2<sup>\u22126</sup>\n* Decimals between 32 and 64: fixed interval 2<sup>\u22125</sup>\n* Decimals between 64 and 128: fixed interval 2<sup>\u22124</sup>\n* Decimals between 128 and 256: fixed interval 2<sup>\u22123</sup>\n* Decimals between 256 and 512: fixed interval 2<sup>\u22122</sup>\n* Decimals between 512 and 1024: fixed interval 2<sup>\u22121</sup>\n* Decimals between 1024 and 2048: fixed interval 2<sup>0</sup>\n\n=== Precision limitations on integer values ===\n* Integers between 0 and 2048 can be exactly represented (and also between \u22122048 and 0)\n* Integers between 2048 and 4096 round to a multiple of 2 (even number)\n* Integers between 4096 and 8192 round to a multiple of 4\n* Integers between 8192 and 16384 round to a multiple of 8\n* Integers between 16384 and 32768 round to a multiple of 16\n* Integers between 32768 and 65519 round to a multiple of 32<ref>{{cite web|title=Mediump float calculator|trans-title=|periodical=|publisher=|url=https://oletus.github.io/float16-simulator.js/|format=|accessdate=2016-07-26|last=|date=|year=|month=|day=|language=|pages=|quote=}}&#32;Half precision floating point calculator</ref>\n* Integers above 65519 are rounded to \"infinity\" if using round-to-even, or above 65535 if using round-to-zero, or above 65504 if using round-to-infinity.\n\n== ARM alternative half-precision ==\nARM processors support (via a floating point [[control register]] bit) an \"alternative half-precision\" format, which does away with the special case for an exponent value of 31 (11111<sub>2</sub>).<ref>{{cite book |chapter-url=http://infocenter.arm.com/help/topic/com.arm.doc.dui0205j/CIHGAECI.html |title=RealView Compilation Tools Compiler User Guide |chapter= Half-precision floating-point number support |date=10 December 2010 |accessdate=2015-05-05}}</ref>  It is almost identical to the IEEE format, but there is no encoding for infinity or NaNs; instead, an exponent of 31 encodes normalized numbers in the range 65536 to 131008.\n\n== See also ==\n* [[bfloat16 floating-point format]]: Alternative 16-bit floating-point format with 8 bits of exponent and 7 bits of mantissa\n* [[IEEE 754]]:  IEEE standard for floating-point arithmetic (IEEE 754)\n* [[ISO/IEC 10967]], Language Independent Arithmetic\n* [[Primitive data type]]\n* [[RGBE image format]]\n\n== References ==\n{{Reflist}}\n\n== Further reading ==\n* [https://www.khronos.org/registry/DataFormat/specs/1.2/dataformat.1.2.html#16bitfp Khronos Vulkan signed 16-bit floating point format]\n\n== External links ==\n{{External links|date=July 2017}}\n* [https://www.mrob.com/pub/math/floatformats.html#minifloat Minifloats] (in ''Survey of Floating-Point Formats'')\n* [http://www.openexr.org/ OpenEXR site]\n* [https://technet.microsoft.com/en-us/library/bb147247(v=vs.85).aspx Half precision constants] from [[D3DX]]\n* [https://web.archive.org/web/20170531074746/http://oss.sgi.com/projects/ogl-sample/registry/ARB/half_float_pixel.txt OpenGL treatment of half precision]\n* [http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf Fast Half Float Conversions]\n* [https://web.archive.org/web/20090419063321/http://www.analog.com/static/imported-files/processor_manuals/ADSP_2136x_PGR_rev1-1.pdf Analog Devices variant] (four-bit exponent)\n* [https://www.mathworks.com/matlabcentral/fileexchange/23173 C source code to convert between IEEE double, single, and half precision can be found here]\n* [https://stackoverflow.com/a/6162687/237321 Java source code for half-precision floating-point conversion]\n* [https://gcc.gnu.org/onlinedocs/gcc/Half-Precision.html  Half precision floating point for one of the extended GCC features]\n\n{{data types}}\n\n{{DEFAULTSORT:Half-Precision Floating-Point Format}}\n[[Category:Binary arithmetic]]\n[[Category:Floating point types]]\n", "name_user": "115.93.250.114", "label": "unsafe", "comment": "(\u2192\u200eHalf precision examples)", "url_page": "//en.wikipedia.org/wiki/Half-precision_floating-point_format"}
{"title_page": "Mark Johnson (musician)", "text_new": "{{Infobox musical artist\n| name                = Mark Johnson\n| image               = Mark_Johnson_at_home_in_Dnnellon.jpg\n| caption             = Mark Johnson \n| image_size          = 250\n| landscape           = yes\n| background          = solo_banjo \n| birth_name    = Mark Stephen  Johnson\n| birth_date          = {{birth date and age|1955|05|20}}\n| birth_place         = [[Yorktown Heights, New York]], United States\n| genre               = [[Americana (music)|Americana]], [[Bluegrass music|bluegrass]], [[Folk music|folk]]\n| occupation          = Musician, Songwriter, Composer\n| instrument          = Banjo\n| years_active        = 1981\u2013present\n| label               = [[Pinecastle Records|Pinecastle]], [[Mountain Home Records|Mountain Home]], Bangtown Records\n| associated_acts     = [[The Rice Brothers]], Emory Lester}}\n\n'''Mark Johnson''' (born May 20, 1955) is an American banjoist credited with creating a style of five string banjo playing called Clawgrass, which incorporates bluegrass and clawhammer banjo styles as well as bluegrass guitar styles  and bluegrass ensamble techniques.<ref>[https://www.heraldtribune.com/news/20180110/clawgrass-returns-to-fogartyville-with-mark-johnson-and-emory-lester \"Clawgrass returns to Fogartyville with Mark Johnson and Emory Lester\"]. ''Herald Tribune'', Jan 10, 2018, by Vicky Dean</ref> He was nominated by the [[International Bluegrass Music Association]] (IBMA) for a 2007  Instrumental Album of the Year  award with Emory Lester,<ref name=schl>{{cite news | url=https://www.ocala.com/article/LK/20071004/News/604242466/OS| title=Dunnellon banjo player guards Levy, makes sweet music| newspaper=Ocala Star Banner| date=October 4, 2007|  author=SCHLENKER, DAVE}}</ref> and presented with the 2012 Steve Martin prize for excellence in banjo and bluegrass music.<ref>{{cite news | url=http://artsbeat.blogs.nytimes.com/2012/09/20/steve-martin-awards-third-annual-bluegrass-prize/| title=Steve Martin Awards Third Annual Bluegrass Prize| newspaper=The New York Times| date=September 20, 2012| accessdate=January 24, 2013| author=Itzkoff, Dave}}</ref> He is a spokesman for the Deering Banjo Co., which named two Clawgrass banjo models banjos after him.<ref name=sch>[https://www.gainesville.com/article/LK/20060916/News/604171936/GS \"Hometown banjo player Mark Johnson keeps his day job\"]. ''Gainesville Sun'', Sep 16, 2006. By Dave Schlenker</ref>\n[[File:Mark Johnson Promotional Phote.jpg|thumb|Mark Johnson Dunnellon FL]]\n\n==Early life and education==\nJohnson was raised in Yorktown Heights, New York and started playing banjo at the age of 15. In 1971, he began his first banjo lessons with Jay Ungar in Garrison, NY. While studying with Ungar he learning the \"Frailing Style\" of five string banjo playing.<ref name=deyoung>[https://www.connectsavannah.com/savannah/the-banjo-to-beat/Content?oid=2136044 \"The banjo to beat : Mark Johnson is the unassailable King of Clawgrass\"]. ''Connect Savannah'', November 29, 2011 By Bill DeYoung</ref> Johnson is self taught in the Scruggs and Melodic style of bluegrass banjo playing.<ref>{{cite web | url=https://banjonews.com/2013-03/mark_johnson.html| title=Interview with Mark Johnson|work=Banjo Newsletter|date=March 2013|  author=Levy, Chuck}}</ref>\n\n==Career==\n\nJohnson moved to Crystal River, FL in 1981 to work as a contract Health Physics Technician at a local electric utility. It is at this local utility that he met Herb Rice, [[Larry Rice|Larry Rice]] and Ronnie Rice.<ref>{{cite news | url=https://www.gainesville.com/news/20071006/dunnellon-banjo-player-just-happy-to-be-nominated| title=Dunnellon banjo player just happy to be nominated| newspaper=Gainesville Sun| date=October 6, 2007|  author=SCHLENKER, DAVE}}</ref>\nThe Rice family included him into their musical activities, where Johnson began to apply and adjust his clawhammer banjo techniques to work in bluegrass and duet playing ensembles. \n\nJohnson continued to work with Tony and Larry Rice from 1984 to 1993. It was during this time that Tony Rice taught Johnson critical techniques in performance art, writing, creating music and recording. This led to recording several duets and bluegrass ensemble covers and original compositions on Johnson's first self produced CD entitled ''Clawgrass - Mark Johnson with The Rice Brothers and Friends'' on the Bang label in 1994.\n\nJohnson later performed extensively with mandolinist Emory Lester; the duo released their first album, ''Acoustic Campaign'', in 2002, and over the years have released four more albums together.<ref name=deyoung /> \n\nIn 2012, while working during the week as emergency management director in Florida, Johnson was presented with the Steve Martin Prize for Excellence in Banjo and Bluegrass.<ref name=lawless>[https://bluegrasstoday.com/clawgrass-goes-to-the-opry/ \"Clawgrass goes to the Opry\"]. ''Bluegrass Today'', March 3, 2017 by John Lawless</ref><ref>[https://www.tampabay.com/news/humaninterest/dunnellon-banjo-player-to-play-on-letterman-with-steve-martin/1253093/ \"Dunnellon banjo player to play on Letterman with Steve Martin\"]. ''Tampa Bay Times'', Sep. 24, 2012</ref> The next year he released an album, ''1863'', with Emory Liester.<ref>[https://bluegrasstoday.com/1863-from-mark-johnson-emory-lester/ \"1863 from Mark Johnson & Emory Lester\"]. ''Bluegrass Today'', September 5, 2013 by John Lawless</ref>\n\nIn 2017, Johnson and [[Mike Snider (musician)|banjoist MIke Snider]] performed together at the Grand Ole Opry in Nashville.<ref name=lawless />\n\n==Awards==\n* [[Steve Martin Prize for Excellence in Banjo and Bluegrass]], 2012.<ref>{{cite web | url=https://banjo.stevemartin.com/winner/mark-johnson/| title=Steve Martin Prize for Excellence in Banjo and Bluegrass|}}</ref><ref>{{cite news | url=http://artsbeat.blogs.nytimes.com/2012/09/20/steve-martin-awards-third-annual-bluegrass-prize/| title=Steve Martin Awards Third Annual Bluegrass Prize| newspaper=The New York Times| date=September 20, 2012| author=Itzkoff, Dave}}</ref>\n*Nominated for a 2007  [[International Bluegrass Music Awards|International Bluegrass Music Award]] for instrumental album of the year, with Emory Lester, their CD, \u201cAcoustic Rising,\u201d for instrumental album of the year.<ref name=schl />\n\n==Discography==\n{| class=\"wikitable\"\n!rowspan=\"1\"| Year\n!rowspan=\"1\"| Title\n!rowspan=\"1\"| Label\n|-\n|align=\"center\"|1994\n|align=\"left\"|''Clawgrass Mark Johnson with the Rice Brothers and Friends ''\n|align=\"left\"|Bang 1\n|-\n|align=\"center\"|1998\n|align=\"left\"|''Mark Johnson & Clawgrass - Bridging the Gap''\n|align=\"left\"|[[Pinecastle]]\n|-\n|align=\"center\"|2002\n|align=\"left\"|''Mark Johnson & Emory Lester -Acoustic Campaign''\n|align=\"left\"|Bangtown Records\n|-\n|align=\"center\"|2006\n|align=\"left\"|''Mark Johnson & Emory Lester -Acoustic Rising''\n|align=\"left\"|[[Mountain Home Records|Mountain Home]]\n|- \n|align=\"center\"|2010\n|align=\"left\"|''Mark Johnson & Emory Lester -Acoustic Vision''\n|align=\"left\"|Bangtown Records\n|- \n|align=\"center\"|2013\n|align=\"left\"|''Mark Johnson & Emory Lester -1863''\n|align=\"left\"|Bangtown Records\n|- \n|align=\"center\"|2017\n|align=\"left\"|''Mark Johnson & Emory Lester -Acoustic Milestones (20 Years)''\n|align=\"left\"|Bangtown Records\n|}\n\n== References ==\n\n{{Reflist}}\n\n== External links ==\n* [http://www.clawgrass.com Mark Johnson Clawgrass Banjo]\n* [https://www.facebook.com/MarkJohnsonClawgrass/ Mark Johnson Clawgrass Facebook]\n* [https://www.youtube.com/channel/UCaLiH3w3okr86gjfxT1iMUQ Mark Johnson Youtube]\n\n<!--- Categories --->\n\n\n{{DEFAULTSORT:Johnson, Mark}}\n[[Category:1955 births]]\n[[Category:Living people]]\n[[Category:American banjoists]]\n", "text_old": "{{Infobox musical artist\n| name                = Mark Johnson\n| image               = Mark_Johnson_at_home_in_Dnnellon.jpg\n| caption             = Mark Johnson \n| image_size          = 250\n| landscape           = yes\n| background          = solo_banjo \n| birth_name    = Mark Stephen  Johnson\n| birth_date          = {{birth date and age|1955|05|20}}\n| birth_place         = [[Yorktown Heights, New York]], United States\n| genre               = [[Americana (music)|Americana]], [[Bluegrass music|bluegrass]], [[Folk music|folk]]\n| occupation          = Musician, Songwriter, Composer\n| instrument          = Banjo\n| years_active        = 1981\u2013present\n| label               = [[Pinecastle Records|Pinecastle]], [[Mountain Home Records|Mountain Home]], Bangtown Records\n| associated_acts     = [[The Rice Brothers]], Emory Lester}}\n\n'''Mark Johnson''' (born May 20, 1955) is an American banjoist credited with creating a style of five string banjo playing called Clawgrass, which incorporates bluegrass and clawhammer banjo styles as well as bluegrass guitar styles  and bluegrass ensamble techniques.<ref>[https://www.heraldtribune.com/news/20180110/clawgrass-returns-to-fogartyville-with-mark-johnson-and-emory-lester \"Clawgrass returns to Fogartyville with Mark Johnson and Emory Lester\"]. ''Herald Tribune'', Jan 10, 2018, by Vicky Dean</ref> He was nominated by the International Bluegrass Music Association (IBMA) for a 2007  Instrumental Album of the Year  award with Emory Lester,<ref name=schl>{{cite news | url=https://www.ocala.com/article/LK/20071004/News/604242466/OS| title=Dunnellon banjo player guards Levy, makes sweet music| newspaper=Ocala Star Banner| date=October 4, 2007|  author=SCHLENKER, DAVE}}</ref> and presented with the 2012 Steve Martin prize for excellence in banjo and bluegrass music.<ref>{{cite news | url=http://artsbeat.blogs.nytimes.com/2012/09/20/steve-martin-awards-third-annual-bluegrass-prize/| title=Steve Martin Awards Third Annual Bluegrass Prize| newspaper=The New York Times| date=September 20, 2012| accessdate=January 24, 2013| author=Itzkoff, Dave}}</ref> He is a spokesman for the Deering Banjo Co., which named two Clawgrass banjo models banjos after him.<ref name=sch>[https://www.gainesville.com/article/LK/20060916/News/604171936/GS \"Hometown banjo player Mark Johnson keeps his day job\"]. ''Gainesville Sun'', Sep 16, 2006. By Dave Schlenker</ref>\n[[File:Mark Johnson Promotional Phote.jpg|thumb|Mark Johnson Dunnellon FL]]\n\n==Early life and education==\nJohnson was raised in Yorktown Heights, New York and started playing banjo at the age of 15. In 1971, he began his first banjo lessons with Jay Ungar in Garrison, NY. While studying with Ungar he learning the \"Frailing Style\" of five string banjo playing.<ref name=deyoung>[https://www.connectsavannah.com/savannah/the-banjo-to-beat/Content?oid=2136044 \"The banjo to beat : Mark Johnson is the unassailable King of Clawgrass\"]. ''Connect Savannah'', November 29, 2011 By Bill DeYoung</ref> Johnson is self taught in the Scruggs and Melodic style of bluegrass banjo playing.<ref>{{cite web | url=https://banjonews.com/2013-03/mark_johnson.html| title=Interview with Mark Johnson|work=Banjo Newsletter|date=March 2013|  author=Levy, Chuck}}</ref>\n\n==Career==\n\nJohnson moved to Crystal River, FL in 1981 to work as a contract Health Physics Technician at a local electric utility. It is at this local utility that he met Herb Rice, [[Larry Rice|Larry Rice]] and Ronnie Rice.<ref>{{cite news | url=https://www.gainesville.com/news/20071006/dunnellon-banjo-player-just-happy-to-be-nominated| title=Dunnellon banjo player just happy to be nominated| newspaper=Gainesville Sun| date=October 6, 2007|  author=SCHLENKER, DAVE}}</ref>\nThe Rice family included him into their musical activities, where Johnson began to apply and adjust his clawhammer banjo techniques to work in bluegrass and duet playing ensembles. \n\nJohnson continued to work with Tony and Larry Rice from 1984 to 1993. It was during this time that Tony Rice taught Johnson critical techniques in performance art, writing, creating music and recording. This led to recording several duets and bluegrass ensemble covers and original compositions on Johnson's first self produced CD entitled ''Clawgrass - Mark Johnson with The Rice Brothers and Friends'' on the Bang label in 1994.\n\nJohnson later performed extensively with mandolinist Emory Lester; the duo released their first album, ''Acoustic Campaign'', in 2002, and over the years have released four more albums together.<ref name=deyoung /> \n\nIn 2012, while working during the week as emergency management director in Florida, Johnson was presented with the Steve Martin Prize for Excellence in Banjo and Bluegrass.<ref name=lawless>[https://bluegrasstoday.com/clawgrass-goes-to-the-opry/ \"Clawgrass goes to the Opry\"]. ''Bluegrass Today'', March 3, 2017 by John Lawless</ref><ref>[https://www.tampabay.com/news/humaninterest/dunnellon-banjo-player-to-play-on-letterman-with-steve-martin/1253093/ \"Dunnellon banjo player to play on Letterman with Steve Martin\"]. ''Tampa Bay Times'', Sep. 24, 2012</ref> The next year he released an album, ''1863'', with Emory Liester.<ref>[https://bluegrasstoday.com/1863-from-mark-johnson-emory-lester/ \"1863 from Mark Johnson & Emory Lester\"]. ''Bluegrass Today'', September 5, 2013 by John Lawless</ref>\n\nIn 2017, Johnson and [[Mike Snider (musician)|banjoist MIke Snider]] performed together at the Grand Ole Opry in Nashville.<ref name=lawless />\n\n==Awards==\n* [[Steve Martin Prize for Excellence in Banjo and Bluegrass]], 2012.<ref>{{cite web | url=https://banjo.stevemartin.com/winner/mark-johnson/| title=Steve Martin Prize for Excellence in Banjo and Bluegrass|}}</ref><ref>{{cite news | url=http://artsbeat.blogs.nytimes.com/2012/09/20/steve-martin-awards-third-annual-bluegrass-prize/| title=Steve Martin Awards Third Annual Bluegrass Prize| newspaper=The New York Times| date=September 20, 2012| author=Itzkoff, Dave}}</ref>\n*Nominated for a 2007  [[International Bluegrass Music Awards|International Bluegrass Music Award]] for instrumental album of the year, with Emory Lester, their CD, \u201cAcoustic Rising,\u201d for instrumental album of the year.<ref name=schl />\n\n==Discography==\n{| class=\"wikitable\"\n!rowspan=\"1\"| Year\n!rowspan=\"1\"| Title\n!rowspan=\"1\"| Label\n|-\n|align=\"center\"|1994\n|align=\"left\"|''Clawgrass Mark Johnson with the Rice Brothers and Friends ''\n|align=\"left\"|Bang 1\n|-\n|align=\"center\"|1998\n|align=\"left\"|''Mark Johnson & Clawgrass - Bridging the Gap''\n|align=\"left\"|[[Pinecastle]]\n|-\n|align=\"center\"|2002\n|align=\"left\"|''Mark Johnson & Emory Lester -Acoustic Campaign''\n|align=\"left\"|Bangtown Records\n|-\n|align=\"center\"|2006\n|align=\"left\"|''Mark Johnson & Emory Lester -Acoustic Rising''\n|align=\"left\"|[[Mountain Home Records|Mountain Home]]\n|- \n|align=\"center\"|2010\n|align=\"left\"|''Mark Johnson & Emory Lester -Acoustic Vision''\n|align=\"left\"|Bangtown Records\n|- \n|align=\"center\"|2013\n|align=\"left\"|''Mark Johnson & Emory Lester -1863''\n|align=\"left\"|Bangtown Records\n|- \n|align=\"center\"|2017\n|align=\"left\"|''Mark Johnson & Emory Lester -Acoustic Milestones (20 Years)''\n|align=\"left\"|Bangtown Records\n|}\n\n== References ==\n\n{{Reflist}}\n\n== External links ==\n* [http://www.clawgrass.com Mark Johnson Clawgrass Banjo]\n* [https://www.facebook.com/MarkJohnsonClawgrass/ Mark Johnson Clawgrass Facebook]\n* [https://www.youtube.com/channel/UCaLiH3w3okr86gjfxT1iMUQ Mark Johnson Youtube]\n\n<!--- Categories --->\n\n\n{{DEFAULTSORT:Johnson, Mark}}\n[[Category:1955 births]]\n[[Category:Living people]]\n[[Category:American banjoists]]\n", "name_user": "Curb Safe Charmer", "label": "safe", "comment": "International Bluegrass Music Association wikilink", "url_page": "//en.wikipedia.org/wiki/Mark_Johnson_(musician)"}
