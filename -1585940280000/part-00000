{"title_page": "Tibor Zs\u00edros", "text_new": "{{short description|Hungarian basketball player}}\n{{MedalTableTop}}\n{{MedalCountry | {{HUN}} }}\n{{MedalSport | Men\u2019s [[Basketball]]}}\n{{MedalCompetition|[[EuroBasket|European Championships]]}}\n{{MedalSilver| [[Eurobasket 1953|1953 USSR]] | [[Hungary national basketball team|Hungary]]}}\n{{MedalGold| [[Eurobasket 1955|1955 Hungary]] | [[Hungary national basketball team|Hungary]]}}\n{{MedalBottom}}\n{{eastern name order|Zs\u00edros Tibor}}\n\n'''Tibor Zs\u00edros''' (30 June 1930 \u2013 13 February 2013) was a [[Hungary|Hungarian]] [[basketball]] player who competed in the [[1948 Summer Olympics]], the [[1952 Summer Olympics]] and the [[1960 Summer Olympics]].<ref name=\"SportsRef\">{{cite Sports-Reference |url=https://www.sports-reference.com/olympics/athletes/zs/tibor-zsiros-1.html |title=Tibor Zs\u00edros Olympic Results |accessdate=11 June 2018}}</ref>\n\nA native of [[Budapest]], Zs\u00edros was a member of the Hungarian team, which finished sixteenth in the [[Basketball at the 1948 Summer Olympics|1948 tournament]]. Four years later he was part of the Hungarian basketball team, which was eliminated after the group stage in the [[Basketball at the 1952 Summer Olympics|1952 tournament]]. He played in all six matches.\n\n==References==\n{{reflist}}\n\n== External links ==\n*[http://www.basketpedya.com/Acc002InfJug.php?idjug=30455&idioma=3 basketpedya.com]\n* [http://kosarsport.hu/hirek/25507/elhunyt_zsiros_tibor Elhunyt Zs\u00edros Tibor] {{in lang|hu}}\n\n{{Hungary Men Basketball Squad 1948 Summer Olympics}}\n{{Hungary Men Basketball Squad 1952 Summer Olympics}}\n{{Hungary Men Basketball Squad 1960 Summer Olympics}}\n\n{{DEFAULTSORT:Zsiros, Tibor}}\n[[Category:1930 births]]\n[[Category:2013 deaths]]\n[[Category:Hungarian men's basketball players]]\n[[Category:Olympic basketball players of Hungary]]\n[[Category:Basketball players at the 1948 Summer Olympics]]\n[[Category:Basketball players at the 1952 Summer Olympics]]\n[[Category:Basketball players at the 1960 Summer Olympics]]\n[[Category:FIBA EuroBasket-winning players]]\n\n{{Hungary-basketball-bio-stub}}\n", "text_old": "{{MedalTableTop}}\n{{MedalCountry | {{HUN}} }}\n{{MedalSport | Men\u2019s [[Basketball]]}}\n{{MedalCompetition|[[EuroBasket|European Championships]]}}\n{{MedalSilver| [[Eurobasket 1953|1953 USSR]] | [[Hungary national basketball team|Hungary]]}}\n{{MedalGold| [[Eurobasket 1955|1955 Hungary]] | [[Hungary national basketball team|Hungary]]}}\n{{MedalBottom}}\n{{eastern name order|Zs\u00edros Tibor}}\n\n'''Tibor Zs\u00edros''' (30 June 1930 \u2013 13 February 2013) was a [[Hungary|Hungarian]] [[basketball]] player who competed in the [[1948 Summer Olympics]], the [[1952 Summer Olympics]] and the [[1960 Summer Olympics]].<ref name=\"SportsRef\">{{cite Sports-Reference |url=https://www.sports-reference.com/olympics/athletes/zs/tibor-zsiros-1.html |title=Tibor Zs\u00edros Olympic Results |accessdate=11 June 2018}}</ref>\n\nA native of [[Budapest]], Zs\u00edros was a member of the Hungarian team, which finished sixteenth in the [[Basketball at the 1948 Summer Olympics|1948 tournament]]. Four years later he was part of the Hungarian basketball team, which was eliminated after the group stage in the [[Basketball at the 1952 Summer Olympics|1952 tournament]]. He played in all six matches.\n\n==References==\n{{reflist}}\n\n== External links ==\n*[http://www.basketpedya.com/Acc002InfJug.php?idjug=30455&idioma=3 basketpedya.com]\n* [http://kosarsport.hu/hirek/25507/elhunyt_zsiros_tibor Elhunyt Zs\u00edros Tibor] {{in lang|hu}}\n\n{{Hungary Men Basketball Squad 1948 Summer Olympics}}\n{{Hungary Men Basketball Squad 1952 Summer Olympics}}\n{{Hungary Men Basketball Squad 1960 Summer Olympics}}\n\n{{DEFAULTSORT:Zsiros, Tibor}}\n[[Category:1930 births]]\n[[Category:2013 deaths]]\n[[Category:Hungarian men's basketball players]]\n[[Category:Olympic basketball players of Hungary]]\n[[Category:Basketball players at the 1948 Summer Olympics]]\n[[Category:Basketball players at the 1952 Summer Olympics]]\n[[Category:Basketball players at the 1960 Summer Olympics]]\n[[Category:FIBA EuroBasket-winning players]]\n\n{{Hungary-basketball-bio-stub}}\n", "name_user": "Red Director", "label": "safe", "comment": "Adding localshort description: \"Hungarian basketball player\", overriding Wikidata description \"Hungarian basketball player\" (Shortdesc helper)", "url_page": "//en.wikipedia.org/wiki/Tibor_Zs%C3%ADros"}
{"title_page": "Collins Aerospace", "text_new": "{{Infobox company\n| name                = Collins Aerospace\n| logo                = File:Collins Aerospace Logo.svg\n| type                = [[Subsidiary]]\n| genre               = \n| fate                = \n| predecessor         = [[Goodrich Corporation]], [[Hamilton Sundstrand]],  [[Hamilton Standard]], [[Sundstrand Corporation]] and [[Rockwell Collins]]\n| successor           = \n| foundation          = 2012 (UTAS) <br>1998 (Rockwell Collins)<br> 2018 (Collins Aerospace)\n| founder             = \n| defunct             = \n| location_city       = [[Charlotte, North Carolina]]\n| location_country    = [[United States]]\n| num_locations       = 5{{hsp}}<ref name=CollinsContactLocation/><ref>{{cite web |url=https://www.collinsaerospace.com/contacts |website=United Technologies |title=Locations |access-date=2020-03-20 |archive-url=https://web.archive.org/web/20191231091631/https://www.utc.com/locations |archive-date=2019-12-31 |url-status=live}}</ref>\n| area_served         = \n| key_people          = \n| industry            = [[Aerospace]] and [[industry|Industrial]]\n| products            = Actuation Systems, Aerostructures, Aircraft Connectivity & Information Services, Air Data Management Systems, Airport Services, Avionics, Cabin Management, Communications, Displays, Electric Systems, Electronic Warfare Systems, Engine Components, Engine & Control Systems, Flight Decks, Interiors, ISR Systems, Landing Gear, Navigation, Propeller Systems, Sensors & Integrated Systems, Simulation & Training, Space Systems, Wheels & Brakes\n| services            = Engineering Services, Repair Services, Spare Parts, Technical Support\n| revenue             = {{increase}} US$ 14.691 billion (UTC alone, 2017)<ref name=\"FY\">{{cite web|url=https://www.utc.com/-/media/project/united-technologies/utc/files/investors/annual-reports-and-proxy-statements/utc_ar_2017.pdf |title=United Technologies 2017 Annual Report |publisher=United Technologies |accessdate =20 March 2020 |page=67}}</ref><br/>$23 billion with Collins<ref name=UTC26nov2018/>\n| operating_income    = {{increase}} US$ 2.370 billion (UTC alone, 2017)<ref name=\"FY\"/>\n| net_income          = \n| owner               = \n| num_employees       = 78,000 (2020) {{cn|date=April 2020}}\n| parent              = [[Raytheon Technologies]]\n| divisions           = Aerostructures, Avionics, Interiors, Mechanical Systems, Missions Systems, Power & Controls\n| subsid              = \n| homepage            = [https://www.collinsaerospace.com collinsaerospace.com]\n| footnotes           = \n}}\n\n'''Collins Aerospace''', a [[Raytheon Technologies]] subsidiary, is one of the world's largest suppliers of aerospace and defense products, headquartered in [[Charlotte, North Carolina]].<ref name=CollinsContactLocation>{{cite web |url=https://www.collinsaerospace.com/contacts |title=Contact |website=Collins Aerospace |access-date=2020-04-01 |archive-url=https://web.archive.org/web/20200401154934/https://www.collinsaerospace.com/contacts |archive-date=2020-04-01 |url-status=live}}</ref> <!-- another archive available at http://archive.today/2020.04.01-154824/https://www.collinsaerospace.com/contacts -->\n\n== History ==\n\nUTC Aerospace Systems (UTAS) was formed in August 2012 when parent [[United Technologies Corporation]] merged their existing subsidiary [[Hamilton Sundstrand]] with the newly acquired [[Goodrich Corporation]].\n\nOn 26 November 2018, United Technologies announced the completion of its [[Rockwell Collins]] acquisition, after which it merged its newly acquired business with UTC Aerospace Systems to form Collins Aerospace. The new company reported $26 billion of combined sales in 2019 and is composed of 78,000 employees.<ref>{{Cite web|url=https://www.collinsaerospace.com/-/media/project/collinsaerospace/collinsaerospace-website/newsroom/files/collins_aerospace_fact-sheet.pdf|title=Collins Aerospace 2020 Fact Sheet|last=|first=|date=|website=collinsaerospace.com|url-status=live|archive-url=|archive-date=|access-date=April 3, 2020}}</ref><ref name=UTC26nov2018>{{cite press release |url= https://www.utc.com/News/News-Center/Pages/United-Technologies-Announces-Intention-to-Separate-Into-Three-Independent-Compan.aspx |title= United Technologies [...] Completes Acquisition of Rockwell Collins |date= November 26, 2018 |publisher= United Technologies |archive-url=https://archive.is/sMi9H |archive-date=2020-03-20 |url-status=live}}</ref>\n\n<br />\n\n==Products==\n[[File:UTC Aerospace Systems.svg|thumb|Company logo used 2012-2018]]\n\nCollins Aerospace is engaged in designing, manufacturing and servicing systems and components for commercial aviation, business aviation, military & defense, helicopters, space, airports, and other industries. \n\nCollins Aerospace has six strategic business units: Aerostructures, Avionics, Interiors, Mechanical Systems, Missions Systems, Power & Controls.<ref>{{Cite web|url=https://www.collinsaerospace.com/contacts|title=Collins Aerospace Locations|last=|first=|date=|website=collinsaerospace.com|url-status=live|archive-url=|archive-date=|access-date=April 3, 2020}}</ref> Each business unit also serves customers with aftermarket solutions.\n\n\n<big>'''Aerostructures'''</big>\n\nBased in [[Chula Vista, California]], Aerostructures includes: nacelle systems; flight control surfaces; naval composites; and other material and structural components.\n\n\n<big>'''Avionics'''</big>\n\nBased in [[Cedar Rapids, Iowa]], Avionics includes: commercial and government avionics systems; cabin management and content systems; information management systems and services; fire protection services; and aircraft sensors.\n\n\n<big>'''Interiors'''</big>\n\nBased in [[Winston-Salem, North Carolina]], Interiors includes: aircraft seating; interior systems; evacuation systems; galleys and galley inserts; lavatories; life rafts; lighting; veneers; potable water systems; and de- icing products.\n\n\n<big>'''Mechanical Systems'''</big>\n\nBased in [[Charlotte, North Carolina]], Mechanical Systems includes: landing systems; actuation; propellers; flight controls; pilot controls; hoist and winch systems; and cargo systems.\n\n\n<big>'''Missions Systems'''</big>\n\nBased in [[Cedar Rapids, Iowa]], Mission Systems includes: solutions for secure military communication, navigation and guidance; missile actuation; simulation, training and range instrumentation; strategic command and control; unmanned aircraft systems; electronic warfare; ejection seats and propulsion; intelligence, surveillance and reconnaissance; and space solutions.\n\n\n<big>'''Power & Controls'''</big>\n\nBased in [[Windsor Locks, Connecticut]], Power & Controls includes: electric systems; engine controls; air management; and airframe controls.\n\n\n=== Ithaco Space Systems, Inc. ===\nCollins Aerospace is the owner of Ithaco Space Systems, Inc., formerly owned by [[Goodrich Company]]. Ithaco produced items for the field of satellite control since 1962, such as Earth sensors, [[Reaction wheel|reaction/momentum wheels]], magnetometers and magnetic torquers.<ref>{{cite web|title=Attitude Control|url=http://spinoff.nasa.gov/spinoff1997/t2.html|publisher=NASA Spinoff|accessdate=20 August 2013}}</ref> \n\nIn addition to over 100 U.S. satellites, equipment made by Ithaco flew on Japanese, Canadian, French, German, Spanish, Swedish, and Argentinean spacecraft. Ithaco became notable for having manufactured the reaction wheels of the [[Kepler (spacecraft)|Kepler spacecraft]], the [[Hayabusa|Hayabusa spacecraft]], the Mesosphere Energetics and Dynamics (TIMED) satellite and the [[Dawn (spacecraft)|Dawn spacecraft]], which developed problems or even failed.<ref>{{cite journal|last=Cowen|first=Ron|title=The wheels come off Kepler|journal=Nature|volume=497|issue=7450|pages=417\u20138|publisher=Nature.com|pmid=23698418|year=2013|doi=10.1038/497417a}}</ref> \n\nThe [[ROSAT]] reaction wheels lasted over 8 years.{{fact|date=November 2019}}\n\nCollins Aerospace announced in August 2012 layoffs at Ithaco Space Systems due to Ithaco having been \"focused on space programs that have recently seen slower growth\", and further layoffs at former Hamilton Sundstrand.<ref>{{cite web|title=Layoffs At UTC Aerospace Systems \u2014 Former Hamilton Sunstrand|url=http://connecticut.cbslocal.com/2012/08/23/layoffs-at-utc-aerospace-systems-former-hamilton-sunstrand/|publisher=CBS Connecticut|accessdate=18 August 2013}}</ref>\n\n==See also==\n* [[List of aircraft propeller manufacturers]]\n* [[LucasVarity]]\n* [[Pratt & Whitney]]\n\n==References==\n{{reflist}}\n\n==External links==\n* [https://www.collinsaerospace.com Collins Aerospace website]\n* [http://utcaerospacesystems.com UTC Aerospace Systems website]\n\n{{UTC Aerospace Systems}}\n{{United Technologies Corporation}}\n\n[[Category:Aerospace companies of the United States]]\n[[Category:United Technologies Corporation]]\n[[Category:Windsor Locks, Connecticut]]\n[[Category:Aircraft propeller manufacturers]]\n[[Category:Companies based in Palm Beach County, Florida]]\n[[Category:West Palm Beach, Florida]]\n[[Category:Manufacturing companies established in 2012]]\n[[Category:American companies established in 2012]]\n", "text_old": "{{Infobox company\n| name                = Collins Aerospace\n| logo                = File:Collins Aerospace Logo.svg\n| type                = [[Subsidiary]]\n| genre               = \n| fate                = \n| predecessor         = [[Goodrich Corporation]], [[Hamilton Sundstrand]],  [[Hamilton Standard]], [[Sundstrand Corporation]] and [[Rockwell Collins]]\n| successor           = \n| foundation          = 2012 (UTAS) <br>1998 (Rockwell Collins)<br> 2018 (Collins Aerospace)\n| founder             = \n| defunct             = \n| location_city       = [[Charlotte, North Carolina]]\n| location_country    = [[United States]]\n| num_locations       = 8{{hsp}}<ref name=CollinsContactLocation/><ref>{{cite web |url=https://utc.com/locations |website=United Technologies |title=Locations |access-date=2020-03-20 |archive-url=https://web.archive.org/web/20191231091631/https://www.utc.com/locations |archive-date=2019-12-31 |url-status=live}}</ref>\n| area_served         = \n| key_people          = \n| industry            = [[Aerospace]] and [[industry|Industrial]]\n| products            = Actuation Systems, Aerostructures, Air Data Management Systems, Electric Systems, Engine Components, Engine & Control Systems, Interiors, ISR Systems, Landing Gear, Propeller Systems, Sensors & Integrated Systems, Space Systems, Wheels & Brakes\n| services            = Spare parts, Repair services, Technical Support\n| revenue             = {{increase}} US$ 14.691 billion (UTC alone, 2017)<ref name=\"FY\">{{cite web|url=https://www.utc.com/-/media/project/united-technologies/utc/files/investors/annual-reports-and-proxy-statements/utc_ar_2017.pdf |title=United Technologies 2017 Annual Report |publisher=United Technologies |accessdate =20 March 2020 |page=67}}</ref><br/>$23 billion with Collins<ref name=UTC26nov2018/>\n| operating_income    = {{increase}} US$ 2.370 billion (UTC alone, 2017)<ref name=\"FY\"/>\n| net_income          = \n| owner               = \n| num_employees       = 70,000 (2019) {{cn|date=February 2020}}\n| parent              = [[United Technologies]]\n| divisions           = \n| subsid              = \n| homepage            = [https://www.collinsaerospace.com collinsaerospace.com]\n| footnotes           = \n}}\n\n'''Collins Aerospace''', a [[United Technologies]] subsidiary, is one of the world's largest suppliers of aerospace and defense products, headquartered in [[Charlotte, North Carolina]].<ref name=CollinsContactLocation>{{cite web |url=https://www.collinsaerospace.com/contacts |title=Contact |website=Collins Aerospace |access-date=2020-04-01 |archive-url=https://web.archive.org/web/20200401154934/https://www.collinsaerospace.com/contacts |archive-date=2020-04-01 |url-status=live}}</ref> <!-- another archive available at http://archive.today/2020.04.01-154824/https://www.collinsaerospace.com/contacts -->\n\n== History ==\n\nUTC Aerospace Systems (UTAS) was formed in August 2012 when parent [[United Technologies Corporation]] merged their existing subsidiary [[Hamilton Sundstrand]] with the newly acquired [[Goodrich Corporation]].\n\nOn 26 November 2018, United Technologies announced the completion of its [[Rockwell Collins]] acquisition, after which it merged its newly acquired business with UTC Aerospace Systems to form Collins Aerospace. The new company reported $23 billion of combined sales in 2017 and is composed of 70,000 employees.<ref name=UTC26nov2018>{{cite press release |url= https://www.utc.com/News/News-Center/Pages/United-Technologies-Announces-Intention-to-Separate-Into-Three-Independent-Compan.aspx |title= United Technologies [...] Completes Acquisition of Rockwell Collins |date= November 26, 2018 |publisher= United Technologies |archive-url=https://archive.is/sMi9H |archive-date=2020-03-20 |url-status=live}}</ref>\n\n==Products==\n[[File:UTC Aerospace Systems.svg|thumb|Company logo used 2012-2018]]\n\nCollins Aerospace is engaged in designing, manufacturing and servicing systems and components for commercial, regional, business and military aircraft, helicopters and other platforms. Collins Aerospace is also a major supplier to international space programs.\n\nCollins Aerospace has two main segments: Aircraft Systems and Power, Control and Sensing Systems. These segments are then broken down into several business units.\n\nThe Aircraft Systems consists of Actuation & Propeller Systems, Aerostructures, Air Management Systems, Interiors, and Landing Systems (formerly Landing Gear and Wheels and Brakes).<ref>[http://utcaerospacesystems.com/about/ ] {{webarchive |url=https://web.archive.org/web/20130128131649/http://utcaerospacesystems.com/about/ |date=January 28, 2013 }}</ref>\n\nThe Power, Control & Sensing Systems consists of Electric Systems, Engine Systems, ISR & Space Systems, and Sensors & Integrated Systems.<ref>{{cite web |url=http://utcaerospacesystems.com/Company/Pages/company.aspx |title=Our Company |publisher=UTC Aerospace Systems |accessdate=2014-03-15 |archive-url=https://web.archive.org/web/20140310155530/http://utcaerospacesystems.com/Company/Pages/company.aspx |archive-date=2014-03-10 |url-status=dead }}</ref>\n\n=== Ithaco Space Systems, Inc. ===\nCollins Aerospace is the owner of Ithaco Space Systems, Inc., formerly owned by [[Goodrich Company]]. Ithaco produced items for the field of satellite control since 1962, such as Earth sensors, [[Reaction wheel|reaction/momentum wheels]], magnetometers and magnetic torquers.<ref>{{cite web|title=Attitude Control|url=http://spinoff.nasa.gov/spinoff1997/t2.html|publisher=NASA Spinoff|accessdate=20 August 2013}}</ref> \n\nIn addition to over 100 U.S. satellites, equipment made by Ithaco flew on Japanese, Canadian, French, German, Spanish, Swedish, and Argentinean spacecraft. Ithaco became notable for having manufactured the reaction wheels of the [[Kepler (spacecraft)|Kepler spacecraft]], the [[Hayabusa|Hayabusa spacecraft]], the Mesosphere Energetics and Dynamics (TIMED) satellite and the [[Dawn (spacecraft)|Dawn spacecraft]], which developed problems or even failed.<ref>{{cite journal|last=Cowen|first=Ron|title=The wheels come off Kepler|journal=Nature|volume=497|issue=7450|pages=417\u20138|publisher=Nature.com|pmid=23698418|year=2013|doi=10.1038/497417a}}</ref> \n\nThe [[ROSAT]] reaction wheels lasted over 8 years.{{fact|date=November 2019}}\n\nCollins Aerospace announced in August 2012 layoffs at Ithaco Space Systems due to Ithaco having been \"focused on space programs that have recently seen slower growth\", and further layoffs at former Hamilton Sundstrand.<ref>{{cite web|title=Layoffs At UTC Aerospace Systems \u2014 Former Hamilton Sunstrand|url=http://connecticut.cbslocal.com/2012/08/23/layoffs-at-utc-aerospace-systems-former-hamilton-sunstrand/|publisher=CBS Connecticut|accessdate=18 August 2013}}</ref>\n\n==See also==\n* [[List of aircraft propeller manufacturers]]\n* [[LucasVarity]]\n* [[Pratt & Whitney]]\n\n==References==\n{{reflist}}\n\n==External links==\n* [https://www.collinsaerospace.com Collins Aerospace website]\n* [http://utcaerospacesystems.com UTC Aerospace Systems website]\n\n{{UTC Aerospace Systems}}\n{{United Technologies Corporation}}\n\n[[Category:Aerospace companies of the United States]]\n[[Category:United Technologies Corporation]]\n[[Category:Windsor Locks, Connecticut]]\n[[Category:Aircraft propeller manufacturers]]\n[[Category:Companies based in Palm Beach County, Florida]]\n[[Category:West Palm Beach, Florida]]\n[[Category:Manufacturing companies established in 2012]]\n[[Category:American companies established in 2012]]\n", "name_user": "Macsarcule", "label": "safe", "comment": "Updates related to the merger of United Technologies and Raytheon to create the new Raytheon Technologies", "url_page": "//en.wikipedia.org/wiki/Collins_Aerospace"}
{"title_page": "Balian of Ibelin (1240\u20131302)", "text_new": "{{other people||Balian of Ibelin (disambiguation)}}\n{{Unreferenced|date=March 2008}}\n{{ infobox nobility\n| name         = Balian of Ibelin\n| title        = crusader\n| image        = Armoiries Ibelin.svg\n| image_size   = 150px\n| caption      = Coat-of-arms of Ibelin\n| noble family = [[House of Ibelin]]\n| father       = [[Guy of Ibelin, constable of Cyprus|Guy of Ibelin]]\n| mother       = Philippa Berlais\n| spouse       = Alice de Lampron\n| birth_date   = 1240\n| birth_place  = \n| death_date   = 1302\n| death_place  = \n}}\n\n'''Balian of Ibelin''' ({{lang-fr|links=no|Balian d'Ibelin}}; 1240\u20131302), [[seneschal]] of Cyprus, was a son of [[Guy of Ibelin, constable of Cyprus|Guy of Ibelin]], constable of Cyprus, and Philippa Berlais.\n\nHe married Alice of Hetumids of Lampron, daughter of Escive de Poitiers (daughter of [[Raymond-Roupen]]) and they had:\n* [[Guy of Ibelin (1286-1308)|Guy d'Ibelin]] (1286\u20131308)\n* Marie d'Ibelin married [[Rupen de Montfort]] in 1299\n* Isabelle d'Ibelin, married [[John, titular lord of Arsuf]]\n* Margaret d'Ibelin, married [[Oshin of Korikos]]\n==Ancestry==\n{{ahnentafel\n|collapsed=yes |align=center\n|boxstyle_1=background-color: #fcc;\n|boxstyle_2=background-color: #fb9;\n|boxstyle_3=background-color: #ffc;\n|boxstyle_4=background-color: #bfc;\n|boxstyle_5=background-color: #9fe;\n| 1= '''Balian of Ibelin'''\n| 2= [[Guy of Ibelin, constable of Cyprus]]\n| 3= Phillipa Berlais\n| 4= [[John of Ibelin, the Old Lord of Beirut|John I of Ibelin, lord of Beirut]]\n| 5= [[Melisende of Arsuf|Melisende, lady of Arsuf]]\n| 6= Aimery Berlais\n| 7= \n| 8= [[Balian of Ibelin]]\n| 9= [[Maria Komnene, Queen of Jerusalem|Maria Komnene]]\n|10= Guy of Arsuf\n|11= \n|12=\n|13= \n|14= \n|15= \n|16= [[Barisan of Ibelin]]\n|17= [[Helvis lady of Ramla]]\n|18= [[John Doukas Komnenos|John Komnenos]]\n|19= Maria Taronitissa\n|20= \n|21= \n|22= \n|23= \n|24= \n|25= \n|26= \n|27= \n|28= \n|29= \n|30= \n|31= \n}}\n\n{{DEFAULTSORT:Balian of Ibelin}}\n[[Category:1240 births]]\n[[Category:1302 deaths]]\n[[Category:House of Ibelin]]\n[[Category:Christians of the Crusades]]\n[[Category:People of the Kingdom of Cyprus]]\n\n\n{{France-noble-stub}}\n", "text_old": "{{other people||Balian of Ibelin (disambiguation)}}\n{{Unreferenced|date=March 2008}}\n{{ infobox nobility\n| name         = Balian of Ibelin\n| title        = crusader\n| image        = Armoiries Ibelin.svg\n| image_size   = 150px\n| caption      = Coat-of-arms of Ibelin\n| noble family = [[House of Ibelin]]\n| father       = [[Guy of Ibelin, constable of Cyprus|Guy of Ibelin]]\n| mother       = Philippa Berlais\n| spouse       = Alice de Lampron\n| birth_date   = 1240\n| birth_place  = \n| death_date   = 1302\n| death_place  = \n}}\n\n'''Balian of Ibelin''' ({{lang-fr|links=no|Balian d'Ibelin}}; 1240\u20131302), [[seneschal]] of Cyprus, was a son of [[Guy of Ibelin, constable of Cyprus|Guy of Ibelin]], constable of Cyprus, and Philippa Berlais.\n\nHe married Alice of Hetumids of Lampron, daughter of Escive de Poitiers (daughter of [[Raymond-Roupen]]) and they had:\n* [[Guy of Ibelin (1286-1308)|Guy d'Ibelin]] (1286\u20131308)\n* Marie d'Ibelin married [[Rupen de Montfort]] in 1299\n* Isabelle d'Ibelin, married [[John of Ibelin (1277\u20131309)|Jean d'Ibelin]]\n* Margaret d'Ibelin, married [[Oshin of Korikos]]\n==Ancestry==\n{{ahnentafel\n|collapsed=yes |align=center\n|boxstyle_1=background-color: #fcc;\n|boxstyle_2=background-color: #fb9;\n|boxstyle_3=background-color: #ffc;\n|boxstyle_4=background-color: #bfc;\n|boxstyle_5=background-color: #9fe;\n| 1= '''Balian of Ibelin'''\n| 2= [[Guy of Ibelin, constable of Cyprus]]\n| 3= Phillipa Berlais\n| 4= [[John of Ibelin, the Old Lord of Beirut|John I of Ibelin, lord of Beirut]]\n| 5= [[Melisende of Arsuf|Melisende, lady of Arsuf]]\n| 6= Aimery Berlais\n| 7= \n| 8= [[Balian of Ibelin]]\n| 9= [[Maria Komnene, Queen of Jerusalem|Maria Komnene]]\n|10= Guy of Arsuf\n|11= \n|12=\n|13= \n|14= \n|15= \n|16= [[Barisan of Ibelin]]\n|17= [[Helvis lady of Ramla]]\n|18= [[John Doukas Komnenos|John Komnenos]]\n|19= Maria Taronitissa\n|20= \n|21= \n|22= \n|23= \n|24= \n|25= \n|26= \n|27= \n|28= \n|29= \n|30= \n|31= \n}}\n\n{{DEFAULTSORT:Balian of Ibelin}}\n[[Category:1240 births]]\n[[Category:1302 deaths]]\n[[Category:House of Ibelin]]\n[[Category:Christians of the Crusades]]\n[[Category:People of the Kingdom of Cyprus]]\n\n\n{{France-noble-stub}}\n", "name_user": "ArisMethymna", "label": "safe", "comment": "", "url_page": "//en.wikipedia.org/wiki/Balian_of_Ibelin_(1240%E2%80%931302)"}
{"title_page": "Data model", "text_new": "A '''data model''' (or '''datamodel'''<ref>{{cite web|title= datamodel - UML Domain Modeling - Stack Overflow|url= https://stackoverflow.com/a/3835214|website= Stack Overflow|publisher= Stack Exchange Inc.|accessdate= 4 February 2017}}</ref><ref name=\"w3cxpath\">{{cite web|title= XQuery and XPath Data Model 3.1|url= https://www.w3.org/TR/xpath-datamodel-3/|website= World Wide Web Consortium (W3C)|publisher= W3C|accessdate= 4 February 2017}}</ref><ref name=\"npmdatamodel\">{{cite web|title= datamodel|url= https://www.npmjs.com/package/datamodel|website= npm|publisher= npm, Inc.|accessdate= 4 February 2017}}</ref><ref>{{cite web|title= DataModel (Java EE 6)|url= http://docs.oracle.com/javaee/6/api/javax/faces/model/DataModel.html|website= Java Documentation|publisher= Oracle|accessdate= 4 February 2017}}</ref><ref>{{cite web|last1= Ostrovskiy|first1= Stan|title= iOS: Three ways to pass data from Model to Controller|url= https://medium.com/ios-os-x-development/ios-three-ways-to-pass-data-from-model-to-controller-b47cc72a4336#.ma7pr7no7|website= Medium|publisher= A Medium Corporation|accessdate= 4 February 2017}}</ref>) is an abstract model that organizes elements of [[data]] and standardizes how they relate to one another and to the properties of real-world entities. For instance, a data model may specify that the data element representing a car be composed of a number of other elements which, in turn, represent the color and size of the car and define its owner.\n\nThe term '''data model''' can refer to two distinct but closely related concepts. Sometimes it refers to an abstract formalization of the objects and relationships found in a particular application domain: for example the customers, products, and orders found in a manufacturing organization. At other times it refers to the set of concepts used in defining such formalizations: for example concepts such as entities, attributes, relations, or tables. So the \"data model\" of a banking application may be defined using the entity-relationship \"data model\". This article uses the term in both senses.\n\n[[File:Data modeling context.svg|thumb|360px| Overview of a data-modeling context: Data model is based on Data, Data relationship, Data semantic and Data constraint. A data model provides the details of [[information]] to be stored, and is of primary use when the final product is the generation of computer [[software code]] for an application or the preparation of a [[functional specification]] to aid a [[computer software]] make-or-buy decision. The figure is an example of the interaction between [[business process modeling |process]] and data models.<ref name=\"SS93\">Paul R. Smith & Richard Sarfaty Publications, LLC 2009</ref>]]\n\nA data model explicitly determines the structure of data. Data models are typically specified by a data specialist, data librarian, or a digital humanities scholar in a [[data modeling]] notation. These notations are often represented in graphical form.<ref name=\"MRM99\">\nMichael R. McCaleb (1999). [http://nvl.nist.gov/pub/nistpubs/jres/104/4/html/j44mac.htm#apa \"A Conceptual Data Model of Datum Systems\"] {{Webarchive\n|url= https://web.archive.org/web/20080921063005/http://nvl.nist.gov/pub/nistpubs/jres/104/4/html/j44mac.htm#apa |date= 2008-09-21 \n}}. National Institute of Standards and Technology. August 1999.\n</ref>\n\nA data model can sometimes be referred to as a [[data structure]], especially in the context of [[programming language]]s. Data models are often complemented by [[function model]]s, especially in the context of [[enterprise model]]s.\n\n== Overview ==\nManaging large quantities of structured and [[unstructured data]] is a primary function of [[information system]]s. Data models describe the structure, manipulation and integrity aspects of the data stored in data management systems such as relational databases. They typically do not describe unstructured data, such as [[Word processor|word processing]] documents, [[Email|email messages]], pictures, digital audio, and video.\n\n=== The role of data models ===\n[[File:3-4 Data model roles.svg|thumb|320px|How data models deliver benefit<ref name=\"MW99\">Matthew West and Julian Fowler (1999). [https://sites.google.com/site/drmatthewwest/publications/princ03.pdf Developing High Quality Data Models]. The European Process Industries STEP Technical Liaison Executive (EPISTLE).</ref>]]\nThe main aim of data models is to support the development of [[information system]]s by providing the definition and format of data. According to West and Fowler (1999) \"if this is done consistently across systems then compatibility of data can be achieved. If the same data structures are used to store and access data then different applications can share data. The results of this are indicated above. However, systems and interfaces often cost more than they should, to build, operate, and maintain. They may also constrain the business rather than support it. A major cause is that the quality of the data models implemented in systems and interfaces is poor\".<ref name=\"MW99\"/>\n* \"Business rules, specific to how things are done in a particular place, are often fixed in the structure of a data model. This means that small changes in the way business is conducted lead to large changes in computer systems and interfaces\".<ref name=\"MW99\"/>\n* \"Entity types are often not identified, or incorrectly identified. This can lead to replication of data, data structure, and functionality, together with the attendant costs of that duplication in development and maintenance\".<ref name=\"MW99\"/>\n* \"Data models for different systems are arbitrarily different. The result of this is that complex interfaces are required between systems that share data. These interfaces can account for between 25-70% of the cost of current systems\".<ref name=\"MW99\"/>\n* \"Data cannot be shared electronically with customers and suppliers, because the structure and meaning of data has not been standardized. For example, engineering design data and drawings for process plant are still sometimes exchanged on paper\".<ref name=\"MW99\"/>\nThe reason for these problems is a lack of standards that will ensure that data models will both meet business needs and be consistent.<ref name=\"MW99\"/> \n\nA data model explicitly determines the structure of data. Typical applications of data models include database models, design of information systems, and enabling exchange of data. Usually data models are specified in a data modeling language.[3]\n\n=== Three perspectives ===\n[[File:4-2 ANSI-SPARC three level architecture.svg|thumb|320px|The ANSI/SPARC [[Three schema approach|three level architecture]]. This shows that a data model can be an external model (or view), a conceptual model, or a physical model. This is not the only way to look at data models, but it is a useful way, particularly when comparing models.<ref name=\"MW99\"/>]]\nA data model ''instance'' may be one of three kinds according to [[ANSI]] in 1975:<ref>American National Standards Institute. 1975. ''ANSI/X3/SPARC Study Group on Data Base Management Systems; Interim Report''. FDT (Bulletin of ACM SIGMOD) 7:2.</ref>\n* [[Conceptual data model]] :  describes the semantics of a domain, being the scope of the model. For example, it may be a model of the interest area of an organization or industry. This consists of entity classes, representing kinds of things of significance in the domain, and relationship assertions about associations between pairs of entity classes. A conceptual schema specifies the kinds of facts or propositions that can be expressed using the model. In that sense, it defines the allowed expressions in an artificial 'language' with a scope that is limited by the scope of the model.\n* [[Logical data model]] : describes the semantics, as represented by a particular data manipulation technology.  This consists of descriptions of tables and columns, object oriented classes, and XML tags, among other things.\n* [[Physical data model]] : describes the physical means by which data are stored.  This is concerned with partitions, CPUs, tablespaces, and the like.\n\nThe significance of this approach, according to ANSI, is that it allows the three perspectives to be relatively independent of each other. Storage technology can change without affecting either the logical or the conceptual model. The table/column structure can change without (necessarily) affecting the conceptual model.  In each case, of course, the structures must remain consistent with the other model.  The table/column structure may be different from a direct translation of the entity classes and attributes, but it must ultimately carry out the objectives of the conceptual entity class structure.  Early phases of many software development projects emphasize the design of a [[Conceptual schema|conceptual data model]]. Such a design can be detailed into a [[logical data model]]. In later stages, this model may be translated into [[physical data model]]. However, it is also possible to implement a conceptual model directly.\n\n== History ==\nOne of the earliest pioneering works in modelling information systems was done by Young and Kent (1958),<ref>Young, J. W., and Kent, H. K. (1958). \"Abstract Formulation of Data Processing Problems\". In: ''Journal of Industrial Engineering''. Nov-Dec 1958. 9(6), pp. 471-479</ref><ref name=\"JAB07\">[[Janis A. Bubenko jr]] (2007) \"From Information Algebra to Enterprise Modelling and Ontologies - a Historical Perspective on Modelling for Information Systems\". In: ''Conceptual Modelling in Information Systems Engineering''. [[:w:John Krogstie|John Krogstie]] et al. eds. pp 1-18</ref> who argued for \"a precise and abstract way of specifying the informational and time characteristics of a [[data processing]] problem\". They wanted to create \"a notation that should enable the [[Systems analyst|analyst]] to organize the problem around any piece of [[computer hardware|hardware]]\". Their work was a first effort to create an abstract specification and invariant basis for designing different alternative implementations using different hardware components. A next step in IS modelling was taken by [[CODASYL]], an IT industry consortium formed in 1959, who essentially aimed at the same thing as Young and Kent: the development of \"a proper structure for machine independent problem definition language, at the system level of data processing\". This led to the development of a specific IS [[information algebra]].<ref name=\"JAB07\"/>\n\nIn the 1960s data modeling gained more significance with the initiation of the [[management information system]] (MIS) concept. According to Leondes (2002), \"during that time, the information system provided the data and information for management purposes. The first generation [[database system]], called [[Integrated Data Store]] (IDS), was designed by [[Charles Bachman]] at General Electric. Two famous database models, the [[network data model]] and the [[hierarchical data model]], were proposed during this period of time\".<ref>Cornelius T. Leondes (2002). ''Database and Data Communication Network Systems: Techniques and Applications''. Page 7</ref> Towards the end of the 1960s, [[Edgar F. Codd]] worked out his theories of data arrangement, and proposed the [[relational model]] for database management based on [[first-order logic|first-order predicate logic]].<ref>''\"Derivability, Redundancy, and Consistency of Relations Stored in Large Data Banks\"'', E.F. Codd, IBM Research Report, 1969</ref>\n\nIn the 1970s [[entity relationship model]]ing emerged as a new type of conceptual data modeling, originally proposed in 1976 by [[Peter Chen]]. Entity relationship models were being used in the first stage of [[information system]] design during the [[requirements analysis]] to describe information needs or the type of [[information]] that is to be stored in a [[database]]. This technique can describe any [[ontology (computer science)|ontology]], i.e., an overview and classification of concepts and their relationships, for a certain [[universe of discourse|area of interest]].\n\nIn the 1970s [[G.M. Nijssen]] developed \"Natural Language Information Analysis Method\" (NIAM) method, and developed this in the 1980s in cooperation with [[Terry Halpin]] into [[Object-Role Modeling]] (ORM). However, it was Terry Halpin's 1989 PhD thesis that created the formal foundation on which Object-Role Modeling is based.\n\nBill Kent, in his 1978 book ''Data and Reality,''<ref>{{citation|title=Data and Reality |url=http://www.bkent.net/Doc/darxrp.htm}}</ref> compared a data model to a map of a territory, emphasizing that in the real world, \"highways are not painted red, rivers don't have county lines running down the middle, and you can't see contour lines on a mountain\". In contrast to other researchers who tried to create models that were mathematically clean and elegant, Kent emphasized the essential messiness of the real world, and the task of the data modeller to create order out of chaos without excessively distorting the truth.\n\nIn the 1980s, according to Jan L. Harrington (2000), \"the development of the [[object-oriented]] paradigm brought about a fundamental change in the way we look at data and the procedures that operate on data. Traditionally, data and procedures have been stored separately: the data and their relationship in a database, the procedures in an application program. Object orientation, however, combined an entity's procedure with its data.\"<ref name=\"JLH00\">Jan L. Harrington (2000). ''Object-oriented Database Design Clearly Explained''. p.4</ref>\n\n== Types ==\n\n=== Database model ===\n{{main|Database model}}\n\nA database model is a specification describing how a database is structured and used.\n\nSeveral such models have been suggested. Common models include:\n; [[Flat file database|Flat model]]\n: This may not strictly qualify as a data model.  The flat (or table) model consists of a single, two-dimensional array of data elements, where all members of a given column are assumed to be similar values, and all members of a row are assumed to be related to one another.\n; [[Hierarchical model]]\n: The hierarchical model is similar to the network model except that links in the hierarchical model form a tree structure, while the network model allows arbitrary graph.\n; [[Network model]]\n: This model organizes data using two fundamental constructs, called records and sets. Records contain fields, and sets define one-to-many relationships between records: one owner, many members. The network data model is an abstraction of the design concept used in the implementation of databases.\n; [[Relational model]]\n: is a database model based on first-order predicate logic. Its core idea is to describe a database as a collection of predicates over a finite set of predicate variables, describing constraints on the possible values and combinations of values. The power of the relational data model lies in its mathematical foundations and a simple user-level paradigm.\n; [[Object-relational model]]\n: Similar to a relational database model, but objects, classes and inheritance are directly supported in [[database schema]]s and in the query language.\n; [[Object-role modeling]]\n: A method of data modeling that has been defined as \"attribute free\", and \"fact based\". The result is a verifiably correct system, from which other common artifacts, such as ERD, UML, and semantic models may be derived. Associations between data objects are described during the database design procedure, such that normalization is an inevitable result of the process.\n; [[Star schema]]\n: The simplest style of data warehouse schema. The star schema consists of a few \"fact tables\" (possibly only one, justifying the name) referencing any number of \"dimension tables\". The star schema is considered an important special case of the [[snowflake schema]].\n\n<gallery class=\"center\">\nImage:FigFileConvert000a.svg|[[Flat file database|Flat model]]\nImage:Hierarchisches Datenbankmodell.svg|[[Hierarchical model]]\nImage:Network DB model.svg|[[Network model]]\nImage:Relational model concepts.png|[[Relational model]] \nImage:Company_codm.png|Concept-oriented model \nImage:Star-schema.png|[[Star schema]]\n</gallery>\n\n=== Data structure diagram ===\n{{main|Data structure diagram}}\n[[File:Aggregate Data Structure Diagram.jpg|thumb|240px|Example of a Data Structure Diagram]]\nA data structure diagram (DSD) is a [[diagram]] and data model used to describe [[Conceptual schema|conceptual data models]] by providing graphical notations which document [[entity class|entities]] and their [[Relational model|relationship]]s, and the [[Integrity constraints|constraint]]s that bind them. The basic graphic elements of DSDs are [[box]]es, representing entities, and [[arrow]]s, representing relationships. Data structure diagrams are most useful for documenting complex data entities.\n\nData structure diagrams are an extension of the [[entity-relationship model]] (ER model). In DSDs, [[Attribute (computing)|attribute]]s are specified inside the entity boxes rather than outside of them, while relationships are drawn as boxes composed of attributes which specify the constraints that bind entities together.  DSDs differ from the ER model in that the ER model focuses on the relationships between different entities, whereas DSDs focus on the relationships of the elements within an entity and enable users to fully see the links and relationships between each entity.\n\nThere are several styles for representing data structure diagrams, with the notable difference in the manner of defining [[Cardinality (data modeling)|cardinality]]. The choices are between arrow heads, inverted arrow heads ([[Entity-relationship model|crow's feet]]), or numerical representation of the cardinality.\n[[File:B 5 1 IDEF1X Diagram.jpg|thumb|240px|left|Example of an [[IDEF1X]] Entity relationship diagrams used to model IDEF1X itself<ref name=\"FIPS184\">[http://www.itl.nist.gov/fipspubs/idef1x.doc FIPS Publication 184] {{Webarchive|url=https://web.archive.org/web/20131203223034/http://www.itl.nist.gov/fipspubs/idef1x.doc |date=2013-12-03 }} released of IDEF1X by the Computer Systems Laboratory of the National Institute of Standards and Technology (NIST). 21 December 1993 (withdrawn in 2008).</ref>]]\n\n=== Entity-relationship model ===\n{{main|Entity-relationship model}}\nAn entity-relationship model (ERM), sometimes referred to as an entity-relationship diagram (ERD), could be used to represent an abstract [[conceptual schema|conceptual data model]] (or [[semantic data model]] or physical data model) used in [[software engineering]] to represent structured data. There are several notations used for ERMs. Like DSD's, [[Attribute (computing)|attribute]]s are specified inside the entity boxes rather than outside of them, while relationships are drawn as lines, with the relationship constraints as descriptions on the line. The E-R model, while robust, can become visually cumbersome when representing entities with several attributes.\n\nThere are several styles for representing data structure diagrams, with the notable difference in the manner of defining cardinality. The choices are between arrow heads, inverted arrow heads (crow's feet), or numerical representation of the cardinality.\n\n=== Geographic data model ===\n{{main|Data model (GIS)}}\nA data model in [[Geographic information system]]s is a mathematical construct for representing geographic objects or surfaces as data. For example, \n* the [[vector graphics|vector]] data model represents geography as collections of points, lines, and polygons;\n* the [[raster graphics|raster]] data model represent geography as cell matrixes that store numeric values;\n* and the [[Triangulated irregular network]] (TIN) data model represents geography as sets of contiguous, nonoverlapping triangles.<ref>Wade, T. and Sommer, S. eds. ''[http://store.esri.com/esri/showdetl.cfm?SID=2&Product_ID=868&Category_ID=49 A to Z GIS]''</ref>\n\n<gallery class=\"center\">\nImage:Groups relate to the process of making a map.jpg|Groups relate to process of making a map<ref name= \"DRS03\">David R. Soller1 and Thomas M. Berg (2003). [http://pubs.usgs.gov/of/2003/of03-471/soller1/index.html The National Geologic Map Database Project: Overview and Progress] U.S. Geological Survey Open-File Report 03\u2013471.</ref>\nImage:NGMDB data model application.jpg|NGMDB data model applications<ref name= \"DRS03\"/> \nImage:NGMDB databases linked together.jpg|NGMDB databases linked together<ref name= \"DRS03\"/> \nImage:Representing three-dimensional map information.jpg|Representing 3D  map information<ref name= \"DRS03\"/> \n</gallery>\n\n=== Generic data model ===\n{{main|Generic data model}}\nGeneric data models are generalizations of conventional data models. They define standardised general relation types, together with the kinds of things that may be related by such a relation type. Generic data models are developed as an approach to solve some shortcomings of conventional data models. For example, different modelers usually produce different conventional data models of the same domain. This can lead to difficulty in bringing the models of different people together and is an obstacle for data exchange and data integration. Invariably, however, this difference is attributable to different levels of abstraction in the models and differences in the kinds of facts that can be instantiated (the semantic expression capabilities of the models). The modelers need to communicate and agree on certain elements which are to be rendered more concretely, in order to make the differences less significant.\n\n=== Semantic data model ===\n{{main|Semantic data model}}\n[[File:A2 4 Semantic Data Models.svg|thumb|320px|Semantic data models<ref name=\"FIPS184\"/>]]\nA semantic data model in software engineering is a technique to define the meaning of data within the context of its interrelationships with other data. A semantic data model is an abstraction which defines how the stored symbols relate to the real world.<ref name=\"FIPS184\"/> A semantic data model is sometimes called a [[conceptual data model]].\n\nThe logical data structure of a [[database management system]] (DBMS), whether [[Hierarchical model|hierarchical]], [[Network model|network]], or [[Relational model|relational]], cannot totally satisfy the [[Requirements analysis|requirements]] for a conceptual definition of data because it is limited in scope and biased toward the implementation strategy employed by the DBMS. Therefore, the need to define data from a [[Three schema approach|conceptual view]] has led to the development of semantic data modeling techniques. That is, techniques to define the meaning of data within the context of its interrelationships with other data. As illustrated in the figure. The real world, in terms of resources, ideas, events, etc., are symbolically defined within physical data stores. A semantic data model is an abstraction which defines how the stored symbols relate to the real world. Thus, the model must be a true representation of the real world.<ref name=\"FIPS184\"/>\n\n== Topics ==\n\n=== Data architecture ===\n{{main|Data architecture}}\nData architecture is the design of data for use in defining the target state and the subsequent planning needed to hit the target state. It is usually one of several [[architecture domain]]s that form the pillars of an [[enterprise architecture]] or [[solution architecture]].\n\nA data architecture describes the data structures used by a business and/or its applications. There are descriptions of data in storage and data in motion; descriptions of data stores, data groups and data items; and mappings of those data artifacts to data qualities, applications, locations etc.\n\nEssential to realizing the target state, Data architecture describes how data is processed, stored, and utilized in a given system. It provides criteria for data processing operations that make it possible to design data flows and also control the flow of data in the system.\n\n=== Data modeling ===\n{{Main|Data modeling}}\n[[File:4-3 Data Modelling Today.svg|320px|thumb|The data modeling process]] \nData modeling in [[software engineering]] is the process of creating a data model by applying formal data model descriptions using data modeling techniques. Data modeling is a technique for defining business [[requirement]]s for a database. It is sometimes called ''database modeling'' because a data model is eventually implemented in a database.<ref name=\"WBD04\">[[Whitten, Jeffrey L.]]; [[Lonnie D. Bentley]], [[Kevin C. Dittman]]. (2004). ''Systems Analysis and Design Methods''. 6th edition. {{ISBN|0-256-19906-X}}.</ref>\n\nThe figure illustrates the way data models are developed and used today. A [[conceptual data model]] is developed based on the data [[requirements]] for the application that is being developed, perhaps in the context of an [[activity diagram|activity model]]. The data model will normally consist of entity types, attributes, relationships, integrity rules, and the definitions of those objects. This is then used as the start point for interface or [[database design]].<ref name=\"MW99\"/>\n\n=== Data properties ===\nSome important properties of data for which requirements need to be met are:\n* definition-related properties<ref name=\"MW99\"/>\n** ''relevance'': the usefulness of the data in the context of your business.\n** ''clarity'': the availability of a clear and shared definition for the data.\n** ''consistency'': the compatibility of the same type of data from different sources.\n[[File:3-2 Properties of data.svg|thumb|320px|Some important properties of data<ref name=\"MW99\"/>]]\n* content-related properties\n** ''timeliness'': the availability of data at the time required and how up to date that data is.\n** ''accuracy'': how close to the truth the data is.\n* properties related to both definition and content\n** ''completeness'': how much of the required data is available.\n** ''accessibility'': where, how, and to whom the data is available or not available (e.g. security).\n** ''cost'': the cost incurred in obtaining the data, and making it available for use.\n\n===Data organization===\nAnother kind of data model describes how to organize data using a [[database management system]] or other data management technology. It describes, for example, relational tables and columns or object-oriented classes and attributes. Such a data model is sometimes referred to as the ''[[physical data model]]'', but in the original ANSI three schema architecture, it is called \"logical\". In that architecture, the physical model describes the storage media (cylinders, tracks, and tablespaces). Ideally, this model is derived from the more conceptual data model described above. It may differ, however, to account for constraints like processing capacity and usage patterns.\n\nWhile ''data analysis'' is a common term for data modeling, the activity actually has more in common with the ideas and methods of ''[[wiktionary:synthesis|synthesis]]'' (inferring general concepts from particular instances) than it does with ''[[wiktionary:Analysis|analysis]]'' (identifying component concepts from more general ones).  {''Presumably we call ourselves [[systems analyst]]s because no one can say [[systems analyst|systems synthesist]]s.''}  Data modeling strives to bring the data structures of interest together into a cohesive, inseparable, whole by eliminating unnecessary data redundancies and by relating data structures with [[Relational model|relationship]]s.\n\nA different approach is to use [[adaptive system]]s such as [[artificial neural network]]s that can autonomously create implicit models of data.\n\n=== Data structure ===\n{{main|Data structure}}\n[[File:Binary tree.svg|thumb|240px|A [[binary tree]], a simple type of branching linked data structure]]\nA data structure is a way of storing data in a computer so that it can be used efficiently. It is an organization of mathematical and logical concepts of data. Often a carefully chosen data structure will allow the most [[algorithmic efficiency|efficient]] [[algorithm]] to be used. The choice of the data structure often begins from the choice of an [[abstract data type]].\n\nA data model describes the structure of the data within a given domain and, by implication, the underlying structure of that domain itself. This means that a data model in fact specifies a dedicated ''grammar'' for a dedicated artificial language for that domain. A data model represents classes of entities (kinds of things) about which a company wishes to hold information, the attributes of that information, and relationships among those entities and (often implicit) relationships among those attributes. The model describes the organization of the data to some extent irrespective of how data might be represented in a computer system.\n\nThe entities represented by a data model can be the tangible entities, but models that include such concrete entity classes tend to change over time. Robust data models often identify [[abstraction]]s of such entities. For example, a data model might include an entity class called \"Person\", representing all the people who interact with an organization. Such an [[abstract entity]] class is typically more appropriate than ones called \"Vendor\" or \"Employee\", which identify specific roles played by those people.\n\n<gallery class=\"center\">\nImage:Array of array storage.svg|Array\nImage:HASHTB08 en.svg|[[Hash table]]\nImage:Singly linked list insert after.png|[[Linked list]]\nImage:Data stack.svg|[[Stack (data structure)]]\n</gallery>\n\n=== Data model theory ===\nThe term data model can have two meanings:<ref name=\"Beynon-Davies P. 2004\">Beynon-Davies P. (2004). Database Systems 3rd Edition. Palgrave, Basingstoke, UK. {{ISBN|1-4039-1601-2}}</ref>\n# A data model ''theory'', i.e. a formal description of how data may be structured and accessed.\n# A data model ''instance'', i.e. applying a data model ''theory'' to create a practical data model ''instance'' for some particular application.\n\nA data model theory has three main components:<ref name=\"Beynon-Davies P. 2004\"/>\n* The structural part: a collection of data structures which are used to create databases representing the entities or objects modeled by the database.\n* The integrity part: a collection of rules governing the constraints placed on these data structures to ensure structural integrity.\n* The manipulation part: a collection of operators which can be applied to the data structures, to update and query the data contained in the database.\n\nFor example, in the [[relational model]], the structural part is based on a modified concept of the [[Relation (mathematics)|mathematical relation]]; the integrity part is expressed in [[first-order logic]] and the manipulation part is expressed using the [[relational algebra]], [[tuple calculus]] and [[domain calculus]].\n\nA data model instance is created by applying a data model theory. This is typically done to solve some business enterprise requirement. Business requirements are normally captured by a semantic [[logical data model]]. This is transformed into a physical data model instance from which is generated a physical database. For example, a data modeler may use a data modeling tool to create an [[entity-relationship model]] of the corporate data repository of some business enterprise. This model is transformed into a [[relational model]], which in turn generates a [[relational database]].\n\n=== Patterns ===\nPatterns<ref name=\"LSPA08\">\"The Data Model Resource Book: Universal Patterns for Data Modeling\"  Len Silverstone & Paul Agnew (2008).</ref> are common data modeling structures that occur in many data models.\n\n== Related models ==\n\n=== Data-flow diagram ===\n{{main|Data-flow diagram}}\n[[File:Data Flow Diagram Example.jpg|thumb|240px|Data-Flow Diagram example<ref>John Azzolini (2000). [http://ses.gsfc.nasa.gov/ses_data_2000/000712_Azzolini.ppt Introduction to Systems Engineering Practices]. July 2000.</ref>]]\n \nA data-flow diagram (DFD) is a graphical representation of the \"flow\" of data through an [[information system]]. It differs from the [[flowchart]] as it shows the ''data'' flow instead of the ''control'' flow of the program. A data-flow diagram can also be used for the [[Data visualization|visualization]] of [[data processing]] (structured design). Data-flow diagrams were invented by [[Larry Constantine]], the original developer of structured design,<ref>W. Stevens, G. Myers, L. Constantine, \"Structured Design\", IBM Systems Journal, 13 (2), 115-139, 1974.</ref> based on Martin and Estrin's \"data-flow graph\" model of computation.\n\nIt is common practice to draw a [[System context diagram|context-level data-flow diagram]] first which shows the interaction between the system and outside entities. The '''DFD''' is designed to show how a system is divided into smaller portions and to highlight the flow of data between those parts. This context-level data-flow diagram is then \"exploded\" to show more detail of the system being modeled\n\n=== Information model ===\n{{main|Information model}}\n[[File:A 01 Audio compact disc collection.svg|thumb|320px|Example of an [[EXPRESS (data modeling language)|EXPRESS G]] [[Information model]]]]\nAn Information model is not a type of data model, but more or less an alternative model. Within the field of software engineering both a data model and an information model can be abstract, formal representations of entity types that includes their properties, relationships and the operations that can be performed on them. The entity types in the model may be kinds of real-world objects, such as devices in a network, or they may themselves be abstract, such as for the entities used in a billing system. Typically, they are used to model a constrained domain that can be described by a closed set of entity types, properties, relationships and operations.\n\nAccording to Lee (1999)<ref name=\"Lee99\"/>  an information model is a representation of concepts, relationships, constraints, rules, and [[Operation (mathematics)|operations]] to specify [[Semantic data model|data semantics]] for a chosen domain of discourse. It can provide sharable, stable, and organized structure of information requirements for the domain context.<ref name=\"Lee99\">Y. Tina Lee (1999). [http://www.mel.nist.gov/msidlibrary/doc/tina99im.pdf \"Information modeling from design to implementation\"] National Institute of Standards and Technology.</ref> More in general the term ''information model'' is used for models of individual things, such as facilities, buildings, process plants, etc. In those cases the concept is specialised to [[Facility Information Model]], [[Building information modeling|Building Information Model]], Plant Information Model, etc. Such an information model is an integration of a model of the facility with the data and documents about the facility.\n\nAn information model provides formalism to the description of a problem domain without constraining how that description is mapped to an actual implementation in software. There may be many mappings of the information model. Such mappings are called data models, irrespective of whether they are [[object model]]s (e.g. using [[Unified Modeling Language|UML]]), [[Entity-relationship model|entity relationship model]]s or [[XML schema]]s.\n\n[[File:JKDOM.SVG|thumb|180px|left|[[Document Object Model]], a standard [[object model]] for representing [[HTML]] or [[XML]]]]\n\n=== Object model ===\n{{main|Object model}}\nAn object model in computer science is a collection of objects or classes through which a program can examine and manipulate some specific parts of its world. In other words, the object-oriented interface to some service or system. Such an interface is said to be the ''object model of'' the represented service or system.  For example, the [[Document Object Model|Document Object Model (DOM)]] [http://www.w3.org/DOM/] is a collection of objects that represent a [[web page|page]] in a [[web browser]], used by [[scripting language|script]] programs to examine and dynamically change the page.  There is a [[Microsoft Excel]] object model<ref>[http://msdn2.microsoft.com/en-us/library/wss56bz7.aspx Excel Object Model Overview<!-- Bot generated title -->]</ref> for controlling Microsoft Excel from another program, and the [[ASCOM (standard)|ASCOM]] Telescope Driver<ref>{{cite web|url=http://ascom-standards.org/Standards/Requirements.htm |title=ASCOM General Requirements|date=2011-05-13 |accessdate=2014-09-25}}</ref> is an object model for controlling an astronomical telescope.\n\nIn [[computing]] the term ''object model'' has a distinct second  meaning of the general properties of [[object (computer science)|objects]] in a specific computer [[programming language]], technology, notation or [[methodology]] that uses them. For example, the ''[[Java (programming language)|Java]] object model'', the ''[[Component Object Model|COM]] object model'', or ''the object model of [[object-modeling technique|OMT]]''.  Such object models are usually defined using concepts such as [[class (computer science)|class]], [[message (computer science)|message]], [[inheritance (computer science)|inheritance]], [[polymorphism in object-oriented programming|polymorphism]], and [[information hiding|encapsulation]].  There is an extensive literature on formalized object models as a subset of the [[formal semantics of programming languages]].\n\n=== Object-Role Model ===\n{{main|Object-Role Modeling}}\n[[File:Schema for Geologic Surface.svg|thumb|320px|Example of the application of Object-Role Modeling in a \"Schema for Geologic Surface\", Stephen M. Richard (1999)<ref name=\"SMR99\">Stephen M. Richard (1999). [http://pubs.usgs.gov/of/1999/of99-386/richard.html Geologic Concept Modeling]. U.S. Geological Survey Open-File Report 99-386.</ref>]]\nObject-Role Modeling (ORM) is a method for [[conceptual modeling]], and can be used as a tool for information and rules analysis.<ref>Joachim Rossberg and Rickard Redler (2005). ''Pro Scalable .NET 2.0 Application Designs.''. Page 27</ref>\n\nObject-Role Modeling is a fact-oriented method for performing [[systems analysis]] at the conceptual level. The quality of a database application depends critically on its design. To help ensure correctness, clarity, adaptability and productivity, information systems are best specified first at the conceptual level, using concepts and language that people can readily understand.\n\nThe conceptual design may include data, process and behavioral perspectives, and the actual DBMS used to implement the design might be based on one of many logical data models (relational, hierarchic, network, object-oriented etc.).<ref name = \"msd\">[http://msdn2.microsoft.com/en-us/library/aa290383(VS.71).aspx Object Role Modeling: An Overview (msdn.microsoft.com)]. Retrieved 19 September 2008.</ref>\n\n=== Unified Modeling Language models ===\n{{main|Unified Modeling Language}}\nThe Unified Modeling Language (UML) is a standardized general-purpose [[modeling language]] in the field of [[software engineering]]. It is a [[Visual language|graphical language]] for visualizing, specifying, constructing, and documenting the [[Artifact (software development)|artifacts]] of a software-intensive system. The Unified Modeling Language offers a standard way to write a system's blueprints, including:<ref name=\"OMG00\">Grady Booch, Ivar Jacobson & Jim Rumbaugh (2005) [https://pdfs.semanticscholar.org/f6b0/0ae65bc03ae3e2dc1edd8d9d1af3ea96f750.pdf OMG Unified Modeling Language Specification].</ref>\n* Conceptual things such as [[business process]]es and system functions\n* Concrete things such as [[programming language]] statements, database schemas, and\n* Reusable [[Component-based software engineering|software components]].\nUML offers a mix of [[functional model]]s, data models, and [[database model]]s.\n\n== See also ==\n* [[Business process model]]\n* [[Core Architecture Data Model]]\n* [[Data dictionary]]\n* [[JC3IEDM]]\n* [[Process model]]\n* [[Data Format Description Language|Data Format Description Language (DFDL)]]\n* [[Data collection system]]\n\n== References ==\n{{Reflist|30em}}\n\n== Further reading ==\n* David C. Hay (1996). ''[https://books.google.com/books?id=eUQbAAAAQBAJ&printsec=frontcover&dq=%22Data+Model+Patterns:+Conventions+of+Thought%22&hl=en&sa=X&ved=0ahUKEwi6iYSYpt7iAhUM16wKHRk9DgoQ6AEIKjAA#v=onepage&q=%22Data%20Model%20Patterns%3A%20Conventions%20of%20Thought%22&f=false Data Model Patterns: Conventions of Thought]''. New York:Dorset House Publishers, Inc.\n* Len Silverston (2001). ''The Data Model Resource Book'' Volume 1/2. John Wiley & Sons.\n* Len Silverston & Paul Agnew (2008). ''The Data Model Resource Book: Universal Patterns for data Modeling'' Volume 3. John Wiley & Sons.\n* Matthew West and Julian Fowler (1999). ''[https://sites.google.com/site/drmatthewwest/publications/princ03.pdf?attredirects=0&d=1 Developing High Quality Data Models].'' The European Process Industries STEP Technical Liaison Executive (EPISTLE).\n* Matthew West (2011) ''[http://store.elsevier.com/product.jsp?isbn=9780123751065 Developing High Quality Data Models]'' Morgan Kaufmann\n\n{{Data model}}\n{{Software engineering}}\n\n{{DEFAULTSORT:Data Model}}\n[[Category:Data modeling| ]]\n", "text_old": "A '''data model''' (or '''datamodel'''<ref>{{cite web|title= datamodel - UML Domain Modeling - Stack Overflow|url= https://stackoverflow.com/a/3835214|website= Stack Overflow|publisher= Stack Exchange Inc.|accessdate= 4 February 2017}}</ref><ref name=\"w3cxpath\">{{cite web|title= XQuery and XPath Data Model 3.1|url= https://www.w3.org/TR/xpath-datamodel-3/|website= World Wide Web Consortium (W3C)|publisher= W3C|accessdate= 4 February 2017}}</ref><ref name=\"npmdatamodel\">{{cite web|title= datamodel|url= https://www.npmjs.com/package/datamodel|website= npm|publisher= npm, Inc.|accessdate= 4 February 2017}}</ref><ref>{{cite web|title= DataModel (Java EE 6)|url= http://docs.oracle.com/javaee/6/api/javax/faces/model/DataModel.html|website= Java Documentation|publisher= Oracle|accessdate= 4 February 2017}}</ref><ref>{{cite web|last1= Ostrovskiy|first1= Stan|title= iOS: Three ways to pass data from Model to Controller|url= https://medium.com/ios-os-x-development/ios-three-ways-to-pass-data-from-model-to-controller-b47cc72a4336#.ma7pr7no7|website= Medium|publisher= A Medium Corporation|accessdate= 4 February 2017}}</ref>) is an abstract model that organizes elements of [[data]] and standardizes how they relate to one another and to the properties of real-world entities. For instance, a data model may specify that the data element representing a car be composed of a number of other elements which, in turn, represent the color and size of the car and define its owner.\n\nThe term '''data model''' can refer to two distinct but closely related concepts. Sometimes it refers to an abstract formalization of the objects and relationships found in a particular application domain: for example the customers, products, and orders found in a manufacturing organization. At other times it refers to the set of concepts used in defining such formalizations: for example concepts such as entities, attributes, relations, or tables. So the \"data model\" of a banking application may be defined using the entity-relationship \"data model\". This article uses the term in both senses.\n\n[[File:Data modeling context.svg|thumb|360px| Overview of a data-modeling context: Data model is based on Data, Data relationship, Data semantic and Data constraint. A data model provides the details of [[information]] to be stored, and is of primary use when the final product is the generation of computer [[software code]] for an application or the preparation of a [[functional specification]] to aid a [[computer software]] make-or-buy decision. The figure is an example of the interaction between [[business process modeling |process]] and data models.<ref name=\"SS93\">Paul R. Smith & Richard Sarfaty Publications, LLC 2009</ref>]]\n\nA data model explicitly determines the structure of data. Data models are typically specified by a data specialist, data librarian, or a digital humanities scholar in a [[data modeling]] notation. These notations are often represented in graphical form.<ref name=\"MRM99\">\nMichael R. McCaleb (1999). [http://nvl.nist.gov/pub/nistpubs/jres/104/4/html/j44mac.htm#apa \"A Conceptual Data Model of Datum Systems\"] {{Webarchive\n|url= https://web.archive.org/web/20080921063005/http://nvl.nist.gov/pub/nistpubs/jres/104/4/html/j44mac.htm#apa |date= 2008-09-21 \n}}. National Institute of Standards and Technology. August 1999.\n</ref>\n\nA data model can sometimes be referred to as a [[data structure]], especially in the context of [[programming language]]s. Data models are often complemented by [[function model]]s, especially in the context of [[enterprise model]]s.\n\n== Overview ==\nManaging large quantities of structured and [[unstructured data]] is a primary function of [[information system]]s. Data models describe the structure, manipulation and integrity aspects of the data stored in data management systems such as relational databases. They typically do not describe unstructured data, such as [[Word processor|word processing]] documents, [[Email|email messages]], pictures, digital audio, and video.\n\n=== The role of data models ===\n[[File:3-4 Data model roles.svg|thumb|320px|How data models deliver benefit<ref name=\"MW99\">Matthew West and Julian Fowler (1999). [https://sites.google.com/site/drmatthewwest/publications/princ03.pdf Developing High Quality Data Models]. The European Process Industries STEP Technical Liaison Executive (EPISTLE).</ref>]]\nThe main aim of data models is to support the development of [[information system]]s by providing the definition and format of data. According to West and Fowler (1999) \"if this is done consistently across systems then compatibility of data can be achieved. If the same data structures are used to store and access data then different applications can share data. The results of this are indicated above. However, systems and interfaces often cost more than they should, to build, operate, and maintain. They may also constrain the business rather than support it. A major cause is that the quality of the data models implemented in systems and interfaces is poor\".<ref name=\"MW99\"/>\n* \"Business rules, specific to how things are done in a particular place, are often fixed in the structure of a data model. This means that small changes in the way business is conducted lead to large changes in computer systems and interfaces\".<ref name=\"MW99\"/>\n* \"Entity types are often not identified, or incorrectly identified. This can lead to replication of data, data structure, and functionality, together with the attendant costs of that duplication in development and maintenance\".<ref name=\"MW99\"/>\n* \"Data models for different systems are arbitrarily different. The result of this is that complex interfaces are required between systems that share data. These interfaces can account for between 25-70% of the cost of current systems\".<ref name=\"MW99\"/>\n* \"Data cannot be shared electronically with customers and suppliers, because the structure and meaning of data has not been standardized. For example, engineering design data and drawings for process plant are still sometimes exchanged on paper\".<ref name=\"MW99\"/>\nThe reason for these problems is a lack of standards that will ensure that data models will both meet business needs and be consistent.<ref name=\"MW99\"/> \n\nA data model explicitly determines the structure of data. Typical applications of data models include database models, design of information systems, and enabling exchange of data. Usually data models are specified in a data modeling language.[3]\n\n=== Three perspectives ===\n[[File:4-2 ANSI-SPARC three level architecture.svg|thumb|320px|The ANSI/SPARC [[Three schema approach|three level architecture]]. This shows that a data model can be an external model (or view), a conceptual model, or a physical model. This is not the only way to look at data models, but it is a useful way, particularly when comparing models.<ref name=\"MW99\"/>]]\nA data model ''instance'' may be one of three kinds according to [[ANSI]] in 1975:<ref>American National Standards Institute. 1975. ''ANSI/X3/SPARC Study Group on Data Base Management Systems; Interim Report''. FDT (Bulletin of ACM SIGMOD) 7:2.</ref>\n* [[Conceptual data model]] :  describes the semantics of a domain, being the scope of the model. For example, it may be a model of the interest area of an organization or industry. This consists of entity classes, representing kinds of things of significance in the domain, and relationship assertions about associations between pairs of entity classes. A conceptual schema specifies the kinds of facts or propositions that can be expressed using the model. In that sense, it defines the allowed expressions in an artificial 'language' with a scope that is limited by the scope of the model.\n* [[Logical data model]] : describes the semantics, as represented by a particular data manipulation technology.  This consists of descriptions of tables and columns, object oriented classes, and XML tags, among other things.\n* [[Physical data model]] : describes the physical means by which data are stored.  This is concerned with partitions, CPUs, tablespaces, and the like.\n\nThe significance of this approach, according to ANSI, is that it allows the three perspectives to be relatively independent of each other. Storage technology can change without affecting either the logical or the conceptual model. The table/column structure can change without (necessarily) affecting the conceptual model.  In each case, of course, the structures must remain consistent with the other model.  The table/column structure may be different from a direct translation of the entity classes and attributes, but it must ultimately carry out the objectives of the conceptual entity class structure.  Early phases of many software development projects emphasize the design of a [[Conceptual schema|conceptual data model]]. Such a design can be detailed into a [[logical data model]]. In later stages, this model may be translated into [[physical data model]]. However, it is also possible to implement a conceptual model directly.\n\n== History ==\nOne of the earliest pioneering works in modelling information systems was done by Young and Kent (1958),<ref>Young, J. W., and Kent, H. K. (1958). \"Abstract Formulation of Data Processing Problems\". In: ''Journal of Industrial Engineering''. Nov-Dec 1958. 9(6), pp. 471-479</ref><ref name=\"JAB07\">[[Janis A. Bubenko jr]] (2007) \"From Information Algebra to Enterprise Modelling and Ontologies - a Historical Perspective on Modelling for Information Systems\". In: ''Conceptual Modelling in Information Systems Engineering''. [[:w:John Krogstie|John Krogstie]] et al. eds. pp 1-18</ref> who argued for \"a precise and abstract way of specifying the informational and time characteristics of a [[data processing]] problem\". They wanted to create \"a notation that should enable the [[Systems analyst|analyst]] to organize the problem around any piece of [[computer hardware|hardware]]\". Their work was a first effort to create an abstract specification and invariant basis for designing different alternative implementations using different hardware components. A next step in IS modelling was taken by [[CODASYL]], an IT industry consortium formed in 1959, who essentially aimed at the same thing as Young and Kent: the development of \"a proper structure for machine independent problem definition language, at the system level of data processing\". This led to the development of a specific IS [[information algebra]].<ref name=\"JAB07\"/>\n\nIn the 1960s data modeling gained more significance with the initiation of the [[management information system]] (MIS) concept. According to Leondes (2002), \"during that time, the information system provided the data and information for management purposes. The first generation [[database system]], called [[Integrated Data Store]] (IDS), was designed by [[Charles Bachman]] at General Electric. Two famous database models, the [[network data model]] and the [[hierarchical data model]], were proposed during this period of time\".<ref>Cornelius T. Leondes (2002). ''Database and Data Communication Network Systems: Techniques and Applications''. Page 7</ref> Towards the end of the 1960s, [[Edgar F. Codd]] worked out his theories of data arrangement, and proposed the [[relational model]] for database management based on [[first-order logic|first-order predicate logic]].<ref>''\"Derivability, Redundancy, and Consistency of Relations Stored in Large Data Banks\"'', E.F. Codd, IBM Research Report, 1969</ref>\n\nIn the 1970s [[entity relationship model]]ing emerged as a new type of conceptual data modeling, originally proposed in 1976 by [[Peter Chen]]. Entity relationship models were being used in the first stage of [[information system]] design during the [[requirements analysis]] to describe information needs or the type of [[information]] that is to be stored in a [[database]]. This technique can describe any [[ontology (computer science)|ontology]], i.e., an overview and classification of concepts and their relationships, for a certain [[universe of discourse|area of interest]].\n\nIn the 1970s [[G.M. Nijssen]] developed \"Natural Language Information Analysis Method\" (NIAM) method, and developed this in the 1980s in cooperation with [[Terry Halpin]] into [[Object-Role Modeling]] (ORM). However, it was Terry Halpin's 1989 PhD thesis that created the formal foundation on which Object-Role Modeling is based.\n\nBill Kent, in his 1978 book ''Data and Reality,''<ref>{{citation|title=Data and Reality |url=http://www.bkent.net/Doc/darxrp.htm}}</ref> compared a data model to a map of a territory, emphasizing that in the real world, \"highways are not painted red, rivers don't have county lines running down the middle, and you can't see contour lines on a mountain\". In contrast to other researchers who tried to create models that were mathematically clean and elegant, Kent emphasized the essential messiness of the real world, and the task of the data modeller to create order out of chaos without excessively distorting the truth.\n\nIn the 1980s, according to Jan L. Harrington (2000), \"the development of the [[object-oriented]] paradigm brought about a fundamental change in the way we look at data and the procedures that operate on data. Traditionally, data and procedures have been stored separately: the data and their relationship in a database, the procedures in an application program. Object orientation, however, combined an entity's procedure with its data.\"<ref name=\"JLH00\">Jan L. Harrington (2000). ''Object-oriented Database Design Clearly Explained''. p.4</ref>\n\n== Types ==\n\n=== Database model ===\n{{main|Database model}}\n\nA database model is a specification describing how a database is structured and used.\n\nSeveral such models have been suggested. Common models include:\n; [[Flat file database|Flat model]]\n: This may not strictly qualify as a data model.  The flat (or table) model consists of a single, two-dimensional array of data elements, where all members of a given column are assumed to be similar values, and all members of a row are assumed to be related to one another.\n; [[Hierarchical model]]\n: The hierarchical model is similar to the network model except that links in the hierarchical model form a tree structure, while the network model allows arbitrary graph.\n; [[Network model]]\n: This model organizes data using two fundamental constructs, called records and sets. Records contain fields, and sets define one-to-many relationships between records: one owner, many members. The network data model is an abstraction of the design concept used in the implementation of databases.\n; [[Relational model]]\n: is a database model based on first-order predicate logic. Its core idea is to describe a database as a collection of predicates over a finite set of predicate variables, describing constraints on the possible values and combinations of values. The power of the relational data model lies in its mathematical foundations and a simple user-level paradigm.\n; [[Object-relational model]]\n: Similar to a relational database model, but objects, classes and inheritance are directly supported in [[database schema]]s and in the query language.\n; [[Object-role modeling]]\n: A method of data modeling that has been defined as \"attribute free\", and \"fact based\". The result is a verifiably correct system, from which other common artifacts, such as ERD, UML, and semantic models may be derived. Associations between data objects are described during the database design procedure, such that normalization is an inevitable result of the process.\n; [[Star schema]]\n: The simplest style of data warehouse schema. The star schema consists of a few \"fact tables\" (possibly only one\n, justifying the name) referencing any number of \"dimension tables\". The star schema is considered an important special case of the [[snowflake schema]].\n\n<gallery class=\"center\">\nImage:FigFileConvert000a.svg|[[Flat file database|Flat model]]\nImage:Hierarchisches Datenbankmodell.svg|[[Hierarchical model]]\nImage:Network DB model.svg|[[Network model]]\nImage:Relational model concepts.png|[[Relational model]] \nImage:Company_codm.png|Concept-oriented model \nImage:Star-schema.png|[[Star schema]]\n</gallery>\n\n=== Data structure diagram ===\n{{main|Data structure diagram}}\n[[File:Aggregate Data Structure Diagram.jpg|thumb|240px|Example of a Data Structure Diagram]]\nA data structure diagram (DSD) is a [[diagram]] and data model used to describe [[Conceptual schema|conceptual data models]] by providing graphical notations which document [[entity class|entities]] and their [[Relational model|relationship]]s, and the [[Integrity constraints|constraint]]s that bind them. The basic graphic elements of DSDs are [[box]]es, representing entities, and [[arrow]]s, representing relationships. Data structure diagrams are most useful for documenting complex data entities.\n\nData structure diagrams are an extension of the [[entity-relationship model]] (ER model). In DSDs, [[Attribute (computing)|attribute]]s are specified inside the entity boxes rather than outside of them, while relationships are drawn as boxes composed of attributes which specify the constraints that bind entities together.  DSDs differ from the ER model in that the ER model focuses on the relationships between different entities, whereas DSDs focus on the relationships of the elements within an entity and enable users to fully see the links and relationships between each entity.\n\nThere are several styles for representing data structure diagrams, with the notable difference in the manner of defining [[Cardinality (data modeling)|cardinality]]. The choices are between arrow heads, inverted arrow heads ([[Entity-relationship model|crow's feet]]), or numerical representation of the cardinality.\n[[File:B 5 1 IDEF1X Diagram.jpg|thumb|240px|left|Example of an [[IDEF1X]] Entity relationship diagrams used to model IDEF1X itself<ref name=\"FIPS184\">[http://www.itl.nist.gov/fipspubs/idef1x.doc FIPS Publication 184] {{Webarchive|url=https://web.archive.org/web/20131203223034/http://www.itl.nist.gov/fipspubs/idef1x.doc |date=2013-12-03 }} released of IDEF1X by the Computer Systems Laboratory of the National Institute of Standards and Technology (NIST). 21 December 1993 (withdrawn in 2008).</ref>]]\n\n=== Entity-relationship model ===\n{{main|Entity-relationship model}}\nAn entity-relationship model (ERM), sometimes referred to as an entity-relationship diagram (ERD), could be used to represent an abstract [[conceptual schema|conceptual data model]] (or [[semantic data model]] or physical data model) used in [[software engineering]] to represent structured data. There are several notations used for ERMs. Like DSD's, [[Attribute (computing)|attribute]]s are specified inside the entity boxes rather than outside of them, while relationships are drawn as lines, with the relationship constraints as descriptions on the line. The E-R model, while robust, can become visually cumbersome when representing entities with several attributes.\n\nThere are several styles for representing data structure diagrams, with the notable difference in the manner of defining cardinality. The choices are between arrow heads, inverted arrow heads (crow's feet), or numerical representation of the cardinality.\n\n=== Geographic data model ===\n{{main|Data model (GIS)}}\nA data model in [[Geographic information system]]s is a mathematical construct for representing geographic objects or surfaces as data. For example, \n* the [[vector graphics|vector]] data model represents geography as collections of points, lines, and polygons;\n* the [[raster graphics|raster]] data model represent geography as cell matrixes that store numeric values;\n* and the [[Triangulated irregular network]] (TIN) data model represents geography as sets of contiguous, nonoverlapping triangles.<ref>Wade, T. and Sommer, S. eds. ''[http://store.esri.com/esri/showdetl.cfm?SID=2&Product_ID=868&Category_ID=49 A to Z GIS]''</ref>\n\n<gallery class=\"center\">\nImage:Groups relate to the process of making a map.jpg|Groups relate to process of making a map<ref name= \"DRS03\">David R. Soller1 and Thomas M. Berg (2003). [http://pubs.usgs.gov/of/2003/of03-471/soller1/index.html The National Geologic Map Database Project: Overview and Progress] U.S. Geological Survey Open-File Report 03\u2013471.</ref>\nImage:NGMDB data model application.jpg|NGMDB data model applications<ref name= \"DRS03\"/> \nImage:NGMDB databases linked together.jpg|NGMDB databases linked together<ref name= \"DRS03\"/> \nImage:Representing three-dimensional map information.jpg|Representing 3D  map information<ref name= \"DRS03\"/> \n</gallery>\n\n=== Generic data model ===\n{{main|Generic data model}}\nGeneric data models are generalizations of conventional data models. They define standardised general relation types, together with the kinds of things that may be related by such a relation type. Generic data models are developed as an approach to solve some shortcomings of conventional data models. For example, different modelers usually produce different conventional data models of the same domain. This can lead to difficulty in bringing the models of different people together and is an obstacle for data exchange and data integration. Invariably, however, this difference is attributable to different levels of abstraction in the models and differences in the kinds of facts that can be instantiated (the semantic expression capabilities of the models). The modelers need to communicate and agree on certain elements which are to be rendered more concretely, in order to make the differences less significant.\n\n=== Semantic data model ===\n{{main|Semantic data model}}\n[[File:A2 4 Semantic Data Models.svg|thumb|320px|Semantic data models<ref name=\"FIPS184\"/>]]\nA semantic data model in software engineering is a technique to define the meaning of data within the context of its interrelationships with other data. A semantic data model is an abstraction which defines how the stored symbols relate to the real world.<ref name=\"FIPS184\"/> A semantic data model is sometimes called a [[conceptual data model]].\n\nThe logical data structure of a [[database management system]] (DBMS), whether [[Hierarchical model|hierarchical]], [[Network model|network]], or [[Relational model|relational]], cannot totally satisfy the [[Requirements analysis|requirements]] for a conceptual definition of data because it is limited in scope and biased toward the implementation strategy employed by the DBMS. Therefore, the need to define data from a [[Three schema approach|conceptual view]] has led to the development of semantic data modeling techniques. That is, techniques to define the meaning of data within the context of its interrelationships with other data. As illustrated in the figure. The real world, in terms of resources, ideas, events, etc., are symbolically defined within physical data stores. A semantic data model is an abstraction which defines how the stored symbols relate to the real world. Thus, the model must be a true representation of the real world.<ref name=\"FIPS184\"/>\n\n== Topics ==\n\n=== Data architecture ===\n{{main|Data architecture}}\nData architecture is the design of data for use in defining the target state and the subsequent planning needed to hit the target state. It is usually one of several [[architecture domain]]s that form the pillars of an [[enterprise architecture]] or [[solution architecture]].\n\nA data architecture describes the data structures used by a business and/or its applications. There are descriptions of data in storage and data in motion; descriptions of data stores, data groups and data items; and mappings of those data artifacts to data qualities, applications, locations etc.\n\nEssential to realizing the target state, Data architecture describes how data is processed, stored, and utilized in a given system. It provides criteria for data processing operations that make it possible to design data flows and also control the flow of data in the system.\n\n=== Data modeling ===\n{{Main|Data modeling}}\n[[File:4-3 Data Modelling Today.svg|320px|thumb|The data modeling process]] \nData modeling in [[software engineering]] is the process of creating a data model by applying formal data model descriptions using data modeling techniques. Data modeling is a technique for defining business [[requirement]]s for a database. It is sometimes called ''database modeling'' because a data model is eventually implemented in a database.<ref name=\"WBD04\">[[Whitten, Jeffrey L.]]; [[Lonnie D. Bentley]], [[Kevin C. Dittman]]. (2004). ''Systems Analysis and Design Methods''. 6th edition. {{ISBN|0-256-19906-X}}.</ref>\n\nThe figure illustrates the way data models are developed and used today. A [[conceptual data model]] is developed based on the data [[requirements]] for the application that is being developed, perhaps in the context of an [[activity diagram|activity model]]. The data model will normally consist of entity types, attributes, relationships, integrity rules, and the definitions of those objects. This is then used as the start point for interface or [[database design]].<ref name=\"MW99\"/>\n\n=== Data properties ===\nSome important properties of data for which requirements need to be met are:\n* definition-related properties<ref name=\"MW99\"/>\n** ''relevance'': the usefulness of the data in the context of your business.\n** ''clarity'': the availability of a clear and shared definition for the data.\n** ''consistency'': the compatibility of the same type of data from different sources.\n[[File:3-2 Properties of data.svg|thumb|320px|Some important properties of data<ref name=\"MW99\"/>]]\n* content-related properties\n** ''timeliness'': the availability of data at the time required and how up to date that data is.\n** ''accuracy'': how close to the truth the data is.\n* properties related to both definition and content\n** ''completeness'': how much of the required data is available.\n** ''accessibility'': where, how, and to whom the data is available or not available (e.g. security).\n** ''cost'': the cost incurred in obtaining the data, and making it available for use.\n\n===Data organization===\nAnother kind of data model describes how to organize data using a [[database management system]] or other data management technology. It describes, for example, relational tables and columns or object-oriented classes and attributes. Such a data model is sometimes referred to as the ''[[physical data model]]'', but in the original ANSI three schema architecture, it is called \"logical\". In that architecture, the physical model describes the storage media (cylinders, tracks, and tablespaces). Ideally, this model is derived from the more conceptual data model described above. It may differ, however, to account for constraints like processing capacity and usage patterns.\n\nWhile ''data analysis'' is a common term for data modeling, the activity actually has more in common with the ideas and methods of ''[[wiktionary:synthesis|synthesis]]'' (inferring general concepts from particular instances) than it does with ''[[wiktionary:Analysis|analysis]]'' (identifying component concepts from more general ones).  {''Presumably we call ourselves [[systems analyst]]s because no one can say [[systems analyst|systems synthesist]]s.''}  Data modeling strives to bring the data structures of interest together into a cohesive, inseparable, whole by eliminating unnecessary data redundancies and by relating data structures with [[Relational model|relationship]]s.\n\nA different approach is to use [[adaptive system]]s such as [[artificial neural network]]s that can autonomously create implicit models of data.\n\n=== Data structure ===\n{{main|Data structure}}\n[[File:Binary tree.svg|thumb|240px|A [[binary tree]], a simple type of branching linked data structure]]\nA data structure is a way of storing data in a computer so that it can be used efficiently. It is an organization of mathematical and logical concepts of data. Often a carefully chosen data structure will allow the most [[algorithmic efficiency|efficient]] [[algorithm]] to be used. The choice of the data structure often begins from the choice of an [[abstract data type]].\n\nA data model describes the structure of the data within a given domain and, by implication, the underlying structure of that domain itself. This means that a data model in fact specifies a dedicated ''grammar'' for a dedicated artificial language for that domain. A data model represents classes of entities (kinds of things) about which a company wishes to hold information, the attributes of that information, and relationships among those entities and (often implicit) relationships among those attributes. The model describes the organization of the data to some extent irrespective of how data might be represented in a computer system.\n\nThe entities represented by a data model can be the tangible entities, but models that include such concrete entity classes tend to change over time. Robust data models often identify [[abstraction]]s of such entities. For example, a data model might include an entity class called \"Person\", representing all the people who interact with an organization. Such an [[abstract entity]] class is typically more appropriate than ones called \"Vendor\" or \"Employee\", which identify specific roles played by those people.\n\n<gallery class=\"center\">\nImage:Array of array storage.svg|Array\nImage:HASHTB08 en.svg|[[Hash table]]\nImage:Singly linked list insert after.png|[[Linked list]]\nImage:Data stack.svg|[[Stack (data structure)]]\n</gallery>\n\n=== Data model theory ===\nThe term data model can have two meanings:<ref name=\"Beynon-Davies P. 2004\">Beynon-Davies P. (2004). Database Systems 3rd Edition. Palgrave, Basingstoke, UK. {{ISBN|1-4039-1601-2}}</ref>\n# A data model ''theory'', i.e. a formal description of how data may be structured and accessed.\n# A data model ''instance'', i.e. applying a data model ''theory'' to create a practical data model ''instance'' for some particular application.\n\nA data model theory has three main components:<ref name=\"Beynon-Davies P. 2004\"/>\n* The structural part: a collection of data structures which are used to create databases representing the entities or objects modeled by the database.\n* The integrity part: a collection of rules governing the constraints placed on these data structures to ensure structural integrity.\n* The manipulation part: a collection of operators which can be applied to the data structures, to update and query the data contained in the database.\n\nFor example, in the [[relational model]], the structural part is based on a modified concept of the [[Relation (mathematics)|mathematical relation]]; the integrity part is expressed in [[first-order logic]] and the manipulation part is expressed using the [[relational algebra]], [[tuple calculus]] and [[domain calculus]].\n\nA data model instance is created by applying a data model theory. This is typically done to solve some business enterprise requirement. Business requirements are normally captured by a semantic [[logical data model]]. This is transformed into a physical data model instance from which is generated a physical database. For example, a data modeler may use a data modeling tool to create an [[entity-relationship model]] of the corporate data repository of some business enterprise. This model is transformed into a [[relational model]], which in turn generates a [[relational database]].\n\n=== Patterns ===\nPatterns<ref name=\"LSPA08\">\"The Data Model Resource Book: Universal Patterns for Data Modeling\"  Len Silverstone & Paul Agnew (2008).</ref> are common data modeling structures that occur in many data models.\n\n== Related models ==\n\n=== Data-flow diagram ===\n{{main|Data-flow diagram}}\n[[File:Data Flow Diagram Example.jpg|thumb|240px|Data-Flow Diagram example<ref>John Azzolini (2000). [http://ses.gsfc.nasa.gov/ses_data_2000/000712_Azzolini.ppt Introduction to Systems Engineering Practices]. July 2000.</ref>]]\n \nA data-flow diagram (DFD) is a graphical representation of the \"flow\" of data through an [[information system]]. It differs from the [[flowchart]] as it shows the ''data'' flow instead of the ''control'' flow of the program. A data-flow diagram can also be used for the [[Data visualization|visualization]] of [[data processing]] (structured design). Data-flow diagrams were invented by [[Larry Constantine]], the original developer of structured design,<ref>W. Stevens, G. Myers, L. Constantine, \"Structured Design\", IBM Systems Journal, 13 (2), 115-139, 1974.</ref> based on Martin and Estrin's \"data-flow graph\" model of computation.\n\nIt is common practice to draw a [[System context diagram|context-level data-flow diagram]] first which shows the interaction between the system and outside entities. The '''DFD''' is designed to show how a system is divided into smaller portions and to highlight the flow of data between those parts. This context-level data-flow diagram is then \"exploded\" to show more detail of the system being modeled\n\n=== Information model ===\n{{main|Information model}}\n[[File:A 01 Audio compact disc collection.svg|thumb|320px|Example of an [[EXPRESS (data modeling language)|EXPRESS G]] [[Information model]]]]\nAn Information model is not a type of data model, but more or less an alternative model. Within the field of software engineering both a data model and an information model can be abstract, formal representations of entity types that includes their properties, relationships and the operations that can be performed on them. The entity types in the model may be kinds of real-world objects, such as devices in a network, or they may themselves be abstract, such as for the entities used in a billing system. Typically, they are used to model a constrained domain that can be described by a closed set of entity types, properties, relationships and operations.\n\nAccording to Lee (1999)<ref name=\"Lee99\"/>  an information model is a representation of concepts, relationships, constraints, rules, and [[Operation (mathematics)|operations]] to specify [[Semantic data model|data semantics]] for a chosen domain of discourse. It can provide sharable, stable, and organized structure of information requirements for the domain context.<ref name=\"Lee99\">Y. Tina Lee (1999). [http://www.mel.nist.gov/msidlibrary/doc/tina99im.pdf \"Information modeling from design to implementation\"] National Institute of Standards and Technology.</ref> More in general the term ''information model'' is used for models of individual things, such as facilities, buildings, process plants, etc. In those cases the concept is specialised to [[Facility Information Model]], [[Building information modeling|Building Information Model]], Plant Information Model, etc. Such an information model is an integration of a model of the facility with the data and documents about the facility.\n\nAn information model provides formalism to the description of a problem domain without constraining how that description is mapped to an actual implementation in software. There may be many mappings of the information model. Such mappings are called data models, irrespective of whether they are [[object model]]s (e.g. using [[Unified Modeling Language|UML]]), [[Entity-relationship model|entity relationship model]]s or [[XML schema]]s.\n\n[[File:JKDOM.SVG|thumb|180px|left|[[Document Object Model]], a standard [[object model]] for representing [[HTML]] or [[XML]]]]\n\n=== Object model ===\n{{main|Object model}}\nAn object model in computer science is a collection of objects or classes through which a program can examine and manipulate some specific parts of its world. In other words, the object-oriented interface to some service or system. Such an interface is said to be the ''object model of'' the represented service or system.  For example, the [[Document Object Model|Document Object Model (DOM)]] [http://www.w3.org/DOM/] is a collection of objects that represent a [[web page|page]] in a [[web browser]], used by [[scripting language|script]] programs to examine and dynamically change the page.  There is a [[Microsoft Excel]] object model<ref>[http://msdn2.microsoft.com/en-us/library/wss56bz7.aspx Excel Object Model Overview<!-- Bot generated title -->]</ref> for controlling Microsoft Excel from another program, and the [[ASCOM (standard)|ASCOM]] Telescope Driver<ref>{{cite web|url=http://ascom-standards.org/Standards/Requirements.htm |title=ASCOM General Requirements|date=2011-05-13 |accessdate=2014-09-25}}</ref> is an object model for controlling an astronomical telescope.\n\nIn [[computing]] the term ''object model'' has a distinct second  meaning of the general properties of [[object (computer science)|objects]] in a specific computer [[programming language]], technology, notation or [[methodology]] that uses them. For example, the ''[[Java (programming language)|Java]] object model'', the ''[[Component Object Model|COM]] object model'', or ''the object model of [[object-modeling technique|OMT]]''.  Such object models are usually defined using concepts such as [[class (computer science)|class]], [[message (computer science)|message]], [[inheritance (computer science)|inheritance]], [[polymorphism in object-oriented programming|polymorphism]], and [[information hiding|encapsulation]].  There is an extensive literature on formalized object models as a subset of the [[formal semantics of programming languages]].\n\n=== Object-Role Model ===\n{{main|Object-Role Modeling}}\n[[File:Schema for Geologic Surface.svg|thumb|320px|Example of the application of Object-Role Modeling in a \"Schema for Geologic Surface\", Stephen M. Richard (1999)<ref name=\"SMR99\">Stephen M. Richard (1999). [http://pubs.usgs.gov/of/1999/of99-386/richard.html Geologic Concept Modeling]. U.S. Geological Survey Open-File Report 99-386.</ref>]]\nObject-Role Modeling (ORM) is a method for [[conceptual modeling]], and can be used as a tool for information and rules analysis.<ref>Joachim Rossberg and Rickard Redler (2005). ''Pro Scalable .NET 2.0 Application Designs.''. Page 27</ref>\n\nObject-Role Modeling is a fact-oriented method for performing [[systems analysis]] at the conceptual level. The quality of a database application depends critically on its design. To help ensure correctness, clarity, adaptability and productivity, information systems are best specified first at the conceptual level, using concepts and language that people can readily understand.\n\nThe conceptual design may include data, process and behavioral perspectives, and the actual DBMS used to implement the design might be based on one of many logical data models (relational, hierarchic, network, object-oriented etc.).<ref name = \"msd\">[http://msdn2.microsoft.com/en-us/library/aa290383(VS.71).aspx Object Role Modeling: An Overview (msdn.microsoft.com)]. Retrieved 19 September 2008.</ref>\n\n=== Unified Modeling Language models ===\n{{main|Unified Modeling Language}}\nThe Unified Modeling Language (UML) is a standardized general-purpose [[modeling language]] in the field of [[software engineering]]. It is a [[Visual language|graphical language]] for visualizing, specifying, constructing, and documenting the [[Artifact (software development)|artifacts]] of a software-intensive system. The Unified Modeling Language offers a standard way to write a system's blueprints, including:<ref name=\"OMG00\">Grady Booch, Ivar Jacobson & Jim Rumbaugh (2005) [https://pdfs.semanticscholar.org/f6b0/0ae65bc03ae3e2dc1edd8d9d1af3ea96f750.pdf OMG Unified Modeling Language Specification].</ref>\n* Conceptual things such as [[business process]]es and system functions\n* Concrete things such as [[programming language]] statements, database schemas, and\n* Reusable [[Component-based software engineering|software components]].\nUML offers a mix of [[functional model]]s, data models, and [[database model]]s.\n\n== See also ==\n* [[Business process model]]\n* [[Core Architecture Data Model]]\n* [[Data dictionary]]\n* [[JC3IEDM]]\n* [[Process model]]\n* [[Data Format Description Language|Data Format Description Language (DFDL)]]\n* [[Data collection system]]\n\n== References ==\n{{Reflist|30em}}\n\n== Further reading ==\n* David C. Hay (1996). ''[https://books.google.com/books?id=eUQbAAAAQBAJ&printsec=frontcover&dq=%22Data+Model+Patterns:+Conventions+of+Thought%22&hl=en&sa=X&ved=0ahUKEwi6iYSYpt7iAhUM16wKHRk9DgoQ6AEIKjAA#v=onepage&q=%22Data%20Model%20Patterns%3A%20Conventions%20of%20Thought%22&f=false Data Model Patterns: Conventions of Thought]''. New York:Dorset House Publishers, Inc.\n* Len Silverston (2001). ''The Data Model Resource Book'' Volume 1/2. John Wiley & Sons.\n* Len Silverston & Paul Agnew (2008). ''The Data Model Resource Book: Universal Patterns for data Modeling'' Volume 3. John Wiley & Sons.\n* Matthew West and Julian Fowler (1999). ''[https://sites.google.com/site/drmatthewwest/publications/princ03.pdf?attredirects=0&d=1 Developing High Quality Data Models].'' The European Process Industries STEP Technical Liaison Executive (EPISTLE).\n* Matthew West (2011) ''[http://store.elsevier.com/product.jsp?isbn=9780123751065 Developing High Quality Data Models]'' Morgan Kaufmann\n\n{{Data model}}\n{{Software engineering}}\n\n{{DEFAULTSORT:Data Model}}\n[[Category:Data modeling| ]]\n", "name_user": "Jordan Brown", "label": "safe", "comment": "rm inappropriate line break\u2192\u200eDatabase model", "url_page": "//en.wikipedia.org/wiki/Data_model"}
{"title_page": "Gregarinasina", "text_new": "{{Taxobox\n| name = \n| image =Septate gregarine.jpg\n| image_caption = A live specimen of a septate (or [[cephaline]]) gregarine showing the distinctive \"head\"-like section of the trophozoite containing the epimerite at its anterior end. Septate gregarines are intestinal [[parasite]]s of [[arthropod]]s.\n| domain = [[Eukaryota]]\t\n| unranked_regnum = [[SAR supergroup|SAR]]\n| unranked_superphylum = [[Alveolata]]\n| phylum = [[Apicomplexa]]\n| classis = [[Conoidasida]]\n| subclassis = '''Gregarinasina'''\n| subclassis_authority =\n| subdivision_ranks = Orders\n| subdivision = [[Archigregarinorida]]<br/>\n[[Eugregarinorida]]<br/>\n[[Neogregarinorida]]\n| synonyms =\n* Gregarinia\n}}\n\nThe '''gregarines''' are a group of [[Apicomplexa]]n alveolates, classified as the '''Gregarinasina'''<ref name=\"pmid10540950\">{{cite journal |vauthors=Carreno RA, Martin DS, Barta JR |title=Cryptosporidium is more closely related to the gregarines than to coccidia as shown by phylogenetic analysis of apicomplexan parasites inferred using small-subunit ribosomal RNA gene sequences |journal=Parasitol. Res. |volume=85 |issue=11 |pages=899\u2013904 |date=November 1999 |pmid=10540950 |doi=10.1007/s004360050655 |url=http://link.springer.de/link/service/journals/00436/bibs/9085011/90850899.htm |url-status=dead |archiveurl=https://web.archive.org/web/20010320224750/http://link.springer.de/link/service/journals/00436/bibs/9085011/90850899.htm |archivedate=2001-03-20 }}</ref> or '''Gregarinia'''. The large (roughly half a millimeter) parasites inhabit the intestines of many invertebrates. They are not found in any vertebrates. However, gregarines are closely related to both ''[[Toxoplasma]]'' and ''[[Plasmodium]]'', which cause [[toxoplasmosis]] and [[malaria]], respectively. Both protists use protein complexes similar to those that are formed by the gregarines for [[gliding motility]] and invading target cells.<ref name=Menard2001>{{cite journal |author=M\u00e9nard R |title=Gliding motility and cell invasion by Apicomplexa: insights from the Plasmodium sporozoite |journal=Cell. Microbiol. |volume=3 |issue=2 |pages=63\u201373 |date=February 2001 |pmid=11207621 |doi=10.1046/j.1462-5822.2001.00097.x }}</ref><ref name=Meissner2002>{{cite journal |vauthors=Meissner M, Schl\u00fcter D, Soldati D |title=Role of ''Toxoplasma gondii'' myosin A in powering parasite gliding and host cell invasion |journal=Science |volume=298 |issue=5594 |pages=837\u201340 |date=October 2002 |pmid=12399593 |doi=10.1126/science.1074553 |url=http://archive-ouverte.unige.ch/unige:78026 }}</ref> This makes them an excellent model for studying gliding motility with the goal of developing treatment options for toxoplasmosis and malaria.\nThousands of different species of gregarines are estimated to be found in [[insect]]s and that 99% of these gregarines still need to be described. Each insect can be the host of multiple species.<ref>{{cite journal |last1=Valigurov\u00e1 |first1=Andrea |last2=Koudela |first2=B\u0159etislav |title=Morphological analysis of the cellular interactions between the eugregarine Gregarina garnhami (Apicomplexa) and the epithelium of its host, the desert locust Schistocerca gregaria |journal=European Journal of Protistology |date=August 2008 |volume=44 |issue=3 |pages=197\u2013207 |doi=10.1016/j.ejop.2007.11.006|pmid=18304787 |taal=en}}</ref><ref>{{cite book |last1=Lange |first1=C.E. |last2=Lord |first2=J.C. |title=Insect Pathology - 2nd Edition |date=2012 |publisher=Elsevier/Academic Press |isbn=9780123849847 |pages=367\u2013387 |edition=2nd |url=https://www.elsevier.com/books/insect-pathology/vega/978-0-12-384984-7|taal=en}}</ref> One of the most studied gregarins is [[Gregarina garnhami]].\n\n==Lifecycle==\n\nGregarines occur in both aquatic and terrestrial environments. Although they are usually transmitted by the [[orofaecal]] route, some are transmitted with the [[Host (biology)|host]]'s [[gamete]]s during [[copulation (zoology)|copulation]] (''[[Monocystis]]).\n\nIn all species, four or more [[sporozoite]]s (the precise number depends on the species) equipped with an apical complex escape from the [[oocyst]]s, a process called excystation, find their way to the appropriate body cavity, and penetrate host cells in their immediate environment. The sporozoites emerge within the host cell, begin to feed, and develop into larger [[trophozoite]]s. In some species, the sporozoites and trophozoites are capable of asexual replication \u2014 a process called [[schizogony]] or [[Protozoal merogony|merogony]]. Most species, however, appear to lack schizogony in their lifecycles.\n\nIn all species, two mature trophozoites eventually pair up in a process known as [[Meiosis|syzygy]] and develop into [[gamont]]s. During syzygy, gamont orientation differs between species (side-to-side, head-to-tail). A [[gametocyst]] wall forms around each pair of gamonts which then begin to divide into hundreds of [[gamete]]s. [[Zygote]]s are produced by the fusion of two gametes and these in turn become surrounded by an oocyst wall. Within the oocyst, [[meiosis]] occurs, yielding the sporozoites. Hundreds of oocysts accumulate within each gametocyst and these are released via host's [[faeces]] or via host death and decay.\n\n[[File:Lankesteria lm.jpg|thumb|upright|left|''[[Lankesteria cystodytae]]'' is an intestinal parasite of [[ascidian]]s. These aseptate gregarines lack epimerites and instead possess attachment organelles known as mucrons]]Gregarines have been reported to infect over 3000 invertebrate species.<ref name=\"Alarc\u00f3n2011\">Alarc\u00f3n M E., Huang C-G, Tsai Y-S, Chen W-J, Kumar A (2011) Life cycle and morphology of ''Steinina ctenocephali'' (Ross 1909) comb. nov. (Eugregarinorida: Actinocephalidae), a gregarine of ''Ctenocephalides felis'' (Siphonaptera: Pulicidae) in Taiwan. Zoological Studies 50(6): 763-772</ref>\n\n==Taxonomy==\n\nThe gregarines were recognised as a [[taxon]] by [[Pierre-Paul Grass\u00e9|Grasse]] in 1953.<ref name=Grasse1953>{{cite book |first=P.P. |last=Grass\u00e9 |first2=M.C. |last2=Caullery |title=Trait\u00e9 de zoologie: anatomie, syst\u00e9matique, biologie. Tome I, Fasc. II, Protozaires, rhizopodes, Actinopodes, Sporozoaires, Cnidosporidies |publisher=Masson et Cie |location=Paris |year=1953 |oclc=642231286 }}</ref> The three orders into which they are currently divided were created by Levine ''et al.'' in 1980.\n\nCurrently, about 250 genera and 1650 species are known in this taxon. They are divided into three orders based on habitat, host range, and trophozoite morphology.<ref name=Perkins2000>{{cite book |vauthors=Perkins FO, Barta JR, Clopton RE, Peirce MA, Upton SJ |chapter=Phylum Apicomplexa |veditors=Lee JJ, Leedale GF, Bradbury P |title=An Illustrated guide to the Protozoa: organisms traditionally referred to as protozoa, or newly discovered groups |publisher=Society of Protozoologists |edition=2nd |year=2000 |oclc=704052757 |isbn=978-1891276224  |pages=190\u2013369 |volume=1}}</ref>\n\nMost species have monoxenous life cycles involving a single invertebrate host. In the life cycle is an extracellular feeding stage known as the trophozoite.\n\n===Main divisions===\n\n'''Archigregarines''' are found only in marine habitats. They possess intestinal trophozoites similar in morphology to the infective sporozoites. Phylogenetic analysis suggests this group is paraphyletic and will need division. Generally, four zoites are in each spore in this group.\n\n'''Eugregarines''' are found in marine, freshwater, and terrestrial habitats. These species possess large trophozoites that are significantly different in morphology and behavior from the sporozoites. This taxon contains most of the known gregarine species. The intestinal [[Eugregarinorida|eugregarines]] are separated into septate \u2014 suborder [[Septatorina]] \u2014 and [[aseptate]] \u2014 suborder [[Aseptatorina]] \u2014 depending on whether the trophozoite is superficially divided by a transverse septum. The aseptate species are mostly marine gregarines.\n\nUrosporidians are aseptate eugregarines that infect the coelomic spaces of marine hosts. Unusually, they tend to lack attachment structures and form gamont pairs that pulsate freely within the [[Coelom#Coelomic fluid|coelomic fluid]].\n\nMonocystids are aseptate eugregarines that infect the reproductive vesicles of terrestrial [[annelid]]s. These latter species tend to branch closely with [[neogregarines]] and may need to be reclassified.  Generally, eight zoites are in each spore in this group.\n\n'''Neogregarines''' are found only in terrestrial hosts. These species have reduced trophozoites and tend to infect tissues other than the intestine. Usually, eight zoites are in each spore in this group.\n\nThe eugregarines and neogregarines differ in a number of respects. The neogregarines are in general more pathogenic to their hosts. The eugregarines multiply by sporogony and gametogony, while the neogregarines have an additional schizogenic stage \u2014 merogony \u2014 within their hosts. Merogony may be intracellular or extracellular depending on the species.\n\nDNA studies suggest the [[archigregarines]] are ancestral to the others.<ref name=Leander2008>{{cite journal |author=Leander BS |title=Marine gregarines: evolutionary prelude to the apicomplexan radiation? |journal=Trends Parasitol. |volume=24 |issue=2 |pages=60\u20137 |date=February 2008 |pmid=18226585 |doi=10.1016/j.pt.2007.11.005 }}</ref>\n\n===Proposed revisions===\n\nCavalier-Smith has proposed a significant revision of this taxon assuming the [[Phylogenetic nomenclature|polyphyly]] of [[Eugregarinorida|eugregarine]]s.<ref name=Cavalier-Smith2014>{{cite journal |vauthors=Cavalier-Smith T |title=Gregarine site-heterogeneous 18S rDNA trees, revision of gregarine higher classification, and the evolutionary diversification of Sporozoa |journal=Eur. J. Protistol. |volume=50 |issue=5 |pages=472\u2013495 |year=2014 |pmid=25238406 |doi=10.1016/j.ejop.2014.07.002 }}</ref> He has separated gregarines into three classes. The first of them \u2014 [[Gregarinomorphea]] \u2014 comprises [[Orthogregarinia]], [[Cryptosporidiidae]] and, additionally, [[Rhytidocystidae]] previously considered as divergent [[coccidia]]ns<ref name=\"Perkins2000\"/> or [[Apicomplexa]] ''incertae sedis''.<ref name=Adl2012>{{cite journal |vauthors=Adl SM, Simpson AG, Lane CE, Luke\u0161 J, Bass D, Bowser SS, Brown MW, Burki F, Dunthorn M, Hampl V, Heiss A, Hoppenrath M, Lara E, Le Gall L, Lynn DH, McManus H, Mitchell EA, Mozley-Stanridge SE, Parfrey LW, Pawlowski J, Rueckert S, Shadwick L, Shadwick L, Schoch CL, Smirnov A, Spiegel FW |title=The revised classification of eukaryotes |journal=J. Eukaryot. Microbiol. |volume=59 |issue=5 |pages=429\u201393 |year=2012 |pmid=23020233 |pmc=3483872 |doi=10.1111/j.1550-7408.2012.00644.x }}</ref> The Orthogregarinia with two new orders [[Arthrogregarida]] and [[Vermigregarida]] was created for the gregarines most closely related to ''[[Cryptosporidium]]''. The second class \u2014 [[Paragregarea]] \u2014 was created for the archigregarines, [[Stenophorida]] and a new order \u2014 [[Velocida]] which itself was created for ''[[Urosporoidea]]'' ''superfam. n.'' and ''[[Veloxidium]]''. The third class was created \u2014 [[Squirmida]] \u2014 for ''[[Filipodium]]'' and ''[[Platyproteum]]''. Thus, the [[Eugregarinorida|eugregarine]]s proved to be split and distributed among these three classes together with some other [[apicomplexa]]ns.\n\nThis point of view was challenged in 2017 by Simdyanov and co-authors, which performed the global integrated analysis of available morphological and molecular phylogenetic data and concluded that [[Eugregarinorida|eugregarine]]s are rather a [[Phylogenetic nomenclature|monophyletic taxon]].<ref name=Simdyanov2017>{{cite journal |vauthors=Simdyanov TG, Guillou L, Diakin AY, Mikhailov KV, Schr\u00e9vel J, Aleoshin VV |title=A new view on the morphology and phylogeny of eugregarines suggested by the evidence from the gregarine ''Ancora sagittata'' (Leuckart, 1860) Labb\u00e9, 1899 (Apicomplexa: Eugregarinida) |journal=PeerJ |volume=5 |issue= |pages=e3354 |year=2017 |pmid=28584702 |pmc=5452951 |doi=10.7717/peerj.3354 }}</ref>\n\n===Notes===\n\nThere are several genera of gregarines that are currently not classified: ''[[Acuta]]'', ''[[Cephalolobus]]'', ''[[Gregarina]]'', ''[[Levinea]]'', ''[[Menospora]]'', ''[[Nematocystis]]'', ''[[Nematopsis]]'', ''[[Steinina]]'' and ''[[Trichorhynchus]]''.\n\n==Characteristics==\n\n*[[Meiosis]] occurs in all species.\n*[[Monoxenous]] \u2014 only one host occurs in lifecycle for almost all species.\n*[[Mitochondria]] have tubular [[cristae]] and are often distributed near the cell periphery.\n*Apical complex occurs in the sporozoite stage, but is lost in the trophozoite stage in eugregarines and neogregarines.\n*Trophozoites have a large and conspicuous [[cell nucleus|nucleus]] and [[nucleolus]].\n*They inhabit extracellular body cavities of invertebrates such as the intestines, coeloms, and reproductive vesicles. \n*Attachment to host occurs by a [[mucron]] ([[aseptate]] gregarines) or an [[epimerite]] (septate gregarines); some gregarines (urosporidians) float freely within extracellular body cavities (coelom).\n\nThe parasites are relatively large spindle-shaped cells, compared to other apicomplexans and eukaryotes in general (some species are {{nowrap|> 850 [[\u00b5m]]}} in length). Most gregarines have longitudinal epicytic folds (bundles of [[microtubule]]s beneath the cell surface with nematode like bending behaviour): crenulations are instead found in the urosporidians.\n\n==Molecular biology==\n\nThe gregarines are able to move and change direction along a surface through gliding motility without the use of [[cilia]], [[flagella]], or [[lamellipodia]].<ref name=Walker1975>{{cite journal |vauthors=Walker MH, Mackenzie C, Bainbridge SP, Orme C |title=A study of the structure and gliding movement of ''Gregarina garnhami'' |journal=J Protozool |volume=26 |issue= 4|pages=566\u2013574 |date=November 1979 |doi=10.1111/j.1550-7408.1979.tb04197.x }}</ref> This is accomplished through the use of an [[actin]] and [[myosin]] complex.<ref name=Heintzelman2004>{{cite journal |author=Heintzelman MB |title=Actin and myosin in ''Gregarina polymorpha'' |journal=Cell Motil. Cytoskeleton |volume=58 |issue=2 |pages=83\u201395 |date=June 2004 |pmid=15083530 |doi=10.1002/cm.10178 }}</ref> The complexes require an actin [[cytoskeleton]] to perform their gliding motions.<ref name=Mitchison1996>{{cite journal |vauthors=Mitchison TJ, Cramer LP |title=Actin-based cell motility and cell locomotion |journal=Cell |volume=84 |issue=3 |pages=371\u20139 |date=February 1996 |pmid=8608590 |doi=10.1016/s0092-8674(00)81281-7 }}</ref> In the proposed \u2018capping\u2019 model, an uncharacterized protein complex moves rearward, moving the parasites forward.<ref name=Sibley1998>{{cite journal |vauthors=Sibley LD, H\u00e2kansson S, Carruthers VB |title=Gliding motility: an efficient mechanism for cell penetration |journal=Curr. Biol. |volume=8 |issue=1 |pages=R12\u20134 |date=January 1998 |pmid=9427622 |doi=10.1016/S0960-9822(98)70008-9 }}</ref>\n{{Clear}}\n\n==History==\n\nThe gregarines are among the oldest known parasites having been described by the physician [[Francesco Redi]] in 1684.<ref name=Redi1684>{{cite book |last=Redi |first=F |title=Osservazioni intorno agli animali viventi, che si trovano negli animali viventi |publisher=P. Matini |location=Firenze |year=1684 |oclc=8705660 }}</ref>\n\nThe first formal description was made by Dufour in 1828. He created the genus ''[[Gregarina]]'' and described ''[[Gregarina ovata]]'' from ''[[Folficula aricularia]]''. He considered them to be parasitic worms. Koelliker recognised them as protozoa in 1848.\n\n==References==\n{{Reflist|2}}\n\n==Bibliography==\n*{{cite book |first=Isabelle |last=Desportes |first2=Joseph |last2=Schr\u00e9vel |title=Treatise on Zoology \u2014 Anatomy, Taxonomy, Biology. The Gregarines (2 vols): The Early Branching Apicomplexa |url=https://books.google.com/books?id=YxNOPQN7LJQC |date=2013 |publisher=Brill |isbn=978-90-04-25605-7}}\n\n==External links==\n{{EB1911 Poster|Gregarines}}\n* [http://tolweb.org/Gregarina/124806 Tree of Life Gregarina]\n* [http://tolweb.org/movies/Gregarina/124806 Gregarina Movies]\n\n{{Alveolata}}\n{{Taxonbar|from=Q1154061}}\n\n[[Category:SAR supergroup subclasses]]\n[[Category:Conoidasida]]\n", "text_old": "{{Taxobox\n| name = \n| image =Septate gregarine.jpg\n| image_caption = A live specimen of a septate (or [[cephaline]]) gregarine showing the distinctive \"head\"-like section of the trophozoite containing the epimerite at its anterior end. Septate gregarines are intestinal [[parasite]]s of [[arthropod]]s.\n| domain = [[Eukaryota]]\t\n| unranked_regnum = [[SAR supergroup|SAR]]\n| unranked_superphylum = [[Alveolata]]\n| phylum = [[Apicomplexa]]\n| classis = [[Conoidasida]]\n| subclassis = '''Gregarinasina'''\n| subclassis_authority =\n| subdivision_ranks = Orders\n| subdivision = [[Archigregarinorida]]<br/>\n[[Eugregarinorida]]<br/>\n[[Neogregarinorida]]\n| synonyms =\n* Gregarinia\n}}\n\nThe '''gregarines''' are a group of [[Apicomplexa]]n alveolates, classified as the '''Gregarinasina'''<ref name=\"pmid10540950\">{{cite journal |vauthors=Carreno RA, Martin DS, Barta JR |title=Cryptosporidium is more closely related to the gregarines than to coccidia as shown by phylogenetic analysis of apicomplexan parasites inferred using small-subunit ribosomal RNA gene sequences |journal=Parasitol. Res. |volume=85 |issue=11 |pages=899\u2013904 |date=November 1999 |pmid=10540950 |doi=10.1007/s004360050655 |url=http://link.springer.de/link/service/journals/00436/bibs/9085011/90850899.htm |url-status=dead |archiveurl=https://web.archive.org/web/20010320224750/http://link.springer.de/link/service/journals/00436/bibs/9085011/90850899.htm |archivedate=2001-03-20 }}</ref> or '''Gregarinia'''. The large (roughly half a millimeter) parasites inhabit the intestines of many invertebrates. They are not found in any vertebrates. However, gregarines are closely related to both ''[[Toxoplasma]]'' and ''[[Plasmodium]]'', which cause [[toxoplasmosis]] and [[malaria]], respectively. Both protists use protein complexes similar to those that are formed by the gregarines for [[gliding motility]] and invading target cells.<ref name=Menard2001>{{cite journal |author=M\u00e9nard R |title=Gliding motility and cell invasion by Apicomplexa: insights from the Plasmodium sporozoite |journal=Cell. Microbiol. |volume=3 |issue=2 |pages=63\u201373 |date=February 2001 |pmid=11207621 |doi=10.1046/j.1462-5822.2001.00097.x }}</ref><ref name=Meissner2002>{{cite journal |vauthors=Meissner M, Schl\u00fcter D, Soldati D |title=Role of ''Toxoplasma gondii'' myosin A in powering parasite gliding and host cell invasion |journal=Science |volume=298 |issue=5594 |pages=837\u201340 |date=October 2002 |pmid=12399593 |doi=10.1126/science.1074553 |url=http://archive-ouverte.unige.ch/unige:78026 }}</ref> This makes them an excellent model for studying gliding motility with the goal of developing treatment options for toxoplasmosis and malaria.\n\n==Lifecycle==\n\nGregarines occur in both aquatic and terrestrial environments. Although they are usually transmitted by the [[orofaecal]] route, some are transmitted with the [[Host (biology)|host]]'s [[gamete]]s during [[copulation (zoology)|copulation]] (''[[Monocystis]]).\n\nIn all species, four or more [[sporozoite]]s (the precise number depends on the species) equipped with an apical complex escape from the [[oocyst]]s, a process called excystation, find their way to the appropriate body cavity, and penetrate host cells in their immediate environment. The sporozoites emerge within the host cell, begin to feed, and develop into larger [[trophozoite]]s. In some species, the sporozoites and trophozoites are capable of asexual replication \u2014 a process called [[schizogony]] or [[Protozoal merogony|merogony]]. Most species, however, appear to lack schizogony in their lifecycles.\n\nIn all species, two mature trophozoites eventually pair up in a process known as [[Meiosis|syzygy]] and develop into [[gamont]]s. During syzygy, gamont orientation differs between species (side-to-side, head-to-tail). A [[gametocyst]] wall forms around each pair of gamonts which then begin to divide into hundreds of [[gamete]]s. [[Zygote]]s are produced by the fusion of two gametes and these in turn become surrounded by an oocyst wall. Within the oocyst, [[meiosis]] occurs, yielding the sporozoites. Hundreds of oocysts accumulate within each gametocyst and these are released via host's [[faeces]] or via host death and decay.\n\n[[File:Lankesteria lm.jpg|thumb|upright|left|''[[Lankesteria cystodytae]]'' is an intestinal parasite of [[ascidian]]s. These aseptate gregarines lack epimerites and instead possess attachment organelles known as mucrons]]Gregarines have been reported to infect over 3000 invertebrate species.<ref name=\"Alarc\u00f3n2011\">Alarc\u00f3n M E., Huang C-G, Tsai Y-S, Chen W-J, Kumar A (2011) Life cycle and morphology of ''Steinina ctenocephali'' (Ross 1909) comb. nov. (Eugregarinorida: Actinocephalidae), a gregarine of ''Ctenocephalides felis'' (Siphonaptera: Pulicidae) in Taiwan. Zoological Studies 50(6): 763-772</ref>\n\n==Taxonomy==\n\nThe gregarines were recognised as a [[taxon]] by [[Pierre-Paul Grass\u00e9|Grasse]] in 1953.<ref name=Grasse1953>{{cite book |first=P.P. |last=Grass\u00e9 |first2=M.C. |last2=Caullery |title=Trait\u00e9 de zoologie: anatomie, syst\u00e9matique, biologie. Tome I, Fasc. II, Protozaires, rhizopodes, Actinopodes, Sporozoaires, Cnidosporidies |publisher=Masson et Cie |location=Paris |year=1953 |oclc=642231286 }}</ref> The three orders into which they are currently divided were created by Levine ''et al.'' in 1980.\n\nCurrently, about 250 genera and 1650 species are known in this taxon. They are divided into three orders based on habitat, host range, and trophozoite morphology.<ref name=Perkins2000>{{cite book |vauthors=Perkins FO, Barta JR, Clopton RE, Peirce MA, Upton SJ |chapter=Phylum Apicomplexa |veditors=Lee JJ, Leedale GF, Bradbury P |title=An Illustrated guide to the Protozoa: organisms traditionally referred to as protozoa, or newly discovered groups |publisher=Society of Protozoologists |edition=2nd |year=2000 |oclc=704052757 |isbn=978-1891276224  |pages=190\u2013369 |volume=1}}</ref>\n\nMost species have monoxenous life cycles involving a single invertebrate host. In the life cycle is an extracellular feeding stage known as the trophozoite.\n\n===Main divisions===\n\n'''Archigregarines''' are found only in marine habitats. They possess intestinal trophozoites similar in morphology to the infective sporozoites. Phylogenetic analysis suggests this group is paraphyletic and will need division. Generally, four zoites are in each spore in this group.\n\n'''Eugregarines''' are found in marine, freshwater, and terrestrial habitats. These species possess large trophozoites that are significantly different in morphology and behavior from the sporozoites. This taxon contains most of the known gregarine species. The intestinal [[Eugregarinorida|eugregarines]] are separated into septate \u2014 suborder [[Septatorina]] \u2014 and [[aseptate]] \u2014 suborder [[Aseptatorina]] \u2014 depending on whether the trophozoite is superficially divided by a transverse septum. The aseptate species are mostly marine gregarines.\n\nUrosporidians are aseptate eugregarines that infect the coelomic spaces of marine hosts. Unusually, they tend to lack attachment structures and form gamont pairs that pulsate freely within the [[Coelom#Coelomic fluid|coelomic fluid]].\n\nMonocystids are aseptate eugregarines that infect the reproductive vesicles of terrestrial [[annelid]]s. These latter species tend to branch closely with [[neogregarines]] and may need to be reclassified.  Generally, eight zoites are in each spore in this group.\n\n'''Neogregarines''' are found only in terrestrial hosts. These species have reduced trophozoites and tend to infect tissues other than the intestine. Usually, eight zoites are in each spore in this group.\n\nThe eugregarines and neogregarines differ in a number of respects. The neogregarines are in general more pathogenic to their hosts. The eugregarines multiply by sporogony and gametogony, while the neogregarines have an additional schizogenic stage \u2014 merogony \u2014 within their hosts. Merogony may be intracellular or extracellular depending on the species.\n\nDNA studies suggest the [[archigregarines]] are ancestral to the others.<ref name=Leander2008>{{cite journal |author=Leander BS |title=Marine gregarines: evolutionary prelude to the apicomplexan radiation? |journal=Trends Parasitol. |volume=24 |issue=2 |pages=60\u20137 |date=February 2008 |pmid=18226585 |doi=10.1016/j.pt.2007.11.005 }}</ref>\n\n===Proposed revisions===\n\nCavalier-Smith has proposed a significant revision of this taxon assuming the [[Phylogenetic nomenclature|polyphyly]] of [[Eugregarinorida|eugregarine]]s.<ref name=Cavalier-Smith2014>{{cite journal |vauthors=Cavalier-Smith T |title=Gregarine site-heterogeneous 18S rDNA trees, revision of gregarine higher classification, and the evolutionary diversification of Sporozoa |journal=Eur. J. Protistol. |volume=50 |issue=5 |pages=472\u2013495 |year=2014 |pmid=25238406 |doi=10.1016/j.ejop.2014.07.002 }}</ref> He has separated gregarines into three classes. The first of them \u2014 [[Gregarinomorphea]] \u2014 comprises [[Orthogregarinia]], [[Cryptosporidiidae]] and, additionally, [[Rhytidocystidae]] previously considered as divergent [[coccidia]]ns<ref name=\"Perkins2000\"/> or [[Apicomplexa]] ''incertae sedis''.<ref name=Adl2012>{{cite journal |vauthors=Adl SM, Simpson AG, Lane CE, Luke\u0161 J, Bass D, Bowser SS, Brown MW, Burki F, Dunthorn M, Hampl V, Heiss A, Hoppenrath M, Lara E, Le Gall L, Lynn DH, McManus H, Mitchell EA, Mozley-Stanridge SE, Parfrey LW, Pawlowski J, Rueckert S, Shadwick L, Shadwick L, Schoch CL, Smirnov A, Spiegel FW |title=The revised classification of eukaryotes |journal=J. Eukaryot. Microbiol. |volume=59 |issue=5 |pages=429\u201393 |year=2012 |pmid=23020233 |pmc=3483872 |doi=10.1111/j.1550-7408.2012.00644.x }}</ref> The Orthogregarinia with two new orders [[Arthrogregarida]] and [[Vermigregarida]] was created for the gregarines most closely related to ''[[Cryptosporidium]]''. The second class \u2014 [[Paragregarea]] \u2014 was created for the archigregarines, [[Stenophorida]] and a new order \u2014 [[Velocida]] which itself was created for ''[[Urosporoidea]]'' ''superfam. n.'' and ''[[Veloxidium]]''. The third class was created \u2014 [[Squirmida]] \u2014 for ''[[Filipodium]]'' and ''[[Platyproteum]]''. Thus, the [[Eugregarinorida|eugregarine]]s proved to be split and distributed among these three classes together with some other [[apicomplexa]]ns.\n\nThis point of view was challenged in 2017 by Simdyanov and co-authors, which performed the global integrated analysis of available morphological and molecular phylogenetic data and concluded that [[Eugregarinorida|eugregarine]]s are rather a [[Phylogenetic nomenclature|monophyletic taxon]].<ref name=Simdyanov2017>{{cite journal |vauthors=Simdyanov TG, Guillou L, Diakin AY, Mikhailov KV, Schr\u00e9vel J, Aleoshin VV |title=A new view on the morphology and phylogeny of eugregarines suggested by the evidence from the gregarine ''Ancora sagittata'' (Leuckart, 1860) Labb\u00e9, 1899 (Apicomplexa: Eugregarinida) |journal=PeerJ |volume=5 |issue= |pages=e3354 |year=2017 |pmid=28584702 |pmc=5452951 |doi=10.7717/peerj.3354 }}</ref>\n\n===Notes===\n\nThere are several genera of gregarines that are currently not classified: ''[[Acuta]]'', ''[[Cephalolobus]]'', ''[[Gregarina]]'', ''[[Levinea]]'', ''[[Menospora]]'', ''[[Nematocystis]]'', ''[[Nematopsis]]'', ''[[Steinina]]'' and ''[[Trichorhynchus]]''.\n\n==Characteristics==\n\n*[[Meiosis]] occurs in all species.\n*[[Monoxenous]] \u2014 only one host occurs in lifecycle for almost all species.\n*[[Mitochondria]] have tubular [[cristae]] and are often distributed near the cell periphery.\n*Apical complex occurs in the sporozoite stage, but is lost in the trophozoite stage in eugregarines and neogregarines.\n*Trophozoites have a large and conspicuous [[cell nucleus|nucleus]] and [[nucleolus]].\n*They inhabit extracellular body cavities of invertebrates such as the intestines, coeloms, and reproductive vesicles. \n*Attachment to host occurs by a [[mucron]] ([[aseptate]] gregarines) or an [[epimerite]] (septate gregarines); some gregarines (urosporidians) float freely within extracellular body cavities (coelom).\n\nThe parasites are relatively large spindle-shaped cells, compared to other apicomplexans and eukaryotes in general (some species are {{nowrap|> 850 [[\u00b5m]]}} in length). Most gregarines have longitudinal epicytic folds (bundles of [[microtubule]]s beneath the cell surface with nematode like bending behaviour): crenulations are instead found in the urosporidians.\n\n==Molecular biology==\n\nThe gregarines are able to move and change direction along a surface through gliding motility without the use of [[cilia]], [[flagella]], or [[lamellipodia]].<ref name=Walker1975>{{cite journal |vauthors=Walker MH, Mackenzie C, Bainbridge SP, Orme C |title=A study of the structure and gliding movement of ''Gregarina garnhami'' |journal=J Protozool |volume=26 |issue= 4|pages=566\u2013574 |date=November 1979 |doi=10.1111/j.1550-7408.1979.tb04197.x }}</ref> This is accomplished through the use of an [[actin]] and [[myosin]] complex.<ref name=Heintzelman2004>{{cite journal |author=Heintzelman MB |title=Actin and myosin in ''Gregarina polymorpha'' |journal=Cell Motil. Cytoskeleton |volume=58 |issue=2 |pages=83\u201395 |date=June 2004 |pmid=15083530 |doi=10.1002/cm.10178 }}</ref> The complexes require an actin [[cytoskeleton]] to perform their gliding motions.<ref name=Mitchison1996>{{cite journal |vauthors=Mitchison TJ, Cramer LP |title=Actin-based cell motility and cell locomotion |journal=Cell |volume=84 |issue=3 |pages=371\u20139 |date=February 1996 |pmid=8608590 |doi=10.1016/s0092-8674(00)81281-7 }}</ref> In the proposed \u2018capping\u2019 model, an uncharacterized protein complex moves rearward, moving the parasites forward.<ref name=Sibley1998>{{cite journal |vauthors=Sibley LD, H\u00e2kansson S, Carruthers VB |title=Gliding motility: an efficient mechanism for cell penetration |journal=Curr. Biol. |volume=8 |issue=1 |pages=R12\u20134 |date=January 1998 |pmid=9427622 |doi=10.1016/S0960-9822(98)70008-9 }}</ref>\n{{Clear}}\n\n==History==\n\nThe gregarines are among the oldest known parasites having been described by the physician [[Francesco Redi]] in 1684.<ref name=Redi1684>{{cite book |last=Redi |first=F |title=Osservazioni intorno agli animali viventi, che si trovano negli animali viventi |publisher=P. Matini |location=Firenze |year=1684 |oclc=8705660 }}</ref>\n\nThe first formal description was made by Dufour in 1828. He created the genus ''[[Gregarina]]'' and described ''[[Gregarina ovata]]'' from ''[[Folficula aricularia]]''. He considered them to be parasitic worms. Koelliker recognised them as protozoa in 1848.\n\n==References==\n{{Reflist|2}}\n\n==Bibliography==\n*{{cite book |first=Isabelle |last=Desportes |first2=Joseph |last2=Schr\u00e9vel |title=Treatise on Zoology \u2014 Anatomy, Taxonomy, Biology. The Gregarines (2 vols): The Early Branching Apicomplexa |url=https://books.google.com/books?id=YxNOPQN7LJQC |date=2013 |publisher=Brill |isbn=978-90-04-25605-7}}\n\n==External links==\n{{EB1911 Poster|Gregarines}}\n* [http://tolweb.org/Gregarina/124806 Tree of Life Gregarina]\n* [http://tolweb.org/movies/Gregarina/124806 Gregarina Movies]\n\n{{Alveolata}}\n{{Taxonbar|from=Q1154061}}\n\n[[Category:SAR supergroup subclasses]]\n[[Category:Conoidasida]]\n", "name_user": "Garnhami", "label": "safe", "comment": "", "url_page": "//en.wikipedia.org/wiki/Gregarinasina"}
