{"title_page": "Application programming interface", "text_new": "{{short description|Set of subroutine definitions, protocols, and tools for building software and applications}}\n\n{{hatnote group|\n{{redirect|API}}\n{{hatnote|\"Api.php\" redirects here. For the Wikipedia API, see {{Plain link|https://en.wikipedia.org/w/api.php|/w/api.php}}.|selfref=true}}\n}}\n\nAn '''application programming interface''' ('''API''') is a [[Interface (computing)|computing interface]] to a software component or a system, that defines how other components or systems can use it. It defines the kinds of calls or requests that can be made, how to make them, the data formats that should be used, the conventions to follow, etc. It can also provide extension mechanisms so that users can extend existing functionality in various ways and to varying degrees.<ref name=\"Fisher1\">{{Cite web |url=https://books.google.com/books?id=YToEAAAAMBAJ&pg=PA6&dq=application+programming+interface&hl=en&sa=X&ved=2ahUKEwjWlZHBrYPoAhXlQd8KHWiECLMQ6AEwBHoECAEQAg#v=onepage&q=application%20programming%20interface&f=false |title=OS/2 EE to Get 3270 Interface Early |last=Fisher |first=Sharon |date=1989 |website=Google Books}}</ref> An API can be entirely custom, specific to a component, or it can be designed based on an industry standard to ensure interoperability. Some APIs have to be documented, others are designed so that they can be \"interrogated\" to determine supported functionality. Since other components/systems rely only on the API, the system that provides the API can (ideally) change its internal details \"behind\" that API without affecting its users.  \n\nToday, with the rise of [[REST]] and [[web services]] over [[HTTP]], the term is often assumed to refer to APIs of such services when given no other context (see the [[#Web APIs|Web APIs]] section).  \n\nSometimes the term API is, by extension, used to refer to the subset of software entities (code, subcomponents, modules, etc.) that serve to actually implement the API of some encompassing component or system.\n\n== Purpose ==\nIn building applications, an API (application programming interface) simplifies programming by [[Abstraction (software engineering)|abstracting]] the underlying implementation and only exposing objects or actions the developer needs. While a graphical interface for an [[email client]] might provide a user with a button that performs all the steps for fetching and highlighting new emails, an API for file [[input/output]] might give the developer a [[Subroutine|function]] that copies a file from one location to another without requiring that the developer understand the [[Journaling file system|file system]] operations occurring behind the scenes.<ref name=\"Clarke4\">{{Cite web |url=http://www.drdobbs.com/windows/measuring-api-usability/184405654 |title=Measuring API Usability |last=3333Clarke |first=Steven |date=2004 |website=Dr. Dobb's |access-date=29 July 2016}}</ref>\n\n== Usage ==\n\n===Libraries and frameworks===\nAn API usually is related to a [[library (computing)|software library]]. The API describes and prescribes the \"expected behavior\" (a specification) while the library is an \"actual implementation\" of this set of rules.\n\nA single API can have multiple implementations (or none, being abstract) in the form of different libraries that share the same programming interface.\n\nThe separation of the API from its implementation can allow programs written in one language to use a library written in another. For example, because [[Scala (programming language)|Scala]] and [[Java (programming language)|Java]] compile to compatible [[bytecode]], Scala developers can take advantage of any Java API.<ref name=\"OderskySpoonVenners8\">{{Cite web |url=http://www.artima.com/pins1ed/combining-scala-and-java.html |title=Combining Scala and Java |last=Odersky |first=Martin |last2=Spoon |first2=Lex |date=10 December 2008 |website=www.artima.com |access-date=29 July 2016 |last3=Venners |first3=Bill}}</ref>\n\nAPI use can vary depending on the type of programming language involved.\nAn API for a [[procedural programming|procedural language]] such as [[Lua (programming language)|Lua]] could consist primarily of basic routines to execute code, manipulate data or handle errors while an API for an [[object-oriented programming|object-oriented language]], such as Java, would provide a specification of classes and its [[class method]]s.<ref>{{Cite journal |last=de Figueiredo |first=Luiz Henrique |last2=Ierusalimschy |first2=Roberto |last3=Filho |first3=Waldemar Celes |title=The design and implementation of a language for extending applications |url=https://www.researchgate.net/publication/2778436 |journal=TeCGraf Grupo de Tecnologia Em Computacao Grafica |access-date=29 July 2016}}</ref><ref name=\"Sintes16\">{{Cite web |url=http://www.javaworld.com/article/2077392/java-se/just-what-is-the-java-api-anyway.html |title=Just what is the Java API anyway? |last=Sintes |first=Tony |date=2001-07-13 |website=JavaWorld |access-date=29 July 2016}}</ref>\n\n[[Language binding]]s are also APIs. By mapping the features and capabilities of one language to an interface implemented in another language, a language binding allows a library or service written in one language to be used when developing in another language.<ref name=\"Emery\">{{Cite web |url=http://www.acm.org/tsc/apis.html |title=Standards, APIs, Interfaces and Bindings |last=Emery |first=David |publisher=Acm.org |url-status=dead |archive-url=https://web.archive.org/web/20150116081559/http://www.acm.org/tsc/apis.html |archive-date=2015-01-16 |access-date=2016-08-08}}</ref> Tools such as [[SWIG]] and F2PY, a [[Fortran]]-to-[[Python (programming language)|Python]] interface generator, facilitate the creation of such interfaces.<ref>{{Cite web |url=http://www.f2py.org/ |title=F2PY.org |publisher=F2PY.org |access-date=2011-12-18}}</ref>\n\nAn API can also be related to a [[Framework (computer science)|software framework]]: a framework can be based on several libraries implementing several APIs, but unlike the normal use of an API, the access to the behavior built into the framework is mediated by extending its content with new classes plugged into the framework itself.\n\nMoreover, the overall program flow of control can be out of the control of the caller and in the hands of the framework by [[inversion of control]] or a similar mechanism.<ref>{{cite web\n|first = Martin\n|last = Fowler\n|title = Inversion Of Control\n|url = http://martinfowler.com/bliki/InversionOfControl.html\n}}\n</ref><ref>{{cite web\n|first = Mohamed\n|last = Fayad\n|title = Object-Oriented Application Frameworks\n|url = http://www.dre.vanderbilt.edu/~schmidt/CACM-frameworks.html\n}}\n</ref>\n\n===Operating systems===new202\nAn API can specify the interface between an application and the [[operating system]].<ref name=\"Oreilly91\">{{Cite book |last=Lewine |first=Donald A. |url=http://shop.oreilly.com/product/9780937175736.do |title=POSIX Programmer's Guide |date=1991 |publisher=O'Reilly & Associates, Inc. |page=1 |access-date=2 August 2016}}</ref> [[POSIX]], for example, specifies a set of common APIs that aim to enable an application written for a POSIX conformant operating system to be [[Compiler|compiled]] for another POSIX conformant operating system.\n\n[[Linux]] and [[Berkeley Software Distribution]] are examples of operating systems that implement the POSIX APIs.<ref name=\"WestDedrick16\">{{Cite journal |last=West |first=Joel |last2=Dedrick |first2=Jason |date=2001 |title=Open source standardization: the rise of Linux in the network era |url=http://www.joelwest.org/Papers/WestDedrick2001b.pdf |journal=Knowledge, Technology & Policy |volume=14 |issue=2 |pages=88\u2013112 |access-date=2 August 2016}}</ref>\n\n[[Microsoft]] has shown a strong commitment to a backward-compatible API, particularly within its [[Windows API]] (Win32) library, so older applications may run on newer versions of Windows using an executable-specific setting called \"Compatibility Mode\".<ref>\n{{cite web\n |author=Microsogt \n |url=http://www.microsoft.com/windowsxp/using/helpandsupport/learnmore/appcompat.mspx \n |title=Support for Windows XP \n |publisher=Microsoft \n |page=4 \n |date=October 2001 \n |url-status=dead \n |archiveurl=https://web.archive.org/web/20090926235439/http://www.microsoft.com/windowsxp/using/helpandsupport/learnmore/appcompat.mspx \n |archivedate=2009-09-26 \n |df= \n}}</ref>\n\nAn API differs from an [[application binary interface]] (ABI) in that an API is source code based while an ABI is [[Binary file|binary]] based. For instance, [[POSIX]] provides APIs while the [[Linux Standard Base]] provides an ABI.<ref>{{cite web|\nurl=http://www.linuxfoundation.org/collaborate/workgroups/lsb/lsb-introduction|\ntitle=LSB Introduction|\npublisher=Linux Foundation|date=21 June 2012|\naccessdate=2015-03-27}}</ref><ref>{{cite web|\nfirst=Nick|\nlast=Stoughton|\nurl=https://db.usenix.org/publications/login/2005-04/openpdfs/standards2004.pdf|\ntitle=Update on Standards|\npublisher=[[USENIX]]|date=April 2005|\naccessdate=2009-06-04}}</ref>\n\n===Remote APIs===\nRemote APIs allow developers to manipulate remote resources through [[Communications protocol|protocol]]s, specific standards for communication that allow different technologies to work together, regardless of language or platform.\nFor example, the Java Database Connectivity API allows developers to query many different types of [[database]]s with the same set of functions, while the [[Java remote method invocation]] API uses the Java Remote Method Protocol to allow [[Remote procedure call|invocation]] of functions that operate remotely, but appear local to the developer.<ref name=\"Bierhoff9\">{{Cite journal |last=Bierhoff |first=Kevin |date=23 April 2009 |title=API Protocol Compliance in Object-Oriented Software |url=https://www.cs.cmu.edu/~kbierhof/thesis/bierhoff-thesis.pdf |journal=CMU Institute for Software Research |access-date=29 July 2016}}</ref><ref name=\"Wilson16\">{{Cite web |url=http://www.javaworld.com/javaworld/jw-11-2000/jw-1110-smartproxy.html |title=Get smart with proxies and RMI |last=Wilson |first=M. Jeff |date=2000-11-10 |website=JavaWorld |access-date=29 July 2016}}</ref>\n\nTherefore, remote APIs are useful in maintaining the object abstraction in [[object-oriented programming]]; a method call, executed locally on a proxy object, invokes the corresponding method on the remote object, using the remoting protocol, and acquires the result to be used locally as a return value.\n\nA modification on the proxy object also will result in a corresponding modification on the remote object.<ref name=\"AdvancedCorba\">{{cite book |first       = Michi\n |last        = Henning\n |first2      = Steve\n |last2       = Vinoski\n |title       = Advanced CORBA Programming with C++\n |url         = https://archive.org/details/advancedcorbapro00henn\n |publisher   = [[Addison-Wesley]]\n |access-date = 16 June 2015\n |year        = 1999\n |isbn        = 978-0201379273\n |url-access  = registration\n}}</ref>\n\n===Web APIs===\n{{Main|Web API}}\nWeb APIs are the defined interfaces through which interactions happen between an enterprise and applications that use its assets, which also is a [[Service-level agreement|Service Level Agreement]] (SLA) to specify the functional provider and expose the service path or URL for its API users. An API approach is an architectural approach that revolves around providing a program interface to a set of services to different applications serving different types of consumers.<ref>{{Cite web |url=http://www.hcltech.com/sites/default/files/apis_for_dsi.pdf |title=API-fication |date=August 2014 |website=www.hcltech.com |format=PDF download}}</ref>\n\nWhen used in the context of [[Web development tools|web development]], an API is typically defined as a set of specifications, such as [[Hypertext Transfer Protocol]] (HTTP) request messages, along with a definition of the structure of response messages, usually in an Extensible Markup Language ([[XML]]) or JavaScript Object Notation ([[JSON]]) format. An example might be a shipping company API that can be added to an eCommerce-focused website to facilitate ordering shipping services and automatically include current shipping rates, without the site developer having to enter the shipper's rate table into a web database. While \"web API\" historically has been virtually synonymous with [[web service]], the recent trend (so-called [[Web 2.0]]) has been moving away from Simple Object Access Protocol ([[SOAP]]) based web services and [[service-oriented architecture]] (SOA) towards more direct [[representational state transfer]] (REST) style [[web resource]]s and [[resource-oriented architecture]] (ROA).<ref>{{cite web\n |first        = Djamal\n |last         = Benslimane\n |author2      = Schahram Dustdar\n |author3      = Amit Sheth\n |title        = Services Mashups: The New Generation of Web Applications\n |url          = http://dsonline.computer.org/portal/site/dsonline/menuitem.9ed3d9924aeb0dcd82ccc6716bbe36ec/index.jsp?&pName=dso_level1&path=dsonline/2008/09&file=w5gei.xml&xsl=article.xsl\n |work         = IEEE Internet Computing, vol. 12, no. 5\n |publisher    = Institute of Electrical and Electronics Engineers\n |pages        = 13\u201315\n |year         = 2008\n |access-date  = 2019-10-01\n |archive-url  = https://web.archive.org/web/20110928211221/http://dsonline.computer.org/portal/site/dsonline/menuitem.9ed3d9924aeb0dcd82ccc6716bbe36ec/index.jsp?&pName=dso_level1&path=dsonline%2F2008%2F09&file=w5gei.xml&xsl=article.xsl\n |archive-date = 2011-09-28\n |url-status   = dead\n}}</ref> Part of this trend is related to the [[Semantic Web]] movement toward [[Resource Description Framework]] (RDF), a concept to promote web-based [[ontology engineering]] technologies. Web APIs allow the combination of multiple APIs into new applications known as [[mashup (web application hybrid)|mashup]]s.<ref>\n{{citation\n |first       = James\n |last        = Niccolai\n |title       = So What Is an Enterprise Mashup, Anyway?\n |url         = https://www.pcworld.com/article/145039/so_what_is_an_enterprise_mashup_anyway.html\n |work        = [[PC World (magazine)|PC World]]\n |date        = 2008-04-23\n}}</ref>\nIn the social media space, web APIs have allowed web communities to facilitate sharing content and data between communities and applications. In this way, content that is created in one place dynamically can be posted and updated to multiple locations on the web.<ref name=\"Parr16\">{{cite web|last1=Parr|first1=Ben|title=The Evolution of the Social Media API|url=http://mashable.com/2009/05/21/social-media-api/|website=Mashable|accessdate=26 July 2016}}\n</ref> For example, Twitter's REST API allows developers to access core Twitter data and the Search API provides methods for developers to interact with Twitter Search and trends data.{{citation needed|date=December 2018}}\n\n==Design==\nThe design of an API has significant impact on its usage.<ref name=\"Clarke4\" /> The principle of [[information hiding]] describes the role of programming interfaces as enabling [[modular programming]] by hiding the implementation details of the modules so that users of modules need not understand the complexities inside the modules.<ref name=\"Parnas72\">{{Cite journal |last=Parnas |first=D.L. |date=1972 |title=On the Criteria To Be Used in Decomposing Systems into Modules |url=https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf |journal=Communications of the ACM |volume=15 |issue=12 |pages=1053\u20131058 |doi=10.1145/361598.361623}}</ref> Thus, the design of an API attempts to provide only the tools a user would expect.<ref name=\"Clarke4\" /> The design of programming interfaces represents an important part of [[software architecture]], the organization of a complex piece of software.<ref name=\"GarlanShaw94\">{{Cite journal |last=Garlan |first=David |last2=Shaw |first2=Mary |date=January 1994 |title=An Introduction to Software Architecture |url=https://www.cs.cmu.edu/afs/cs/project/able/ftp/intro_softarch/intro_softarch.pdf |journal=Advances in Software Engineering and Knowledge Engineering |volume=1 |access-date=8 August 2016}}</ref>\n\nSeveral authors have created recommendations for how to design APIs, such as [[Joshua Bloch]],<ref>{{cite web \n| last = Bloch \n| first = Josh \n| title = How to design a good API and why it matters\n| url = http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/32713.pdf}}</ref> Kin Lane,<ref>{{Cite web |url=http://pages.3scale.net/rs/516-GHI-083/images/api-provider-guide-api-design.pdf |title=The Industry Guide to API Design |last=Lane |first=Kin |date=2016-03-14 |publisher=Kin Lane via 3scale |url-status=dead |archive-url=https://web.archive.org/web/20160315040538/http://pages.3scale.net/rs/516-GHI-083/images/api-provider-guide-api-design.pdf |archive-date=2016-03-15 |access-date=2016-03-14}}</ref> and Michi Henning.<ref>{{cite web\n| last = Henning\n| first = Michi\n| url = http://queue.acm.org/detail.cfm?id=1255422\n| title = API: Design Matters}}</ref>\nPatterns for the design and evolution of remote APIs are covered in a series of EuroPLoP papers.<ref>{{cite web\n| last = Zimmermann, Olaf\n| url = https://dl.acm.org/citation.cfm?id=3147734\n| title = Interface Representation Patterns: Crafting and Consuming Message-Based Remote APIs}}</ref><ref>{{cite web\n| last = Stocker, Mirko\n| url = https://dl.acm.org/citation.cfm?id=3282319\n| title = Interface Quality Patterns: Communicating and Improving the Quality of Microservices APIs}}</ref>\n\n==Release policies==\nAPIs are one of the more common ways technology companies integrate with each other. Those that provide and use APIs are considered as being members of a business ecosystem.<ref>{{cite web|\nlast=de Ternay|\nfirst=Guerric|\ntitle=Business Ecosystem: Creating an Economic Moat|\nurl=http://boostcompanies.com/business-ecosystem|\nwebsite=BoostCompanies|\ndate=Oct 10, 2015|\naccessdate=2016-02-01}}</ref>\n\nThe main policies for releasing an API are:<ref name=\"Boyd16\">{{Cite web |url=http://www.programmableweb.com/news/private-partner-or-public-which-api-strategy-best-business/2014/02/21 |title=Private, Partner or Public: Which API Strategy Is Best for Business? |last=Boyd |first=Mark |date=2014-02-21 |website=ProgrammableWeb |access-date=2 August 2016}}</ref>\n\n*<u>Private</u>: The API is for internal company use only.\n*<u>Partner</u>: Only specific business partners can use the API. For example, [[transportation network companies]] such as [[Uber]] and [[Lyft]] allow approved third-party developers to directly order rides from within their apps. This allows the companies to exercise quality control by curating which apps have access to the API, and provides them with an additional revenue stream.<ref name=\"Weissbrot16\">{{Cite web |url=http://adexchanger.com/mobile/car-service-apis-everywhere-whats-partner-apps/ |title=Car Service APIs Are Everywhere, But What's In It For Partner Apps? {{!}} AdExchanger |last=Weissbrot |first=Alison |date=7 July 2016 |website=ad exchanger |access-date=2 August 2016}}</ref>\n*<u>Public</u>: The API is available for use by the public. For example, Microsoft makes the [[Microsoft Windows]] API public, and [[Apple Inc.|Apple]] releases its APIs [[Carbon (API)|Carbon]] and [[Cocoa (API)|Cocoa]], so that software can be written for their [[Computing platform|platforms]]. Not all public APIs are generally accessible by everybody. For example, Internet service providers like Cloudflare or Voxility, use RESTful APIs to allow customers and resellers access to their infrastructure information, DDoS stats, network performance or dashboard controls.<ref name=\"Cloudflare\">{{Cite web |url=https://api.cloudflare.com/ |title=Cloudflare API v4 Documentation |date=25 February 2020 |website=cloudflare |access-date=27 February 2020}}</ref> Access to such APIs is granted either by \u201cAPI tokens\u201d, or customer status validations.<ref name=\"SmashMagazine\">{{Cite web |url=https://www.smashingmagazine.com/2018/01/understanding-using-rest-api/ |title=Car Service APIs Are Everywhere, But What's In It For Partner Apps |last=Liew |first=Zell |date=17 January 2018 |website=Smashing Magazine |access-date=27 February 2020}}</ref>\n\n===Public API implications===\nAn important factor when an API becomes public is its \"interface stability\". Changes to the API \u2014for example adding new parameters to a function call\u2014could break compatibility with the clients that depend on that API.<ref name=\"researchgate.net\">{{Cite book |last=Shi |first=Lin |url=https://www.researchgate.net/publication/225147411 |title=An Empirical Study on Evolution of API Documentation |last2=Zhong |first2=Hao |last3=Xie |first3=Tao |last4=Li |first4=Mingshu |date=2011 |work=International Conference on Fundamental Approaches to Software Engineering |isbn=978-3-642-19810-6 |series=Lecture Notes in Computer Science |volume=6603 |pages=416\u2013431 |doi=10.1007/978-3-642-19811-3_29 |access-date=22 July 2016}}</ref>\n\nWhen parts of a publicly presented API are subject to change and thus not stable, such parts of a particular API should be documented explicitly as \"unstable\". For example, in the [[Google Guava]] library, the parts that are considered unstable, and that might change in the near future, are marked with the [[Java annotation]] <code>@Beta</code>.<ref>{{Cite web |url=https://code.google.com/p/guava-libraries/ |title=guava-libraries - Guava: Google Core Libraries for Java 1.6+ - Google Project Hosting |date=2014-02-04 |access-date=2014-02-11}}</ref>\n\nA public API can sometimes declare parts of itself as ''deprecated'' or rescinded. This usually means that part of the API should be considered a candidate for being removed, or modified in a backward incompatible way. Therefore, these changes allows developers to transition away from parts of the API that will be removed or not supported in the future.<ref name=\"OracleDeprecation16\">{{Cite web |url=http://docs.oracle.com/javase/7/docs/technotes/guides/javadoc/deprecation/deprecation.html |title=How and When to Deprecate APIs |last=Oracle |website=Java SE Documentation |access-date=2 August 2016}}</ref>\n\nClient code may contain innovative or opportunistic usages that were not intended by the API designers. In other words, for a library with a significant user base, when an element becomes part of the public API, it may be used in diverse ways.<ref name=\"MendezBaudry2013\">{{Cite book |last=Mendez |first=Diego |title=2013 IEEE 13th International Working Conference on Source Code Analysis and Manipulation (SCAM) |last2=Baudry |first2=Benoit |last3=Monperrus |first3=Martin |year=2013 |isbn=978-1-4673-5739-5 |pages=43\u201352 |chapter=Empirical evidence of large-scale diversity in API usage of object-oriented software |arxiv=1307.4062 |doi=10.1109/SCAM.2013.6648183 |chapter-url=https://hal.archives-ouvertes.fr/hal-00844753/document}}</ref>\nOn February 19, 2020, [[Akamai Technologies|Akamai]] published their annual \u201cState of the Internet\u201d report, showcasing the growing trend of cybercriminals targeting public API platforms at financial services worldwide. From December 2017 through November 2019, Akamai witnessed 85.42 billion credential violation attacks. About 20%, or 16.55 billion, were against hostnames defined as API endpoints. Of these, 473.5 million have targeted financial services sector organizations.<ref name=\"VentureBeat\">{{Cite web |url=https://venturebeat.com/2020/02/19/akamai-cybercriminals-are-attacking-apis-at-financial-services-firms/ |title=Akamai: Cybercriminals are attacking APIs at financial services firms |last=Takanashi |first=Dean |date=19 February 2020 |website=Venture Beat |access-date=27 February 2020}}</ref>\n\n==Documentation==\nAPI documentation describes what services an API offers and how to use those services, aiming to cover everything a client would need to know for practical purposes.\n\nDocumentation is crucial for the development and maintenance of applications using the API.<ref name=\"DekelHerbsleb9\">{{Cite journal |last=Dekel |first=Uri |last2=Herbsleb |first2=James D. |date=May 2009 |title=Improving API Documentation Usability with Knowledge Pushing |journal=Institute for Software Research, School of Computer Science |citeseerx=10.1.1.446.4214}}</ref>\nAPI documentation is traditionally found in documentation files but can also be found in social media such as blogs, forums, and Q&A websites.<ref name=\"ParninTreude11\">{{Cite journal |last=Parnin |first=Chris |last2=Treude |first2=Cristoph |date=May 2011 |title=Measuring API Documentation on the Web |url=https://www.xmedo.com/measuring-api-documentation-web/ |journal=Web2SE |access-date=22 July 2016}}</ref>\n\nTraditional documentation files are often presented via a documentation system, such as Javadoc or Pydoc, that has a consistent appearance and structure.\nHowever, the types of content included in the documentation differs from API to API.<ref name=\"MaalejRobillard12\">{{Cite journal |last=Maalej |first=Waleed |last2=Robillard |first2=Martin P. |date=April 2012 |title=Patterns of Knowledge in API Reference Documentation |url=https://mobis.informatik.uni-hamburg.de/wp-content/uploads/2013/03/TSE-2012-04-0081.R2_Maalej.pdf |journal=IEEE Transactions on Software Engineering |access-date=22 July 2016}}</ref>\n\nIn the interest of clarity, API documentation may include a description of classes and methods in the API as well as \"typical usage scenarios, code snippets, design rationales, performance discussions, and contracts\", but implementation details of the API services themselves are usually omitted.\n\nRestrictions and limitations on how the API can be used are also covered by the documentation. For instance, documentation for an API function could note that its parameters cannot be null, that the function itself is not [[Thread safety|thread safe]],<ref name=\"MonperrusEichberg11\">{{Cite journal |last=Monperrus |first=Martin |last2=Eichberg |first2=Michael |last3=Tekes |first3=Elif |last4=Mezini |first4=Mira |date=3 December 2011 |title=What should developers be aware of? An empirical study on the directives of API documentation |journal=Empirical Software Engineering |volume=17 |issue=6 |pages=703\u2013737 |arxiv=1205.6363 |doi=10.1007/s10664-011-9186-4}}</ref> or that a decrement and cancel protocol averts self-trading.{{Clarify|reason=explanation required|date=February 2018}}\nBecause API documentation tends to be comprehensive, it is a challenge for writers to keep the documentation updated and for users to read it carefully, potentially yielding bugs.<ref name=\"researchgate.net\" />\n\nAPI documentation can be enriched with metadata information like [[Java annotation]]s. This metadata can be used by the compiler, tools, and by the ''run-time'' environment to implement custom behaviors or custom handling.<ref>{{Cite web |url=http://download.oracle.com/javase/1,5.0/docs/guide/language/annotations.html |title=Annotations |publisher=[[Sun Microsystems]] |access-date=2011-09-30}}.</ref>\n\nIt is possible to generate API documentation in a data-driven manner. By observing many programs that use a given API, it is possible to infer the typical usages, as well the required contracts and directives.<ref>{{Cite book |last=Bruch |first=Marcel |title=2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010) |last2=Mezini |first2=Mira |last3=Monperrus |first3=Martin |year=2010 |isbn=978-1-4244-6802-7 |pages=141\u2013150 |chapter=Mining subclassing directives to improve framework reuse |citeseerx=10.1.1.434.15 |doi=10.1109/msr.2010.5463347}}</ref> Then, templates can be used to generate natural language from the mined data.\n\n==Copyright controversy==\n{{Main|Oracle America, Inc. v. Google, Inc.}}\nIn 2010, Oracle Corporation sued Google for having distributed a new implementation of Java embedded in the Android operating system.<ref>{{Cite web |url=http://www.drdobbs.com/jvm/232901227 |title=Oracle and the End of Programming As We Know It |date=2012-05-01 |publisher=DrDobbs |access-date=2012-05-09}}</ref> Google had not acquired any permission to reproduce the Java API, although permission had been given to the similar OpenJDK project. Judge William Alsup ruled in the ''Oracle v. Google'' case that APIs cannot be [[copyrighted]] in the U.S, and that a victory for Oracle would have widely expanded copyright protection and allowed the copyrighting of simple software commands:\n\n{{quote|To accept Oracle's claim would be to allow anyone to copyright one version of code to carry out a system of commands and thereby bar all others from writing its own different versions to carry out all or part of the same commands.<ref>{{Cite web |url=http://www.tgdaily.com/business-and-law-features/63756-apis-cant-be-copyrighted-says-judge-in-oracle-case |title=APIs Can't be Copyrighted Says Judge in Oracle Case |date=2012-06-01 |publisher=TGDaily |access-date=2012-12-06}}</ref><ref>{{cite web\n | url = https://www.wired.com/wiredenterprise/wp-content/uploads/2012/05/Judge-Alsup-Ruling-on-Copyrightability-of-APIs.pdf\n | title = Oracle America, Inc. vs. Google Inc.\n | date = 2012-05-31 | accessdate = 2013-09-22\n | publisher = [[Wired (magazine)|Wired]]\n}}</ref>}}\n\nIn 2014, however, Alsup's ruling was overturned on appeal to the [[United States Court of Appeals for the Federal Circuit|Court of Appeals for the Federal Circuit]], though the question of whether such use of APIs constitutes [[fair use]] was left unresolved.<ref>{{Cite news |last=Rosenblatt, Seth |url=https://www.cnet.com/news/court-sides-with-oracle-over-android-in-java-patent-appeal/ |title=Court sides with Oracle over Android in Java patent appeal |date=May 9, 2014 |work=CNET |access-date=2014-05-10}}</ref>\n\nIn 2016, following a two-week trial, a jury determined that Google's reimplementation of the Java API constituted fair use, but Oracle vowed to appeal the decision.<ref>{{Cite web |url=https://arstechnica.com/tech-policy/2016/05/google-wins-trial-against-oracle-as-jury-finds-android-is-fair-use/ |title=Google beats Oracle\u2014Android makes \"fair use\" of Java APIs |date=2016-05-26 |website=Ars Technica |access-date=2016-07-28}}</ref> Oracle won on its appeal, with the Court of Appeals for the Federal Circuit ruling that Google's use of the APIs did not qualify for fair use.<ref name=\"bbn march2018\">{{Cite web |url=https://www.bloomberg.com/news/articles/2018-03-27/oracle-wins-revival-of-billion-dollar-case-against-google |title=Oracle Wins Revival of Billion-Dollar Case Against Google |last=Decker |first=Susan |date=March 27, 2018 |website=[[Bloomberg Businessweek]] |access-date=March 27, 2018}}</ref> In 2019, Google appealed to the [[Supreme Court of the United States]] over both the copyrightability and fair use rulings, and the Supreme Court granted review.<ref name=\"ars Jan2019\">{{Cite web |url=https://arstechnica.com/tech-policy/2019/01/google-asks-supreme-court-to-overrule-disastrous-ruling-on-api-copyrights/ |title=Google asks Supreme Court to overrule disastrous ruling on API copyrights |last=Lee |first=Timothy |date=January 25, 2019 |website=[[Ars Technica]] |access-date=February 8, 2019}}</ref>\n\n== Examples ==\n{{Main category|Application programming interfaces}}\n\n{{Div col}}\n* [[Advanced SCSI programming interface|ASPI]] for [[SCSI]] device interfacing\n* [[Cocoa (API)|Cocoa]] and [[Carbon (API)|Carbon]] for the [[Macintosh]]\n* [[DirectX]] for [[Microsoft Windows]]\n* [[EHLLAPI]]\n* [[List of Java APIs|Java APIs]]\n* [[Open Database Connectivity|ODBC]] for [[Microsoft Windows]]\n* [[OpenAL]] cross-platform sound API\n* [[OpenCL]] cross-platform API for general-purpose computing for CPUs & GPUs\n* [[OpenGL]] cross-platform graphics API\n* [[OpenMP]] API that supports multi-platform shared memory multiprocessing programming in C, C++ and Fortran on many architectures, including Unix and Microsoft Windows platforms.\n* [[Server Application Programming Interface]] (SAPI)\n* [[Simple DirectMedia Layer]] (SDL)\n{{Div col end}}\n\n==See also==\n{{Div col|colwidth=22em}}\n* [[API testing]]\n* [[API writer]]\n* [[Calling convention]]\n* [[Comparison of application virtual machines]]\n* [[Common Object Request Broker Architecture]] (CORBA)\n* [[Document Object Model]] (DOM)\n* [[Double-chance function]]\n* [[Foreign function interface]]\n* [[Front and back ends]]\n* [[Interface (computing)]]\n* [[Interface control document]]\n* [[List of 3D graphics APIs]]\n* [[Name mangling]]\n* [[Open API]]\n* [[Augmented web]]\n* [[Web content vendor]]\n* [[Open API]]\n* [[Open Service Interface Definitions]]\n* [[Platform-enabled website]]\n* [[Plug-in (computing)|Plugin]]\n* [[RAML (software)]]\n* [[Software Development Kit]]\n* [[Web API]]\n* [[XPCOM]]\n* [[Microservices]]\n{{Div col end}}\n\n== References ==\n{{Reflist}}\n\n==Further reading==\n* {{Cite journal |last=Taina Bucher |year=2013 |title=Objects of Intense Feeling: The Case of the Twitter API |url=http://computationalculture.net/article/objects-of-intense-feeling-the-case-of-the-twitter-api |journal=Computational Culture |issn=2047-2390 |number=3}} argues that \"APIs are far from neutral tools\" and form a key part of contemporary programming, understood as a fundamental part of culture.\n\n{{Operating system}}\n\n{{Authority control}}\n\n[[Category:Technical communication]]\n[[Category:Application programming interfaces| ]]\n", "text_old": "{{short description|Set of subroutine definitions, protocols, and tools for building software and applications}}\n\n{{hatnote group|\n{{redirect|API}}\n{{hatnote|\"Api.php\" redirects here. For the Wikipedia API, see {{Plain link|https://en.wikipedia.org/w/api.php|/w/api.php}}.|selfref=true}}\n}}\n\nAn '''application programming interface''' ('''API''') is a [[Interface (computing)|computing interface]] to a software component or a system, that defines how other components or systems can use it. It defines the kinds of calls or requests that can be made, how to make them, the data formats that should be used, the conventions to follow, etc. It can also provide extension mechanisms so that users can extend existing functionality in various ways and to varying degrees.<ref name=\"Fisher1\">{{Cite web |url=https://books.google.com/books?id=YToEAAAAMBAJ&pg=PA6&dq=application+programming+interface&hl=en&sa=X&ved=2ahUKEwjWlZHBrYPoAhXlQd8KHWiECLMQ6AEwBHoECAEQAg#v=onepage&q=application%20programming%20interface&f=false |title=OS/2 EE to Get 3270 Interface Early |last=Fisher |first=Sharon |date=1989 |website=Google Books}}</ref> An API can be entirely custom, specific to a component, or it can be designed based on an industry standard to ensure interoperability. Some APIs have to be documented, others are designed so that they can be \"interrogated\" to determine supported functionality. Since other components/systems rely only on the API, the system that provides the API can (ideally) change its internal details \"behind\" that API without affecting its users.  \n\nToday, with the rise of [[REST]] and [[web services]] over [[HTTP]], the term is often assumed to refer to APIs of such services when given no other context (see the [[#Web APIs|Web APIs]] section).  \n\nSometimes the term API is, by extension, used to refer to the subset of software entities (code, subcomponents, modules, etc.) that serve to actually implement the API of some encompassing component or system.\n\n== Purpose ==\nIn building applications, an API (application programming interface) simplifies programming by [[Abstraction (software engineering)|abstracting]] the underlying implementation and only exposing objects or actions the developer needs. While a graphical interface for an [[email client]] might provide a user with a button that performs all the steps for fetching and highlighting new emails, an API for file [[input/output]] might give the developer a [[Subroutine|function]] that copies a file from one location to another without requiring that the developer understand the [[Journaling file system|file system]] operations occurring behind the scenes.<ref name=\"Clarke4\">{{Cite web |url=http://www.drdobbs.com/windows/measuring-api-usability/184405654 |title=Measuring API Usability |last=3333Clarke |first=Steven |date=2004 |website=Dr. Dobb's |access-date=29 July 2016}}</ref>\n\n== Usage ==\n\n===Libraries and frameworks===\nAn API usually is related to a [[library (computing)|software library]]. The API describes and prescribes the \"expected behavior\" (a specification) while the library is an \"actual implementation\" of this set of rules.\n\nA single API can have multiple implementations (or none, being abstract) in the form of different libraries that share the same programming interface.\n\nThe separation of the API from its implementation can allow programs written in one language to use a library written in another. For example, because [[Scala (programming language)|Scala]] and [[Java (programming language)|Java]] compile to compatible [[bytecode]], Scala developers can take advantage of any Java API.<ref name=\"OderskySpoonVenners8\">{{Cite web |url=http://www.artima.com/pins1ed/combining-scala-and-java.html |title=Combining Scala and Java |last=Odersky |first=Martin |last2=Spoon |first2=Lex |date=10 December 2008 |website=www.artima.com |access-date=29 July 2016 |last3=Venners |first3=Bill}}</ref>\n\nAPI use can vary depending on the type of programming language involved.\nAn API for a [[procedural programming|procedural language]] such as [[Lua (programming language)|Lua]] could consist primarily of basic routines to execute code, manipulate data or handle errors while an API for an [[object-oriented programming|object-oriented language]], such as Java, would provide a specification of classes and its [[class method]]s.<ref>{{Cite journal |last=de Figueiredo |first=Luiz Henrique |last2=Ierusalimschy |first2=Roberto |last3=Filho |first3=Waldemar Celes |title=The design and implementation of a language for extending applications |url=https://www.researchgate.net/publication/2778436 |journal=TeCGraf Grupo de Tecnologia Em Computacao Grafica |access-date=29 July 2016}}</ref><ref name=\"Sintes16\">{{Cite web |url=http://www.javaworld.com/article/2077392/java-se/just-what-is-the-java-api-anyway.html |title=Just what is the Java API anyway? |last=Sintes |first=Tony |date=2001-07-13 |website=JavaWorld |access-date=29 July 2016}}</ref>\n\n[[Language binding]]s are also APIs. By mapping the features and capabilities of one language to an interface implemented in another language, a language binding allows a library or service written in one language to be used when developing in another language.<ref name=\"Emery\">{{Cite web |url=http://www.acm.org/tsc/apis.html |title=Standards, APIs, Interfaces and Bindings |last=Emery |first=David |publisher=Acm.org |url-status=dead |archive-url=https://web.archive.org/web/20150116081559/http://www.acm.org/tsc/apis.html |archive-date=2015-01-16 |access-date=2016-08-08}}</ref> Tools such as [[SWIG]] and F2PY, a [[Fortran]]-to-[[Python (programming language)|Python]] interface generator, facilitate the creation of such interfaces.<ref>{{Cite web |url=http://www.f2py.org/ |title=F2PY.org |publisher=F2PY.org |access-date=2011-12-18}}</ref>\n\nAn API can also be related to a [[Framework (computer science)|software framework]]: a framework can be based on several libraries implementing several APIs, but unlike the normal use of an API, the access to the behavior built into the framework is mediated by extending its content with new classes plugged into the framework itself.\n\nMoreover, the overall program flow of control can be out of the control of the caller and in the hands of the framework by [[inversion of control]] or a similar mechanism.<ref>{{cite web\n|first = Martin\n|last = Fowler\n|title = Inversion Of Control\n|url = http://martinfowler.com/bliki/InversionOfControl.html\n}}\n</ref><ref>{{cite web\n|first = Mohamed\n|last = Fayad\n|title = Object-Oriented Application Frameworks\n|url = http://www.dre.vanderbilt.edu/~schmidt/CACM-frameworks.html\n}}\n</ref>\n\n===Operating systems===\nAn API can specify the interface between an application and the [[operating system]].<ref name=\"Oreilly91\">{{Cite book |last=Lewine |first=Donald A. |url=http://shop.oreilly.com/product/9780937175736.do |title=POSIX Programmer's Guide |date=1991 |publisher=O'Reilly & Associates, Inc. |page=1 |access-date=2 August 2016}}</ref> [[POSIX]], for example, specifies a set of common APIs that aim to enable an application written for a POSIX conformant operating system to be [[Compiler|compiled]] for another POSIX conformant operating system.\n\n[[Linux]] and [[Berkeley Software Distribution]] are examples of operating systems that implement the POSIX APIs.<ref name=\"WestDedrick16\">{{Cite journal |last=West |first=Joel |last2=Dedrick |first2=Jason |date=2001 |title=Open source standardization: the rise of Linux in the network era |url=http://www.joelwest.org/Papers/WestDedrick2001b.pdf |journal=Knowledge, Technology & Policy |volume=14 |issue=2 |pages=88\u2013112 |access-date=2 August 2016}}</ref>\n\n[[Microsoft]] has shown a strong commitment to a backward-compatible API, particularly within its [[Windows API]] (Win32) library, so older applications may run on newer versions of Windows using an executable-specific setting called \"Compatibility Mode\".<ref>\n{{cite web\n |author=Microsogt \n |url=http://www.microsoft.com/windowsxp/using/helpandsupport/learnmore/appcompat.mspx \n |title=Support for Windows XP \n |publisher=Microsoft \n |page=4 \n |date=October 2001 \n |url-status=dead \n |archiveurl=https://web.archive.org/web/20090926235439/http://www.microsoft.com/windowsxp/using/helpandsupport/learnmore/appcompat.mspx \n |archivedate=2009-09-26 \n |df= \n}}</ref>\n\nAn API differs from an [[application binary interface]] (ABI) in that an API is source code based while an ABI is [[Binary file|binary]] based. For instance, [[POSIX]] provides APIs while the [[Linux Standard Base]] provides an ABI.<ref>{{cite web|\nurl=http://www.linuxfoundation.org/collaborate/workgroups/lsb/lsb-introduction|\ntitle=LSB Introduction|\npublisher=Linux Foundation|date=21 June 2012|\naccessdate=2015-03-27}}</ref><ref>{{cite web|\nfirst=Nick|\nlast=Stoughton|\nurl=https://db.usenix.org/publications/login/2005-04/openpdfs/standards2004.pdf|\ntitle=Update on Standards|\npublisher=[[USENIX]]|date=April 2005|\naccessdate=2009-06-04}}</ref>\n\n===Remote APIs===\nRemote APIs allow developers to manipulate remote resources through [[Communications protocol|protocol]]s, specific standards for communication that allow different technologies to work together, regardless of language or platform.\nFor example, the Java Database Connectivity API allows developers to query many different types of [[database]]s with the same set of functions, while the [[Java remote method invocation]] API uses the Java Remote Method Protocol to allow [[Remote procedure call|invocation]] of functions that operate remotely, but appear local to the developer.<ref name=\"Bierhoff9\">{{Cite journal |last=Bierhoff |first=Kevin |date=23 April 2009 |title=API Protocol Compliance in Object-Oriented Software |url=https://www.cs.cmu.edu/~kbierhof/thesis/bierhoff-thesis.pdf |journal=CMU Institute for Software Research |access-date=29 July 2016}}</ref><ref name=\"Wilson16\">{{Cite web |url=http://www.javaworld.com/javaworld/jw-11-2000/jw-1110-smartproxy.html |title=Get smart with proxies and RMI |last=Wilson |first=M. Jeff |date=2000-11-10 |website=JavaWorld |access-date=29 July 2016}}</ref>\n\nTherefore, remote APIs are useful in maintaining the object abstraction in [[object-oriented programming]]; a method call, executed locally on a proxy object, invokes the corresponding method on the remote object, using the remoting protocol, and acquires the result to be used locally as a return value.\n\nA modification on the proxy object also will result in a corresponding modification on the remote object.<ref name=\"AdvancedCorba\">{{cite book |first       = Michi\n |last        = Henning\n |first2      = Steve\n |last2       = Vinoski\n |title       = Advanced CORBA Programming with C++\n |url         = https://archive.org/details/advancedcorbapro00henn\n |publisher   = [[Addison-Wesley]]\n |access-date = 16 June 2015\n |year        = 1999\n |isbn        = 978-0201379273\n |url-access  = registration\n}}</ref>\n\n===Web APIs===\n{{Main|Web API}}\nWeb APIs are the defined interfaces through which interactions happen between an enterprise and applications that use its assets, which also is a [[Service-level agreement|Service Level Agreement]] (SLA) to specify the functional provider and expose the service path or URL for its API users. An API approach is an architectural approach that revolves around providing a program interface to a set of services to different applications serving different types of consumers.<ref>{{Cite web |url=http://www.hcltech.com/sites/default/files/apis_for_dsi.pdf |title=API-fication |date=August 2014 |website=www.hcltech.com |format=PDF download}}</ref>\n\nWhen used in the context of [[Web development tools|web development]], an API is typically defined as a set of specifications, such as [[Hypertext Transfer Protocol]] (HTTP) request messages, along with a definition of the structure of response messages, usually in an Extensible Markup Language ([[XML]]) or JavaScript Object Notation ([[JSON]]) format. An example might be a shipping company API that can be added to an eCommerce-focused website to facilitate ordering shipping services and automatically include current shipping rates, without the site developer having to enter the shipper's rate table into a web database. While \"web API\" historically has been virtually synonymous with [[web service]], the recent trend (so-called [[Web 2.0]]) has been moving away from Simple Object Access Protocol ([[SOAP]]) based web services and [[service-oriented architecture]] (SOA) towards more direct [[representational state transfer]] (REST) style [[web resource]]s and [[resource-oriented architecture]] (ROA).<ref>{{cite web\n |first        = Djamal\n |last         = Benslimane\n |author2      = Schahram Dustdar\n |author3      = Amit Sheth\n |title        = Services Mashups: The New Generation of Web Applications\n |url          = http://dsonline.computer.org/portal/site/dsonline/menuitem.9ed3d9924aeb0dcd82ccc6716bbe36ec/index.jsp?&pName=dso_level1&path=dsonline/2008/09&file=w5gei.xml&xsl=article.xsl\n |work         = IEEE Internet Computing, vol. 12, no. 5\n |publisher    = Institute of Electrical and Electronics Engineers\n |pages        = 13\u201315\n |year         = 2008\n |access-date  = 2019-10-01\n |archive-url  = https://web.archive.org/web/20110928211221/http://dsonline.computer.org/portal/site/dsonline/menuitem.9ed3d9924aeb0dcd82ccc6716bbe36ec/index.jsp?&pName=dso_level1&path=dsonline%2F2008%2F09&file=w5gei.xml&xsl=article.xsl\n |archive-date = 2011-09-28\n |url-status   = dead\n}}</ref> Part of this trend is related to the [[Semantic Web]] movement toward [[Resource Description Framework]] (RDF), a concept to promote web-based [[ontology engineering]] technologies. Web APIs allow the combination of multiple APIs into new applications known as [[mashup (web application hybrid)|mashup]]s.<ref>\n{{citation\n |first       = James\n |last        = Niccolai\n |title       = So What Is an Enterprise Mashup, Anyway?\n |url         = https://www.pcworld.com/article/145039/so_what_is_an_enterprise_mashup_anyway.html\n |work        = [[PC World (magazine)|PC World]]\n |date        = 2008-04-23\n}}</ref>\nIn the social media space, web APIs have allowed web communities to facilitate sharing content and data between communities and applications. In this way, content that is created in one place dynamically can be posted and updated to multiple locations on the web.<ref name=\"Parr16\">{{cite web|last1=Parr|first1=Ben|title=The Evolution of the Social Media API|url=http://mashable.com/2009/05/21/social-media-api/|website=Mashable|accessdate=26 July 2016}}\n</ref> For example, Twitter's REST API allows developers to access core Twitter data and the Search API provides methods for developers to interact with Twitter Search and trends data.{{citation needed|date=December 2018}}\n\n==Design==\nThe design of an API has significant impact on its usage.<ref name=\"Clarke4\" /> The principle of [[information hiding]] describes the role of programming interfaces as enabling [[modular programming]] by hiding the implementation details of the modules so that users of modules need not understand the complexities inside the modules.<ref name=\"Parnas72\">{{Cite journal |last=Parnas |first=D.L. |date=1972 |title=On the Criteria To Be Used in Decomposing Systems into Modules |url=https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf |journal=Communications of the ACM |volume=15 |issue=12 |pages=1053\u20131058 |doi=10.1145/361598.361623}}</ref> Thus, the design of an API attempts to provide only the tools a user would expect.<ref name=\"Clarke4\" /> The design of programming interfaces represents an important part of [[software architecture]], the organization of a complex piece of software.<ref name=\"GarlanShaw94\">{{Cite journal |last=Garlan |first=David |last2=Shaw |first2=Mary |date=January 1994 |title=An Introduction to Software Architecture |url=https://www.cs.cmu.edu/afs/cs/project/able/ftp/intro_softarch/intro_softarch.pdf |journal=Advances in Software Engineering and Knowledge Engineering |volume=1 |access-date=8 August 2016}}</ref>\n\nSeveral authors have created recommendations for how to design APIs, such as [[Joshua Bloch]],<ref>{{cite web \n| last = Bloch \n| first = Josh \n| title = How to design a good API and why it matters\n| url = http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/32713.pdf}}</ref> Kin Lane,<ref>{{Cite web |url=http://pages.3scale.net/rs/516-GHI-083/images/api-provider-guide-api-design.pdf |title=The Industry Guide to API Design |last=Lane |first=Kin |date=2016-03-14 |publisher=Kin Lane via 3scale |url-status=dead |archive-url=https://web.archive.org/web/20160315040538/http://pages.3scale.net/rs/516-GHI-083/images/api-provider-guide-api-design.pdf |archive-date=2016-03-15 |access-date=2016-03-14}}</ref> and Michi Henning.<ref>{{cite web\n| last = Henning\n| first = Michi\n| url = http://queue.acm.org/detail.cfm?id=1255422\n| title = API: Design Matters}}</ref>\nPatterns for the design and evolution of remote APIs are covered in a series of EuroPLoP papers.<ref>{{cite web\n| last = Zimmermann, Olaf\n| url = https://dl.acm.org/citation.cfm?id=3147734\n| title = Interface Representation Patterns: Crafting and Consuming Message-Based Remote APIs}}</ref><ref>{{cite web\n| last = Stocker, Mirko\n| url = https://dl.acm.org/citation.cfm?id=3282319\n| title = Interface Quality Patterns: Communicating and Improving the Quality of Microservices APIs}}</ref>\n\n==Release policies==\nAPIs are one of the more common ways technology companies integrate with each other. Those that provide and use APIs are considered as being members of a business ecosystem.<ref>{{cite web|\nlast=de Ternay|\nfirst=Guerric|\ntitle=Business Ecosystem: Creating an Economic Moat|\nurl=http://boostcompanies.com/business-ecosystem|\nwebsite=BoostCompanies|\ndate=Oct 10, 2015|\naccessdate=2016-02-01}}</ref>\n\nThe main policies for releasing an API are:<ref name=\"Boyd16\">{{Cite web |url=http://www.programmableweb.com/news/private-partner-or-public-which-api-strategy-best-business/2014/02/21 |title=Private, Partner or Public: Which API Strategy Is Best for Business? |last=Boyd |first=Mark |date=2014-02-21 |website=ProgrammableWeb |access-date=2 August 2016}}</ref>\n\n*<u>Private</u>: The API is for internal company use only.\n*<u>Partner</u>: Only specific business partners can use the API. For example, [[transportation network companies]] such as [[Uber]] and [[Lyft]] allow approved third-party developers to directly order rides from within their apps. This allows the companies to exercise quality control by curating which apps have access to the API, and provides them with an additional revenue stream.<ref name=\"Weissbrot16\">{{Cite web |url=http://adexchanger.com/mobile/car-service-apis-everywhere-whats-partner-apps/ |title=Car Service APIs Are Everywhere, But What's In It For Partner Apps? {{!}} AdExchanger |last=Weissbrot |first=Alison |date=7 July 2016 |website=ad exchanger |access-date=2 August 2016}}</ref>\n*<u>Public</u>: The API is available for use by the public. For example, Microsoft makes the [[Microsoft Windows]] API public, and [[Apple Inc.|Apple]] releases its APIs [[Carbon (API)|Carbon]] and [[Cocoa (API)|Cocoa]], so that software can be written for their [[Computing platform|platforms]]. Not all public APIs are generally accessible by everybody. For example, Internet service providers like Cloudflare or Voxility, use RESTful APIs to allow customers and resellers access to their infrastructure information, DDoS stats, network performance or dashboard controls.<ref name=\"Cloudflare\">{{Cite web |url=https://api.cloudflare.com/ |title=Cloudflare API v4 Documentation |date=25 February 2020 |website=cloudflare |access-date=27 February 2020}}</ref> Access to such APIs is granted either by \u201cAPI tokens\u201d, or customer status validations.<ref name=\"SmashMagazine\">{{Cite web |url=https://www.smashingmagazine.com/2018/01/understanding-using-rest-api/ |title=Car Service APIs Are Everywhere, But What's In It For Partner Apps |last=Liew |first=Zell |date=17 January 2018 |website=Smashing Magazine |access-date=27 February 2020}}</ref>\n\n===Public API implications===\nAn important factor when an API becomes public is its \"interface stability\". Changes to the API \u2014for example adding new parameters to a function call\u2014could break compatibility with the clients that depend on that API.<ref name=\"researchgate.net\">{{Cite book |last=Shi |first=Lin |url=https://www.researchgate.net/publication/225147411 |title=An Empirical Study on Evolution of API Documentation |last2=Zhong |first2=Hao |last3=Xie |first3=Tao |last4=Li |first4=Mingshu |date=2011 |work=International Conference on Fundamental Approaches to Software Engineering |isbn=978-3-642-19810-6 |series=Lecture Notes in Computer Science |volume=6603 |pages=416\u2013431 |doi=10.1007/978-3-642-19811-3_29 |access-date=22 July 2016}}</ref>\n\nWhen parts of a publicly presented API are subject to change and thus not stable, such parts of a particular API should be documented explicitly as \"unstable\". For example, in the [[Google Guava]] library, the parts that are considered unstable, and that might change in the near future, are marked with the [[Java annotation]] <code>@Beta</code>.<ref>{{Cite web |url=https://code.google.com/p/guava-libraries/ |title=guava-libraries - Guava: Google Core Libraries for Java 1.6+ - Google Project Hosting |date=2014-02-04 |access-date=2014-02-11}}</ref>\n\nA public API can sometimes declare parts of itself as ''deprecated'' or rescinded. This usually means that part of the API should be considered a candidate for being removed, or modified in a backward incompatible way. Therefore, these changes allows developers to transition away from parts of the API that will be removed or not supported in the future.<ref name=\"OracleDeprecation16\">{{Cite web |url=http://docs.oracle.com/javase/7/docs/technotes/guides/javadoc/deprecation/deprecation.html |title=How and When to Deprecate APIs |last=Oracle |website=Java SE Documentation |access-date=2 August 2016}}</ref>\n\nClient code may contain innovative or opportunistic usages that were not intended by the API designers. In other words, for a library with a significant user base, when an element becomes part of the public API, it may be used in diverse ways.<ref name=\"MendezBaudry2013\">{{Cite book |last=Mendez |first=Diego |title=2013 IEEE 13th International Working Conference on Source Code Analysis and Manipulation (SCAM) |last2=Baudry |first2=Benoit |last3=Monperrus |first3=Martin |year=2013 |isbn=978-1-4673-5739-5 |pages=43\u201352 |chapter=Empirical evidence of large-scale diversity in API usage of object-oriented software |arxiv=1307.4062 |doi=10.1109/SCAM.2013.6648183 |chapter-url=https://hal.archives-ouvertes.fr/hal-00844753/document}}</ref>\nOn February 19, 2020, [[Akamai Technologies|Akamai]] published their annual \u201cState of the Internet\u201d report, showcasing the growing trend of cybercriminals targeting public API platforms at financial services worldwide. From December 2017 through November 2019, Akamai witnessed 85.42 billion credential violation attacks. About 20%, or 16.55 billion, were against hostnames defined as API endpoints. Of these, 473.5 million have targeted financial services sector organizations.<ref name=\"VentureBeat\">{{Cite web |url=https://venturebeat.com/2020/02/19/akamai-cybercriminals-are-attacking-apis-at-financial-services-firms/ |title=Akamai: Cybercriminals are attacking APIs at financial services firms |last=Takanashi |first=Dean |date=19 February 2020 |website=Venture Beat |access-date=27 February 2020}}</ref>\n\n==Documentation==\nAPI documentation describes what services an API offers and how to use those services, aiming to cover everything a client would need to know for practical purposes.\n\nDocumentation is crucial for the development and maintenance of applications using the API.<ref name=\"DekelHerbsleb9\">{{Cite journal |last=Dekel |first=Uri |last2=Herbsleb |first2=James D. |date=May 2009 |title=Improving API Documentation Usability with Knowledge Pushing |journal=Institute for Software Research, School of Computer Science |citeseerx=10.1.1.446.4214}}</ref>\nAPI documentation is traditionally found in documentation files but can also be found in social media such as blogs, forums, and Q&A websites.<ref name=\"ParninTreude11\">{{Cite journal |last=Parnin |first=Chris |last2=Treude |first2=Cristoph |date=May 2011 |title=Measuring API Documentation on the Web |url=https://www.xmedo.com/measuring-api-documentation-web/ |journal=Web2SE |access-date=22 July 2016}}</ref>\n\nTraditional documentation files are often presented via a documentation system, such as Javadoc or Pydoc, that has a consistent appearance and structure.\nHowever, the types of content included in the documentation differs from API to API.<ref name=\"MaalejRobillard12\">{{Cite journal |last=Maalej |first=Waleed |last2=Robillard |first2=Martin P. |date=April 2012 |title=Patterns of Knowledge in API Reference Documentation |url=https://mobis.informatik.uni-hamburg.de/wp-content/uploads/2013/03/TSE-2012-04-0081.R2_Maalej.pdf |journal=IEEE Transactions on Software Engineering |access-date=22 July 2016}}</ref>\n\nIn the interest of clarity, API documentation may include a description of classes and methods in the API as well as \"typical usage scenarios, code snippets, design rationales, performance discussions, and contracts\", but implementation details of the API services themselves are usually omitted.\n\nRestrictions and limitations on how the API can be used are also covered by the documentation. For instance, documentation for an API function could note that its parameters cannot be null, that the function itself is not [[Thread safety|thread safe]],<ref name=\"MonperrusEichberg11\">{{Cite journal |last=Monperrus |first=Martin |last2=Eichberg |first2=Michael |last3=Tekes |first3=Elif |last4=Mezini |first4=Mira |date=3 December 2011 |title=What should developers be aware of? An empirical study on the directives of API documentation |journal=Empirical Software Engineering |volume=17 |issue=6 |pages=703\u2013737 |arxiv=1205.6363 |doi=10.1007/s10664-011-9186-4}}</ref> or that a decrement and cancel protocol averts self-trading.{{Clarify|reason=explanation required|date=February 2018}}\nBecause API documentation tends to be comprehensive, it is a challenge for writers to keep the documentation updated and for users to read it carefully, potentially yielding bugs.<ref name=\"researchgate.net\" />\n\nAPI documentation can be enriched with metadata information like [[Java annotation]]s. This metadata can be used by the compiler, tools, and by the ''run-time'' environment to implement custom behaviors or custom handling.<ref>{{Cite web |url=http://download.oracle.com/javase/1,5.0/docs/guide/language/annotations.html |title=Annotations |publisher=[[Sun Microsystems]] |access-date=2011-09-30}}.</ref>\n\nIt is possible to generate API documentation in a data-driven manner. By observing many programs that use a given API, it is possible to infer the typical usages, as well the required contracts and directives.<ref>{{Cite book |last=Bruch |first=Marcel |title=2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010) |last2=Mezini |first2=Mira |last3=Monperrus |first3=Martin |year=2010 |isbn=978-1-4244-6802-7 |pages=141\u2013150 |chapter=Mining subclassing directives to improve framework reuse |citeseerx=10.1.1.434.15 |doi=10.1109/msr.2010.5463347}}</ref> Then, templates can be used to generate natural language from the mined data.\n\n==Copyright controversy==\n{{Main|Oracle America, Inc. v. Google, Inc.}}\nIn 2010, Oracle Corporation sued Google for having distributed a new implementation of Java embedded in the Android operating system.<ref>{{Cite web |url=http://www.drdobbs.com/jvm/232901227 |title=Oracle and the End of Programming As We Know It |date=2012-05-01 |publisher=DrDobbs |access-date=2012-05-09}}</ref> Google had not acquired any permission to reproduce the Java API, although permission had been given to the similar OpenJDK project. Judge William Alsup ruled in the ''Oracle v. Google'' case that APIs cannot be [[copyrighted]] in the U.S, and that a victory for Oracle would have widely expanded copyright protection and allowed the copyrighting of simple software commands:\n\n{{quote|To accept Oracle's claim would be to allow anyone to copyright one version of code to carry out a system of commands and thereby bar all others from writing its own different versions to carry out all or part of the same commands.<ref>{{Cite web |url=http://www.tgdaily.com/business-and-law-features/63756-apis-cant-be-copyrighted-says-judge-in-oracle-case |title=APIs Can't be Copyrighted Says Judge in Oracle Case |date=2012-06-01 |publisher=TGDaily |access-date=2012-12-06}}</ref><ref>{{cite web\n | url = https://www.wired.com/wiredenterprise/wp-content/uploads/2012/05/Judge-Alsup-Ruling-on-Copyrightability-of-APIs.pdf\n | title = Oracle America, Inc. vs. Google Inc.\n | date = 2012-05-31 | accessdate = 2013-09-22\n | publisher = [[Wired (magazine)|Wired]]\n}}</ref>}}\n\nIn 2014, however, Alsup's ruling was overturned on appeal to the [[United States Court of Appeals for the Federal Circuit|Court of Appeals for the Federal Circuit]], though the question of whether such use of APIs constitutes [[fair use]] was left unresolved.<ref>{{Cite news |last=Rosenblatt, Seth |url=https://www.cnet.com/news/court-sides-with-oracle-over-android-in-java-patent-appeal/ |title=Court sides with Oracle over Android in Java patent appeal |date=May 9, 2014 |work=CNET |access-date=2014-05-10}}</ref>\n\nIn 2016, following a two-week trial, a jury determined that Google's reimplementation of the Java API constituted fair use, but Oracle vowed to appeal the decision.<ref>{{Cite web |url=https://arstechnica.com/tech-policy/2016/05/google-wins-trial-against-oracle-as-jury-finds-android-is-fair-use/ |title=Google beats Oracle\u2014Android makes \"fair use\" of Java APIs |date=2016-05-26 |website=Ars Technica |access-date=2016-07-28}}</ref> Oracle won on its appeal, with the Court of Appeals for the Federal Circuit ruling that Google's use of the APIs did not qualify for fair use.<ref name=\"bbn march2018\">{{Cite web |url=https://www.bloomberg.com/news/articles/2018-03-27/oracle-wins-revival-of-billion-dollar-case-against-google |title=Oracle Wins Revival of Billion-Dollar Case Against Google |last=Decker |first=Susan |date=March 27, 2018 |website=[[Bloomberg Businessweek]] |access-date=March 27, 2018}}</ref> In 2019, Google appealed to the [[Supreme Court of the United States]] over both the copyrightability and fair use rulings, and the Supreme Court granted review.<ref name=\"ars Jan2019\">{{Cite web |url=https://arstechnica.com/tech-policy/2019/01/google-asks-supreme-court-to-overrule-disastrous-ruling-on-api-copyrights/ |title=Google asks Supreme Court to overrule disastrous ruling on API copyrights |last=Lee |first=Timothy |date=January 25, 2019 |website=[[Ars Technica]] |access-date=February 8, 2019}}</ref>\n\n== Examples ==\n{{Main category|Application programming interfaces}}\n\n{{Div col}}\n* [[Advanced SCSI programming interface|ASPI]] for [[SCSI]] device interfacing\n* [[Cocoa (API)|Cocoa]] and [[Carbon (API)|Carbon]] for the [[Macintosh]]\n* [[DirectX]] for [[Microsoft Windows]]\n* [[EHLLAPI]]\n* [[List of Java APIs|Java APIs]]\n* [[Open Database Connectivity|ODBC]] for [[Microsoft Windows]]\n* [[OpenAL]] cross-platform sound API\n* [[OpenCL]] cross-platform API for general-purpose computing for CPUs & GPUs\n* [[OpenGL]] cross-platform graphics API\n* [[OpenMP]] API that supports multi-platform shared memory multiprocessing programming in C, C++ and Fortran on many architectures, including Unix and Microsoft Windows platforms.\n* [[Server Application Programming Interface]] (SAPI)\n* [[Simple DirectMedia Layer]] (SDL)\n{{Div col end}}\n\n==See also==\n{{Div col|colwidth=22em}}\n* [[API testing]]\n* [[API writer]]\n* [[Calling convention]]\n* [[Comparison of application virtual machines]]\n* [[Common Object Request Broker Architecture]] (CORBA)\n* [[Document Object Model]] (DOM)\n* [[Double-chance function]]\n* [[Foreign function interface]]\n* [[Front and back ends]]\n* [[Interface (computing)]]\n* [[Interface control document]]\n* [[List of 3D graphics APIs]]\n* [[Name mangling]]\n* [[Open API]]\n* [[Augmented web]]\n* [[Web content vendor]]\n* [[Open API]]\n* [[Open Service Interface Definitions]]\n* [[Platform-enabled website]]\n* [[Plug-in (computing)|Plugin]]\n* [[RAML (software)]]\n* [[Software Development Kit]]\n* [[Web API]]\n* [[XPCOM]]\n* [[Microservices]]\n{{Div col end}}\n\n== References ==\n{{Reflist}}\n\n==Further reading==\n* {{Cite journal |last=Taina Bucher |year=2013 |title=Objects of Intense Feeling: The Case of the Twitter API |url=http://computationalculture.net/article/objects-of-intense-feeling-the-case-of-the-twitter-api |journal=Computational Culture |issn=2047-2390 |number=3}} argues that \"APIs are far from neutral tools\" and form a key part of contemporary programming, understood as a fundamental part of culture.\n\n{{Operating system}}\n\n{{Authority control}}\n\n[[Category:Technical communication]]\n[[Category:Application programming interfaces| ]]\n", "name_user": "155.145.208.135", "label": "unsafe", "comment": "(\u2192\u200eOperating systems)", "url_page": "//en.wikipedia.org/wiki/Application_programming_interface"}
{"title_page": "Kazakhstan/Transnational issues", "text_new": "#REDIRECT [[Foreign_relations_of_Kazakhstan]]\n\n{{R from subpage}}\n", "text_old": "#REDIRECT [[Foreign_relations_of_Kazakhstan]]\n", "name_user": "1234qwer1234qwer4", "label": "safe", "comment": "\u2192\u200etop:R from subpage", "url_page": "//en.wikipedia.org/w/index.php?title=Kazakhstan/Transnational_issues&redirect=no"}
{"title_page": "Kazakhstan/Military", "text_new": "#REDIRECT [[Armed Forces of the Republic of Kazakhstan]]\n\n{{R from subpage}}\n", "text_old": "#REDIRECT [[Armed Forces of the Republic of Kazakhstan]]\n", "name_user": "1234qwer1234qwer4", "label": "safe", "comment": "\u2192\u200etop:R from subpage", "url_page": "//en.wikipedia.org/w/index.php?title=Kazakhstan/Military&redirect=no"}
{"title_page": "Kazakhstan/Transportation", "text_new": "#REDIRECT [[Transport in Kazakhstan]]\n\n{{R from subpage}}\n", "text_old": "#REDIRECT [[Transport in Kazakhstan]]\n", "name_user": "1234qwer1234qwer4", "label": "safe", "comment": "\u2192\u200etop:R from subpage", "url_page": "//en.wikipedia.org/w/index.php?title=Kazakhstan/Transportation&redirect=no"}
{"title_page": "Kazakhstan/Communications", "text_new": "#REDIRECT [[Telecommunications in Kazakhstan]]\n\n{{R from subpage}}\n", "text_old": "#REDIRECT [[Telecommunications in Kazakhstan]]\n", "name_user": "1234qwer1234qwer4", "label": "safe", "comment": "\u2192\u200etop:R from subpage", "url_page": "//en.wikipedia.org/w/index.php?title=Kazakhstan/Communications&redirect=no"}
{"title_page": "Kazakhstan/Economy", "text_new": "#REDIRECT [[Economy_of_Kazakhstan]]\n\n{{R from subpage}}\n", "text_old": "#REDIRECT [[Economy_of_Kazakhstan]]\n", "name_user": "1234qwer1234qwer4", "label": "safe", "comment": "\u2192\u200etop:R from subpage", "url_page": "//en.wikipedia.org/w/index.php?title=Kazakhstan/Economy&redirect=no"}
{"title_page": "Kazakhstan/Government", "text_new": "#REDIRECT [[Government of Kazakhstan]]\n\n{{R from subpage}}\n", "text_old": "#REDIRECT [[Government of Kazakhstan]]\n", "name_user": "1234qwer1234qwer4", "label": "safe", "comment": "\u2192\u200etop:R from subpage", "url_page": "//en.wikipedia.org/w/index.php?title=Kazakhstan/Government&redirect=no"}
{"title_page": "Kazakhstan/People", "text_new": "#REDIRECT [[Demographics of Kazakhstan]]\n\n{{R from subpage}}\n", "text_old": "#REDIRECT [[Demographics of Kazakhstan]]\n", "name_user": "1234qwer1234qwer4", "label": "safe", "comment": "\u2192\u200etop:R from subpage", "url_page": "//en.wikipedia.org/w/index.php?title=Kazakhstan/People&redirect=no"}
{"title_page": "North Korea/Transportation", "text_new": "#REDIRECT [[Transport in North Korea]]\n\n{{R from subpage}}\n", "text_old": "#REDIRECT [[Transport in North Korea]]\n", "name_user": "1234qwer1234qwer4", "label": "safe", "comment": "\u2192\u200etop:R from subpage", "url_page": "//en.wikipedia.org/w/index.php?title=North_Korea/Transportation&redirect=no"}
{"title_page": "North Korea/Communications", "text_new": "#REDIRECT [[Telecommunications in North Korea]]\n\n{{R from subpage}}\n", "text_old": "#REDIRECT [[Telecommunications in North Korea]]\n", "name_user": "1234qwer1234qwer4", "label": "safe", "comment": "\u2192\u200etop:R from subpage", "url_page": "//en.wikipedia.org/w/index.php?title=North_Korea/Communications&redirect=no"}
{"title_page": "North Korea/Economy", "text_new": "#REDIRECT [[Economy_of_North_Korea]]\n\n{{R from subpage}}\n", "text_old": "#REDIRECT [[Economy_of_North_Korea]]\n", "name_user": "1234qwer1234qwer4", "label": "safe", "comment": "\u2192\u200etop:R from subpage", "url_page": "//en.wikipedia.org/w/index.php?title=North_Korea/Economy&redirect=no"}
{"title_page": "North Korea/Government", "text_new": "#REDIRECT [[Government of North Korea]]\n\n{{R from subpage}}\n", "text_old": "#REDIRECT [[Government of North Korea]]\n", "name_user": "1234qwer1234qwer4", "label": "safe", "comment": "\u2192\u200etop:R from subpage", "url_page": "//en.wikipedia.org/w/index.php?title=North_Korea/Government&redirect=no"}
