{"title_page": "Luan Ferreira", "text_new": "{{notability|1=Biographies|date=March 2020}}\n\n{{Orphan|date=January 2020}}\n\n{{short description|Brazilian Internet personality}}\n{{Infobox person\n| name                    = Luan Ferreira \n| image                   = \n| caption                 = \n| birth_name              = Luan Aparecido Ferreira Ribeiro\n| birth_date              = {{Birth date and age|df=yes|1997|07|02}}\n| birth_place             = [[Uberaba]], [[Minas Gerais]], Brazil   \n| death_date              = \n| death_place             = \n| othername               = \n| occupation              = Internet personality, model and sportsman\n| years_active            = \n| spouse                  = \n| domesticpartner         = \n| children                = \n| parents                 = Djalma Santos and Ieda Maria Ferreira\n| siblings                = Luana Ferreira\n| television              = MGTV \n| height                  = {{height|m=1.75}} \n| education               = \n| weight                  = \n| measurements            = \n}}\n'''Luan Aparecido Ferreira Ribeiro''' better known as '''Luan Ferreira''' (born 2 July 1997) is a Brazilian internet personality, model and sportsman.<ref>{{Cite web|title=Luan Ferreira Bomba no Instagram Instagram |url = http://folhanobre.com.br/2019/04/18/saiba-quem-e-luangat-modelo-bastante-popular-no-instagram/245478 |work= Folha |access-date= 2016-01-18}}</ref><ref>{{Cite web|title=Influenciador Luan Ferreira diverte internet com dancinha para agitar quarentena. |url = https://meiahora.ig.com.br/celebridades-e-tv/que-isso-gordinho/2020/03/5884871-influenciador-luan-ferreira-diverte-internet-com-dancinha-para-agitar-quarentena.html |work= Meia Hora IG|access-date= 2016-01-18}}</ref><ref>{{Cite web|title=Vice Campe\u00e3o Brasileiro pelo Minas, Luan Ferreira relembra in\u00edcio de carreira esportiva no v\u00f4lei! |url = https://sportbuzz.uol.com.br/noticias/volei/vice-campeao-brasileiro-pelo-minas-relembra-inicio-de-carreira-esportiva-no-volei.phtml |work= Sportbuzz|access-date= 2016-01-18}}</ref> <ref>{{Cite web|title= Influencer Luan Ferreira conquista seguidores no Instagram com dicas de estilo de vida |url = https://extra.globo.com/tv-e-lazer/treta-show/influencer-luan-ferreira-conquista-seguidores-no-instagram-com-dicas-de-estilo-de-vida-24328001.html|work= extra.globo.com|access-date= 2016-01-18}}</ref>\n\n==Biography and career==\n\nLuan was born in Uberaba, Minas Gerais, Brazil,<ref>{{Cite web|title=Digital Influencer Luan Ferreira, se torna refer\u00eancia nas redes sociais com seu carisma |url = https://veja.abril.com.br/economia/jp/digital-influencer-luangat-se-torna-referencia-nas-redes-sociais-com-seu-carisma/ |work= Veja |access-date= 2019-01-18}}</ref>   where he grew up and began his studies, finished his studies at the Marechal Castelo Branco State School in 2014. His internet career began in 2013, still teenagers when he created a YouTube channel, <ref>{{Cite web|title=Luan Ferreira: Conhe\u00e7a a hist\u00f3ria da personalidade e Digital Influencer que est\u00e1 por todo lado |url = https://gazetanacional.com.br/luangat-conheca-a-historia-da-personalidade-e-digital-influencer-que-esta-por-todo-lado/ |work= Gazeta|access-date= 2019-01-18}}</ref> with what who became a video producer at the time also worked as a model and campaigned for famous Brazilian brands.<ref>{{Cite web|title= Saiba quem \u00e9 Luan Ferreira, modelo bastante popular no Instagram |url = https://central-brasil.com/celebridades/saiba-quem-e-luangat-modelo-bastante-popular-no-instagram/|work= Central Brazil|access-date= 2016-01-18}}</ref> \n\nIn parallel to that, he was also a [[volleyball]] <ref>{{Cite web|title=Antes do Direito, Luan Ferreira se destacou no mundo do v\u00f4lei |url = https://odia.ig.com.br/esporte/2019/10/5815115-antes-do-direito--luan-ferreira-se-destacou-no-mundo-do-volei.html |work= O Dia|access-date= 2016-01-18}}</ref> player and became a national runner-up in the , which took place in [[Jo\u00e3o Pessoa, Para\u00edba]].<ref>{{Cite web|title= Luan Ferreira Bomba no Instagram Instagram |url = http://folhanobre.com.br/2019/04/18/saiba-quem-e-luangat-modelo-bastante-popular-no-instagram/245478 |work= Folha Nobre|access-date= 2016-01-18}}</ref><ref>{{Cite web|title= Quem \u00e9 Luan Ferreira bastante popular na internet|url = https://diarioprime.com.br/blogs/saiba-quem-e-luangat-modelo-bastante-popular-no-instagram/ |work= Diario Prime|access-date= 2016-01-18}}</ref> He was already listed by the Brazilian tabloids, as one of the most influential Brazilian internet celebrities on Instagram.\nHe participated in the [[Rede Globo]] MGTV program and in 2019 was a juror of the Miss and Mister Brasil 2019 <ref>{{Cite web|title= Final do Miss e Mister Rio de Janeiro CNB 2019: Luan Ferreira, Marvvila, Narcisa Tamborindeguy e Bruna Barros ser\u00e3o jurados |url =https://www.breaktudo.com/final-do-miss-e-mister-rio-de-janeiro-cnb-2019-luangat-marvvila-narcisa-tamborindeguy-e-bruna-barros-serao-jurados/ |work= BreakTudo|access-date= 2016-01-18}}</ref> contest.<ref>{{Cite web|title= Miss e Mister Luangat |url =http://ailtonpitombo.com.br/blog/page/49/?page_i___m__ |work= Ailton Pitombo|access-date= 2016-01-18}}</ref> In February 2020, he signed a contract with the international model agency Fomomodels.<ref name=thingstodo>{{cite web|url= https://www.fomomodels.com/models/luan|title= Luan Ferreira|date=August 21, 2019|accessdate=December 4, 2019|work=Fomomodels}}</ref>\n\n\n==Filmography==\n{| class=\"wikitable\"\n! Year\n! Title\n! Grades\n! Notes\n|-\n| 2015\n| Blog da Lisa <ref>{{Cite web|title= Conhe\u00e7a o digital influencer que tem o sonho de ser juiz de direito: Luan Fereira|url= http://lisagomes.com.br/?p=2501|work= Blog da Lisa|access-date= 2016-01-18}}{{Dead link|date=March 2020 |bot=InternetArchiveBot |fix-attempted=yes }}</ref>\n\n| Himself\n| -\n|-\n| 2018\n| MGTV on Rede Globo <ref name=thingstodo>{{cite web|url=http://cartaodevisita.com.br/conteudo/29224/luan-ferreira-modelo-e-digital-influencer-e-a-grande-aposta-das-redes-sociais-atualmente|title=Luan Ferreira, modelo e Digital Influencer, \u00e9 a grande aposta das redes sociais atualmente|date=August 21, 2019|accessdate=December 4, 2019|work=Cart\u00e3o De Visita R7}}</ref>\n\n| Himself \n| -\n|-\n| 2019\n| Miss and Mister Brazil <ref name=thingstodo>{{cite web|url= http://www.meiahora.com/celebridades-e-tv/que-isso-gordinho/2020/03/5884871-influenciador-luan-ferreira-diverte-internet-com-dancinha-para-agitar-quarentena.html|title=Influenciador Luan Ferreira diverte internet com dancinha para agitar quarentena|date=August 21, 2019|accessdate=December 4, 2019|work=Meia Hora}}</ref>\n\n\n| Hilself \n| Jury\n|}\n\n==References==\n{{reflist|colwidth=30em}}\n\n{{DEFAULTSORT:Cardoso, Nah}}\n[[Category:1997 births]]\n[[Category:Living people]]\n[[Category:Brazilian Internet celebrities]]\n\n[[pt:Jogos Ol\u00edmpicos da Juventude 2014|Jogos Ol\u00edmpicos da Juventude 2014]]\n", "text_old": "{{notability|1=Biographies|date=March 2020}}\n\n{{Orphan|date=January 2020}}\n\n{{short description|Brazilian Internet personality}}\n{{Infobox person\n| name                    = Luan Ferreira \n| image                   = \n| caption                 = \n| birth_name              = Luan Aparecido Ferreira Ribeiro\n| birth_date              = {{Birth date and age|df=yes|1997|07|02}}\n| birth_place             = [[Uberaba]], [[Minas Gerais]], Brazil   \n| death_date              = \n| death_place             = \n| othername               = \n| occupation              = Internet personality, model and sportsman\n| years_active            = \n| spouse                  = \n| domesticpartner         = \n| children                = \n| parents                 = Djalma Santos and Ieda Maria Ferreira\n| siblings                = Luana Ferreira\n| television              = MGTV \n| height                  = {{height|m=1.75}} \n| education               = \n| weight                  = \n| measurements            = \n}}\n'''Luan Aparecido Ferreira Ribeiro''' better known as '''Luan Ferreira''' (born 2 July 1997) is a Brazilian internet personality, model and sportsman.<ref>{{Cite web|title=Luan Ferreira Bomba no Instagram Instagram |url = http://folhanobre.com.br/2019/04/18/saiba-quem-e-luangat-modelo-bastante-popular-no-instagram/245478 |work= Folha |access-date= 2016-01-18}}</ref><ref>{{Cite web|title=Influenciador Luan Ferreira diverte internet com dancinha para agitar quarentena. |url = https://meiahora.ig.com.br/celebridades-e-tv/que-isso-gordinho/2020/03/5884871-influenciador-luan-ferreira-diverte-internet-com-dancinha-para-agitar-quarentena.html |work= Meia Hora IG|access-date= 2016-01-18}}</ref><ref>{{Cite web|title=Vice Campe\u00e3o Brasileiro pelo Minas, Luan Ferreira relembra in\u00edcio de carreira esportiva no v\u00f4lei! |url = https://sportbuzz.uol.com.br/noticias/volei/vice-campeao-brasileiro-pelo-minas-relembra-inicio-de-carreira-esportiva-no-volei.phtml |work= Sportbuzz|access-date= 2016-01-18}}</ref> <ref name=thingstodo>{{cite web|url=https://extra.globo.com/tv-e-lazer/treta-show/influencer-luan-ferreira-conquista-seguidores-no-instagram-com-dicas-de-estilo-de-vida-24328001.html |title= Influencer Luan Ferreira conquista seguidores no Instagram com dicas de estilo de vida|date=August 21, 2019|accessdate=March 4, 2020|work= Extra Globo}}</ref>\n\n==Biography and career==\n\nLuan was born in Uberaba, Minas Gerais, Brazil,<ref>{{Cite web|title=Digital Influencer Luan Ferreira, se torna refer\u00eancia nas redes sociais com seu carisma |url = https://veja.abril.com.br/economia/jp/digital-influencer-luangat-se-torna-referencia-nas-redes-sociais-com-seu-carisma/ |work= Veja |access-date= 2019-01-18}}</ref>   where he grew up and began his studies, finished his studies at the Marechal Castelo Branco State School in 2014. His internet career began in 2013, still teenagers when he created a YouTube channel, <ref>{{Cite web|title=Luan Ferreira: Conhe\u00e7a a hist\u00f3ria da personalidade e Digital Influencer que est\u00e1 por todo lado |url = https://gazetanacional.com.br/luangat-conheca-a-historia-da-personalidade-e-digital-influencer-que-esta-por-todo-lado/ |work= Gazeta|access-date= 2019-01-18}}</ref> with what who became a video producer at the time also worked as a model and campaigned for famous Brazilian brands.<ref>{{Cite web|title= Saiba quem \u00e9 Luan Ferreira, modelo bastante popular no Instagram |url = https://central-brasil.com/celebridades/saiba-quem-e-luangat-modelo-bastante-popular-no-instagram/|work= Central Brazil|access-date= 2016-01-18}}</ref> \n\nIn parallel to that, he was also a [[volleyball]] <ref>{{Cite web|title=Antes do Direito, Luan Ferreira se destacou no mundo do v\u00f4lei |url = https://odia.ig.com.br/esporte/2019/10/5815115-antes-do-direito--luan-ferreira-se-destacou-no-mundo-do-volei.html |work= O Dia|access-date= 2016-01-18}}</ref> player and became a national runner-up in the , which took place in [[Jo\u00e3o Pessoa, Para\u00edba]].<ref>{{Cite web|title= Luan Ferreira Bomba no Instagram Instagram |url = http://folhanobre.com.br/2019/04/18/saiba-quem-e-luangat-modelo-bastante-popular-no-instagram/245478 |work= Folha Nobre|access-date= 2016-01-18}}</ref><ref>{{Cite web|title= Quem \u00e9 Luan Ferreira bastante popular na internet|url = https://diarioprime.com.br/blogs/saiba-quem-e-luangat-modelo-bastante-popular-no-instagram/ |work= Diario Prime|access-date= 2016-01-18}}</ref> He was already listed by the Brazilian tabloids, as one of the most influential Brazilian internet celebrities on Instagram.\nHe participated in the [[Rede Globo]] MGTV program and in 2019 was a juror of the Miss and Mister Brasil 2019 <ref>{{Cite web|title= Final do Miss e Mister Rio de Janeiro CNB 2019: Luan Ferreira, Marvvila, Narcisa Tamborindeguy e Bruna Barros ser\u00e3o jurados |url =https://www.breaktudo.com/final-do-miss-e-mister-rio-de-janeiro-cnb-2019-luangat-marvvila-narcisa-tamborindeguy-e-bruna-barros-serao-jurados/ |work= BreakTudo|access-date= 2016-01-18}}</ref> contest.<ref>{{Cite web|title= Miss e Mister Luangat |url =http://ailtonpitombo.com.br/blog/page/49/?page_i___m__ |work= Ailton Pitombo|access-date= 2016-01-18}}</ref> In February 2020, he signed a contract with the international model agency Fomomodels.<ref name=thingstodo>{{cite web|url= https://www.fomomodels.com/models/luan|title= Luan Ferreira|date=August 21, 2019|accessdate=December 4, 2019|work=Fomomodels}}</ref>\n\n\n==Filmography==\n{| class=\"wikitable\"\n! Year\n! Title\n! Grades\n! Notes\n|-\n| 2015\n| Blog da Lisa <ref>{{Cite web|title= Conhe\u00e7a o digital influencer que tem o sonho de ser juiz de direito: Luan Fereira|url= http://lisagomes.com.br/?p=2501|work= Blog da Lisa|access-date= 2016-01-18}}{{Dead link|date=March 2020 |bot=InternetArchiveBot |fix-attempted=yes }}</ref>\n\n| Himself\n| -\n|-\n| 2018\n| MGTV on Rede Globo <ref name=thingstodo>{{cite web|url=http://cartaodevisita.com.br/conteudo/29224/luan-ferreira-modelo-e-digital-influencer-e-a-grande-aposta-das-redes-sociais-atualmente|title=Luan Ferreira, modelo e Digital Influencer, \u00e9 a grande aposta das redes sociais atualmente|date=August 21, 2019|accessdate=December 4, 2019|work=Cart\u00e3o De Visita R7}}</ref>\n\n| Himself \n| -\n|-\n| 2019\n| Miss and Mister Brazil <ref name=thingstodo>{{cite web|url= http://www.meiahora.com/celebridades-e-tv/que-isso-gordinho/2020/03/5884871-influenciador-luan-ferreira-diverte-internet-com-dancinha-para-agitar-quarentena.html|title=Influenciador Luan Ferreira diverte internet com dancinha para agitar quarentena|date=August 21, 2019|accessdate=December 4, 2019|work=Meia Hora}}</ref>\n\n\n| Hilself \n| Jury\n|}\n\n==References==\n{{reflist|colwidth=30em}}\n\n{{DEFAULTSORT:Cardoso, Nah}}\n[[Category:1997 births]]\n[[Category:Living people]]\n[[Category:Brazilian Internet celebrities]]\n\n[[pt:Jogos Ol\u00edmpicos da Juventude 2014|Jogos Ol\u00edmpicos da Juventude 2014]]\n", "name_user": "Tiago Palha de Moraes", "label": "safe", "comment": "", "url_page": "//en.wikipedia.org/wiki/Luan_Ferreira"}
{"title_page": "The 33 Strategies of War", "text_new": "{{Multiple issues|\n{{advert|date=January 2014}}\n{{too few opinions|date=January 2014}}\n}}\n\n{{Use mdy dates|date=May 2012}}\n{{Infobox book \n| name           = The 33 Strategies of War\n| image          = 33StratagiesWar.jpg\n| image_size     = 200\n| author         = [[Robert Greene (author)|Robert Greene]]\n| country        = United States\n| language       = English\n| genre          = Business, management, [[military history]], [[psychology]], [[self-improvement]]\n| publisher      =[[Penguin Group]] (HC); [[HighBridge Audio]] (CD)\n| release_date   = January and April 2006\n| media_type     = Print (hardcover) and CD\n| pages          = 496\n| isbn =  0-670-03457-6|ISBN_note = (HC); 978-1-59887-091-6 (CD)\n| preceded_by    = [[The Art of Seduction]]\n| followed_by    = [[The 50th Law]]\n}}\n\n'''''The 33 Strategies of War''''' is a 2006 book written by American author [[Robert Greene (author)|Robert Greene]] that is described as a \"guide to the subtle social game of everyday life informed by the ... military principles in war\".<ref name=\"greene\">Greene, Robert, \"The 33 Strategies of War\", Viking Adult, 2006</ref> It is composed of discussions and examples on offensive and defensive [[Military strategy|strategies]] from a wide variety of people and conditions, applying them to social conflicts such as family quarrels and business negotiations.<ref name=Independent>{{citation |title=The 33 Strategies of War, by Robert Greene|url=https://www.independent.co.uk/arts-entertainment/books/reviews/the-33-strategies-of-war-by-robert-greene-6107606.html|newspaper=The Independent|first1=Nicholas |last1=Fearn|date=5 March 2006|accessdate=15 August 2018}}</ref><ref name=bi>{{cite web|last=Lee|first=Eloise|title=33 War Strategies That Will Help You Win Everything In Life|url=http://www.businessinsider.com/33-strategies-of-war-you-should-apply-to-everyday-life-2012-5?op=1|publisher=Business Insider|date=4 May 2012|accessdate=15 August 2018}}</ref><ref>{{cite web\n |url = http://www.dcmilitary.com/navy/seaservices/11_02/commentary/40435-1.html\n |title = The 33 Strategies of War by Robert Greene\n |author=Youssef Aboul-Enein\n |work=The Waterline\n |publisher=Comprint Military Publications\n |date= March 30, 2006\n |accessdate=2006-07-25\n |archiveurl = https://web.archive.org/web/20060529060716/http://www.dcmilitary.com/navy/seaservices/11_02/commentary/40435-1.html <!-- Bot retrieved archive --> |archivedate = 2006-05-29}}</ref>\n\n== Reception ==\n''[[The Independent]]'' said Greene has set himself up as \"a modern-day [[Machiavelli]]\" but that \"it is never clear whether he really believes what he writes or whether it is just his shtick, an instrument of his will to shift \u00a320 hardbacks.\" and concludes \"There is something less than adult about it all.\"<ref name=TheIndependent>{{cite news|last=Fearn|first=Nicholas|title=The 33 Strategies of War, by Robert Greene|url=https://www.independent.co.uk/arts-entertainment/books/reviews/the-33-strategies-of-war-by-robert-greene-6107606.html|newspaper=The Independent|date=March 5, 2006}}</ref> Admiral [[James G. Stavridis]] said the book had good breadth, but it lacked depth.<ref name=\"U.S. Naval Institute\">{{Citation |last=Stavridis |first=Jim |year=2006 |title=The 33 Strategies of War |publisher=U.S. Naval Institute |url=http://web.ebscohost.com/ehost/detail?vid=3&sid=b98e573a-5480-4fe6-893d-99458383acc5%40sessionmgr198&hid=119&bdata=JnNpdGU9ZWhvc3QtbGl2ZQ%3d%3d#db=aph&AN=21679225 |accessdate=12 Jan 2014}}</ref> Leadership theorist and author [[John Adair (author)|John Adair]] said Greene \"shows a poor grasp of the subject\" and the book is based on the flawed \"assumption that the art of military strategy and the art of living are comparable\".<ref name=\"Work and War\">{{Citation |last=Adair |first=John |year=2006 |title=All is fair in work and war? |publisher=Management Today |url=http://www.managementtoday.co.uk/news/542845/books-fair-work-war/?DCMP=ILC-SEARCH |accessdate=12 Jan 2014}} [http://web.ebscohost.com/ehost/detail?vid=4&sid=2cf29dd3-b73b-4b64-8032-a66e14b22339%40sessionmgr113&hid=119&bdata=JnNpdGU9ZWhvc3QtbGl2ZQ%3d%3d#db=buh&AN=20319049 alternative URL]</ref> [[Booklist]] said the book was repetitive, lacked a sense of humor, and had an annoying \"quasi-spiritual tone\".<ref name=\"Booklist Review of 33 Strategies\">{{Citation |last=Driscoll |first=Brendan |year=2006 |title=The 33 Strategies of War |publisher=Booklist|url=http://web.ebscohost.com/ehost/pdfviewer/pdfviewer?vid=3&sid=3c633203-09c9-44ac-b33a-b63e15515769%40sessionmgr198&hid=119 |accessdate=12 Jan 2014}}</ref> [[NBA]] player [[Chris Bosh]] stated that his favorite book is ''The 33 Strategies of War''.<ref name=Entrepreneur>Tice, Carol. [http://www.entrepreneur.com/article/168770 All\u2019s Fair?]. ''Entrepreneur''. November 1, 2006.</ref><ref name=GQ>{{cite news|last=Green|first=Mark|title=Not a Third Wheel: A GQ&A with Chris Bosh |url=https://www.gq.com/sports/profiles/201201/chris-bosh-miami-heat-interview-style|newspaper=GQ|date=January 12, 2012}}</ref><ref name=NewYorkPost>{{cite news|last=Mirchandini|first=Raakhee|title=The Merchant of Menace|url=http://www.nypost.com/p/entertainment/item_CRnkXeIsCkhsYyCyAwDh1J|newspaper=The New York Post|date=January 5, 2007}}</ref> \n''The 33 Strategies of War'' was part of the reading list for youths attending the [[Indigenous Leadership Forum]] organised by the [[University of Victoria]], which aimed to redesign radical [[Indigenous peoples of the Americas|Indigenous]] politics and the [[Indigenist]] movement.<ref>{{cite web|url=http://web.uvic.ca/~igov/programs/masters/IGOV_595_S01/IGOV%20595%20INDIGENOUS%20LEADERSHIP%20FORUM.pdf |title=Indigenous Leadership Forum IGOV 595/384 A01 |accessdate=2006-07-25 |url-status=dead |archiveurl=https://web.archive.org/web/20070318004437/http://web.uvic.ca/~igov/programs/masters/IGOV_595_S01/IGOV%20595%20INDIGENOUS%20LEADERSHIP%20FORUM.pdf |archivedate=March 18, 2007 }}</ref> It is also read by students attending a [[Southwestern Baptist Theological Seminary]] course in Christian [[apologetics]].<ref>{{cite web\n |url = http://www.designinference.com/teaching/2006_fall_chr_apol_mdiv/syllabus_chr_theol_fall06_SWBTS_4373.pdf\n |title = PHREL 4373 Christian Apologetics\n |author=William A. Dembski\n |accessdate = 2006-07-25\n}}</ref>  The book has been banned by several US prisons.<ref>{{citation|url=https://www.unicornriot.ninja/2018/books-banned-in-u-s-prisons-featured-at-minneapolis-art-festival/|title=Books Banned in U.S. Prisons Featured at Minneapolis Art Festival|date=25 June 2018|publisher=Unicorn Riot Media|format=video}}</ref>\n\nIn the book Greene writes that \"[[Afghanistan]] was rich in natural gas and other minerals and had ports on the Indian Ocean\":<ref>Greene, ''The 33 Strategies of War'', p284.</ref> Afghanistan is land-locked. The political tales in the book are said to be \"mostly foolish or just plain wrong\".<ref>[https://web.archive.org/web/20140105063747/http://business.highbeam.com/435553/article-1G1-141422131/if-war-given-then-strategy-wild-card St Louis Post-Dispatch],  ''If war's a given, then strategy is the wild card'', by Joseph Losos, 29 January 2006.</ref>\n\nThe book has \"far too many duff sentences\",<ref name=TheIndependent/> for example: \"Your goal is to blend philosophy and war, wisdom and battle, into an unbeatable blend.\"<ref name=TheIndependent/><ref>Greene, ''The 33 Strategies of War'', preface, pXX.</ref>\n\nIt has sold more than 200,000 copies.<ref name=rginterview>[http://powerseductionandwar.com/the-robert-greene-interview-part-1/ Robert Greene Interview, Part 1]. ''Power Seduction and War''. July 7, 2006.</ref>\n\n== See also ==\n* ''[[The Art of War]]''\n* ''[[The Book of Five Rings]]''\n* ''[[Thirty-Six Stratagems]]''\n* ''[[On War]]''\n\n== References ==\n{{reflist}}\n\n==External links==\n*[http://robertgreene.net/the-33-strategies-of-war.html ''33 Strategies of War''] interview featuring Robert Greene\n\n<!--spacing-->\n\n{{Robert Greene (American author)}}\n\n{{DEFAULTSORT:33 Strategies Of War, The}}\n[[Category:2006 non-fiction books]]\n[[Category:Self-help books]]\n[[Category:Books by Robert Greene (American author)]]\n", "text_old": "{{Multiple issues|\n{{advert|date=January 2014}}\n{{too few opinions|date=January 2014}}\n}}\n\n{{Use mdy dates|date=May 2012}}\n{{Infobox book \n| name           = The 33 Strategies of War\n| image          = 33StratagiesWar.jpg\n| image_size     = 200\n| author         = [[Robert Greene (author)|Robert Greene]]\n| country        = United States\n| language       = English\n| genre          = Business, management, [[military history]], [[psychology]], [[self-improvement]]\n| publisher      =[[Penguin Group]] (HC); [[HighBridge Audio]] (CD)\n| release_date   = January and April 2006\n| media_type     = Print (hardcover) and CD\n| pages          = 496\n| isbn =  0-670-03457-6|ISBN_note = (HC); 978-1-59887-091-6 (CD)\n| preceded_by    = [[The Art of Seduction]]\n| followed_by    = [[The 50th Law]]\n}}\n\n'''''The 33 Strategies of War''''' is a 2006 book written by American author [[Robert Greene (author)|Robert Greene]] that is described as a \"guide to the subtle social game of everyday life informed by the ... military principles in war\".<ref name=\"greene\">Greene, Robert, \"The 33 Strategies of War\", Viking Adult, 2006</ref> It is composed of discussions and examples on offensive and defensive [[Military strategy|strategies]] from a wide variety of people and conditions, applying them to social conflicts such as family quarrels and business negotiations.<ref name=Independent>{{citation |title=The 33 Strategies of War, by Robert Greene|url=https://www.independent.co.uk/arts-entertainment/books/reviews/the-33-strategies-of-war-by-robert-greene-6107606.html|newspaper=The Independent|first1=Nicholas |last1=Fearn|date=5 March 2006|accessdate=15 August 2018}}</ref><ref name=bi>{{cite web|last=Lee|first=Eloise|title=33 War Strategies That Will Help You Win Everything In Life|url=http://www.businessinsider.com/33-strategies-of-war-you-should-apply-to-everyday-life-2012-5?op=1|publisher=Business Insider|date=4 May 2012|accessdate=15 August 2018}}</ref><ref>{{cite web\n |url = http://www.dcmilitary.com/navy/seaservices/11_02/commentary/40435-1.html\n |title = The 33 Strategies of War by Robert Greene\n |author=Youssef Aboul-Enein\n |work=The Waterline\n |publisher=Comprint Military Publications\n |date= March 30, 2006\n |accessdate=2006-07-25\n |archiveurl = https://web.archive.org/web/20060529060716/http://www.dcmilitary.com/navy/seaservices/11_02/commentary/40435-1.html <!-- Bot retrieved archive --> |archivedate = 2006-05-29}}</ref>\n\n== Reception ==\n''[[The Independent]]'' said Greene has set himself up as \"a modern-day [[Machiavelli]]\" but that \"it is never clear whether he really believes what he writes or whether it is just his shtick, an instrument of his will to shift \u00a320 hardbacks.\" and concludes \"There is something less than adult about it all.\"<ref name=TheIndependent>{{cite news|last=Fearn|first=Nicholas|title=The 33 Strategies of War, by Robert Greene|url=https://www.independent.co.uk/arts-entertainment/books/reviews/the-33-strategies-of-war-by-robert-greene-6107606.html|newspaper=The Independent|date=March 5, 2006}}</ref> Admiral [[James G. Stavridis]] said the book had good breadth, but it lacked depth.<ref name=\"U.S. Naval Institute\">{{Citation |last=Stavridis |first=Jim |year=2006 |title=The 33 Strategies of War |publisher=U.S. Naval Institute |url=http://web.ebscohost.com/ehost/detail?vid=3&sid=b98e573a-5480-4fe6-893d-99458383acc5%40sessionmgr198&hid=119&bdata=JnNpdGU9ZWhvc3QtbGl2ZQ%3d%3d#db=aph&AN=21679225 |accessdate=12 Jan 2014}}</ref> Leadership theorist and author [[John Adair (author)|John Adair]] said Greene \"shows a poor grasp of the subject\" and the book is based on the flawed \"assumption that the art of military strategy and the art of living are comparable\".<ref name=\"Work and War\">{{Citation |last=Adair |first=John |year=2006 |title=All is fair in work and war? |publisher=Management Today |url=http://www.managementtoday.co.uk/news/542845/books-fair-work-war/?DCMP=ILC-SEARCH |accessdate=12 Jan 2014}} [http://web.ebscohost.com/ehost/detail?vid=4&sid=2cf29dd3-b73b-4b64-8032-a66e14b22339%40sessionmgr113&hid=119&bdata=JnNpdGU9ZWhvc3QtbGl2ZQ%3d%3d#db=buh&AN=20319049 alternative URL]</ref> [[Booklist]] said the book was repetitive, lacked a sense of humor, and had an annoying \"quasi-spiritual tone\".<ref name=\"Booklist Review of 33 Strategies\">{{Citation |last=Driscoll |first=Brendan |year=2006 |title=The 33 Strategies of War |publisher=Booklist|url=http://web.ebscohost.com/ehost/pdfviewer/pdfviewer?vid=3&sid=3c633203-09c9-44ac-b33a-b63e15515769%40sessionmgr198&hid=119 |accessdate=12 Jan 2014}}</ref> [[NBA]] player [[Chris Bosh]] stated that his favorite book is ''The 33 Strategies of War''.<ref name=Entrepreneur>Tice, Carol. [http://www.entrepreneur.com/article/168770 All\u2019s Fair?]. ''Entrepreneur''. November 1, 2006.</ref><ref name=GQ>{{cite news|last=Green|first=Mark|title=Not a Third Wheel: A GQ&A with Chris Bosh |url=https://www.gq.com/sports/profiles/201201/chris-bosh-miami-heat-interview-style|newspaper=GQ|date=January 12, 2012}}</ref><ref name=NewYorkPost>{{cite news|last=Mirchandini|first=Raakhee|title=The Merchant of Menace|url=http://www.nypost.com/p/entertainment/item_CRnkXeIsCkhsYyCyAwDh1J|newspaper=The New York Post|date=January 5, 2007}}</ref> \n''The 33 Strategies of War'' was part of the reading list for youths attending the [[Indigenous Leadership Forum]] organised by the [[University of Victoria]], which aimed to redesign radical [[Indigenous peoples of the Americas|Indigenous]] politics and the [[Indigenist]] movement.<ref>{{cite web|url=http://web.uvic.ca/~igov/programs/masters/IGOV_595_S01/IGOV%20595%20INDIGENOUS%20LEADERSHIP%20FORUM.pdf |title=Indigenous Leadership Forum IGOV 595/384 A01 |accessdate=2006-07-25 |url-status=dead |archiveurl=https://web.archive.org/web/20070318004437/http://web.uvic.ca/~igov/programs/masters/IGOV_595_S01/IGOV%20595%20INDIGENOUS%20LEADERSHIP%20FORUM.pdf |archivedate=March 18, 2007 }}</ref> It is also read by students attending a [[Southwestern Baptist Theological Seminary]] course in Christian [[apologetics]].<ref>{{cite web\n |url = http://www.designinference.com/teaching/2006_fall_chr_apol_mdiv/syllabus_chr_theol_fall06_SWBTS_4373.pdf\n |title = PHREL 4373 Christian Apologetics\n |author=William A. Dembski\n |accessdate = 2006-07-25\n}}</ref>  The book has been banned by several US prisons.<ref>{{citation|url=https://www.unicornriot.ninja/2018/books-banned-in-u-s-prisons-featured-at-minneapolis-art-festival/|title=Books Banned in U.S. Prisons Featured at Minneapolis Art Festival|date=25 June 2018|publisher=Unicorn Riot Media|format=video}}</ref>\n\nIn the book Greene writes that \"[[Afghanistan]] was rich in natural gas and other minerals and had ports on the Indian Ocean\":<ref>Greene, ''The 33 Strategies of War'', p284.</ref> Afghanistan is land-locked. The political tales in the book are said to be \"mostly foolish or just plain wrong\".<ref>[https://web.archive.org/web/20140105063747/http://business.highbeam.com/435553/article-1G1-141422131/if-war-given-then-strategy-wild-card St Louis Post-Dispatch],  ''If war's a given, then strategy is the wild card'', by Joseph Losos, 29 January 2006.</ref>\n\nThe book has \"far too many duff sentences\",<ref name=TheIndependent/> for example: \"Your goal is to blend philosophy and war, wisdom and battle, into an unbeatable blend.\"<ref name=TheIndependent/><ref>Greene, ''The 33 Strategies of War'', preface, pXX.</ref>\n\nIt has sold more than 200,000 copies.<ref name=rginterview>[http://powerseductionandwar.com/the-robert-greene-interview-part-1/ Robert Greene Interview, Part 1]. ''Power Seduction and War''. July 7, 2006.</ref>\n\n== See also ==\n* ''[[The Art of War]]''\n* ''[[The Book of Five Rings]]''\n* ''[[Thirty-Six Strategems]]''\n* ''[[On War]]''\n\n== References ==\n{{reflist}}\n\n==External links==\n*[http://robertgreene.net/the-33-strategies-of-war.html ''33 Strategies of War''] interview featuring Robert Greene\n\n<!--spacing-->\n\n{{Robert Greene (American author)}}\n\n{{DEFAULTSORT:33 Strategies Of War, The}}\n[[Category:2006 non-fiction books]]\n[[Category:Self-help books]]\n[[Category:Books by Robert Greene (American author)]]\n", "name_user": "Mandarax", "label": "safe", "comment": "Fix typo", "url_page": "//en.wikipedia.org/wiki/The_33_Strategies_of_War"}
{"title_page": "UTF-8", "text_new": "{{Short description|Unicode Transformation Format 8, encodes all 1,112,064 Unicode code points as 1 to 4 bytes}}\n{{Infobox character encoding\n| name = UTF-8\n| mime = \n| alias = \n| image = \n| caption = \n| standard = Unicode Standard\n| status = \n| classification = [[Unicode Transformation Format]], [[extended ASCII]], [[variable-width encoding]]\n| encodes = [[ISO 10646]] ([[Unicode]])\n| extends = [[US-ASCII]]\n| prev = [[UTF-1]]\n| next = \n}}\n'''UTF-8''' (8-[[bit]] [[Unicode transformation format|Unicode Transformation Format]]) is a [[variable-width encoding|variable width]] [[character encoding]] capable of encoding all 1,112,064<ref group=nb>17\u00d72<sup>16</sup> = 1,114,112 code points minus 2,048 technically-invalid surrogate code points</ref> valid [[code point]]s in [[Unicode]] using one to four one-[[byte]] (8-bit) code units. The encoding is defined by the Unicode Standard, and was originally designed by [[Ken Thompson]] and [[Rob Pike]].<ref name=\":0\">[https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt Email Subject: UTF-8 history], From: \"Rob 'Commander' Pike\", Date: Wed, 30 Apr 2003..., ''...UTF-8 was designed, in front of my eyes, on a placemat in a New Jersey diner one night in September or so 1992...So that night Ken wrote packing and unpacking code and I started tearing into the C and graphics libraries.  The next day all the code was done...''</ref><ref>{{cite book |chapter-url=https://www.cl.cam.ac.uk/~mgk25/ucs/UTF-8-Plan9-paper.pdf |chapter=Hello World or \u039a\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1 \u03ba\u03cc\u03c3\u03bc\u03b5 or \u3053\u3093\u306b\u3061\u306f \u4e16\u754c |title=Proceedings of the Winter 1993 USENIX Conference |first1=Rob |last1=Pike |first2=Ken |last2=Thompson |year=1993}}</ref> The name is derived from ''Unicode'' (or ''Universal Coded Character Set'') ''Transformation Format{{snd}} 8-bit''.<ref>{{Cite book |title=The Unicode Standard |edition=6.0 |chapter=Chapter 2. General Structure |publisher=[[Unicode Consortium|The Unicode Consortium]] |location=Mountain View, California, US |isbn=978-1-936213-01-6 |chapter-url=https://www.unicode.org/versions/Unicode6.0.0/}}</ref>\n\nIt was designed for [[backward compatibility]] with [[ASCII]]. Code points with lower numerical values, which tend to occur more frequently, are encoded using fewer bytes. The first 128 characters of Unicode, which correspond one-to-one with ASCII, are encoded using a single byte with the same binary value as ASCII, so that valid ASCII text is valid UTF-8-encoded Unicode as well. Since ASCII bytes do not occur when encoding non-ASCII code points into UTF-8, UTF-8 is safe to use within most programming and document languages that interpret certain ASCII characters in a special way, such as \"/\" ([[Slash (punctuation)|slash]]) in filenames, \"\\\" ([[backslash]]) in [[String literal#Escape sequences|escape sequences]], and \"%\" in [[printf]].\n\n[[File:Utf8webgrowth.svg|thumb|right|350px|Usage of the main encodings on the web from 2001 to 2012 as recorded by Google,<ref name=\"MarkDavis2012\">{{cite web |author-last=Davis |author-first=Mark |author-link=Mark Davis (Unicode) |date=2012-02-03 |title=Unicode over 60 percent of the web |work=Official Google Blog |url=https://googleblog.blogspot.com/2012/02/unicode-over-60-percent-of-web.html |access-date=2018-08-09}}</ref> with UTF-8 overtaking all others in 2008 and over 60% of the web in 2012. The ASCII-only figure includes all web pages that only contain ASCII characters, regardless of the declared header.]]\n\nSince 2009, UTF-8 has been the dominant encoding (of any kind, not just of Unicode encodings) for the [[World Wide Web]] (and declared mandatory \"for all things\" by [[WHATWG]]<ref name=\"mandatory\"\n>{{Cite web|url=https://encoding.spec.whatwg.org/#security-background|title=Encoding Standard|website=encoding.spec.whatwg.org|quote=The problems outlined here go away when exclusively using UTF-8, which is one of the many reasons that is now the mandatory encoding for all things.|language=en|access-date=2018-11-15}}\n</ref>) and {{as of|2020|04|lc=y}} <!-- 3rd --> accounts for 94.7% of all web pages (some of which are simply [[US-ASCII|ASCII]], as it is a subset of UTF-8) and 97% <!-- 96.5% --> of the top 1,000 highest ranked<ref>{{Cite web|url=https://w3techs.com/technologies/cross/character_encoding/ranking|title=Usage Survey of Character Encodings broken down by Ranking|website=w3techs.com|language=en|access-date=2020-04-02}}</ref> web pages. \nThe next-most popular multi-byte encodings are the Chinese {{nowrap|[[GB 2312]]}} and [[GBK (character encoding)|GBK]] with a combined <!-- 0.4% + 0.3% --> 0.7% share, and the Japanese {{nowrap|[[Shift JIS]]}} with 0.2%.<ref name=\"W3Techs\"\n>{{cite web|url=https://w3techs.com/technologies/history_overview/character_encoding|title=Historical trends in the usage of character encodings|publisher=|access-date=2020-04-03}}</ref><ref name=\"BuiltWith\">{{cite web |url=https://trends.builtwith.com/encoding/UTF-8 |title=UTF-8 Usage Statistics |publisher=BuiltWith |access-date=2011-03-28}}\n</ref><ref name=\"MarkDavis2012\"/> The [[Internet Mail Consortium]] (IMC) recommended that all e-mail programs be able to display and create mail using UTF-8,<ref name=\"IMC\"\n>{{cite web |url=https://www.imc.org/mail-i18n.html |title=Using International Characters in Internet Mail |publisher=Internet Mail Consortium |date=1998-08-01 |access-date=2007-11-08 |url-status=dead |archiveurl=https://web.archive.org/web/20071026103104/https://www.imc.org/mail-i18n.html |archivedate=2007-10-26 |df= }}\n</ref> and the [[World Wide Web Consortium|W3C]] recommends UTF-8 as the ''default encoding'' in [[XML]] and [[HTML]].<ref name=\"html5charset\"\n>{{citation |chapter-url=https://www.w3.org/TR/html5/document-metadata.html#charset |chapter=Specifying the document's character encoding |title=HTML5.2 |publisher=[[World Wide Web Consortium]] |date=14 December 2017 |access-date=2018-06-03}}\n</ref> UTF-8 stay as strong [[WHATWG]]'s recommendation in HTML and [[Document Object Model|DOM]] specifications, not changed<ref>https://encoding.spec.whatwg.org/#preface</ref> in 2020 [[HTML#Transition_of_HTML_Publication_to_WHATWG|after transition]].\n\n==Description==\nSince the restriction of the Unicode code-space to 21-bit values in 2003, UTF-8 is defined to encode code points in one to four bytes, depending on the number of significant bits in the numerical value of the code point. The following table shows the structure of the encoding. The {{mono|x}} characters are replaced by the bits of the code point. If the number of significant bits is no more than seven, the first line applies; if no more than 11&nbsp;bits, the second line applies, and so on.\n\n{| class=\"wikitable\"\n!Number<br>of bytes!!Bits for<br>code point!!First<br>code point!!Last<br>code point!!Byte 1!!Byte 2!!Byte 3!!Byte 4\n|-\n| style=\"text-align: center;\" |1\n| style=\"text-align: center;\" |7\n| style=\"text-align: right;\" |U+0000\n| style=\"text-align: right;\" |U+007F\n|{{mono|0xxxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |2\n| style=\"text-align: center;\" |11\n| style=\"text-align: right;\" |U+0080\n| style=\"text-align: right;\" |U+07FF\n|{{mono|110xxxxx}}||{{mono|10xxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |3\n| style=\"text-align: center;\" |16\n| style=\"text-align: right;\" |U+0800\n| style=\"text-align: right;\" |U+FFFF\n|{{mono|1110xxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |4\n| style=\"text-align: center;\" |21\n| style=\"text-align: right;\" |U+10000\n| style=\"text-align: right;\" |U+10FFFF<ref>You might expect larger code points than U+10FFFF to be expressible, but Unicode is limited in Sections 12 of [[rfc:3629#section-12|RFC3629]] to match the limits of UTF-16.</ref>\n|{{mono|11110xxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}\n|}\n\nThe first 128 characters (US-ASCII) need one byte. The next 1,920 characters need two bytes to encode, which covers the remainder of almost all [[Latin-script alphabet]]s, and also [[Greek alphabet|Greek]], [[Cyrillic script|Cyrillic]], [[Coptic alphabet|Coptic]], [[Armenian alphabet|Armenian]], [[Hebrew alphabet|Hebrew]], [[Arabic alphabet|Arabic]], [[Syriac alphabet|Syriac]], [[Thaana]] and [[N'Ko alphabet|N'Ko]] alphabets, as well as [[Combining Diacritical Marks]]. Three bytes are needed for characters in the rest of the [[Basic Multilingual Plane]], which contains virtually all characters in common use,<ref name=\"unicode-ch02-bmp\">{{cite journal |title=The Unicode Standard, Version 6.1 |year=2012 |editor-last1=Allen |editor-first1=Julie D. |editor2-last=Anderson |editor2-first=Deborah |editor3-last=Becker |editor3-first=Joe |editor4-last=Cook |editor4-first=Richard |publisher=Unicode Consortium |place=Mountain View, California |quote=The Basic Multilingual Plane (BMP, or Plane 0) contains the common-use characters for all the modern scripts of the world as well as many historical and rare characters. By far the majority of all Unicode characters for almost all textual data can be found in the BMP.}}</ref> including most [[CJK characters|Chinese, Japanese and Korean characters]]. Four bytes are needed for characters in the [[Plane (Unicode)|other planes of Unicode]], which include less common [[CJK characters]], various historic scripts, mathematical symbols, and [[emoji]] (pictographic symbols).\n\nSome of the important features of this encoding are as follows:\n\n* ''Backward compatibility:'' Backwards compatibility with ASCII and the enormous amount of software designed to process ASCII-encoded text was the main driving force behind the design of UTF-8. In UTF-8, single bytes with values in the range of 0 to 127 map directly to Unicode code points in the ASCII range. Single bytes in this range represent characters, as they do in ASCII. Moreover, 7-bit bytes (bytes where the most significant bit is 0) never appear in a multi-byte sequence, and no valid multi-byte sequence decodes to an ASCII code-point. A sequence of 7-bit bytes is both valid ASCII and valid UTF-8, and under either interpretation represents the same sequence of characters. Therefore, the 7-bit bytes in a UTF-8 stream represent all and only the ASCII characters in the stream. Thus, many text processors, parsers, protocols, file formats, text display programs, etc., which use ASCII characters for formatting and control purposes, will continue to work as intended by treating the UTF-8 byte stream as a sequence of single-byte characters, without decoding the multi-byte sequences. ASCII characters on which the processing turns, such as punctuation, whitespace, and control characters will never be encoded as multi-byte sequences. It is therefore safe for such processors to simply ignore or pass-through the multi-byte sequences, without decoding them. For example, ASCII whitespace may be used to [[tokenize]] a UTF-8 stream into words; ASCII line-feeds may be used to split a UTF-8 stream into lines; and ASCII NUL characters can be used to split UTF-8-encoded data into null-terminated strings. Similarly, many format strings used by library functions like \"printf\" will correctly handle UTF-8-encoded input arguments.\n* {{anchor|fallback and auto-detection}}''Fallback and auto-detection:'' UTF-8 provided backwards compatibility for 7-bit ASCII, but much software and data uses 8-bit [[extended ASCII]] encodings designed prior to the adoption of Unicode to represent the character sets of European languages. Part of the popularity of UTF-8 is due to the fact that it provides a form of backward compatibility for these as well. A UTF-8 processor which erroneously receives an [[extended ASCII]] file as input can \"fall back\" or replace 8-bit bytes using the appropriate code-point in the Unicode [[Latin-1 Supplement]] block, when the 8-bit byte appears outside a valid multi-byte sequence. The bytes in extended ASCII encodings of \u201creal world\u201d text are typically not legal UTF-8 multi-byte sequences. This is because the bytes which ''introduce'' multi-byte sequences in UTF-8 are primarily accented letters (mostly vowels) in the common extended ASCII encodings, and the UTF-8 ''continuation'' bytes are punctuation and symbol characters. To appear as a valid UTF-8 multi-byte sequence, a series of 2 to 4 extended ASCII 8-bit characters would have to be an unusual combination of symbols and accented letters (such as an accented vowel followed immediately by certain punctuation). In short, real-world extended ASCII character sequences which look like valid UTF-8 multi-byte sequences are unlikely. Fallback errors will be false negatives, and these will be rare. Moreover, in many applications, such as text display, the consequence of incorrect fallback is usually slight. Only legibility is affected, and only for a few characters. These two things make fallback feasible, if somewhat imperfect. Indeed, as discussed further below, the [[HTML5]] standard requires that erroneous bytes in supposed UTF-8 data be replaced upon display on the assumption that they are [[Windows-1252]] characters. The presence of invalid 8-bit characters outside valid multi-byte sequences can also be used to \"auto-detect\" that an encoding is actually an extended ASCII encoding rather than UTF-8, and decode it accordingly. A UTF-8 stream may simply contain errors, resulting in the auto-detection scheme producing false positives; but auto-detection is successful in the majority of cases, especially with longer texts, and is widely used.\n* ''[[Prefix code]]:'' The first byte indicates the number of bytes in the sequence. Reading from a stream can instantaneously decode each individual fully received sequence, without first having to wait for either the first byte of a next sequence or an end-of-stream indication. The length of multi-byte sequences is easily determined by humans as it is simply the number of high-order 1s in the leading byte. An incorrect character will not be decoded if a stream ends mid-sequence.\n* ''[[Self-synchronizing code|Self-synchronization]]:'' The leading bytes and the continuation bytes do not share values (continuation bytes start with {{mono|10}} while single bytes start with {{mono|0}} and longer lead bytes start with {{mono|11}}). This means a search will not accidentally find the sequence for one character starting in the middle of another character. It also means the start of a character can be found from a random position by backing up at most 3 bytes to find the leading byte. An incorrect character will not be decoded if a stream starts mid-sequence, and a shorter sequence will never appear inside a longer one.\n* ''Sorting order:'' The chosen values of the leading bytes means that a list of UTF-8 strings can be sorted in code point order by sorting the corresponding byte sequences.\n\n===Examples===\nConsider the encoding of the [[Euro sign]], \u20ac:\n\n# The Unicode code point for \"\u20ac\" is U+20AC.\n# According to the scheme table above, this will take three bytes to encode, since it is between U+0800 and U+FFFF.\n#[[Hexadecimal]] {{mono|20AC}} is binary {{mono|{{fontcolor|blue|0010}} {{fontcolor|green|0000 10}}{{fontcolor|red|10 1100}}}}. The two leading zeros are added because, as the scheme table shows, a three-byte encoding needs exactly sixteen bits from the code point.\n# Because the encoding will be three bytes long, its leading byte starts with three 1s, then a 0 ({{mono|1110...}})\n# The four most significant bits of the code point are stored in the remaining low order four bits of this byte ({{mono|1110 {{fontcolor|blue|0010}}}}), leaving 12 bits of the code point yet to be encoded ({{mono|...{{fontcolor|green|0000 10}}{{fontcolor|red|10 1100}}}}).\n# All continuation bytes contain exactly six bits from the code point. So the next six bits of the code point are stored in the low order six bits of the next byte, and {{mono|10}} is stored in the high order two bits to mark it as a continuation byte (so {{mono|10{{fontcolor|green|00 0010}}}}).\n# Finally the last six bits of the code point are stored in the low order six bits of the final byte, and again {{mono|10}} is stored in the high order two bits ({{mono|10{{fontcolor|red|10 1100}}}}).\n\nThe three bytes {{mono|1110 {{fontcolor|blue|0010}}}} {{mono|10{{fontcolor|green|00 0010}}}} {{mono|10{{fontcolor|red|10 1100}}}} can be more concisely written in [[hexadecimal]], as {{mono|{{fontcolor|blue|E2}} {{fontcolor|green|82}} {{fontcolor|red|AC}}}}.\n\nThe following table summarises this conversion, as well as others with different lengths in UTF-8. The colors indicate how bits from the code point are distributed among the UTF-8 bytes. Additional bits added by the UTF-8 encoding process are shown in black.\n\n{| class=\"wikitable\"\n|-\n! colspan=2 rowspan=2 | Character\n! colspan=2 | Code point\n! colspan=3 | UTF-8\n|-\n! Octal\n! Binary\n! Binary\n! Octal\n! Hexadecimal\n|-\n|[[$]] || {{mono|U+0024}}\n|align=left|{{mono|{{fontcolor|red|044}}}}\n|align=right|{{mono|{{fontcolor|red|010 0100}}}}\n|align=left|{{mono|0{{fontcolor|red|0100100}}}}\n|align=left|{{mono|{{fontcolor|red|044}}}}\n|align=left|{{mono|{{fontcolor|red|24}}}}\n|-\n|[[\u00a2]] || {{mono|U+00A2}}\n|align=left|{{mono|{{fontcolor|green|02}}{{fontcolor|red|42}}}}\n|align=right|{{mono|{{fontcolor|green|000 10}}{{fontcolor|red|10 0010}}}}\n|align=left|{{mono|110{{fontcolor|green|00010}} 10{{fontcolor|red|100010}}}}\n|align=left|{{mono|3{{fontcolor|green|02}} 2{{fontcolor|red|42}}}}\n|align=left|{{mono|{{fontcolor|green|C2}} {{fontcolor|red|A2}}}}\n|-\n|[[Devanagari (Unicode block)|\u0939]] || {{mono|U+0939}}\n|align=left|{{mono|{{fontcolor|blue|00}}{{fontcolor|green|44}}{{fontcolor|red|71}}}}\n|align=right|{{mono|{{fontcolor|blue|0000}} {{fontcolor|green|1001 00}}{{fontcolor|red|11 1001}}}}\n|align=left|{{mono|1110{{fontcolor|blue|0000}} 10{{fontcolor|green|100100}} 10{{fontcolor|red|111001}}}}\n|align=left|{{mono|34{{fontcolor|blue|0}} 2{{fontcolor|green|44}} 2{{fontcolor|red|71}}}}\n|align=left|{{mono|{{fontcolor|blue|E0}} {{fontcolor|green|A4}} {{fontcolor|red|B9}}}} \n|-\n|[[Euro sign|\u20ac]] || {{mono|U+20AC}}\n|align=left|{{mono|{{fontcolor|blue|02}}{{fontcolor|green|02}}{{fontcolor|red|54}}}}\n|align=right|{{mono|{{fontcolor|blue|0010}} {{fontcolor|green|0000 10}}{{fontcolor|red|10 1100}}}}\n|align=left|{{mono|1110{{fontcolor|blue|0010}} 10{{fontcolor|green|000010}} 10{{fontcolor|red|101100}}}}\n|align=left|{{mono|34{{fontcolor|blue|2}} 2{{fontcolor|green|02}} 2{{fontcolor|red|54}}}}\n|align=left|{{mono|{{fontcolor|blue|E2}} {{fontcolor|green|82}} {{fontcolor|red|AC}}}}\n|-\n|[[Hangul Syllables|\ud55c]] || {{mono|U+D55C}}\n|align=left|{{mono|{{fontcolor|blue|15}}{{fontcolor|green|25}}{{fontcolor|red|34}}}}\n|align=right|{{mono|{{fontcolor|blue|1101}} {{fontcolor|green|0101 01}}{{fontcolor|red|01 1100}}}}\n|align=left|{{mono|1110{{fontcolor|blue|1101}} 10{{fontcolor|green|010101}} 10{{fontcolor|red|011100}}}}\n|align=left|{{mono|35{{fontcolor|blue|5}} 2{{fontcolor|green|25}} 2{{fontcolor|red|34}}}}\n|align=left|{{mono|{{fontcolor|blue|ED}} {{fontcolor|green|95}} {{fontcolor|red|9C}}}}\n|-\n|[[Hwair|\ud800\udf48]] || {{mono|U+10348}}\n|align=left|{{mono|{{fontcolor|#C000C0|0}}{{fontcolor|blue|20}}{{fontcolor|green|15}}{{fontcolor|red|10}}}}\n|align=right|{{mono|{{fontcolor|#C000C0|0 00}}{{fontcolor|blue|01 0000}} {{fontcolor|green|0011 01}}{{fontcolor|red|00 1000}}}}\n|align=left|{{mono|11110{{fontcolor|#C000C0|000}} 10{{fontcolor|blue|010000}} 10{{fontcolor|green|001101}} 10{{fontcolor|red|001000}}}}\n|align=left|{{mono|36{{fontcolor|#C000C0|0}} 2{{fontcolor|blue|20}} 2{{fontcolor|green|15}} 2{{fontcolor|red|10}}}}\n|align=left|{{mono|{{fontcolor|#C000C0|F0}} {{fontcolor|blue|90}} {{fontcolor|green|8D}} {{fontcolor|red|88}}}}\n|}\nSince UTF-8 uses groups of six bits, it is sometimes useful to use [[octal]] notation which uses 3-bit groups. With a calculator which can convert between hexadecimal and octal it can be easier to manually create or interpret UTF-8 compared with using binary.\n\n* Octal 0\u2013177 (hex 0\u20137F) is coded with an unchanged single byte.\n* Octal 0200\u20133777 (hex 80\u20137FF) shall be coded with two bytes. xxyy will be 3xx 2yy.\n* Octal 4000\u201377777 (hex 800\u20137FFF) shall be coded with three bytes. xyyzz will be 34x 2yy 2zz.\n* Octal 100000\u2013177777 (hex 8000\u2013FFFF) shall be coded with three bytes. 1xyyzz will be 35x 2yy 2zz.\n* Octal 200000\u20134177777 (hex 10000\u201310FFFF) shall be coded with four bytes. wxxyyzz will be 36w 2xx 2yy 2zz.\nWhen converting UTF-8 into code points, the following rules apply:\n* Octal 302\u2013337 is the first of two bytes. 3xx 2yy will be xxyy in octal.\n* Octal 340\u2013347 is the first of three bytes. 34x 2yy 2zz will be xyyzz.\n* Octal 350\u2013357 is the first of three bytes. 35x 2yy 2zz will be 1xyyzz.\n* Octal 360\u2013364 is the first of four bytes. 36w 2xx 2yy 2zz will be wxxyyzz.\n* Octal 200\u2013277 are continuation bytes, and others beginning with 3 are invalid.\n\n===Codepage layout===\nThe following table summarizes usage of UTF-8 ''code units'' (individual bytes or octets) in a ''code'' page format. The upper half ({{mono|0_}} to {{mono|7_}}) is for bytes used only in single-byte codes, so it looks like a normal code page; the lower half is for continuation bytes ({{mono|8_}} to {{mono|B_}}) and leading bytes ({{mono|C_}} to {{mono|F_}}), and is explained further in the legend below.\n{| {{chset-tableformat}}\n{{chset-table-header|UTF-8}}\n|-\n!{{chset-left|0}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0000|[[Null character|NUL]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0001|[[Start of heading|SOH]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0002|[[Start of text|STX]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0003|[[End of text|ETX]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0004|[[End of transmission character|EOT]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0005|[[Enquiry character|ENQ]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0006|[[Acknowledge character|ACK]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0007|[[Bell character|BEL]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0008|[[Backspace|BS]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0009|[[Tab key|HT]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|000A|[[Line feed|LF]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|000B|[[Vertical tab|VT]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|000C|[[Form feed|FF]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|000D|[[Carriage return|CR]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|000E|[[Shift out|SO]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|000F|[[Shift in|SI]]}}\n|-\n!{{chset-left|1}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0010|[[Data link escape|DLE]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0011|[[Device Control 1|DC1]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0012|[[Device Control 2|DC2]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0013|[[Device Control 3|DC3]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0014|[[Device Control 4|DC4]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0015|[[Negative-acknowledge character|NAK]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0016|[[Synchronous idle|SYN]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0017|[[End of transmission block|ETB]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0018|[[Cancel character|CAN]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0019|[[End of medium|EM]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|001A|[[Substitute character|SUB]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|001B|[[Escape character|ESC]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|001C|[[File separator|FS]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|001D|[[Group separator|GS]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|001E|[[Record separator|RS]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|001F|[[Unit separator|US]]}}\n|-\n\n!{{chset-left|2}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0020|[[space character|SP]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0021|[[Exclamation mark|!]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0022|[[Quotation mark|&#x22;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0023|[[Number sign|#]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0024|[[Dollar sign|$]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0025|[[Percent sign|%]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0026|[[Ampersand|&amp;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0027|[[Apostrophe|&#x27;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0028|[[Parenthesis|(]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0029|[[Parenthesis|)]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|002A|[[Asterisk|*]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|002B|[[Plus sign|+]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|002C|[[Comma (punctuation)|,]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|002D|[[Minus sign|-]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|002E|[[Full stop|.]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|002F|[[Slash (punctuation)|/]]}}\n|-\n!{{chset-left|3}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0030|[[0]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0031|[[1]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0032|[[2]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0033|[[3]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0034|[[4]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0035|[[5]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0036|[[6]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0037|[[7]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0038|[[8]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0039|[[9]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|003A|[[colon (punctuation)|&#x3A;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|003B|[[semicolon|&#x3B;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|003C|[[less-than sign|&#x3C;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|003D|[[equals sign|&#x3D;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|003E|[[greater-than sign|&#x3E;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|003F|[[question mark|&#x3F;]]}}\n|-\n!{{chset-left|4}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0040|[[@]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0041|[[A]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0042|[[B]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0043|[[C]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0044|[[D]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0045|[[E]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0046|[[F]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0047|[[G]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0048|[[H]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0049|[[I]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|004A|[[J]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|004B|[[K]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|004C|[[L]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|004D|[[M]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|004E|[[N]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|004F|[[O]]}}\n|-\n!{{chset-left|5}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0050|[[P]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0051|[[Q]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0052|[[R]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0053|[[S]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0054|[[T]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0055|[[U]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0056|[[V]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0057|[[W]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0058|[[X]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0059|[[Y]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|005A|[[Z]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|005B|[[Square brackets|&#x5B;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|005C|[[Backslash|&#x5C;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|005D|[[Square brackets|&#x5D;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|005E|[[Caret|^]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|005F|[[Underscore|_]]}}\n|-\n!{{chset-left|6}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0060|[[Grave accent|`]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0061|[[a]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0062|[[b]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0063|[[c]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0064|[[d]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0065|[[e]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0066|[[f]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0067|[[g]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0068|[[h]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0069|[[i]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|006A|[[j]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|006B|[[k]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|006C|[[l]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|006D|[[m]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|006E|[[n]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|006F|[[o]]}}\n|-\n!{{chset-left|7}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0070|[[p]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0071|[[q]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0072|[[r]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0073|[[s]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0074|[[t]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0075|[[u]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0076|[[v]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0077|[[w]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0078|[[x]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0079|[[y]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|007A|[[z]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|007B|[[Curly brackets|&#x7b;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|007C|[[Vertical bar|&#x7C;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|007D|[[Curly brackets|&#x7d;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|007E|[[Tilde|~]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|007F|[[Delete character|DEL]]}}\n|-\n!{{chset-left|8}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+00|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+01|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+02|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+03|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+04|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+05|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+06|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+07|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+08|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+09|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+0A|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+0B|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+0C|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+0D|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+0E|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+0F|\u2022}}\n|-\n!{{chset-left|9}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+10|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+11|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+12|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+13|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+14|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+15|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+16|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+17|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+18|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+19|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+1A|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+1B|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+1C|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+1D|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+1E|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+1F|\u2022}}\n|-\n!{{chset-left|A}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+20|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+21|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+22|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+23|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+24|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+25|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+26|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+27|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+28|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+29|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+2A|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+2B|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+2C|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+2D|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+2E|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+2F|\u2022}}\n|-\n!{{chset-left|B}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+30|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+31|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+32|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+33|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+34|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+35|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+36|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+37|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+38|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+39|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+3A|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+3B|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+3C|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+3D|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+3E|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+3F|\u2022}}\n|-\n!{{chset-left|2<br>C}}\n| style=\"background:#f00;\"|{{chset-ctrl|0000|2}}\n| style=\"background:#f00;\"|{{chset-ctrl|0040|2}}\n| style=\"background:#fff;\"|{{chset-ctrl|0080|[[C1 Controls and Latin-1 Supplement|Latin]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|00C0|[[C1 Controls and Latin-1 Supplement|Latin]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0100|[[Latin Extended-A|Latin]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0140|[[Latin Extended-A|Latin]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0180|[[Latin Extended-B|Latin]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|01C0|[[Latin Extended-B|Latin]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0200|[[Latin Extended-B|Latin]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0240|[[IPA Extensions (Unicode block)|IPA]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0280|[[IPA Extensions (Unicode block)|IPA]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|02C0|[[Unicode Phonetic Symbols#Spacing Modifier Letters (U+02B0\u201302FF)|IPA]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0300|[[Combining character|accents]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0340|[[Combining character|accents]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0380|[[Greek characters in Unicode|Greek]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|03C0|[[Greek characters in Unicode|Greek]]}}\n|-\n!{{chset-left|2<br>D}}\n| style=\"background:#fff;\"|{{chset-ctrl|0400|[[Cyrillic (Unicode block)|Cyril]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0440|[[Cyrillic (Unicode block)|Cyril]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0480|[[Cyrillic (Unicode block)|Cyril]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|04C0|[[Cyrillic (Unicode block)|Cyril]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0500|[[Cyrillic (Unicode block)|Cyril]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0540|[[Armenian alphabet|Armeni]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0580|[[Unicode and HTML for the Hebrew alphabet|Hebrew]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|05C0|[[Unicode and HTML for the Hebrew alphabet|Hebrew]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0600|[[Arabic (Unicode block)|Arabic]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0640|[[Arabic (Unicode block)|Arabic]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0680|[[Arabic (Unicode block)|Arabic]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|06C0|[[Arabic (Unicode block)|Arabic]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0700|[[Syriac (Unicode block)|Syriac]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0740|[[Arabic Supplement|Arabic]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0780|[[Thaana (Unicode block)|Thaana]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|07C0|[[NKo (Unicode block)|N'Ko]]}}\n|-\n!{{chset-left|3<br>E}}\n| style=\"background:#fcc;\"|{{chset-ctrl|0800|Indic}}\n| style=\"background:#fff;\"|{{chset-ctrl|1000|Misc.}}\n| style=\"background:#fff;\"|{{chset-ctrl|2000|Symbol}}\n| style=\"background:#fff;\"|{{chset-ctrl|3000|[[Kana]]\u2026}}\n| style=\"background:#fff;\"|{{chset-ctrl|4000|[[CJK Unified Ideographs|CJK]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|5000|[[CJK Unified Ideographs|CJK]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|6000|[[CJK Unified Ideographs|CJK]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|7000|[[CJK Unified Ideographs|CJK]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|8000|[[CJK Unified Ideographs|CJK]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|9000|[[CJK Unified Ideographs|CJK]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|A000|Asian}}\n| style=\"background:#fff;\"|{{chset-ctrl|B000|[[Hangul]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|C000|[[Hangul]]}}\n| style=\"background:#fcc;\"|{{chset-ctrl|D000|[[Hangul]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|E000|[[Private Use Area|PUA]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|F000|Forms}}\n|-\n!{{chset-left|4<br>F}}\n| style=\"background:#fcc;\"|{{chset-ctrl|10000|[[Supplementary Multilingual Plane|SMP\u2026]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|40000|}}\n| style=\"background:#fff;\"|{{chset-ctrl|80000|}}\n| style=\"background:#fff;\"|{{chset-ctrl|C0000|[[Supplementary Special-purpose Plane|SSP\u2026]]}}\n| style=\"background:#fcc;\"|{{chset-ctrl|100000|[[Private Use Area|SPU\u2026]]}}\n| style=\"background:#f00;\"|{{chset-ctrl|140000|4}}\n| style=\"background:#f00;\"|{{chset-ctrl|180000|4}}\n| style=\"background:#f00;\"|{{chset-ctrl|1C0000|4}}\n| style=\"background:#f00;\"|{{chset-ctrl|200000|5}}\n| style=\"background:#f00;\"|{{chset-ctrl|1000000|5}}\n| style=\"background:#f00;\"|{{chset-ctrl|2000000|5}}\n| style=\"background:#f00;\"|{{chset-ctrl|3000000|5}}\n| style=\"background:#f00;\"|{{chset-ctrl|4000000|6}}\n| style=\"background:#f00;\"|{{chset-ctrl|{{sc2|40000000}}|6}}\n| style=\"background:#f00;\"|\n| style=\"background:#f00;\"|\n|}\n<!-- See https://en.wikipedia.org/wiki/Template:Chset-tableformat -->\n\n{{colorbox|#d1f4ff}}{{nbsp}}Blue cells are 7-bit (single-byte) sequences. They must not be followed by a continuation byte.\n\n{{colorbox|#ffcc88}}{{nbsp}}Orange cells with a large dot are continuation bytes. The hexadecimal number shown after the {{mono|+}} symbol is the value of the 6 bits they add.\n\n{{colorbox|#fff}}{{nbsp}}White cells are the leading bytes for a sequence of multiple bytes, the length shown at the left edge of the row. The text shows the Unicode blocks encoded by sequences starting with this byte, and the hexadecimal code point shown in the cell is the lowest character value encoded using that leading byte.\n\n{{colorbox|red}}{{nbsp}}Red cells must never appear in a valid UTF-8 sequence. The first two red cells ({{mono|C0}} and {{mono|C1}}) could be used only for a 2-byte encoding of a 7-bit ASCII character which should be encoded in 1 byte; as described below, such \"overlong\" sequences are disallowed. The red cells in the {{mono|F_}} row ({{mono|F5}} to {{mono|FD}}) indicate leading bytes of 4-byte or longer sequences that cannot be valid because they would encode code points larger than the U+10FFFF limit of Unicode (a limit derived from the maximum code point encodable in [[UTF-16]]), and {{mono|FE}} and {{mono|FF}} were never defined for any purpose in UTF-8.\n\n{{colorbox|#fcc}}{{nbsp}}Pink cells are the leading bytes for a sequence of multiple bytes, of which some, but not all, possible continuation sequences are valid. {{mono|E0}} and {{mono|F0}} could start overlong encodings, in this case the lowest non-overlong-encoded code point is shown. {{mono|F4}} can start code points greater than U+10FFFF which are invalid. {{mono|ED}} can start the encoding of a code point in the range U+D800\u2013U+DFFF; these are invalid since they are reserved for UTF-16 [[Universal Character Set characters#Surrogates|surrogate halves]].\n\n===Overlong encodings===\nIn principle, it would be possible to inflate the number of bytes in an encoding by padding the code point with leading 0s. To encode the Euro sign \u20ac from the above example in four bytes instead of three, it could be padded with leading 0s until it was 21&nbsp;bits long{{snd}} {{mono|000 000010 000010 101100}}, and encoded as {{mono|11110{{fontcolor|#C000C0|000}}}} {{mono|10{{fontcolor|blue|000010}}}} {{mono|10{{fontcolor|green|000010}}}} {{mono|10{{fontcolor|red|101100}}}} (or {{mono|{{fontcolor|#C000C0|F0}}}} {{mono|{{fontcolor|blue|82}}}} {{mono|{{fontcolor|green|82}}}} {{mono|{{fontcolor|red|AC}}}} in hexadecimal). This is called an ''overlong encoding''.\n\nThe standard specifies that the correct encoding of a code point use only the minimum number of bytes required to hold the significant bits of the code point. Longer encodings are called ''overlong'' and are not valid UTF-8 representations of the code point. This rule maintains a one-to-one correspondence between code points and their valid encodings, so that there is a unique valid encoding for each code point. This ensures that string comparisons and searches are well-defined.\n\n[[#Modified UTF-8|Modified UTF-8]] uses the two-byte overlong encoding of U+0000 (the [[Null character|NUL character]]) as {{mono|110{{fontcolor|green|00000}}}} {{mono|10{{fontcolor|red|000000}}}} (hexadecimal {{mono|{{fontcolor|green|C0}}}} {{mono|{{fontcolor|red|80}}}}) instead of {{mono|00000000}} (hexadecimal {{mono|00}}). This allows the byte {{mono|00}} to be used as a [[null-terminated string|string terminator]].\n\n===Invalid byte sequences===\nNot all sequences of bytes are valid UTF-8. A UTF-8 decoder should be prepared for:\n\n* the red invalid bytes in the above table\n* an unexpected continuation byte\n* a non-continuation byte before the end of the character\n* the string ending before the end of the character (which can happen in simple string truncation)\n* an overlong encoding as described above\n* a sequence that decodes to an invalid code point as described below\n\nMany of the first UTF-8 decoders would decode these, ignoring incorrect bits and accepting overlong results. Carefully crafted invalid UTF-8 could make them either skip or create ASCII characters such as NUL, slash, or quotes. Invalid UTF-8 has been used to bypass security validations in high-profile products including Microsoft's [[Internet Information Services|IIS]] web server<ref name=\"MS00-078\">{{cite web |url=https://www.sans.org/resources/malwarefaq/wnt-unicode.php |author-first=Marvin |author-last=Marin |title=Web Server Folder Traversal MS00-078 |date=2000-10-17}}</ref> and Apache's Tomcat servlet container.<ref name=\"CVE-2008-2938\">{{cite web |url=https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2008-2938 |title=National Vulnerability Database \u2013 Summary for CVE-2008-2938}}</ref> <nowiki>RFC 3629</nowiki> states \"Implementations of the decoding algorithm MUST protect against decoding invalid sequences.\"<ref name=\"rfc3629\">{{Cite RFC |author-first=F. |author-last=Yergeau |title=RFC 3629 \u2013 UTF-8, a transformation format of ISO 10646 |publisher=[[Internet Engineering Task Force]] |year=2003 |url=https://tools.ietf.org/html/rfc3629 |access-date=2015-02-03}}</ref> ''The Unicode Standard'' requires decoders to \"...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence.\"<!--anyone have a copy of ISO/IEC 10646-1:2000 annex D for comparison?-->\n\nSome implementations of decoders throw exceptions on errors.<ref>[https://docs.oracle.com/javase/8/docs/api/java/io/DataInput.html Java's DataInput IO Interface]</ref> This has the disadvantage that it can turn what would otherwise be harmless errors (such as a \"no such file\" error) into a [[denial of service]]. For instance early versions of Python 3.0 would exit immediately if the command line or [[environment variable]]s contained invalid UTF-8.<ref name=\"PEP383\">{{cite web |url=https://www.python.org/dev/peps/pep-0383/ |title=Non-decodable Bytes in System Character Interfaces |date=2009-04-22 |access-date=2014-08-13 |website=python.org}}</ref>\n\nAn alternative practice is to replace errors with a replacement character. Replacement requires defining how many bytes are in the error:\n* Using the length defined by the lead byte (so that {{mono|E1,A0,C0}} is one error) is a bad idea, as a missing byte will cause the next character to become an error as well.\n* Since Unicode 6<ref>{{Cite web | url=https://www.unicode.org/versions/Unicode6.0.0/ | title=Unicode 6.0.0}}</ref> (October 2010), the standard (chapter 3) has \u201crecommended\u201d a \"best practice\" where the error ends as soon as a disallowed byte is encountered. In these decoders {{mono|E1,A0,C0}} is two errors (2 bytes in the first one). This means an error is no more than three bytes long and never contains the start of a valid character, and there are 21,952 different possible errors.<ref>128 1-byte, (16+5)\u00d764 2-byte, and 5\u00d764\u00d764 3-byte. There may be somewhat fewer if more precise tests are done for each continuation byte.</ref> The standard also recommends replacing each error with the [[Specials (Unicode block)#Replacement character|replacement character]] \"\ufffd\" (U+FFFD).\n* Another popular practice is to turn each byte into an error. In this case {{mono|E1,A0,C0}} is three errors. This requires the UTF-8 parser to back up 2 bytes when an error is detected. The primary advantage is that there are now only 128 different errors. This allows the decoder to define 128 different error replacements such as:\n** The invalid Unicode code points U+DC80\u2013U+DCFF where the low eight bits are the byte's value.<ref name=\"Kuhn2000\">{{cite web |url=http://permalink.gmane.org/gmane.comp.internationalization.linux/920|archiveurl=https://archive.fo/20150315055005/http://permalink.gmane.org/gmane.comp.internationalization.linux/920|archivedate=2015-03-15|title=Substituting malformed UTF-8 sequences in a decoder |date=2000-07-23 |access-date=2014-09-25 |author-first=Markus |author-last=Kuhn |author-link=Markus Kuhn (computer scientist)}}</ref> Sometimes it is called UTF-8B.<ref name=\"Sittler2006\">{{cite web|url=http://bsittler.livejournal.com/10381.html |title=Binary vs. UTF-8, and why it need not matter |date=2006-04-02 |access-date=2014-09-25 |author-first=B. |author-last=Sittler |url-status=dead |archiveurl=https://web.archive.org/web/20140723192908/http://bsittler.livejournal.com/10381.html |archivedate=2014-07-23 |df= }}</ref> <!-- Python 3.0 error replacement value --> This has the nice property that it makes invalid UTF-8 into invalid UTF-16.\n** The Unicode code points U+0080\u2013U+00FF with the same value as the byte, thus interpreting the bytes according to [[ISO/IEC 8859-1|ISO-8859-1]]{{Citation needed |date=August 2014}}<!-- very common in Linux and OS/X text rendering --> Care must be taken so that the [[C1 control codes]] such as [[Newline|NEL]] 0x0085 do not cause further code to misbehave.\n** The Unicode code point for the character represented by the byte in [[Windows-1252|CP1252]],{{Citation needed |date=August 2014}}<!-- Most modern browsers --> which is similar to using ISO-8859-1, except most bytes in the range 0x80\u20130x9F turn into printing characters. For example, 0x80 becomes the Euro sign, U+20AC. This makes text where legacy encodings are mixed with UTF-8 readable, and thus it is commonly done in browsers.\n\nThe large number of invalid byte sequences provides the advantage of making it easy to have a program accept both UTF-8 and legacy encodings such as ISO-8859-1. Software can check for UTF-8 correctness, and if that fails assume the input to be in the legacy encoding. It is technically true that this may detect an ISO-8859-1 string as UTF-8, but this is very unlikely if it contains any 8-bit bytes as they ''all'' have to be in unusual patterns of two or more in a row, such as \"\u00c2\u00a3\".\n\n===Invalid code points===\nSince RFC 3629 (November 2003), the high and low surrogate halves used by [[UTF-16]] (U+D800 through U+DFFF) and code points not encodable by UTF-16 (those after U+10FFFF) are not legal Unicode values, and their UTF-8 encoding must be treated as an invalid byte sequence.\n\nNot decoding unpaired surrogate halves makes it impossible to store invalid UTF-16 (such as Windows filenames or UTF-16 that has been split between the surrogates) as UTF-8. To preserve these invalid UTF-16 sequences, their corresponding UTF-8 encodings are sometimes allowed by implementations despite the above rule. There are attempts to define this behavior formally (see WTF-8 and CESU below).\n\n===Byte order mark===\n{{Main|Byte order mark}}<!-- but several statements here are ''not'' (yet) mentioned in the main article! -->\n\nMany [[Microsoft Windows|Windows]] programs (including older versions of Windows [[Notepad (Windows)|Notepad]]) add the bytes {{mono|0xEF}}, {{mono|0xBB}}, {{mono|0xBF}} at the start of any document saved as UTF-8. This is the UTF-8 encoding of the Unicode [[byte order mark]] (BOM), and is commonly referred to as a UTF-8 BOM, even though byte order is irrelevant to UTF-8. While ASCII text encoded using UTF-8 normally is backwards compatible with ASCII, this is not true when Unicode Standard recommendations are ignored and a BOM is added. Non-UTF-8 software may show the BOM as three garbage characters, e.g. \"{{mono|\u00ef\u00bb\u00bf}}\" in software interpreting the document as [[ISO 8859-1]] or [[Windows-1252]], and \"{{mono|\u2229\u2557\u2510}}\" if interpreted as [[code page 437]]. This is an example of [[mojibake]], the output of garbled text when text is  decoded using an unintended character encoding.\n\nThe Unicode Standard neither requires nor recommends the use of the BOM for UTF-8, but warns that it may be encountered at the start of a file transcoded from another encoding.<ref>{{cite web |url=https://www.unicode.org/versions/Unicode6.0.0/ch02.pdf |title=The Unicode Standard \u2013 Chapter 2 |page=30}}</ref> The presence of the UTF-8 BOM may cause problems with existing software that can handle UTF-8, for example:\n\n* Programming language parsers not explicitly designed for UTF-8 can often handle UTF-8 in string constants and comments, but cannot parse the UTF-8 BOM at the start of the file. <!-- Any program that does not change bytes with the high bit set in a quoted string is UTF-8 compatible -->\n* Programs that identify file types by leading characters may fail to identify the file if a UTF-8 BOM is present even if the user of the file can handle the BOM. An example is the Unix [[Shebang (Unix)|shebang]] syntax, another is [[Internet Explorer]] which will render pages in standards mode only when it starts with a [[document type declaration]].{{Citation needed|reason=Which IE versions?|date=December 2016}}\n* Programs that insert information at the start of a file will break use of the BOM to identify UTF-8 (one example is [[offline browser]]s that add the originating URL to the start of the file{{Citation needed|reason=Which ones? All or most?|date=December 2016}}).\n\nNonetheless, some software such as text editors will refuse to correctly display or interpret UTF-8 unless the text starts with a byte order mark or it contains only ASCII.{{Citation needed|reason=Which software?|date=October 2019}}\n\n===Official name and variants===\nThe official [[Internet Assigned Numbers Authority]] (IANA) code for the encoding is \"UTF-8\".<ref name=\"IANA_2013_CS\"/> All letters are upper-case, and the name is hyphenated. This spelling is used in all the Unicode Consortium documents relating to the encoding.\n\nAlternatively, the name \"utf-8\" may be used by all standards conforming to the IANA list (which include [[Cascading Style Sheets|CSS]], [[HTML]], [[XML]], and [[List of HTTP headers|HTTP headers]]),<ref>{{cite web |url=https://www.w3.org/International/O-HTTP-charset |publisher=[[W3C]] |title=Setting the HTTP charset parameter |author-first=Martin |author-last=D\u00fcrst |access-date=2013-02-08}}</ref> as the declaration is case insensitive.<ref name=\"IANA_2013_CS\">{{cite web |publisher=[[Internet Assigned Numbers Authority]] |url=https://www.iana.org/assignments/character-sets |title=Character Sets |date=2013-01-23 |access-date=2013-02-08}}</ref>\n\nOther descriptions, such as those that omit the hyphen or replace it with a space, i.e. \"utf8\" or \"UTF 8\", are not accepted as correct by the governing standards.<ref name=\"rfc3629\"/> Despite this, most agents such as browsers can understand them, and so standards intended to describe existing practice (such as HTML5) may effectively require their recognition.<ref>{{cite web|url=https://encoding.spec.whatwg.org/#names-and-labels|title=Encoding Standard \u00a7 4.2. Names and labels|publisher=[[WHATWG]]|access-date=2018-04-29}}</ref>\n\nUnofficially, UTF-8-BOM and UTF-8-NOBOM are sometimes used to refer to text files which respectively contain and lack a [[byte order mark]] (BOM).{{citation needed|date=March 2016}} In Japan especially, UTF-8 encoding without BOM is sometimes called \"UTF-8N\".<ref>{{cite web |url=https://suika.fam.cx/~wakaba/wiki/sw/n/BOM |title=BOM \u2013 suikawiki |access-date=2013-04-26 |language=Japanese}}</ref><ref>{{cite web |author-last=Davis |author-first=Mark |author-link=Mark Davis (Unicode) |title=Forms of Unicode |publisher=[[IBM]] |url=https://www-128.ibm.com/developerworks/library/utfencodingforms/index.html |access-date=2013-09-18 |archive-url=https://web.archive.org/web/20050506211548/https://www-128.ibm.com/developerworks/library/utfencodingforms/index.html |archive-date=2005-05-06}}</ref>\n\nSupported Windows versions, i.e. [[Windows 7]] and later, have [[Windows code page|codepage]] 65001, as a synonym for UTF-8 (with better support than in older Windows),<ref>{{Cite web|url=https://www.dostips.com/forum/viewtopic.php?t=5357|title=UTF-8 codepage 65001 in Windows 7 - part I - DosTips.com|quote=it looks like Win7 silently enhanced support for codepage 65001. Significant limitations do remain - in particular redirection and piping still fail under codepage 65001. Nevertheless, the added support opens up some new exciting possibilities.|website=www.dostips.com|author=Liviu|language=en-gb|date=2014-02-07|access-date=2018-01-30}}</ref> and Microsoft has a script for [[Windows 10]], to enable it by default for its program [[Microsoft Notepad]].<ref>{{Cite web|url=https://gallery.technet.microsoft.com/scriptcenter/How-to-set-default-2d9669ae?ranMID=24542&ranEAID=TnL5HPStwNw&ranSiteID=TnL5HPStwNw-1ayuyj6iLWwQHN_gI6Np_w&tduid=(1f29517b2ebdfe80772bf649d4c144b1)(256380)(2459594)(TnL5HPStwNw-1ayuyj6iLWwQHN_gI6Np_w)()|title=Script How to set default encoding to UTF-8 for notepad by PowerShell|website=gallery.technet.microsoft.com|language=en-US|access-date=2018-01-30}}</ref>\n\nIn [[Printer Command Language|PCL]], UTF-8 is called Symbol-ID \"18N\" (PCL supports 183 character encodings, called Symbol Sets, which potentially could be reduced to one, 18N, that is UTF-8).<ref>{{Cite web|url=http://pclhelp.com/pcl-symbol-sets/|archive-url=https://web.archive.org/web/20150219212843/http://pclhelp.com/pcl-symbol-sets/|url-status=dead|archive-date=2015-02-19|title=HP PCL Symbol Sets {{!}} Printer Control Language (PCL & PXL) Support Blog|date=2015-02-19|access-date=2018-01-30}}</ref>\n\n=={{anchor|FSS-UTF}}History==\nBy early 1992, the search was on for a good byte-stream encoding of multi-byte character sets. The draft [[Universal Coded Character Set|ISO 10646]] standard contained a non-required [[Addendum|annex]] called [[UTF-1]] that provided a byte stream encoding of its [[32-bit]] code points. This encoding was not satisfactory on performance grounds, among other problems, and the biggest problem was probably that it did not have a clear separation between ASCII and non-ASCII: new UTF-1 tools would be backward compatible with ASCII-encoded text, but UTF-1-encoded text could confuse existing code expecting ASCII (or [[extended ASCII]]), because it could contain continuation bytes in the range 0x21\u20130x7E that meant something else in ASCII, e.g., 0x2F for '/', the [[Unix]] [[Path (computing)|path]] directory separator, and this example is reflected in the name and introductory text of its replacement. The table below was derived from a textual description in the annex.\n\n{| class=\"wikitable\"\n|+[[UTF-1]]\n|-\n!Number<br>of bytes!!First<br>code point!!Last<br>code point!!Byte 1!!Byte 2!!Byte 3!!Byte 4!!Byte 5\n|-\n| style=\"text-align: center;\" |1\n| style=\"text-align: right;\" |U+0000\n| style=\"text-align: right;\" |U+009F\n| style=\"text-align: center;\" |00\u20139F\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |2\n| style=\"text-align: right;\" |U+00A0\n| style=\"text-align: right;\" |U+00FF\n| style=\"text-align: center;\" |A0\n| style=\"text-align: right;\" |A0\u2013FF\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |2\n| style=\"text-align: right;\" |U+0100\n| style=\"text-align: right;\" |U+4015\n| style=\"text-align: center;\" |A1\u2013F5\n| style=\"text-align: right;\" |21\u20137E, A0\u2013FF\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |3\n| style=\"text-align: right;\" |U+4016\n| style=\"text-align: right;\" |U+38E2D\n| style=\"text-align: center;\" |F6\u2013FB\n| style=\"text-align: right;\" |21\u20137E, A0\u2013FF\n| style=\"text-align: right;\" |21\u20137E, A0\u2013FF\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |5\n| style=\"text-align: right;\" |U+38E2E\n| style=\"text-align: right;\" |U+7FFFFFFF\n| style=\"text-align: center;\" |FC\u2013FF\n| style=\"text-align: right;\" |21\u20137E, A0\u2013FF\n| style=\"text-align: right;\" |21\u20137E, A0\u2013FF\n| style=\"text-align: right;\" |21\u20137E, A0\u2013FF\n| style=\"text-align: right;\" |21\u20137E, A0\u2013FF\n|}\n\nIn July 1992, the [[X/Open]] committee XoJIG was looking for a better encoding. Dave Prosser of [[Unix System Laboratories]] submitted a proposal for one that had faster implementation characteristics and introduced the improvement that 7-bit ASCII characters would only represent themselves; all multi-byte sequences would include only bytes where the high bit was set. The name File System Safe [[Universal Character Set|UCS]] Transformation Format (FSS-UTF) and most of the text of this proposal were later preserved in the final specification.<ref name=\"FSS-UTF\">{{cite journal |title=Appendix F. FSS-UTF / File System Safe UCS Transformation format |journal=The Unicode Standard 1.1 |url=https://www.unicode.org/versions/Unicode1.1.0/appF.pdf |access-date=2016-06-07 |url-status=live |archive-url=https://web.archive.org/web/20160607215950/https://www.unicode.org/versions/Unicode1.1.0/appF.pdf |archive-date=2016-06-07}}</ref><ref name=\"Whistler_2001\">{{cite web |title=FSS-UTF, UTF-2, UTF-8, and UTF-16 |author-first=Kenneth |author-last=Whistler |date=2001-06-12 |url=https://unicode.org/mail-arch/unicode-ml/y2001-m06/0318.html |access-date=2006-06-07 |url-status=live |archive-url=https://web.archive.org/web/20160607220249/https://unicode.org/mail-arch/unicode-ml/y2001-m06/0318.html |archivedate=2016-06-07 }}</ref><ref name=\"pikeviacambridge\">{{cite web |url=https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt |title=UTF-8 history |author-first=Rob |author-last=Pike |author-link=Rob Pike |date=2003-04-30 |access-date=2012-09-07}}</ref><ref>{{cite web |url=https://plus.google.com/u/0/101960720994009339267/posts/Rz1udTvtiMg |title=UTF-8 turned 20 years old yesterday |author-first=Rob |author-last=Pike |author-link=Rob Pike |date=2012-09-06 |access-date=2012-09-07}}</ref>\n\n{| class=\"wikitable\"\n|+FSS-UTF proposal (1992)\n|-\n!Number<br>of bytes!!First<br>code point!!Last<br>code point!!Byte 1!!Byte 2!!Byte 3!!Byte 4!!Byte 5\n|-\n| style=\"text-align: center;\" |1\n| style=\"text-align: right;\" |U+0000\n| style=\"text-align: right;\" |U+007F\n|{{mono|0xxxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |2\n| style=\"text-align: right;\" |U+0080\n| style=\"text-align: right;\" |U+207F\n|{{mono|10xxxxxx}}||{{mono|1xxxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |3\n| style=\"text-align: right;\" |U+2080\n| style=\"text-align: right;\" |U+8207F\n|{{mono|110xxxxx}}||{{mono|1xxxxxxx}}||{{mono|1xxxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |4\n| style=\"text-align: right;\" |U+82080\n| style=\"text-align: right;\" |U+208207F\n|{{mono|1110xxxx}}||{{mono|1xxxxxxx}}||{{mono|1xxxxxxx}}||{{mono|1xxxxxxx}}\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |5\n| style=\"text-align: right;\" |U+2082080\n| style=\"text-align: right;\" |U+7FFFFFFF\n|{{mono|11110xxx}}||{{mono|1xxxxxxx}}||{{mono|1xxxxxxx}}||{{mono|1xxxxxxx}}||{{mono|1xxxxxxx}}\n|}\n\nIn August 1992, this proposal was circulated by an [[IBM]] X/Open representative to interested parties. A modification by [[Ken Thompson]] of the [[Plan 9 from Bell Labs|Plan 9]] [[operating system]] group at [[Bell Labs]] made it somewhat less bit-efficient than the previous proposal but crucially allowed it to be [[Self-synchronizing code|self-synchronizing]], letting a reader start anywhere and immediately detect byte sequence boundaries. It also abandoned the use of biases and instead added the rule that only the shortest possible encoding is allowed; the additional loss in compactness is relatively insignificant, but readers now have to look out for invalid encodings to avoid reliability and especially security issues. Thompson's design was outlined on September 2, 1992, on a [[placemat]] in a New Jersey diner with [[Rob Pike]]. In the following days, Pike and Thompson implemented it and updated [[Plan 9 from Bell Labs|Plan 9]] to use it throughout, and then communicated their success back to X/Open, which accepted it as the specification for FSS-UTF.<ref name=pikeviacambridge/>\n\n{| class=\"wikitable\"\n|+ FSS-UTF (1992) / UTF-8 (1993)<ref name=\":0\" />\n|-\n!Number<br>of bytes!!First<br>code point!!Last<br>code point!!Byte 1!!Byte 2!!Byte 3!!Byte 4!!Byte 5!!Byte 6\n|-\n| style=\"text-align: center;\" |1\n| style=\"text-align: right;\" |U+0000\n| style=\"text-align: right;\" |U+007F\n|{{mono|0xxxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |2\n| style=\"text-align: right;\" |U+0080\n| style=\"text-align: right;\" |U+07FF\n|{{mono|110xxxxx}}||{{mono|10xxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |3\n| style=\"text-align: right;\" |U+0800\n| style=\"text-align: right;\" |U+FFFF\n|{{mono|1110xxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |4\n| style=\"text-align: right;\" |U+10000\n| style=\"text-align: right;\" |U+1FFFFF\n|{{mono|11110xxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |5\n| style=\"text-align: right;\" |U+200000\n| style=\"text-align: right;\" |U+3FFFFFF\n|{{mono|111110xx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |6\n| style=\"text-align: right;\" |U+4000000\n| style=\"text-align: right;\" |U+7FFFFFFF\n|{{mono|1111110x}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}\n|}\n\nUTF-8 was first officially presented at the [[USENIX]] conference in [[San Diego]], from January 25 to 29, 1993. The [[Internet Engineering Task Force]] adopted UTF-8 in its Policy on Character Sets and Languages in RFC&nbsp;2277 ([[Request_for_Comments#\"Best_Current_Practice\"|<abbr title=\"Best Current Practice\">BCP</abbr>]] 18) for future Internet standards work, replacing [[Single Byte Character Set]]s such as [[ISO/IEC 8859-1|Latin-1]] in older RFCs.<ref>{{cite IETF |bcp=18 |title=IETF Policy on Character Sets and Languages |date=January 1998 |first=Harald |last=Alvestrand |authorlink=Harald Alvestrand |doi=10.17487/RFC2277}}</ref>\n\nIn November 2003, UTF-8 was restricted by RFC 3629 to match the constraints of the [[UTF-16]] character encoding: explicitly prohibiting code points corresponding to the high and low surrogate characters removed <!-- 2*2^10/(2^16-2^11) --> more than 3% of the three-byte sequences, and ending at U+10FFFF removed <!-- (2^21-(2^16+2^20))/(2^21-2^16) --> more than 48% of the four-byte sequences and all five- and six-byte sequences.\n\nGoogle reported that in 2008, UTF-8 (labelled \"Unicode\") became the most common encoding for HTML files.<ref name=\"markdavis\">{{cite web |url=http://googleblog.blogspot.com/2008/05/moving-to-unicode-51.html |title=Moving to Unicode 5.1 |author-first=Mark |author-last=Davis |author-link=Mark Davis (Unicode) |date=2008-05-05 |access-date=2013-03-01}}</ref> By 2018, most languages have use of UTF-8 up in the low to high 90%, including Greek at 97.1%.<ref>{{Cite web|url=https://w3techs.com/technologies/segmentation/cl-el-/character_encoding|title=Distribution of Character Encodings among websites that use Greek|website=w3techs.com|language=en|access-date=2018-12-03}}</ref> A few have even 100.0% use such as [[Kurdish languages|Kurdish]], <!--Pushto, -->[[Pashto]], Javanese, [[Kalaallisut]] (<!-- West -->Greenlandic) and Iranian languages<ref>{{Cite web|url=https://w3techs.com/technologies/segmentation/cl-ira-/character_encoding|title=Distribution of Character Encodings among websites that use Iranian languages|website=w3techs.com|language=en|access-date=2018-12-03}}</ref> and [[Sign Language]]s.<ref>{{Cite web|url=https://w3techs.com/technologies/segmentation/cl-sgn-/character_encoding|title=Distribution of Character Encodings among websites that use Sign Languages|website=w3techs.com|language=en|access-date=2018-12-03}}</ref> Exceptions include mainly Asian languages with Chinese at 88.0%,<ref>{{Cite web|url=https://w3techs.com/technologies/segmentation/cl-zh-/character_encoding|title=Distribution of Character Encodings among websites that use Chinese|website=w3techs.com|language=en|access-date=2018-12-03}}</ref> Japanese at 86.7% (while Mongolian is at 99.7%<ref>{{Cite web|url=https://w3techs.com/technologies/segmentation/cl-mn-/character_encoding|title=Distribution of Character Encodings among websites that use Mongolian|website=w3techs.com|language=en|access-date=2018-12-03}}</ref>) and [[Breton language|Breton]] at 70%.<ref>{{Cite web|url=https://w3techs.com/technologies/segmentation/cl-br-/character_encoding|title=Distribution of Character Encodings among websites that use Breton|website=w3techs.com|language=en|access-date=2018-12-03}}</ref>\n\n[[International Components for Unicode]] (ICU) has historically used [[UTF-16]], and still does only for Java; while for C/C++ UTF-8 is now supported as the \"Default Charset\",<ref>{{Cite web|url=http://userguide.icu-project.org/strings/utf-8|title=UTF-8 - ICU User Guide|website=userguide.icu-project.org|access-date=2018-04-03}}</ref> including the correct handling of \"illegal UTF-8\".<ref>{{Cite web|url=http://bugs.icu-project.org/trac/ticket/13311|title=#13311 (change illegal-UTF-8 handling to Unicode \"best practice\") |website=bugs.icu-project.org|access-date=2018-04-03}}</ref>\n\n=== Standards ===\nThere are several current definitions of UTF-8 in various standards documents:\n\n* RFC 3629 / STD 63 (2003), which establishes UTF-8 as a standard Internet protocol element\n* RFC 5198 defines UTF-8 [[Unicode equivalence|NFC]] for Network Interchange (2008)\n* ISO/IEC 10646:2014 \u00a79.1 (2014)<ref>[https://www.iso.org/iso/home/store/catalogue_ics/catalogue_detail_ics.htm?csnumber=63182 ISO/IEC 10646:2014 \u00a79.1], 2014.</ref>\n* ''The Unicode Standard, Version 11.0'' (2018)<ref>[https://www.unicode.org/versions/Unicode11.0.0/ ''The Unicode Standard, Version 11.0''] [https://www.unicode.org/versions/Unicode11.0.0/ch03.pdf \u00a73.9 D92, \u00a73.10 D95], 2018.</ref>\n\nThey supersede the definitions given in the following obsolete works:\n\n* ''The Unicode Standard, Version 2.0'', Appendix A (1996)\n* ISO/IEC 10646-1:1993 Amendment 2 / Annex R (1996)\n* RFC 2044 (1996)\n* RFC 2279 (1998)\n* ''The Unicode Standard, Version 3.0'', \u00a72.3 (2000) plus Corrigendum #1 : UTF-8 Shortest Form (2000)\n* ''Unicode Standard Annex #27: Unicode 3.1'' (2001)<ref>[https://www.unicode.org/reports/tr27/tr27-3.html ''Unicode Standard Annex #27: Unicode 3.1''], 2001.</ref>\n* ''The Unicode Standard, Version 5.0'' (2006)<ref>[https://www.unicode.org/versions/Unicode5.0.0/ ''The Unicode Standard, Version 5.0''] [https://www.unicode.org/versions/Unicode5.0.0/ch03.pdf \u00a73.9\u2013\u00a73.10 ch. 3], 2006.</ref>\n* ''The Unicode Standard, Version 6.0'' (2010)<ref>[https://www.unicode.org/versions/Unicode6.0.0/ ''The Unicode Standard, Version 6.0''] [https://www.unicode.org/versions/Unicode6.0.0/ch03.pdf \u00a73.9 D92, \u00a73.10 D95], 2010.</ref>\n\nThey are all the same in their general mechanics, with the main differences being on issues such as allowed range of code point values and safe handling of invalid input.\n\n===Comparison with single-byte encodings===\n* UTF-8 can encode any [[Universal Character Set characters|Unicode character]], avoiding the need to figure out and set a \"[[code page]]\" or otherwise indicate what character set is in use, and allowing output in multiple scripts at the same time. For many scripts there have been more than one single-byte encoding in usage, so even knowing the script was insufficient information to display it correctly.\n* The bytes 0xFE and 0xFF do not appear, so a valid UTF-8 stream never matches the UTF-16 [[byte order mark]] and thus cannot be confused with it. The absence of 0xFF (0377) also eliminates the need to escape this byte in [[Telnet]] (and FTP control connection).\n* UTF-8 encoded text is larger than specialized single-byte encodings except for plain ASCII characters. In the case of scripts which used 8-bit character sets with non-Latin characters encoded in the upper half (such as most [[Cyrillic script|Cyrillic]] and [[Greek alphabet]] code pages), characters in UTF-8 will be double the size. For some scripts, such as [[Thai alphabet|Thai]] and [[Devanagari]] (which is used by various South Asian languages), characters will triple in size. There are even examples where a single byte turns into a composite character in Unicode and is thus six times larger in UTF-8. This has caused objections in India and other countries.\n*  It is possible in UTF-8 (or any other variable-length encoding) to split or [[Data truncation|truncate]] a string in the middle of a character. If the two pieces are not re-appended later before interpretation as characters, this can introduce an invalid sequence at both the end of the previous section and the start of the next, and some decoders will not preserve these bytes and result in data loss. Because UTF-8 is self-synchronizing this will however never introduce a different valid character, and it is also fairly easy to move the truncation point backwards to the start of a character.\n* If the code points are all the same size, measurements of a fixed number of them is easy. Due to ASCII-era documentation where \"character\" is used as a synonym for \"byte\" this is often considered important. However, by measuring string positions using bytes instead of \"characters\" most algorithms can be easily and efficiently adapted for UTF-8. Searching for a string within a long string can for example be done byte by byte; the self-synchronization property prevents false positives.\n\n===Comparison with other multi-byte encodings===\n* UTF-8 can encode any [[Unicode]] character. Files in different scripts can be displayed correctly without having to choose the correct code page or font. For instance, Chinese and Arabic can be written in the same file without specialised markup or manual settings that specify an encoding.\n* UTF-8 is [[Self-synchronizing code|self-synchronizing]]: character boundaries are easily identified by scanning for well-defined bit patterns in either direction. If bytes are lost due to error or [[data corruption|corruption]], one can always locate the next valid character and resume processing. If there is a need to shorten a string to fit a specified field, the previous valid character can easily be found. Many multi-byte encodings such as {{nowrap|Shift JIS}} are much harder to resynchronize. This also means that [[byte-oriented protocol|byte-oriented]] [[string-searching algorithm]]s can be used with UTF-8 (as a character is the same as a \"word\" made up of that many bytes), optimized versions of byte searches can be much faster due to hardware support and lookup tables that have only 256 entries.\n* Efficient to encode using simple [[bitwise operation]]s. UTF-8 does not require slower mathematical operations such as multiplication or division (unlike {{nowrap|Shift JIS}}, {{nowrap|[[GB 2312]]}} and other encodings).\n* UTF-8 will take more space than a multi-byte encoding designed for a specific script. East Asian legacy encodings generally used two bytes per character yet take three bytes per character in UTF-8. Self-synchronization also takes more space.\n\n===Comparison with UTF-16===\nSee also [[Comparison of Unicode encodings]]\n* Byte encodings and UTF-8 are represented by byte arrays in programs, and often nothing needs to be done to a function when converting from a byte encoding to UTF-8. [[UTF-16]] is represented by 16-bit word arrays, and converting to UTF-16 while maintaining compatibility with existing [[ASCII]]-based programs (such as was done with Windows) requires ''every'' API and data structure that takes a string to be duplicated, one version accepting byte strings and another version accepting UTF-16.\n* Text encoded in UTF-8 will be smaller than the same text encoded in UTF-16 if there are more code points below U+0080 than in the range U+0800..U+FFFF. This is true for all modern European languages.\n** Text in (for example) Chinese, Japanese or Devanagari will take more space in UTF-8 if there are more of these characters than there are ASCII characters. This is likely when data mainly consist of pure prose, but is lessened by the degree to which the context uses ASCII whitespace, digits, and punctuation.<ref group=\"nb\">The 2010-11-22 version of [[:hi:\u092f\u0942\u0928\u093f\u0915\u094b\u0921|\u092f\u0942\u0928\u093f\u0915\u094b\u0921]] (Unicode in Hindi), when the pure text was pasted to Notepad, generated 19&nbsp;KB when saved as UTF-16 and 22&nbsp;KB when saved as UTF-8.</ref>\n** Most of the [[formatted text|rich text formats]] (including HTML) contain a large proportion of ASCII characters for the sake of formatting, thus the size usually will be reduced significantly compared with UTF-16, even when the language mostly uses 3-byte long characters in UTF-8.<ref group=\"nb\">The 2010-10-27 version of [[:ja:UTF-8|UTF-8]] (in Japanese) generated 169&nbsp;KB when converted with Notepad to UTF-16, and only 101&nbsp;KB when converted back to UTF-8. The 2010-11-22 version of [[:hi:\u092f\u0942\u0928\u093f\u0915\u094b\u0921|\u092f\u0942\u0928\u093f\u0915\u094b\u0921]] (Unicode in Hindi) required 119&nbsp;KB in UTF-16 and 76&nbsp;KB in UTF-8.</ref>\n* Most communication (e.g. HTML and IP) and storage (e.g. for Unix) was designed for a [[Bitstream#Definition of bytestream|stream of bytes]]. A UTF-16 string must use a pair of bytes for each code unit:\n** The order of those two bytes becomes an issue and must be specified in the UTF-16 protocol, such as with a [[byte order mark]].\n** If an ''odd'' number of bytes is missing from UTF-16, the whole rest of the string will be meaningless text. Any bytes missing from UTF-8 will still allow the text to be recovered accurately starting with the next character after the missing bytes.\n\n==Derivatives==\nThe following implementations show slight differences from the UTF-8 specification. They are incompatible with the UTF-8 specification and may be rejected by conforming UTF-8 applications.\n\n===CESU-8===\n{{Main|CESU-8}}\n\nMany programs added UTF-8 conversions for [[UCS-2]] data and did not alter this UTF-8 conversion when UCS-2 was replaced with the surrogate-pair using [[UTF-16]]. In such programs each half of a UTF-16 surrogate pair is encoded as its own three-byte UTF-8 encoding, resulting in six-byte sequences rather than four bytes for characters outside the [[Basic Multilingual Plane]]. [[Oracle Database|Oracle]] and [[MySQL]] databases use this, as well as Java and Tcl as described below, and probably many Windows programs where the programmers were unaware of the complexities of UTF-16. Although this non-optimal encoding is generally not deliberate, a supposed benefit is that it preserves UTF-16 binary sorting order when CESU-8 is binary sorted.\n\n==={{anchor|MUTF-8}}Modified UTF-8===\nIn Modified UTF-8 (MUTF-8),<ref>{{cite web |title=Java SE documentation for Interface java.io.DataInput, subsection on Modified UTF-8 |url=https://docs.oracle.com/javase/8/docs/api/java/io/DataInput.html#modified-utf-8 |year=2015 |publisher=[[Oracle Corporation]] |access-date=2015-10-16}}</ref> the [[null character]] (U+0000) uses the two-byte overlong encoding {{mono|110{{fontcolor|green|00000}}}} {{mono|10{{fontcolor|red|000000}}}} (hexadecimal {{mono|{{fontcolor|green|C0}}}} {{mono|{{fontcolor|red|80}}}}), instead of {{mono|00000000}} (hexadecimal {{mono|00}}). Modified UTF-8 strings never contain any actual null bytes but can contain all Unicode code points including U+0000,<ref>{{cite web |url=https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.7 |title=The Java Virtual Machine Specification, section 4.4.7: \"The CONSTANT_Utf8_info Structure\" |publisher=[[Oracle Corporation]] |year=2015 |quote=Java virtual machine UTF-8 strings never have embedded nulls. |access-date=2015-10-16}}</ref> which allows such strings (with a null byte appended) to be processed by traditional [[null-terminated string]] functions.\n\nAll known Modified UTF-8 implementations also treat the surrogate pairs as in [[CESU-8]].\n\nIn normal usage, the [[Java (programming language)|Java programming language]] supports standard UTF-8 when reading and writing strings through {{Javadoc:SE|java/io|InputStreamReader}} and {{Javadoc:SE|java/io|OutputStreamWriter}} (if it is the platform's default character set or as requested by the program). However it uses Modified UTF-8 for object [[Java serialization|serialization]]<ref>{{cite web |title=Java Object Serialization Specification, chapter 6: Object Serialization Stream Protocol, section 2: Stream Elements |url=https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html#a8299 |year=2010 |publisher=[[Oracle Corporation]] |quote= [\u2026] encoded in modified UTF-8. |access-date=2015-10-16}}</ref> among other applications of {{Javadoc:SE|java/io|DataInput}} and {{Javadoc:SE|java/io|DataOutput}}, for the [[Java Native Interface]],<ref>{{cite web |url=https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html#modified_utf_8_strings |title=Java Native Interface Specification, chapter 3: JNI Types and Data Structures, section: Modified UTF-8 Strings |publisher=[[Oracle Corporation]] |year=2015 |quote=The JNI uses modified UTF-8 strings to represent various string types. |access-date=2015-10-16}}</ref> and for embedding constant strings in [[Class (file format)|class files]].<ref>{{cite web |title=The Java Virtual Machine Specification, section 4.4.7: \"The CONSTANT_Utf8_info Structure\" |url=https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.7 |publisher=[[Oracle Corporation]] |year=2015 |quote= [\u2026] differences between this format and the 'standard' UTF-8 format. |access-date=2015-10-16}}</ref>\nThe dex format defined by [[Dalvik (software)|Dalvik]] also uses the same modified UTF-8 to represent string values.<ref>{{cite web |url=https://source.android.com/tech/dalvik/dex-format.html |title=ART and Dalvik |work=Android Open Source Project |quote=[T]he dex format encodes its string data in a de facto standard modified UTF-8 form, hereafter referred to as MUTF-8. |access-date=2013-04-09 |url-status=dead |archiveurl=https://web.archive.org/web/20130426010617/https://source.android.com/tech/dalvik/dex-format.html |archivedate=2013-04-26 |df= }}</ref>\n[[Tcl]] also uses the same modified UTF-8<ref>{{cite web |title=Tcler's Wiki: UTF-8 bit by bit (Revision 6) |date=2009-04-25 |url=https://wiki.tcl.tk/_/revision?N=1211&V=6 |access-date=2009-05-22 |quote=In orthodox UTF-8, a NUL byte (\\x00) is represented by a NUL byte. [\u2026] But [\u2026] we [\u2026] want NUL bytes inside [\u2026] strings [\u2026]}}</ref> as Java for internal representation of Unicode data, but uses strict CESU-8 for external data.\n\n===WTF-8===\nWTF-8 (Wobbly Transformation Format \u2013 8-bit) is an extension of UTF-8 where the encodings of ''unpaired'' surrogate halves (U+D800 through U+DFFF) are allowed.<ref name=\"Sapin_2016\">{{cite web |title=The WTF-8 encoding |author-first=Simon |author-last=Sapin |date=2016-03-11 |orig-year=2014-09-25 |url=https://simonsapin.github.io/wtf-8/ |access-date=2016-05-24 |url-status=live |archive-url=https://web.archive.org/web/20160524180037/https://simonsapin.github.io/wtf-8/ |archive-date=2016-05-24}}</ref> This is necessary to store possibly-invalid UTF-16, such as Windows filenames. Many systems that deal with UTF-8 work this way without considering it a different encoding, as it is simpler.\n\nThe term \"WTF-8\" has also been used humorously to refer to [[Mojibake|erroneously doubly-encoded UTF-8]]<ref name=\"wtf8_2016\">{{cite web|title=WTF-8.com|date=2006-05-18|url=http://wtf-8.com/|access-date=2016-06-21}}</ref><ref name=\"Speer_2016\">{{cite web|title=ftfy (fixes text for you) 4.0: changing less and fixing more|author-first=Robyn|author-last=Speer|date=2015-05-21|url=https://blog.luminoso.com/2015/05/21/ftfy-fixes-text-for-you-4-0-changing-less-and-fixing-more/|access-date=2016-06-21|archive-url=https://web.archive.org/web/20150530150039/https://blog.luminoso.com/2015/05/21/ftfy-fixes-text-for-you-4-0-changing-less-and-fixing-more/|archive-date=2016-05-21}}</ref> sometimes with the implication that [[CP1252]] bytes are the only ones encoded.<ref>{{Cite web|url=http://www-uxsup.csx.cam.ac.uk/~fanf2/hermes/doc/qsmtp/draft-fanf-wtf8.html|title=WTF-8, a transformation format of code page 1252|website=www-uxsup.csx.cam.ac.uk|access-date=2016-10-12}}</ref>\n\n===UTF-8b===\nExtensions have been created to store invalid byte sequences as UTF-16. They include [[MirBSD]] OPTU-8/16<ref>{{cite web |title=RTFM optu8to16(3), optu8to16vis(3) |url=https://www.mirbsd.org/htman/i386/man3/optu8to16.htm |website=www.mirbsd.org}}</ref> which converts them to U+EF80\u2026U+EFFF in a [[Private Use Area]], and [[Python (programming language)|Python]] \"surrogateescape\"<ref>{{cite web |title=PEP 383 -- Non-decodable Bytes in System Character Interfaces |url=https://www.python.org/dev/peps/pep-0383 |website=Python.org |language=en}}</ref> which converts them to U+DC80\u2026U+DCFF which are low (trailing) surrogate values and thus \"invalid\" UTF-16.\n\nFor the encoding to be reversible, the UTF-8 encoding of the error code points must be disallowed. For the Python version this makes the encoding incompatible with WTF-8 or CESU-8 (though only for 128 code points). Re-encoding must also be careful of a malicious actor arranging the errors to convert back to valid UTF-8 encoding. For these reasons is far easier to store invalid UTF-16 as WTF-8 than to store invalid UTF-8 as some form of UTF-16, so using byte strings is best if you must work with both.\n\n==See also==\n{{Div col|colwidth=25em}}\n* [[Alt code]]\n* [[Character encodings in HTML]]\n* {{Section link|Comparison of e-mail clients|Features}}\n* [[Comparison of Unicode encodings]]\n* [[GB 18030]]\n* [[Iconv]] \u2013 a standardized [[Application programming interface|API]] used to convert between different [[character encoding]]s\n* [[ISO/IEC 8859]]\n* [[Specials (Unicode block)]]\n* [[Unicode and email]]\n* [[Unicode and HTML]]\n* [[Universal Character Set]]\n* [[Percent-encoding#Current standard|UTF-8 in URIs]]\n* [[UTF-EBCDIC]]\n* [[UTF-9 and UTF-18]]\n* [[UTF-16|UTF-16/UCS-2]]\n{{Div col end}}\n\n==Notes==\n{{Reflist|group=\"nb\"}}\n\n==References==\n{{Reflist|30em}}\n\n==External links==\n* [http://doc.cat-v.org/plan_9/4th_edition/papers/utf Original UTF-8 paper] ([https://web.archive.org/web/20000917055036/http://plan9.bell-labs.com/sys/doc/utf.pdf or pdf]) for [[Plan 9 from Bell Labs]]\n* UTF-8 test pages by [http://www.user.uni-hannover.de/nhtcapri/multilingual1.html Andreas Prilop], [http://titus.uni-frankfurt.de/indexe.htm?/unicode/unitest.htm Jost Gippert] and the [http://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html World Wide Web Consortium]\n* Unix/Linux: [http://www.cl.cam.ac.uk/~mgk25/unicode.html UTF-8/Unicode FAQ], [http://www.tldp.org/HOWTO/Unicode-HOWTO.html Linux Unicode HOWTO], [http://www.gentoo.org/doc/en/utf-8.xml UTF-8 and Gentoo]\n* {{YouTube|id=MijmeoH9LT4|title=Characters, Symbols and the Unicode Miracle \u2013 Computerphile}}\n\n{{Unicode navigation}}\n{{Character encoding}}\n{{Rob Pike navbox}}\n{{Ken Thompson navbox}}\n\n{{DEFAULTSORT:UTF-08}}\n[[Category:Character encoding]]\n[[Category:Computer-related introductions in 1993]]\n[[Category:Encodings]]\n[[Category:Unicode Transformation Formats]]\n", "text_old": "{{Short description|Unicode Transformation Format 8, encodes all 1,112,064 Unicode code points as 1 to 4 bytes}}\n{{Infobox character encoding\n| name = UTF-8\n| mime = \n| alias = \n| image = \n| caption = \n| standard = Unicode Standard\n| status = \n| classification = [[Unicode Transformation Format]], [[extended ASCII]], [[variable-width encoding]]\n| encodes = [[ISO 10646]] ([[Unicode]])\n| extends = [[US-ASCII]]\n| prev = [[UTF-1]]\n| next = \n}}\n'''UTF-8''' (8-[[bit]] [[Unicode transformation format|Unicode Transformation Format]]) is a [[variable-width encoding|variable width]] [[character encoding]] capable of encoding all 1,112,064<ref group=nb>17\u00d72<sup>16</sup> = 1,114,112 code points minus 2,048 technically-invalid surrogate code points</ref> valid [[code point]]s in [[Unicode]] using one to four one-[[byte]] (8-bit) code units. The encoding is defined by the Unicode Standard, and was originally designed by [[Ken Thompson]] and [[Rob Pike]].<ref name=\":0\">[https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt Email Subject: UTF-8 history], From: \"Rob 'Commander' Pike\", Date: Wed, 30 Apr 2003..., ''...UTF-8 was designed, in front of my eyes, on a placemat in a New Jersey diner one night in September or so 1992...So that night Ken wrote packing and unpacking code and I started tearing into the C and graphics libraries.  The next day all the code was done...''</ref><ref>{{cite book |chapter-url=https://www.cl.cam.ac.uk/~mgk25/ucs/UTF-8-Plan9-paper.pdf |chapter=Hello World or \u039a\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1 \u03ba\u03cc\u03c3\u03bc\u03b5 or \u3053\u3093\u306b\u3061\u306f \u4e16\u754c |title=Proceedings of the Winter 1993 USENIX Conference |first1=Rob |last1=Pike |first2=Ken |last2=Thompson |year=1993}}</ref> The name is derived from ''Unicode'' (or ''Universal Coded Character Set'') ''Transformation Format{{snd}} 8-bit''.<ref>{{Cite book |title=The Unicode Standard |edition=6.0 |chapter=Chapter 2. General Structure |publisher=[[Unicode Consortium|The Unicode Consortium]] |location=Mountain View, California, US |isbn=978-1-936213-01-6 |chapter-url=https://www.unicode.org/versions/Unicode6.0.0/}}</ref>\n\nIt was designed for [[backward compatibility]] with [[ASCII]]. Code points with lower numerical values, which tend to occur more frequently, are encoded using fewer bytes. The first 128 characters of Unicode, which correspond one-to-one with ASCII, are encoded using a single byte with the same binary value as ASCII, so that valid ASCII text is valid UTF-8-encoded Unicode as well. Since ASCII bytes do not occur when encoding non-ASCII code points into UTF-8, UTF-8 is safe to use within most programming and document languages that interpret certain ASCII characters in a special way, such as \"/\" ([[Slash (punctuation)|slash]]) in filenames, \"\\\" ([[backslash]]) in [[String literal#Escape sequences|escape sequences]], and \"%\" in [[printf]].\n\n[[File:Utf8webgrowth.svg|thumb|right|350px|Usage of the main encodings on the web from 2001 to 2012 as recorded by Google,<ref name=\"MarkDavis2012\">{{cite web |author-last=Davis |author-first=Mark |author-link=Mark Davis (Unicode) |date=2012-02-03 |title=Unicode over 60 percent of the web |work=Official Google Blog |url=https://googleblog.blogspot.com/2012/02/unicode-over-60-percent-of-web.html |access-date=2018-08-09}}</ref> with UTF-8 overtaking all others in 2008 and over 60% of the web in 2012. The ASCII-only figure includes all web pages that only contain ASCII characters, regardless of the declared header.]]\n\nSince 2009, UTF-8 has been the dominant encoding (of any kind, not just of Unicode encodings) for the [[World Wide Web]] (and declared mandatory \"for all things\" by [[WHATWG]]<ref name=\"mandatory\"\n>{{Cite web|url=https://encoding.spec.whatwg.org/#security-background|title=Encoding Standard|website=encoding.spec.whatwg.org|quote=The problems outlined here go away when exclusively using UTF-8, which is one of the many reasons that is now the mandatory encoding for all things.|language=en|access-date=2018-11-15}}\n</ref>) and {{as of|2020|04|lc=y}} <!-- 3rd --> accounts for 94.7% of all web pages (some of which are simply [[US-ASCII|ASCII]], as it is a subset of UTF-8) and 97% <!-- 96.5% --> of the top 1,000 highest ranked<ref>{{Cite web|url=https://w3techs.com/technologies/cross/character_encoding/ranking|title=Usage Survey of Character Encodings broken down by Ranking|website=w3techs.com|language=en|access-date=2020-04-02}}</ref> web pages. \nThe next-most popular multi-byte encodings, are the Chinese {{nowrap|[[GB 2312]]}} and [[GBK (character encoding)|GBK]] with a combined <!-- 0.4% + 0.3% --> 0.7% share, and the Japanese {{nowrap|[[Shift JIS]]}} with 0.2%.<ref name=\"W3Techs\"\n>{{cite web|url=https://w3techs.com/technologies/history_overview/character_encoding|title=Historical trends in the usage of character encodings|publisher=|access-date=2020-04-03}}</ref><ref name=\"BuiltWith\">{{cite web |url=https://trends.builtwith.com/encoding/UTF-8 |title=UTF-8 Usage Statistics |publisher=BuiltWith |access-date=2011-03-28}}\n</ref><ref name=\"MarkDavis2012\"/> The [[Internet Mail Consortium]] (IMC) recommended that all e-mail programs be able to display and create mail using UTF-8,<ref name=\"IMC\"\n>{{cite web |url=https://www.imc.org/mail-i18n.html |title=Using International Characters in Internet Mail |publisher=Internet Mail Consortium |date=1998-08-01 |access-date=2007-11-08 |url-status=dead |archiveurl=https://web.archive.org/web/20071026103104/https://www.imc.org/mail-i18n.html |archivedate=2007-10-26 |df= }}\n</ref> and the [[World Wide Web Consortium|W3C]] recommends UTF-8 as the ''default encoding'' in [[XML]] and [[HTML]].<ref name=\"html5charset\"\n>{{citation |chapter-url=https://www.w3.org/TR/html5/document-metadata.html#charset |chapter=Specifying the document's character encoding |title=HTML5.2 |publisher=[[World Wide Web Consortium]] |date=14 December 2017 |access-date=2018-06-03}}\n</ref> UTF-8 stay as strong [[WHATWG]]'s recommendation in HTML and [[Document Object Model|DOM]] specifications, not changed<ref>https://encoding.spec.whatwg.org/#preface</ref> in 2020 [[HTML#Transition_of_HTML_Publication_to_WHATWG|after transition]].\n\n==Description==\nSince the restriction of the Unicode code-space to 21-bit values in 2003, UTF-8 is defined to encode code points in one to four bytes, depending on the number of significant bits in the numerical value of the code point. The following table shows the structure of the encoding. The {{mono|x}} characters are replaced by the bits of the code point. If the number of significant bits is no more than seven, the first line applies; if no more than 11&nbsp;bits, the second line applies, and so on.\n\n{| class=\"wikitable\"\n!Number<br>of bytes!!Bits for<br>code point!!First<br>code point!!Last<br>code point!!Byte 1!!Byte 2!!Byte 3!!Byte 4\n|-\n| style=\"text-align: center;\" |1\n| style=\"text-align: center;\" |7\n| style=\"text-align: right;\" |U+0000\n| style=\"text-align: right;\" |U+007F\n|{{mono|0xxxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |2\n| style=\"text-align: center;\" |11\n| style=\"text-align: right;\" |U+0080\n| style=\"text-align: right;\" |U+07FF\n|{{mono|110xxxxx}}||{{mono|10xxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |3\n| style=\"text-align: center;\" |16\n| style=\"text-align: right;\" |U+0800\n| style=\"text-align: right;\" |U+FFFF\n|{{mono|1110xxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |4\n| style=\"text-align: center;\" |21\n| style=\"text-align: right;\" |U+10000\n| style=\"text-align: right;\" |U+10FFFF<ref>You might expect larger code points than U+10FFFF to be expressible, but Unicode is limited in Sections 12 of [[rfc:3629#section-12|RFC3629]] to match the limits of UTF-16.</ref>\n|{{mono|11110xxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}\n|}\n\nThe first 128 characters (US-ASCII) need one byte. The next 1,920 characters need two bytes to encode, which covers the remainder of almost all [[Latin-script alphabet]]s, and also [[Greek alphabet|Greek]], [[Cyrillic script|Cyrillic]], [[Coptic alphabet|Coptic]], [[Armenian alphabet|Armenian]], [[Hebrew alphabet|Hebrew]], [[Arabic alphabet|Arabic]], [[Syriac alphabet|Syriac]], [[Thaana]] and [[N'Ko alphabet|N'Ko]] alphabets, as well as [[Combining Diacritical Marks]]. Three bytes are needed for characters in the rest of the [[Basic Multilingual Plane]], which contains virtually all characters in common use,<ref name=\"unicode-ch02-bmp\">{{cite journal |title=The Unicode Standard, Version 6.1 |year=2012 |editor-last1=Allen |editor-first1=Julie D. |editor2-last=Anderson |editor2-first=Deborah |editor3-last=Becker |editor3-first=Joe |editor4-last=Cook |editor4-first=Richard |publisher=Unicode Consortium |place=Mountain View, California |quote=The Basic Multilingual Plane (BMP, or Plane 0) contains the common-use characters for all the modern scripts of the world as well as many historical and rare characters. By far the majority of all Unicode characters for almost all textual data can be found in the BMP.}}</ref> including most [[CJK characters|Chinese, Japanese and Korean characters]]. Four bytes are needed for characters in the [[Plane (Unicode)|other planes of Unicode]], which include less common [[CJK characters]], various historic scripts, mathematical symbols, and [[emoji]] (pictographic symbols).\n\nSome of the important features of this encoding are as follows:\n\n* ''Backward compatibility:'' Backwards compatibility with ASCII and the enormous amount of software designed to process ASCII-encoded text was the main driving force behind the design of UTF-8. In UTF-8, single bytes with values in the range of 0 to 127 map directly to Unicode code points in the ASCII range. Single bytes in this range represent characters, as they do in ASCII. Moreover, 7-bit bytes (bytes where the most significant bit is 0) never appear in a multi-byte sequence, and no valid multi-byte sequence decodes to an ASCII code-point. A sequence of 7-bit bytes is both valid ASCII and valid UTF-8, and under either interpretation represents the same sequence of characters. Therefore, the 7-bit bytes in a UTF-8 stream represent all and only the ASCII characters in the stream. Thus, many text processors, parsers, protocols, file formats, text display programs, etc., which use ASCII characters for formatting and control purposes, will continue to work as intended by treating the UTF-8 byte stream as a sequence of single-byte characters, without decoding the multi-byte sequences. ASCII characters on which the processing turns, such as punctuation, whitespace, and control characters will never be encoded as multi-byte sequences. It is therefore safe for such processors to simply ignore or pass-through the multi-byte sequences, without decoding them. For example, ASCII whitespace may be used to [[tokenize]] a UTF-8 stream into words; ASCII line-feeds may be used to split a UTF-8 stream into lines; and ASCII NUL characters can be used to split UTF-8-encoded data into null-terminated strings. Similarly, many format strings used by library functions like \"printf\" will correctly handle UTF-8-encoded input arguments.\n* {{anchor|fallback and auto-detection}}''Fallback and auto-detection:'' UTF-8 provided backwards compatibility for 7-bit ASCII, but much software and data uses 8-bit [[extended ASCII]] encodings designed prior to the adoption of Unicode to represent the character sets of European languages. Part of the popularity of UTF-8 is due to the fact that it provides a form of backward compatibility for these as well. A UTF-8 processor which erroneously receives an [[extended ASCII]] file as input can \"fall back\" or replace 8-bit bytes using the appropriate code-point in the Unicode [[Latin-1 Supplement]] block, when the 8-bit byte appears outside a valid multi-byte sequence. The bytes in extended ASCII encodings of \u201creal world\u201d text are typically not legal UTF-8 multi-byte sequences. This is because the bytes which ''introduce'' multi-byte sequences in UTF-8 are primarily accented letters (mostly vowels) in the common extended ASCII encodings, and the UTF-8 ''continuation'' bytes are punctuation and symbol characters. To appear as a valid UTF-8 multi-byte sequence, a series of 2 to 4 extended ASCII 8-bit characters would have to be an unusual combination of symbols and accented letters (such as an accented vowel followed immediately by certain punctuation). In short, real-world extended ASCII character sequences which look like valid UTF-8 multi-byte sequences are unlikely. Fallback errors will be false negatives, and these will be rare. Moreover, in many applications, such as text display, the consequence of incorrect fallback is usually slight. Only legibility is affected, and only for a few characters. These two things make fallback feasible, if somewhat imperfect. Indeed, as discussed further below, the [[HTML5]] standard requires that erroneous bytes in supposed UTF-8 data be replaced upon display on the assumption that they are [[Windows-1252]] characters. The presence of invalid 8-bit characters outside valid multi-byte sequences can also be used to \"auto-detect\" that an encoding is actually an extended ASCII encoding rather than UTF-8, and decode it accordingly. A UTF-8 stream may simply contain errors, resulting in the auto-detection scheme producing false positives; but auto-detection is successful in the majority of cases, especially with longer texts, and is widely used.\n* ''[[Prefix code]]:'' The first byte indicates the number of bytes in the sequence. Reading from a stream can instantaneously decode each individual fully received sequence, without first having to wait for either the first byte of a next sequence or an end-of-stream indication. The length of multi-byte sequences is easily determined by humans as it is simply the number of high-order 1s in the leading byte. An incorrect character will not be decoded if a stream ends mid-sequence.\n* ''[[Self-synchronizing code|Self-synchronization]]:'' The leading bytes and the continuation bytes do not share values (continuation bytes start with {{mono|10}} while single bytes start with {{mono|0}} and longer lead bytes start with {{mono|11}}). This means a search will not accidentally find the sequence for one character starting in the middle of another character. It also means the start of a character can be found from a random position by backing up at most 3 bytes to find the leading byte. An incorrect character will not be decoded if a stream starts mid-sequence, and a shorter sequence will never appear inside a longer one.\n* ''Sorting order:'' The chosen values of the leading bytes means that a list of UTF-8 strings can be sorted in code point order by sorting the corresponding byte sequences.\n\n===Examples===\nConsider the encoding of the [[Euro sign]], \u20ac:\n\n# The Unicode code point for \"\u20ac\" is U+20AC.\n# According to the scheme table above, this will take three bytes to encode, since it is between U+0800 and U+FFFF.\n#[[Hexadecimal]] {{mono|20AC}} is binary {{mono|{{fontcolor|blue|0010}} {{fontcolor|green|0000 10}}{{fontcolor|red|10 1100}}}}. The two leading zeros are added because, as the scheme table shows, a three-byte encoding needs exactly sixteen bits from the code point.\n# Because the encoding will be three bytes long, its leading byte starts with three 1s, then a 0 ({{mono|1110...}})\n# The four most significant bits of the code point are stored in the remaining low order four bits of this byte ({{mono|1110 {{fontcolor|blue|0010}}}}), leaving 12 bits of the code point yet to be encoded ({{mono|...{{fontcolor|green|0000 10}}{{fontcolor|red|10 1100}}}}).\n# All continuation bytes contain exactly six bits from the code point. So the next six bits of the code point are stored in the low order six bits of the next byte, and {{mono|10}} is stored in the high order two bits to mark it as a continuation byte (so {{mono|10{{fontcolor|green|00 0010}}}}).\n# Finally the last six bits of the code point are stored in the low order six bits of the final byte, and again {{mono|10}} is stored in the high order two bits ({{mono|10{{fontcolor|red|10 1100}}}}).\n\nThe three bytes {{mono|1110 {{fontcolor|blue|0010}}}} {{mono|10{{fontcolor|green|00 0010}}}} {{mono|10{{fontcolor|red|10 1100}}}} can be more concisely written in [[hexadecimal]], as {{mono|{{fontcolor|blue|E2}} {{fontcolor|green|82}} {{fontcolor|red|AC}}}}.\n\nThe following table summarises this conversion, as well as others with different lengths in UTF-8. The colors indicate how bits from the code point are distributed among the UTF-8 bytes. Additional bits added by the UTF-8 encoding process are shown in black.\n\n{| class=\"wikitable\"\n|-\n! colspan=2 rowspan=2 | Character\n! colspan=2 | Code point\n! colspan=3 | UTF-8\n|-\n! Octal\n! Binary\n! Binary\n! Octal\n! Hexadecimal\n|-\n|[[$]] || {{mono|U+0024}}\n|align=left|{{mono|{{fontcolor|red|044}}}}\n|align=right|{{mono|{{fontcolor|red|010 0100}}}}\n|align=left|{{mono|0{{fontcolor|red|0100100}}}}\n|align=left|{{mono|{{fontcolor|red|044}}}}\n|align=left|{{mono|{{fontcolor|red|24}}}}\n|-\n|[[\u00a2]] || {{mono|U+00A2}}\n|align=left|{{mono|{{fontcolor|green|02}}{{fontcolor|red|42}}}}\n|align=right|{{mono|{{fontcolor|green|000 10}}{{fontcolor|red|10 0010}}}}\n|align=left|{{mono|110{{fontcolor|green|00010}} 10{{fontcolor|red|100010}}}}\n|align=left|{{mono|3{{fontcolor|green|02}} 2{{fontcolor|red|42}}}}\n|align=left|{{mono|{{fontcolor|green|C2}} {{fontcolor|red|A2}}}}\n|-\n|[[Devanagari (Unicode block)|\u0939]] || {{mono|U+0939}}\n|align=left|{{mono|{{fontcolor|blue|00}}{{fontcolor|green|44}}{{fontcolor|red|71}}}}\n|align=right|{{mono|{{fontcolor|blue|0000}} {{fontcolor|green|1001 00}}{{fontcolor|red|11 1001}}}}\n|align=left|{{mono|1110{{fontcolor|blue|0000}} 10{{fontcolor|green|100100}} 10{{fontcolor|red|111001}}}}\n|align=left|{{mono|34{{fontcolor|blue|0}} 2{{fontcolor|green|44}} 2{{fontcolor|red|71}}}}\n|align=left|{{mono|{{fontcolor|blue|E0}} {{fontcolor|green|A4}} {{fontcolor|red|B9}}}} \n|-\n|[[Euro sign|\u20ac]] || {{mono|U+20AC}}\n|align=left|{{mono|{{fontcolor|blue|02}}{{fontcolor|green|02}}{{fontcolor|red|54}}}}\n|align=right|{{mono|{{fontcolor|blue|0010}} {{fontcolor|green|0000 10}}{{fontcolor|red|10 1100}}}}\n|align=left|{{mono|1110{{fontcolor|blue|0010}} 10{{fontcolor|green|000010}} 10{{fontcolor|red|101100}}}}\n|align=left|{{mono|34{{fontcolor|blue|2}} 2{{fontcolor|green|02}} 2{{fontcolor|red|54}}}}\n|align=left|{{mono|{{fontcolor|blue|E2}} {{fontcolor|green|82}} {{fontcolor|red|AC}}}}\n|-\n|[[Hangul Syllables|\ud55c]] || {{mono|U+D55C}}\n|align=left|{{mono|{{fontcolor|blue|15}}{{fontcolor|green|25}}{{fontcolor|red|34}}}}\n|align=right|{{mono|{{fontcolor|blue|1101}} {{fontcolor|green|0101 01}}{{fontcolor|red|01 1100}}}}\n|align=left|{{mono|1110{{fontcolor|blue|1101}} 10{{fontcolor|green|010101}} 10{{fontcolor|red|011100}}}}\n|align=left|{{mono|35{{fontcolor|blue|5}} 2{{fontcolor|green|25}} 2{{fontcolor|red|34}}}}\n|align=left|{{mono|{{fontcolor|blue|ED}} {{fontcolor|green|95}} {{fontcolor|red|9C}}}}\n|-\n|[[Hwair|\ud800\udf48]] || {{mono|U+10348}}\n|align=left|{{mono|{{fontcolor|#C000C0|0}}{{fontcolor|blue|20}}{{fontcolor|green|15}}{{fontcolor|red|10}}}}\n|align=right|{{mono|{{fontcolor|#C000C0|0 00}}{{fontcolor|blue|01 0000}} {{fontcolor|green|0011 01}}{{fontcolor|red|00 1000}}}}\n|align=left|{{mono|11110{{fontcolor|#C000C0|000}} 10{{fontcolor|blue|010000}} 10{{fontcolor|green|001101}} 10{{fontcolor|red|001000}}}}\n|align=left|{{mono|36{{fontcolor|#C000C0|0}} 2{{fontcolor|blue|20}} 2{{fontcolor|green|15}} 2{{fontcolor|red|10}}}}\n|align=left|{{mono|{{fontcolor|#C000C0|F0}} {{fontcolor|blue|90}} {{fontcolor|green|8D}} {{fontcolor|red|88}}}}\n|}\nSince UTF-8 uses groups of six bits, it is sometimes useful to use [[octal]] notation which uses 3-bit groups. With a calculator which can convert between hexadecimal and octal it can be easier to manually create or interpret UTF-8 compared with using binary.\n\n* Octal 0\u2013177 (hex 0\u20137F) is coded with an unchanged single byte.\n* Octal 0200\u20133777 (hex 80\u20137FF) shall be coded with two bytes. xxyy will be 3xx 2yy.\n* Octal 4000\u201377777 (hex 800\u20137FFF) shall be coded with three bytes. xyyzz will be 34x 2yy 2zz.\n* Octal 100000\u2013177777 (hex 8000\u2013FFFF) shall be coded with three bytes. 1xyyzz will be 35x 2yy 2zz.\n* Octal 200000\u20134177777 (hex 10000\u201310FFFF) shall be coded with four bytes. wxxyyzz will be 36w 2xx 2yy 2zz.\nWhen converting UTF-8 into code points, the following rules apply:\n* Octal 302\u2013337 is the first of two bytes. 3xx 2yy will be xxyy in octal.\n* Octal 340\u2013347 is the first of three bytes. 34x 2yy 2zz will be xyyzz.\n* Octal 350\u2013357 is the first of three bytes. 35x 2yy 2zz will be 1xyyzz.\n* Octal 360\u2013364 is the first of four bytes. 36w 2xx 2yy 2zz will be wxxyyzz.\n* Octal 200\u2013277 are continuation bytes, and others beginning with 3 are invalid.\n\n===Codepage layout===\nThe following table summarizes usage of UTF-8 ''code units'' (individual bytes or octets) in a ''code'' page format. The upper half ({{mono|0_}} to {{mono|7_}}) is for bytes used only in single-byte codes, so it looks like a normal code page; the lower half is for continuation bytes ({{mono|8_}} to {{mono|B_}}) and leading bytes ({{mono|C_}} to {{mono|F_}}), and is explained further in the legend below.\n{| {{chset-tableformat}}\n{{chset-table-header|UTF-8}}\n|-\n!{{chset-left|0}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0000|[[Null character|NUL]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0001|[[Start of heading|SOH]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0002|[[Start of text|STX]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0003|[[End of text|ETX]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0004|[[End of transmission character|EOT]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0005|[[Enquiry character|ENQ]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0006|[[Acknowledge character|ACK]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0007|[[Bell character|BEL]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0008|[[Backspace|BS]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0009|[[Tab key|HT]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|000A|[[Line feed|LF]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|000B|[[Vertical tab|VT]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|000C|[[Form feed|FF]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|000D|[[Carriage return|CR]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|000E|[[Shift out|SO]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|000F|[[Shift in|SI]]}}\n|-\n!{{chset-left|1}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0010|[[Data link escape|DLE]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0011|[[Device Control 1|DC1]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0012|[[Device Control 2|DC2]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0013|[[Device Control 3|DC3]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0014|[[Device Control 4|DC4]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0015|[[Negative-acknowledge character|NAK]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0016|[[Synchronous idle|SYN]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0017|[[End of transmission block|ETB]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0018|[[Cancel character|CAN]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0019|[[End of medium|EM]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|001A|[[Substitute character|SUB]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|001B|[[Escape character|ESC]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|001C|[[File separator|FS]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|001D|[[Group separator|GS]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|001E|[[Record separator|RS]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|001F|[[Unit separator|US]]}}\n|-\n\n!{{chset-left|2}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|0020|[[space character|SP]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0021|[[Exclamation mark|!]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0022|[[Quotation mark|&#x22;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0023|[[Number sign|#]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0024|[[Dollar sign|$]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0025|[[Percent sign|%]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0026|[[Ampersand|&amp;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0027|[[Apostrophe|&#x27;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0028|[[Parenthesis|(]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0029|[[Parenthesis|)]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|002A|[[Asterisk|*]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|002B|[[Plus sign|+]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|002C|[[Comma (punctuation)|,]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|002D|[[Minus sign|-]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|002E|[[Full stop|.]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|002F|[[Slash (punctuation)|/]]}}\n|-\n!{{chset-left|3}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0030|[[0]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0031|[[1]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0032|[[2]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0033|[[3]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0034|[[4]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0035|[[5]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0036|[[6]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0037|[[7]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0038|[[8]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0039|[[9]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|003A|[[colon (punctuation)|&#x3A;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|003B|[[semicolon|&#x3B;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|003C|[[less-than sign|&#x3C;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|003D|[[equals sign|&#x3D;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|003E|[[greater-than sign|&#x3E;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|003F|[[question mark|&#x3F;]]}}\n|-\n!{{chset-left|4}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0040|[[@]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0041|[[A]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0042|[[B]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0043|[[C]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0044|[[D]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0045|[[E]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0046|[[F]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0047|[[G]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0048|[[H]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0049|[[I]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|004A|[[J]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|004B|[[K]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|004C|[[L]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|004D|[[M]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|004E|[[N]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|004F|[[O]]}}\n|-\n!{{chset-left|5}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0050|[[P]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0051|[[Q]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0052|[[R]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0053|[[S]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0054|[[T]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0055|[[U]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0056|[[V]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0057|[[W]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0058|[[X]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0059|[[Y]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|005A|[[Z]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|005B|[[Square brackets|&#x5B;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|005C|[[Backslash|&#x5C;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|005D|[[Square brackets|&#x5D;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|005E|[[Caret|^]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|005F|[[Underscore|_]]}}\n|-\n!{{chset-left|6}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0060|[[Grave accent|`]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0061|[[a]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0062|[[b]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0063|[[c]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0064|[[d]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0065|[[e]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0066|[[f]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0067|[[g]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0068|[[h]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0069|[[i]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|006A|[[j]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|006B|[[k]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|006C|[[l]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|006D|[[m]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|006E|[[n]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|006F|[[o]]}}\n|-\n!{{chset-left|7}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0070|[[p]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0071|[[q]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0072|[[r]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0073|[[s]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0074|[[t]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0075|[[u]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0076|[[v]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0077|[[w]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0078|[[x]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|0079|[[y]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|007A|[[z]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|007B|[[Curly brackets|&#x7b;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|007C|[[Vertical bar|&#x7C;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|007D|[[Curly brackets|&#x7d;]]}}\n| style=\"background:#d1f4ff;\"|{{chset-cell|007E|[[Tilde|~]]}}\n| style=\"background:#d1f4ff;\"|{{chset-ctrl|007F|[[Delete character|DEL]]}}\n|-\n!{{chset-left|8}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+00|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+01|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+02|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+03|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+04|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+05|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+06|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+07|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+08|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+09|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+0A|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+0B|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+0C|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+0D|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+0E|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+0F|\u2022}}\n|-\n!{{chset-left|9}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+10|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+11|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+12|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+13|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+14|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+15|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+16|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+17|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+18|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+19|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+1A|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+1B|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+1C|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+1D|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+1E|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+1F|\u2022}}\n|-\n!{{chset-left|A}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+20|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+21|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+22|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+23|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+24|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+25|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+26|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+27|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+28|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+29|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+2A|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+2B|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+2C|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+2D|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+2E|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+2F|\u2022}}\n|-\n!{{chset-left|B}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+30|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+31|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+32|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+33|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+34|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+35|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+36|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+37|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+38|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+39|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+3A|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+3B|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+3C|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+3D|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+3E|\u2022}}\n| style=\"background:#ffcc88;\"|{{chset-cell|+3F|\u2022}}\n|-\n!{{chset-left|2<br>C}}\n| style=\"background:#f00;\"|{{chset-ctrl|0000|2}}\n| style=\"background:#f00;\"|{{chset-ctrl|0040|2}}\n| style=\"background:#fff;\"|{{chset-ctrl|0080|[[C1 Controls and Latin-1 Supplement|Latin]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|00C0|[[C1 Controls and Latin-1 Supplement|Latin]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0100|[[Latin Extended-A|Latin]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0140|[[Latin Extended-A|Latin]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0180|[[Latin Extended-B|Latin]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|01C0|[[Latin Extended-B|Latin]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0200|[[Latin Extended-B|Latin]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0240|[[IPA Extensions (Unicode block)|IPA]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0280|[[IPA Extensions (Unicode block)|IPA]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|02C0|[[Unicode Phonetic Symbols#Spacing Modifier Letters (U+02B0\u201302FF)|IPA]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0300|[[Combining character|accents]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0340|[[Combining character|accents]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0380|[[Greek characters in Unicode|Greek]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|03C0|[[Greek characters in Unicode|Greek]]}}\n|-\n!{{chset-left|2<br>D}}\n| style=\"background:#fff;\"|{{chset-ctrl|0400|[[Cyrillic (Unicode block)|Cyril]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0440|[[Cyrillic (Unicode block)|Cyril]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0480|[[Cyrillic (Unicode block)|Cyril]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|04C0|[[Cyrillic (Unicode block)|Cyril]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0500|[[Cyrillic (Unicode block)|Cyril]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0540|[[Armenian alphabet|Armeni]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0580|[[Unicode and HTML for the Hebrew alphabet|Hebrew]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|05C0|[[Unicode and HTML for the Hebrew alphabet|Hebrew]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0600|[[Arabic (Unicode block)|Arabic]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0640|[[Arabic (Unicode block)|Arabic]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0680|[[Arabic (Unicode block)|Arabic]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|06C0|[[Arabic (Unicode block)|Arabic]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0700|[[Syriac (Unicode block)|Syriac]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0740|[[Arabic Supplement|Arabic]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|0780|[[Thaana (Unicode block)|Thaana]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|07C0|[[NKo (Unicode block)|N'Ko]]}}\n|-\n!{{chset-left|3<br>E}}\n| style=\"background:#fcc;\"|{{chset-ctrl|0800|Indic}}\n| style=\"background:#fff;\"|{{chset-ctrl|1000|Misc.}}\n| style=\"background:#fff;\"|{{chset-ctrl|2000|Symbol}}\n| style=\"background:#fff;\"|{{chset-ctrl|3000|[[Kana]]\u2026}}\n| style=\"background:#fff;\"|{{chset-ctrl|4000|[[CJK Unified Ideographs|CJK]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|5000|[[CJK Unified Ideographs|CJK]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|6000|[[CJK Unified Ideographs|CJK]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|7000|[[CJK Unified Ideographs|CJK]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|8000|[[CJK Unified Ideographs|CJK]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|9000|[[CJK Unified Ideographs|CJK]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|A000|Asian}}\n| style=\"background:#fff;\"|{{chset-ctrl|B000|[[Hangul]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|C000|[[Hangul]]}}\n| style=\"background:#fcc;\"|{{chset-ctrl|D000|[[Hangul]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|E000|[[Private Use Area|PUA]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|F000|Forms}}\n|-\n!{{chset-left|4<br>F}}\n| style=\"background:#fcc;\"|{{chset-ctrl|10000|[[Supplementary Multilingual Plane|SMP\u2026]]}}\n| style=\"background:#fff;\"|{{chset-ctrl|40000|}}\n| style=\"background:#fff;\"|{{chset-ctrl|80000|}}\n| style=\"background:#fff;\"|{{chset-ctrl|C0000|[[Supplementary Special-purpose Plane|SSP\u2026]]}}\n| style=\"background:#fcc;\"|{{chset-ctrl|100000|[[Private Use Area|SPU\u2026]]}}\n| style=\"background:#f00;\"|{{chset-ctrl|140000|4}}\n| style=\"background:#f00;\"|{{chset-ctrl|180000|4}}\n| style=\"background:#f00;\"|{{chset-ctrl|1C0000|4}}\n| style=\"background:#f00;\"|{{chset-ctrl|200000|5}}\n| style=\"background:#f00;\"|{{chset-ctrl|1000000|5}}\n| style=\"background:#f00;\"|{{chset-ctrl|2000000|5}}\n| style=\"background:#f00;\"|{{chset-ctrl|3000000|5}}\n| style=\"background:#f00;\"|{{chset-ctrl|4000000|6}}\n| style=\"background:#f00;\"|{{chset-ctrl|{{sc2|40000000}}|6}}\n| style=\"background:#f00;\"|\n| style=\"background:#f00;\"|\n|}\n<!-- See https://en.wikipedia.org/wiki/Template:Chset-tableformat -->\n\n{{colorbox|#d1f4ff}}{{nbsp}}Blue cells are 7-bit (single-byte) sequences. They must not be followed by a continuation byte.\n\n{{colorbox|#ffcc88}}{{nbsp}}Orange cells with a large dot are continuation bytes. The hexadecimal number shown after the {{mono|+}} symbol is the value of the 6 bits they add.\n\n{{colorbox|#fff}}{{nbsp}}White cells are the leading bytes for a sequence of multiple bytes, the length shown at the left edge of the row. The text shows the Unicode blocks encoded by sequences starting with this byte, and the hexadecimal code point shown in the cell is the lowest character value encoded using that leading byte.\n\n{{colorbox|red}}{{nbsp}}Red cells must never appear in a valid UTF-8 sequence. The first two red cells ({{mono|C0}} and {{mono|C1}}) could be used only for a 2-byte encoding of a 7-bit ASCII character which should be encoded in 1 byte; as described below, such \"overlong\" sequences are disallowed. The red cells in the {{mono|F_}} row ({{mono|F5}} to {{mono|FD}}) indicate leading bytes of 4-byte or longer sequences that cannot be valid because they would encode code points larger than the U+10FFFF limit of Unicode (a limit derived from the maximum code point encodable in [[UTF-16]]), and {{mono|FE}} and {{mono|FF}} were never defined for any purpose in UTF-8.\n\n{{colorbox|#fcc}}{{nbsp}}Pink cells are the leading bytes for a sequence of multiple bytes, of which some, but not all, possible continuation sequences are valid. {{mono|E0}} and {{mono|F0}} could start overlong encodings, in this case the lowest non-overlong-encoded code point is shown. {{mono|F4}} can start code points greater than U+10FFFF which are invalid. {{mono|ED}} can start the encoding of a code point in the range U+D800\u2013U+DFFF; these are invalid since they are reserved for UTF-16 [[Universal Character Set characters#Surrogates|surrogate halves]].\n\n===Overlong encodings===\nIn principle, it would be possible to inflate the number of bytes in an encoding by padding the code point with leading 0s. To encode the Euro sign \u20ac from the above example in four bytes instead of three, it could be padded with leading 0s until it was 21&nbsp;bits long{{snd}} {{mono|000 000010 000010 101100}}, and encoded as {{mono|11110{{fontcolor|#C000C0|000}}}} {{mono|10{{fontcolor|blue|000010}}}} {{mono|10{{fontcolor|green|000010}}}} {{mono|10{{fontcolor|red|101100}}}} (or {{mono|{{fontcolor|#C000C0|F0}}}} {{mono|{{fontcolor|blue|82}}}} {{mono|{{fontcolor|green|82}}}} {{mono|{{fontcolor|red|AC}}}} in hexadecimal). This is called an ''overlong encoding''.\n\nThe standard specifies that the correct encoding of a code point use only the minimum number of bytes required to hold the significant bits of the code point. Longer encodings are called ''overlong'' and are not valid UTF-8 representations of the code point. This rule maintains a one-to-one correspondence between code points and their valid encodings, so that there is a unique valid encoding for each code point. This ensures that string comparisons and searches are well-defined.\n\n[[#Modified UTF-8|Modified UTF-8]] uses the two-byte overlong encoding of U+0000 (the [[Null character|NUL character]]) as {{mono|110{{fontcolor|green|00000}}}} {{mono|10{{fontcolor|red|000000}}}} (hexadecimal {{mono|{{fontcolor|green|C0}}}} {{mono|{{fontcolor|red|80}}}}) instead of {{mono|00000000}} (hexadecimal {{mono|00}}). This allows the byte {{mono|00}} to be used as a [[null-terminated string|string terminator]].\n\n===Invalid byte sequences===\nNot all sequences of bytes are valid UTF-8. A UTF-8 decoder should be prepared for:\n\n* the red invalid bytes in the above table\n* an unexpected continuation byte\n* a non-continuation byte before the end of the character\n* the string ending before the end of the character (which can happen in simple string truncation)\n* an overlong encoding as described above\n* a sequence that decodes to an invalid code point as described below\n\nMany of the first UTF-8 decoders would decode these, ignoring incorrect bits and accepting overlong results. Carefully crafted invalid UTF-8 could make them either skip or create ASCII characters such as NUL, slash, or quotes. Invalid UTF-8 has been used to bypass security validations in high-profile products including Microsoft's [[Internet Information Services|IIS]] web server<ref name=\"MS00-078\">{{cite web |url=https://www.sans.org/resources/malwarefaq/wnt-unicode.php |author-first=Marvin |author-last=Marin |title=Web Server Folder Traversal MS00-078 |date=2000-10-17}}</ref> and Apache's Tomcat servlet container.<ref name=\"CVE-2008-2938\">{{cite web |url=https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2008-2938 |title=National Vulnerability Database \u2013 Summary for CVE-2008-2938}}</ref> <nowiki>RFC 3629</nowiki> states \"Implementations of the decoding algorithm MUST protect against decoding invalid sequences.\"<ref name=\"rfc3629\">{{Cite RFC |author-first=F. |author-last=Yergeau |title=RFC 3629 \u2013 UTF-8, a transformation format of ISO 10646 |publisher=[[Internet Engineering Task Force]] |year=2003 |url=https://tools.ietf.org/html/rfc3629 |access-date=2015-02-03}}</ref> ''The Unicode Standard'' requires decoders to \"...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence.\"<!--anyone have a copy of ISO/IEC 10646-1:2000 annex D for comparison?-->\n\nSome implementations of decoders throw exceptions on errors.<ref>[https://docs.oracle.com/javase/8/docs/api/java/io/DataInput.html Java's DataInput IO Interface]</ref> This has the disadvantage that it can turn what would otherwise be harmless errors (such as a \"no such file\" error) into a [[denial of service]]. For instance early versions of Python 3.0 would exit immediately if the command line or [[environment variable]]s contained invalid UTF-8.<ref name=\"PEP383\">{{cite web |url=https://www.python.org/dev/peps/pep-0383/ |title=Non-decodable Bytes in System Character Interfaces |date=2009-04-22 |access-date=2014-08-13 |website=python.org}}</ref>\n\nAn alternative practice is to replace errors with a replacement character. Replacement requires defining how many bytes are in the error:\n* Using the length defined by the lead byte (so that {{mono|E1,A0,C0}} is one error) is a bad idea, as a missing byte will cause the next character to become an error as well.\n* Since Unicode 6<ref>{{Cite web | url=https://www.unicode.org/versions/Unicode6.0.0/ | title=Unicode 6.0.0}}</ref> (October 2010), the standard (chapter 3) has \u201crecommended\u201d a \"best practice\" where the error ends as soon as a disallowed byte is encountered. In these decoders {{mono|E1,A0,C0}} is two errors (2 bytes in the first one). This means an error is no more than three bytes long and never contains the start of a valid character, and there are 21,952 different possible errors.<ref>128 1-byte, (16+5)\u00d764 2-byte, and 5\u00d764\u00d764 3-byte. There may be somewhat fewer if more precise tests are done for each continuation byte.</ref> The standard also recommends replacing each error with the [[Specials (Unicode block)#Replacement character|replacement character]] \"\ufffd\" (U+FFFD).\n* Another popular practice is to turn each byte into an error. In this case {{mono|E1,A0,C0}} is three errors. This requires the UTF-8 parser to back up 2 bytes when an error is detected. The primary advantage is that there are now only 128 different errors. This allows the decoder to define 128 different error replacements such as:\n** The invalid Unicode code points U+DC80\u2013U+DCFF where the low eight bits are the byte's value.<ref name=\"Kuhn2000\">{{cite web |url=http://permalink.gmane.org/gmane.comp.internationalization.linux/920|archiveurl=https://archive.fo/20150315055005/http://permalink.gmane.org/gmane.comp.internationalization.linux/920|archivedate=2015-03-15|title=Substituting malformed UTF-8 sequences in a decoder |date=2000-07-23 |access-date=2014-09-25 |author-first=Markus |author-last=Kuhn |author-link=Markus Kuhn (computer scientist)}}</ref> Sometimes it is called UTF-8B.<ref name=\"Sittler2006\">{{cite web|url=http://bsittler.livejournal.com/10381.html |title=Binary vs. UTF-8, and why it need not matter |date=2006-04-02 |access-date=2014-09-25 |author-first=B. |author-last=Sittler |url-status=dead |archiveurl=https://web.archive.org/web/20140723192908/http://bsittler.livejournal.com/10381.html |archivedate=2014-07-23 |df= }}</ref> <!-- Python 3.0 error replacement value --> This has the nice property that it makes invalid UTF-8 into invalid UTF-16.\n** The Unicode code points U+0080\u2013U+00FF with the same value as the byte, thus interpreting the bytes according to [[ISO/IEC 8859-1|ISO-8859-1]]{{Citation needed |date=August 2014}}<!-- very common in Linux and OS/X text rendering --> Care must be taken so that the [[C1 control codes]] such as [[Newline|NEL]] 0x0085 do not cause further code to misbehave.\n** The Unicode code point for the character represented by the byte in [[Windows-1252|CP1252]],{{Citation needed |date=August 2014}}<!-- Most modern browsers --> which is similar to using ISO-8859-1, except most bytes in the range 0x80\u20130x9F turn into printing characters. For example, 0x80 becomes the Euro sign, U+20AC. This makes text where legacy encodings are mixed with UTF-8 readable, and thus it is commonly done in browsers.\n\nThe large number of invalid byte sequences provides the advantage of making it easy to have a program accept both UTF-8 and legacy encodings such as ISO-8859-1. Software can check for UTF-8 correctness, and if that fails assume the input to be in the legacy encoding. It is technically true that this may detect an ISO-8859-1 string as UTF-8, but this is very unlikely if it contains any 8-bit bytes as they ''all'' have to be in unusual patterns of two or more in a row, such as \"\u00c2\u00a3\".\n\n===Invalid code points===\nSince RFC 3629 (November 2003), the high and low surrogate halves used by [[UTF-16]] (U+D800 through U+DFFF) and code points not encodable by UTF-16 (those after U+10FFFF) are not legal Unicode values, and their UTF-8 encoding must be treated as an invalid byte sequence.\n\nNot decoding unpaired surrogate halves makes it impossible to store invalid UTF-16 (such as Windows filenames or UTF-16 that has been split between the surrogates) as UTF-8. To preserve these invalid UTF-16 sequences, their corresponding UTF-8 encodings are sometimes allowed by implementations despite the above rule. There are attempts to define this behavior formally (see WTF-8 and CESU below).\n\n===Byte order mark===\n{{Main|Byte order mark}}<!-- but several statements here are ''not'' (yet) mentioned in the main article! -->\n\nMany [[Microsoft Windows|Windows]] programs (including older versions of Windows [[Notepad (Windows)|Notepad]]) add the bytes {{mono|0xEF}}, {{mono|0xBB}}, {{mono|0xBF}} at the start of any document saved as UTF-8. This is the UTF-8 encoding of the Unicode [[byte order mark]] (BOM), and is commonly referred to as a UTF-8 BOM, even though byte order is irrelevant to UTF-8. While ASCII text encoded using UTF-8 normally is backwards compatible with ASCII, this is not true when Unicode Standard recommendations are ignored and a BOM is added. Non-UTF-8 software may show the BOM as three garbage characters, e.g. \"{{mono|\u00ef\u00bb\u00bf}}\" in software interpreting the document as [[ISO 8859-1]] or [[Windows-1252]], and \"{{mono|\u2229\u2557\u2510}}\" if interpreted as [[code page 437]]. This is an example of [[mojibake]], the output of garbled text when text is  decoded using an unintended character encoding.\n\nThe Unicode Standard neither requires nor recommends the use of the BOM for UTF-8, but warns that it may be encountered at the start of a file transcoded from another encoding.<ref>{{cite web |url=https://www.unicode.org/versions/Unicode6.0.0/ch02.pdf |title=The Unicode Standard \u2013 Chapter 2 |page=30}}</ref> The presence of the UTF-8 BOM may cause problems with existing software that can handle UTF-8, for example:\n\n* Programming language parsers not explicitly designed for UTF-8 can often handle UTF-8 in string constants and comments, but cannot parse the UTF-8 BOM at the start of the file. <!-- Any program that does not change bytes with the high bit set in a quoted string is UTF-8 compatible -->\n* Programs that identify file types by leading characters may fail to identify the file if a UTF-8 BOM is present even if the user of the file can handle the BOM. An example is the Unix [[Shebang (Unix)|shebang]] syntax, another is [[Internet Explorer]] which will render pages in standards mode only when it starts with a [[document type declaration]].{{Citation needed|reason=Which IE versions?|date=December 2016}}\n* Programs that insert information at the start of a file will break use of the BOM to identify UTF-8 (one example is [[offline browser]]s that add the originating URL to the start of the file{{Citation needed|reason=Which ones? All or most?|date=December 2016}}).\n\nNonetheless, some software such as text editors will refuse to correctly display or interpret UTF-8 unless the text starts with a byte order mark or it contains only ASCII.{{Citation needed|reason=Which software?|date=October 2019}}\n\n===Official name and variants===\nThe official [[Internet Assigned Numbers Authority]] (IANA) code for the encoding is \"UTF-8\".<ref name=\"IANA_2013_CS\"/> All letters are upper-case, and the name is hyphenated. This spelling is used in all the Unicode Consortium documents relating to the encoding.\n\nAlternatively, the name \"utf-8\" may be used by all standards conforming to the IANA list (which include [[Cascading Style Sheets|CSS]], [[HTML]], [[XML]], and [[List of HTTP headers|HTTP headers]]),<ref>{{cite web |url=https://www.w3.org/International/O-HTTP-charset |publisher=[[W3C]] |title=Setting the HTTP charset parameter |author-first=Martin |author-last=D\u00fcrst |access-date=2013-02-08}}</ref> as the declaration is case insensitive.<ref name=\"IANA_2013_CS\">{{cite web |publisher=[[Internet Assigned Numbers Authority]] |url=https://www.iana.org/assignments/character-sets |title=Character Sets |date=2013-01-23 |access-date=2013-02-08}}</ref>\n\nOther descriptions, such as those that omit the hyphen or replace it with a space, i.e. \"utf8\" or \"UTF 8\", are not accepted as correct by the governing standards.<ref name=\"rfc3629\"/> Despite this, most agents such as browsers can understand them, and so standards intended to describe existing practice (such as HTML5) may effectively require their recognition.<ref>{{cite web|url=https://encoding.spec.whatwg.org/#names-and-labels|title=Encoding Standard \u00a7 4.2. Names and labels|publisher=[[WHATWG]]|access-date=2018-04-29}}</ref>\n\nUnofficially, UTF-8-BOM and UTF-8-NOBOM are sometimes used to refer to text files which respectively contain and lack a [[byte order mark]] (BOM).{{citation needed|date=March 2016}} In Japan especially, UTF-8 encoding without BOM is sometimes called \"UTF-8N\".<ref>{{cite web |url=https://suika.fam.cx/~wakaba/wiki/sw/n/BOM |title=BOM \u2013 suikawiki |access-date=2013-04-26 |language=Japanese}}</ref><ref>{{cite web |author-last=Davis |author-first=Mark |author-link=Mark Davis (Unicode) |title=Forms of Unicode |publisher=[[IBM]] |url=https://www-128.ibm.com/developerworks/library/utfencodingforms/index.html |access-date=2013-09-18 |archive-url=https://web.archive.org/web/20050506211548/https://www-128.ibm.com/developerworks/library/utfencodingforms/index.html |archive-date=2005-05-06}}</ref>\n\nSupported Windows versions, i.e. [[Windows 7]] and later, have [[Windows code page|codepage]] 65001, as a synonym for UTF-8 (with better support than in older Windows),<ref>{{Cite web|url=https://www.dostips.com/forum/viewtopic.php?t=5357|title=UTF-8 codepage 65001 in Windows 7 - part I - DosTips.com|quote=it looks like Win7 silently enhanced support for codepage 65001. Significant limitations do remain - in particular redirection and piping still fail under codepage 65001. Nevertheless, the added support opens up some new exciting possibilities.|website=www.dostips.com|author=Liviu|language=en-gb|date=2014-02-07|access-date=2018-01-30}}</ref> and Microsoft has a script for [[Windows 10]], to enable it by default for its program [[Microsoft Notepad]].<ref>{{Cite web|url=https://gallery.technet.microsoft.com/scriptcenter/How-to-set-default-2d9669ae?ranMID=24542&ranEAID=TnL5HPStwNw&ranSiteID=TnL5HPStwNw-1ayuyj6iLWwQHN_gI6Np_w&tduid=(1f29517b2ebdfe80772bf649d4c144b1)(256380)(2459594)(TnL5HPStwNw-1ayuyj6iLWwQHN_gI6Np_w)()|title=Script How to set default encoding to UTF-8 for notepad by PowerShell|website=gallery.technet.microsoft.com|language=en-US|access-date=2018-01-30}}</ref>\n\nIn [[Printer Command Language|PCL]], UTF-8 is called Symbol-ID \"18N\" (PCL supports 183 character encodings, called Symbol Sets, which potentially could be reduced to one, 18N, that is UTF-8).<ref>{{Cite web|url=http://pclhelp.com/pcl-symbol-sets/|archive-url=https://web.archive.org/web/20150219212843/http://pclhelp.com/pcl-symbol-sets/|url-status=dead|archive-date=2015-02-19|title=HP PCL Symbol Sets {{!}} Printer Control Language (PCL & PXL) Support Blog|date=2015-02-19|access-date=2018-01-30}}</ref>\n\n=={{anchor|FSS-UTF}}History==\nBy early 1992, the search was on for a good byte-stream encoding of multi-byte character sets. The draft [[Universal Coded Character Set|ISO 10646]] standard contained a non-required [[Addendum|annex]] called [[UTF-1]] that provided a byte stream encoding of its [[32-bit]] code points. This encoding was not satisfactory on performance grounds, among other problems, and the biggest problem was probably that it did not have a clear separation between ASCII and non-ASCII: new UTF-1 tools would be backward compatible with ASCII-encoded text, but UTF-1-encoded text could confuse existing code expecting ASCII (or [[extended ASCII]]), because it could contain continuation bytes in the range 0x21\u20130x7E that meant something else in ASCII, e.g., 0x2F for '/', the [[Unix]] [[Path (computing)|path]] directory separator, and this example is reflected in the name and introductory text of its replacement. The table below was derived from a textual description in the annex.\n\n{| class=\"wikitable\"\n|+[[UTF-1]]\n|-\n!Number<br>of bytes!!First<br>code point!!Last<br>code point!!Byte 1!!Byte 2!!Byte 3!!Byte 4!!Byte 5\n|-\n| style=\"text-align: center;\" |1\n| style=\"text-align: right;\" |U+0000\n| style=\"text-align: right;\" |U+009F\n| style=\"text-align: center;\" |00\u20139F\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |2\n| style=\"text-align: right;\" |U+00A0\n| style=\"text-align: right;\" |U+00FF\n| style=\"text-align: center;\" |A0\n| style=\"text-align: right;\" |A0\u2013FF\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |2\n| style=\"text-align: right;\" |U+0100\n| style=\"text-align: right;\" |U+4015\n| style=\"text-align: center;\" |A1\u2013F5\n| style=\"text-align: right;\" |21\u20137E, A0\u2013FF\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |3\n| style=\"text-align: right;\" |U+4016\n| style=\"text-align: right;\" |U+38E2D\n| style=\"text-align: center;\" |F6\u2013FB\n| style=\"text-align: right;\" |21\u20137E, A0\u2013FF\n| style=\"text-align: right;\" |21\u20137E, A0\u2013FF\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |5\n| style=\"text-align: right;\" |U+38E2E\n| style=\"text-align: right;\" |U+7FFFFFFF\n| style=\"text-align: center;\" |FC\u2013FF\n| style=\"text-align: right;\" |21\u20137E, A0\u2013FF\n| style=\"text-align: right;\" |21\u20137E, A0\u2013FF\n| style=\"text-align: right;\" |21\u20137E, A0\u2013FF\n| style=\"text-align: right;\" |21\u20137E, A0\u2013FF\n|}\n\nIn July 1992, the [[X/Open]] committee XoJIG was looking for a better encoding. Dave Prosser of [[Unix System Laboratories]] submitted a proposal for one that had faster implementation characteristics and introduced the improvement that 7-bit ASCII characters would only represent themselves; all multi-byte sequences would include only bytes where the high bit was set. The name File System Safe [[Universal Character Set|UCS]] Transformation Format (FSS-UTF) and most of the text of this proposal were later preserved in the final specification.<ref name=\"FSS-UTF\">{{cite journal |title=Appendix F. FSS-UTF / File System Safe UCS Transformation format |journal=The Unicode Standard 1.1 |url=https://www.unicode.org/versions/Unicode1.1.0/appF.pdf |access-date=2016-06-07 |url-status=live |archive-url=https://web.archive.org/web/20160607215950/https://www.unicode.org/versions/Unicode1.1.0/appF.pdf |archive-date=2016-06-07}}</ref><ref name=\"Whistler_2001\">{{cite web |title=FSS-UTF, UTF-2, UTF-8, and UTF-16 |author-first=Kenneth |author-last=Whistler |date=2001-06-12 |url=https://unicode.org/mail-arch/unicode-ml/y2001-m06/0318.html |access-date=2006-06-07 |url-status=live |archive-url=https://web.archive.org/web/20160607220249/https://unicode.org/mail-arch/unicode-ml/y2001-m06/0318.html |archivedate=2016-06-07 }}</ref><ref name=\"pikeviacambridge\">{{cite web |url=https://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt |title=UTF-8 history |author-first=Rob |author-last=Pike |author-link=Rob Pike |date=2003-04-30 |access-date=2012-09-07}}</ref><ref>{{cite web |url=https://plus.google.com/u/0/101960720994009339267/posts/Rz1udTvtiMg |title=UTF-8 turned 20 years old yesterday |author-first=Rob |author-last=Pike |author-link=Rob Pike |date=2012-09-06 |access-date=2012-09-07}}</ref>\n\n{| class=\"wikitable\"\n|+FSS-UTF proposal (1992)\n|-\n!Number<br>of bytes!!First<br>code point!!Last<br>code point!!Byte 1!!Byte 2!!Byte 3!!Byte 4!!Byte 5\n|-\n| style=\"text-align: center;\" |1\n| style=\"text-align: right;\" |U+0000\n| style=\"text-align: right;\" |U+007F\n|{{mono|0xxxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |2\n| style=\"text-align: right;\" |U+0080\n| style=\"text-align: right;\" |U+207F\n|{{mono|10xxxxxx}}||{{mono|1xxxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |3\n| style=\"text-align: right;\" |U+2080\n| style=\"text-align: right;\" |U+8207F\n|{{mono|110xxxxx}}||{{mono|1xxxxxxx}}||{{mono|1xxxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |4\n| style=\"text-align: right;\" |U+82080\n| style=\"text-align: right;\" |U+208207F\n|{{mono|1110xxxx}}||{{mono|1xxxxxxx}}||{{mono|1xxxxxxx}}||{{mono|1xxxxxxx}}\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |5\n| style=\"text-align: right;\" |U+2082080\n| style=\"text-align: right;\" |U+7FFFFFFF\n|{{mono|11110xxx}}||{{mono|1xxxxxxx}}||{{mono|1xxxxxxx}}||{{mono|1xxxxxxx}}||{{mono|1xxxxxxx}}\n|}\n\nIn August 1992, this proposal was circulated by an [[IBM]] X/Open representative to interested parties. A modification by [[Ken Thompson]] of the [[Plan 9 from Bell Labs|Plan 9]] [[operating system]] group at [[Bell Labs]] made it somewhat less bit-efficient than the previous proposal but crucially allowed it to be [[Self-synchronizing code|self-synchronizing]], letting a reader start anywhere and immediately detect byte sequence boundaries. It also abandoned the use of biases and instead added the rule that only the shortest possible encoding is allowed; the additional loss in compactness is relatively insignificant, but readers now have to look out for invalid encodings to avoid reliability and especially security issues. Thompson's design was outlined on September 2, 1992, on a [[placemat]] in a New Jersey diner with [[Rob Pike]]. In the following days, Pike and Thompson implemented it and updated [[Plan 9 from Bell Labs|Plan 9]] to use it throughout, and then communicated their success back to X/Open, which accepted it as the specification for FSS-UTF.<ref name=pikeviacambridge/>\n\n{| class=\"wikitable\"\n|+ FSS-UTF (1992) / UTF-8 (1993)<ref name=\":0\" />\n|-\n!Number<br>of bytes!!First<br>code point!!Last<br>code point!!Byte 1!!Byte 2!!Byte 3!!Byte 4!!Byte 5!!Byte 6\n|-\n| style=\"text-align: center;\" |1\n| style=\"text-align: right;\" |U+0000\n| style=\"text-align: right;\" |U+007F\n|{{mono|0xxxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |2\n| style=\"text-align: right;\" |U+0080\n| style=\"text-align: right;\" |U+07FF\n|{{mono|110xxxxx}}||{{mono|10xxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |3\n| style=\"text-align: right;\" |U+0800\n| style=\"text-align: right;\" |U+FFFF\n|{{mono|1110xxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |4\n| style=\"text-align: right;\" |U+10000\n| style=\"text-align: right;\" |U+1FFFFF\n|{{mono|11110xxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}\n| style=\"background: darkgray;\" |\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |5\n| style=\"text-align: right;\" |U+200000\n| style=\"text-align: right;\" |U+3FFFFFF\n|{{mono|111110xx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}\n| style=\"background: darkgray;\" |\n|-\n| style=\"text-align: center;\" |6\n| style=\"text-align: right;\" |U+4000000\n| style=\"text-align: right;\" |U+7FFFFFFF\n|{{mono|1111110x}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}||{{mono|10xxxxxx}}\n|}\n\nUTF-8 was first officially presented at the [[USENIX]] conference in [[San Diego]], from January 25 to 29, 1993. The [[Internet Engineering Task Force]] adopted UTF-8 in its Policy on Character Sets and Languages in RFC&nbsp;2277 ([[Request_for_Comments#\"Best_Current_Practice\"|<abbr title=\"Best Current Practice\">BCP</abbr>]] 18) for future Internet standards work, replacing [[Single Byte Character Set]]s such as [[ISO/IEC 8859-1|Latin-1]] in older RFCs.<ref>{{cite IETF |bcp=18 |title=IETF Policy on Character Sets and Languages |date=January 1998 |first=Harald |last=Alvestrand |authorlink=Harald Alvestrand |doi=10.17487/RFC2277}}</ref>\n\nIn November 2003, UTF-8 was restricted by RFC 3629 to match the constraints of the [[UTF-16]] character encoding: explicitly prohibiting code points corresponding to the high and low surrogate characters removed <!-- 2*2^10/(2^16-2^11) --> more than 3% of the three-byte sequences, and ending at U+10FFFF removed <!-- (2^21-(2^16+2^20))/(2^21-2^16) --> more than 48% of the four-byte sequences and all five- and six-byte sequences.\n\nGoogle reported that in 2008, UTF-8 (labelled \"Unicode\") became the most common encoding for HTML files.<ref name=\"markdavis\">{{cite web |url=http://googleblog.blogspot.com/2008/05/moving-to-unicode-51.html |title=Moving to Unicode 5.1 |author-first=Mark |author-last=Davis |author-link=Mark Davis (Unicode) |date=2008-05-05 |access-date=2013-03-01}}</ref> By 2018, most languages have use of UTF-8 up in the low to high 90%, including Greek at 97.1%.<ref>{{Cite web|url=https://w3techs.com/technologies/segmentation/cl-el-/character_encoding|title=Distribution of Character Encodings among websites that use Greek|website=w3techs.com|language=en|access-date=2018-12-03}}</ref> A few have even 100.0% use such as [[Kurdish languages|Kurdish]], <!--Pushto, -->[[Pashto]], Javanese, [[Kalaallisut]] (<!-- West -->Greenlandic) and Iranian languages<ref>{{Cite web|url=https://w3techs.com/technologies/segmentation/cl-ira-/character_encoding|title=Distribution of Character Encodings among websites that use Iranian languages|website=w3techs.com|language=en|access-date=2018-12-03}}</ref> and [[Sign Language]]s.<ref>{{Cite web|url=https://w3techs.com/technologies/segmentation/cl-sgn-/character_encoding|title=Distribution of Character Encodings among websites that use Sign Languages|website=w3techs.com|language=en|access-date=2018-12-03}}</ref> Exceptions include mainly Asian languages with Chinese at 88.0%,<ref>{{Cite web|url=https://w3techs.com/technologies/segmentation/cl-zh-/character_encoding|title=Distribution of Character Encodings among websites that use Chinese|website=w3techs.com|language=en|access-date=2018-12-03}}</ref> Japanese at 86.7% (while Mongolian is at 99.7%<ref>{{Cite web|url=https://w3techs.com/technologies/segmentation/cl-mn-/character_encoding|title=Distribution of Character Encodings among websites that use Mongolian|website=w3techs.com|language=en|access-date=2018-12-03}}</ref>) and [[Breton language|Breton]] at 70%.<ref>{{Cite web|url=https://w3techs.com/technologies/segmentation/cl-br-/character_encoding|title=Distribution of Character Encodings among websites that use Breton|website=w3techs.com|language=en|access-date=2018-12-03}}</ref>\n\n[[International Components for Unicode]] (ICU) has historically used [[UTF-16]], and still does only for Java; while for C/C++ UTF-8 is now supported as the \"Default Charset\",<ref>{{Cite web|url=http://userguide.icu-project.org/strings/utf-8|title=UTF-8 - ICU User Guide|website=userguide.icu-project.org|access-date=2018-04-03}}</ref> including the correct handling of \"illegal UTF-8\".<ref>{{Cite web|url=http://bugs.icu-project.org/trac/ticket/13311|title=#13311 (change illegal-UTF-8 handling to Unicode \"best practice\") |website=bugs.icu-project.org|access-date=2018-04-03}}</ref>\n\n=== Standards ===\nThere are several current definitions of UTF-8 in various standards documents:\n\n* RFC 3629 / STD 63 (2003), which establishes UTF-8 as a standard Internet protocol element\n* RFC 5198 defines UTF-8 [[Unicode equivalence|NFC]] for Network Interchange (2008)\n* ISO/IEC 10646:2014 \u00a79.1 (2014)<ref>[https://www.iso.org/iso/home/store/catalogue_ics/catalogue_detail_ics.htm?csnumber=63182 ISO/IEC 10646:2014 \u00a79.1], 2014.</ref>\n* ''The Unicode Standard, Version 11.0'' (2018)<ref>[https://www.unicode.org/versions/Unicode11.0.0/ ''The Unicode Standard, Version 11.0''] [https://www.unicode.org/versions/Unicode11.0.0/ch03.pdf \u00a73.9 D92, \u00a73.10 D95], 2018.</ref>\n\nThey supersede the definitions given in the following obsolete works:\n\n* ''The Unicode Standard, Version 2.0'', Appendix A (1996)\n* ISO/IEC 10646-1:1993 Amendment 2 / Annex R (1996)\n* RFC 2044 (1996)\n* RFC 2279 (1998)\n* ''The Unicode Standard, Version 3.0'', \u00a72.3 (2000) plus Corrigendum #1 : UTF-8 Shortest Form (2000)\n* ''Unicode Standard Annex #27: Unicode 3.1'' (2001)<ref>[https://www.unicode.org/reports/tr27/tr27-3.html ''Unicode Standard Annex #27: Unicode 3.1''], 2001.</ref>\n* ''The Unicode Standard, Version 5.0'' (2006)<ref>[https://www.unicode.org/versions/Unicode5.0.0/ ''The Unicode Standard, Version 5.0''] [https://www.unicode.org/versions/Unicode5.0.0/ch03.pdf \u00a73.9\u2013\u00a73.10 ch. 3], 2006.</ref>\n* ''The Unicode Standard, Version 6.0'' (2010)<ref>[https://www.unicode.org/versions/Unicode6.0.0/ ''The Unicode Standard, Version 6.0''] [https://www.unicode.org/versions/Unicode6.0.0/ch03.pdf \u00a73.9 D92, \u00a73.10 D95], 2010.</ref>\n\nThey are all the same in their general mechanics, with the main differences being on issues such as allowed range of code point values and safe handling of invalid input.\n\n===Comparison with single-byte encodings===\n* UTF-8 can encode any [[Universal Character Set characters|Unicode character]], avoiding the need to figure out and set a \"[[code page]]\" or otherwise indicate what character set is in use, and allowing output in multiple scripts at the same time. For many scripts there have been more than one single-byte encoding in usage, so even knowing the script was insufficient information to display it correctly.\n* The bytes 0xFE and 0xFF do not appear, so a valid UTF-8 stream never matches the UTF-16 [[byte order mark]] and thus cannot be confused with it. The absence of 0xFF (0377) also eliminates the need to escape this byte in [[Telnet]] (and FTP control connection).\n* UTF-8 encoded text is larger than specialized single-byte encodings except for plain ASCII characters. In the case of scripts which used 8-bit character sets with non-Latin characters encoded in the upper half (such as most [[Cyrillic script|Cyrillic]] and [[Greek alphabet]] code pages), characters in UTF-8 will be double the size. For some scripts, such as [[Thai alphabet|Thai]] and [[Devanagari]] (which is used by various South Asian languages), characters will triple in size. There are even examples where a single byte turns into a composite character in Unicode and is thus six times larger in UTF-8. This has caused objections in India and other countries.\n*  It is possible in UTF-8 (or any other variable-length encoding) to split or [[Data truncation|truncate]] a string in the middle of a character. If the two pieces are not re-appended later before interpretation as characters, this can introduce an invalid sequence at both the end of the previous section and the start of the next, and some decoders will not preserve these bytes and result in data loss. Because UTF-8 is self-synchronizing this will however never introduce a different valid character, and it is also fairly easy to move the truncation point backwards to the start of a character.\n* If the code points are all the same size, measurements of a fixed number of them is easy. Due to ASCII-era documentation where \"character\" is used as a synonym for \"byte\" this is often considered important. However, by measuring string positions using bytes instead of \"characters\" most algorithms can be easily and efficiently adapted for UTF-8. Searching for a string within a long string can for example be done byte by byte; the self-synchronization property prevents false positives.\n\n===Comparison with other multi-byte encodings===\n* UTF-8 can encode any [[Unicode]] character. Files in different scripts can be displayed correctly without having to choose the correct code page or font. For instance, Chinese and Arabic can be written in the same file without specialised markup or manual settings that specify an encoding.\n* UTF-8 is [[Self-synchronizing code|self-synchronizing]]: character boundaries are easily identified by scanning for well-defined bit patterns in either direction. If bytes are lost due to error or [[data corruption|corruption]], one can always locate the next valid character and resume processing. If there is a need to shorten a string to fit a specified field, the previous valid character can easily be found. Many multi-byte encodings such as {{nowrap|Shift JIS}} are much harder to resynchronize. This also means that [[byte-oriented protocol|byte-oriented]] [[string-searching algorithm]]s can be used with UTF-8 (as a character is the same as a \"word\" made up of that many bytes), optimized versions of byte searches can be much faster due to hardware support and lookup tables that have only 256 entries.\n* Efficient to encode using simple [[bitwise operation]]s. UTF-8 does not require slower mathematical operations such as multiplication or division (unlike {{nowrap|Shift JIS}}, {{nowrap|[[GB 2312]]}} and other encodings).\n* UTF-8 will take more space than a multi-byte encoding designed for a specific script. East Asian legacy encodings generally used two bytes per character yet take three bytes per character in UTF-8. Self-synchronization also takes more space.\n\n===Comparison with UTF-16===\nSee also [[Comparison of Unicode encodings]]\n* Byte encodings and UTF-8 are represented by byte arrays in programs, and often nothing needs to be done to a function when converting from a byte encoding to UTF-8. [[UTF-16]] is represented by 16-bit word arrays, and converting to UTF-16 while maintaining compatibility with existing [[ASCII]]-based programs (such as was done with Windows) requires ''every'' API and data structure that takes a string to be duplicated, one version accepting byte strings and another version accepting UTF-16.\n* Text encoded in UTF-8 will be smaller than the same text encoded in UTF-16 if there are more code points below U+0080 than in the range U+0800..U+FFFF. This is true for all modern European languages.\n** Text in (for example) Chinese, Japanese or Devanagari will take more space in UTF-8 if there are more of these characters than there are ASCII characters. This is likely when data mainly consist of pure prose, but is lessened by the degree to which the context uses ASCII whitespace, digits, and punctuation.<ref group=\"nb\">The 2010-11-22 version of [[:hi:\u092f\u0942\u0928\u093f\u0915\u094b\u0921|\u092f\u0942\u0928\u093f\u0915\u094b\u0921]] (Unicode in Hindi), when the pure text was pasted to Notepad, generated 19&nbsp;KB when saved as UTF-16 and 22&nbsp;KB when saved as UTF-8.</ref>\n** Most of the [[formatted text|rich text formats]] (including HTML) contain a large proportion of ASCII characters for the sake of formatting, thus the size usually will be reduced significantly compared with UTF-16, even when the language mostly uses 3-byte long characters in UTF-8.<ref group=\"nb\">The 2010-10-27 version of [[:ja:UTF-8|UTF-8]] (in Japanese) generated 169&nbsp;KB when converted with Notepad to UTF-16, and only 101&nbsp;KB when converted back to UTF-8. The 2010-11-22 version of [[:hi:\u092f\u0942\u0928\u093f\u0915\u094b\u0921|\u092f\u0942\u0928\u093f\u0915\u094b\u0921]] (Unicode in Hindi) required 119&nbsp;KB in UTF-16 and 76&nbsp;KB in UTF-8.</ref>\n* Most communication (e.g. HTML and IP) and storage (e.g. for Unix) was designed for a [[Bitstream#Definition of bytestream|stream of bytes]]. A UTF-16 string must use a pair of bytes for each code unit:\n** The order of those two bytes becomes an issue and must be specified in the UTF-16 protocol, such as with a [[byte order mark]].\n** If an ''odd'' number of bytes is missing from UTF-16, the whole rest of the string will be meaningless text. Any bytes missing from UTF-8 will still allow the text to be recovered accurately starting with the next character after the missing bytes.\n\n==Derivatives==\nThe following implementations show slight differences from the UTF-8 specification. They are incompatible with the UTF-8 specification and may be rejected by conforming UTF-8 applications.\n\n===CESU-8===\n{{Main|CESU-8}}\n\nMany programs added UTF-8 conversions for [[UCS-2]] data and did not alter this UTF-8 conversion when UCS-2 was replaced with the surrogate-pair using [[UTF-16]]. In such programs each half of a UTF-16 surrogate pair is encoded as its own three-byte UTF-8 encoding, resulting in six-byte sequences rather than four bytes for characters outside the [[Basic Multilingual Plane]]. [[Oracle Database|Oracle]] and [[MySQL]] databases use this, as well as Java and Tcl as described below, and probably many Windows programs where the programmers were unaware of the complexities of UTF-16. Although this non-optimal encoding is generally not deliberate, a supposed benefit is that it preserves UTF-16 binary sorting order when CESU-8 is binary sorted.\n\n==={{anchor|MUTF-8}}Modified UTF-8===\nIn Modified UTF-8 (MUTF-8),<ref>{{cite web |title=Java SE documentation for Interface java.io.DataInput, subsection on Modified UTF-8 |url=https://docs.oracle.com/javase/8/docs/api/java/io/DataInput.html#modified-utf-8 |year=2015 |publisher=[[Oracle Corporation]] |access-date=2015-10-16}}</ref> the [[null character]] (U+0000) uses the two-byte overlong encoding {{mono|110{{fontcolor|green|00000}}}} {{mono|10{{fontcolor|red|000000}}}} (hexadecimal {{mono|{{fontcolor|green|C0}}}} {{mono|{{fontcolor|red|80}}}}), instead of {{mono|00000000}} (hexadecimal {{mono|00}}). Modified UTF-8 strings never contain any actual null bytes but can contain all Unicode code points including U+0000,<ref>{{cite web |url=https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.7 |title=The Java Virtual Machine Specification, section 4.4.7: \"The CONSTANT_Utf8_info Structure\" |publisher=[[Oracle Corporation]] |year=2015 |quote=Java virtual machine UTF-8 strings never have embedded nulls. |access-date=2015-10-16}}</ref> which allows such strings (with a null byte appended) to be processed by traditional [[null-terminated string]] functions.\n\nAll known Modified UTF-8 implementations also treat the surrogate pairs as in [[CESU-8]].\n\nIn normal usage, the [[Java (programming language)|Java programming language]] supports standard UTF-8 when reading and writing strings through {{Javadoc:SE|java/io|InputStreamReader}} and {{Javadoc:SE|java/io|OutputStreamWriter}} (if it is the platform's default character set or as requested by the program). However it uses Modified UTF-8 for object [[Java serialization|serialization]]<ref>{{cite web |title=Java Object Serialization Specification, chapter 6: Object Serialization Stream Protocol, section 2: Stream Elements |url=https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html#a8299 |year=2010 |publisher=[[Oracle Corporation]] |quote= [\u2026] encoded in modified UTF-8. |access-date=2015-10-16}}</ref> among other applications of {{Javadoc:SE|java/io|DataInput}} and {{Javadoc:SE|java/io|DataOutput}}, for the [[Java Native Interface]],<ref>{{cite web |url=https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html#modified_utf_8_strings |title=Java Native Interface Specification, chapter 3: JNI Types and Data Structures, section: Modified UTF-8 Strings |publisher=[[Oracle Corporation]] |year=2015 |quote=The JNI uses modified UTF-8 strings to represent various string types. |access-date=2015-10-16}}</ref> and for embedding constant strings in [[Class (file format)|class files]].<ref>{{cite web |title=The Java Virtual Machine Specification, section 4.4.7: \"The CONSTANT_Utf8_info Structure\" |url=https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.7 |publisher=[[Oracle Corporation]] |year=2015 |quote= [\u2026] differences between this format and the 'standard' UTF-8 format. |access-date=2015-10-16}}</ref>\nThe dex format defined by [[Dalvik (software)|Dalvik]] also uses the same modified UTF-8 to represent string values.<ref>{{cite web |url=https://source.android.com/tech/dalvik/dex-format.html |title=ART and Dalvik |work=Android Open Source Project |quote=[T]he dex format encodes its string data in a de facto standard modified UTF-8 form, hereafter referred to as MUTF-8. |access-date=2013-04-09 |url-status=dead |archiveurl=https://web.archive.org/web/20130426010617/https://source.android.com/tech/dalvik/dex-format.html |archivedate=2013-04-26 |df= }}</ref>\n[[Tcl]] also uses the same modified UTF-8<ref>{{cite web |title=Tcler's Wiki: UTF-8 bit by bit (Revision 6) |date=2009-04-25 |url=https://wiki.tcl.tk/_/revision?N=1211&V=6 |access-date=2009-05-22 |quote=In orthodox UTF-8, a NUL byte (\\x00) is represented by a NUL byte. [\u2026] But [\u2026] we [\u2026] want NUL bytes inside [\u2026] strings [\u2026]}}</ref> as Java for internal representation of Unicode data, but uses strict CESU-8 for external data.\n\n===WTF-8===\nWTF-8 (Wobbly Transformation Format \u2013 8-bit) is an extension of UTF-8 where the encodings of ''unpaired'' surrogate halves (U+D800 through U+DFFF) are allowed.<ref name=\"Sapin_2016\">{{cite web |title=The WTF-8 encoding |author-first=Simon |author-last=Sapin |date=2016-03-11 |orig-year=2014-09-25 |url=https://simonsapin.github.io/wtf-8/ |access-date=2016-05-24 |url-status=live |archive-url=https://web.archive.org/web/20160524180037/https://simonsapin.github.io/wtf-8/ |archive-date=2016-05-24}}</ref> This is necessary to store possibly-invalid UTF-16, such as Windows filenames. Many systems that deal with UTF-8 work this way without considering it a different encoding, as it is simpler.\n\nThe term \"WTF-8\" has also been used humorously to refer to [[Mojibake|erroneously doubly-encoded UTF-8]]<ref name=\"wtf8_2016\">{{cite web|title=WTF-8.com|date=2006-05-18|url=http://wtf-8.com/|access-date=2016-06-21}}</ref><ref name=\"Speer_2016\">{{cite web|title=ftfy (fixes text for you) 4.0: changing less and fixing more|author-first=Robyn|author-last=Speer|date=2015-05-21|url=https://blog.luminoso.com/2015/05/21/ftfy-fixes-text-for-you-4-0-changing-less-and-fixing-more/|access-date=2016-06-21|archive-url=https://web.archive.org/web/20150530150039/https://blog.luminoso.com/2015/05/21/ftfy-fixes-text-for-you-4-0-changing-less-and-fixing-more/|archive-date=2016-05-21}}</ref> sometimes with the implication that [[CP1252]] bytes are the only ones encoded.<ref>{{Cite web|url=http://www-uxsup.csx.cam.ac.uk/~fanf2/hermes/doc/qsmtp/draft-fanf-wtf8.html|title=WTF-8, a transformation format of code page 1252|website=www-uxsup.csx.cam.ac.uk|access-date=2016-10-12}}</ref>\n\n===UTF-8b===\nExtensions have been created to store invalid byte sequences as UTF-16. They include [[MirBSD]] OPTU-8/16<ref>{{cite web |title=RTFM optu8to16(3), optu8to16vis(3) |url=https://www.mirbsd.org/htman/i386/man3/optu8to16.htm |website=www.mirbsd.org}}</ref> which converts them to U+EF80\u2026U+EFFF in a [[Private Use Area]], and [[Python (programming language)|Python]] \"surrogateescape\"<ref>{{cite web |title=PEP 383 -- Non-decodable Bytes in System Character Interfaces |url=https://www.python.org/dev/peps/pep-0383 |website=Python.org |language=en}}</ref> which converts them to U+DC80\u2026U+DCFF which are low (trailing) surrogate values and thus \"invalid\" UTF-16.\n\nFor the encoding to be reversible, the UTF-8 encoding of the error code points must be disallowed. For the Python version this makes the encoding incompatible with WTF-8 or CESU-8 (though only for 128 code points). Re-encoding must also be careful of a malicious actor arranging the errors to convert back to valid UTF-8 encoding. For these reasons is far easier to store invalid UTF-16 as WTF-8 than to store invalid UTF-8 as some form of UTF-16, so using byte strings is best if you must work with both.\n\n==See also==\n{{Div col|colwidth=25em}}\n* [[Alt code]]\n* [[Character encodings in HTML]]\n* {{Section link|Comparison of e-mail clients|Features}}\n* [[Comparison of Unicode encodings]]\n* [[GB 18030]]\n* [[Iconv]] \u2013 a standardized [[Application programming interface|API]] used to convert between different [[character encoding]]s\n* [[ISO/IEC 8859]]\n* [[Specials (Unicode block)]]\n* [[Unicode and email]]\n* [[Unicode and HTML]]\n* [[Universal Character Set]]\n* [[Percent-encoding#Current standard|UTF-8 in URIs]]\n* [[UTF-EBCDIC]]\n* [[UTF-9 and UTF-18]]\n* [[UTF-16|UTF-16/UCS-2]]\n{{Div col end}}\n\n==Notes==\n{{Reflist|group=\"nb\"}}\n\n==References==\n{{Reflist|30em}}\n\n==External links==\n* [http://doc.cat-v.org/plan_9/4th_edition/papers/utf Original UTF-8 paper] ([https://web.archive.org/web/20000917055036/http://plan9.bell-labs.com/sys/doc/utf.pdf or pdf]) for [[Plan 9 from Bell Labs]]\n* UTF-8 test pages by [http://www.user.uni-hannover.de/nhtcapri/multilingual1.html Andreas Prilop], [http://titus.uni-frankfurt.de/indexe.htm?/unicode/unitest.htm Jost Gippert] and the [http://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html World Wide Web Consortium]\n* Unix/Linux: [http://www.cl.cam.ac.uk/~mgk25/unicode.html UTF-8/Unicode FAQ], [http://www.tldp.org/HOWTO/Unicode-HOWTO.html Linux Unicode HOWTO], [http://www.gentoo.org/doc/en/utf-8.xml UTF-8 and Gentoo]\n* {{YouTube|id=MijmeoH9LT4|title=Characters, Symbols and the Unicode Miracle \u2013 Computerphile}}\n\n{{Unicode navigation}}\n{{Character encoding}}\n{{Rob Pike navbox}}\n{{Ken Thompson navbox}}\n\n{{DEFAULTSORT:UTF-08}}\n[[Category:Character encoding]]\n[[Category:Computer-related introductions in 1993]]\n[[Category:Encodings]]\n[[Category:Unicode Transformation Formats]]\n", "name_user": "Comp.arch", "label": "safe", "comment": "", "url_page": "//en.wikipedia.org/wiki/UTF-8"}
{"title_page": "Ivan Vakarchuk", "text_new": "{{short description|Ukrainian politician}}\n{{Infobox person \n| name = Ivan Oleksandrovych Vakarchuk\n|native_name={{lang|uk|\u0406\u0432\u0430\u043d \u041e\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447 \u0412\u0430\u043a\u0430\u0440\u0447\u0443\u043a}}\n| residence = \n| other_names =\n| image =Ivan Vakarchuk.jpg\n| imagesize =\n| caption =\n| birth_name =\n| birth_date = {{birth date|1947|03|06}}\n| birth_place = [[Br\u0103tu\u0219eni]], [[Edine\u021b District|Edine\u021b Raion]] [[Moldavian Soviet Socialist Republic|Moldavian SSR]], [[Soviet Union]]\n| nationality = [[Ukraine]] \n| death_date = {{death date and age|df=y|2020|4|4|1947|03|06}}\n| death_place = [[Lviv]], [[Ukraine]]\n| known = \n| occupation = [[Scientist]]\n| networth = \n| title = Doctor of Physical and Mathematical Sciences, Professor, Honored Worker of Science and Technology of Ukraine, Honorary Doctor of [[Cracow]] Pedagogical Academy, Hero of Ukraine\n| salary =\n| term =\n| party = \n| boards =\n| spouse = Svitlana Oleksandrivna Vakarchuk\n| partner =\n|awards             = {{Hero_of_Ukraine}}\n| children = [[Svyatoslav Vakarchuk]] (1975)<br />Oleg Vakarchuk (1980)\n}}\n'''Ivan Vakarchuk''' ({{lang-uk|\u0406\u0432\u0430\u043d \u041e\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447 \u0412\u0430\u043a\u0430\u0440\u0447\u0443\u043a}}; 6 March 1947 \u2013 4 April 2020) was a Ukrainian physicist. From 1990 to 2007 and again between 2010 and 2013 he was Rector of the [[Lviv University]]. In 2007&ndash;2010 he was [[Ministry of Education and Science of Ukraine|Minister of Education and Science of Ukraine]]. [[Hero of Ukraine]] (awarded on 5 March 2007), he was father of the leader of the rock band [[Okean Elzy]] [[Svyatoslav Vakarchuk]].<ref name=\"10945319Vakarchuk\">[https://www.unian.ua/m/society/10945319-pomer-kolishniy-rektor-lvivskogo-universitetu-ivan-vakarchuk.html Former Rector of Lviv University Ivan Vakarchuk died], [[UNIAN]] (4 March 2020) {{in lang|uk}}</ref>\n\n==Biography==\nIvan Vakarchuk was born on March 6, 1947, in [[Br\u0103tu\u0219eni|Stari Bratushany]] village, [[Edine\u021b District|Edine\u021b Raion]], [[Moldavian SSR]].<ref name=autogenerated3>{{Cite web |url=http://ubop.net.ua/dose/vakarchuk-ivan-aleksandrovich.html |title=\u0423\u0411\u041e\u041f : \u0414\u043e\u0441\u044c\u0435 : \u0412\u0430\u043a\u0430\u0440\u0447\u0443\u043a \u0418\u0432\u0430\u043d \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447<!-- Bot generated title --> |access-date=2011-11-29 |archive-url=https://web.archive.org/web/20120424231653/http://ubop.net.ua/dose/vakarchuk-ivan-aleksandrovich.html |archive-date=2012-04-24 |url-status=dead }}</ref><ref name=\"10945319Vakarchuk\"/>\n\n===Education===\nIn 1965\u20131970 he studied at the Faculty of Physics at Lviv University named after Ivan Franko. In 1970\u20131973 he continued his studies at the postgraduate faculty of the Lviv Institute of theoretical physics, affiliated with USSR Academy of Sciences.<ref name=autogenerated1>[http://www.franko.lviv.ua/general/vakarchuk.htm \u041e\u0441\u043d\u043e\u0432\u043d\u0456 \u0434\u0430\u0442\u0438 \u0436\u0438\u0442\u0442\u044f \u0456 \u0434\u0456\u044f\u043b\u044c\u043d\u043e\u0441\u0442\u0456 \u0406\u0432\u0430\u043d\u0430 \u0412\u0430\u043a\u0430\u0440\u0447\u0443\u043a\u0430<!-- Bot generated title -->] {{webarchive|url=https://web.archive.org/web/20120513154657/http://www.franko.lviv.ua/general/vakarchuk.htm |date=2012-05-13 }}</ref><ref name=autogenerated2>[http://www.peoples.ru/state/minister/ukraine/ivan_vakarchuk/ \u0418\u0432\u0430\u043d \u0412\u0430\u043a\u0430\u0440\u0447\u0443\u043a (Ivan Vakarchuk) - \u0432\u0441\u0435 \u043e \u0437\u043d\u0430\u043c\u0435\u043d\u0438\u0442\u043e\u0441\u0442\u0438<!-- Bot generated title -->]</ref><br />\nIn 1974 he defended his PhD thesis \"Application of the method of displacements and collective variables in the study of interacting Bose particles near absolute zero\", and in 1980 his doctoral thesis \"Microscopic theory of Bose liquid\".<ref name=autogenerated5>[http://www.nbuv.gov.ua/portal/soc_gum/vou/vakarchuk.html \u0412\u0430\u043a\u0430\u0440\u0447\u0443\u043a \u0406\u0432\u0430\u043d \u041e\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447, \u0434\u043e\u043a\u0442\u043e\u0440 \u0444\u0456\u0437\u0438\u043a\u043e-\u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u0438\u0445 \u043d\u0430\u0443\u043a - \u043d\u0430\u0443\u043a\u043e\u0432\u0430 \u0431\u0456\u043e\u0433\u0440\u0430\u0444\u0456\u044f<!-- Bot generated title -->]</ref> Ivan Vakarchuk represented the Lviv school of statistical physics founded by academician of National Academy of Sciences of Ukraine I.Yukhnovsky.\n\n===Career===\nIn 1973\u20131984 Ivan Vakarchuk was working at the Lviv branch of the Institute for Theoretical Physics affiliated with USSR Academy of Sciences (now is the Institute of Condensed Matter Physics of National Academy of Sciences) as junior research assistant, senior researcher and head of [[Quantum statistics|Quantum Statistics]] department.<br />\nSince 1984 he's been performing the duties of Professor, head of department of [[Theoretical Physics]] at [[Lviv University|Lviv State Ivan Franko University]].<ref name=autogenerated1 /><ref name=autogenerated2 /><ref name=autogenerated4>[http://www.rudenko.kiev.ua/persons/vakarchuk \u0412\u0430\u043a\u0430\u0440\u0447\u0443\u043a \u0418\u0432\u0430\u043d. \u0414\u041e\u0421\u042c\u0415 :: \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0442 \u0421\u0435\u0440\u0433\u0435\u044f \u0420\u0443\u0434\u0435\u043d\u043a\u043e<!-- Bot generated title -->]</ref><br />\nOn November 13, 1990 Ivan Vakarchuk was elected the rector of [[Lviv University|Lviv State University named after Ivan Franko]] (current name - Lviv National University named after Ivan Franko) and worked till November 2007.<br /> Later he held this office again between 2010 and 2013.<ref name=\"10945319Vakarchuk\"/>\nOn December 18, 2007 Vakarchuk was appointed the [[Ministry of Education and Science of Ukraine|Minister of education and science of Ukraine]].<ref name=autogenerated3 /><ref name=autogenerated2 /><ref name=\"10945319Vakarchuk\"/>\n\n===Achievements in science===\n\nIvan Vakarchuk has the rank of Doctor of Physical and Mathematical Sciences, Professor, PhD with the thesis: \"Application of the method of displacements and collective variables in the study of interacting Bose particles near absolute zero\" (Institute for Theoretical Physics, Academy of Sciences of [[Ukrainian SSR|USSR]], 1974) doctoral thesis on \"Microscopic theory of Bose liquid\" (Institute for Theoretical Physics, USSR Academy of Sciences, 1980).\n\nA distinctive feature of professor Ivan Vakarchuk was the amplitude of his scientific interests: physics of quantum liquids, theory of phase transitions and critical phenomena, physics of disordered systems, magnetic systems, physics, mathematical methods in theoretical physics, fundamental problems of quantum mechanics and quantum computer sciences, geophysics, general relativity theory, cosmology, philosophy of science. In each of these fields he proposed new original approaches to the study of various physical phenomena and processes. The amplitude of his scientific interests allowed him to apply methods, which he invented to study different phenomena.\n\nIvan Vakarchuk paid particular attention to the latest achievements in science and philosophy of science issues, including the relationship between research methods of natural sciences and humanities, identifying common math mechanisms that \"manage\" the processes occurring in the humanitarian and social spheres.<br />\nHe is the author of over 240 scientific papers, and author of the books  \"Lectures on General Relativity\" (1991), \"Quantum Mechanics\" (1998, 2004, 2007, 2012) \"Introduction to the many-body problem\" (1999) and \"The Theory of Stellar Spectra\" (2003).<ref>[http://www.ktf.franko.lviv.ua/cgi-bin/select.cgi?%C2%E0%EA%E0%F0%F7%F3%EA%20%B2.|%C2%E0%EA%E0%F0%F7%F3%EA%20%C8.|Vakarchuk%20I.|Wakarczuk%20I. Complete Bibliography of the Department for Theoretical Physics, University of Lviv (since 1872)]</ref>\n\n==Titles and awards==\n\n* Founder and Editor-in-chief of the \"Journal of Physics Research\" and the popular science magazine \"World of Physics\"\n* Member of the Commission of state awards and [[heraldry]]\n* Member of the Committee on State Prizes of Ukraine in science and technology\n* Vice-President of the Union of rectors of higher educational establishments of Ukraine\n* Member of the editorial board of the journal \"Higher Education in Ukraine\"\n* Chairman of the board of the Lviv Regional Peace Council\n* President of the Ukrainian Physical Society\n* Honored Worker of Science and Technology of Ukraine<ref name=\"10945319Vakarchuk\"/>\n* Member of the Council on Science and Science and Technology Policy under the President of Ukraine\n* Awardee of the State Prize of Ukraine in science and technology\n* Awardee of Barabashov prize, National Academy of Sciences\n* Honorary Doctor of the [[Cracow Pedagogical University|Cracow Pedagogical Academy]]\n* Member of the organizing committee for the preparation and celebration of the 1020th anniversary of [[Baptism of Kievan Rus'|Baptism of Kiev Rus]]\n* Diploma by the Presidium of the Academy of Sciences of Ukraine \"Expert of Public Education in [[Ukrainian SSR|USSR]]\"\n* Diploma of Merit by the [[Verkhovna Rada of Ukraine]]\n* [[Order of Merit (Ukraine)|Order of Merit]], 3rd class (February 2005)\n* [[Hero of Ukraine]] (2007)<ref name=autogenerated1 /><ref name=autogenerated5 /><ref name=\"10945319Vakarchuk\"/>\n\n==Personal life==\n===Family===\n\nIvan Vakarchuk was married, his wife Svetlana (b. 1947) is teacher of [[physics]], assistant professor of Lviv National Academy of [[veterinary medicine]] named after S.Gzhitsky.<ref name=autogenerated4 /> <br />\nThey had two sons: Svyatoslav Vakarchuk (b. 1975), who is a frontman of \"Okean Elzy\", the famous Ukrainian rock band,<ref>{{Cite web |url=http://www.okeanelzy.com/en/oe/m6/ |title=Okean Elzy<!-- Bot generated title --> |access-date=2011-12-01 |archive-url=https://web.archive.org/web/20111005163304/http://www.okeanelzy.com/en/oe/m6/ |archive-date=2011-10-05 |url-status=dead }}</ref> and Oleg (b. 1980) - a bank employee.<ref name=autogenerated4 />\n===Death===\nVakarchuk died on 4 April 2020 at the age of 73 in [[Lviv]].<ref name=\"10945319Vakarchuk\"/> The causes of death was not reported.<ref name=\"10945319Vakarchuk\"/>\n==Interesting facts==\n* Ivan Vakarchuk was born in the same village as [[Anatoliy Kinakh]]\n* In 2008, Ivan Vakarchuk took the 50th place in the Top 100 of the most influential Ukrainians, according to Reporter magazine\n* During the [[2004 Ukrainian presidential election|2004' presidential elections]], he openly called students to vote for [[Viktor Yushchenko]]<ref name=autogenerated4 />\n\n== References ==\n{{Reflist|2}}\n\n== External links ==\n* [https://web.archive.org/web/20120513154657/http://www.franko.lviv.ua/general/vakarchuk.htm Biography of Professor Ivan Vakarchuk at the official web site of Lviv National University]\n\n{{Ministers of Education and Sciences of Ukraine}}\n{{Authority control}}\n\n{{DEFAULTSORT:Vakarchuk, Ivan}}\n[[Category:1947 births]]\n[[Category:2020 deaths]]\n[[Category:Education and science ministers of Ukraine]]\n[[Category:Chevaliers of the Order of Merit (Ukraine)]]\n[[Category:People from Edine\u021b District]]\n[[Category:Moldovan emigrants to Ukraine]]\n[[Category:Ukrainian physicists]]\n[[Category:Ukrainian scientists]]\n[[Category:University of Lviv alumni]]\n[[Category:Recipients of the title of Hero of Ukraine]]\n[[Category:People of the Euromaidan]]\n[[Category:University of Lviv rectors]]\n[[Category:Soviet physicists]]\n[[Category:20th-century physicists]]\n", "text_old": "{{short description|Ukrainian politician}}\n{{Infobox person \n| name = Ivan Oleksandrovych Vakarchuk\n|native_name={{lang|uk|\u0406\u0432\u0430\u043d \u041e\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447 \u0412\u0430\u043a\u0430\u0440\u0447\u0443\u043a}}\n| residence = \n| other_names =\n| image =Ivan Vakarchuk.jpg\n| imagesize =\n| caption =\n| birth_name =\n| birth_date = {{birth date|1947|03|06}}\n| birth_place = [[Br\u0103tu\u0219eni]], [[Edine\u021b District|Edine\u021b Raion]] [[Moldavian Soviet Socialist Republic|Moldavian SSR]], [[Soviet Union]]\n| nationality = [[Ukraine]] \n| death_date = {{death date and age|df=y|2020|4|4|1947|03|06}}\n| death_place = [[Lviv]], [[Ukraine]]\n| known = \n| occupation = [[Scientist]]\n| networth = \n| title = Doctor of Physical and Mathematical Sciences, Professor, Honored Worker of Science and Technology of Ukraine, Honorary Doctor of [[Cracow]] Pedagogical Academy, Hero of Ukraine\n| salary =\n| term =\n| party = \n| boards =\n| spouse = Svitlana Oleksandrivna Vakarchuk\n| partner =\n|awards             = {{Hero_of_Ukraine}}\n| children = [[Svyatoslav Vakarchuk]] (1975)<br />Oleg Vakarchuk (1980)\n}}\n'''Ivan Vakarchuk''' ({{lang-uk|\u0406\u0432\u0430\u043d \u041e\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447 \u0412\u0430\u043a\u0430\u0440\u0447\u0443\u043a}}; 6 March 1947 \u2013 4 April 2020) was a Ukrainian physicist. From 1990 to 2007 and again between 2010 and 2013 he was Rector of the [[Lviv University]]. In 2007&ndash;2010 he was [[Ministry of Education and Science of Ukraine|Minister of Education and Science of Ukraine]]. [[Hero of Ukraine]] (awarded on 5 March 2007), he was father of the leader of the rock band \"[[Okean Elzy]]\" [[Svyatoslav Vakarchuk]].<ref name=\"10945319Vakarchuk\">[https://www.unian.ua/m/society/10945319-pomer-kolishniy-rektor-lvivskogo-universitetu-ivan-vakarchuk.html Former Rector of Lviv University Ivan Vakarchuk died], [[UNIAN]] (4 March 2020) {{in lang|uk}}</ref>\n\n==Biography==\nIvan Vakarchuk was born on March 6, 1947, in [[Br\u0103tu\u0219eni|Stari Bratushany]] village, [[Edine\u021b District|Edine\u021b Raion]], [[Moldavian SSR]].<ref name=autogenerated3>{{Cite web |url=http://ubop.net.ua/dose/vakarchuk-ivan-aleksandrovich.html |title=\u0423\u0411\u041e\u041f : \u0414\u043e\u0441\u044c\u0435 : \u0412\u0430\u043a\u0430\u0440\u0447\u0443\u043a \u0418\u0432\u0430\u043d \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447<!-- Bot generated title --> |access-date=2011-11-29 |archive-url=https://web.archive.org/web/20120424231653/http://ubop.net.ua/dose/vakarchuk-ivan-aleksandrovich.html |archive-date=2012-04-24 |url-status=dead }}</ref><ref name=\"10945319Vakarchuk\"/>\n\n===Education===\nIn 1965\u20131970 he studied at the Faculty of Physics at Lviv University named after Ivan Franko. In 1970\u20131973 he continued his studies at the postgraduate faculty of the Lviv Institute of theoretical physics, affiliated with USSR Academy of Sciences.<ref name=autogenerated1>[http://www.franko.lviv.ua/general/vakarchuk.htm \u041e\u0441\u043d\u043e\u0432\u043d\u0456 \u0434\u0430\u0442\u0438 \u0436\u0438\u0442\u0442\u044f \u0456 \u0434\u0456\u044f\u043b\u044c\u043d\u043e\u0441\u0442\u0456 \u0406\u0432\u0430\u043d\u0430 \u0412\u0430\u043a\u0430\u0440\u0447\u0443\u043a\u0430<!-- Bot generated title -->] {{webarchive|url=https://web.archive.org/web/20120513154657/http://www.franko.lviv.ua/general/vakarchuk.htm |date=2012-05-13 }}</ref><ref name=autogenerated2>[http://www.peoples.ru/state/minister/ukraine/ivan_vakarchuk/ \u0418\u0432\u0430\u043d \u0412\u0430\u043a\u0430\u0440\u0447\u0443\u043a (Ivan Vakarchuk) - \u0432\u0441\u0435 \u043e \u0437\u043d\u0430\u043c\u0435\u043d\u0438\u0442\u043e\u0441\u0442\u0438<!-- Bot generated title -->]</ref><br />\nIn 1974 he defended his PhD thesis \"Application of the method of displacements and collective variables in the study of interacting Bose particles near absolute zero\", and in 1980 his doctoral thesis \"Microscopic theory of Bose liquid\".<ref name=autogenerated5>[http://www.nbuv.gov.ua/portal/soc_gum/vou/vakarchuk.html \u0412\u0430\u043a\u0430\u0440\u0447\u0443\u043a \u0406\u0432\u0430\u043d \u041e\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447, \u0434\u043e\u043a\u0442\u043e\u0440 \u0444\u0456\u0437\u0438\u043a\u043e-\u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u0438\u0445 \u043d\u0430\u0443\u043a - \u043d\u0430\u0443\u043a\u043e\u0432\u0430 \u0431\u0456\u043e\u0433\u0440\u0430\u0444\u0456\u044f<!-- Bot generated title -->]</ref> Ivan Vakarchuk represented the Lviv school of statistical physics founded by academician of National Academy of Sciences of Ukraine I.Yukhnovsky.\n\n===Career===\nIn 1973\u20131984 Ivan Vakarchuk was working at the Lviv branch of the Institute for Theoretical Physics affiliated with USSR Academy of Sciences (now is the Institute of Condensed Matter Physics of National Academy of Sciences) as junior research assistant, senior researcher and head of [[Quantum statistics|Quantum Statistics]] department.<br />\nSince 1984 he's been performing the duties of Professor, head of department of [[Theoretical Physics]] at [[Lviv University|Lviv State Ivan Franko University]].<ref name=autogenerated1 /><ref name=autogenerated2 /><ref name=autogenerated4>[http://www.rudenko.kiev.ua/persons/vakarchuk \u0412\u0430\u043a\u0430\u0440\u0447\u0443\u043a \u0418\u0432\u0430\u043d. \u0414\u041e\u0421\u042c\u0415 :: \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0442 \u0421\u0435\u0440\u0433\u0435\u044f \u0420\u0443\u0434\u0435\u043d\u043a\u043e<!-- Bot generated title -->]</ref><br />\nOn November 13, 1990 Ivan Vakarchuk was elected the rector of [[Lviv University|Lviv State University named after Ivan Franko]] (current name - Lviv National University named after Ivan Franko) and worked till November 2007.<br /> Later he held this office again between 2010 and 2013.<ref name=\"10945319Vakarchuk\"/>\nOn December 18, 2007 Vakarchuk was appointed the [[Ministry of Education and Science of Ukraine|Minister of education and science of Ukraine]].<ref name=autogenerated3 /><ref name=autogenerated2 /><ref name=\"10945319Vakarchuk\"/>\n\n===Achievements in science===\n\nIvan Vakarchuk has the rank of Doctor of Physical and Mathematical Sciences, Professor, PhD with the thesis: \"Application of the method of displacements and collective variables in the study of interacting Bose particles near absolute zero\" (Institute for Theoretical Physics, Academy of Sciences of [[Ukrainian SSR|USSR]], 1974) doctoral thesis on \"Microscopic theory of Bose liquid\" (Institute for Theoretical Physics, USSR Academy of Sciences, 1980).\n\nA distinctive feature of professor Ivan Vakarchuk was the amplitude of his scientific interests: physics of quantum liquids, theory of phase transitions and critical phenomena, physics of disordered systems, magnetic systems, physics, mathematical methods in theoretical physics, fundamental problems of quantum mechanics and quantum computer sciences, geophysics, general relativity theory, cosmology, philosophy of science. In each of these fields he proposed new original approaches to the study of various physical phenomena and processes. The amplitude of his scientific interests allowed him to apply methods, which he invented to study different phenomena.\n\nIvan Vakarchuk paid particular attention to the latest achievements in science and philosophy of science issues, including the relationship between research methods of natural sciences and humanities, identifying common math mechanisms that \"manage\" the processes occurring in the humanitarian and social spheres.<br />\nHe is the author of over 240 scientific papers, and author of the books  \"Lectures on General Relativity\" (1991), \"Quantum Mechanics\" (1998, 2004, 2007, 2012) \"Introduction to the many-body problem\" (1999) and \"The Theory of Stellar Spectra\" (2003).<ref>[http://www.ktf.franko.lviv.ua/cgi-bin/select.cgi?%C2%E0%EA%E0%F0%F7%F3%EA%20%B2.|%C2%E0%EA%E0%F0%F7%F3%EA%20%C8.|Vakarchuk%20I.|Wakarczuk%20I. Complete Bibliography of the Department for Theoretical Physics, University of Lviv (since 1872)]</ref>\n\n==Titles and awards==\n\n* Founder and Editor-in-chief of the \"Journal of Physics Research\" and the popular science magazine \"World of Physics\"\n* Member of the Commission of state awards and [[heraldry]]\n* Member of the Committee on State Prizes of Ukraine in science and technology\n* Vice-President of the Union of rectors of higher educational establishments of Ukraine\n* Member of the editorial board of the journal \"Higher Education in Ukraine\"\n* Chairman of the board of the Lviv Regional Peace Council\n* President of the Ukrainian Physical Society\n* Honored Worker of Science and Technology of Ukraine<ref name=\"10945319Vakarchuk\"/>\n* Member of the Council on Science and Science and Technology Policy under the President of Ukraine\n* Awardee of the State Prize of Ukraine in science and technology\n* Awardee of Barabashov prize, National Academy of Sciences\n* Honorary Doctor of the [[Cracow Pedagogical University|Cracow Pedagogical Academy]]\n* Member of the organizing committee for the preparation and celebration of the 1020th anniversary of [[Baptism of Kievan Rus'|Baptism of Kiev Rus]]\n* Diploma by the Presidium of the Academy of Sciences of Ukraine \"Expert of Public Education in [[Ukrainian SSR|USSR]]\"\n* Diploma of Merit by the [[Verkhovna Rada of Ukraine]]\n* [[Order of Merit (Ukraine)|Order of Merit]], 3rd class (February 2005)\n* [[Hero of Ukraine]] (2007)<ref name=autogenerated1 /><ref name=autogenerated5 /><ref name=\"10945319Vakarchuk\"/>\n\n==Personal life==\n===Family===\n\nIvan Vakarchuk was married, his wife Svetlana (b. 1947) is teacher of [[physics]], assistant professor of Lviv National Academy of [[veterinary medicine]] named after S.Gzhitsky.<ref name=autogenerated4 /> <br />\nThey had two sons: Svyatoslav Vakarchuk (b. 1975), who is a frontman of \"Okean Elzy\", the famous Ukrainian rock band,<ref>{{Cite web |url=http://www.okeanelzy.com/en/oe/m6/ |title=Okean Elzy<!-- Bot generated title --> |access-date=2011-12-01 |archive-url=https://web.archive.org/web/20111005163304/http://www.okeanelzy.com/en/oe/m6/ |archive-date=2011-10-05 |url-status=dead }}</ref> and Oleg (b. 1980) - a bank employee.<ref name=autogenerated4 />\n===Death===\nVakarchuk died on 4 April 2020 at the age of 73 in [[Lviv]].<ref name=\"10945319Vakarchuk\"/> The causes of death was not reported.<ref name=\"10945319Vakarchuk\"/>\n==Interesting facts==\n* Ivan Vakarchuk was born in the same village as [[Anatoliy Kinakh]]\n* In 2008, Ivan Vakarchuk took the 50th place in the Top 100 of the most influential Ukrainians, according to Reporter magazine\n* During the [[2004 Ukrainian presidential election|2004' presidential elections]], he openly called students to vote for [[Viktor Yushchenko]]<ref name=autogenerated4 />\n\n== References ==\n{{Reflist|2}}\n\n== External links ==\n* [https://web.archive.org/web/20120513154657/http://www.franko.lviv.ua/general/vakarchuk.htm Biography of Professor Ivan Vakarchuk at the official web site of Lviv National University]\n\n{{Ministers of Education and Sciences of Ukraine}}\n{{Authority control}}\n\n{{DEFAULTSORT:Vakarchuk, Ivan}}\n[[Category:1947 births]]\n[[Category:2020 deaths]]\n[[Category:Education and science ministers of Ukraine]]\n[[Category:Chevaliers of the Order of Merit (Ukraine)]]\n[[Category:People from Edine\u021b District]]\n[[Category:Moldovan emigrants to Ukraine]]\n[[Category:Ukrainian physicists]]\n[[Category:Ukrainian scientists]]\n[[Category:University of Lviv alumni]]\n[[Category:Recipients of the title of Hero of Ukraine]]\n[[Category:People of the Euromaidan]]\n[[Category:University of Lviv rectors]]\n[[Category:Soviet physicists]]\n[[Category:20th-century physicists]]\n", "name_user": "Kbabej", "label": "safe", "comment": "Bands do not need quotation marks", "url_page": "//en.wikipedia.org/wiki/Ivan_Vakarchuk"}
