{"title_page": "Haxe", "text_new": "{{distinguish|Hack (programming language)}}\n{{Infobox programming language\n| name = Haxe\n| logo = Haxe logo.svg\n| paradigm = [[Programming paradigm#Multi-paradigm|Multi-paradigm]]\n| released = {{Start date and age|2005}}\n| license = [[GNU General Public License|GPL]] 2.0, library: [[MIT License|MIT]]\n| developer = Haxe Foundation\n| latest release version = 4.0.5<ref>{{cite web |url=http://haxe.org/download/list/|title=Haxe Download List}}</ref>\n| latest release date = {{Start date and age|2019|12|17}}\n| latest preview version = 4.0.0-rc.5\n| latest preview date = {{Start date and age|2019|09|12}}<ref>https://haxe.org/download/list/</ref>\n| typing = [[Type system|Static]], [[Dynamic typing|dynamic]] via annotations, [[Nominal type system|nominal]]\n| operating system = [[Android (operating system)|Android]], [[iOS]]; [[Linux]], [[macOS]], [[Microsoft Windows|Windows]]\n| platform = [[ARM architecture|ARM]]; [[IA-32]], [[x86-64]]\n| file ext = .hx, .hxml\n| website = {{URL|haxe.org}}\n| influenced by = [[ActionScript]], [[OCaml]], [[Java (programming language)|Java]]\n| programming language = [[OCaml]]\n}}\n'''Haxe''' is an open source high-level [[cross-platform]] [[Programming paradigm|multi-paradigm]] [[programming language]] and [[compiler]] that can produce applications and source code, for many different [[computing platform]]s, from one code-base.<ref name=\"Haxe-capitalisation\">{{cite web |url=https://groups.google.com/d/topic/haxelang/O7PB-ZrX4i4/discussion |title=Nicolas' announcement of spelling change on Haxe official mail list}}</ref><ref name=\"b2\">{{cite book |first=Franco |last=Ponticelli |date=2008-02-11 |title=Professional haXe and Neko |url=https://books.google.com/books?id=nkReDryjU3UC&dq=haxe&hl=en&sa=X&ved=0CCoQ6AEwAmoVChMIobHLuPaUxwIVy9SOCh2PWAFf |location= |publisher=Wiley |isbn=0470122137 |access-date= }}</ref><ref name=\"b5\">{{cite book |first=Michael |last=Ivanov |date=2011-05-24 |title=Away3D 3.6 Cookbook |url=https://books.google.com/books?id=4yAcDM-qQDsC&pg=PT631&dq=haxe+flash&hl=en&sa=X#v=onepage&q=haxe%20flash&f=false |location= |publisher=Packt Publishing Ltd |isbn=1849512817 |access-date= }}</ref><ref name=\"gs_consoles\">{{cite web|url=http://gamasutra.com/blogs/LarsDoucet/20150603/245099/HaxeOpenFL_for_home_game_consoles.php|title=Haxe/OpenFL for home game consoles|first=Lars|last=Doucet|website=Gamasutra|date=2015-06-03}}</ref> It is [[free and open-source software]], distributed under the [[GNU General Public License]] (GPL) version 2, and the standard [[Library (computing)|library]] under the [[MIT License]].\n\nHaxe includes a set of common functions that are supported [[Cross-platform|across all platforms]], such as [[Integer (computer science)|numeric data types]], [[String (computer science)|text]], [[Array data type|array]]s, [[Binary file|binary]] and some common [[file format]]s.<ref name=\"b2\"/><ref name=\"hfeatures\">[http://haxe.org/documentation/introduction/stdlib-introduction.html#general-purpose-api Introduction to the Haxe Standard Library], Haxe Docs</ref> Haxe also includes platform-specific [[application programming interface]] (API) for [[Adobe Flash]], C++, PHP and other languages.<ref name=\"b2\"/><ref>[http://haxe.org/documentation/introduction/stdlib-introduction.html#target-apis Target Specific APIs, Introduction to the Haxe Standard Library], Haxe Docs</ref> [[OpenFL]], [http://kha.tech/ Kha], [https://heaps.io/ Heaps] and [https://github.com/aduros/flambe/ Flambe] are popular Haxe frameworks that enable creating multi-platform content from one codebase.<ref name=\"gs_adobe\">{{cite web|url=http://www.gamasutra.com/blogs/LarsDoucet/20140624/219674/Dear_Adobe_Support_Haxe_save_your_Tools.php|title=Dear Adobe: Support Haxe, save your Tools|first=Lars|last=Doucet|website=Gamasutra|date=2014-06-24}}</ref>\n\nHaxe originated with the idea of supporting [[client-side]] and [[server-side]] programming in one language, and simplifying the communication logic between them.<ref name=\"haxe-interview\">{{cite journal|url=http://ncannasse.fr/blog/haxe_interview |title=Haxe Interview|publisher=Io Programmo|date=2009-04-01|pages=1\u20136}}</ref><ref name=\"b1\">{{cite book |first1=John |last1=Grden |first2=Patrick |last2=Mineault |first3=Aral |last3=Balkan |first4=Marc |last4=Hughes |first5=Wade |last5=Arnold |date=2008-07-16 |title=The Essential Guide to Open Source Flash Development |url= https://books.google.com/books?id=MNo27PxpM_AC&pg=PA231&dq=haxe+flash&hl=en&sa=X#v=onepage&q=haxe%20flash&f=false|location= |publisher=Apress |isbn=1430209941 |access-date= |page=Chapter 9 (Using Haxe)}}</ref><ref name=\"b4\">{{cite book |first=Matt |last=Fisher |date=2013-01-01 |title=HTML5 for Flash Developers |url=https://books.google.com/books?id=O2DWzWRnQPwC&pg=PT377&dq=haxe+flash&hl=en&sa=X#v=onepage&q=haxe%20flash&f=false |location= |publisher=Packt Publishing Ltd |isbn=1849693331 |access-date= }}</ref> Code written in the Haxe language can be [[source-to-source compiler|source-to-source compiled]] into [[ActionScript#ActionScript 3.0|ActionScript 3]], [[JavaScript]], [[Java (programming language)|Java]], [[C++]], [[C Sharp (programming language)|C#]], [[PHP]], [[Python (programming language)|Python]], [[Lua (programming language)|Lua]]<ref>{{Cite web|url=https://haxe.org/blog/hello-lua|title=Hello Lua! - Haxe|access-date=2016-07-09}}</ref> and [[Node.js]].<ref name=\"b2\"/><ref name=\"hfeatures\"/><ref>{{Cite web|url=http://lib.haxe.org/p/hxnodejs|title=hxnodejs (4.0.9)|access-date=2016-07-09}}</ref><ref name=\"haxeiphone\">[http://gamehaxe.com/2009/07/28/haxe-iphone-cpp-at-last/ Haxe, iPhone & C++ At Last], GameHaxe website</ref> Haxe can also directly compile [[SWF]], HashLink and [[Neko (programming language)|Neko]] [[bytecode]].\n\nMany popular [[Integrated_development_environment | IDE]]s and [[Source_code_editor | source code editors]] have [[Comparison of IDE choices for Haxe programmers|support available for Haxe development]].<ref>[https://haxe.org/documentation/introduction/editors-and-ides.html List of IDEs supporting Haxe], Haxe Foundation</ref>  No particular development environment or tool set is officially recommended by the Haxe Foundation, although [[VS Code]] and [[IntelliJ IDEA]] have extensions to support Haxe development. The core functionalities of [[syntax highlighting]], [[code completion]], [[refactoring]], [[debugging]], etc., are available in various degree.\n\nTo help leverage existing code, the Haxe community has created source code converters for ActionScript 3 to Haxe<ref>[https://github.com/HaxeFoundation/as3hx as3hx], AS3 to Haxe converter, Haxe source code repository</ref> and C# to Haxe.<ref>[http://cs2hx.codeplex.com/ CS2HX - C# to haXe converter], CodePlex project hosting</ref> The Haxe compiler can also output Haxe into standalone ActionScript 3, C++, C#, Java, PHP, Python and Lua source code,<ref>[http://haxe.org/documentation/introduction/compiler-targets.html Haxe Compiler Targets], Haxe Docs</ref> which can then be pulled out of the Haxe ecosystem and developed with traditional workflows.\n\nMajor users of Haxe include [[BBC]], [[The Coca-Cola Company|Coca-Cola]], [[Disney]], [[Hasbro]], [[Mattel]], [[Nickelodeon]], [[Prezi]], [[TiVo]], [[Toyota]], and [[Zynga]].<ref>[http://haxe.org/use-cases/who-uses-haxe.html Companies using Haxe], Haxe Docs</ref><ref name=\"gs_adobe\" />\n\n==History==\nDevelopment of Haxe began in October 2005.<ref name=\"Haxe-changelog\">{{cite web |url=https://github.com/HaxeFoundation/haxe/blob/3.2.0/extra/CHANGES.txt|title=Haxe 3.2 Release|publisher=Github}}</ref> The first [[Software release life cycle#Beta|beta version]] was released in February 2006. Haxe 1.0 was released in April 2006, with support for [[Adobe Flash]], [[JavaScript]], and [[Neko (programming language)|Neko]] programs. Support for PHP was added in 2008, and C++ was added in 2009. Modern platforms such as C# and Java were added with a compiler overhaul in 2012.\n\nHaxe was developed by Nicolas Cannasse and other contributors, and was originally named ''haXe'' because it was short, simple, and \"has an X inside\", which the author asserts humorously is needed to make any new technology a success.<ref name=\"naming-post\">{{cite web |url=http://lists.motion-twin.com/pipermail/haxe/2007-March/007897.html |title=Haxe mailing list post on naming |url-status=dead |archiveurl=https://web.archive.org/web/20070328232003/http://lists.motion-twin.com/pipermail/haxe/2007-March/007897.html |archivedate=2007-03-28 }}</ref>\n\nHaxe is the successor to the open-source [[ActionScript]] 2 compiler [[MTASC]], also built by Nicolas Cannasse,<ref name=\"b1\"/><ref name=\"mtasc\">[http://www.mtasc.org MTASC Compiler], MTASC website</ref> and is released under the [[GNU General Public License]] version 2 or later.<ref name=\"license-page\">{{cite web |url=http://haxe.org/doc/license |title=Haxe license page |url-status=dead |archiveurl=https://web.archive.org/web/20120512000007/http://haxe.org/doc/license |archivedate=2012-05-12 }}</ref>\n\n==Compiler==\nThe Haxe language can compile into [[bytecode]] for different [[virtual machine]]s such as the [[Adobe Flash Player]], HashLink and [[Neko (programming language)|Neko]], and can generate [[source code]] in [[C Sharp (programming language)|C#]], [[C++]], [[ActionScript#ActionScript 3.0|ActionScript 3]], [[JavaScript]] and [[Lua (programming language)|Lua]]\n\nThe Haxe compiler is an [[optimizing compiler]], and uses [[Inline expansion|function inlining]], [[constant folding]], and [[dead code elimination]] (DCE) to optimize the run-time performance of compiled programs.\n\nThis strategy of compiling to multiple source code languages is inspired by the [[write once, run anywhere]] paradigm. It also allows the programmer to choose the best platform for the job. Typical Haxe programs run identically on all platforms, but developers can specify platform-specific code and use [[conditional compilation]] to prevent it from compiling on other platforms.\n\nThe following table documents platform and language support in Haxe. \n\n{| class=\"wikitable sortable\"\n|-\n! scope=\"col\"| Code generator\n! scope=\"col\"| Output\n! scope=\"col\"| Platform\n! scope=\"col\"| Use\n! scope=\"col\"| Since Haxe version\n|-\n! scope=\"row\"| [[ActionScript#ActionScript 3.0|ActionScript 3]]<ref name=\"hfeatures\"/>\n| source\n| [[Adobe Flash Player]] 9+, [[Adobe AIR]]\n| Server, desktop\n| 2007 (1.12)\n|-\n! scope=\"row\"| [[C++]] (hxcpp)<ref name=\"hfeatures\"/>\n| source\n| Windows, Linux, macOS\n| Server, desktop, CLI\n| 2009 (2.04)\n|-\n! scope=\"row\"| [[C++]]\n| source\n| [[Android (operating system)|Android]],<ref name=\"android-target\">{{cite web |url=http://gamehaxe.com/2010/06/28/android-port-first-light/ |title=Blog post mentioning Android port progress}}</ref> Apple [[iOS]],<ref name=\"haxeiphone\"/> Palm [[webOS]]<ref name=\"webos\">{{cite web|url=https://developer.palm.com/distribution/viewtopic.php?f=70&t=8499 |title=How to get started with Haxe 2.06 and the webOS PDK [archived on WayBackMachine] |url-status=dead |archiveurl=https://web.archive.org/web/20141022194729/https://developer.palm.com/distribution/viewtopic.php?f=70&t=8499 |archivedate=October 22, 2014}}</ref>\n| Mobile\n| 2009 (2.04)\n|-\n! scope=\"row\"| [[C Sharp (programming language)|C#]]<ref name=\"hfeatures\"/>\n| source\n| [[.NET Framework]]\n| Server, desktop, mobile\n| 2012 (2.10)\n|-\n! scope=\"row\"| [[Java (programming language)|Java]]<ref name=\"hfeatures\"/>\n| source\n| [[Java (software platform)|Java]]\n| Server, desktop\n| 2012 (2.10)\n|-\n! scope=\"row\"| [[JavaScript]]<ref name=\"hfeatures\"/>\n| source\n| [[HTML5]], [[NodeJS]], [[PhoneGap]]\n| Server, desktop, browser, mobile\n| 2006\n|-\n! scope=\"row\"| [[Neko (programming language)|Neko]]<ref name=\"hfeatures\"/>\n| byte code\n| NekoVM\n| Server, desktop, CLI\n| 2005\n|-\n! scope=\"row\"| [[PHP]]<ref name=\"hfeatures\"/>\n| source\n| PHP\n| Server\n| 2008 (2.0)\n|-\n! scope=\"row\"| [[Python (programming language)|Python]]<ref name=\"hfeatures\"/>\n| source\n| Python\n| CLI, web, desktop\n| 2014 (3.2)\n|-\n! scope=\"row\"| [[Lua (programming language)|Lua]]<ref name=\"hfeatures\"/>\n| source\n| Lua\n| CLI, web, desktop, mobile\n| 2016 (3.3)\n|-\n! scope=\"row\"| SWF with ActionScript 3<ref name=\"hfeatures\"/>\n| byte code\n| Adobe Flash Player 9+, Adobe AIR, Tamarin\n| Desktop, browser, server\n| 2005\n|-\n|-\n! scope=\"row\"| HashLink<ref name=\"hfeatures\"/>\n| byte code\n| HashLink VM or HL/C (compile to C file)\n| Server, desktop, mobile (for C export)\n| 2016 (3.4)\n|-\n|}\n\n=== Language comparison ===\nHaxe has much in common with [[ActionScript#ActionScript 3.0|ActionScript 3]]. The Haxe compiler is developed in the [[OCaml]] language. No knowledge of OCaml is needed to develop applications using Haxe. Advantages to using Haxe over ActionScript 3 include:\n\n* More advanced language features such as [[extension methods]] and [[functional programming]]\n* Ability to target alternate platforms such as [[C Sharp (programming language)|C#.NET]]\n* Ability to target devices that support only C++<ref name=\"Haxe-intro\">{{cite web |url=http://haxe.org/doc/intro |title=Haxe introduction page |url-status=dead |archiveurl=https://web.archive.org/web/20120504021311/http://haxe.org/doc/intro |archivedate=2012-05-04 }}</ref>\n\n=== Performance comparison ===\nThe run-time performance of Haxe programs varies depending on the target platform:\n\n*[[ActionScript]] 3: Programs produced using the Haxe compiler usually run faster than programs produced using the [[Apache Flex]] SDK ActionScript Compiler.<ref>[http://www.splashdust.net/2009/10/as3-vs-haxe-performance/ AS3 vs haXe performance], SplashDust website</ref> However, using ActionScript Compiler 2 (ASC2) with manual optimizing,<ref>[http://wiki.starling-framework.org/manual/performance_optimization AS3 Performance Optimization], Starling Wiki</ref> many have reported comparable performance.\n*[[JavaScript]]: Programs produced using the Haxe compiler run at a comparable speed to handwritten JavaScript programs.<ref name=\"yal1\">{{cite web|url=http://yal.cc/answering-you-cant-make-good-html5-games-in-haxe/|title=On \"You can't make good HTML5 games in Haxe\"|publisher=Yellow After Life|date=2013-12-05|first=Vadim|last=Dyachenko}}</ref> [[OpenFL]] is a common Haxe-powered framework that can run in [[HTML5]]-JavaScript, but content built with OpenFL currently suffers performance issues on mobile devices.<ref name=\"yal1\"/>\n*[[C++]]: Programs produced using the Haxe compiler rival handwritten C++ programs, but C++ applications built with [[OpenFL]] suffer major performance issues.<ref>{{cite web|url=http://www.gamasutra.com/blogs/TalhaKaya/20140407/214965/OpenFL__Haxe_A_Bumpy_Start.php|title=OpenFL & Haxe, A Bumpy Start|first=Talha|last=Kaya|date=2014-07-04|website=Gamasutra}}</ref>\n\n==Language==\nHaxe is a general-purpose language supporting [[object-oriented programming]], [[generic programming]], and various [[functional programming]] constructs. Features such as [[iteration]]s, [[Exception handling|exceptions]], and [[Reflection (computer science)|code reflection]] are also built-in functions of the language and libraries.<ref name=\"language-reference\">{{cite web |url=http://Haxe.org/ref |title=Haxe language reference |url-status=dead |archiveurl=https://web.archive.org/web/20120502064424/http://haxe.org/ref |archivedate=2012-05-02 }}</ref> Unusual among programming languages, Haxe contains a type system which is both [[Strongly typed programming language|strong]] and [[Type system#Dynamic typing|dynamic]]. The compiler will check types [[Type inference|implicitly]] and give compile-time errors, but it also enables the programmer to bypass type-checking and rely on the target platform's dynamic type-handling.\n\nSince Haxe had its origins in [[ActionScript#ActionScript 3.0|ActionScript 3]], all of the existing Flash API can be used, although Haxe requires better-formed code and programming standards than Adobe compilers (for example, regarding [[Scope (programming)|scoping]] and [[Data type|data typing]]).\n\n===Type system===\n\nHaxe has a sophisticated and flexible type system. The type kinds it offers are classes, interfaces, function-method types, anonymous types, [[algebraic data type]]s (ADTs, called ''enum'' in Haxe), and abstract types. [[Polymorphism (computer science)|Parametric polymorphism]] is possible with classes, ADTs and function types, giving the language support for [[generic programming]] based on type erasure. This includes support for [[Variance (computer science)|variance]] in [[polymorphic function]]s, although not in [[type constructor]]s.\n\nThe [[type system]] is [[Static typing|static]] unless annotations for [[dynamic typing]] are present, for use with targets that support them. [[Type checking]] follows [[Nominal type system|nominal typing]] with the exception of [[anonymous type]]s where [[structural typing]] is used instead. Finally, [[type inference]] is supported, allowing for variable declarations without [[type annotation]]s.\n\n===Classes===\n\nClasses (keyword <code>class</code>) in Haxe are similar to those in Java or ActionScript 3. Their fields can be either methods, variables, or properties, each static or per instance respectively.\nHaxe supports the accessors <code>public</code> and <code>private</code>, and more advanced methods for access control (ACL, link) that are denoted using annotations. Methods and static constant variables can be inlined using the keyword <code>inline</code>.\n\n[[Protocol (object-oriented programming)|Interfaces]] in Haxe are very similar to those in, for example, Java.\n\n<syntaxhighlight lang=\"haxe\">\ninterface ICreature {\n    public var birth:Date;\n    public var name:String;\n\n    public function age():Int;\n}\n\nclass Fly implements ICreature {\n    public var birth:Date;\n    public var name:String;\n\t\n    public function age():Int return Date.now().getFullYear() - birth.getFullYear();\n}\n</syntaxhighlight>\n\n===Enumerated types===\n\n[[Enumerated type]]s are an important feature of the language; they can have type parameters and be recursive.<ref name=\"enum-reference\">{{cite web |url=http://haxe.org/ref/enums |title=Haxe reference detailing the use of enum |url-status=dead |archiveurl=https://web.archive.org/web/20120511193500/http://haxe.org/ref/enums |archivedate=2012-05-11 }}</ref> They provide basic support for [[algebraic data type]]s, allowing the inclusion of [[product type]]s, in a fashion similar to [[Haskell (programming language)|Haskell]] and [[ML (programming language)|ML]]. A <code>switch</code> expression can apply [[Pattern matching#Tree patterns|pattern matching]] to an enum value, allowing for elegant solutions to complex programming problems:\n\n<syntaxhighlight lang=\"haxe\">\nenum Color {\n    red;\n    green;\n    blue;\n    rgb( r : Int, g : Int, b : Int );\n}\n\nclass Colors {\n    static function toInt ( c : Color ) : Int {\n        return switch ( c ) {\n            case red: 0xFF0000;\n            case green: 0x00FF00;\n            case blue: 0x0000FF;\n            case rgb(r, g, b): (r << 16) | (g << 8) | b;\n        }\n    }\n    static function validCalls() {\n        var redint = toInt(Color.red);\n        var rgbint = toInt(Color.rgb(100, 100, 100));\n    }\n}</syntaxhighlight>\n\nExamples of parametric enum types are the Haxe standard library types Option<ref>{{cite web|title=haxe/Option.hx at development \u00b7 HaxeFoundation/haxe|url=https://github.com/HaxeFoundation/haxe/blob/development/std/haxe/ds/Option.hx|website=Github}}</ref> and Either:<ref>{{cite web|title=haxe/Either.hx at development \u00b7 HaxeFoundation/haxe|url=https://github.com/HaxeFoundation/haxe/blob/development/std/haxe/ds/Either.hx|website=Github}}</ref>\n\n<syntaxhighlight lang=\"haxe\">\nenum Option<T> {\n    Some(v:T);\n    None;\n}\n\nenum Either<L, R> {\n    Left(v:L);\n    Right(v:R);\n}\n</syntaxhighlight>\n\nHaxe also supports [[generalized algebraic data type]]s (GADTs).<ref>{{cite web|title=Language Features|url=http://haxe.org/documentation/introduction/language-features.html|website=Haxe - The Cross-platform Toolkit|publisher=Haxe Foundation|accessdate=30 April 2015}}</ref><ref>{{cite web|title=haxe/TestGADT.hx at development \u00b7 HaxeFoundation/haxe|url=https://github.com/HaxeFoundation/haxe/blob/development/tests/unit/src/unit/TestGADT.hx|website=Github}}</ref>\n\n===Anonymous types===\nAnonymous types are defined by denoting their structure explicitly, using a syntax that follows the mathematical record-based representation of a type. They can be used to implement structural typing for function arguments (see below), and can be given an alias with the keyword <code>typedef</code>:\n\n<syntaxhighlight lang=\"haxe\">\ntypedef AliasForAnon = { a:Int, b:String, c:Float->Void };\n</syntaxhighlight>\n\n===Function types===\nFunctions are first-class values in Haxe. Their type is denoted by using arrows between argument types, and between the argument type(s) and return type, as common in many functional languages. However, unlike in prominent examples like [[Haskell (programming language)|Haskell]] or the [[ML (programming language)|ML]] language family, not all functions are unary functions (functions with one argument only), and in Haxe, functions can't be [[Partial application|partially applied]] per default. Thus, the following type signatures have different semantics than in the aforementioned languages. The type F is a function that takes an Int and a String as arguments, and returns a value of type Float.\n\nThe same notation in a language with unary functions only, would refer to a function that takes an Int as argument, and returns a function of type String->Float.\n\nTypes F2 and F3 denote the same type. Both are binary functions that return a binary function of type F. For F3 the syntax to declare a function type within a function type is used.\n\n<syntaxhighlight lang=\"haxe\">\ntypedef F = Int->String->Float;\n\ntypedef F2 = Int->String->F;\ntypedef F3 = Int->String->(Int->String->Float);\n</syntaxhighlight>\n\n===Abstract types===\nThe latest addition to the Haxe type system is a concept termed ''abstract types''. As used in Haxe, this refers to something different from a conventional [[abstract type]]. They are used to make conversions between types implicit, allowing reuse of existing types for specific purposes, like implementing types for units of measurement. This greatly reduces the risk of mixing up values of the same underlying type, but with different meanings (e.g., miles vs. km).\n\nThe following example assumes that the metric system is the default, while a conversion to miles is needed for legacy data. Haxe can automatically convert miles to kilometers, but not the reverse.\n\n<syntaxhighlight lang=\"haxe\">\nabstract Kilometer(Float) {\n    public function new(v:Float) this = v;\n}\n \nabstract Mile(Float) {\n    public function new(v:Float) this = v;\n    @:to public inline function toKilometer():Kilometer return (new Kilometer (this / 0.62137));\n}\n \nclass Test {\n  static var km:Kilometer;\n  static function main(){\n    var one100Miles = new Mile(100);\n    km = one100Miles;\n \n    trace(km); // 160.935\n  }\n}\n</syntaxhighlight>\n\nAs the example shows, no explicit conversion is needed for the assignment \"km = one100Miles;\" to do the right thing.\n\n===Structural typing===\nIn many functional programming languages, [[structural typing]] plays a major role. Haxe employs it in the presence of anonymous types, using the [[Nominal type system|nominative typing]] of [[object-oriented programming]], when only named types are involved. Anonymous types in Haxe are analogous to the implicit interfaces of the language [[Go (programming language)|Go]] as to typing. In contrast with Go interfaces, it is possible to construct a value using an anonymous type.\n\n<syntaxhighlight lang=\"haxe\">\n\nclass FooBar {\n\n   public var foo:Int;\n   public var bar:String;\n\n   public function new(){ foo=1; bar=\"2\";}\n\n   function anyFooBar(v:{foo:Int,bar:String}) trace(v.foo);\n\n   static function test(){\n        var fb = new FooBar();\n        fb.anyFooBar(fb);\n        fb.anyFooBar({foo:123,bar:\"456\"});\n   }\n}\n</syntaxhighlight>\n\n==Internal architecture==\n\n==={{visible anchor|Compiler|Compiler implementation and performance}}===\nThe Haxe compiler is divided into one frontend and multiple backends. The frontend creates an [[abstract syntax tree]] (AST) from the source code, and performs type checking, [[macro expansion]], and optimization on the AST. The various backends [[Source-to-source compiler|translate]] the processed AST into source code or generate [[bytecode]], depending on their target.\n\nThe compiler is written in [[OCaml]]. It can be run in server-mode to provide code completion for [[integrated development environment]]s (IDEs) and maintain a cache, to further speed compiling.<ref>Server mode command-line: <code>haxe --wait [host:]port</code></ref>\n\n===Targets===\nIn Haxe, supported platforms are known as \"targets\", which are Haxe modules that provide access to core-APIs (language and bytecode targets), for the compiler-backends that are responsible for generating the respective code, and for runtimes with specific APIs that go beyond the core language support (platform-targets).\n\n*''Bytecode Targets'' produce [[executable]] [[byte code]] (Neko, SWF, SWF8), that can be executed directly by the runtime (Neko VM, [[Adobe Flash Player]], [[Adobe AIR]]). Haxe API and platform-specific API is available.\n*''Language Targets'' produce [[source code]] (AS3, C++, C#, Java). Most source code must be compiled by a third-party compiler to produce an executable file ([[Apache Flex|Flex SDK]], [[GNU Compiler Collection]] (GCC), [[Microsoft Visual C++]], [[.NET Framework]], [[Java compiler]]). JavaScript and PHP code can be run directly, since the runtime uses [[just-in-time compilation]]. Inline code written in the target language can be inserted at any point in the application, thereby supporting the entire platform API; even features missing from the Haxe wrapper API.\n*''External Modules'' are type definitions (<code>extern class</code> in Haxe) that describe the types of native APIs or libraries, so the Haxe compiler can use static type-checking.\n\n==See also==\n{{Portal|Free and open-source software}}\n* [[Comparison of IDE choices for Haxe programmers]]\n* [[Dart (programming language)]]\n* [[Nim (programming language)]]\n* [[Opa (programming language)]]\n* [[Clojure]]\n* [[CoffeeScript]]\n* [[TypeScript]]\n* [[Scala (programming language)]]\n* [[Vala (programming language)]]\n* [[Emscripten]]\n* [[OpenFL]]\n\n==References==\n{{Reflist|33em}}\n\n==External links==\n* {{Official website|haxe.org}}\n* HashLink website\n\n{{Adobe Flash}}\n{{JavaScript}}\n\n[[Category:Programming languages]]\n[[Category:Object-based programming languages]]\n[[Category:Functional languages]]\n[[Category:Multi-paradigm programming languages]]\n[[Category:OCaml software]]\n[[Category:Programming languages created in 2005]]\n[[Category:Software using the GPL license]]\n[[Category:Source-to-source compilers]]\n[[Category:Pattern matching programming languages]]\n[[Category:Statically typed programming languages]]\n", "text_old": "{{distinguish|Hack (programming language)}}\n{{Infobox programming language\n| name = Haxe\n| logo = Haxe logo.svg\n| paradigm = [[Programming paradigm#Multi-paradigm|Multi-paradigm]]\n| released = {{Start date and age|2005}}\n| license = [[GNU General Public License|GPL]] 2.0, library: [[MIT License|MIT]]\n| developer = Haxe Foundation\n| latest release version = 4.0.5<ref>{{cite web |url=http://haxe.org/download/list/|title=Haxe Download List}}</ref>\n| latest release date = {{Start date and age|2019|12|17}}\n| latest preview version = 4.0.0-rc.5\n| latest preview date = {{Start date and age|2019|09|12}}<ref>https://haxe.org/download/list/</ref>\n| typing = [[Type system|Static]], [[Dynamic typing|dynamic]] via annotations, [[Nominal type system|nominal]]\n| operating system = [[Android (operating system)|Android]], [[iOS]]; [[Linux]], [[macOS]], [[Microsoft Windows|Windows]]\n| platform = [[ARM architecture|ARM]]; [[IA-32]], [[x86-64]]\n| file ext = .hx, .hxml\n| website = {{URL|haxe.org}}\n| influenced by = [[ActionScript]], [[OCaml]], [[Java (programming language)|Java]]\n| programming language = [[OCaml]]\n}}\n'''Haxe''' is an open source high-level [[cross-platform]] [[Programming paradigm|multi-paradigm]] [[programming language]] and [[compiler]] that can produce applications and source code, for many different [[computing platform]]s, from one code-base.<ref name=\"Haxe-capitalisation\">{{cite web |url=https://groups.google.com/d/topic/haxelang/O7PB-ZrX4i4/discussion |title=Nicolas' announcement of spelling change on Haxe official mail list}}</ref><ref name=\"b2\">{{cite book |first=Franco |last=Ponticelli |date=2008-02-11 |title=Professional haXe and Neko |url=https://books.google.com/books?id=nkReDryjU3UC&dq=haxe&hl=en&sa=X&ved=0CCoQ6AEwAmoVChMIobHLuPaUxwIVy9SOCh2PWAFf |location= |publisher=Wiley |isbn=0470122137 |access-date= }}</ref><ref name=\"b5\">{{cite book |first=Michael |last=Ivanov |date=2011-05-24 |title=Away3D 3.6 Cookbook |url=https://books.google.com/books?id=4yAcDM-qQDsC&pg=PT631&dq=haxe+flash&hl=en&sa=X#v=onepage&q=haxe%20flash&f=false |location= |publisher=Packt Publishing Ltd |isbn=1849512817 |access-date= }}</ref><ref name=\"gs_consoles\">{{cite web|url=http://gamasutra.com/blogs/LarsDoucet/20150603/245099/HaxeOpenFL_for_home_game_consoles.php|title=Haxe/OpenFL for home game consoles|first=Lars|last=Doucet|website=Gamasutra|date=2015-06-03}}</ref> It is [[free and open-source software]], distributed under the [[GNU General Public License]] (GPL) version 2, and the standard [[Library (computing)|library]] under the [[MIT License]].\n\nHaxe includes a set of common functions that are supported [[Cross-platform|across all platforms]], such as [[Integer (computer science)|numeric data types]], [[String (computer science)|text]], [[Array data type|array]]s, [[Binary file|binary]] and some common [[file format]]s.<ref name=\"b2\"/><ref name=\"hfeatures\">[http://haxe.org/documentation/introduction/stdlib-introduction.html#general-purpose-api Introduction to the Haxe Standard Library], Haxe Docs</ref> Haxe also includes platform-specific [[application programming interface]] (API) for [[Adobe Flash]], C++, PHP and other languages.<ref name=\"b2\"/><ref>[http://haxe.org/documentation/introduction/stdlib-introduction.html#target-apis Target Specific APIs, Introduction to the Haxe Standard Library], Haxe Docs</ref> [[OpenFL]], [http://kha.tech/ Kha], [https://heaps.io/ Heaps] and [https://github.com/aduros/flambe/ Flambe] are popular Haxe frameworks that enable creating multi-platform content from one codebase.<ref name=\"gs_adobe\">{{cite web|url=http://www.gamasutra.com/blogs/LarsDoucet/20140624/219674/Dear_Adobe_Support_Haxe_save_your_Tools.php|title=Dear Adobe: Support Haxe, save your Tools|first=Lars|last=Doucet|website=Gamasutra|date=2014-06-24}}</ref>\n\nHaxe originated with the idea of supporting [[client-side]] and [[server-side]] programming in one language, and simplifying the communication logic between them.<ref name=\"haxe-interview\">{{cite journal|url=http://ncannasse.fr/blog/haxe_interview |title=Haxe Interview|publisher=Io Programmo|date=2009-04-01|pages=1\u20136}}</ref><ref name=\"b1\">{{cite book |first1=John |last1=Grden |first2=Patrick |last2=Mineault |first3=Aral |last3=Balkan |first4=Marc |last4=Hughes |first5=Wade |last5=Arnold |date=2008-07-16 |title=The Essential Guide to Open Source Flash Development |url= https://books.google.com/books?id=MNo27PxpM_AC&pg=PA231&dq=haxe+flash&hl=en&sa=X#v=onepage&q=haxe%20flash&f=false|location= |publisher=Apress |isbn=1430209941 |access-date= |page=Chapter 9 (Using Haxe)}}</ref><ref name=\"b4\">{{cite book |first=Matt |last=Fisher |date=2013-01-01 |title=HTML5 for Flash Developers |url=https://books.google.com/books?id=O2DWzWRnQPwC&pg=PT377&dq=haxe+flash&hl=en&sa=X#v=onepage&q=haxe%20flash&f=false |location= |publisher=Packt Publishing Ltd |isbn=1849693331 |access-date= }}</ref> Code written in the Haxe language can be [[source-to-source compiler|source-to-source compiled]] into [[ActionScript#ActionScript 3.0|ActionScript 3]], [[JavaScript]], [[Java (programming language)|Java]], [[C++]], [[C Sharp (programming language)|C#]], [[PHP]], [[Python (programming language)|Python]], [[Lua (programming language)|Lua]]<ref>{{Cite web|url=https://haxe.org/blog/hello-lua|title=Hello Lua! - Haxe|access-date=2016-07-09}}</ref> and [[Node.js]].<ref name=\"b2\"/><ref name=\"hfeatures\"/><ref>{{Cite web|url=http://lib.haxe.org/p/hxnodejs|title=hxnodejs (4.0.9)|access-date=2016-07-09}}</ref><ref name=\"haxeiphone\">[http://gamehaxe.com/2009/07/28/haxe-iphone-cpp-at-last/ Haxe, iPhone & C++ At Last], GameHaxe website</ref> Haxe can also directly compile [[SWF]], HashLink and [[Neko (programming language)|Neko]] [[bytecode]].\n\nMany popular [[Integrated_development_environment | IDE]]s and [[Source_code_editor | source code editors]] have [[Comparison of IDE choices for Haxe programmers|support available for Haxe development]].<ref>[https://haxe.org/documentation/introduction/editors-and-ides.html List of IDEs supporting Haxe], Haxe Foundation</ref>  No particular development environment or tool set is officially recommended by the Haxe Foundation, although [[VS Code]] and [[IntelliJ IDEA]] have extensions to support Haxe development. The core functionalities of [[syntax highlighting]], [[code completion]], [[refactoring]], [[debugging]], etc., are available in various degree.\n\nTo help leverage existing code, the Haxe community has created source code converters for ActionScript 3 to Haxe<ref>[https://github.com/HaxeFoundation/as3hx as3hx], AS3 to Haxe converter, Haxe source code repository</ref> and C# to Haxe<ref>[http://cs2hx.codeplex.com/ CS2HX - C# to haXe converter], CodePlex project hosting</ref> The Haxe compiler can also output Haxe into standalone ActionScript 3, C++, C#, Java, PHP, Python and Lua source code,<ref>[http://haxe.org/documentation/introduction/compiler-targets.html Haxe Compiler Targets], Haxe Docs</ref> which can then be pulled out of the Haxe ecosystem and developed with traditional workflows.\n\nMajor users of Haxe include [[BBC]], [[The Coca-Cola Company|Coca-Cola]], [[Disney]], [[Hasbro]], [[Mattel]], [[Nickelodeon]], [[Prezi]], [[TiVo]], [[Toyota]], and [[Zynga]].<ref>[http://haxe.org/use-cases/who-uses-haxe.html Companies using Haxe], Haxe Docs</ref><ref name=\"gs_adobe\" />\n\n==History==\nDevelopment of Haxe began in October 2005.<ref name=\"Haxe-changelog\">{{cite web |url=https://github.com/HaxeFoundation/haxe/blob/3.2.0/extra/CHANGES.txt|title=Haxe 3.2 Release|publisher=Github}}</ref> The first [[Software release life cycle#Beta|beta version]] was released in February 2006. Haxe 1.0 was released in April 2006, with support for [[Adobe Flash]], [[JavaScript]], and [[Neko (programming language)|Neko]] programs. Support for PHP was added in 2008, and C++ was added in 2009. Modern platforms such as C# and Java were added with a compiler overhaul in 2012.\n\nHaxe was developed by Nicolas Cannasse and other contributors, and was originally named ''haXe'' because it was short, simple, and \"has an X inside\", which the author asserts humorously is needed to make any new technology a success.<ref name=\"naming-post\">{{cite web |url=http://lists.motion-twin.com/pipermail/haxe/2007-March/007897.html |title=Haxe mailing list post on naming |url-status=dead |archiveurl=https://web.archive.org/web/20070328232003/http://lists.motion-twin.com/pipermail/haxe/2007-March/007897.html |archivedate=2007-03-28 }}</ref>\n\nHaxe is the successor to the open-source [[ActionScript]] 2 compiler [[MTASC]], also built by Nicolas Cannasse,<ref name=\"b1\"/><ref name=\"mtasc\">[http://www.mtasc.org MTASC Compiler], MTASC website</ref> and is released under the [[GNU General Public License]] version 2 or later.<ref name=\"license-page\">{{cite web |url=http://haxe.org/doc/license |title=Haxe license page |url-status=dead |archiveurl=https://web.archive.org/web/20120512000007/http://haxe.org/doc/license |archivedate=2012-05-12 }}</ref>\n\n==Compiler==\nThe Haxe language can compile into [[bytecode]] for different [[virtual machine]]s such as the [[Adobe Flash Player]], HashLink and [[Neko (programming language)|Neko]], and can generate [[source code]] in [[C Sharp (programming language)|C#]], [[C++]], [[ActionScript#ActionScript 3.0|ActionScript 3]], [[JavaScript]] and [[Lua (programming language)|Lua]]\n\nThe Haxe compiler is an [[optimizing compiler]], and uses [[Inline expansion|function inlining]], [[constant folding]], and [[dead code elimination]] (DCE) to optimize the run-time performance of compiled programs.\n\nThis strategy of compiling to multiple source code languages is inspired by the [[write once, run anywhere]] paradigm. It also allows the programmer to choose the best platform for the job. Typical Haxe programs run identically on all platforms, but developers can specify platform-specific code and use [[conditional compilation]] to prevent it from compiling on other platforms.\n\nThe following table documents platform and language support in Haxe. \n\n{| class=\"wikitable sortable\"\n|-\n! scope=\"col\"| Code generator\n! scope=\"col\"| Output\n! scope=\"col\"| Platform\n! scope=\"col\"| Use\n! scope=\"col\"| Since Haxe version\n|-\n! scope=\"row\"| [[ActionScript#ActionScript 3.0|ActionScript 3]]<ref name=\"hfeatures\"/>\n| source\n| [[Adobe Flash Player]] 9+, [[Adobe AIR]]\n| Server, desktop\n| 2007 (1.12)\n|-\n! scope=\"row\"| [[C++]] (hxcpp)<ref name=\"hfeatures\"/>\n| source\n| Windows, Linux, macOS\n| Server, desktop, CLI\n| 2009 (2.04)\n|-\n! scope=\"row\"| [[C++]]\n| source\n| [[Android (operating system)|Android]],<ref name=\"android-target\">{{cite web |url=http://gamehaxe.com/2010/06/28/android-port-first-light/ |title=Blog post mentioning Android port progress}}</ref> Apple [[iOS]],<ref name=\"haxeiphone\"/> Palm [[webOS]]<ref name=\"webos\">{{cite web|url=https://developer.palm.com/distribution/viewtopic.php?f=70&t=8499 |title=How to get started with Haxe 2.06 and the webOS PDK [archived on WayBackMachine] |url-status=dead |archiveurl=https://web.archive.org/web/20141022194729/https://developer.palm.com/distribution/viewtopic.php?f=70&t=8499 |archivedate=October 22, 2014}}</ref>\n| Mobile\n| 2009 (2.04)\n|-\n! scope=\"row\"| [[C Sharp (programming language)|C#]]<ref name=\"hfeatures\"/>\n| source\n| [[.NET Framework]]\n| Server, desktop, mobile\n| 2012 (2.10)\n|-\n! scope=\"row\"| [[Java (programming language)|Java]]<ref name=\"hfeatures\"/>\n| source\n| [[Java (software platform)|Java]]\n| Server, desktop\n| 2012 (2.10)\n|-\n! scope=\"row\"| [[JavaScript]]<ref name=\"hfeatures\"/>\n| source\n| [[HTML5]], [[NodeJS]], [[PhoneGap]]\n| Server, desktop, browser, mobile\n| 2006\n|-\n! scope=\"row\"| [[Neko (programming language)|Neko]]<ref name=\"hfeatures\"/>\n| byte code\n| NekoVM\n| Server, desktop, CLI\n| 2005\n|-\n! scope=\"row\"| [[PHP]]<ref name=\"hfeatures\"/>\n| source\n| PHP\n| Server\n| 2008 (2.0)\n|-\n! scope=\"row\"| [[Python (programming language)|Python]]<ref name=\"hfeatures\"/>\n| source\n| Python\n| CLI, web, desktop\n| 2014 (3.2)\n|-\n! scope=\"row\"| [[Lua (programming language)|Lua]]<ref name=\"hfeatures\"/>\n| source\n| Lua\n| CLI, web, desktop, mobile\n| 2016 (3.3)\n|-\n! scope=\"row\"| SWF with ActionScript 3<ref name=\"hfeatures\"/>\n| byte code\n| Adobe Flash Player 9+, Adobe AIR, Tamarin\n| Desktop, browser, server\n| 2005\n|-\n|-\n! scope=\"row\"| HashLink<ref name=\"hfeatures\"/>\n| byte code\n| HashLink VM or HL/C (compile to C file)\n| Server, desktop, mobile (for C export)\n| 2016 (3.4)\n|-\n|}\n\n=== Language comparison ===\nHaxe has much in common with [[ActionScript#ActionScript 3.0|ActionScript 3]]. The Haxe compiler is developed in the [[OCaml]] language. No knowledge of OCaml is needed to develop applications using Haxe. Advantages to using Haxe over ActionScript 3 include:\n\n* More advanced language features such as [[extension methods]] and [[functional programming]]\n* Ability to target alternate platforms such as [[C Sharp (programming language)|C#.NET]]\n* Ability to target devices that support only C++<ref name=\"Haxe-intro\">{{cite web |url=http://haxe.org/doc/intro |title=Haxe introduction page |url-status=dead |archiveurl=https://web.archive.org/web/20120504021311/http://haxe.org/doc/intro |archivedate=2012-05-04 }}</ref>\n\n=== Performance comparison ===\nThe run-time performance of Haxe programs varies depending on the target platform:\n\n*[[ActionScript]] 3: Programs produced using the Haxe compiler usually run faster than programs produced using the [[Apache Flex]] SDK ActionScript Compiler.<ref>[http://www.splashdust.net/2009/10/as3-vs-haxe-performance/ AS3 vs haXe performance], SplashDust website</ref> However, using ActionScript Compiler 2 (ASC2) with manual optimizing,<ref>[http://wiki.starling-framework.org/manual/performance_optimization AS3 Performance Optimization], Starling Wiki</ref> many have reported comparable performance.\n*[[JavaScript]]: Programs produced using the Haxe compiler run at a comparable speed to handwritten JavaScript programs.<ref name=\"yal1\">{{cite web|url=http://yal.cc/answering-you-cant-make-good-html5-games-in-haxe/|title=On \"You can't make good HTML5 games in Haxe\"|publisher=Yellow After Life|date=2013-12-05|first=Vadim|last=Dyachenko}}</ref> [[OpenFL]] is a common Haxe-powered framework that can run in [[HTML5]]-JavaScript, but content built with OpenFL currently suffers performance issues on mobile devices.<ref name=\"yal1\"/>\n*[[C++]]: Programs produced using the Haxe compiler rival handwritten C++ programs, but C++ applications built with [[OpenFL]] suffer major performance issues.<ref>{{cite web|url=http://www.gamasutra.com/blogs/TalhaKaya/20140407/214965/OpenFL__Haxe_A_Bumpy_Start.php|title=OpenFL & Haxe, A Bumpy Start|first=Talha|last=Kaya|date=2014-07-04|website=Gamasutra}}</ref>\n\n==Language==\nHaxe is a general-purpose language supporting [[object-oriented programming]], [[generic programming]], and various [[functional programming]] constructs. Features such as [[iteration]]s, [[Exception handling|exceptions]], and [[Reflection (computer science)|code reflection]] are also built-in functions of the language and libraries.<ref name=\"language-reference\">{{cite web |url=http://Haxe.org/ref |title=Haxe language reference |url-status=dead |archiveurl=https://web.archive.org/web/20120502064424/http://haxe.org/ref |archivedate=2012-05-02 }}</ref> Unusual among programming languages, Haxe contains a type system which is both [[Strongly typed programming language|strong]] and [[Type system#Dynamic typing|dynamic]]. The compiler will check types [[Type inference|implicitly]] and give compile-time errors, but it also enables the programmer to bypass type-checking and rely on the target platform's dynamic type-handling.\n\nSince Haxe had its origins in [[ActionScript#ActionScript 3.0|ActionScript 3]], all of the existing Flash API can be used, although Haxe requires better-formed code and programming standards than Adobe compilers (for example, regarding [[Scope (programming)|scoping]] and [[Data type|data typing]]).\n\n===Type system===\n\nHaxe has a sophisticated and flexible type system. The type kinds it offers are classes, interfaces, function-method types, anonymous types, [[algebraic data type]]s (ADTs, called ''enum'' in Haxe), and abstract types. [[Polymorphism (computer science)|Parametric polymorphism]] is possible with classes, ADTs and function types, giving the language support for [[generic programming]] based on type erasure. This includes support for [[Variance (computer science)|variance]] in [[polymorphic function]]s, although not in [[type constructor]]s.\n\nThe [[type system]] is [[Static typing|static]] unless annotations for [[dynamic typing]] are present, for use with targets that support them. [[Type checking]] follows [[Nominal type system|nominal typing]] with the exception of [[anonymous type]]s where [[structural typing]] is used instead. Finally, [[type inference]] is supported, allowing for variable declarations without [[type annotation]]s.\n\n===Classes===\n\nClasses (keyword <code>class</code>) in Haxe are similar to those in Java or ActionScript 3. Their fields can be either methods, variables, or properties, each static or per instance respectively.\nHaxe supports the accessors <code>public</code> and <code>private</code>, and more advanced methods for access control (ACL, link) that are denoted using annotations. Methods and static constant variables can be inlined using the keyword <code>inline</code>.\n\n[[Protocol (object-oriented programming)|Interfaces]] in Haxe are very similar to those in, for example, Java.\n\n<syntaxhighlight lang=\"haxe\">\ninterface ICreature {\n    public var birth:Date;\n    public var name:String;\n\n    public function age():Int;\n}\n\nclass Fly implements ICreature {\n    public var birth:Date;\n    public var name:String;\n\t\n    public function age():Int return Date.now().getFullYear() - birth.getFullYear();\n}\n</syntaxhighlight>\n\n===Enumerated types===\n\n[[Enumerated type]]s are an important feature of the language; they can have type parameters and be recursive.<ref name=\"enum-reference\">{{cite web |url=http://haxe.org/ref/enums |title=Haxe reference detailing the use of enum |url-status=dead |archiveurl=https://web.archive.org/web/20120511193500/http://haxe.org/ref/enums |archivedate=2012-05-11 }}</ref> They provide basic support for [[algebraic data type]]s, allowing the inclusion of [[product type]]s, in a fashion similar to [[Haskell (programming language)|Haskell]] and [[ML (programming language)|ML]]. A <code>switch</code> expression can apply [[Pattern matching#Tree patterns|pattern matching]] to an enum value, allowing for elegant solutions to complex programming problems:\n\n<syntaxhighlight lang=\"haxe\">\nenum Color {\n    red;\n    green;\n    blue;\n    rgb( r : Int, g : Int, b : Int );\n}\n\nclass Colors {\n    static function toInt ( c : Color ) : Int {\n        return switch ( c ) {\n            case red: 0xFF0000;\n            case green: 0x00FF00;\n            case blue: 0x0000FF;\n            case rgb(r, g, b): (r << 16) | (g << 8) | b;\n        }\n    }\n    static function validCalls() {\n        var redint = toInt(Color.red);\n        var rgbint = toInt(Color.rgb(100, 100, 100));\n    }\n}</syntaxhighlight>\n\nExamples of parametric enum types are the Haxe standard library types Option<ref>{{cite web|title=haxe/Option.hx at development \u00b7 HaxeFoundation/haxe|url=https://github.com/HaxeFoundation/haxe/blob/development/std/haxe/ds/Option.hx|website=Github}}</ref> and Either:<ref>{{cite web|title=haxe/Either.hx at development \u00b7 HaxeFoundation/haxe|url=https://github.com/HaxeFoundation/haxe/blob/development/std/haxe/ds/Either.hx|website=Github}}</ref>\n\n<syntaxhighlight lang=\"haxe\">\nenum Option<T> {\n    Some(v:T);\n    None;\n}\n\nenum Either<L, R> {\n    Left(v:L);\n    Right(v:R);\n}\n</syntaxhighlight>\n\nHaxe also supports [[generalized algebraic data type]]s (GADTs).<ref>{{cite web|title=Language Features|url=http://haxe.org/documentation/introduction/language-features.html|website=Haxe - The Cross-platform Toolkit|publisher=Haxe Foundation|accessdate=30 April 2015}}</ref><ref>{{cite web|title=haxe/TestGADT.hx at development \u00b7 HaxeFoundation/haxe|url=https://github.com/HaxeFoundation/haxe/blob/development/tests/unit/src/unit/TestGADT.hx|website=Github}}</ref>\n\n===Anonymous types===\nAnonymous types are defined by denoting their structure explicitly, using a syntax that follows the mathematical record-based representation of a type. They can be used to implement structural typing for function arguments (see below), and can be given an alias with the keyword <code>typedef</code>:\n\n<syntaxhighlight lang=\"haxe\">\ntypedef AliasForAnon = { a:Int, b:String, c:Float->Void };\n</syntaxhighlight>\n\n===Function types===\nFunctions are first-class values in Haxe. Their type is denoted by using arrows between argument types, and between the argument type(s) and return type, as common in many functional languages. However, unlike in prominent examples like [[Haskell (programming language)|Haskell]] or the [[ML (programming language)|ML]] language family, not all functions are unary functions (functions with one argument only), and in Haxe, functions can't be [[Partial application|partially applied]] per default. Thus, the following type signatures have different semantics than in the aforementioned languages. The type F is a function that takes an Int and a String as arguments, and returns a value of type Float.\n\nThe same notation in a language with unary functions only, would refer to a function that takes an Int as argument, and returns a function of type String->Float.\n\nTypes F2 and F3 denote the same type. Both are binary functions that return a binary function of type F. For F3 the syntax to declare a function type within a function type is used.\n\n<syntaxhighlight lang=\"haxe\">\ntypedef F = Int->String->Float;\n\ntypedef F2 = Int->String->F;\ntypedef F3 = Int->String->(Int->String->Float);\n</syntaxhighlight>\n\n===Abstract types===\nThe latest addition to the Haxe type system is a concept termed ''abstract types''. As used in Haxe, this refers to something different from a conventional [[abstract type]]. They are used to make conversions between types implicit, allowing reuse of existing types for specific purposes, like implementing types for units of measurement. This greatly reduces the risk of mixing up values of the same underlying type, but with different meanings (e.g., miles vs. km).\n\nThe following example assumes that the metric system is the default, while a conversion to miles is needed for legacy data. Haxe can automatically convert miles to kilometers, but not the reverse.\n\n<syntaxhighlight lang=\"haxe\">\nabstract Kilometer(Float) {\n    public function new(v:Float) this = v;\n}\n \nabstract Mile(Float) {\n    public function new(v:Float) this = v;\n    @:to public inline function toKilometer():Kilometer return (new Kilometer (this / 0.62137));\n}\n \nclass Test {\n  static var km:Kilometer;\n  static function main(){\n    var one100Miles = new Mile(100);\n    km = one100Miles;\n \n    trace(km); // 160.935\n  }\n}\n</syntaxhighlight>\n\nAs the example shows, no explicit conversion is needed for the assignment \"km = one100Miles;\" to do the right thing.\n\n===Structural typing===\nIn many functional programming languages, [[structural typing]] plays a major role. Haxe employs it in the presence of anonymous types, using the [[Nominal type system|nominative typing]] of [[object-oriented programming]], when only named types are involved. Anonymous types in Haxe are analogous to the implicit interfaces of the language [[Go (programming language)|Go]] as to typing. In contrast with Go interfaces, it is possible to construct a value using an anonymous type.\n\n<syntaxhighlight lang=\"haxe\">\n\nclass FooBar {\n\n   public var foo:Int;\n   public var bar:String;\n\n   public function new(){ foo=1; bar=\"2\";}\n\n   function anyFooBar(v:{foo:Int,bar:String}) trace(v.foo);\n\n   static function test(){\n        var fb = new FooBar();\n        fb.anyFooBar(fb);\n        fb.anyFooBar({foo:123,bar:\"456\"});\n   }\n}\n</syntaxhighlight>\n\n==Internal architecture==\n\n==={{visible anchor|Compiler|Compiler implementation and performance}}===\nThe Haxe compiler is divided into one frontend and multiple backends. The frontend creates an [[abstract syntax tree]] (AST) from the source code, and performs type checking, [[macro expansion]], and optimization on the AST. The various backends [[Source-to-source compiler|translate]] the processed AST into source code or generate [[bytecode]], depending on their target.\n\nThe compiler is written in [[OCaml]]. It can be run in server-mode to provide code completion for [[integrated development environment]]s (IDEs) and maintain a cache, to further speed compiling.<ref>Server mode command-line: <code>haxe --wait [host:]port</code></ref>\n\n===Targets===\nIn Haxe, supported platforms are known as \"targets\", which are Haxe modules that provide access to core-APIs (language and bytecode targets), for the compiler-backends that are responsible for generating the respective code, and for runtimes with specific APIs that go beyond the core language support (platform-targets).\n\n*''Bytecode Targets'' produce [[executable]] [[byte code]] (Neko, SWF, SWF8), that can be executed directly by the runtime (Neko VM, [[Adobe Flash Player]], [[Adobe AIR]]). Haxe API and platform-specific API is available.\n*''Language Targets'' produce [[source code]] (AS3, C++, C#, Java). Most source code must be compiled by a third-party compiler to produce an executable file ([[Apache Flex|Flex SDK]], [[GNU Compiler Collection]] (GCC), [[Microsoft Visual C++]], [[.NET Framework]], [[Java compiler]]). JavaScript and PHP code can be run directly, since the runtime uses [[just-in-time compilation]]. Inline code written in the target language can be inserted at any point in the application, thereby supporting the entire platform API; even features missing from the Haxe wrapper API.\n*''External Modules'' are type definitions (<code>extern class</code> in Haxe) that describe the types of native APIs or libraries, so the Haxe compiler can use static type-checking.\n\n==See also==\n{{Portal|Free and open-source software}}\n* [[Comparison of IDE choices for Haxe programmers]]\n* [[Dart (programming language)]]\n* [[Nim (programming language)]]\n* [[Opa (programming language)]]\n* [[Clojure]]\n* [[CoffeeScript]]\n* [[TypeScript]]\n* [[Scala (programming language)]]\n* [[Vala (programming language)]]\n* [[Emscripten]]\n* [[OpenFL]]\n\n==References==\n{{Reflist|33em}}\n\n==External links==\n* {{Official website|haxe.org}}\n* HashLink website\n\n{{Adobe Flash}}\n{{JavaScript}}\n\n[[Category:Programming languages]]\n[[Category:Object-based programming languages]]\n[[Category:Functional languages]]\n[[Category:Multi-paradigm programming languages]]\n[[Category:OCaml software]]\n[[Category:Programming languages created in 2005]]\n[[Category:Software using the GPL license]]\n[[Category:Source-to-source compilers]]\n[[Category:Pattern matching programming languages]]\n[[Category:Statically typed programming languages]]\n", "name_user": "The Geminid", "label": "safe", "comment": "period", "url_page": "//en.wikipedia.org/wiki/Haxe"}
{"title_page": "Cheers (season 11)", "text_new": "{{unreferenced|date=November 2013}}\n\n{{Infobox television season\n |season_number  = 11\n |bgcolour     = #80c1e0\n |image        = Cheers season 11.jpg\n |caption      = Region 1 DVD\n |starring     = [[Ted Danson]]<br>[[Kirstie Alley]]<br>[[Rhea Perlman]]<br>[[John Ratzenberger]]<br>[[Woody Harrelson]]<br>[[Kelsey Grammer]]<br>[[Bebe Neuwirth]]<br>[[George Wendt]]\n |country      = United States\n |num_episodes = 28\n |network      = [[NBC]]\n |first_aired  = {{Start date|1992|09|24}}\n |last_aired   = {{End date|1993|05|20}}  \n |prev_season  = [[Cheers (season 10)|Season 10]] \n |episode_list = List of Cheers episodes\n}}\nThe eleventh and final season of ''[[Cheers]]'', an American television sitcom, originally aired on [[NBC]] in the United States between September 24, 1992, and May 20, 1993. The show was created by director [[James Burrows]] and writers [[Glen and Les Charles]] under production team Charles Burrows Charles Productions, in association with [[Paramount Television]].\n\n==Cast and Characters==\n*[[Ted Danson]] as [[Sam Malone]]\n*[[Kirstie Alley]] as [[Rebecca Howe]]\n*[[Rhea Perlman]] as [[Carla Tortelli]]\n*[[John Ratzenberger]] as [[Cliff Clavin]]\n*[[Woody Harrelson]] as [[Woody Boyd]]\n*[[Kelsey Grammer]] as [[Frasier Crane]]\n*[[Bebe Neuwirth]] as [[Lilith Sternin-Crane]]\n*[[George Wendt]] as [[Norm Peterson]]\n\n==Episodes==\n{{see also|List of Cheers episodes}}\n<onlyinclude>{{Episode table|background=#80c1e0|overall=|season=|title=|director=|writer=|airdate=|viewers=|country=US|episodes=\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 248\n|EpisodeNumber2 = 1\n|Title          = The Little Match Girl\n|DirectedBy     = [[James Burrows]]\n|WrittenBy      = [[Dan Staley]] and [[Rob Long]]\n|OriginalAirDate= {{Start date|1992|9|24}}\n|ShortSummary   = After deciding to quit smoking, Rebecca tosses her last cigarette in the office trash can, inadvertently setting the bar ablaze.\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 249\n|EpisodeNumber2 = 2\n|Title          = The Beer Is Always Greener\n|DirectedBy     = James Burrows\n|WrittenBy      = [[Tom Leopold]]\n|OriginalAirDate= {{Start date|1992|10|1}}\n|ShortSummary   = Carla is forced to clean up her act and behave nicely when she has to find another job while Cheers is being rebuilt. Woody's faith in Kelly is shaken when he learns they belong to two different Lutheran church bodies. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 250\n|EpisodeNumber2 = 3\n|Title          = The King of Beers\n|DirectedBy     = [[John Ratzenberger]]\n|WrittenBy      = [[Dan O'Shannon]]\n|OriginalAirDate= {{Start date|1992|10|8}}\n|ShortSummary   = Norm's new job seems like a dream come true when he becomes a beer taster at a brewery. Rebecca finds she can't tear herself away from the bar's new slot machine. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 251\n|EpisodeNumber2 = 4\n|Title          = The Magnificent Six\n|DirectedBy     = James Burrows\n|WrittenBy      = Sue Herring\n|OriginalAirDate= {{Start date|1992|10|22}}\n|ShortSummary   = Henr\u00ed challenges Sam to a contest to see who's the bigger ladies' man. Rebecca resorts to desperate measures in her quest to quit smoking. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 252\n|EpisodeNumber2 = 5\n|Title          = Do Not Forsake Me O' My Postman\n|DirectedBy     = James Burrows\n|WrittenBy      = [[Ken Levine (TV personality)|Ken Levine]] and [[David Isaacs (writer)|David Isaacs]]\n|OriginalAirDate= {{Start date|1992|10|29}}\n|ShortSummary   = Maggie returns to Cheers and Cliffie, this time claiming she's carrying his baby. Rebecca hires a hack songwriter ([[John Mahoney]]) to create a jingle for the bar.\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 253\n|EpisodeNumber2 = 6\n|Title          = Teaching with the Enemy\n|DirectedBy     = James Burrows\n|WrittenBy      = Tom Anderson\n|OriginalAirDate= {{Start date|1992|11|5}}\n|ShortSummary   = Rebecca spots Lilith with another man, and doesn't know whether to tell Frasier that his wife is cheating on him. Meanwhile, Sam hires a menacing bouncer named Tiny, but can't bring himself to fire Tiny when the hulking man scares everyone. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 254\n|EpisodeNumber2 = 7\n|Title          = The Girl in the Plastic Bubble\n|DirectedBy     = James Burrows\n|WrittenBy      = Dan O'Shannon\n|OriginalAirDate= {{Start date|1992|11|12}}\n|ShortSummary   = A distraught Frasier ends up on a ledge, feigning suicide, after Lilith informs him that she wants to spend a year away from him, sealed in a [[closed ecological system|biosphere]] with her lover. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 255\n|EpisodeNumber2 = 8\n|Title          = Ill-Gotten Gaines\n|DirectedBy     = James Burrows\n|WrittenBy      = [[Fred Graver]]\n|OriginalAirDate= {{Start date|1992|11|19}}\n|ShortSummary   = Kelly's father is convinced that Woody has blackmail on his mind when Woody sees Mr. Gaines having affair with his brother's wife. Rebecca plans to hold a Thanksgiving dinner at the bar. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 256\n|EpisodeNumber2 = 9\n|Title          = Feelings...Whoa, Whoa, Whoa\n|DirectedBy     = Rick Beren\n|WrittenBy      = Kathy Ann Stumpe\n|OriginalAirDate= {{Start date|1992|12|3}}\n|ShortSummary   = Carla tries to hide her feelings when John Hill has a heart attack. Cliff goes around telling people that [[Adolf Hitler]] moved into his apartment building. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 257\n|EpisodeNumber2 = 10\n|Title          = Love Me, Love My Car\n|DirectedBy     = James Burrows\n|WrittenBy      = [[David Lloyd (writer)|David Lloyd]]\n|OriginalAirDate= {{Start date|1992|12|7}}\n|ShortSummary   = Sam gets cold feet about reacquiring his beloved car, and goes so far as to romance the buyer's widow ([[Dana Delany]]) to get it back. Rebecca befriends a pig destined to be Woody's Christmas dinner. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 258\n|EpisodeNumber2 = 11\n|Title          = Daddy's Middle-Aged Girl\n|DirectedBy     = James Burrows\n|WrittenBy      = [[Rebecca Parr Cioffi]]\n|OriginalAirDate= {{Start date|1992|12|10}}\n|ShortSummary   = Rebecca's father ([[Robert Prosky]]) attempts to make her return with him to San Diego while Woody tries to exert his will over Kelly, to make her move her things to his apartment. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 259\n|EpisodeNumber2 = 12\n|Title          = Norm's Big Audit\n|DirectedBy     = John Ratzenberger\n|WrittenBy      = Tom Leopold\n|OriginalAirDate= {{Start date|1993|1|14}}\n|ShortSummary   = Norm can avoid an audit, if he'll just sleep with his investigating IRS agent. Sam is very reluctant to let the gang watch a videotape of one of his old games. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 260\n|EpisodeNumber2 = 13\n|Title          = Sunday Dinner\n|DirectedBy     = James Burrows\n|WrittenBy      = Fred Graver\n|OriginalAirDate= {{Start date|1993|1|17}}\n|ShortSummary   = Frasier decides to start dating other women now that Lilith has left him, and makes a date with his young secretary, Shauna. He ends up having dinner Shauna's family. Meanwhile, Cheers is hosting a family reunion, and Cliff and Norm are hired to videotape it. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 261\n|EpisodeNumber2 = 14\n|Title          = It's a Mad, Mad, Mad Bar\n|DirectedBy     = James Burrows\n|WrittenBy      = Rebecca Parr Cioffi\n|OriginalAirDate= {{Start date|1993|1|21}}\n|ShortSummary   = The gang at Cheers turn the bar upside-down when they believe Robin Colcord has stashed away a good sum of money somewhere in the establishment.\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 262\n|EpisodeNumber2 = 15\n|Title          = Loathe and Marriage\n|DirectedBy     = James Burrows\n|WrittenBy      = Ken Levine and David Isaacs\n|OriginalAirDate= {{Start date|1993|2|4}}\n|ShortSummary   = Carla's daughter insists on having her father, Nick Tortelli, walk her down the aisle, despite Carla's objections. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 263\n|EpisodeNumber2 = 16\n|Title          = Is There a Doctor in the Howe?\n|DirectedBy     = James Burrows\n|WrittenBy      = Kathy Ann Stumpe\n|OriginalAirDate= {{Start date|1993|2|11}}\n|ShortSummary   = Upon learning that his marriage may be over, Frasier is thrown a surprise party to help cheer him up. Things go a bit further than expected after Rebecca offers to drive the doctor home for the evening.\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 264\n|EpisodeNumber2 = 17\n|Title          = The Bar Manager, the Shrink, His Wife and Her Lover\n|DirectedBy     = James Burrows\n|WrittenBy      = Kathy Ann Stumpe\n|OriginalAirDate= {{Start date|1993|2|18}}\n|ShortSummary   = After returning from the [[closed ecological system|Eco-pod]], Lilith is shocked to find Rebecca consoling Frasier. Meanwhile, Lilith's \"lover\" is not very happy with her departure and takes extreme measures to ensure her return to the underground.\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 265\n|EpisodeNumber2 = 18\n|Title          = The Last Picture Show\n|DirectedBy     = James Burrows\n|WrittenBy      = Fred Graver\n|OriginalAirDate= {{Start date|1993|2|25}}\n|ShortSummary   = The guys head to the old drive-in movie theater for one last flick before it is to be torn down.  Cheers' former owner, Gus, returns and runs the bar for one night.\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 266\n|EpisodeNumber2 = 19\n|Title          = Bar Wars VII: The Naked Prey\n|DirectedBy     = James Burrows\n|WrittenBy      = Ken Levine and David Isaacs\n|OriginalAirDate= {{Start date|1993|3|18}}\n|ShortSummary   = After Gary's Olde Towne Tavern is bulldozed to the ground, Sam becomes the number-one suspect that Gary turns to.\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 267\n|EpisodeNumber2 = 20\n|Title          = Look Before You Sleep\n|DirectedBy     = James Burrows\n|WrittenBy      = Rebecca Parr Cioffi\n|OriginalAirDate= {{Start date|1993|4|1}}\n|ShortSummary   = Sam locks himself out of the bar with his keys and wallet inside so he begins a search for a place to sleep for the night which proves more difficult than expected. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 268\n|EpisodeNumber2 = 21\n|Title          = Woody Gets an Election\n|DirectedBy     = James Burrows\n|WrittenBy      = Dan O'Shannon, Tom Anderson, Dan Staley and Rob Long\n|OriginalAirDate= {{Start date|1993|4|22}}\n|ShortSummary   = Frasier decides to conduct an experiment in voter psychology by getting Woody on the ballot for city council and is shocked by the results. During the campaign, Woody is interviewed by a reporter ([[Peri Gilpin]]).\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 269\n|EpisodeNumber2 = 22\n|Title          = It's Lonely on the Top\n|DirectedBy     = James Burrows\n|WrittenBy      = [[Heide Perlman]]\n|OriginalAirDate= {{Start date|1993|4|29}}\n|ShortSummary   = After sleeping with Paul, Carla can't come to grips with what she has done. In an effort to console his best friend, Sam lets her in on a little secret of his own.\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 270<hr />271\n|EpisodeNumber2 = 23<hr />24\n|Title          = Rebecca Gaines, Rebecca Loses\n|RTitle         = <br /><small>(double-length episode)</small>\n|DirectedBy     = James Burrows\n|WrittenBy      = David Lloyd\n|OriginalAirDate= {{Start date|1993|5|6}}\n|ShortSummary   = After Woody, Kelly and her father Walter arrive at Cheers talking about classical music (they'd been to a symphony), Rebecca joins in the conversation and impresses Walter. He invites her to a society function. Rebecca thinks it is a date and is thrilled to bits \u2013 but is in for a shock when she arrives. Meanwhile Esther Clavin has been put in a retirement home by Cliff, but whilst Cliff feels guilty, the others think he has murdered his mother. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 272\n|EpisodeNumber2 = 25\n|Title          = The Guy Can't Help It\n|DirectedBy     = James Burrows\n|WrittenBy      = [[David Angell]], [[Peter Casey (screenwriter)|Peter Casey]] and [[David Lee (screenwriter)|David Lee]]\n|OriginalAirDate= {{Start date|1993|5|13}}\n|ShortSummary   = Rebecca finds herself really attracted to a handsome plumber. Sam joins a help group for sexual compulsives. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 273<hr>274<hr>275\n|EpisodeNumber2 = 26<hr>27<hr>28\n|Title          = [[One for the Road (Cheers)|One for the Road]]\n|RTitle         = <br /><small>(triple length series finale)</small>\n|DirectedBy     = James Burrows\n|WrittenBy      = [[Glen Charles]] and [[Les Charles]]\n|OriginalAirDate= {{Start date|1993|5|20}}\n|ShortSummary   = Diane returns to Boston after winning an award for her writings, although her life isn't exactly as it appears. Sam potentially leaves Cheers for good. Woody gets a job for Norm, and Cliff receives a promotion, while Rebecca hopes to wed Don. The gang ponders the meaning of life.\n|LineColor      = 80c1e0\n}}\n}}</onlyinclude>\n\n== External links ==\n{{Cheers}}\n\n[[Category:Cheers seasons|11]]\n[[Category:1992 American television seasons]]\n[[Category:1993 American television seasons]]\n", "text_old": "{{unreferenced|date=November 2013}}\n\n{{Infobox television season\n |season_number  = 11\n |bgcolour     = #80c1e0\n |image        = Cheers season 11.jpg\n |caption      = Region 1 DVD\n |starring     = [[Ted Danson]]<br>[[Kirstie Alley]]<br>[[Rhea Perlman]]<br>[[John Ratzenberger]]<br>[[Woody Harrelson]]<br>[[Kelsey Grammer]]<br>[[Bebe Neuwirth]]<br>[[George Wendt]]\n |country      = United States\n |num_episodes = 28\n |network      = [[NBC]]\n |first_aired  = {{Start date|1992|09|24}}\n |last_aired   = {{End date|1993|05|20}}  \n ||prev_season  = [[Cheers (season 10)|Season 10]] \n |episode_list = List of Cheers episodes\n}}\nThe eleventh and final season of ''[[Cheers]]'', an American television sitcom, originally aired on [[NBC]] in the United States between September 24, 1992, and May 20, 1993. The show was created by director [[James Burrows]] and writers [[Glen and Les Charles]] under production team Charles Burrows Charles Productions, in association with [[Paramount Television]].\n\n==Cast and Characters==\n*[[Ted Danson]] as [[Sam Malone]]\n*[[Kirstie Alley]] as [[Rebecca Howe]]\n*[[Rhea Perlman]] as [[Carla Tortelli]]\n*[[John Ratzenberger]] as [[Cliff Clavin]]\n*[[Woody Harrelson]] as [[Woody Boyd]]\n*[[Kelsey Grammer]] as [[Frasier Crane]]\n*[[Bebe Neuwirth]] as [[Lilith Sternin-Crane]]\n*[[George Wendt]] as [[Norm Peterson]]\n\n==Episodes==\n{{see also|List of Cheers episodes}}\n<onlyinclude>{{Episode table|background=#80c1e0|overall=|season=|title=|director=|writer=|airdate=|viewers=|country=US|episodes=\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 248\n|EpisodeNumber2 = 1\n|Title          = The Little Match Girl\n|DirectedBy     = [[James Burrows]]\n|WrittenBy      = [[Dan Staley]] and [[Rob Long]]\n|OriginalAirDate= {{Start date|1992|9|24}}\n|ShortSummary   = After deciding to quit smoking, Rebecca tosses her last cigarette in the office trash can, inadvertently setting the bar ablaze.\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 249\n|EpisodeNumber2 = 2\n|Title          = The Beer Is Always Greener\n|DirectedBy     = James Burrows\n|WrittenBy      = [[Tom Leopold]]\n|OriginalAirDate= {{Start date|1992|10|1}}\n|ShortSummary   = Carla is forced to clean up her act and behave nicely when she has to find another job while Cheers is being rebuilt. Woody's faith in Kelly is shaken when he learns they belong to two different Lutheran church bodies. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 250\n|EpisodeNumber2 = 3\n|Title          = The King of Beers\n|DirectedBy     = [[John Ratzenberger]]\n|WrittenBy      = [[Dan O'Shannon]]\n|OriginalAirDate= {{Start date|1992|10|8}}\n|ShortSummary   = Norm's new job seems like a dream come true when he becomes a beer taster at a brewery. Rebecca finds she can't tear herself away from the bar's new slot machine. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 251\n|EpisodeNumber2 = 4\n|Title          = The Magnificent Six\n|DirectedBy     = James Burrows\n|WrittenBy      = Sue Herring\n|OriginalAirDate= {{Start date|1992|10|22}}\n|ShortSummary   = Henr\u00ed challenges Sam to a contest to see who's the bigger ladies' man. Rebecca resorts to desperate measures in her quest to quit smoking. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 252\n|EpisodeNumber2 = 5\n|Title          = Do Not Forsake Me O' My Postman\n|DirectedBy     = James Burrows\n|WrittenBy      = [[Ken Levine (TV personality)|Ken Levine]] and [[David Isaacs (writer)|David Isaacs]]\n|OriginalAirDate= {{Start date|1992|10|29}}\n|ShortSummary   = Maggie returns to Cheers and Cliffie, this time claiming she's carrying his baby. Rebecca hires a hack songwriter ([[John Mahoney]]) to create a jingle for the bar.\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 253\n|EpisodeNumber2 = 6\n|Title          = Teaching with the Enemy\n|DirectedBy     = James Burrows\n|WrittenBy      = Tom Anderson\n|OriginalAirDate= {{Start date|1992|11|5}}\n|ShortSummary   = Rebecca spots Lilith with another man, and doesn't know whether to tell Frasier that his wife is cheating on him. Meanwhile, Sam hires a menacing bouncer named Tiny, but can't bring himself to fire Tiny when the hulking man scares everyone. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 254\n|EpisodeNumber2 = 7\n|Title          = The Girl in the Plastic Bubble\n|DirectedBy     = James Burrows\n|WrittenBy      = Dan O'Shannon\n|OriginalAirDate= {{Start date|1992|11|12}}\n|ShortSummary   = A distraught Frasier ends up on a ledge, feigning suicide, after Lilith informs him that she wants to spend a year away from him, sealed in a [[closed ecological system|biosphere]] with her lover. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 255\n|EpisodeNumber2 = 8\n|Title          = Ill-Gotten Gaines\n|DirectedBy     = James Burrows\n|WrittenBy      = [[Fred Graver]]\n|OriginalAirDate= {{Start date|1992|11|19}}\n|ShortSummary   = Kelly's father is convinced that Woody has blackmail on his mind when Woody sees Mr. Gaines having affair with his brother's wife. Rebecca plans to hold a Thanksgiving dinner at the bar. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 256\n|EpisodeNumber2 = 9\n|Title          = Feelings...Whoa, Whoa, Whoa\n|DirectedBy     = Rick Beren\n|WrittenBy      = Kathy Ann Stumpe\n|OriginalAirDate= {{Start date|1992|12|3}}\n|ShortSummary   = Carla tries to hide her feelings when John Hill has a heart attack. Cliff goes around telling people that [[Adolf Hitler]] moved into his apartment building. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 257\n|EpisodeNumber2 = 10\n|Title          = Love Me, Love My Car\n|DirectedBy     = James Burrows\n|WrittenBy      = [[David Lloyd (writer)|David Lloyd]]\n|OriginalAirDate= {{Start date|1992|12|7}}\n|ShortSummary   = Sam gets cold feet about reacquiring his beloved car, and goes so far as to romance the buyer's widow ([[Dana Delany]]) to get it back. Rebecca befriends a pig destined to be Woody's Christmas dinner. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 258\n|EpisodeNumber2 = 11\n|Title          = Daddy's Middle-Aged Girl\n|DirectedBy     = James Burrows\n|WrittenBy      = [[Rebecca Parr Cioffi]]\n|OriginalAirDate= {{Start date|1992|12|10}}\n|ShortSummary   = Rebecca's father ([[Robert Prosky]]) attempts to make her return with him to San Diego while Woody tries to exert his will over Kelly, to make her move her things to his apartment. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 259\n|EpisodeNumber2 = 12\n|Title          = Norm's Big Audit\n|DirectedBy     = John Ratzenberger\n|WrittenBy      = Tom Leopold\n|OriginalAirDate= {{Start date|1993|1|14}}\n|ShortSummary   = Norm can avoid an audit, if he'll just sleep with his investigating IRS agent. Sam is very reluctant to let the gang watch a videotape of one of his old games. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 260\n|EpisodeNumber2 = 13\n|Title          = Sunday Dinner\n|DirectedBy     = James Burrows\n|WrittenBy      = Fred Graver\n|OriginalAirDate= {{Start date|1993|1|17}}\n|ShortSummary   = Frasier decides to start dating other women now that Lilith has left him, and makes a date with his young secretary, Shauna. He ends up having dinner Shauna's family. Meanwhile, Cheers is hosting a family reunion, and Cliff and Norm are hired to videotape it. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 261\n|EpisodeNumber2 = 14\n|Title          = It's a Mad, Mad, Mad Bar\n|DirectedBy     = James Burrows\n|WrittenBy      = Rebecca Parr Cioffi\n|OriginalAirDate= {{Start date|1993|1|21}}\n|ShortSummary   = The gang at Cheers turn the bar upside-down when they believe Robin Colcord has stashed away a good sum of money somewhere in the establishment.\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 262\n|EpisodeNumber2 = 15\n|Title          = Loathe and Marriage\n|DirectedBy     = James Burrows\n|WrittenBy      = Ken Levine and David Isaacs\n|OriginalAirDate= {{Start date|1993|2|4}}\n|ShortSummary   = Carla's daughter insists on having her father, Nick Tortelli, walk her down the aisle, despite Carla's objections. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 263\n|EpisodeNumber2 = 16\n|Title          = Is There a Doctor in the Howe?\n|DirectedBy     = James Burrows\n|WrittenBy      = Kathy Ann Stumpe\n|OriginalAirDate= {{Start date|1993|2|11}}\n|ShortSummary   = Upon learning that his marriage may be over, Frasier is thrown a surprise party to help cheer him up. Things go a bit further than expected after Rebecca offers to drive the doctor home for the evening.\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 264\n|EpisodeNumber2 = 17\n|Title          = The Bar Manager, the Shrink, His Wife and Her Lover\n|DirectedBy     = James Burrows\n|WrittenBy      = Kathy Ann Stumpe\n|OriginalAirDate= {{Start date|1993|2|18}}\n|ShortSummary   = After returning from the [[closed ecological system|Eco-pod]], Lilith is shocked to find Rebecca consoling Frasier. Meanwhile, Lilith's \"lover\" is not very happy with her departure and takes extreme measures to ensure her return to the underground.\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 265\n|EpisodeNumber2 = 18\n|Title          = The Last Picture Show\n|DirectedBy     = James Burrows\n|WrittenBy      = Fred Graver\n|OriginalAirDate= {{Start date|1993|2|25}}\n|ShortSummary   = The guys head to the old drive-in movie theater for one last flick before it is to be torn down.  Cheers' former owner, Gus, returns and runs the bar for one night.\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 266\n|EpisodeNumber2 = 19\n|Title          = Bar Wars VII: The Naked Prey\n|DirectedBy     = James Burrows\n|WrittenBy      = Ken Levine and David Isaacs\n|OriginalAirDate= {{Start date|1993|3|18}}\n|ShortSummary   = After Gary's Olde Towne Tavern is bulldozed to the ground, Sam becomes the number-one suspect that Gary turns to.\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 267\n|EpisodeNumber2 = 20\n|Title          = Look Before You Sleep\n|DirectedBy     = James Burrows\n|WrittenBy      = Rebecca Parr Cioffi\n|OriginalAirDate= {{Start date|1993|4|1}}\n|ShortSummary   = Sam locks himself out of the bar with his keys and wallet inside so he begins a search for a place to sleep for the night which proves more difficult than expected. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 268\n|EpisodeNumber2 = 21\n|Title          = Woody Gets an Election\n|DirectedBy     = James Burrows\n|WrittenBy      = Dan O'Shannon, Tom Anderson, Dan Staley and Rob Long\n|OriginalAirDate= {{Start date|1993|4|22}}\n|ShortSummary   = Frasier decides to conduct an experiment in voter psychology by getting Woody on the ballot for city council and is shocked by the results. During the campaign, Woody is interviewed by a reporter ([[Peri Gilpin]]).\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 269\n|EpisodeNumber2 = 22\n|Title          = It's Lonely on the Top\n|DirectedBy     = James Burrows\n|WrittenBy      = [[Heide Perlman]]\n|OriginalAirDate= {{Start date|1993|4|29}}\n|ShortSummary   = After sleeping with Paul, Carla can't come to grips with what she has done. In an effort to console his best friend, Sam lets her in on a little secret of his own.\n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 270<hr />271\n|EpisodeNumber2 = 23<hr />24\n|Title          = Rebecca Gaines, Rebecca Loses\n|RTitle         = <br /><small>(double-length episode)</small>\n|DirectedBy     = James Burrows\n|WrittenBy      = David Lloyd\n|OriginalAirDate= {{Start date|1993|5|6}}\n|ShortSummary   = After Woody, Kelly and her father Walter arrive at Cheers talking about classical music (they'd been to a symphony), Rebecca joins in the conversation and impresses Walter. He invites her to a society function. Rebecca thinks it is a date and is thrilled to bits \u2013 but is in for a shock when she arrives. Meanwhile Esther Clavin has been put in a retirement home by Cliff, but whilst Cliff feels guilty, the others think he has murdered his mother. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 272\n|EpisodeNumber2 = 25\n|Title          = The Guy Can't Help It\n|DirectedBy     = James Burrows\n|WrittenBy      = [[David Angell]], [[Peter Casey (screenwriter)|Peter Casey]] and [[David Lee (screenwriter)|David Lee]]\n|OriginalAirDate= {{Start date|1993|5|13}}\n|ShortSummary   = Rebecca finds herself really attracted to a handsome plumber. Sam joins a help group for sexual compulsives. \n|LineColor      = 80c1e0\n}}\n{{Episode list/sublist|Cheers (season 11)\n|EpisodeNumber  = 273<hr>274<hr>275\n|EpisodeNumber2 = 26<hr>27<hr>28\n|Title          = [[One for the Road (Cheers)|One for the Road]]\n|RTitle         = <br /><small>(triple length series finale)</small>\n|DirectedBy     = James Burrows\n|WrittenBy      = [[Glen Charles]] and [[Les Charles]]\n|OriginalAirDate= {{Start date|1993|5|20}}\n|ShortSummary   = Diane returns to Boston after winning an award for her writings, although her life isn't exactly as it appears. Sam potentially leaves Cheers for good. Woody gets a job for Norm, and Cliff receives a promotion, while Rebecca hopes to wed Don. The gang ponders the meaning of life.\n|LineColor      = 80c1e0\n}}\n}}</onlyinclude>\n\n== External links ==\n{{Cheers}}\n\n[[Category:Cheers seasons|11]]\n[[Category:1992 American television seasons]]\n[[Category:1993 American television seasons]]\n", "name_user": "Gonnym", "label": "safe", "comment": "clean up", "url_page": "//en.wikipedia.org/wiki/Cheers_(season_11)"}
