{"title_page": "Alfred Ntombela", "text_new": "{{BLP sources |date = July 2011}}\n{{Infobox person\n| name = Alfred Ntombela\n| image = Alfred Ntombela.jpg\n| imagesize = 200px\n| caption = Ntombela in 2001\n| birth_name = Alfred Ntombela\n| birth_date = {{birth-date and age|3 April 1972}}\n| birth_place = [[South Africa]]\n| occupation = {{flatlist|\n* [[Actor]]\n* [[Comedian]] (Film & Television)\n* [[Singer]]}}\n| years_active = 1990 - 2018\n}}\n'''Alfred Ntombela''' (born 3 April 1972) is a [[South Africa]]n retired actor, comedian and singer<ref name=\"BlignautBotha1992\">{{cite book|last1=Blignaut|first1=Johan|last2=Botha|first2=Martin|title=Movies, moguls, mavericks: South African cinema 1979-1991|url=https://books.google.com/books?id=GNdDAQAAIAAJ|accessdate=3 July 2011|year=1992|publisher=Showdata|isbn=978-0-620-16529-7|pages=F\u201378, etc.}}</ref> known for his role in South African candid genre films alongside [[Leon Schuster]], his fast-paced Joker-like laugh and for his small stature as an adult.\n\nHe became renowned for his roles in ''[[Sweet 'n Short]]'' and ''[[Mama Jack]]''. His native language is [[Zulu language|Zulu]] but he also speaks English and [[Afrikaans]].\n\nHe announced his retirement from acting in 2018 after 28 years in the industry.\n\n==Filmography==\n\n{| class = \"wikitable sortable\"\n|+ Film\n|-\n! Year\n! Title\n! Role\n! class = \"unsortable\" | Notes\n|-\n| 1990\n| ''[[Oh Shucks! Here Comes UNTAG]] (Kwagga Strikes Back)''\n| Bambo\n|\n|-\n| 1991\n| ''[[Sweet 'n Short]]''\n| Alfred Short\n|\n|-\n| 1999\n| ''Alec to the Rescue''\n| Themba Ndlovu\n|\n|-\n| 2001\n| ''[[Mr Bones]]''\n|\n|\n|-\n| 2004\n| ''[[Oh Shucks, I'm Gatvol!]]''\n| Alf\n|\n|-\n| 2005\n| ''[[Mama Jack]]''\n| Shorty Dladla\n|\n|-\n| 2008\n| ''[[Mr Bones 2]]''\n|\n|\n|-\n| 2010\n| ''[[Schuks Tshabalala's Survival Guide to South Africa]]''\n| Shorty\n|\n|-\n| 2012\n| ''[[Mad Buddies]]''\n| Minister Mda<ref>{{cite news|title=Five minutes with Alfred Ntombela aka Minister Mda in 'Mad Buddies'|publisher=[[Times Live]]|date=2012-06-22|accessdate=2012-08-02|url=http://www.timeslive.co.za/thetimes/2012/06/22/five-minutes-with-alfred-ntombela-aka-minister-mda-in-mad-buddies}}</ref>\n|\n|-\n| 2013\n| ''[[Schuks! Your Country Needs You]]''\n| Shorty\n|}\n\n==References==\n{{Reflist}}\n\n{{Authority control}}\n\n{{DEFAULTSORT:Ntombela, Alfred}}\n[[Category:1972 births]]\n[[Category:Living people]]\n[[Category:Zulu people]]\n[[Category:South African male film actors]]\n", "text_old": "{{BLP sources |date = July 2011}}\n{{Infobox person\n| name = Alfred Ntombela\n| image = Alfred Ntombela.jpg\n| imagesize = 200px\n| caption = Ntombela in 2001\n| birth_name = Alfred Ntombela\n| birth_date = {{birth-date and age|3 April 1972}}\n| birth_place = [[South Africa]]\n| occupation = Actor\n| years_active = 1990 - 2018\n}}\n'''Alfred Ntombela''' (born 3 April 1972) is a [[South Africa]]n retired actor,<ref name=\"BlignautBotha1992\">{{cite book|last1=Blignaut|first1=Johan|last2=Botha|first2=Martin|title=Movies, moguls, mavericks: South African cinema 1979-1991|url=https://books.google.com/books?id=GNdDAQAAIAAJ|accessdate=3 July 2011|year=1992|publisher=Showdata|isbn=978-0-620-16529-7|pages=F\u201378, etc.}}</ref> known for his role in South African candid genre films alongside [[Leon Schuster]], his fast-paced Joker-like laugh and for his small stature as an adult.\n\nHe became renowned for his roles in ''[[Sweet 'n Short]]'' and ''[[Mama Jack]]''. His native language is [[Zulu language|Zulu]] but he also speaks English and [[Afrikaans]].\n\nHe announced his retirement from acting in 2018 after 28 years in the industry.\n\n==Filmography==\n\n{| class = \"wikitable sortable\"\n|+ Film\n|-\n! Year\n! Title\n! Role\n! class = \"unsortable\" | Notes\n|-\n| 1990\n| ''[[Oh Shucks! Here Comes UNTAG]] (Kwagga Strikes Back)''\n| Bambo\n|\n|-\n| 1991\n| ''[[Sweet 'n Short]]''\n| Alfred Short\n|\n|-\n| 1999\n| ''Alec to the Rescue''\n| Themba Ndlovu\n|\n|-\n| 2001\n| ''[[Mr Bones]]''\n|\n|\n|-\n| 2004\n| ''[[Oh Shucks, I'm Gatvol!]]''\n| Alf\n|\n|-\n| 2005\n| ''[[Mama Jack]]''\n| Shorty Dladla\n|\n|-\n| 2008\n| ''[[Mr Bones 2]]''\n|\n|\n|-\n| 2010\n| ''[[Schuks Tshabalala's Survival Guide to South Africa]]''\n| Shorty\n|\n|-\n| 2012\n| ''[[Mad Buddies]]''\n| Minister Mda<ref>{{cite news|title=Five minutes with Alfred Ntombela aka Minister Mda in 'Mad Buddies'|publisher=[[Times Live]]|date=2012-06-22|accessdate=2012-08-02|url=http://www.timeslive.co.za/thetimes/2012/06/22/five-minutes-with-alfred-ntombela-aka-minister-mda-in-mad-buddies}}</ref>\n|\n|-\n| 2013\n| ''[[Schuks! Your Country Needs You]]''\n| Shorty\n|}\n\n==References==\n{{Reflist}}\n\n{{Authority control}}\n\n{{DEFAULTSORT:Ntombela, Alfred}}\n[[Category:1972 births]]\n[[Category:Living people]]\n[[Category:Zulu people]]\n[[Category:South African male film actors]]\n", "name_user": "105.186.219.252", "label": "unsafe", "comment": "", "url_page": "//en.wikipedia.org/wiki/Alfred_Ntombela"}
{"title_page": "NPAPI", "text_new": "{{Multiple issues|\n{{more footnotes|date=October 2015}}\n{{More citations needed|date=October 2015}}\n}}\n\n'''Netscape Plugin Application Programming Interface''' ('''NPAPI''') is an [[application programming interface]] (API) that allows browser [[plugins]] to be developed. It was first developed for [[Netscape]] browsers, starting in 1995 with [[Netscape Navigator]] 2.0, but was subsequently adopted by other browsers.  With the advent of [[HTML5]], all major web browsers have removed support for this API for security reasons.\n\nIn NPAPI architecture, a plugin declares [[MIME type|content types]] (e.g. \"audio/mp3\") that it can handle. When the browser encounters a content type it cannot handle natively, it loads the appropriate plugin, sets aside space within the browser context for the plugin to render and then streams data to it. The plugin is responsible for rendering the data. The plugin runs in-place within the page, as opposed to older browsers that had to launch an external application to handle unknown content types.  NPAPI requires each plugin to implement and expose approximately 15 functions for initializing, creating, deleting and positioning plugin content. NPAPI also supports scripting, printing, full-screen plugins, windowless plugins and content streaming.\n\nNPAPI was frequently used for plugins which required intensive, low-level performance such as video players, including [[Adobe Flash Player]] and [[Microsoft Silverlight]], as well as platforms for web applications such as the [[Java Runtime Environment]].\n\n== Scripting support ==\nScripting is a feature allowing [[JavaScript]] code in a web page to interact with the plugin. Various versions of Netscape and then [[Mozilla Application Suite|Mozilla]] supported this feature using different technologies, including LiveConnect, XPConnect, and NPRuntime.\n\n=== LiveConnect ===\n\n'''LiveConnect''' is a feature of Web browsers that allows [[Java (programming language)|Java]] and JavaScript software to intercommunicate within a Web page. From the Java side it allows an applet to invoke the embedded scripts of a page or to access the built-in JavaScript environment, much as scripts can. Conversely, from the JavaScript side, it allows a script to invoke applet methods, or to access the Java runtime libraries, much as applets can.<ref>Flanagan, David. (2006).  ''JavaScript: the Definitive Guide.'' O'Reilly, Sebastopol, California.</ref><ref>For technical details, see the Mozilla [https://developer.mozilla.org/en/docs/LiveConnect Developer Documentation on LiveConnect].</ref>\n\nLiveConnect was used in [[Netscape 4]] to implement scriptability of NPAPI plugins.\n\nThe [[Open Java Interface]]-dependent implementation of LiveConnect was removed from the Mozilla source code tree in late June 2009 as part of the [https://wiki.mozilla.org/Mozilla_2 Mozilla 2] cleanup effort.<ref>{{cite web|url=https://bugzilla.mozilla.org/show_bug.cgi?id=442399|title=442399 \u2013 remove LiveConnect from the tree|work=mozilla.org}}</ref> It is no longer needed with the release of a redesigned [[Java Runtime Environment]] from Sun Microsystems. However the old implementation was restored for Gecko 1.9.2, as Apple had yet to port the newer JRE over to Mac OS X.<ref>{{cite web|url=https://bugzilla.mozilla.org/show_bug.cgi?id=517355|title=517355 \u2013 Restore OJI, Liveconnect and the JEP on the 1.9.2 branch on OS X|work=mozilla.org}}</ref>\n\nThe Java\u2013JavaScript functionality supported by the redesigned Java Runtime Environment is still called \"LiveConnect\", despite the [[Open Java Interface]]-specific approach having been abandoned.<ref>{{cite web|url=http://java.sun.com/javase/6/webnotes/6u10/plugin2/liveconnect/|title=Release Notes for the Next-Generation Java\u2122 Plug-In Technology (introduced in Java SE 6 update 10)|work=sun.com}}</ref> With Netscape 4, NPAPI was extended to allow plugins to be scripted. This extension is called LiveConnect. A plugin could implement a [[Java (programming language)|Java]] [[Class (computer programming)|class]] and expose an [[class instance|instance of it]]. The class could be called from JavaScript and from [[Java applet]]<nowiki/>s running within the page.\n\nThe disadvantage of LiveConnect is that it is heavily tied to the version of Java embedded within the Netscape browser. This prevented the browser from using other Java runtimes, and added bloat to the browser download size since it required Java to script plugins. Additionally, LiveConnect is tricky to program: The developer has to define a Java class for the plugin, run it through a specialized Java [[header file|header]] [[compiler]] and implement the native [[Method (computer programming)|methods]]. Handling [[String (computer science)|strings]], [[Exception handling|exceptions]] and other Java [[Object-oriented programming|objects]] from [[C++]] is non-obvious. In addition, LiveConnect uses an earlier and now obsolete [[application programming interface]] (API) for invoking native C++ calls from Java, called JRI. The JRI technology has long since been supplanted by [[Java Native Interface|JNI]].\n\n=== XPConnect ===\n'''XPConnect''' (Cross Platform Connect) is a technology which enables simple interoperation between [[XPCOM]] and JavaScript.\n\n==== Object connection ====\nXPConnect allows JavaScript objects to transparently access and manipulate XPCOM objects. It also enables JavaScript objects to present XPCOM compliant [[interface (computing)|interfaces]] to be called by XPCOM objects. A main goal is that objects communicating from either side of an XPCOM style interface should not generally need to know or care about the implementation language of the object on the other side of the interface.\n\nXPConnect's primary reason for existence is to replace handwritten code used in places where native code needs to interact with JavaScript code. An example is the [[Document Object Model|DOM]] module.\n\n==== Security ====\nFull privileges are only granted by default to chrome scripts, i.e. scripts that are part of the application or of an extension. For remote [[HTML]]/[[XHTML]]/[[XUL]] documents, most XPCOM objects are not accessible by the scripts as they have limited privileges due to security reasons. Even if they are accessible (e.g. the [[XMLHttpRequest]] object), the usual security restrictions can also be found (e.g. cannot open [[Uniform Resource Locator|URLs]] of other [[domain name|domains]]).\n\nMozilla was already using XPCOM to define the [[Protocol (object-oriented programming)|interfaces]] to many objects implemented in C++. Each interface was defined by an [[Interface description language|IDL]] file, and run through an IDL compiler that produced header files and a language-neutral type library that was a binary representation of the interface. This binary described the interface, the methods, the parameters, the data structures and [[Enumeration (programming)|enumerations]].\n\nXPConnect uses the type library information to marshal calls between different thread contexts and between JavaScript and natively compiled C++. XPConnect is used extensively throughout Mozilla. Starting with Netscape 6.1 and Mozilla 0.9.2, NPAPI was extended, so that a plugin could return a scriptable interface to itself and XPConnect would marshal calls to it from JavaScript and the C++ implementation.\n\nXPConnect has no Java dependency. However, the technology is based on XPCOM. Thus the plugin developer must be familiar with [[reference counting]], interfaces and IDL to implement scripting. The dependency on XPCOM led to certain dynamic linking issues (e.g. the [[fragile base class]] problem) which had to be solved before the plugin would work correctly with different browsers. XPCOM has since been changed to supply a statically linked version to address such issues. This approach also requires an .xpt file to be installed next to the [[dynamic-link library]] (DLL); otherwise the plugin appears to work, but the scripting does not, causing confusion.\n\n=== NPRuntime ===\nAt the end of 2004, all major browser companies using NPAPI agreed on NPRuntime<ref>{{cite web|url=https://developer.mozilla.org/en/Gecko_Plugin_API_Reference/Scripting_plugins|title=Scripting plugins|work=Mozilla Developer Network}}</ref> as an extension to the original NPAPI to supply scripting, via an API that is similar in style to the old C-style NPAPI and is independent of other browser technologies like Java or XPCOM. It is only supported by Firefox ESR (Extended Support Release) and [[Safari (web browser)|Safari]].\n\n== Support/deprecation ==\n\nBecause of the age of the API, security issues, and adoption of alternative technologies sucweb |url=https://helpx.adobe.com/acrobat/kb/change-in-support-for-acrobat-and-reader-plug-ins-in-modern-web-.html |title=Change in support for Acrobat and Reader plug-ins in modern web browsers | date=8 February 2016 |publisher=[[Adobe Inc.|Adobe]]}}</ref><ref name=\"ars-nopluginjdk9\">{{cite web|url=https://arstechnica.com/information-technology/2016/01/oracle-deprecates-the-java-browser-plugin-prepares-for-its-demise/|title=Oracle deprecates the Java brP|last=Giannandrea|first=J.|date=4 September 2001|website=meer.net|publisher=|accessdate=|archiveurl=https://web.archive.org/web/20071016233843/http://www.meer.net/jg/broken-plugins.html|archivedate=16 October 2007}}</ref><ref name=\"kb306790\">{{cite web|url=https://support.microsoft.com/en-us/kb/306790|title=Description of Internet Explorer Support for Netscape-Style Plug-ins|last=|first=|date=31 January 2007|website=Support|publisher=[[Microsoft]] |edition=3.4|accessdate=}}</ref><ref>{{cite web|url=https://technet.microsoft.com/library/security/ms03-015 |title=Microsoft Security Bulletin MS03-015 \u2013 Critical|last=|first=|date=23 April 2003|website=Security TechCenter|publisher=[[Microsoft]]|accessdate=}}</ref> \n* [[Google Chrome]] 45, in September 2015, permanently dropped all NPAPI support from all platforms.<ref>\"[https://blog.chromium.org/2014/11/the-final-countdown-for-npapi.html The final countdown for NPAPI]\". ''Chromium Blog''.</ref> In September 2013, Google announced that it would phase out NPAPI support in its Google Chrome browser during 2014, stating that \"[its] 90s-era architecture has become a leading cause of hangs, crashes, security incidents, and code complexity\".<ref>[https://techcrunch.com/2013/09/23/say-goodbye-to-npapi/ Google will start blocking most Netscape Plug-In API plug-ins in January 2014, will whitelist Silverlight, Unity & others]\". ''TechCrunch''. 23 September 2013.</ref><ref>\"[https://thenextweb.com/google/2013/09/23/google-chrome-drops-netscape-plugin-api-support-to-improve-stability-will-block-most-plugins-in-january-2014/ Google looks to drop Netscape Plugin API support in Chrome, starting with blocking most plugins in January 2014]\". ''The Next Web''. 23 September 2013.</ref> In May 2014, NPAPI support was removed from the [[Linux]] version of Chrome 35 and later.<ref>\"[https://blog.chromium.org/2014/05/update-on-npapi-deprecation.html Update on NPAPI deprecation]\". ''Chromium Blog''. 27 May 2014.</ref> In April 2015, Chrome for [[Windows]] and [[macOS|OS X]] (versions 42 and later) disabled NPAPI support by default. However, until September 2015, users could re-enable NPAPI.\n* [[Opera (web browser)|Opera]] dropped support with version 37 in May 2016.{{citation needed|date=May 2016}} \n* [[Firefox]] release 52.0 in March 2017 removed all support for NPAPI except for Flash.<ref>{{Cite web|title=Release Notes for Firefox 52.0|url=https://www.mozilla.org/en-US/firefox/52.0/releasenotes/#changed}}</ref><ref name=\"fxsitecompat-npapiphaseout\">{{cite web|url=https://www.fxsitecompat.com/en-CA/docs/2016/plug-in-support-has-been-dropped-other-than-flash/|title=Firefox dropping NPAPI plugins by the end of 2016\u2014except for Flash|website=Firefox Site Compatibility |date=4 October 2016 |accessdate=25 January 2017}}</ref><ref>{{cite web |url=https://support.mozilla.org/t5/Problems-with-add-ons-plugins-or/Why-do-Java-Silverlight-Adobe-Acrobat-and-other-plugins-no/ta-p/31069 |title=Why do Java, Silverlight, Adobe Acrobat and other plugins no longer work? |website=Mozilla support |accessdate=2017-03-06 |url-status=dead |archiveurl=https://web.archive.org/web/20170307050159/https://support.mozilla.org/t5/Problems-with-add-ons-plugins-or/Why-do-Java-Silverlight-Adobe-Acrobat-and-other-plugins-no/ta-p/31069 |archivedate=2017-03-07 }}</ref> Meanwhile, the ESR channel retained general support for this feature with version 52esr being the last NPAPI resort. Firefox 69.0 will disable the Flash NPAPI by default. <ref>{{Cite web|url=https://bugzilla.mozilla.org/show_bug.cgi?id=1519434|title=1519434 - Disable Flash support by default in Firefox 69|website=bugzilla.mozilla.org|language=en|access-date=2019-01-14}}</ref><ref>{{Cite web|url=https://www.ghacks.net/2019/01/12/firefox-69-flash-disabled-by-default/|title=Firefox 69: Flash disabled by default - gHacks Tech News|website=www.ghacks.net|access-date=2019-01-14}}</ref>\n* [[Safari (web browser)|Safari]] has dropped support for all NPAPI plugins except for Flash with version 12 released in September 2018.<ref>{{cite web |url=https://www.macrumors.com/2018/09/17/apple-releases-safari-12-macos-high-sierra/ |title=Apple Releases Safari 12 for macOS Sierra and macOS High Sierra |date=September 17, 2018 |last=Clover |first=Juli |website=MacRumors }}</ref>\n\nThe following list of [[web browsers]] support all NPAPI plugins: <!-- Forum posts from before 2017 are not valid sources -->\n* [[360 Secure Browser]] ({{zh|360\u5b89\u5168\u6d4f\u89c8\u5668}}) or 360 Extreme Explorer ({{lang-zh|360\u6781\u901f\u6d4f\u89c8\u5668}})<ref>[http://open.se.360.cn/open/extension_dev/npapi.html \"NPAPI \u662f\u91cd\u578b\u6b66\u5668\uff0c\u5f53\u522b\u7684\u65b9\u6cd5\u65e0\u6cd5\u5230\u8fbe\u4f60\u7684\u76ee\u7684\u65f6\uff0c\u624d\u5efa\u8bae\u4f7f\u7528\u3002\"]. ''NPAPI \u63d2\u4ef6.''</ref>  \n* [[Basilisk (web browser)|Basilisk]]<ref>[https://www.basilisk-browser.org/features.shtml \"Support for all NPAPI plugins (Unity, Silverlight, Flash, Java, authentication plugins, etc.)\"]. ''Basilisk features.''</ref> \n* [[CometBird]] {{cn|date=August 2019}}\n* [[GNOME Web]]<ref>[http://www.freesoftwaremagazine.com/books/ubuntu_applications/epiphany \"NPAPI, including Adobe Flash and IcedTea plug-ins support\"] {{Webarchive|url=https://web.archive.org/web/20081031231829/http://www.freesoftwaremagazine.com/books/ubuntu_applications/epiphany |date=2008-10-31 }}. Archived from [https://web.archive.org/web/20160412040116/http://www.freesoftwaremagazine.com/articles/epiphany the original] on 2016-05-12.</ref>\n* [[Konqueror]] {{cn|date=August 2019}}\n* [[K-Meleon]]<ref>[http://kmeleonbrowser.org/wiki/ThirdPartyPlugins \"Most third-party plug-ins designed for Mozilla/Netscape will also work with K-Meleon\"].''Third party plugins.''</ref> ([[Goanna (software)|Goanna]] engine)<ref>[http://kmeleonbrowser.org/forum/read.php?19,147947 \"Load all NPAPI-Plugins, Java, Silverlight, etc.\"] ''K-Meleon Hybrid (Goanna over Pro).''</ref> \n* [[Maxthon]]{{cn|date=August 2019}}\n* [[Midori (web browser)|Midori]] {{cn|date=August 2019}}\n* [[Pale Moon (web browser)|Pale Moon]]<ref>\"[https://www.palemoon.org/technical.shtml Full and ongoing support for NPAPI plugins (Java, Silverlight, etc.)]\". ''Pale Moon: Technical Details''</ref> (Pale Moon future [[Technology roadmap|roadmap]])<ref>[https://www.palemoon.org/roadmap.shtml \"Pale Moon supports NPAPI plug-ins. Unlike Firefox, we will not be deprecating or removing support for these kinds of plug-ins\"]. ''Pale Moon future roadmap.''</ref>  \n* [[SeaMonkey]]<ref>[https://www.seamonkey-project.org/releases/seamonkey2.1b3/changes \"32-bit plugin using carbon-based NPAPI\"]. ''Release Notes.''</ref><ref>[https://www.seamonkey-project.org/releases/seamonkey1.1.12/installation-extras \"After the JRE is installed on your machine, copy NPOJI610.dll from the install directory to your SeaMonkey plugins directory\"]. ''Java, Plug-ins and Other Extras.''</ref>  \n* [[UC Browser]] {{cn|date=August 2019}}\n* [[Uzbl]]<ref>[https://www.uzbl.org/faq.php \"We use the NPAPI plugin architecture (just like Mozilla) so just install the plugins normally, and things should work\"]. ''Uzbl FAQ.''</ref> \n* [[Waterfox]] (Allowing running of all 64-bit NPAPI plugins)<ref>\"[https://www.waterfox.net/ They should be used responsibly, but Waterfox still supports the use of Java and Silverlight plugins, as well as any other 64-Bit NPAPI plugins]. ''Support for NPAPI Plugins.''</ref>\n\n== Similar technologies ==\n\n=== ActiveX ===\n{{Main|ActiveX}}Internet Explorer and [[Internet Explorer shell|browsers based on Internet Explorer]] use ActiveX controls, ActiveX documents and ActiveX scripting to offer in-page extensibility on par with NPAPI. Although commonly associated with Internet Explorer, ActiveX is integration technology that allows any computer program to integrate parts of other computer programs that support such integration.<ref>{{cite web|url = https://support.microsoft.com/en-us/kb/154544|title = Description of ActiveX Technologies|date = 19 January 2007|accessdate = |website = Support|publisher = [[Microsoft]]|last = |first = }}</ref> Internet Explorer, however, is discontinued and its replacement, Microsoft Edge, does not support ActiveX.\n\n=== PPAPI ===\n{{See also|Google Native Client#Pepper}}\nOn 12 August 2009 a page on Google Code<ref>{{cite web|url = https://code.google.com/p/ppapi/|title = ppapi|website = [[Google Code]]|archiveurl =https://web.archive.org/web/20100702000807/http://code.google.com/p/ppapi/|url-status = dead|archivedate =2010-07-02}}</ref> introduced a new project called Pepper, with the associated Pepper Plugin API (PPAPI);<ref>{{cite web|url=https://www.chromium.org/nativeclient/getting-started/getting-started-background-and-basics#TOC-Pepper-Plugin-API-PPAPI-|title=Getting Started: Background and Basics \u2013 The Chromium Projects|work=chromium.org}}</ref> PPAPI is a derivative of NPAPI aimed to make plugins more portable and more secure.<ref>{{cite web|url=https://code.google.com/p/ppapi/wiki/Concepts|title=Concepts - ppapi - Important concepts for working with PPAPI. - Pepper Plugin API \u2013 Google Project Hosting|work=google.com}}</ref> This extension is designed specifically to ease the implementation of out-of-[[Process (computing)|process]] plugin execution.\n\nPPAPI was initially only supported by Google Chrome and [[Chromium (web browser)|Chromium]]. Later, other Chromium-based browsers such as [[Opera (web browser)|Opera]] and [[Vivaldi (web browser)|Vivaldi]] added PPAPI plugin support.\n\nIn February 2012 [[Adobe Systems]] announced that future Linux versions of Adobe Flash Player would be provided only via PPAPI. The previous release, Flash Player 11.2, with NPAPI support, would receive security updates for five years.<ref>{{cite web|url=http://blogs.adobe.com/flashplayer/2012/02/adobe-and-google-partnering-for-flash-player-on-linux.html|title=Adobe and Google Partnering for Flash Player on Linux|work=adobe.com|access-date=2012-03-07|archive-url=https://web.archive.org/web/20120223062713/http://blogs.adobe.com/flashplayer/2012/02/adobe-and-google-partnering-for-flash-player-on-linux.html|archive-date=2012-02-23|url-status=dead}}</ref> In August 2016 Adobe announced that, contrary to their previous statement, it would again support the NPAPI Flash Player on Linux and keep releasing new versions of it.<ref>{{cite web|last1=Campbell|first1=Chris|title=Beta News \u2013 Flash Player NPAPI for Linux|url=https://blogs.adobe.com/flashplayer/2016/08/beta-news-flash-player-npapi-for-linux.html|website=Adobe AIR and Adobe Flash Player Team Blog|publisher=Adobe Systems|accessdate=8 September 2016|date=31 August 2016}}</ref>\n\nIn January 2020, Google announced that support for PPAPI would be removed from Google Chrome and Chromium in June 2021.<ref>{{cite web |url=https://blog.chromium.org/2020/01/moving-forward-from-chrome-apps.html |title=Moving Forward from Chrome Apps |date=January 15, 2020 |author=Anthony Laforge |website=Chromium Blog }}</ref>\n\n== See also ==\n* [[Netscape Server Application Programming Interface]] (NSAPI)\n\n== References ==\n{{Reflist}}\n\n== External links ==\n* [https://developer.mozilla.org/en/Plugins Plugin development documentation] on Mozilla Developer Center, including the NPAPI API\n* [https://www.mozilla.org/projects/plugins/plugin-host-control.html An ActiveX control that hosts plugins] \u2013 a replacement for plugin.ocx that was removed from Internet Explorer.\n* [https://openlibrary.org/books/OL1015194M/Programming_Netscape_plug-ins_Zan_Oliphant. Book on Programming Netscape Plug-Ins by Zan Oliphant]\n* [https://code.google.com/p/nixysa/ Nixysa: A glue code generation framework for NPAPI plugins. Apache 2.0 license.]\n* [http://npapi.com/tutorial NPAPI Tutorial ''Building a Firefox Plugin''] ([http://npapi.com/tutorial2 Part two], [http://npapi.com/tutorial3 Part three], [http://npapi.com/tutorial4 Part four])\n* [https://web.archive.org/web/20150906115517/https://dev.opera.com/extensions/tut_npapi.html ''Opera 15+ extensions documentation'']\n\n{{Web interfaces}}\n\n[[Category:Application programming interfaces]]\n[[Category:Software add-ons]]\n[[Category:Web browsers]]\n", "text_old": "{{Multiple issues|\n{{more footnotes|date=October 2015}}\n{{More citations needed|date=October 2015}}\n}}\n\n'''Netscape Plugin Application Programming Interface''' ('''NPAPI''') is an [[application programming interface]] (API) that allows browser [[plugins]] to be developed. It was first developed for [[Netscape]] browsers, starting in 1995 with [[Netscape Navigator]] 2.0, but was subsequently adopted by other browsers.  With the advent of [[HTML5]], all major web browsers have removed support for this API for security reasons.\n\nIn NPAPI architecture, a plugin declares [[MIME type|content types]] (e.g. \"audio/mp3\") that it can handle. When the browser encounters a content type it cannot handle natively, it loads the appropriate plugin, sets aside space within the browser context for the plugin to render and then streams data to it. The plugin is responsible for rendering the data. The plugin runs in-place within the page, as opposed to older browsers that had to launch an external application to handle unknown content types.  NPAPI requires each plugin to implement and expose approximately 15 functions for initializing, creating, deleting and positioning plugin content. NPAPI also supports scripting, printing, full-screen plugins, windowless plugins and content streaming.\n\nNPAPI was frequently used for plugins which required intensive, low-level performance such as video players, including [[Adobe Flash Player]] and [[Microsoft Silverlight]], as well as platforms for web applications such as the [[Java Runtime Environment]].\n\n== Scripting support ==\nScripting is a feature allowing [[JavaScript]] code in a web page to interact with the plugin. Various versions of Netscape and then [[Mozilla Application Suite|Mozilla]] supported this feature using different technologies, including LiveConnect, XPConnect, and NPRuntime.\n\n=== LiveConnect ===\n\n'''LiveConnect''' is a feature of Web browsers that allows [[Java (programming language)|Java]] and JavaScript software to intercommunicate within a Web page. From the Java side it allows an applet to invoke the embedded scripts of a page or to access the built-in JavaScript environment, much as scripts can. Conversely, from the JavaScript side, it allows a script to invoke applet methods, or to access the Java runtime libraries, much as applets can.<ref>Flanagan, David. (2006).  ''JavaScript: the Definitive Guide.'' O'Reilly, Sebastopol, California.</ref><ref>For technical details, see the Mozilla [https://developer.mozilla.org/en/docs/LiveConnect Developer Documentation on LiveConnect].</ref>\n\nLiveConnect was used in [[Netscape 4]] to implement scriptability of NPAPI plugins.\n\nThe [[Open Java Interface]]-dependent implementation of LiveConnect was removed from the Mozilla source code tree in late June 2009 as part of the [https://wiki.mozilla.org/Mozilla_2 Mozilla 2] cleanup effort.<ref>{{cite web|url=https://bugzilla.mozilla.org/show_bug.cgi?id=442399|title=442399 \u2013 remove LiveConnect from the tree|work=mozilla.org}}</ref> It is no longer needed with the release of a redesigned [[Java Runtime Environment]] from Sun Microsystems. However the old implementation was restored for Gecko 1.9.2, as Apple had yet to port the newer JRE over to Mac OS X.<ref>{{cite web|url=https://bugzilla.mozilla.org/show_bug.cgi?id=517355|title=517355 \u2013 Restore OJI, Liveconnect and the JEP on the 1.9.2 branch on OS X|work=mozilla.org}}</ref>\n\nThe Java\u2013JavaScript functionality supported by the redesigned Java Runtime Environment is still called \"LiveConnect\", despite the [[Open Java Interface]]-specific approach having been abandoned.<ref>{{cite web|url=http://java.sun.com/javase/6/webnotes/6u10/plugin2/liveconnect/|title=Release Notes for the Next-Generation Java\u2122 Plug-In Technology (introduced in Java SE 6 update 10)|work=sun.com}}</ref> With Netscape 4, NPAPI was extended to allow plugins to be scripted. This extension is called LiveConnect. A plugin could implement a [[Java (programming language)|Java]] [[Class (computer programming)|class]] and expose an [[class instance|instance of it]]. The class could be called from JavaScript and from [[Java applet]]<nowiki/>s running within the page.\n\nThe disadvantage of LiveConnect is that it is heavily tied to the version of Java embedded within the Netscape browser. This prevented the browser from using other Java runtimes, and added bloat to the browser download size since it required Java to script plugins. Additionally, LiveConnect is tricky to program: The developer has to define a Java class for the plugin, run it through a specialized Java [[header file|header]] [[compiler]] and implement the native [[Method (computer programming)|methods]]. Handling [[String (computer science)|strings]], [[Exception handling|exceptions]] and other Java [[Object-oriented programming|objects]] from [[C++]] is non-obvious. In addition, LiveConnect uses an earlier and now obsolete [[application programming interface]] (API) for invoking native C++ calls from Java, called JRI. The JRI technology has long since been supplanted by [[Java Native Interface|JNI]].\n\n=== XPConnect ===\n'''XPConnect''' (Cross Platform Connect) is a technology which enables simple interoperation between [[XPCOM]] and JavaScript.\n\n==== Object connection ====\nXPConnect allows JavaScript objects to transparently access and manipulate XPCOM objects. It also enables JavaScript objects to present XPCOM compliant [[interface (computing)|interfaces]] to be called by XPCOM objects. A main goal is that objects communicating from either side of an XPCOM style interface should not generally need to know or care about the implementation language of the object on the other side of the interface.\n\nXPConnect's primary reason for existence is to replace handwritten code used in places where native code needs to interact with JavaScript code. An example is the [[Document Object Model|DOM]] module.\n\n==== Security ====\nFull privileges are only granted by default to chrome scripts, i.e. scripts that are part of the application or of an extension. For remote [[HTML]]/[[XHTML]]/[[XUL]] documents, most XPCOM objects are not accessible by the scripts as they have limited privileges due to security reasons. Even if they are accessible (e.g. the [[XMLHttpRequest]] object), the usual security restrictions can also be found (e.g. cannot open [[Uniform Resource Locator|URLs]] of other [[domain name|domains]]).\n\nMozilla was already using XPCOM to define the [[Protocol (object-oriented programming)|interfaces]] to many objects implemented in C++. Each interface was defined by an [[Interface description language|IDL]] file, and run through an IDL compiler that produced header files and a language-neutral type library that was a binary representation of the interface. This binary described the interface, the methods, the parameters, the data structures and [[Enumeration (programming)|enumerations]].\n\nXPConnect uses the type library information to marshal calls between different thread contexts and between JavaScript and natively compiled C++. XPConnect is used extensively throughout Mozilla. Starting with Netscape 6.1 and Mozilla 0.9.2, NPAPI was extended, so that a plugin could return a scriptable interface to itself and XPConnect would marshal calls to it from JavaScript and the C++ implementation.\n\nXPConnect has no Java dependency. However, the technology is based on XPCOM. Thus the plugin developer must be familiar with [[reference counting]], interfaces and IDL to implement scripting. The dependency on XPCOM led to certain dynamic linking issues (e.g. the [[fragile base class]] problem) which had to be solved before the plugin would work correctly with different browsers. XPCOM has since been changed to supply a statically linked version to address such issues. This approach also requires an .xpt file to be installed next to the [[dynamic-link library]] (DLL); otherwise the plugin appears to work, but the scripting does not, causing confusion.\n\n=== NPRuntime ===\nAt the end of 2004, all major browser companies using NPAPI agreed on NPRuntime<ref>{{cite web|url=https://developer.mozilla.org/en/Gecko_Plugin_API_Reference/Scripting_plugins|title=Scripting plugins|work=Mozilla Developer Network}}</ref> as an extension to the original NPAPI to supply scripting, via an API that is similar in style to the old C-style NPAPI and is independent of other browser technologies like Java or XPCOM. It is only supported by Firefox ESR (Extended Support Release) and [[Safari (web browser)|Safari]].\n\n== Support/deprecation ==\n\nBecause of the age of the API, security issues, and adoption of alternative technologies such as [[HTML5]], software vendors began to phase out NPAPI support in 2013.<ref>{{cite web |url=https://helpx.adobe.com/acrobat/kb/change-in-support-for-acrobat-and-reader-plug-ins-in-modern-web-.html |title=Change in support for Acrobat and Reader plug-ins in modern web browsers | date=8 February 2016 |publisher=[[Adobe Inc.|Adobe]]}}</ref><ref name=\"ars-nopluginjdk9\">{{cite web|url=https://arstechnica.com/information-technology/2016/01/oracle-deprecates-the-java-browser-plugin-prepares-for-its-demise/|title=Oracle deprecates the Java browser plugin, prepares for its demise |website=Ars Technica |date=28 January 2016 |accessdate=15 April 2016}}</ref>\n\n* [[Internet Explorer]] versions 3 through 5.5 SP2 supported NPAPI, allowing plugins that functioned in Netscape Navigator to function in Internet Explorer. Support came via a small [[ActiveX]] control (named \"<tt>plugin.ocx</tt>\") that acted as a [[Shim (computing)|shim]] between ActiveX and the NPAPI plugin. Microsoft dropped support in version 5.5 SP2 onwards for security reasons.<ref name=\"kb303401\">{{cite web |url=https://support.microsoft.com/en-us/kb/303401|title=Netscape-Style Plug-ins Do Not Work After Upgrading Internet Explorer|last=|first=|date=27 July 2007|website=Support|publisher=[[Microsoft]] |edition=3.3|accessdate=}}</ref><ref name=\"giannandrea\">{{cite web|url=http://www.meer.net/jg/broken-plugins.html|title=Microsoft breaks Web Plugins in Windows XP|last=Giannandrea|first=J.|date=4 September 2001|website=meer.net|publisher=|accessdate=|archiveurl=https://web.archive.org/web/20071016233843/http://www.meer.net/jg/broken-plugins.html|archivedate=16 October 2007}}</ref><ref name=\"kb306790\">{{cite web|url=https://support.microsoft.com/en-us/kb/306790|title=Description of Internet Explorer Support for Netscape-Style Plug-ins|last=|first=|date=31 January 2007|website=Support|publisher=[[Microsoft]] |edition=3.4|accessdate=}}</ref><ref>{{cite web|url=https://technet.microsoft.com/library/security/ms03-015 |title=Microsoft Security Bulletin MS03-015 \u2013 Critical|last=|first=|date=23 April 2003|website=Security TechCenter|publisher=[[Microsoft]]|accessdate=}}</ref> \n* [[Google Chrome]] 45, in September 2015, permanently dropped all NPAPI support from all platforms.<ref>\"[https://blog.chromium.org/2014/11/the-final-countdown-for-npapi.html The final countdown for NPAPI]\". ''Chromium Blog''.</ref> In September 2013, Google announced that it would phase out NPAPI support in its Google Chrome browser during 2014, stating that \"[its] 90s-era architecture has become a leading cause of hangs, crashes, security incidents, and code complexity\".<ref>[https://techcrunch.com/2013/09/23/say-goodbye-to-npapi/ Google will start blocking most Netscape Plug-In API plug-ins in January 2014, will whitelist Silverlight, Unity & others]\". ''TechCrunch''. 23 September 2013.</ref><ref>\"[https://thenextweb.com/google/2013/09/23/google-chrome-drops-netscape-plugin-api-support-to-improve-stability-will-block-most-plugins-in-january-2014/ Google looks to drop Netscape Plugin API support in Chrome, starting with blocking most plugins in January 2014]\". ''The Next Web''. 23 September 2013.</ref> In May 2014, NPAPI support was removed from the [[Linux]] version of Chrome 35 and later.<ref>\"[https://blog.chromium.org/2014/05/update-on-npapi-deprecation.html Update on NPAPI deprecation]\". ''Chromium Blog''. 27 May 2014.</ref> In April 2015, Chrome for [[Windows]] and [[macOS|OS X]] (versions 42 and later) disabled NPAPI support by default. However, until September 2015, users could re-enable NPAPI.\n* [[Opera (web browser)|Opera]] dropped support with version 37 in May 2016.{{citation needed|date=May 2016}} \n* [[Firefox]] release 52.0 in March 2017 removed all support for NPAPI except for Flash.<ref>{{Cite web|title=Release Notes for Firefox 52.0|url=https://www.mozilla.org/en-US/firefox/52.0/releasenotes/#changed}}</ref><ref name=\"fxsitecompat-npapiphaseout\">{{cite web|url=https://www.fxsitecompat.com/en-CA/docs/2016/plug-in-support-has-been-dropped-other-than-flash/|title=Firefox dropping NPAPI plugins by the end of 2016\u2014except for Flash|website=Firefox Site Compatibility |date=4 October 2016 |accessdate=25 January 2017}}</ref><ref>{{cite web |url=https://support.mozilla.org/t5/Problems-with-add-ons-plugins-or/Why-do-Java-Silverlight-Adobe-Acrobat-and-other-plugins-no/ta-p/31069 |title=Why do Java, Silverlight, Adobe Acrobat and other plugins no longer work? |website=Mozilla support |accessdate=2017-03-06 |url-status=dead |archiveurl=https://web.archive.org/web/20170307050159/https://support.mozilla.org/t5/Problems-with-add-ons-plugins-or/Why-do-Java-Silverlight-Adobe-Acrobat-and-other-plugins-no/ta-p/31069 |archivedate=2017-03-07 }}</ref> Meanwhile, the ESR channel retained general support for this feature with version 52esr being the last NPAPI resort. Firefox 69.0 will disable the Flash NPAPI by default. <ref>{{Cite web|url=https://bugzilla.mozilla.org/show_bug.cgi?id=1519434|title=1519434 - Disable Flash support by default in Firefox 69|website=bugzilla.mozilla.org|language=en|access-date=2019-01-14}}</ref><ref>{{Cite web|url=https://www.ghacks.net/2019/01/12/firefox-69-flash-disabled-by-default/|title=Firefox 69: Flash disabled by default - gHacks Tech News|website=www.ghacks.net|access-date=2019-01-14}}</ref>\n* [[Safari (web browser)|Safari]] has dropped support for all NPAPI plugins except for Flash with version 12 released in September 2018.<ref>{{cite web |url=https://www.macrumors.com/2018/09/17/apple-releases-safari-12-macos-high-sierra/ |title=Apple Releases Safari 12 for macOS Sierra and macOS High Sierra |date=September 17, 2018 |last=Clover |first=Juli |website=MacRumors }}</ref>\n\nThe following list of [[web browsers]] support all NPAPI plugins: <!-- Forum posts from before 2017 are not valid sources -->\n* [[360 Secure Browser]] ({{zh|360\u5b89\u5168\u6d4f\u89c8\u5668}}) or 360 Extreme Explorer ({{lang-zh|360\u6781\u901f\u6d4f\u89c8\u5668}})<ref>[http://open.se.360.cn/open/extension_dev/npapi.html \"NPAPI \u662f\u91cd\u578b\u6b66\u5668\uff0c\u5f53\u522b\u7684\u65b9\u6cd5\u65e0\u6cd5\u5230\u8fbe\u4f60\u7684\u76ee\u7684\u65f6\uff0c\u624d\u5efa\u8bae\u4f7f\u7528\u3002\"]. ''NPAPI \u63d2\u4ef6.''</ref>  \n* [[Basilisk (web browser)|Basilisk]]<ref>[https://www.basilisk-browser.org/features.shtml \"Support for all NPAPI plugins (Unity, Silverlight, Flash, Java, authentication plugins, etc.)\"]. ''Basilisk features.''</ref> \n* [[CometBird]] {{cn|date=August 2019}}\n* [[GNOME Web]]<ref>[http://www.freesoftwaremagazine.com/books/ubuntu_applications/epiphany \"NPAPI, including Adobe Flash and IcedTea plug-ins support\"] {{Webarchive|url=https://web.archive.org/web/20081031231829/http://www.freesoftwaremagazine.com/books/ubuntu_applications/epiphany |date=2008-10-31 }}. Archived from [https://web.archive.org/web/20160412040116/http://www.freesoftwaremagazine.com/articles/epiphany the original] on 2016-05-12.</ref>\n* [[Konqueror]] {{cn|date=August 2019}}\n* [[K-Meleon]]<ref>[http://kmeleonbrowser.org/wiki/ThirdPartyPlugins \"Most third-party plug-ins designed for Mozilla/Netscape will also work with K-Meleon\"].''Third party plugins.''</ref> ([[Goanna (software)|Goanna]] engine)<ref>[http://kmeleonbrowser.org/forum/read.php?19,147947 \"Load all NPAPI-Plugins, Java, Silverlight, etc.\"] ''K-Meleon Hybrid (Goanna over Pro).''</ref> \n* [[Maxthon]]{{cn|date=August 2019}}\n* [[Midori (web browser)|Midori]] {{cn|date=August 2019}}\n* [[Pale Moon (web browser)|Pale Moon]]<ref>\"[https://www.palemoon.org/technical.shtml Full and ongoing support for NPAPI plugins (Java, Silverlight, etc.)]\". ''Pale Moon: Technical Details''</ref> (Pale Moon future [[Technology roadmap|roadmap]])<ref>[https://www.palemoon.org/roadmap.shtml \"Pale Moon supports NPAPI plug-ins. Unlike Firefox, we will not be deprecating or removing support for these kinds of plug-ins\"]. ''Pale Moon future roadmap.''</ref>  \n* [[SeaMonkey]]<ref>[https://www.seamonkey-project.org/releases/seamonkey2.1b3/changes \"32-bit plugin using carbon-based NPAPI\"]. ''Release Notes.''</ref><ref>[https://www.seamonkey-project.org/releases/seamonkey1.1.12/installation-extras \"After the JRE is installed on your machine, copy NPOJI610.dll from the install directory to your SeaMonkey plugins directory\"]. ''Java, Plug-ins and Other Extras.''</ref>  \n* [[UC Browser]] {{cn|date=August 2019}}\n* [[Uzbl]]<ref>[https://www.uzbl.org/faq.php \"We use the NPAPI plugin architecture (just like Mozilla) so just install the plugins normally, and things should work\"]. ''Uzbl FAQ.''</ref> \n* [[Waterfox]] (Allowing running of all 64-bit NPAPI plugins)<ref>\"[https://www.waterfox.net/ They should be used responsibly, but Waterfox still supports the use of Java and Silverlight plugins, as well as any other 64-Bit NPAPI plugins]. ''Support for NPAPI Plugins.''</ref>\n\n== Similar technologies ==\n\n=== ActiveX ===\n{{Main|ActiveX}}Internet Explorer and [[Internet Explorer shell|browsers based on Internet Explorer]] use ActiveX controls, ActiveX documents and ActiveX scripting to offer in-page extensibility on par with NPAPI. Although commonly associated with Internet Explorer, ActiveX is integration technology that allows any computer program to integrate parts of other computer programs that support such integration.<ref>{{cite web|url = https://support.microsoft.com/en-us/kb/154544|title = Description of ActiveX Technologies|date = 19 January 2007|accessdate = |website = Support|publisher = [[Microsoft]]|last = |first = }}</ref> Internet Explorer, however, is discontinued and its replacement, Microsoft Edge, does not support ActiveX.\n\n=== PPAPI ===\n{{See also|Google Native Client#Pepper}}\nOn 12 August 2009 a page on Google Code<ref>{{cite web|url = https://code.google.com/p/ppapi/|title = ppapi|website = [[Google Code]]|archiveurl =https://web.archive.org/web/20100702000807/http://code.google.com/p/ppapi/|url-status = dead|archivedate =2010-07-02}}</ref> introduced a new project called Pepper, with the associated Pepper Plugin API (PPAPI);<ref>{{cite web|url=https://www.chromium.org/nativeclient/getting-started/getting-started-background-and-basics#TOC-Pepper-Plugin-API-PPAPI-|title=Getting Started: Background and Basics \u2013 The Chromium Projects|work=chromium.org}}</ref> PPAPI is a derivative of NPAPI aimed to make plugins more portable and more secure.<ref>{{cite web|url=https://code.google.com/p/ppapi/wiki/Concepts|title=Concepts - ppapi - Important concepts for working with PPAPI. - Pepper Plugin API \u2013 Google Project Hosting|work=google.com}}</ref> This extension is designed specifically to ease the implementation of out-of-[[Process (computing)|process]] plugin execution.\n\nPPAPI was initially only supported by Google Chrome and [[Chromium (web browser)|Chromium]]. Later, other Chromium-based browsers such as [[Opera (web browser)|Opera]] and [[Vivaldi (web browser)|Vivaldi]] added PPAPI plugin support.\n\nIn February 2012 [[Adobe Systems]] announced that future Linux versions of Adobe Flash Player would be provided only via PPAPI. The previous release, Flash Player 11.2, with NPAPI support, would receive security updates for five years.<ref>{{cite web|url=http://blogs.adobe.com/flashplayer/2012/02/adobe-and-google-partnering-for-flash-player-on-linux.html|title=Adobe and Google Partnering for Flash Player on Linux|work=adobe.com|access-date=2012-03-07|archive-url=https://web.archive.org/web/20120223062713/http://blogs.adobe.com/flashplayer/2012/02/adobe-and-google-partnering-for-flash-player-on-linux.html|archive-date=2012-02-23|url-status=dead}}</ref> In August 2016 Adobe announced that, contrary to their previous statement, it would again support the NPAPI Flash Player on Linux and keep releasing new versions of it.<ref>{{cite web|last1=Campbell|first1=Chris|title=Beta News \u2013 Flash Player NPAPI for Linux|url=https://blogs.adobe.com/flashplayer/2016/08/beta-news-flash-player-npapi-for-linux.html|website=Adobe AIR and Adobe Flash Player Team Blog|publisher=Adobe Systems|accessdate=8 September 2016|date=31 August 2016}}</ref>\n\nIn January 2020, Google announced that support for PPAPI would be removed from Google Chrome and Chromium in June 2021.<ref>{{cite web |url=https://blog.chromium.org/2020/01/moving-forward-from-chrome-apps.html |title=Moving Forward from Chrome Apps |date=January 15, 2020 |author=Anthony Laforge |website=Chromium Blog }}</ref>\n\n== See also ==\n* [[Netscape Server Application Programming Interface]] (NSAPI)\n\n== References ==\n{{Reflist}}\n\n== External links ==\n* [https://developer.mozilla.org/en/Plugins Plugin development documentation] on Mozilla Developer Center, including the NPAPI API\n* [https://www.mozilla.org/projects/plugins/plugin-host-control.html An ActiveX control that hosts plugins] \u2013 a replacement for plugin.ocx that was removed from Internet Explorer.\n* [https://openlibrary.org/books/OL1015194M/Programming_Netscape_plug-ins_Zan_Oliphant. Book on Programming Netscape Plug-Ins by Zan Oliphant]\n* [https://code.google.com/p/nixysa/ Nixysa: A glue code generation framework for NPAPI plugins. Apache 2.0 license.]\n* [http://npapi.com/tutorial NPAPI Tutorial ''Building a Firefox Plugin''] ([http://npapi.com/tutorial2 Part two], [http://npapi.com/tutorial3 Part three], [http://npapi.com/tutorial4 Part four])\n* [https://web.archive.org/web/20150906115517/https://dev.opera.com/extensions/tut_npapi.html ''Opera 15+ extensions documentation'']\n\n{{Web interfaces}}\n\n[[Category:Application programming interfaces]]\n[[Category:Software add-ons]]\n[[Category:Web browsers]]\n", "name_user": "108.63.119.208", "label": "unsafe", "comment": "", "url_page": "//en.wikipedia.org/wiki/NPAPI"}
