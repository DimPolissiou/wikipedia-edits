{"title_page": "Roy Pea", "text_new": "{{Infobox person\n| image = Roy Pea TeachAIDS Inaugural Gala.jpg\n| image_size = \n| name = Roy Pea\n| caption = Pea at [[TeachAIDS]] 2010 inaugural gala\n| birth_date = {{b-da|July 5, 1952}}\n| birth_place = Highland Park, MI\n| death_date =\n| death_place = \n| website={{url|http://www.stanford.edu/~roypea}}\n}}\n\n'''Roy Pea''' is David Jacks Professor of Learning Sciences and Education at the [[Stanford Graduate School of Education]]. He has extensively published works in the field of the [[Learning Sciences]] and on learning technology design, and made significant contributions since 1981 to the understanding of how people learn with technology.\n\n== Biography ==\n\nPea was born in [[Highland Park, Michigan]] on July 5, 1952. He received a dual major B.A. in [[philosophy]] and [[psychology]] from [[Michigan State University]] with an independently declared major in Cognition (1974) working with his mentor and friend [[Stephen Toulmin]], and later, a D.Phil. in [[developmental psychology]] from [[Oxford University]] (1978), while studying as a [[Rhodes Scholar]], working with his advisor [[Jerome Bruner]]. After studying child language and cognitive development from 1975 to 1980, his research concerns were attracted to understanding how innovations in computing and communications technologies can significantly influence learning, thinking, collaboration, and educational systems.\n\n=== Development of the learning sciences ===\n\nPea is a key figure in the development of the [[learning sciences]] as a recognized field of research and graduate study. He founded and served as the first director of the first learning sciences doctoral program, at [[Northwestern University]] (1991), directing the NSF-funded field-building [[Center for Innovative Learning Technologies]] [http://cilt.concord.org/], and launching in 2002 the Learning Sciences and Technology Design (LSTD: http://ed.stanford.edu/academics/doctoral/lstd) program at [[Stanford University]]. In 2004\u20132005, Pea was President of the [[International Society for the Learning Sciences]].\n\nPea was one of the first research scientists to build the [[Bank Street College]] Center for Children in Technology (1981\u20131986), the first social sciences center devoted to studying children's learning with technology. Later, recruited by [[John Seely Brown]] and [[Jim Greeno]] to contribute to the development of the intellectual agenda of the Palo Alto, California\u2013based think-tank, The [[Institute for Research on Learning]] (1988\u20131991), he developed their K-12 learning technologies emphasis, with pioneering work on distributed intelligence [https://books.google.com/books?hl=en&lr=&id=m8Yna0cjxAgC&oi=fnd&pg=PA47&ots=-sxx-MpVFw&sig=uIf7RN8iIvJMlO2gc_B4HXx6NhM#v=onepage&q&f=false], learning by multimedia authoring [https://stanford.academia.edu/RoyPea/Papers/261515/Learning_Through_Multimedia], and science learning with dynamic diagramming tools [http://www.stanford.edu/~roypea/HTML1%20Folder/Dynagrams.html].\n\n=== Research centers and industry advisor ===\n\nIn 1996, after a year at the Center for Advanced Studies in the Behavioral Sciences, Pea was recruited to [[SRI International]], where he worked with colleagues to build a major national [[Center for Technology in Learning]],<ref>{{cite web|url=http://ctl.sri.com/|title=Center for Technology in Learning|publisher=[[SRI International]]|accessdate=2013-06-14}}</ref> until recruited to Stanford University in 2001. At Stanford, Pea co-founded Stanford's ''H-STAR Institute'' (Human Sciences and Technologies Advanced Research) with [[Byron Reeves]], and is now H-STAR Institute Director.<ref>[http://hstar.stanford.edu/cgi-bin/ H-STAR Institute]</ref> He is also co-director of the National Science Foundation-funded ''LIFE Center'',<ref>[http://life-slc.org LIFE Center]</ref> one of six national [[Science of Learning Centers]], whose studies seek to inform better bridging of the sciences of informal and formal learning.\n\nIn addition to serving as founding editor of the Cambridge University Press Series [[Learning in Doing: Cognitive, Social and Computational Perspectives]] since 1987,<ref>[http://www.cambridge.org/aus/series/sSeries.asp?code=LID]</ref> Pea was co-author of the 2000 National Academy Press volume ''How People Learn'',<ref>[http://www.nap.edu/openbook.php?isbn=0309070368]</ref> Co-Editor of the 2007 Book ''Video Research in the Learning Sciences'',<ref>[https://www.amazon.com/Video-Research-Learning-Sciences-Goldman/dp/080585360X]</ref> and co-author of the 2010 US National Educational Technology Plan.<ref>[http://www.ed.gov/technology/netp-2010]</ref>\n\nPea served from 1999 to 2009 as a founding director for [[Teachscape]],<ref>[http://www.teachscape.com/html/ts/nps/index.html]</ref> a company he co-founded with Mark Atkinson in 1999 that provides comprehensive K-12 teacher professional development services incorporating web-based video case studies of standards-based teaching and communities of learners. In addition to academic research and teaching, he advises a number of companies, non-profits, research centers, projects and federal agencies or foundations involved in learning with technologies. Pea is also a learning sciences advisor to [[HIV/AIDS]] education nonprofit [[TeachAIDS]].<ref>{{cite web|title=TeachAIDS: Team|url=http://teachaids.org/team.php|work=[[TeachAIDS]]|date=16 December 2010|accessdate=16 December 2010|url-status=dead|archiveurl=https://web.archive.org/web/20100610080734/http://www.teachaids.org/team.php|archivedate=10 June 2010}}</ref>\n\nHe is a Fellow of the [[National Academy of Education]] [http://www.naeducation.org/], [[Association for Psychological Science]], The [[Center for Advanced Study in the Behavioral Sciences]], the [[American Educational Research Association]], and the [[International Society for the Learning Sciences]] [https://www.isls.org/about/isls-fellows].\n\n==Select publications==\n* Approximately 230 papers in academic journals, 6 co-edited volumes\n* Nasir, N., Lee, C., Pea, R., & De Royston, M.M. (2020). (Eds.), Routledge Handbook of the Cultural Foundations of Learning. New York: Routledge.\n* Niemi, D., Pea, R., Saxberg, B., & Clark, R.E. (2018). (Eds.). Learning Analytics in Education. Charlotte, NC: Information Age Publishing.\n* Grover, S., & Pea, R. (2018). Computational thinking: A competency whose time has come. In S. Sentance, E. Barendsen & C. Schulte (Eds.), Computer science education: Perspectives on teaching and learning (pp.&nbsp;19\u201338). London: Bloomsbury.\n* Schneider, B., & Pea, R. (2017). Real-time mutual gaze perception enhances collaborative learning and collaboration quality. In M. Orey & R.M. Branch (Eds.), Educational media and technology yearbook, Volume 40, pp.&nbsp;99\u2013125. New York: Springer.\n* Pea, R. (2016). The prehistory of the learning sciences. In M.A. Evans, M.J. Packer, & R.K. Sawyers (Eds.), The Learning Sciences: Past, Present, and Future (pp.&nbsp;32\u201358). New York: Cambridge University Press.\n* Pea, R., Nass, C., Meheula, L., Rance, M., Kumar, A., Bamford, H., Nass, M., Simha, A., Stillerman, B., Yang, S., & Zhou, M. (2012). Media Use, Face-to-Face Communication, Media Multitasking and Social Well-Being among 8-12 Year Old Girls. Developmental Psychology, 48(2), 327-336. doi: 10.1037/a0027030\n* White, T., & Pea, R. (2011). Distributed by design: On the promises and pitfalls of collaborative learning with multiple representations. The Journal of the Learning Sciences, 20(3), 1-59.\n* Pea, R., & Martin, L. (2010). Values that occasion and guide mathematics in the family. In W. R. Penuel & K. O'Connor (Eds.), Learning Research as a Human Science (pp.&nbsp;34\u201352), National Society for the Study of Education Yearbook, 109(1).\n* Zahn. C., Pea, R., Hesse, F. W., & Rosen, J. (2010). Comparing simple and advanced video tools as supports for collaborative design processes. J. Learning Sciences, 19, 1-38.\n* Pea, R., & Lindgren, R. (2008, Oct-Dec). Video collaboratories for research and education: an analysis of collaboration design patterns. IEEE Transactions on Learning Technologies, 1(4), 235-247.\n* Derry, S., Pea, R.D., Barron, B., Engle, R.A., Erickson, F., Goldman, R., Hall, R., Koschmann, T., Lemke, J., Sherin, M.G. & Sherin, B.L. (2010). Conducting Video Research in the Learning Sciences: Guidance on Selection, Analysis, Technology, and Ethics. Journal of the Learning Sciences, 19(1), 3-53.\n* Pea, R., with Christine L. Borgman (Chair), Hal Abelson, Lee Dirks, Roberta Johnson, Kenneth R. Koedinger, Marcia C. Linn, [[Clifford A. Lynch]], Diana G. Oblinger, Katie Salen, Marshall S. Smith, [[Alex Szalay]] (2008, June 24).  Fostering learning in the networked world\u2014the cyberlearning opportunity and challenge: A 21st century agenda for the National Science Foundation (Report of the NSF Task Force on Cyberlearning). Arlington VA: NSF, 62pp. (Downloadable: https://www.nsf.gov/pubs/2008/nsf08204/nsf08204.pdf)\n* Goldman, R., Pea, R. D., Barron, B. & Derry, S. (2007). (Eds.). Video research in the learning sciences. Mahwah, NJ: Lawrence Erlbaum Associates.\n* Pea, R. D. (2006). Video-as-data and digital video manipulation techniques for transforming learning sciences research, education and other cultural practices. In J. Weiss, J. Nolan & P. Trifonas (Eds.), International Handbook of Virtual Learning Environments (pp.&nbsp;1321\u20131393).  Dordrecht: Kluwer Academic Publishing.\n* Pea, R. D., & Maldonado, H. (2006). WILD for learning: Interacting through new computing devices anytime, anywhere. In K. Sawyer (Ed.), The Cambridge Handbook of the Learning Sciences (pp.&nbsp;427\u2013441). New York: Cambridge University Press.\n* Bransford, J.D., Barron, B., Pea, R., Meltzoff, A., Kuhl, P. Bell, P., Stevens, R., Schwartz, D., Vye, N., Reeves, B., Roschelle, J. & Sabelli, N. (2006). Foundations and opportunities for an interdisciplinary science of learning. In K. Sawyer (Ed.), The Cambridge Handbook of the Learning Sciences (pp.&nbsp;19\u201334). New York: Cambridge University Press.\n* Pea, R. D. (2004). The social and technological dimensions of \u201cscaffolding\u201d and related theoretical concepts for learning, education and human activity. The Journal of the Learning Sciences, 13(3), 423-451.\n* Pea, R., Mills, M., Rosen, J., Dauber, K., Effelsberg, W., & Hoffert. E. (2004, Jan-March). The DIVER\u2122 Project: Interactive Digital Video Repurposing. IEEE Multimedia, 11(1), 54-61.\n* Pea, R., Wulf, W., Elliot, S.W., & Darling, M. (2003, August). (Eds.). Planning for two transformations in education and learning technology (Committee on Improving Learning with Information Technology). Washington, DC: National Academy Press.\n* Roschelle, J., & Pea, R. D. (2002). A walk on the WILD side: How wireless handhelds may change computer-supported collaborative learning (CSCL). The International Journal of Cognition and Technology, 1(1), 145-168.\n* Bransford, J. D., Brown, A., & Cocking, R. (2000). (Eds.), How People Learn: Mind, Brain, Experience and School, Expanded Edition (incorporating both books below). Washington, DC: National Academy Press. (Co-author).\n* Pea, R. D. (1999). New media communication forums for improving education research and practice. In E. C. Lagemann & L. S. Shulman (Eds.), Issues in education research: problems and possibilities (pp.&nbsp;336\u2013370). San Francisco, CA: Jossey Bass.\n* Edelson, D. C., Gordin, D.N., & Pea, R. D. (1999). Addressing the challenges of inquiry-based learning through technology and curriculum design. Journal of the Learning Sciences, 8(3&4), 391-450.\n* Pea, R.D., Gomez, L. M., Edelson, D.C., Fishman, B. J., Gordin, D. N., & O\u2019Neill, D. K. (1997). Science education as a driver of cyberspace technology development. In K. C. Cohen (Ed.), Internet links for science education (pp.&nbsp;189\u2013220). New York, NY: Plenum Press.\n* Gordin, D., & Pea, R. D. (1995). Prospects for scientific visualization as an educational technology. Journal of the Learning Sciences, 4(3), 249-279.\n* Reiner, M., Pea, R. D., & Shulman, D. (1995). The impact of simulator-based instruction on the diagramming of the interaction of light and matter by introductory physics students. Journal of Science Education and Technology, 4 (3), 199-226.\n* Pea, R. D. (1994). Seeing what we build together: Distributed multimedia learning environments for transformative communications. Journal of the Learning Sciences, 3(3), 285-299.\n* Pea, R. D. (1993). Learning scientific concepts through material and social activities: Conversational analysis meets conceptual change. Educational Psychologist, 28(3), 265-277.\n* Pea, R. D. (1993). Practices of distributed intelligence and designs for education. In G. Salomon (Ed.). Distributed cognitions (pp.&nbsp;47\u201387). New York: Cambridge University Press.\n* Pea, R. D. (1992). Augmenting the discourse of learning with computer-based learning environments. In E. de Corte, M. Linn, & L. Verschaffel (Eds.), Computer-based learning environments and problem-solving (NATO Series, subseries F: Computer and System Sciences). New York: Springer-Verlag GmbH (pp.&nbsp;313\u2013343).\n* Pea, R. D., & Gomez, L. (1992). Distributed multimedia learning environments: Why and how? Interactive Learning Environments, 2(2), 73-109.\n* Pea, R.D. (1991, July). Learning through multimedia. IEEE Computer Graphics and Applications, 11(4), 58-66.\n* Mills, M. I., & Pea, R. D. (1989). Mind and media in dialog: Issues in multimedia composition. In K. Hooper & S. Ambron (Eds.), Full-Spectrum Learning (pp.&nbsp;14\u201337). Cupertino, CA: Apple Computer, Inc.\n* Hawkins, J., & Pea, R. D. (1987). Tools for bridging everyday and scientific thinking. Journal for Research in Science Teaching, 24(4), 291-307.\n* Pea, R. D. (1987). Cognitive technologies for mathematics education. In A. Schoenfeld (Ed.), Cognitive science and mathematics education (pp.&nbsp;89\u2013122). Hillsdale, NJ: Erlbaum.\n* Pea, R. D., & Sheingold, K. S. (1987). (Eds.). Mirrors of minds: Patterns of experience in educational computing. Norwood, NJ: Ablex. (In Computers and Cognition series, edited by John Black.) Co-authored four chapters. Translated and published in Russia and in China.\n* Pea, R. D. (1987). Socializing the knowledge transfer problem. International Journal of Educational Research, 11, 639-663.\n* Pea, R. D., & Kurland, D. M. (1987). Cognitive technologies for writing development. In L. Frase (Ed.), Review of Research in Education, Vol. 14 (pp.&nbsp;277\u2013326). Washington DC: AERA Press.\n* Pea, R. D. (1986). Language-independent conceptual bugs in novice programming. Journal of Educational Computing Research, 2(1), 25-36.\n* Pea, R. D. (1985). Beyond amplification: Using computers to reorganize human mental functioning. Educational Psychologist, 20, 167-182.\n* Pea, R. D. (1985). Integrating human and computer intelligence. In E. L. Klein (Ed.), New directions for child development: No. 28, Children and computers (pp.&nbsp;75\u201396). San Francisco: Jossey Bass.\n* Pea, R. D., Kurland, D. M., & Hawkins, J. (1985). Logo and the development of thinking skills. In M. Chen & W. Paisley (Eds.), Children and microcomputers: Formative studies (pp.&nbsp;193\u2013212). Beverly Hills, CA: Sage.\n* Pea, R. D., & Kurland, D. M. (1984). On the cognitive effects of learning computer programming. New Ideas in Psychology, 2, 137-168.\n\n==Patents==\n* Atkinson, M., Skorski, M., Pea, R.D., et al.  \u201cComputer implemented education system,\u201d Patent filed June 30, 2000 (U.S. Serial # 09/609,204) for inventions underlying Teachscape.com, 2001. Awarded January 14, 2003 as US Patent #6,507,726)\n* Pea, R.D., Mills, M., Hoffert, E., Rosen, J., and Dauber, K., \u201cMethods and apparatus for interactive map-based analysis of digital video content\u201d (U.S. Serial #10/331/776), filed Dec. 30, 2002. (Issued July 25, 2006 as US Patent #7,082,572 B2).\n* Pea, R.D., Mills, M., Rosen, J. \u201cMethods and apparatus for interactive point-of-view authoring of digital video content\u201d (U.S. Serial #10/334/162), filed Dec. 30, 2002. Awarded October 26, 2010 as US Patent # 7,823,058.\n* Pea, R.D., Mills, M., Hoffert, E., Rosen, J., and Dauber, K. \u201cMethods and apparatus for interactive network sharing of digital video content\u201d (Originally filed as U.S. Serial #10/331/775, Dec. 30, 2002). Awarded November 6, 2012 as US Patent #8,307,273 B2.\n* Patton, C., Roschelle, J., Pea, R.D., & Vahey, P. \u201cMethod and system for enabling and controlling communication typology, access to resources, and document flow in a distributed networking environment\u201d (Originally filed as U.S. Serial #10/012/708 on Nov. 16, 2001; Revised Appl. No. 12/249/729, filed Oct. 10, 2008). Awarded February 28, 2012 as US Patent #8,127,039 B2. \n* Pea, R.D., Mills, M., and Rosen, J.  \u201cInteractive point-of-view authoring of digital video content using a resizable overlay window and a cylindrical layout\u201d (Originally filed: October 25, 2010; Awarded March 3, 2015 as US Patent #8,972,861 B2.\n* Pea, R.D., Mills, M., Hoffert, E., Rosen, J., and Dauber, K.  \u201cMethods and apparatus for interactive map-based analysis of digital video content.\u201d (Originally filed as U.S. Serial # 11/480,727, July 3, 2006).  Awarded February 4, 2014 as US Patent #8,645,832 B2.\n* Pea, R.D., Mills, M., Hoffert, E., Rosen, J., and Dauber, K. \u201cMethods and apparatus for interactive network sharing of digital video content\u201d (U.S. Serial #10/331/775), filed Dec. 30, 2002. In review.\n\n==References==\n{{Reflist|2}}\n\n==External links==\n{{Commons category}}\n*[http://www.stanford.edu/~roypea Roy Pea at Stanford University since 2001]\n\n{{Authority control}}\n\n{{DEFAULTSORT:Pea, Roy}}\n[[Category:Educational psychologists]]\n[[Category:Michigan State University alumni]]\n[[Category:Alumni of the University of Oxford]]\n[[Category:Stanford Graduate School of Education faculty]]\n[[Category:Living people]]\n[[Category:1952 births]]\n[[Category:SRI International people]]\n", "text_old": "{{Infobox person\n| image = Roy Pea TeachAIDS Inaugural Gala.jpg\n| image_size = \n| name = Roy Pea\n| caption = Pea at [[TeachAIDS]] 2010 inaugural gala\n| birth_date = {{b-da|July 5, 1952}}\n| birth_place = Highland Park, MI\n| death_date =\n| death_place = \n| website={{url|http://www.stanford.edu/~roypea}}\n}}\n\n'''Roy Pea''' is David Jacks Professor of Learning Sciences and Education at the [[Stanford Graduate School of Education]]. He has extensively published works in the field of the [[Learning Sciences]] and on learning technology design, and made significant contributions since 1981 to the understanding of how people learn with technology.\n\n== Biography ==\n\nPea was born in [[Highland Park, Michigan]] on July 5, 1952. He received a dual major B.A. in [[philosophy]] and [[psychology]] from [[Michigan State University]] with an independently declared major in Cognition (1974) working with his mentor and friend [[Stephen Toulmin]], and later, a D.Phil. in [[developmental psychology]] from [[Oxford University]] (1978), while studying as a [[Rhodes Scholar]], working with his advisor [[Jerome Bruner]]. After studying child language and cognitive development from 1975 to 1980, his research concerns were attracted to understanding how innovations in computing and communications technologies can significantly influence learning, thinking, collaboration, and educational systems.\n\n=== Development of the learning sciences ===\n\nPea is a key figure in the development of the [[learning sciences]] as a recognized field of research and graduate study. He founded and served as the first director of the first learning sciences doctoral program, at [[Northwestern University]] (1991), directing the NSF-funded field-building [[Center for Innovative Learning Technologies]] [http://cilt.concord.org/], and launching in 2002 the Learning Sciences and Technology Design (LSTD: http://ed.stanford.edu/academics/doctoral/lstd) program at [[Stanford University]]. In 2004\u20132005, Pea was President of the [[International Society for the Learning Sciences]].\n\nPea was one of the first research scientists to build the [[Bank Street College]] Center for Children in Technology (1981\u20131986), the first social sciences center devoted to studying children's learning with technology. Later, recruited by [[John Seely Brown]] and [[Jim Greeno]] to contribute to the development of the intellectual agenda of the Palo Alto, California\u2013based think-tank, The [[Institute for Research on Learning]] (1988\u20131991), he developed their K-12 learning technologies emphasis, with pioneering work on distributed intelligence [https://books.google.com/books?hl=en&lr=&id=m8Yna0cjxAgC&oi=fnd&pg=PA47&ots=-sxx-MpVFw&sig=uIf7RN8iIvJMlO2gc_B4HXx6NhM#v=onepage&q&f=false], learning by multimedia authoring [https://stanford.academia.edu/RoyPea/Papers/261515/Learning_Through_Multimedia], and science learning with dynamic diagramming tools [http://www.stanford.edu/~roypea/HTML1%20Folder/Dynagrams.html].\n\n=== Research centers and industry advisor ===\n\nIn 1996, after a year at the Center for Advanced Studies in the Behavioral Sciences, Pea was recruited to [[SRI International]], where he worked with colleagues to build a major national [[Center for Technology in Learning]],<ref>{{cite web|url=http://ctl.sri.com/|title=Center for Technology in Learning|publisher=[[SRI International]]|accessdate=2013-06-14}}</ref> until recruited to Stanford University in 2001. At Stanford, Pea co-founded Stanford's ''H-STAR Institute'' (Human Sciences and Technologies Advanced Research) with [[Byron Reeves]], and is now H-STAR Institute Director.<ref>[http://hstar.stanford.edu/cgi-bin/ H-STAR Institute]</ref> He is also co-director of the National Science Foundation-funded ''LIFE Center'',<ref>[http://life-slc.org LIFE Center]</ref> one of six national [[Science of Learning Centers]], whose studies seek to inform better bridging of the sciences of informal and formal learning.\n\nIn addition to serving as founding editor of the Cambridge University Press Series [[Learning in Doing: Cognitive, Social and Computational Perspectives]] since 1987,<ref>[http://www.cambridge.org/aus/series/sSeries.asp?code=LID]</ref> Pea was co-author of the 2000 National Academy Press volume ''How People Learn'',<ref>[http://www.nap.edu/openbook.php?isbn=0309070368]</ref> Co-Editor of the 2007 Book ''Video Research in the Learning Sciences'',<ref>[https://www.amazon.com/Video-Research-Learning-Sciences-Goldman/dp/080585360X]</ref> and co-author of the 2010 US National Educational Technology Plan.<ref>[http://www.ed.gov/technology/netp-2010]</ref>\n\nPea served from 1999 to 2009 as a founding director for [[Teachscape]],<ref>[http://www.teachscape.com/html/ts/nps/index.html]</ref> a company he co-founded with Mark Atkinson in 1999 that provides comprehensive K-12 teacher professional development services incorporating web-based video case studies of standards-based teaching and communities of learners. In addition to academic research and teaching, he advises a number of companies, non-profits, research centers, projects and federal agencies or foundations involved in learning with technologies. Pea is also a learning sciences advisor to [[HIV/AIDS]] education nonprofit [[TeachAIDS]].<ref>{{cite web|title=TeachAIDS: Team|url=http://teachaids.org/team.php|work=[[TeachAIDS]]|date=16 December 2010|accessdate=16 December 2010|url-status=dead|archiveurl=https://web.archive.org/web/20100610080734/http://www.teachaids.org/team.php|archivedate=10 June 2010}}</ref>\n\nHe is a Fellow of the [[National Academy of Education]] [http://www.naeducation.org/], [[Association for Psychological Science]], The [[Center for Advanced Study in the Behavioral Sciences]], the [[American Educational Research Association]], and the [[International Society for the Learning Sciences]] [https://www.isls.org/about/isls-fellows].\n\n==Select publications==\n* Approximately 200 papers in academic journals, 5 co-edited volumes\n* Niemi, D., Pea, R., Saxberg, B., & Clark, R.E. (2018). (Eds.). Learning Analytics in Education. Charlotte, NC: Information Age Publishing.\n* Grover, S., & Pea, R. (2018). Computational thinking: A competency whose time has come. In S. Sentance, E. Barendsen & C. Schulte (Eds.), Computer science education: Perspectives on teaching and learning (pp.&nbsp;19\u201338). London: Bloomsbury.\n* Schneider, B., & Pea, R. (2017). Real-time mutual gaze perception enhances collaborative learning and collaboration quality. In M. Orey & R.M. Branch (Eds.), Educational media and technology yearbook, Volume 40, pp.&nbsp;99\u2013125. New York: Springer.\n* Pea, R. (2016). The prehistory of the learning sciences. In M.A. Evans, M.J. Packer, & R.K. Sawyers (Eds.), The Learning Sciences: Past, Present, and Future (pp.&nbsp;32\u201358). New York: Cambridge University Press.\n* Pea, R., Nass, C., Meheula, L., Rance, M., Kumar, A., Bamford, H., Nass, M., Simha, A., Stillerman, B., Yang, S., & Zhou, M. (2012). Media Use, Face-to-Face Communication, Media Multitasking and Social Well-Being among 8-12 Year Old Girls. Developmental Psychology, 48(2), 327-336. doi: 10.1037/a0027030\n* White, T., & Pea, R. (2011). Distributed by design: On the promises and pitfalls of collaborative learning with multiple representations. The Journal of the Learning Sciences, 20(3), 1-59.\n* Pea, R., & Martin, L. (2010). Values that occasion and guide mathematics in the family. In W. R. Penuel & K. O'Connor (Eds.), Learning Research as a Human Science (pp.&nbsp;34\u201352), National Society for the Study of Education Yearbook, 109(1).\n* Zahn. C., Pea, R., Hesse, F. W., & Rosen, J. (2010). Comparing simple and advanced video tools as supports for collaborative design processes. J. Learning Sciences, 19, 1-38.\n* Pea, R., & Lindgren, R. (2008, Oct-Dec). Video collaboratories for research and education: an analysis of collaboration design patterns. IEEE Transactions on Learning Technologies, 1(4), 235-247.\n* Derry, S., Pea, R.D., Barron, B., Engle, R.A., Erickson, F., Goldman, R., Hall, R., Koschmann, T., Lemke, J., Sherin, M.G. & Sherin, B.L. (2010). Conducting Video Research in the Learning Sciences: Guidance on Selection, Analysis, Technology, and Ethics. Journal of the Learning Sciences, 19(1), 3-53.\n* Pea, R., with Christine L. Borgman (Chair), Hal Abelson, Lee Dirks, Roberta Johnson, Kenneth R. Koedinger, Marcia C. Linn, [[Clifford A. Lynch]], Diana G. Oblinger, Katie Salen, Marshall S. Smith, [[Alex Szalay]] (2008, June 24).  Fostering learning in the networked world\u2014the cyberlearning opportunity and challenge: A 21st century agenda for the National Science Foundation (Report of the NSF Task Force on Cyberlearning). Arlington VA: NSF, 62pp. (Downloadable: https://www.nsf.gov/pubs/2008/nsf08204/nsf08204.pdf)\n* Goldman, R., Pea, R. D., Barron, B. & Derry, S. (2007). (Eds.). Video research in the learning sciences. Mahwah, NJ: Lawrence Erlbaum Associates.\n* Pea, R. D. (2006). Video-as-data and digital video manipulation techniques for transforming learning sciences research, education and other cultural practices. In J. Weiss, J. Nolan & P. Trifonas (Eds.), International Handbook of Virtual Learning Environments (pp.&nbsp;1321\u20131393).  Dordrecht: Kluwer Academic Publishing.\n* Pea, R. D., & Maldonado, H. (2006). WILD for learning: Interacting through new computing devices anytime, anywhere. In K. Sawyer (Ed.), The Cambridge Handbook of the Learning Sciences (pp.&nbsp;427\u2013441). New York: Cambridge University Press.\n* Bransford, J.D., Barron, B., Pea, R., Meltzoff, A., Kuhl, P. Bell, P., Stevens, R., Schwartz, D., Vye, N., Reeves, B., Roschelle, J. & Sabelli, N. (2006). Foundations and opportunities for an interdisciplinary science of learning. In K. Sawyer (Ed.), The Cambridge Handbook of the Learning Sciences (pp.&nbsp;19\u201334). New York: Cambridge University Press.\n* Pea, R. D. (2004). The social and technological dimensions of \u201cscaffolding\u201d and related theoretical concepts for learning, education and human activity. The Journal of the Learning Sciences, 13(3), 423-451.\n* Pea, R., Mills, M., Rosen, J., Dauber, K., Effelsberg, W., & Hoffert. E. (2004, Jan-March). The DIVER\u2122 Project: Interactive Digital Video Repurposing. IEEE Multimedia, 11(1), 54-61.\n* Pea, R., Wulf, W., Elliot, S.W., & Darling, M. (2003, August). (Eds.). Planning for two transformations in education and learning technology (Committee on Improving Learning with Information Technology). Washington, DC: National Academy Press.\n* Roschelle, J., & Pea, R. D. (2002). A walk on the WILD side: How wireless handhelds may change computer-supported collaborative learning (CSCL). The International Journal of Cognition and Technology, 1(1), 145-168.\n* Bransford, J. D., Brown, A., & Cocking, R. (2000). (Eds.), How People Learn: Mind, Brain, Experience and School, Expanded Edition (incorporating both books below). Washington, DC: National Academy Press. (Co-author).\n* Pea, R. D. (1999). New media communication forums for improving education research and practice. In E. C. Lagemann & L. S. Shulman (Eds.), Issues in education research: problems and possibilities (pp.&nbsp;336\u2013370). San Francisco, CA: Jossey Bass.\n* Edelson, D. C., Gordin, D.N., & Pea, R. D. (1999). Addressing the challenges of inquiry-based learning through technology and curriculum design. Journal of the Learning Sciences, 8(3&4), 391-450.\n* Pea, R.D., Gomez, L. M., Edelson, D.C., Fishman, B. J., Gordin, D. N., & O\u2019Neill, D. K. (1997). Science education as a driver of cyberspace technology development. In K. C. Cohen (Ed.), Internet links for science education (pp.&nbsp;189\u2013220). New York, NY: Plenum Press.\n* Gordin, D., & Pea, R. D. (1995). Prospects for scientific visualization as an educational technology. Journal of the Learning Sciences, 4(3), 249-279.\n* Reiner, M., Pea, R. D., & Shulman, D. (1995). The impact of simulator-based instruction on the diagramming of the interaction of light and matter by introductory physics students. Journal of Science Education and Technology, 4 (3), 199-226.\n* Pea, R. D. (1994). Seeing what we build together: Distributed multimedia learning environments for transformative communications. Journal of the Learning Sciences, 3(3), 285-299.\n* Pea, R. D. (1993). Learning scientific concepts through material and social activities: Conversational analysis meets conceptual change. Educational Psychologist, 28(3), 265-277.\n* Pea, R. D. (1993). Practices of distributed intelligence and designs for education. In G. Salomon (Ed.). Distributed cognitions (pp.&nbsp;47\u201387). New York: Cambridge University Press.\n* Pea, R. D. (1992). Augmenting the discourse of learning with computer-based learning environments. In E. de Corte, M. Linn, & L. Verschaffel (Eds.), Computer-based learning environments and problem-solving (NATO Series, subseries F: Computer and System Sciences). New York: Springer-Verlag GmbH (pp.&nbsp;313\u2013343).\n* Pea, R. D., & Gomez, L. (1992). Distributed multimedia learning environments: Why and how? Interactive Learning Environments, 2(2), 73-109.\n* Pea, R.D. (1991, July). Learning through multimedia. IEEE Computer Graphics and Applications, 11(4), 58-66.\n* Mills, M. I., & Pea, R. D. (1989). Mind and media in dialog: Issues in multimedia composition. In K. Hooper & S. Ambron (Eds.), Full-Spectrum Learning (pp.&nbsp;14\u201337). Cupertino, CA: Apple Computer, Inc.\n* Hawkins, J., & Pea, R. D. (1987). Tools for bridging everyday and scientific thinking. Journal for Research in Science Teaching, 24(4), 291-307.\n* Pea, R. D. (1987). Cognitive technologies for mathematics education. In A. Schoenfeld (Ed.), Cognitive science and mathematics education (pp.&nbsp;89\u2013122). Hillsdale, NJ: Erlbaum.\n* Pea, R. D., & Sheingold, K. S. (1987). (Eds.). Mirrors of minds: Patterns of experience in educational computing. Norwood, NJ: Ablex. (In Computers and Cognition series, edited by John Black.) Co-authored four chapters. Translated and published in Russia and in China.\n* Pea, R. D. (1987). Socializing the knowledge transfer problem. International Journal of Educational Research, 11, 639-663.\n* Pea, R. D., & Kurland, D. M. (1987). Cognitive technologies for writing development. In L. Frase (Ed.), Review of Research in Education, Vol. 14 (pp.&nbsp;277\u2013326). Washington DC: AERA Press.\n* Pea, R. D. (1986). Language-independent conceptual bugs in novice programming. Journal of Educational Computing Research, 2(1), 25-36.\n* Pea, R. D. (1985). Beyond amplification: Using computers to reorganize human mental functioning. Educational Psychologist, 20, 167-182.\n* Pea, R. D. (1985). Integrating human and computer intelligence. In E. L. Klein (Ed.), New directions for child development: No. 28, Children and computers (pp.&nbsp;75\u201396). San Francisco: Jossey Bass.\n* Pea, R. D., Kurland, D. M., & Hawkins, J. (1985). Logo and the development of thinking skills. In M. Chen & W. Paisley (Eds.), Children and microcomputers: Formative studies (pp.&nbsp;193\u2013212). Beverly Hills, CA: Sage.\n* Pea, R. D., & Kurland, D. M. (1984). On the cognitive effects of learning computer programming. New Ideas in Psychology, 2, 137-168.\n\n==Patents==\n* Atkinson, M., Skorski, M., Pea, R.D., et al.  \u201cComputer implemented education system,\u201d Patent filed June 30, 2000 (U.S. Serial # 09/609,204) for inventions underlying Teachscape.com, 2001. Awarded January 14, 2003 as US Patent #6,507,726)\n* Pea, R.D., Mills, M., Hoffert, E., Rosen, J., and Dauber, K., \u201cMethods and apparatus for interactive map-based analysis of digital video content\u201d (U.S. Serial #10/331/776), filed Dec. 30, 2002. (Issued July 25, 2006 as US Patent #7,082,572 B2).\n* Pea, R.D., Mills, M., Rosen, J. \u201cMethods and apparatus for interactive point-of-view authoring of digital video content\u201d (U.S. Serial #10/334/162), filed Dec. 30, 2002. Awarded October 26, 2010 as US Patent # 7,823,058.\n* Pea, R.D., Mills, M., Hoffert, E., Rosen, J., and Dauber, K. \u201cMethods and apparatus for interactive network sharing of digital video content\u201d (Originally filed as U.S. Serial #10/331/775, Dec. 30, 2002). Awarded November 6, 2012 as US Patent #8,307,273 B2.\n* Patton, C., Roschelle, J., Pea, R.D., & Vahey, P. \u201cMethod and system for enabling and controlling communication typology, access to resources, and document flow in a distributed networking environment\u201d (Originally filed as U.S. Serial #10/012/708 on Nov. 16, 2001; Revised Appl. No. 12/249/729, filed Oct. 10, 2008). Awarded February 28, 2012 as US Patent #8,127,039 B2. \n* Pea, R.D., Mills, M., and Rosen, J.  \u201cInteractive point-of-view authoring of digital video content using a resizable overlay window and a cylindrical layout\u201d (Originally filed: October 25, 2010; Awarded March 3, 2015 as US Patent #8,972,861 B2.\n* Pea, R.D., Mills, M., Hoffert, E., Rosen, J., and Dauber, K.  \u201cMethods and apparatus for interactive map-based analysis of digital video content.\u201d (Originally filed as U.S. Serial # 11/480,727, July 3, 2006).  Awarded February 4, 2014 as US Patent #8,645,832 B2.\n* Pea, R.D., Mills, M., Hoffert, E., Rosen, J., and Dauber, K. \u201cMethods and apparatus for interactive network sharing of digital video content\u201d (U.S. Serial #10/331/775), filed Dec. 30, 2002. In review.\n\n==References==\n{{Reflist|2}}\n\n==External links==\n{{Commons category}}\n*[http://www.stanford.edu/~roypea Roy Pea at Stanford University since 2001]\n\n{{Authority control}}\n\n{{DEFAULTSORT:Pea, Roy}}\n[[Category:Educational psychologists]]\n[[Category:Michigan State University alumni]]\n[[Category:Alumni of the University of Oxford]]\n[[Category:Stanford Graduate School of Education faculty]]\n[[Category:Living people]]\n[[Category:1952 births]]\n[[Category:SRI International people]]\n", "name_user": "RoyPea", "label": "safe", "comment": "\u2192\u200eSelect publications", "url_page": "//en.wikipedia.org/wiki/Roy_Pea"}
{"title_page": "Degas (crater)", "text_new": "{{Infobox crater data\n| title       = Degas\n| image       = Degas Crater View messenger full.jpg\n| caption     = Degas crater, ''[[MESSENGER]]'' spacecraft image, 2011. Inset is ''[[Mariner 10]]'' image from 1974.\n| globe       = Mercury\n| coordinates = {{coord|37.5|N|127|W|globe:mercury_type:landmark|display=inline,title}}\n| diameter    = 54 km\n| discoverer  = [[Mariner 10]]\n| eponym      = [[Edgar Degas]]\n}}\n[[File:Degas crater MESSENGER NAC mosaic.png|thumb|right|240px|MESSENGER mosaic]]\n'''Degas''' is a [[ray system|rayed]] [[Impact crater|crater]] on [[Mercury (planet)|Mercury]] at latitude 37.5 N, longitude 127 W. Its diameter is {{convert|54|km}}. It was named after the French impressionist painter [[Edgar Degas]] in 1979.<ref>{{gpn|1458}}</ref> The rays consist of light colored material blasted out during the crater's formation. Craters older than Degas are covered by the ray material, while younger craters are seen superimposed on the rays.<ref>{{Cite APOD |date=16 December 2000 |title=Degas Ray Crater on Mercury}}</ref> Degas forms a crater pair with [[Bront\u00eb (Mercurian crater)|Bront\u00eb]] to the north.  Both lie near the center of [[Sobkou Planitia]].<ref>[http://www.glyphweb.com/esky/surface/sobkouplanitia.html Sobkou Planitia], at eSky</ref>\n[[File:Degas merc mar10 big.gif|thumb|left|Degas Crater and rays, in a 1974 ''[[Mariner 10]]'' image.]]\n[[File:Degas crater MESSENGER NAC sequence.jpg|thumb|left|400px|Sequence of adjacent but non-overlapping images acquired by MESSENGER NAC of the interior of Degas.  All images are oblique and looking northwest.  The upper left three images show the central peak.  The upper right and lower left images show the fractured crater floor.  The two central bottom images show terraces and flow structures on the northern slope of the crater wall.  The lower right image shows the crater rim.  Distance across foreground in each image is approximately 2.5 km.]]\nThe crater's floor contains cracks that formed as the pool of [[impact melt]] cooled and shrank. The high-reflectance material on the walls and in the central portion of the crater probably has a composition distinct from that of the crater floor and surroundings. The illumination conditions and down-slope movement of eroded material exposing fresh rock also contribute to the bright appearance.<ref>[http://messenger.jhuapl.edu/gallery/sciencePhotos/image.php?page=1&gallery_id=2&image_id=547  Degas Crater] {{webarchive|url=https://web.archive.org/web/20140914010753/http://messenger.jhuapl.edu/gallery/sciencePhotos/image.php?page=1&gallery_id=2&image_id=547 |date=2014-09-14 }} at NASA Messenger website.  This article incorporates [[public domain]] text from this [[work of the US government|US government]] website.</ref>\n\nDegas is one of the largest craters of the [[Geology of Mercury|Kuiperian]] system on Mercury. The largest is [[Bart\u00f3k (crater)|Bart\u00f3k]] crater.<ref>Denevi, B. W., Ernst, C. M., Prockter, L. M., and Robinson, M. S., 2018.  The Geologic History of Mercury.  In ''Mercury:  The View After [[MESSENGER]]'' edited by Sean C. Solomon, Larry R. Nittler, and Brian J. Anderson. Cambridge Planetary Science. Chapter 6, Table 6.4.</ref>\n\n==References==\n{{reflist}}\n\n==External links==\n*{{Commonscat-inline}}\n\n{{Mercury (planet)}}\n\n{{DEFAULTSORT:Degas (Crater)}}\n[[Category:Impact craters on Mercury]]\n\n\n{{Crater-stub}}\n{{Mercury-planet-stub}}\n", "text_old": "{{Infobox crater data\n| title       = Degas\n| image       = Degas Crater View messenger full.jpg\n| caption     = Degas crater, ''[[MESSENGER]]'' spacecraft image, 2011. Inset is ''[[Mariner 10]]'' image from 1974.\n| globe       = Mercury\n| coordinates = {{coord|37.5|N|127|W|globe:mercury_type:landmark|display=inline,title}}\n| diameter    = 54 km\n| discoverer  = [[Mariner 10]]\n| eponym      = [[Edgar Degas]]\n}}\n[[File:Degas crater MESSENGER NAC mosaic.png|thumb|right|240px|MESSENGER mosaic]]\n'''Degas''' is a [[ray system|rayed]] [[Impact crater|crater]] on [[Mercury (planet)|Mercury]] at latitude 37.5 N, longitude 127 W. Its diameter is {{convert|54|km}}. It was named after the French impressionist painter [[Edgar Degas]] in 1979.<ref>{{gpn|1458}}</ref> The rays consist of light colored material blasted out during the crater's formation. Craters older than Degas are covered by the ray material, while younger craters are seen superimposed on the rays.<ref>{{Cite APOD |date=16 December 2000 |title=Degas Ray Crater on Mercury}}</ref> Degas forms a crater pair with [[Bront\u00eb (Mercurian crater)|Bront\u00eb]] to the north.  Both lie within [[Sobkou Planitia]].<ref>[http://www.glyphweb.com/esky/surface/sobkouplanitia.html Sobkou Planitia], at eSky</ref>\n[[File:Degas merc mar10 big.gif|thumb|left|Degas Crater and rays, in a 1974 ''[[Mariner 10]]'' image.]]\n[[File:Degas crater MESSENGER NAC sequence.jpg|thumb|left|400px|Sequence of adjacent but non-overlapping images acquired by MESSENGER NAC of the interior of Degas.  All images are oblique and looking northwest.  The upper left three images show the central peak.  The upper right and lower left images show the fractured crater floor.  The two central bottom images show terraces and flow structures on the northern slope of the crater wall.  The lower right image shows the crater rim.  Distance across foreground in each image is approximately 2.5 km.]]\nThe crater's floor contains cracks that formed as the pool of [[impact melt]] cooled and shrank. The high-reflectance material on the walls and in the central portion of the crater probably has a composition distinct from that of the crater floor and surroundings. The illumination conditions and down-slope movement of eroded material exposing fresh rock also contribute to the bright appearance.<ref>[http://messenger.jhuapl.edu/gallery/sciencePhotos/image.php?page=1&gallery_id=2&image_id=547  Degas Crater] {{webarchive|url=https://web.archive.org/web/20140914010753/http://messenger.jhuapl.edu/gallery/sciencePhotos/image.php?page=1&gallery_id=2&image_id=547 |date=2014-09-14 }} at NASA Messenger website.  This article incorporates [[public domain]] text from this [[work of the US government|US government]] website.</ref>\n\nDegas is one of the largest craters of the [[Geology of Mercury|Kuiperian]] system on Mercury. The largest is [[Bart\u00f3k (crater)|Bart\u00f3k]] crater.<ref>Denevi, B. W., Ernst, C. M., Prockter, L. M., and Robinson, M. S., 2018.  The Geologic History of Mercury.  In ''Mercury:  The View After [[MESSENGER]]'' edited by Sean C. Solomon, Larry R. Nittler, and Brian J. Anderson. Cambridge Planetary Science. Chapter 6, Table 6.4.</ref>\n\n==References==\n{{reflist}}\n\n==External links==\n*{{Commonscat-inline}}\n\n{{Mercury (planet)}}\n\n{{DEFAULTSORT:Degas (Crater)}}\n[[Category:Impact craters on Mercury]]\n\n\n{{Crater-stub}}\n{{Mercury-planet-stub}}\n", "name_user": "Jstuby", "label": "safe", "comment": "", "url_page": "//en.wikipedia.org/wiki/Degas_(crater)"}
{"title_page": "Brighton Oaks", "text_new": "{{Infobox horseraces\n| class         = Discontinued horse\n| horse race    = Brighton Oaks\n| image         = [[File:Flat racing clipart.svg|60px]]\n| caption       = \n| location      = [[Brighton Beach Race Course]], [[Brighton Beach]], [[Coney Island]], [[New York (state)|New York]], [[United States]]\n| inaugurated   = 1901\n| race type     = [[Thoroughbred]] - [[Flat racing]]\n| website       = \n| distance      = 9 furlongs\n| surface       = Dirt\n| track         = left-handed\n| qualification = Three-year-old fillies\n| weight        = Assigned\n| purse         = [[United States dollar|$]]7,500\n| bonuses       = \n}}\nThe '''Brighton Oaks''' was an American [[Thoroughbred horse race]] run at [[Brighton Beach Race Course]] in [[Brighton Beach]], [[Coney Island]], [[New York (state)|New York]] from 1901<ref>[https://www.nytimes.com/1901/07/19/archives/reinas-brighton-oaks-jockey-followers-had-indifferent-success-at.html ''New York Times'' - July 19, 1901 report on the Brighton Oaks]</ref>  through 1906.<ref>[https://pqasb.pqarchiver.com/courant/access/764199642.html?dids=764199642:764199642&FMT=ABS&FMTS=ABS:AI&type=historic&date=Jul+20%2C+1906&author=&pub=Hartford+Courant&desc=BROOKDALE+NYMPH+DEFEATS+POOR+FIELD&pqatl=google Hartford Courant - July 20, 1906]</ref> A race for three-year-old [[Filly|fillies]], it was contested at various distances:\n* 1 mile : 1902\n* 1 mile 70 yards : 1903\n* {{frac|1|1|16}} miles : 1904\n* 1 mile, 1 furlong : 1901, 1905\u20131906\n\n==Records==\n'''Speed record:''' (at 1 mile, 1 furlong)\n* 1:53.60 - Brookdale Nymph (1906)\n\n'''Most wins by a [[jockey]]:'''\n* 2 - [[Winfield O'Connor]] (1901, 1902)\n\n'''Most wins by a [[Horse trainer|trainer]]:'''\n* 2 - [[Julius Bauer]] (1901, 1902)\n* 2 - [[A. Jack Joyner]] (1904, 1905)\n\n'''Most wins by an owner:'''\n* 2 - Arthur Featherstone (1901, 1902)\n* 2 - [[Sydney Paget]] (1904, 1905)\n\n==Winners==\n{| class=\"wikitable sortable\"\n|-\n! style=\"background-color:#DACAA5; width:38px\" | Year<br>\n! style=\"background-color:#DACAA5; width:145px\"| Winner<br>\n! style=\"background-color:#DACAA5; width:150px\"| Jockey<br>\n! style=\"background-color:#DACAA5; width:150px\"| Trainer<br>\n! style=\"background-color:#DACAA5; width:190px\"| Owner<br>\n! style=\"background-color:#DACAA5\" | Time\n|-\n|1906\n|Brookdale Nymph \n|[[Lucien Lyne]]\n|[[John W. Rogers (horse trainer)|John W. Rogers]]\n|[[Harry Payne Whitney]]\n|1:53.60\n|-\n|1905\n|Tradition\n|[[Willie Davis (jockey)|Willie Davis]]\n|[[A. Jack Joyner]]\n|[[Sydney Paget]]\n|1:56.40\n|-\n|1904\n|[[Hamburg Belle]]\n|[[Gene Hildebrand]]\n|[[A. Jack Joyner]]\n|[[Sydney Paget]]\n|1:47.80\n|-\n|1903 \n|Birch Broom\n|[[Arthur E. Redfern|Arthur Redfern]]\n|[[S. W. Street]]\n|[[James R. Keene]]\n|1:45.40\n|-\n|1902\n|Hatasoo\n|[[Winfield O'Connor]]\n|[[Julius Bauer]]\n|Arthur Featherstone\n|1:40.00\n|-\n|1901 \n|Reina\n|[[Winfield O'Connor]]\n|[[Julius Bauer]]\n|Arthur Featherstone\n|1:54.20\n|-\n|}\n\n==References==\n{{reflist}}\n\n[[Category:Discontinued horse races]]\n[[Category:Brighton Beach Race Course]]\n[[Category:Horse races in New York (state)]]\n[[Category:Flat horse races for three-year-old fillies]]\n[[Category:Coney Island]]\n[[Category:Recurring sporting events established in 1901]]\n[[Category:Recurring events disestablished in 1906]]\n[[Category:1901 establishments in New York (state)]]\n[[Category:1906 disestablishments in New York (state)]]\n", "text_old": "{{Infobox horseraces\n| class         = Discontinued horse\n| horse race    = Brighton Oaks\n| image         = [[File:Flat racing clipart.svg|60px]]\n| caption       = \n| location      = [[Brighton Beach Race Course]], [[Brighton Beach]], [[Coney Island]], [[New York (state)|New York]], [[United States]]\n| inaugurated   = 1901\n| race type     = [[Thoroughbred]] - [[Flat racing]]\n| website       = \n| distance      = 9 furlongs\n| surface       = Dirt\n| track         = left-handed\n| qualification = Three-year-old fillies\n| weight        = Assigned\n| purse         = [[United States dollar|$]]7,500\n| bonuses       = \n}}\nThe '''Brighton Oaks''' was an American [[Thoroughbred horse race]] run at [[Brighton Beach Race Course]] in [[Brighton Beach]], [[Coney Island]], [[New York (state)|New York]] from 1901<ref>[https://www.nytimes.com/1901/07/19/archives/reinas-brighton-oaks-jockey-followers-had-indifferent-success-at.html ''New York Times'' - July 19, 1901 report on the Brighton Oaks]</ref>  through 1906.<ref>[https://pqasb.pqarchiver.com/courant/access/764199642.html?dids=764199642:764199642&FMT=ABS&FMTS=ABS:AI&type=historic&date=Jul+20%2C+1906&author=&pub=Hartford+Courant&desc=BROOKDALE+NYMPH+DEFEATS+POOR+FIELD&pqatl=google Hartford Courant - July 20, 1906]</ref> A race for three-year-old [[Filly|fillies]], it was contested at various distances:\n* 1 mile : 1902\n* 1 mile 70 yards : 1903\n* {{frac|1|1|16}} miles : 1904\n* 1 mile, 1 furlong : 1901, 1905\u20131906\n\n==Records==\n'''Speed record:''' (at 1 mile, 1 furlong)\n* 1:53.60 - Brookdale Nymph (1906)\n\n'''Most wins by a [[jockey]]:'''\n* 2 - [[Winfield O'Connor]] (1901, 1902)\n\n'''Most wins by a [[Horse trainer|trainer]]:'''\n* 2 - [[Julius Bauer]] (1901, 1902)\n* 2 - [[A. Jack Joyner]] (1904, 1905)\n\n'''Most wins by an owner:'''\n* 2 - Arthur Featherstone (1901, 1902)\n* 2 - [[Sydney Paget]] (1904, 1905)\n\n==Winners==\n{| class=\"wikitable sortable\"\n|-\n! style=\"background-color:#DACAA5; width:38px\" | Year<br>\n! style=\"background-color:#DACAA5; width:145px\"| Winner<br>\n! style=\"background-color:#DACAA5; width:150px\"| Jockey<br>\n! style=\"background-color:#DACAA5; width:150px\"| Trainer<br>\n! style=\"background-color:#DACAA5; width:190px\"| Owner<br>\n! style=\"background-color:#DACAA5\" | Time\n|-\n|1906\n|Brookdale Nymph \n|[[Lucien Lyne]]\n|[[John W. Rogers (horseman)|John W. Rogers]]\n|[[Harry Payne Whitney]]\n|1:53.60\n|-\n|1905\n|Tradition\n|[[Willie Davis (jockey)|Willie Davis]]\n|[[A. Jack Joyner]]\n|[[Sydney Paget]]\n|1:56.40\n|-\n|1904\n|[[Hamburg Belle]]\n|[[Gene Hildebrand]]\n|[[A. Jack Joyner]]\n|[[Sydney Paget]]\n|1:47.80\n|-\n|1903 \n|Birch Broom\n|[[Arthur E. Redfern|Arthur Redfern]]\n|[[S. W. Street]]\n|[[James R. Keene]]\n|1:45.40\n|-\n|1902\n|Hatasoo\n|[[Winfield O'Connor]]\n|[[Julius Bauer]]\n|Arthur Featherstone\n|1:40.00\n|-\n|1901 \n|Reina\n|[[Winfield O'Connor]]\n|[[Julius Bauer]]\n|Arthur Featherstone\n|1:54.20\n|-\n|}\n\n==References==\n{{reflist}}\n\n[[Category:Discontinued horse races]]\n[[Category:Brighton Beach Race Course]]\n[[Category:Horse races in New York (state)]]\n[[Category:Flat horse races for three-year-old fillies]]\n[[Category:Coney Island]]\n[[Category:Recurring sporting events established in 1901]]\n[[Category:Recurring events disestablished in 1906]]\n[[Category:1901 establishments in New York (state)]]\n[[Category:1906 disestablishments in New York (state)]]\n", "name_user": "Stretchrunner", "label": "safe", "comment": "\u2192\u200eWinners:fix link", "url_page": "//en.wikipedia.org/wiki/Brighton_Oaks"}
{"title_page": "Modulo operation", "text_new": "[[Image:Divmod.svg|thumb|right|250px|{{colorbox|red}} Quotient ({{math|''q''}}) and {{colorbox|lightgreen}} remainder ({{math|''r''}}) as functions of dividend ({{math|''a''}}), using different algorithms]]\nIn [[computing]], the '''modulo''' operation ''should'' (see [[#Common pitfalls|Common pitfalls]] below) find the [[remainder]]  after [[division (mathematics)|division]] of one number by another (called the ''[[modular arithmetic|modulus]]'' of the operation).\n\nGiven two positive numbers, {{math|''a''}} and {{math|''n''}}, {{math|''a''}} modulo {{math|''n''}} (abbreviated as {{math|''a'' mod ''n''}}) is the remainder of the [[Euclidean division]] of {{math|''a''}} by {{math|''n''}}, where {{math|''a''}} is the [[Division (mathematics)|dividend]] and {{math|''n''}} is the [[divisor]].\n\nFor example, the expression \"5 mod 2\" would evaluate to 1 because 5 divided by 2 has a [[quotient]] of 2 and a remainder of 1, while \"9 mod 3\" would evaluate to 0 because the division of 9 by 3 has a quotient of 3 and leaves a remainder of 0; there is nothing to subtract from 9 after multiplying 3 times 3. (Doing the division with a calculator will not show the result referred to here by this operation; the quotient will be expressed as a decimal fraction.)\n\nAlthough typically performed with {{math|''a''}} and {{math|''n''}} both being integers, many computing systems allow other types of numeric operands. The range of numbers for an [[integer]] modulo of {{math|''n''}} is 0 to {{math|''n'' \u2212 1}} inclusive. ({{math|''a''}} mod 1 is always 0; {{math|''a'' mod 0}} is undefined, possibly resulting in a [[division by zero]] error in programming languages.) See [[modular arithmetic]] for an older and related convention applied in [[number theory]].\n\nWhen either {{math|''a''}} or {{math|''n''}} is negative, the naive definition breaks down, and [[programming language]]s differ in how these values are defined.\n\n==Variants of the definition==\n\nIn [[mathematics]], the result of the [[modular arithmetic|modulo operation]] is an [[equivalence class]], and any member of the class may be chosen as representative; however, the usual representative is the '''least positive residue''', the smallest non-negative integer that belongs to that class, ''i.e.'' the remainder of the [[Euclidean division]]. However, other conventions are possible. Computers and calculators have various ways of storing and representing numbers; thus their definition of the modulo operation depends on the [[programming language]] or the underlying [[computer hardware|hardware]].\n\nIn nearly all computing systems, the [[quotient]] {{math|''q''}} and the remainder {{math|''r''}} of {{math|''a''}} divided by {{math|''n''}} satisfy\n: {{NumBlk|:|<math>\\begin{align}\nq \\,&\\in \\mathbb{Z} \\\\\na \\,&= n q + r \\\\\n|r| \\,&< |n|\n\\end{align}</math>|{{EquationRef|1}}}}\n\nHowever, this still leaves a sign ambiguity if the remainder is nonzero: two possible choices for the remainder occur, one negative and the other positive, and two possible choices for the quotient occur. Usually, in number theory, the positive remainder is always chosen, but programming languages choose depending on the language and the signs of {{math|''a''}} or {{math|''n''}}.{{ref|2}} Standard [[Pascal (programming language)|Pascal]] and [[ALGOL 68]] give a positive remainder (or 0) even for negative divisors, and some programming languages, such as C90, leave it to the implementation when either of {{math|''n''}} or {{math|''a''}} is negative. See the table for details. {{math|''a''}} modulo 0 is undefined in most systems, although some do define it as {{math|''a''}}.\n\n{{bulleted list\n| Many implementations use ''truncated division'', where the quotient is defined by [[truncation]] {{math|''q'' {{=}} trunc({{sfrac|''a''|''n''}})}} and thus according to equation ({{EquationNote|1}}) the remainder would have ''same sign as the dividend''.  The quotient is rounded towards zero: equal to the first integer in the direction of zero from the exact rational quotient.\n:<math>r = a - n \\operatorname{trunc}\\left(\\frac{a}{n}\\right)</math>\n\n| [[Donald Knuth]]<ref>{{cite book|\nfirst=Donald. E.|last=Knuth|title=The Art of Computer Programming\n| url=https://archive.org/details/artofcomputerpro0003knut| url-access=registration|publisher=Addison-Wesley|year=1972\n}}</ref> described ''floored division'' where the quotient is defined by the [[floor function]] {{math|''q'' {{=}} \u230a{{sfrac|''a''|''n''}}\u230b}} and thus according to equation ({{EquationNote|1}}) the remainder would have the ''same sign as the divisor''.  Due to the floor function, the quotient is always rounded downwards, even if it is already negative.\n:<math>r = a - n \\left\\lfloor\\frac{a}{n}\\right\\rfloor</math>\n\n| Raymond T. Boute<ref>{{cite journal\n | last = Boute\n | first = Raymond T.\n | title = The Euclidean definition of the functions div and mod\n | journal = ACM Transactions on Programming Languages and Systems\n | volume = 14\n | issue = 2\n | pages = 127\u2013144\n | publisher = ACM Press (New York, NY, USA)\n | date = April 1992\n | url = http://portal.acm.org/citation.cfm?id=128862&coll=portal&dl=ACM\n | doi = 10.1145/128861.128862}}</ref> describes the Euclidean definition in which the remainder is nonnegative always, {{math|0 \u2264 ''r''}}, and is thus consistent with the ''[[Euclidean division]]'' algorithm.  In this case,\n: <math>n > 0 \\Rightarrow q = \\left\\lfloor\\frac{a}{n}\\right\\rfloor</math>\n: <math>n < 0 \\Rightarrow q = \\left\\lceil\\frac{a}{n}\\right\\rceil</math>\nor equivalently\n: <math>q = \\sgn(n) \\left\\lfloor \\frac{a}{\\left|n\\right|} \\right\\rfloor</math>\nwhere {{math|sgn}} is the [[sign function]], and thus\n: <math>r = a - |n| \\left\\lfloor \\frac{a}{\\left|n\\right|} \\right\\rfloor</math>\n\n| Common Lisp also defines round-division and ceiling-division where the quotient is given by {{math|''q'' {{=}} round({{sfrac|''a''|''n''}})}} and {{math|q {{=}} \u2308{{sfrac|''a''|''n''}}\u2309}} respectively.\n\n| [[IEEE 754-1985|IEEE 754]] defines a remainder function where the quotient is {{math|{{sfrac|''a''|''n''}}}} rounded according to the [[IEEE 754-1985#Rounding floating-point numbers|round to nearest convention]].  Thus, the sign of the remainder is chosen to be ''nearest to zero''.\n\n}}\n\nAs described by Leijen,\n{{Quote|text=Boute argues that Euclidean division is superior to the other ones in terms of regularity and useful mathematical properties, although floored division, promoted by Knuth, is also a good definition.  Despite its widespread use, truncated division is shown to be inferior to the other definitions.|sign=Daan Leijen|source=''Division and Modulus for Computer Scientists''<ref>{{cite web\n | last = Leijen\n | first = Daan\n | title = Division and Modulus for Computer Scientists\n | date = December 3, 2001\n | url = http://research.microsoft.com/pubs/151917/divmodnote.pdf\n | format = PDF\n | accessdate =2014-12-25}}</ref>}}\n\nHowever, Boute concentrates on the properties of the modulo operation itself and does not rate the fact that the truncated division shows the symmetry {{math|(-''a'') div ''n'' {{=}} -(''a'' div ''n'')}} and {{math|''a'' div (-''n'') {{=}} -(''a'' div ''n'')}}, which is similar to the ordinary division. As neither floor division nor Euclidean division offer this symmetry, Boute's judgement is at least incomplete.{{citation needed|date=January 2018}}{{OR|date=January 2018}}\n\n==Common pitfalls==\nWhen the result of a modulo operation has the sign of the dividend, it can lead to surprising mistakes.\n\nFor example, to test if an integer is odd, one might be inclined to test if the remainder by 2 is equal to 1:\n\n<source lang=\"cpp\">\nbool is_odd(int n) {\n    return n % 2 == 1;\n}\n</source>\n\nBut in a language where modulo has the sign of the dividend, that is incorrect, because when {{math|''n''}} (the dividend) is negative and odd, {{math|''n''}} mod 2 returns \u22121, and the function returns false.\n\nOne correct alternative is to test that the remainder is not 0 (because remainder 0 is the same regardless of the signs):\n\n<source lang=\"cpp\">\nbool is_odd(int n) {\n    return n % 2 != 0;\n}\n</source>\n\nAnother is to use the fact that, for any odd number, the remainder may be either 1 or \u22121:\n\n<source lang=\"cpp\">\nbool is_odd(int n) {\n    return n % 2 == 1 || n % 2 == -1;\n}\n</source>\n\n==Notation==\n{{About|the binary ''mod'' operation|the ''(mod m)'' notation|congruence relation|section=yes}}\n\nSome calculators have a {{math|mod()}} function button, and many programming languages have a similar function, expressed as {{math|mod(''a'', ''n'')}}, for example. Some also support expressions that use \"%\", \"mod\", or \"Mod\" as a modulo or remainder [[Operator (programming)|operator]], such as\n:<code>a % n</code>\nor\n:<code>a mod n</code>\nor equivalent, for environments lacking a {{math|mod()}} function ('int' inherently produces the truncated value of {{math|{{sfrac|''a''|''n''}}}})\n:<code>a - (n * int(a/n))</code>\n\n==Performance issues==\nModulo operations might be implemented such that a division with a remainder is calculated each time. For special cases, on some hardware, faster alternatives exist. For example, the modulo of powers of 2 can alternatively be expressed as a [[Bitwise operation|bitwise]] AND operation:\n:<code>x % 2<sup>n</sup> == x & (2<sup>n</sup> - 1)</code>\n\nExamples (assuming {{math|''x''}} is a positive integer):\n:<code>x % 2 == x & 1</code>\n:<code>x % 4 == x & 3</code>\n:<code>x % 8 == x & 7</code>\n\nIn devices and software that implement bitwise operations more efficiently than modulo, these alternative forms can result in faster calculations.<ref>{{cite web |first= Adam |last= Horvath |url= http://blog.teamleadnet.com/2012/07/faster-division-and-modulo-operation.html |title= Faster division and modulo operation - the power of two |date= July 5, 2012}}</ref>\n\n[[Compiler optimization|Optimizing]] [[compiler]]s may recognize expressions of the form <code>expression % constant</code> where <code>constant</code> is a power of two and automatically implement them as <code>expression & (constant-1)</code>, allowing to write clearer code without compromising performance. This simple optimization is not possible for languages in which the result of the modulo operation has the sign of the dividend (including C), unless the dividend is of an [[Signedness|unsigned]] integer type. This is because, if the dividend is negative, the modulo will be negative, whereas <code>expression &amp; (constant-1)</code> will always be positive. For these languages, the equivalence <code>x % 2<sup>n</sup> == x < 0 ? x | ~(2<sup>n</sup> - 1) : x & (2<sup>n</sup> - 1)</code> has to be used instead, expressed using bitwise OR, NOT and AND operations.\n\n==Properties (identities)==\nSome modulo operations can be factored or expanded similarly to other mathematical operations.  This may be useful in [[cryptography]] proofs, such as the [[Diffie\u2013Hellman key exchange]].\n*Identity:\n**{{math|(''a'' mod ''n'') mod ''n'' {{=}} ''a'' mod ''n''}}.\n**{{math|''n''{{sup|''x''}} mod ''n'' {{=}} 0}} for all positive integer values of {{math|''x''}}.\n** If {{math|''p''}} is a [[prime number]] which is not a [[divisor]] of {{math|''b''}}, then {{math|''ab''{{sup|''p''\u22121}} mod ''p'' {{=}} ''a'' mod ''p''}}, due to [[Fermat's little theorem]].\n*Inverse:\n**{{math|[(\u2212''a'' mod ''n'') + (''a'' mod ''n'')] mod ''n'' {{=}} 0}}.\n**{{math|''b''{{sup|\u22121}} mod ''n''}} denotes the [[modular multiplicative inverse]], which is defined if and only if {{math|''b''}} and {{math|''n''}} are [[relatively prime]], which is the case when the left hand side is defined: {{math|[(''b''{{sup|\u22121}} mod ''n'')(''b'' mod ''n'')] mod ''n'' {{=}} 1}}.\n*Distributive:\n**{{math|(''a'' + ''b'') mod ''n'' {{=}} [(''a'' mod ''n'') + (''b'' mod ''n'')] mod ''n''}}.\n**{{math|''ab'' mod ''n'' {{=}} [(''a'' mod ''n'')(''b'' mod ''n'')] mod ''n''}}.\n*Division (definition):  {{math|{{sfrac|''a''|''b''}} mod ''n'' {{=}} [(''a'' mod ''n'')(''b''{{sup|\u22121}} mod ''n'')] mod ''n''}}, when the right hand side is defined (that is when {{math|''b''}} and {{math|''n''}} are  [[coprime]]). Undefined otherwise. \n*Inverse multiplication:  {{math|[(''ab'' mod ''n'')(''b''{{sup|\u22121}} mod ''n'')] mod ''n'' {{=}} ''a'' mod ''n''}}.\n\n==In programming languages==\n\n{| class=\"wikitable sortable\" style=\"float:left; clear:left; width:50%;\"\n|+ Integer modulo operators in various programming languages\n|-\n! [[Programming language|Language]]\n! Operator\n! abbr=\"Sign\" | Result has same sign as\n|-\n| [[ABAP]]\n| <code>MOD</code>\n| Nonnegative always\n|-\n| [[ActionScript]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Ada (programming language)|Ada]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| [[ALGOL 68]]\n| <code>\u00f7\u00d7</code>, <code>mod</code>\n| Nonnegative always\n|-\n| [[AMPL]]\n| <code>mod</code>\n| Dividend\n|-\n| [[APL (programming language)|APL]]\n| <code><nowiki>|</nowiki></code>{{ref|5a}}\n| Divisor\n|-\n| [[AppleScript]]\n| <code>mod</code>\n| Dividend\n|-\n| [[AutoLISP]]\n| <code>(rem d n)</code>\n| Dividend\n|-\n| [[AWK]]\n| <code>%</code>\n| Dividend\n|-\n| [[BASIC]]\n| <code>Mod</code>\n| Undefined\n|-\n| [[Bash (Unix shell)|bash]]\n| <code>%</code>\n| Dividend\n|-\n| [[bc (programming language)|bc]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[C (programming language)|C]] (ISO 1990)\n| <code>%</code>\n| Implementation-defined\n|-\n| <code>div</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[C++]] (ISO 1998)\n| <code>%</code>\n| Implementation-defined<ref>{{Cite journal |title=ISO/IEC 14882:2003: Programming languages \u2013 C++ |publisher=[[International Organization for Standardization]] (ISO), [[International Electrotechnical Commission]] (IEC) |year=2003 |location=5.6.4 |postscript=<!--None-->}}. \"the binary % operator yields the remainder from the division of the first expression by the second. .... If both operands are nonnegative then the remainder is nonnegative; if not, the sign of the remainder is implementation-defined\".</ref>\n|-\n| <code>div</code>\n| Dividend\n|-\n| [[C99|C (ISO 1999)]]\n| <code>%</code>, <code>div</code>\n| Dividend<ref name=\"C99\">{{cite web |title=C99 specification (ISO/IEC 9899:TC2) |url=http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf |accessdate=16 August 2018 |location=6.5.5 Multiplicative operators |date=2005-05-06}}</ref>\n|-\n| [[C++11|C++ (ISO 2011)]]\n| <code>%</code>, <code>div</code>\n| Dividend\n|-\n| [[C Sharp (programming language)|C#]]\n| <code>%</code>\n| Dividend\n|-\n| [[Clarion (programming language)|Clarion]]\n| <code>%</code>\n| Dividend\n|-\n| [[Clean (programming language)|Clean]]\n| <code>rem</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Clojure]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| [[COBOL]]{{ref|4}}\n| <code>FUNCTION&nbsp;MOD</code>\n| Divisor\n|-\n| rowspan=\"2\" | [[CoffeeScript]]\n| <code>%</code>\n| Dividend\n|-\n| <code>%%</code>\n| Divisor<ref name=\"CoffeeScript\">[http://coffeescript.org/#operators CoffeeScript operators]</ref>\n|-\n| [[ColdFusion]]\n| <code>%</code>, <code>MOD</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Common Lisp]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| [https://www.scirra.com/construct2 Construct 2]\n| <code>%</code>\n|\n|-\n| [[D (programming language)|D]]\n| <code>%</code>\n| Dividend<ref>{{cite web |title=Expressions |url=http://www.digitalmars.com/d/2.0/expression.html#MulExpression |work=D Programming Language 2.0 |publisher=Digital Mars |accessdate=29 July 2010}}</ref>\n|-\n| rowspan=\"2\" | [[Dart (programming language)|Dart]]\n| <code>%</code>\n| Nonnegative always\n|-\n| <code>remainder()</code>\n| Dividend\n|-\n| [[Eiffel (programming language)|Eiffel]]\n| <code>\\\\</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Elm (programming_language)|Elm]]\n| <code>modBy</code>\n| Divisor\n|-\n| <code>remainderBy</code>\n| Dividend\n|-\n| [[Erlang (programming language)|Erlang]]\n| <code>rem</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Euphoria (programming language)|Euphoria]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>remainder</code>\n| Dividend\n|-\n| [[F Sharp (programming language)|F#]]\n| <code>%</code>\n| Dividend\n|-\n| [[FileMaker]]\n| <code>Mod</code>\n| Divisor\n|-\n| rowspan=\"3\" | [[Forth (programming language)|Forth]]\n| <code>mod</code>\n| implementation defined\n|-\n| <code>fm/mod</code>\n| Divisor\n|-\n| <code>sm/rem</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Fortran]]\n| <code>mod</code>\n| Dividend\n|-\n| <code>modulo</code>\n| Divisor\n|-\n| Frink\n| <code>mod</code>\n| Divisor\n|-\n| [[GameMaker Studio]] (GML)\n| <code>mod</code>, <code>%</code>\n| Dividend\n|-\n| [[Godot (game engine)|GDScript]]\n| <code>%</code>\n| Dividend\n|-\n| [[Go (programming language)|Go]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Haskell (programming language)|Haskell]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| [[Haxe]]\n| <code>%</code>\n| Dividend\n|-\n| [[J (programming language)|J]]\n| <code><nowiki>|</nowiki></code>{{ref|5b}}\n| Divisor\n|-\n| rowspan=\"2\" | [[Java (programming language)|Java]]\n| <code>%</code>\n| Dividend\n|-\n| <code>Math.floorMod</code>\n| Divisor\n|-\n| [[JavaScript]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Julia (programming language)|Julia]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>%</code>, <code>rem</code>\n| Dividend\n|-\n| [[Kotlin (programming language)|Kotlin]]\n| <code>%</code>\n| Dividend\n|-\n| [[KornShell|ksh]]\n| <code>%</code>\n| Dividend\n|-\n|[[LabVIEW]]\n|<code>mod</code>\n|Dividend\n|-\n| [[LibreOffice]]\n| <code>=MOD()</code>\n| Divisor\n|-\n| rowspan=\"2\" | [[Logo (programming language)|Logo]]\n| <code>MODULO</code>\n| Divisor\n|-\n| <code>REMAINDER</code>\n| Dividend\n|-\n| [[Lua (programming language)|Lua]] 5\n| <code>%</code>\n| Divisor\n|-\n| [[Lua (programming language)|Lua]] 4\n| <code>mod(x,y)</code>\n| Divisor\n|-\n| [[Liberty BASIC]]\n| <code>MOD</code>\n| Dividend\n|-\n| [[Mathcad]]\n| <code>mod(x,y)</code>\n| Divisor\n|-\n| [[Maple (software)|Maple]]\n| <code>e mod m</code>\n| Nonnegative always\n|-\n| [[Mathematica]]\n| <code>Mod[a, b]</code>\n| Divisor\n|-\n| rowspan=\"2\" | [[MATLAB]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Maxima (software)|Maxima]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>remainder</code>\n| Dividend\n|-\n| [[Maya Embedded Language]]\n| <code>%</code>\n| Dividend\n|-\n| [[Microsoft Excel]]\n| <code>=MOD()</code>\n| Divisor\n|-\n| [[Minitab]]\n| <code>MOD</code>\n| Divisor\n|-\n| [[Korn shell|mksh]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Modula-2]]\n| <code>MOD</code>\n| Divisor\n|-\n| <code>REM</code>\n| Dividend\n|-\n| [[MUMPS]]\n| <code>#</code>\n| Divisor\n|-\n| rowspan=\"2\" | [[Netwide Assembler]] (NASM, NASMX)\n| <code>%</code>\n| Modulo operator unsigned\n|-\n|  <code>%%</code>\n| Modulo operator signed\n|-\n| [[Nim (programming_language)|Nim]]\n| <code>mod</code>\n| Dividend\n|-\n| [[Oberon (programming language)|Oberon]]\n| <code>MOD</code>\n| Divisor{{ref|3}}\n|-\n| [[Object Pascal]], [[Delphi (programming language)|Delphi]]\n| <code>mod</code>\n| Dividend\n|-\n| [[OCaml]]\n| <code>mod</code>\n| Dividend\n|-\n| [[Occam (programming language)|Occam]]\n| <code>\\</code>\n| Dividend\n|-\n| [[Pascal (programming language)|Pascal]] (ISO-7185 and -10206)\n| <code>mod</code>\n| Nonnegative always{{ref|6}}\n|-\n| Programming Code Advanced (PCA)\n| <code>\\</code>\n| Undefined\n|-\n| [[Perl]]\n| <code>%</code>\n| Divisor{{ref|1}}\n|-\n| rowspan=\"2\" | [[Phix]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>remainder</code>\n| Dividend\n|-\n| [[PHP]]\n| <code>%</code>\n| Dividend\n|-\n| PIC [[BASIC]] Pro\n| <code>\\\\</code>\n| Dividend\n|-\n| [[PL/I]]\n| <code>mod</code>\n| Divisor (ANSI PL/I)\n|-\n| [[PowerShell]]\n| <code>%</code>\n| Dividend\n|-\n| Programming Code (PRC)\n| <code> MATH.OP - 'MOD; (\\)'</code>\n| Undefined\n|-\n| [[OpenEdge Advanced Business Language|Progress]]\n| <code>modulo</code>\n| Dividend\n|-\n| rowspan=\"2\"| [[Prolog]] (ISO 1995)\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| [[PureBasic]]\n| <code>%</code>, <code>Mod(x,y)</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Python (programming language)|Python]]\n| <code>%</code>\n| Divisor\n|-\n| <code>math.fmod</code>\n| Dividend\n|-\n| [[Q Sharp|Q#]]\n| <code>%</code>\n| Dividend<ref>{{Cite web|url=https://docs.microsoft.com/en-us/quantum/quantum-qr-expressions?view=qsharp-preview#numeric-expressions|title=Expressions|last=QuantumWriter|website=docs.microsoft.com|language=en-us|access-date=2018-07-11}}</ref>\n|-\n| [[Racket (programming language)|Racket]]\n| <code>remainder</code>\n| Dividend\n|-\n| [[RealBasic]]\n| <code>MOD</code>\n| Dividend\n|-\n| [[R (programming language)|R]]\n| <code>%%</code>\n| Divisor\n|-\n| [[Rexx]]\n| <code>//</code>\n| Dividend\n|-\n| [[RPG (programming language)|RPG]]\n| <code>%REM</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Ruby (programming language)|Ruby]]\n| <code>%</code>, <code>modulo()</code>\n| Divisor\n|-\n| <code>remainder()</code>\n| Dividend\n|-\n| [[Rust (programming language)|Rust]]\n| <code>%</code>\n| Dividend\n|-\n|[[SAS language|SAS]]\n| <code>MOD</code>\n| Dividend\n|-\n| [[Scala (programming language)|Scala]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Scheme (programming language)|Scheme]]\n| <code>modulo</code>\n| Divisor\n|-\n| <code>remainder</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Scheme (programming language)|Scheme]] R<sup>6</sup>RS\n| <code>mod</code>\n| Nonnegative always<ref name=\"r6rs\">[http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_sec_11.7.3.1 r6rs.org]</ref>\n|-\n| <code>mod0</code>\n| Nearest to zero<ref name=\"r6rs\"/>\n|-\n|[[Scratch (programming language)|Scratch]]\n|<code>mod</code>\n|Divisor\n|-\n| rowspan=\"2\" | [[Seed7]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[SenseTalk]]\n| <code>modulo</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Smalltalk]]\n| <code>\\\\</code>\n| Divisor\n|-\n| <code>rem:</code>\n| Dividend\n|-\n| [[Snap!_(programming_language)|Snap!]]\n| <code>mod</code>\n| Divisor\n|-\n| [[Parallax Propeller#Built in Spin byte code interpreter|Spin]]\n| <code>//</code>\n| Divisor\n|-\n|[[Solidity]]\n| <code>%</code>\n| Divisor\n|-\n| [[SQL]] ([[SQL:1999]])\n| <code>mod(x,y)</code>\n| Dividend\n|-\n| SQL (SQL:2012)\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Standard ML]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>Int.rem</code>\n| Dividend\n|-\n| [[Stata]]\n| <code>mod(x,y)</code>\n| Nonnegative always\n|-\n| [[Swift (programming language)|Swift]]\n| <code>%</code>\n| Dividend\n|-\n| [[Tcl]]\n| <code>%</code>\n| Divisor\n|-\n| [[Torque (game engine)|Torque]]\n| <code>%</code>\n| Dividend\n|-\n| [[Turing (programming language)|Turing]]\n| <code>mod</code>\n| Divisor\n|-\n| [[Verilog]] (2001)\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[VHDL]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| [[Vimscript|VimL]]\n| <code>%</code>\n| Dividend\n|-\n| [[Visual Basic]]\n| <code>Mod</code>\n| Dividend\n|-\n| [[WebAssembly]]\n| <code>i32.rem_s</code>, <code>i64.rem_s</code>\n| Dividend\n|-\n| [[x86 assembly language|x86 assembly]]\n| <code>IDIV</code>\n| Dividend\n|-\n|-\n| rowspan=\"2\" | [[XBase++]]\n| <code>%</code>\n| Dividend\n|-\n| <code>Mod()</code>\n| Divisor\n|-\n| Z3 theorem prover\n| <code>div</code>, <code>mod</code>\n| Nonnegative always\n|}\n{| class=\"wikitable sortable\"  style=\"float:right; margin-left:1em; margin-right:0; width:30%;\"\n|+ Floating-point modulo operators in various programming languages\n|-\n! [[Programming language|Language]]\n! Operator\n! abbr=\"Sign\" | Result has same sign as\n|-\n| [[ABAP]]\n| <code>MOD</code>\n| Nonnegative always\n|-\n| [[C (programming language)|C]] (ISO 1990)\n| <code>fmod</code>\n| Dividend<ref>{{Cite journal|title=ISO/IEC 9899:1990: Programming languages \u2013 C |publisher=[[International Organization for Standardization|ISO]], [[International Electrotechnical Commission|IEC]] |year=1990 |location=7.5.6.4 |postscript=<!--None-->}} \"The <code>fmod</code> function returns the value <code>x - i * y</code>, for some integer <code>i</code> such that, if <code>y</code> is nonzero, the result as the same sign as <code>x</code> and magnitude less than the magnitude of <code>y</code>.\".</ref>\n|-\n| rowspan=\"2\" | [[C99|C (ISO 1999)]]\n| <code>fmod</code>\n| Dividend\n|-\n| <code>remainder</code>\n| Nearest to zero\n|-\n| [[C++]] (ISO 1998)\n| <code>std::fmod</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[C++11|C++ (ISO 2011)]]\n| <code>std::fmod</code>\n| Dividend\n|-\n| <code>std::remainder</code>\n| Nearest to zero\n|-\n| [[C Sharp (programming language)|C#]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Common Lisp]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| [[D (programming language)|D]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Dart (programming language)|Dart]]\n| <code>%</code>\n| Nonnegative always\n|-\n| <code>remainder()</code>\n| Dividend\n|-\n| [[F Sharp (programming language)|F#]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Fortran]]\n| <code>mod</code>\n| Dividend\n|-\n| <code>modulo</code>\n| Divisor\n|-\n| [[Go (programming language)|Go]]\n| <code>math.Mod</code>\n| Dividend\n|-\n| [[Haskell (programming language)|Haskell]] (GHC)\n| <code>Data.Fixed.mod'</code>\n| Divisor\n|-\n| [[Java (programming language)|Java]]\n| <code>%</code>\n| Dividend\n|-\n| [[JavaScript]]\n| <code>%</code>\n| Dividend\n|-\n| [[KornShell|ksh]]\n| <code>fmod</code>\n| Dividend\n|-\n| [[LabVIEW]]\n| <code>mod</code>\n| Dividend\n|-\n| [[Microsoft Excel]]\n| <code>=MOD()</code>\n| Divisor\n|-\n| [[OCaml]]\n| <code>mod_float</code>\n| Dividend\n|-\n| [[Perl]]\n| <code>POSIX::fmod</code>\n| Dividend\n|-\n| [[Raku (programming language)|Raku]]\n| <code>%</code>\n| Divisor\n|-\n| [[PHP]]\n| <code>fmod</code>\n| Dividend\n|-\n| rowspan=\"2\"| [[Python (programming language)|Python]]\n| <code>%</code>\n| Divisor\n|-\n| <code>math.fmod</code>\n| Dividend\n|-\n| [[Rexx]]\n| <code>//</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Ruby (programming language)|Ruby]]\n| <code>%</code>, <code>modulo()</code>\n| Divisor\n|-\n| <code>remainder()</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Scheme (programming language)|Scheme]] R<sup>6</sup>RS\n| <code>flmod</code>\n| Nonnegative always\n|-\n| <code>flmod0</code>\n| Nearest to zero\n|-\n|[[Scratch (programming language)|Scratch]]\n|<code>mod</code>\n|Dividend\n|-\n| [[Standard ML]]\n| <code>Real.rem</code>\n| Dividend\n|-\n| [[Swift (programming language)|Swift]]\n| <code>truncatingRemainder(dividingBy:)</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[XBase++]] \n| <code>%</code>\n| Dividend\n|-\n| <code>Mod()</code>\n| Divisor\n|}\n{{clear}}\n\n==Generalizations==\n\n===Modulo with offset===\n\nSometimes it is useful for the result of {{math|''a''}} modulo {{math|''n''}} to lie not between 0 and {{math|''n''\u22121}}, but between some number {{math|''d''}} and {{math|''d''+''n''\u22121}}. In that case, {{math|''d''}} is called an ''offset.'' There does not seem to be a standard notation for this operation, so let us tentatively use {{math|''a''}} mod<sub>{{math|''d''}}</sub> {{math|''n''}}. We thus have the following definition:<ref name=\"Mathematica Mod\" >{{cite web |url=https://reference.wolfram.com/language/ref/Mod.html |title=Mod |author=<!--Not stated--> |date= 2020  |website= Wolfram Language & System Documentation Center  |publisher=[[Wolfram Research]] |access-date=April 8, 2020 }}</ref> {{math|1=''x'' = ''a''}} mod<sub>{{math|''d''}}</sub> {{math|''n''}} just in case {{math|''d''}} \u2264 {{math|''x''}} \u2264 {{math|''d''+''n''\u22121}} and {{math|''x''}} mod {{math|1=''n'' = ''a''}} mod {{math|''n''}}. Clearly, the usual modulo operation corresponds to zero offset: {{math|''a''}} mod {{math|1=''n'' = ''a''}} mod<sub>0</sub> {{math|''n''}}. The operation of modulo with offset is related to the [[Floor and ceiling functions|floor function]] as follows: \n::{{math|''a''}} mod<sub>{{math|''d''}}</sub> {{math|''n''}} = <math>a - n \\left\\lfloor\\frac{a-d}{n}\\right\\rfloor</math>. \n\n(This is easy to see. Let <math>x = a - n \\left\\lfloor\\frac{a-d}{n}\\right\\rfloor</math>. We first show that {{math|''x''}} mod {{math|''n''}} = {{math|''a''}} mod {{math|''n''}}. It is in genereal true that ({{math|''a''}}+{{math|''b''}}{{math|''n''}}) mod {{math|''n''}} = {{math|''a''}} mod {{math|''n''}} for all integers {{math|''b''}}; thus, this is true also in the particular case when {{math|''b''}} = <math>-\\left\\lfloor\\frac{a-d}{n}\\right\\rfloor</math>; but that means that <math>x \\;\\text{mod}\\; n = \\left(a - n \\left\\lfloor\\frac{a-d}{n}\\right\\rfloor\\right) \\;\\text{mod}\\; n = a \\;\\text{mod}\\;n</math>, which is what we wanted to prove. It remains to be shown that {{math|''d''}} \u2264 {{math|''x''}} \u2264 {{math|''d''+''n''\u22121}}. Let {{math|''k''}} and {{math|''r''}} be the integers such that {{math|1=''a'' \u2212 ''d'' = ''kn'' + ''r''}} with 0 \u2264 {{math|''r''}} \u2264 {{math|''n''-1}} (see [[Euclidean division]]). Then <math>\\left\\lfloor\\frac{a-d}{n}\\right\\rfloor = k</math>, thus <math>x = a - n \\left\\lfloor\\frac{a-d}{n}\\right\\rfloor = a - n k = d +r</math>. Now take 0 \u2264 {{math|''r''}} \u2264 {{math|''n''\u22121}} and add {{math|''d''}} to both sides, obtaining {{math|''d''}} \u2264 {{math|''d'' + ''r''}} \u2264 {{math|''d''+''n''\u22121}}. But we've seen that {{math|1=''x'' = ''d'' + ''r''}}, so we are done. \u25a1)\n\nThe modulo with offset {{math|''a''}} mod<sub>{{math|''d''}}</sub> {{math|''n''}} is implemented in [[Mathematica]] as<ref name=\"Mathematica Mod\" /> <code>Mod[a, n, d]</code>.\n\n==See also==\n* [[Modulo (disambiguation)]] and [[modulo (jargon)]] \u2013 many uses of the word ''modulo'', all of which grew out of [[Carl F. Gauss]]'s introduction of ''[[modular arithmetic]]'' in 1801.\n* [[Modular exponentiation]]\n* [[Turn (unit)]]\n\n==Notes==\n* {{note|1}} Perl usually uses arithmetic modulo operator that is machine-independent. For examples and exceptions, see the Perl documentation on multiplicative operators.<ref>[http://perldoc.perl.org/perlop.html#Multiplicative-Operators Perl documentation]</ref>\n* {{note|2}} Mathematically, these two choices are but two of the infinite number of choices available for [[remainder#The inequality satisfied by the remainder|the inequality satisfied by a remainder]].\n* {{note|3}} Divisor must be positive, otherwise undefined.\n* {{note|4}} As implemented in ACUCOBOL, Micro Focus COBOL, and possible others.\n* {{note|5a}}{{note|5b}} Argument order reverses, i.e., <code>\u03b1|\u03c9</code> computes <math>\\omega\\bmod\\alpha</math>, the remainder when dividing <code>\u03c9</code> by <code>\u03b1</code>.\n* {{note|6}} As discussed by Boute, ISO Pascal's definitions of <code>div</code> and <code>mod</code> do not obey the Division Identity, and are thus fundamentally broken.\n\n==References==\n{{Reflist}}\n\n==External links==\n* [http://www.rlefebvre.ca/modulorama.htm Modulorama], animation of a cyclic representation of multiplication tables (explanation in French)\n\n{{DEFAULTSORT:Modulo operation}}\n[[Category:Computer arithmetic]]\n[[Category:Articles with example C++ code]]\n[[Category:Operators (programming)]]\n[[Category:Modular arithmetic]]\n[[Category:Binary operations]]\n\n[[de:Division mit Rest#Modulo]]\n", "text_old": "[[Image:Divmod.svg|thumb|right|250px|{{colorbox|red}} Quotient ({{math|''q''}}) and {{colorbox|lightgreen}} remainder ({{math|''r''}}) as functions of dividend ({{math|''a''}}), using different algorithms]]\nIn [[computing]], the '''modulo''' operation ''should'' (see [[#Common pitfalls|Common pitfalls]] below) find the [[remainder]]  after [[division (mathematics)|division]] of one number by another (called the ''[[modular arithmetic|modulus]]'' of the operation).\n\nGiven two positive numbers, {{math|''a''}} and {{math|''n''}}, {{math|''a''}} modulo {{math|''n''}} (abbreviated as {{math|''a'' mod ''n''}}) is the remainder of the [[Euclidean division]] of {{math|''a''}} by {{math|''n''}}, where {{math|''a''}} is the [[Division (mathematics)|dividend]] and {{math|''n''}} is the [[divisor]].\n\nFor example, the expression \"5 mod 2\" would evaluate to 1 because 5 divided by 2 has a [[quotient]] of 2 and a remainder of 1, while \"9 mod 3\" would evaluate to 0 because the division of 9 by 3 has a quotient of 3 and leaves a remainder of 0; there is nothing to subtract from 9 after multiplying 3 times 3. (Doing the division with a calculator will not show the result referred to here by this operation; the quotient will be expressed as a decimal fraction.)\n\nAlthough typically performed with {{math|''a''}} and {{math|''n''}} both being integers, many computing systems allow other types of numeric operands. The range of numbers for an [[integer]] modulo of {{math|''n''}} is 0 to {{math|''n'' \u2212 1}} inclusive. ({{math|''a''}} mod 1 is always 0; {{math|''a'' mod 0}} is undefined, possibly resulting in a [[division by zero]] error in programming languages.) See [[modular arithmetic]] for an older and related convention applied in [[number theory]].\n\nWhen either {{math|''a''}} or {{math|''n''}} is negative, the naive definition breaks down, and [[programming language]]s differ in how these values are defined.\n\n==Variants of the definition==\n\nIn [[mathematics]], the result of the [[modular arithmetic|modulo operation]] is an [[equivalence class]], and any member of the class may be chosen as representative; however, the usual representative is the '''least positive residue''', the smallest non-negative integer that belongs to that class, ''i.e.'' the remainder of the [[Euclidean division]]. However, other conventions are possible. Computers and calculators have various ways of storing and representing numbers; thus their definition of the modulo operation depends on the [[programming language]] or the underlying [[computer hardware|hardware]].\n\nIn nearly all computing systems, the [[quotient]] {{math|''q''}} and the remainder {{math|''r''}} of {{math|''a''}} divided by {{math|''n''}} satisfy\n: {{NumBlk|:|<math>\\begin{align}\nq \\,&\\in \\mathbb{Z} \\\\\na \\,&= n q + r \\\\\n|r| \\,&< |n|\n\\end{align}</math>|{{EquationRef|1}}}}\n\nHowever, this still leaves a sign ambiguity if the remainder is nonzero: two possible choices for the remainder occur, one negative and the other positive, and two possible choices for the quotient occur. Usually, in number theory, the positive remainder is always chosen, but programming languages choose depending on the language and the signs of {{math|''a''}} or {{math|''n''}}.{{ref|2}} Standard [[Pascal (programming language)|Pascal]] and [[ALGOL 68]] give a positive remainder (or 0) even for negative divisors, and some programming languages, such as C90, leave it to the implementation when either of {{math|''n''}} or {{math|''a''}} is negative. See the table for details. {{math|''a''}} modulo 0 is undefined in most systems, although some do define it as {{math|''a''}}.\n\n{{bulleted list\n| Many implementations use ''truncated division'', where the quotient is defined by [[truncation]] {{math|''q'' {{=}} trunc({{sfrac|''a''|''n''}})}} and thus according to equation ({{EquationNote|1}}) the remainder would have ''same sign as the dividend''.  The quotient is rounded towards zero: equal to the first integer in the direction of zero from the exact rational quotient.\n:<math>r = a - n \\operatorname{trunc}\\left(\\frac{a}{n}\\right)</math>\n\n| [[Donald Knuth]]<ref>{{cite book|\nfirst=Donald. E.|last=Knuth|title=The Art of Computer Programming\n| url=https://archive.org/details/artofcomputerpro0003knut| url-access=registration|publisher=Addison-Wesley|year=1972\n}}</ref> described ''floored division'' where the quotient is defined by the [[floor function]] {{math|''q'' {{=}} \u230a{{sfrac|''a''|''n''}}\u230b}} and thus according to equation ({{EquationNote|1}}) the remainder would have the ''same sign as the divisor''.  Due to the floor function, the quotient is always rounded downwards, even if it is already negative.\n:<math>r = a - n \\left\\lfloor\\frac{a}{n}\\right\\rfloor</math>\n\n| Raymond T. Boute<ref>{{cite journal\n | last = Boute\n | first = Raymond T.\n | title = The Euclidean definition of the functions div and mod\n | journal = ACM Transactions on Programming Languages and Systems\n | volume = 14\n | issue = 2\n | pages = 127\u2013144\n | publisher = ACM Press (New York, NY, USA)\n | date = April 1992\n | url = http://portal.acm.org/citation.cfm?id=128862&coll=portal&dl=ACM\n | doi = 10.1145/128861.128862}}</ref> describes the Euclidean definition in which the remainder is nonnegative always, {{math|0 \u2264 ''r''}}, and is thus consistent with the ''[[Euclidean division]]'' algorithm.  In this case,\n: <math>n > 0 \\Rightarrow q = \\left\\lfloor\\frac{a}{n}\\right\\rfloor</math>\n: <math>n < 0 \\Rightarrow q = \\left\\lceil\\frac{a}{n}\\right\\rceil</math>\nor equivalently\n: <math>q = \\sgn(n) \\left\\lfloor \\frac{a}{\\left|n\\right|} \\right\\rfloor</math>\nwhere {{math|sgn}} is the [[sign function]], and thus\n: <math>r = a - |n| \\left\\lfloor \\frac{a}{\\left|n\\right|} \\right\\rfloor</math>\n\n| Common Lisp also defines round-division and ceiling-division where the quotient is given by {{math|''q'' {{=}} round({{sfrac|''a''|''n''}})}} and {{math|q {{=}} \u2308{{sfrac|''a''|''n''}}\u2309}} respectively.\n\n| [[IEEE 754-1985|IEEE 754]] defines a remainder function where the quotient is {{math|{{sfrac|''a''|''n''}}}} rounded according to the [[IEEE 754-1985#Rounding floating-point numbers|round to nearest convention]].  Thus, the sign of the remainder is chosen to be ''nearest to zero''.\n\n}}\n\nAs described by Leijen,\n{{Quote|text=Boute argues that Euclidean division is superior to the other ones in terms of regularity and useful mathematical properties, although floored division, promoted by Knuth, is also a good definition.  Despite its widespread use, truncated division is shown to be inferior to the other definitions.|sign=Daan Leijen|source=''Division and Modulus for Computer Scientists''<ref>{{cite web\n | last = Leijen\n | first = Daan\n | title = Division and Modulus for Computer Scientists\n | date = December 3, 2001\n | url = http://research.microsoft.com/pubs/151917/divmodnote.pdf\n | format = PDF\n | accessdate =2014-12-25}}</ref>}}\n\nHowever, Boute concentrates on the properties of the modulo operation itself and does not rate the fact that the truncated division shows the symmetry {{math|(-''a'') div ''n'' {{=}} -(''a'' div ''n'')}} and {{math|''a'' div (-''n'') {{=}} -(''a'' div ''n'')}}, which is similar to the ordinary division. As neither floor division nor Euclidean division offer this symmetry, Boute's judgement is at least incomplete.{{citation needed|date=January 2018}}{{OR|date=January 2018}}\n\n==Common pitfalls==\nWhen the result of a modulo operation has the sign of the dividend, it can lead to surprising mistakes.\n\nFor example, to test if an integer is odd, one might be inclined to test if the remainder by 2 is equal to 1:\n\n<source lang=\"cpp\">\nbool is_odd(int n) {\n    return n % 2 == 1;\n}\n</source>\n\nBut in a language where modulo has the sign of the dividend, that is incorrect, because when {{math|''n''}} (the dividend) is negative and odd, {{math|''n''}} mod 2 returns \u22121, and the function returns false.\n\nOne correct alternative is to test that the remainder is not 0 (because remainder 0 is the same regardless of the signs):\n\n<source lang=\"cpp\">\nbool is_odd(int n) {\n    return n % 2 != 0;\n}\n</source>\n\nAnother is to use the fact that, for any odd number, the remainder may be either 1 or \u22121:\n\n<source lang=\"cpp\">\nbool is_odd(int n) {\n    return n % 2 == 1 || n % 2 == -1;\n}\n</source>\n\n==Notation==\n{{About|the binary ''mod'' operation|the ''(mod m)'' notation|congruence relation|section=yes}}\n\nSome calculators have a {{math|mod()}} function button, and many programming languages have a similar function, expressed as {{math|mod(''a'', ''n'')}}, for example. Some also support expressions that use \"%\", \"mod\", or \"Mod\" as a modulo or remainder [[Operator (programming)|operator]], such as\n:<code>a % n</code>\nor\n:<code>a mod n</code>\nor equivalent, for environments lacking a {{math|mod()}} function ('int' inherently produces the truncated value of {{math|{{sfrac|''a''|''n''}}}})\n:<code>a - (n * int(a/n))</code>\n\n==Performance issues==\nModulo operations might be implemented such that a division with a remainder is calculated each time. For special cases, on some hardware, faster alternatives exist. For example, the modulo of powers of 2 can alternatively be expressed as a [[Bitwise operation|bitwise]] AND operation:\n:<code>x % 2<sup>n</sup> == x & (2<sup>n</sup> - 1)</code>\n\nExamples (assuming {{math|''x''}} is a positive integer):\n:<code>x % 2 == x & 1</code>\n:<code>x % 4 == x & 3</code>\n:<code>x % 8 == x & 7</code>\n\nIn devices and software that implement bitwise operations more efficiently than modulo, these alternative forms can result in faster calculations.<ref>{{cite web |first= Adam |last= Horvath |url= http://blog.teamleadnet.com/2012/07/faster-division-and-modulo-operation.html |title= Faster division and modulo operation - the power of two |date= July 5, 2012}}</ref>\n\n[[Compiler optimization|Optimizing]] [[compiler]]s may recognize expressions of the form <code>expression % constant</code> where <code>constant</code> is a power of two and automatically implement them as <code>expression & (constant-1)</code>, allowing to write clearer code without compromising performance. This simple optimization is not possible for languages in which the result of the modulo operation has the sign of the dividend (including C), unless the dividend is of an [[Signedness|unsigned]] integer type. This is because, if the dividend is negative, the modulo will be negative, whereas <code>expression &amp; (constant-1)</code> will always be positive. For these languages, the equivalence <code>x % 2<sup>n</sup> == x < 0 ? x | ~(2<sup>n</sup> - 1) : x & (2<sup>n</sup> - 1)</code> has to be used instead, expressed using bitwise OR, NOT and AND operations.\n\n==Properties (identities)==\nSome modulo operations can be factored or expanded similarly to other mathematical operations.  This may be useful in [[cryptography]] proofs, such as the [[Diffie\u2013Hellman key exchange]].\n*Identity:\n**{{math|(''a'' mod ''n'') mod ''n'' {{=}} ''a'' mod ''n''}}.\n**{{math|''n''{{sup|''x''}} mod ''n'' {{=}} 0}} for all positive integer values of {{math|''x''}}.\n** If {{math|''p''}} is a [[prime number]] which is not a [[divisor]] of {{math|''b''}}, then {{math|''ab''{{sup|''p''\u22121}} mod ''p'' {{=}} ''a'' mod ''p''}}, due to [[Fermat's little theorem]].\n*Inverse:\n**{{math|[(\u2212''a'' mod ''n'') + (''a'' mod ''n'')] mod ''n'' {{=}} 0}}.\n**{{math|''b''{{sup|\u22121}} mod ''n''}} denotes the [[modular multiplicative inverse]], which is defined if and only if {{math|''b''}} and {{math|''n''}} are [[relatively prime]], which is the case when the left hand side is defined: {{math|[(''b''{{sup|\u22121}} mod ''n'')(''b'' mod ''n'')] mod ''n'' {{=}} 1}}.\n*Distributive:\n**{{math|(''a'' + ''b'') mod ''n'' {{=}} [(''a'' mod ''n'') + (''b'' mod ''n'')] mod ''n''}}.\n**{{math|''ab'' mod ''n'' {{=}} [(''a'' mod ''n'')(''b'' mod ''n'')] mod ''n''}}.\n*Division (definition):  {{math|{{sfrac|''a''|''b''}} mod ''n'' {{=}} [(''a'' mod ''n'')(''b''{{sup|\u22121}} mod ''n'')] mod ''n''}}, when the right hand side is defined (that is when {{math|''b''}} and {{math|''n''}} are  [[coprime]]). Undefined otherwise. \n*Inverse multiplication:  {{math|[(''ab'' mod ''n'')(''b''{{sup|\u22121}} mod ''n'')] mod ''n'' {{=}} ''a'' mod ''n''}}.\n\n==In programming languages==\n\n{| class=\"wikitable sortable\" style=\"float:left; clear:left; width:50%;\"\n|+ Integer modulo operators in various programming languages\n|-\n! [[Programming language|Language]]\n! Operator\n! abbr=\"Sign\" | Result has same sign as\n|-\n| [[ABAP]]\n| <code>MOD</code>\n| Nonnegative always\n|-\n| [[ActionScript]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Ada (programming language)|Ada]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| [[ALGOL 68]]\n| <code>\u00f7\u00d7</code>, <code>mod</code>\n| Nonnegative always\n|-\n| [[AMPL]]\n| <code>mod</code>\n| Dividend\n|-\n| [[APL (programming language)|APL]]\n| <code><nowiki>|</nowiki></code>{{ref|5a}}\n| Divisor\n|-\n| [[AppleScript]]\n| <code>mod</code>\n| Dividend\n|-\n| [[AutoLISP]]\n| <code>(rem d n)</code>\n| Dividend\n|-\n| [[AWK]]\n| <code>%</code>\n| Dividend\n|-\n| [[BASIC]]\n| <code>Mod</code>\n| Undefined\n|-\n| [[Bash (Unix shell)|bash]]\n| <code>%</code>\n| Dividend\n|-\n| [[bc (programming language)|bc]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[C (programming language)|C]] (ISO 1990)\n| <code>%</code>\n| Implementation-defined\n|-\n| <code>div</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[C++]] (ISO 1998)\n| <code>%</code>\n| Implementation-defined<ref>{{Cite journal |title=ISO/IEC 14882:2003: Programming languages \u2013 C++ |publisher=[[International Organization for Standardization]] (ISO), [[International Electrotechnical Commission]] (IEC) |year=2003 |location=5.6.4 |postscript=<!--None-->}}. \"the binary % operator yields the remainder from the division of the first expression by the second. .... If both operands are nonnegative then the remainder is nonnegative; if not, the sign of the remainder is implementation-defined\".</ref>\n|-\n| <code>div</code>\n| Dividend\n|-\n| [[C99|C (ISO 1999)]]\n| <code>%</code>, <code>div</code>\n| Dividend<ref name=\"C99\">{{cite web |title=C99 specification (ISO/IEC 9899:TC2) |url=http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf |accessdate=16 August 2018 |location=6.5.5 Multiplicative operators |date=2005-05-06}}</ref>\n|-\n| [[C++11|C++ (ISO 2011)]]\n| <code>%</code>, <code>div</code>\n| Dividend\n|-\n| [[C Sharp (programming language)|C#]]\n| <code>%</code>\n| Dividend\n|-\n| [[Clarion (programming language)|Clarion]]\n| <code>%</code>\n| Dividend\n|-\n| [[Clean (programming language)|Clean]]\n| <code>rem</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Clojure]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| [[COBOL]]{{ref|4}}\n| <code>FUNCTION&nbsp;MOD</code>\n| Divisor\n|-\n| rowspan=\"2\" | [[CoffeeScript]]\n| <code>%</code>\n| Dividend\n|-\n| <code>%%</code>\n| Divisor<ref name=\"CoffeeScript\">[http://coffeescript.org/#operators CoffeeScript operators]</ref>\n|-\n| [[ColdFusion]]\n| <code>%</code>, <code>MOD</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Common Lisp]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| [https://www.scirra.com/construct2 Construct 2]\n| <code>%</code>\n|\n|-\n| [[D (programming language)|D]]\n| <code>%</code>\n| Dividend<ref>{{cite web |title=Expressions |url=http://www.digitalmars.com/d/2.0/expression.html#MulExpression |work=D Programming Language 2.0 |publisher=Digital Mars |accessdate=29 July 2010}}</ref>\n|-\n| rowspan=\"2\" | [[Dart (programming language)|Dart]]\n| <code>%</code>\n| Nonnegative always\n|-\n| <code>remainder()</code>\n| Dividend\n|-\n| [[Eiffel (programming language)|Eiffel]]\n| <code>\\\\</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Elm (programming_language)|Elm]]\n| <code>modBy</code>\n| Divisor\n|-\n| <code>remainderBy</code>\n| Dividend\n|-\n| [[Erlang (programming language)|Erlang]]\n| <code>rem</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Euphoria (programming language)|Euphoria]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>remainder</code>\n| Dividend\n|-\n| [[F Sharp (programming language)|F#]]\n| <code>%</code>\n| Dividend\n|-\n| [[FileMaker]]\n| <code>Mod</code>\n| Divisor\n|-\n| rowspan=\"3\" | [[Forth (programming language)|Forth]]\n| <code>mod</code>\n| implementation defined\n|-\n| <code>fm/mod</code>\n| Divisor\n|-\n| <code>sm/rem</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Fortran]]\n| <code>mod</code>\n| Dividend\n|-\n| <code>modulo</code>\n| Divisor\n|-\n| Frink\n| <code>mod</code>\n| Divisor\n|-\n| [[GameMaker Studio]] (GML)\n| <code>mod</code>, <code>%</code>\n| Dividend\n|-\n| [[Godot (game engine)|GDScript]]\n| <code>%</code>\n| Dividend\n|-\n| [[Go (programming language)|Go]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Haskell (programming language)|Haskell]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| [[Haxe]]\n| <code>%</code>\n| Dividend\n|-\n| [[J (programming language)|J]]\n| <code><nowiki>|</nowiki></code>{{ref|5b}}\n| Divisor\n|-\n| rowspan=\"2\" | [[Java (programming language)|Java]]\n| <code>%</code>\n| Dividend\n|-\n| <code>Math.floorMod</code>\n| Divisor\n|-\n| [[JavaScript]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Julia (programming language)|Julia]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>%</code>, <code>rem</code>\n| Dividend\n|-\n| [[Kotlin (programming language)|Kotlin]]\n| <code>%</code>\n| Dividend\n|-\n| [[KornShell|ksh]]\n| <code>%</code>\n| Dividend\n|-\n|[[LabVIEW]]\n|<code>mod</code>\n|Dividend\n|-\n| [[LibreOffice]]\n| <code>=MOD()</code>\n| Divisor\n|-\n| rowspan=\"2\" | [[Logo (programming language)|Logo]]\n| <code>MODULO</code>\n| Divisor\n|-\n| <code>REMAINDER</code>\n| Dividend\n|-\n| [[Lua (programming language)|Lua]] 5\n| <code>%</code>\n| Divisor\n|-\n| [[Lua (programming language)|Lua]] 4\n| <code>mod(x,y)</code>\n| Divisor\n|-\n| [[Liberty BASIC]]\n| <code>MOD</code>\n| Dividend\n|-\n| [[Mathcad]]\n| <code>mod(x,y)</code>\n| Divisor\n|-\n| [[Maple (software)|Maple]]\n| <code>e mod m</code>\n| Nonnegative always\n|-\n| [[Mathematica]]\n| <code>Mod[a, b]</code>\n| Divisor\n|-\n| rowspan=\"2\" | [[MATLAB]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Maxima (software)|Maxima]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>remainder</code>\n| Dividend\n|-\n| [[Maya Embedded Language]]\n| <code>%</code>\n| Dividend\n|-\n| [[Microsoft Excel]]\n| <code>=MOD()</code>\n| Divisor\n|-\n| [[Minitab]]\n| <code>MOD</code>\n| Divisor\n|-\n| [[Korn shell|mksh]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Modula-2]]\n| <code>MOD</code>\n| Divisor\n|-\n| <code>REM</code>\n| Dividend\n|-\n| [[MUMPS]]\n| <code>#</code>\n| Divisor\n|-\n| rowspan=\"2\" | [[Netwide Assembler]] (NASM, NASMX)\n| <code>%</code>\n| Modulo operator unsigned\n|-\n|  <code>%%</code>\n| Modulo operator signed\n|-\n| [[Nim (programming_language)|Nim]]\n| <code>mod</code>\n| Dividend\n|-\n| [[Oberon (programming language)|Oberon]]\n| <code>MOD</code>\n| Divisor{{ref|3}}\n|-\n| [[Object Pascal]], [[Delphi (programming language)|Delphi]]\n| <code>mod</code>\n| Dividend\n|-\n| [[OCaml]]\n| <code>mod</code>\n| Dividend\n|-\n| [[Occam (programming language)|Occam]]\n| <code>\\</code>\n| Dividend\n|-\n| [[Pascal (programming language)|Pascal]] (ISO-7185 and -10206)\n| <code>mod</code>\n| Nonnegative always{{ref|6}}\n|-\n| Programming Code Advanced (PCA)\n| <code>\\</code>\n| Undefined\n|-\n| [[Perl]]\n| <code>%</code>\n| Divisor{{ref|1}}\n|-\n| rowspan=\"2\" | [[Phix]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>remainder</code>\n| Dividend\n|-\n| [[PHP]]\n| <code>%</code>\n| Dividend\n|-\n| PIC [[BASIC]] Pro\n| <code>\\\\</code>\n| Dividend\n|-\n| [[PL/I]]\n| <code>mod</code>\n| Divisor (ANSI PL/I)\n|-\n| [[PowerShell]]\n| <code>%</code>\n| Dividend\n|-\n| Programming Code (PRC)\n| <code> MATH.OP - 'MOD; (\\)'</code>\n| Undefined\n|-\n| [[OpenEdge Advanced Business Language|Progress]]\n| <code>modulo</code>\n| Dividend\n|-\n| rowspan=\"2\"| [[Prolog]] (ISO 1995)\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| [[PureBasic]]\n| <code>%</code>, <code>Mod(x,y)</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Python (programming language)|Python]]\n| <code>%</code>\n| Divisor\n|-\n| <code>math.fmod</code>\n| Dividend\n|-\n| [[Q Sharp|Q#]]\n| <code>%</code>\n| Dividend<ref>{{Cite web|url=https://docs.microsoft.com/en-us/quantum/quantum-qr-expressions?view=qsharp-preview#numeric-expressions|title=Expressions|last=QuantumWriter|website=docs.microsoft.com|language=en-us|access-date=2018-07-11}}</ref>\n|-\n| [[Racket (programming language)|Racket]]\n| <code>remainder</code>\n| Dividend\n|-\n| [[RealBasic]]\n| <code>MOD</code>\n| Dividend\n|-\n| [[R (programming language)|R]]\n| <code>%%</code>\n| Divisor\n|-\n| [[Rexx]]\n| <code>//</code>\n| Dividend\n|-\n| [[RPG (programming language)|RPG]]\n| <code>%REM</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Ruby (programming language)|Ruby]]\n| <code>%</code>, <code>modulo()</code>\n| Divisor\n|-\n| <code>remainder()</code>\n| Dividend\n|-\n| [[Rust (programming language)|Rust]]\n| <code>%</code>\n| Dividend\n|-\n|[[SAS language|SAS]]\n| <code>MOD</code>\n| Dividend\n|-\n| [[Scala (programming language)|Scala]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Scheme (programming language)|Scheme]]\n| <code>modulo</code>\n| Divisor\n|-\n| <code>remainder</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Scheme (programming language)|Scheme]] R<sup>6</sup>RS\n| <code>mod</code>\n| Nonnegative always<ref name=\"r6rs\">[http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_sec_11.7.3.1 r6rs.org]</ref>\n|-\n| <code>mod0</code>\n| Nearest to zero<ref name=\"r6rs\"/>\n|-\n|[[Scratch (programming language)|Scratch]]\n|<code>mod</code>\n|Divisor\n|-\n| rowspan=\"2\" | [[Seed7]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[SenseTalk]]\n| <code>modulo</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Smalltalk]]\n| <code>\\\\</code>\n| Divisor\n|-\n| <code>rem:</code>\n| Dividend\n|-\n| [[Snap!_(programming_language)|Snap!]]\n| <code>mod</code>\n| Divisor\n|-\n| [[Parallax Propeller#Built in Spin byte code interpreter|Spin]]\n| <code>//</code>\n| Divisor\n|-\n|[[Solidity]]\n| <code>%</code>\n| Divisor\n|-\n| [[SQL]] ([[SQL:1999]])\n| <code>mod(x,y)</code>\n| Dividend\n|-\n| SQL (SQL:2012)\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Standard ML]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>Int.rem</code>\n| Dividend\n|-\n| [[Stata]]\n| <code>mod(x,y)</code>\n| Nonnegative always\n|-\n| [[Swift (programming language)|Swift]]\n| <code>%</code>\n| Dividend\n|-\n| [[Tcl]]\n| <code>%</code>\n| Divisor\n|-\n| [[Torque (game engine)|Torque]]\n| <code>%</code>\n| Dividend\n|-\n| [[Turing (programming language)|Turing]]\n| <code>mod</code>\n| Divisor\n|-\n| [[Verilog]] (2001)\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[VHDL]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| [[Vimscript|VimL]]\n| <code>%</code>\n| Dividend\n|-\n| [[Visual Basic]]\n| <code>Mod</code>\n| Dividend\n|-\n| [[WebAssembly]]\n| <code>i32.rem_s</code>, <code>i64.rem_s</code>\n| Dividend\n|-\n| [[x86 assembly language|x86 assembly]]\n| <code>IDIV</code>\n| Dividend\n|-\n|-\n| rowspan=\"2\" | [[XBase++]]\n| <code>%</code>\n| Dividend\n|-\n| <code>Mod()</code>\n| Divisor\n|-\n| Z3 theorem prover\n| <code>div</code>, <code>mod</code>\n| Nonnegative always\n|}\n{| class=\"wikitable sortable\"  style=\"float:right; margin-left:1em; margin-right:0; width:30%;\"\n|+ Floating-point modulo operators in various programming languages\n|-\n! [[Programming language|Language]]\n! Operator\n! abbr=\"Sign\" | Result has same sign as\n|-\n| [[ABAP]]\n| <code>MOD</code>\n| Nonnegative always\n|-\n| [[C (programming language)|C]] (ISO 1990)\n| <code>fmod</code>\n| Dividend<ref>{{Cite journal|title=ISO/IEC 9899:1990: Programming languages \u2013 C |publisher=[[International Organization for Standardization|ISO]], [[International Electrotechnical Commission|IEC]] |year=1990 |location=7.5.6.4 |postscript=<!--None-->}} \"The <code>fmod</code> function returns the value <code>x - i * y</code>, for some integer <code>i</code> such that, if <code>y</code> is nonzero, the result as the same sign as <code>x</code> and magnitude less than the magnitude of <code>y</code>.\".</ref>\n|-\n| rowspan=\"2\" | [[C99|C (ISO 1999)]]\n| <code>fmod</code>\n| Dividend\n|-\n| <code>remainder</code>\n| Nearest to zero\n|-\n| [[C++]] (ISO 1998)\n| <code>std::fmod</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[C++11|C++ (ISO 2011)]]\n| <code>std::fmod</code>\n| Dividend\n|-\n| <code>std::remainder</code>\n| Nearest to zero\n|-\n| [[C Sharp (programming language)|C#]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Common Lisp]]\n| <code>mod</code>\n| Divisor\n|-\n| <code>rem</code>\n| Dividend\n|-\n| [[D (programming language)|D]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Dart (programming language)|Dart]]\n| <code>%</code>\n| Nonnegative always\n|-\n| <code>remainder()</code>\n| Dividend\n|-\n| [[F Sharp (programming language)|F#]]\n| <code>%</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Fortran]]\n| <code>mod</code>\n| Dividend\n|-\n| <code>modulo</code>\n| Divisor\n|-\n| [[Go (programming language)|Go]]\n| <code>math.Mod</code>\n| Dividend\n|-\n| [[Haskell (programming language)|Haskell]] (GHC)\n| <code>Data.Fixed.mod'</code>\n| Divisor\n|-\n| [[Java (programming language)|Java]]\n| <code>%</code>\n| Dividend\n|-\n| [[JavaScript]]\n| <code>%</code>\n| Dividend\n|-\n| [[KornShell|ksh]]\n| <code>fmod</code>\n| Dividend\n|-\n| [[LabVIEW]]\n| <code>mod</code>\n| Dividend\n|-\n| [[Microsoft Excel]]\n| <code>=MOD()</code>\n| Divisor\n|-\n| [[OCaml]]\n| <code>mod_float</code>\n| Dividend\n|-\n| [[Perl]]\n| <code>POSIX::fmod</code>\n| Dividend\n|-\n| [[Raku (programming language)|Raku]]\n| <code>%</code>\n| Divisor\n|-\n| [[PHP]]\n| <code>fmod</code>\n| Dividend\n|-\n| rowspan=\"2\"| [[Python (programming language)|Python]]\n| <code>%</code>\n| Divisor\n|-\n| <code>math.fmod</code>\n| Dividend\n|-\n| [[Rexx]]\n| <code>//</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Ruby (programming language)|Ruby]]\n| <code>%</code>, <code>modulo()</code>\n| Divisor\n|-\n| <code>remainder()</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[Scheme (programming language)|Scheme]] R<sup>6</sup>RS\n| <code>flmod</code>\n| Nonnegative always\n|-\n| <code>flmod0</code>\n| Nearest to zero\n|-\n|[[Scratch (programming language)|Scratch]]\n|<code>mod</code>\n|Dividend\n|-\n| [[Standard ML]]\n| <code>Real.rem</code>\n| Dividend\n|-\n| [[Swift (programming language)|Swift]]\n| <code>truncatingRemainder(dividingBy:)</code>\n| Dividend\n|-\n| rowspan=\"2\" | [[XBase++]] \n| <code>%</code>\n| Dividend\n|-\n| <code>Mod()</code>\n| Divisor\n|}\n{{clear}}\n\n==Generalizations==\n\n===Modulo with offset===\n\nSometimes it is useful for the result of {{math|''a''}} modulo {{math|''n''}} to lie not between 0 and {{math|''n''}}-1, but between some number {{math|''d''}} and {{math|''d''}}+{{math|''n''}}-1. In that case, {{math|''d''}} is called an ''offset.'' There does not seem to be a standard notation for this operation, so let us tentatively use {{math|''a''}} mod<sub>{{math|''d''}}</sub> {{math|''n''}}. We thus have the following definition:<ref name=\"Mathematica Mod\" >{{cite web |url=https://reference.wolfram.com/language/ref/Mod.html |title=Mod |author=<!--Not stated--> |date= 2020  |website= Wolfram Language & System Documentation Center  |publisher=[[Wolfram Research]] |access-date=April 8, 2020 }}</ref> {{math|''x''}}={{math|''a''}} mod<sub>{{math|''d''}}</sub> {{math|''n''}} just in case {{math|''d''}} \u2264 {{math|''x''}} \u2264 {{math|''d''}}+{{math|''n''}}-1 and {{math|''x''}} mod {{math|''n''}} = {{math|''a''}} mod {{math|''n''}}. Clearly, the usual modulo operation corresponds to zero offset: {{math|''a''}} mod {{math|''n''}} = {{math|''a''}} mod<sub>0</sub> {{math|''n''}}. The operation of modulo with offset is related to the [[Floor and ceiling functions|floor function]] as follows: \n::{{math|''a''}} mod<sub>{{math|''d''}}</sub> {{math|''n''}} = <math>a - n \\left\\lfloor\\frac{a-d}{n}\\right\\rfloor</math>. \n\n[This is easy to see. Let <math>x = a - n \\left\\lfloor\\frac{a-d}{n}\\right\\rfloor</math>. We first show that {{math|''x''}} mod {{math|''n''}} = {{math|''a''}} mod {{math|''n''}}. It is in genereal true that ({{math|''a''}}+{{math|''b''}}{{math|''n''}}) mod {{math|''n''}} = {{math|''a''}} mod {{math|''n''}} for all integer {{math|''b''}}; thus, this is true also in the particular case when {{math|''b''}} = <math>-\\left\\lfloor\\frac{a-d}{n}\\right\\rfloor</math>; but that means that <math>x \\;\\text{mod}\\; n = \\left(a - n \\left\\lfloor\\frac{a-d}{n}\\right\\rfloor\\right) \\;\\text{mod}\\; n = a \\;\\text{mod}\\;n</math>, which is what we wanted to prove. It remains to be shown that {{math|''d''}} \u2264 {{math|''x''}} \u2264 {{math|''d''}}+{{math|''n''}}-1. Let {{math|''k''}} and {{math|''r''}} be the integers such that <math>a-d = k n + r</math> with 0 \u2264 {{math|''r''}} \u2264 n-1 (see [[Euclidean division]]). Then <math>\\left\\lfloor\\frac{a-d}{n}\\right\\rfloor = k</math>, thus <math>x = a - n \\left\\lfloor\\frac{a-d}{n}\\right\\rfloor = a - n k = d +r</math>. Now take 0 \u2264 {{math|''r''}} \u2264 n-1 and add {{math|''d''}} to both sides, obtaining {{math|''d''}} \u2264 <math>d + r</math>\u2264 {{math|''d''}}+{{math|''n''}}-1. But we've seen that <math>x = d +r</math>, so we are done. \u25a1]\n\nThe modulo with offset {{math|''a''}} mod<sub>{{math|''d''}}</sub> {{math|''n''}} is implemented in [[Mathematica]] as<ref name=\"Mathematica Mod\" /> <code>Mod[a, n, d]</code>.\n\n==See also==\n* [[Modulo (disambiguation)]] and [[modulo (jargon)]] \u2013 many uses of the word ''modulo'', all of which grew out of [[Carl F. Gauss]]'s introduction of ''[[modular arithmetic]]'' in 1801.\n* [[Modular exponentiation]]\n* [[Turn (unit)]]\n\n==Notes==\n* {{note|1}} Perl usually uses arithmetic modulo operator that is machine-independent. For examples and exceptions, see the Perl documentation on multiplicative operators.<ref>[http://perldoc.perl.org/perlop.html#Multiplicative-Operators Perl documentation]</ref>\n* {{note|2}} Mathematically, these two choices are but two of the infinite number of choices available for [[remainder#The inequality satisfied by the remainder|the inequality satisfied by a remainder]].\n* {{note|3}} Divisor must be positive, otherwise undefined.\n* {{note|4}} As implemented in ACUCOBOL, Micro Focus COBOL, and possible others.\n* {{note|5a}}{{note|5b}} Argument order reverses, i.e., <code>\u03b1|\u03c9</code> computes <math>\\omega\\bmod\\alpha</math>, the remainder when dividing <code>\u03c9</code> by <code>\u03b1</code>.\n* {{note|6}} As discussed by Boute, ISO Pascal's definitions of <code>div</code> and <code>mod</code> do not obey the Division Identity, and are thus fundamentally broken.\n\n==References==\n{{Reflist}}\n\n==External links==\n* [http://www.rlefebvre.ca/modulorama.htm Modulorama], animation of a cyclic representation of multiplication tables (explanation in French)\n\n{{DEFAULTSORT:Modulo operation}}\n[[Category:Computer arithmetic]]\n[[Category:Articles with example C++ code]]\n[[Category:Operators (programming)]]\n[[Category:Modular arithmetic]]\n[[Category:Binary operations]]\n\n[[de:Division mit Rest#Modulo]]\n", "name_user": "Joel Brennan", "label": "safe", "comment": "\u2192\u200eGeneralizations:fixed formatting", "url_page": "//en.wikipedia.org/wiki/Modulo_operation"}
{"title_page": "White Furniture Company", "text_new": "{{Refimprove|date=April 2017}}\n\n{{Infobox NRHP | name =White Furniture Company\n  | nrhp_type =\n  | image =\n  | caption =\n  | location = E. Center and N. 5th Sts., [[Mebane, North Carolina]]\n  | coordinates = {{coord|36|5|45|N|79|16|0|W|display=inline,title}}\n| locmapin = North Carolina#USA\n  | area =\n  | built =1905\n  | architect=\n  | architecture=\n  | added = July 29, 1982\n  | governing_body = Private\n  | refnum=82003422\n<ref name=\"nris\">{{NRISref|2009a}}</ref>\n}}\n'''White Furniture Company''', was a major American producer of hand-crafted fine furniture for over a century (1881\u20131993). Founded by the White Brothers of [[Mebane, North Carolina]], the factory notably produced furnishings for the US government and the [[Grove Park Inn]].<ref name = nrhpinv>{{Cite web | author = Linda Marquez-Frees and Jim Sumner| title =White Furniture Company| work = National Register of Historic Places - Nomination and Inventory | date = March 1982| url = https://files.nc.gov/ncdcr/nr/AM0466.pdf | format = pdf | publisher = North Carolina State Historic Preservation Office | accessdate = 2014-08-01}}</ref>\n\n==Origins==\n\nIn 1881, brothers Dave and Will White founded White Furniture Company.<ref name=\":0\">[http://uncpress.unc.edu/nc_encyclopedia/furniture.html Encyclopedia of North Carolina :: UNC Press<!-- Bot generated title -->]</ref>  They used a small loan and $275 from working as telegraph operators as capital.<ref name=\":0\" /> Their father, Stephen A. White III, had acquired an amount of debt which soiled the family's name. Dave and Will pledged to repay their father's creditors, and such was the catalyst behind starting the factory.\n\nWill White served as president of the company and Dave White as general manager. \"The White Brothers were aggressive businessmen who took seriously their place in the town, and who, like many in the New South, equated industrial growth with civic duty and regional pride.\"\n\nWorking with only a [[Plane (tool)|plane]] and a [[boiler]], the initial manufacturing was limited to only round oak dining tables and wagon wheels.<ref name=\":1\">{{Cite book|last=Vincent|first=William|title=Historic Alamance County|publisher=Historical Publishing Network|year=2009|isbn=|location=|pages=70-71}}</ref> While reaching an early success in 1886, a local businessman invested funds to expand White Furniture and purchase more advanced machinery. Within a brief time, the company employed 32 people and manufactured tables, chairs, and a bedroom set. The solid-oak bedroom set sold for nine dollars and included a bed, dresser, and washstand.\n\n==Early history==\n\n=== The Panama Canal contracts===\n\nIn 1906, under the command of Chief Engineer [[John Frank Stevens]], hundreds of new building were built in Panama. These buildings were created to house army engineers and canal workers constructing the [[Panama Canal]]. The US government was in need of furniture for both enlisted men and American officers in Panama, and the bulk of the contracts was awarded to Whites.<ref name=\":1\" /> A local newspaper reported, \"The first installment of furniture for the Panama Canal, contracted for the government with the White Furniture Company. This train of cars was handsomely placarded, each car bearing a 20-foot banner worded 'FROM THE WHITE FURNITURE CO., MEBANE, N.C., FOR U.S. GOVERNMENT, PANAMA CANAL,' and then the company trademark, 'The White Line Guarantees Satisfaction.'\"\n\nThis was the first time a government contract of this type had been awarded to a 'southern factory'. A total of 58 boxcars was whipped from North Carolina to the Panama Canal.\n\nJust one year after being awarded the Panama contracts, in 1907, White Furniture Company was awarded \"Best manufacturer of American furniture\" at the Jamestown Exhibition. (A World's Fair celebration during the 300th anniversary of the founding of the [[Jamestown, Virginia|Jamestown Settlement]].)\n\n==References==\n{{reflist}}\n\n{{National Register of Historic Places in North Carolina}}\n\n[[Category:Companies based in North Carolina]]\n[[Category:Industrial buildings and structures on the National Register of Historic Places in North Carolina]]\n[[Category:Industrial buildings completed in 1905]]\n[[Category:Furniture companies of the United States]]\n[[Category:Defunct furniture manufacturers]]\n[[Category:Buildings and structures in Alamance County, North Carolina]]\n[[Category:National Register of Historic Places in Alamance County, North Carolina]]\n", "text_old": "{{Refimprove|date=April 2017}}\n\n{{Infobox NRHP | name =White Furniture Company\n  | nrhp_type =\n  | image =\n  | caption =\n  | location = E. Center and N. 5th Sts., [[Mebane, North Carolina]]\n  | coordinates = {{coord|36|5|45|N|79|16|0|W|display=inline,title}}\n| locmapin = North Carolina#USA\n  | area =\n  | built =1905\n  | architect=\n  | architecture=\n  | added = July 29, 1982\n  | governing_body = Private\n  | refnum=82003422\n<ref name=\"nris\">{{NRISref|2009a}}</ref>\n}}\n'''White Furniture Company''', was a major American producer of hand-crafted fine furniture for over a century (1881\u20131993). Founded by the White Brothers of [[Mebane, North Carolina]], the factory notably produced furnishings for the US government and the [[Grove Park Inn]].<ref name = nrhpinv>{{Cite web | author = Linda Marquez-Frees and Jim Sumner| title =White Furniture Company| work = National Register of Historic Places - Nomination and Inventory | date = March 1982| url = https://files.nc.gov/ncdcr/nr/AM0466.pdf | format = pdf | publisher = North Carolina State Historic Preservation Office | accessdate = 2014-08-01}}</ref>\n\n==Origins==\n\nIn 1881, brothers Dave and Will White founded White Furniture Company.<ref name=\":0\">[http://uncpress.unc.edu/nc_encyclopedia/furniture.html Encyclopedia of North Carolina :: UNC Press<!-- Bot generated title -->]</ref>  They used a small loan and $275 from working as telegraph operators as capital.<ref name=\":0\" /> Their father, Stephen A. White III, had acquired an amount of debt which soiled the family's name. Dave and Will pledged to repay their father's creditors, and such was the catalyst behind starting the factory.\n\nWill White served as president of the company and Dave White as general manager. \"The White Brothers were aggressive businessmen who took seriously their place in the town, and who, like many in the New South, equated industrial growth with civic duty and regional pride.\"\n\nWorking with only a [[Plane (tool)|plane]] and a [[boiler]], the initial manufacturing was limited to only round oak dining tables and wagon wheels. While reaching an early success in 1886, a local businessman invested funds to expand White Furniture and purchase more advanced machinery. Within a brief time, the company employed 32 people and manufactured tables, chairs, and a bedroom set. The solid-oak bedroom set sold for nine dollars and included a bed, dresser, and washstand.\n\n==Early history==\n\n=== The Panama Canal contracts===\n\nIn 1906, under the command of Chief Engineer [[John Frank Stevens]], hundreds of new building were built in Panama. These buildings were created to house army engineers and canal workers constructing the [[Panama Canal]]. The US government was in need of furniture for both enlisted men and American officers in Panama, and the bulk of the contracts was awarded to White's. A local newspaper reported, \"The first installment of furniture for the Panama Canal, contracted for the government with the White Furniture Company. This train of cars was handsomely placarded, each car bearing a 20-foot banner worded 'FROM THE WHITE FURNITURE CO., MEBANE, N.C., FOR U.S. GOVERNMENT, PANAMA CANAL,' and then the company trademark, 'The White Line Guarantees Satisfaction.'\"\n\nThis was the first time a government contract of this type had been awarded to a 'southern factory'. A total of 58 boxcars was whipped from North Carolina to the Panama Canal.\n\nJust one year after being awarded the Panama contracts, in 1907, White Furniture Company was awarded \"Best manufacturer of American furniture\" at the Jamestown Exhibition. (A World's Fair celebration during the 300th anniversary of the founding of the [[Jamestown, Virginia|Jamestown Settlement]].)\n\n==References==\n{{reflist}}\n\n{{National Register of Historic Places in North Carolina}}\n\n[[Category:Companies based in North Carolina]]\n[[Category:Industrial buildings and structures on the National Register of Historic Places in North Carolina]]\n[[Category:Industrial buildings completed in 1905]]\n[[Category:Furniture companies of the United States]]\n[[Category:Defunct furniture manufacturers]]\n[[Category:Buildings and structures in Alamance County, North Carolina]]\n[[Category:National Register of Historic Places in Alamance County, North Carolina]]\n", "name_user": "Jacquelinehickey4", "label": "safe", "comment": "Added citations", "url_page": "//en.wikipedia.org/wiki/White_Furniture_Company"}
