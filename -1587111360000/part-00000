{"title_page": "New Renaissance Pictures", "text_new": "{{Infobox company\n| name                = \n| logo                = [[File:New Renaissance Pictures Logo.jpg|250px|New Renaissance Pictures Logo]]\n| type                = \n| foundation          = July 2005 <!--modifies \"Founded\" entry-->\n| location_city       = [[La Habra, California]]\n| location_country    = [[United States|U.S.]]\n| location            = \n| key_people          = [[Joshua Sikora]], President & Founder<br />[[Kevin Christensen]]<br />[[Anthony Parisi]]\n| area_served         = \n| industry            = [[Film industry|Filmmaking]]\n| products            = \n| services            = \n| revenue             = \n| operating_income    = \n| net_income          = \n| num_employees       = \n| parent              = [[Sikora Media Group]]\n| owner               = \n| divisions           = \n| subsid              = \n| slogan              = \n| homepage            = [http://www.newrenaissancepictures.com]\n| footnotes           = \n| intl                = <!--Enter ''yes'' to change labels to international instead of U.S. terminology-->\n}}\n\n'''New Renaissance Pictures''' is an American independent production and distribution company for [[film]], [[television]], and [[new media|the web]], established in 2005.<ref>\"[http://www.newrenaissanceonline.com/aboutus.html About Us]\" New Renaissance Pictures, retrieved October 15, 2009.</ref> Since its inception, New Renaissance Pictures has been involved with a variety of groundbreaking new media projects, including [[WebSerials.com]] and the multimedia experience ''[[The Black Dawn]]''.\n\n==History==\nNew Renaissance Pictures launched as one of the first online distributors of [[short film]]s. By 2006, the company was producing and distributing a variety of award-winning films, including ''Be the Man'' (Best African-American Film, DGA Student Film Awards),<ref>\"[http://www.dga.org/news/pr_expand.php3?479&section=news&oldsection=&oldpage= DGA Announces Winners of 12th Annual Student Filmmakers Awards]\" [[Directors Guild of America]], November 1, 2006.</ref><ref>\"[http://www.variety.com/article/VR1117953125.html?categoryid=1043&cs=1 DGA fetes student filmmakers]\" [[Variety (magazine)|Variety]], November 1, 2006.</ref> ''Wednesday'' (Jimmy Stewart Crystal Heart Award, Heartland Film Festival)<ref>\"[http://www.trulymovingpictures.org/FilmFestival/Pages/MovieDetails.aspx?MovieId=255 'Wednesday' MovieDetails]\" [[Heartland Film Festival]].</ref> and ''A Shopping Cart Named Desire'' (Cinematic Film2Music Competition at the Sundance Film Festival).<ref>\"[http://www.cinematiccd.com/films/indexwinners.html Cinematic Film2Music Winners]\"</ref> Also in 2006, the site began to offer HD downloads of select productions. Following the success of ''Be the Man,'' New Renaissance once again collaborated with writer/director Matthew Jones on the short film ''Choices'', a drama about a teen preparing to end her unplanned pregnancy.<ref>\"[http://www.scriptwritersnetwork.org/swn/index.php?page=matthew-jones Success Story: Matthew Jones]\" The Scriptwriters Network, retrieved October 15, 2009.</ref>\n\nThe company produced its first feature film, ''The Deserted'', in 2006 and followed up that production with two serialized features for the web: ''[[Project X (web serial)|Project X]]'' and ''[[Cataclysmo and the Time Boys]]''. These two productions formed the foundation for [[WebSerials.com]] \u2014 another division of the Sikora Media Group, launched as a home for serialized web entertainment.<ref>\"[http://www.mydigitalpublication.com/publication/index.php?i=4092&m=&l=&p=135 A Renaissance in Media]\" [[Charisma (magazine)|Charisma Magazine]], May 2008.</ref> [[YouTube]] considered these early productions \"some of the best dramas the web has to offer.\"<ref>\"[http://youtube-global.blogspot.com/2007/09/dramatic-webisodes.html Dramatic Webisodes]\" [[YouTube|YouTube Blog]], September 8, 2007.</ref> WebSerials.com proved to be a major success, as one of the premiere sites for popular web series,<ref>\"[http://www.latimes.com/entertainment/la-et-channelisland15oct15-pg,0,850046.photogallery?index=la-webisode-cataclysmo Webisode primer]\" [[LA Times]], October 15, 2007.</ref><ref>\"[http://themedium.blogs.nytimes.com/2008/08/22/in-this-weeks-magazine-serial-killers/ Serial Killers]\" [[New York Times]], August 22, 2008.</ref><ref>\"[http://webserials.com/about/ About]\" [[WebSerials.com]], retrieved October 15, 2009.</ref> prompting New Renaissance to produce not only a sequel to the highly-popular ''Cataclysmo'' but also additional serials for the site.\n\nIn 2009, New Renaissance completed its groundbreaking multimedia experience ''[[The Black Dawn]]'' \u2014 a [[post-apocalyptic]], science-fiction drama that spans a [[feature film]], [[TV series]], [[web series|web serial]], [[short film]], [[comic book]], and [[videoblog]]s. The cross-platform, story-driven experience gives viewers an unprecedented level of interactivity as they unravel the mystery and follow the characters within the world of ''The Black Dawn''.<ref>\"[http://news.tubefilter.tv/2009/02/26/the-black-dawn-infects-web-with-webserials-latest/ \u2018The Black Dawn\u2019 Infects Web With WebSerials\u2019 Latest]\" [[Tubefilter]], February 26, 2009.</ref><ref>\"[http://www.tilzy.tv/the-black-dawn.htm The Black Dawn] {{Webarchive|url=https://web.archive.org/web/20090917175636/http://www.tilzy.tv/the-black-dawn.htm |date=2009-09-17 }}\" Tilzy.tv, retrieved October 15, 2009.</ref>\n\nAlso in 2009, New Renaissance sponsored the first annual [[Film Music Guild Conference]], a forum designed to connect filmmakers and composers and inspire greater community and creativity. Guests included director [[Pete Docter]] of [[Pixar|Pixar's]] ''[[Up (2009 film)|Up]]'' & ''[[Monsters, Inc.]]'' and [[John Ottman]], the editor & composer of films such as [[Superman Returns]] & [[Valkyrie (film)|Valkryie]].<ref>\"[http://www.filmmusicguild.com/sponsors Sponsors]\" Film Music Guild Conference, retrieved October 15, 2009.</ref>\n\nIn August 2010, New Renaissance Pictures launched a new [[web series|web]] [[sitcom]] called \"[[Best Laid Plans (sitcom)|Best Laid Plans]].\" The show is completely [[improvisational|improvised]] by the ensemble cast without the use of any scripts.<ref>\"[http://www.webserials.com/press/bestlaidplans/bestlaidplans-launch.html WebSerials.com Launches Unique New Unscripted Web Comedy \"Best Laid Plans\"]\" [[WebSerials.com]], August 31, 2010.</ref>\n\nIn 2016 New Renaissance Pictures produced the feature <I>Manifest Destiny: the Lewis & Clark Musical Adventure.</I> Directed by Anthony Parisi, it was a satirical musical-comedy based on an obscure YouTube series created by Kevin Abrams and Jeremy Hoffman, who reprised their roles of Lewis and Clark respectively.\n\nNew Renaissance Pictures continues to develop and produce new content for film, television, and the web.\n\n==See also==\n* [[Project X (web serial)|Project X]]\n* [[Cataclysmo and the Time Boys]]\n* [[The Black Dawn]]\n* [[Best Laid Plans (sitcom)|Best Laid Plans]]\n\n==External links==\n* [http://www.newrenaissanceonline.com/ Official site]\n* [https://www.imdb.com/company/co0164317/ New Renaissance Pictures] on the [[Internet Movie Database]]\n\n==References==\n{{Reflist}}\n\n[[Category:Film production companies of the United States]]\n", "text_old": "{{Infobox company\n|name=\n|logo= [[File:New Renaissance Pictures Logo.jpg|250px|New Renaissance Pictures Logo]]\n|type=\n|foundation= July 2005 <!--modifies \"Founded\" entry-->\n|location_city= [[La Habra, California]]\n|location_country = [[United States|U.S.]]\n|location =\n|key_people= [[Joshua Sikora]], President & Founder<br />[[Kevin Christensen]]<br />[[Anthony Parisi]]\n|area_served=\n|industry= [[Film industry|Filmmaking]]\n|products=\n|services=\n|revenue=\n|operating_income=\n|net_income=\n|num_employees=\n|parent=  [[Sikora Media Group]]\n|owner=\n|divisions=\n|subsid=\n|slogan=\n|homepage= [http://www.newrenaissanceonline.com/ www.newrenaissancepictures.com]\n|footnotes=\n|intl= <!--Enter ''yes'' to change labels to international instead of U.S. terminology-->\n}}\n\n'''New Renaissance Pictures''' is an American independent production and distribution company for [[film]], [[television]], and [[new media|the web]], established in 2005.<ref>\"[http://www.newrenaissanceonline.com/aboutus.html About Us]\" New Renaissance Pictures, retrieved October 15, 2009.</ref> Since its inception, New Renaissance Pictures has been involved with a variety of groundbreaking new media projects, including [[WebSerials.com]] and the multimedia experience ''[[The Black Dawn]]''.\n\n==History==\nNew Renaissance Pictures launched as one of the first online distributors of [[short film]]s. By 2006, the company was producing and distributing a variety of award-winning films, including ''Be the Man'' (Best African-American Film, DGA Student Film Awards),<ref>\"[http://www.dga.org/news/pr_expand.php3?479&section=news&oldsection=&oldpage= DGA Announces Winners of 12th Annual Student Filmmakers Awards]\" [[Directors Guild of America]], November 1, 2006.</ref><ref>\"[http://www.variety.com/article/VR1117953125.html?categoryid=1043&cs=1 DGA fetes student filmmakers]\" [[Variety (magazine)|Variety]], November 1, 2006.</ref> ''Wednesday'' (Jimmy Stewart Crystal Heart Award, Heartland Film Festival)<ref>\"[http://www.trulymovingpictures.org/FilmFestival/Pages/MovieDetails.aspx?MovieId=255 'Wednesday' MovieDetails]\" [[Heartland Film Festival]].</ref> and ''A Shopping Cart Named Desire'' (Cinematic Film2Music Competition at the Sundance Film Festival).<ref>\"[http://www.cinematiccd.com/films/indexwinners.html Cinematic Film2Music Winners]\"</ref> Also in 2006, the site began to offer HD downloads of select productions. Following the success of ''Be the Man,'' New Renaissance once again collaborated with writer/director Matthew Jones on the short film ''Choices'', a drama about a teen preparing to end her unplanned pregnancy.<ref>\"[http://www.scriptwritersnetwork.org/swn/index.php?page=matthew-jones Success Story: Matthew Jones]\" The Scriptwriters Network, retrieved October 15, 2009.</ref>\n\nThe company produced its first feature film, ''The Deserted'', in 2006 and followed up that production with two serialized features for the web: ''[[Project X (web serial)|Project X]]'' and ''[[Cataclysmo and the Time Boys]]''. These two productions formed the foundation for [[WebSerials.com]] \u2014 another division of the Sikora Media Group, launched as a home for serialized web entertainment.<ref>\"[http://www.mydigitalpublication.com/publication/index.php?i=4092&m=&l=&p=135 A Renaissance in Media]\" [[Charisma (magazine)|Charisma Magazine]], May 2008.</ref> [[YouTube]] considered these early productions \"some of the best dramas the web has to offer.\"<ref>\"[http://youtube-global.blogspot.com/2007/09/dramatic-webisodes.html Dramatic Webisodes]\" [[YouTube|YouTube Blog]], September 8, 2007.</ref> WebSerials.com proved to be a major success, as one of the premiere sites for popular web series,<ref>\"[http://www.latimes.com/entertainment/la-et-channelisland15oct15-pg,0,850046.photogallery?index=la-webisode-cataclysmo Webisode primer]\" [[LA Times]], October 15, 2007.</ref><ref>\"[http://themedium.blogs.nytimes.com/2008/08/22/in-this-weeks-magazine-serial-killers/ Serial Killers]\" [[New York Times]], August 22, 2008.</ref><ref>\"[http://webserials.com/about/ About]\" [[WebSerials.com]], retrieved October 15, 2009.</ref> prompting New Renaissance to produce not only a sequel to the highly-popular ''Cataclysmo'' but also additional serials for the site.\n\nIn 2009, New Renaissance completed its groundbreaking multimedia experience ''[[The Black Dawn]]'' \u2014 a [[post-apocalyptic]], science-fiction drama that spans a [[feature film]], [[TV series]], [[web series|web serial]], [[short film]], [[comic book]], and [[videoblog]]s. The cross-platform, story-driven experience gives viewers an unprecedented level of interactivity as they unravel the mystery and follow the characters within the world of ''The Black Dawn''.<ref>\"[http://news.tubefilter.tv/2009/02/26/the-black-dawn-infects-web-with-webserials-latest/ \u2018The Black Dawn\u2019 Infects Web With WebSerials\u2019 Latest]\" [[Tubefilter]], February 26, 2009.</ref><ref>\"[http://www.tilzy.tv/the-black-dawn.htm The Black Dawn] {{Webarchive|url=https://web.archive.org/web/20090917175636/http://www.tilzy.tv/the-black-dawn.htm |date=2009-09-17 }}\" Tilzy.tv, retrieved October 15, 2009.</ref>\n\nAlso in 2009, New Renaissance sponsored the first annual [[Film Music Guild Conference]], a forum designed to connect filmmakers and composers and inspire greater community and creativity. Guests included director [[Pete Docter]] of [[Pixar|Pixar's]] ''[[Up (2009 film)|Up]]'' & ''[[Monsters, Inc.]]'' and [[John Ottman]], the editor & composer of films such as [[Superman Returns]] & [[Valkyrie (film)|Valkryie]].<ref>\"[http://www.filmmusicguild.com/sponsors Sponsors]\" Film Music Guild Conference, retrieved October 15, 2009.</ref>\n\nIn August 2010, New Renaissance Pictures launched a new [[web series|web]] [[sitcom]] called \"[[Best Laid Plans (sitcom)|Best Laid Plans]].\" The show is completely [[improvisational|improvised]] by the ensemble cast without the use of any scripts.<ref>\"[http://www.webserials.com/press/bestlaidplans/bestlaidplans-launch.html WebSerials.com Launches Unique New Unscripted Web Comedy \"Best Laid Plans\"]\" [[WebSerials.com]], August 31, 2010.</ref>\n\nIn 2016 New Renaissance Pictures produced the feature <I>Manifest Destiny: the Lewis & Clark Musical Adventure.</I> Directed by Anthony Parisi, it was a satirical musical-comedy based on an obscure YouTube series created by Kevin Abrams and Jeremy Hoffman, who reprised their roles of Lewis and Clark respectively.\n\nNew Renaissance Pictures continues to develop and produce new content for film, television, and the web.\n\n==See also==\n* [[Project X (web serial)|Project X]]\n* [[Cataclysmo and the Time Boys]]\n* [[The Black Dawn]]\n* [[Best Laid Plans (sitcom)|Best Laid Plans]]\n\n==External links==\n* [http://www.newrenaissanceonline.com/ Official site]\n* [https://www.imdb.com/company/co0164317/ New Renaissance Pictures] on the [[Internet Movie Database]]\n\n==References==\n{{Reflist}}\n\n[[Category:Film production companies of the United States]]\n", "name_user": "Damianarlyn", "label": "safe", "comment": "Corrected the link to their company webpage", "url_page": "//en.wikipedia.org/wiki/New_Renaissance_Pictures"}
{"title_page": "Oranjehof", "text_new": "{{Infobox museum\n|name     = Oranjehof Dutch Connection Centre\n|image    = [[File:Welcome Wall.jpg|thumb]]\n|location = 92 Main Street, Foxton, New Zealand\n|website  = {{url|www.teawahou.com/Te-Awahou-Nieuwe-Stroom/Oranjehof-Dutch-Connection-Centre}}\n}}\n\n[[File:Bicycle handle bars with Fietsbel.jpg|thumb|Bicycle - Met Delfts Blauwe Fietsbel ]]\nThe '''Oranjehof''' '''Dutch Connection Centre''' is one of the two museums that are part of the multi-cultural, multi-purpose visitor and community hub [[Te Awahou Nieuwe Stroom]] in [[Foxton, New Zealand|Foxton]], just over an hour's drive north of [[Wellington]]. \n\nThe award-winning facility<ref>{{Cite web|url=https://www.scoop.co.nz/stories/CU1805/S00208/2018-serviceiq-new-zealand-museum-awards-winners-announced.htm%20Museums%20Aotearoa%20'Project%20Excellence'%20Award%5D|title=Museums Aotearoa Project Excellence award}}</ref> is also the home of the [https://www.teawahou.com/Te-Awahou-Nieuwe-Stroom/Piriharakeke-Generation-Inspiration-Centre Piriharakeke] museum, a library, community rooms, a gallery, a heritage room, a Council Service Centre and an [https://www.newzealand.com/us/plan/business/foxton-i-site-visitor-information-centre/ i-SITE desk].\n\nThe Oranjehof museum was created with wide support from the Dutch community in New Zealand. In addition to telling the story of the Dutch in New Zealand - it also is a centre for Dutch culture, language and [https://teara.govt.nz/en/dutch/page-3%20Dutch%20immigrants community].\n\nOranjehof is an integral part of the Te Awahou Riverside Cultural Park, which also features two Dutch-inspired cafes, and the flour-grinding windmill [http://www.foxtonwindmill.co.nz/de-molen.html De Molen].\n\nThe [https://www.teawahou.com/Te-Awahou-Nieuwe-Stroom/Oranjehof-Dutch-Connection-Centre/Oranjehof-Dutch-Connection-Trust Dutch Connection Museum Trust] collaborated in partnership with Horowhenua District Council, and the [https://www.teawahou.com/Te-Awahou-Nieuwe-Stroom/Piriharakeke-Generation-Inspiration-Centre/Te-Taitoa-Maori-o-Te-Awahou-Trust Te Taitoa M\u0101ori o Te Awahou Trust] to create the Te Awahou Nieuwe Stroom facility - the home of the Oranjehof Dutch Connection Centre.\n\n== An Unknown Story == \n[[File:Gepakt en gezakt - Dutch immigrant stories.jpg|thumb|Gepakt en gezakt - Dutch immigrant stories]]\nThe Dutch \u2013 and their children and grandchildren \u2013 helped to change New Zealand and transform into a more diverse, multi-cultural nation since the 1950s and 1960s<ref>https://uhcl.recollect.co.nz/nodes/view/25708</ref>. They arrived as the first big wave of non-English speaking immigrants, in what was then still a strongly British nation.\n\nDutch migrants were issued an \u2018Alien Pass\u2019 and told to become \u2018New Britishers\u2019. The directive from both Dutch and New Zealand Governments was to merge into mainstream society. It became the norm to ignore the culture of origin, and speak English at home.<ref>http://www.netherlandsfoundation.org.nz/our-stories/read-our-stories/tasman-s-legacy/</ref>\n\n=== Invisible Immigrants ===\n[[File:Abel Tasman - Arrival in 1642.jpg|thumb|Abel Tasman - Arrival in 1642]]\nAs a result, the Dutch became the \u2018Invisible Immigrants\u2019<ref>https://www.nzgeo.com/stories/the-invisible-immigrants/</ref>, as they integrated into mainstream society<ref>http://www.caddanz.org.nz/massey/fms/Research/ntom/Home-Abroad-A-Profile-of-the-Dutch-Diaspora-in-New-Zealand.pdf?D922BDB365A154782D05E8DF9E19906E</ref>. In a way, the Dutch migrants are missing from the pages of history. Michael King, in his Penguin \u2018History of New Zealand\u2019 tells the story of all migrant groups<ref>http://www.nzjh.auckland.ac.nz/docs/2004/NZJH_38_1_07.pdf</ref> \u2013 except the Dutch. Oranjehof is the place that addresses that omission. \n\nToday, at least one in every 40 or so New Zealanders has some Dutch heritage or connections<ref>http://www.caddanz.org.nz/massey/fms/Research/ntom/Home-Abroad-A-Profile-of-the-Dutch-Diaspora-in-New-Zealand.pdf?D922BDB365A154782D05E8DF9E19906E</ref>. These hard-working arrivals influenced the tastes of a nation \u2013 in the arts, dance, religion, food. Oranjehof tells those eye-opening stories in interactive ways, which include digital displays and hands-on games. \n\nThe history of the Dutch in Aotearoa goes all the way back to Tasman's arrival in 1642, some 127 years before Captain Cook<ref>https://en.wikipedia.org/wiki/Abel_Tasman</ref>.\n\n== Oranjehof Museum ==\n[[File:Kunst - Art and design.jpg|thumb|Kunst - Art and design]]\nOranjehof is a museum that is quintessential Dutch, with a colourful sense of humour of its own, plenty of gezelligheid, and a sense of clear Dutch design. \n\nDutch artists represented, include photographer [http://suite.co.nz/answestra Ans Westra], sculptor [http://www.gibbsfarm.org.nz/vandeneijkel.php Leon van den Eijkel]<ref>https://en.wikipedia.org/wiki/Leon_van_den_Eijkel</ref>, and ceramicists [https://www.cordys.co.nz/auctions/Z12/catalogue Anneke Borren] and [http://www.newzealandpottery.net/t3512-melis-van-der-sluis Melis van der Sluis]. Designers include fashion icon [[Doris de Pont]] and [https://collections.tepapa.govt.nz/topic/886 Frank Carpay] who did innovative work<ref>https://en.wikipedia.org/wiki/Crown_Lynn</ref> for [[Crown Lynn]] and also had a major impact on textile and graphic design<ref>https://www.art-newzealand.com/Issue109/carpay.htm</ref>.\n\n=== Dutch Connections ===\nThe story of the Dutch in New Zealand touches on many aspects of Kiwi life<ref>https://en.wikipedia.org/wiki/Frank_Carpay</ref><ref>http://www.nzfashionmuseum.org.nz/doris-de-pont</ref>. The origins of Vogel\u2019s bread, Verkerks salami, and artisan Gouda and Edam cheeses are all Dutch.  Many New Zealanders have lived in a Lockwood home, or drank coffee at [https://nzhistory.govt.nz/media/photo/interior-suzy%26%23039%3Bs-coffee-bar Suzy\u2019s Coffee Lounge] \u2013 the \u2018Queen of the Coffee Houses\u2019 in Wellington<ref>https://www.stuff.co.nz/dominion-post/news/108528916/wellington-cafe-legend-suzy-van-der-kwast-has-died-aged-80</ref>. \n\nA \u2018touch of Dutch\u2019 can be found just about anywhere in New Zealand \u2013 even in the country\u2019s name, due to the arrival of Abel Tasman and the first European encounter with the Maori<ref>https://nzhistory.govt.nz/people/abel-tasman</ref>. \n\n== The Exhibition and Collection ==\n[[File:Zand zeep soda.jpg|thumb|Keukenspul - Dutch kitchen]]\nOranjehof preserves Dutch heritage \u2013 history, treasures, art, language, identity, culture, Nederlandse dingen.\nAs the Dutch Connection Centre, it is the centrepoint for the Dutch community in New Zealand. \n\nOranjehof showcases:\n* Tasman's travels  \u2013 The first meeting of two worlds, M\u0101ori and P\u0101keh\u0101\n* The story of why so many Nederlanders ventured to Aotearoa\n* The Dutch influence on art and design - And on coffee culture, cheese making, agriculture and dairy\n* Nederlandse Taal \u2013 You can listen to Dutch language on Dutch radio\n* Traditional games - Plus dress up costumes for selfies \n\n== De Molen Windmill ==\n[[File:Molen lights.jpg|thumb|De Molen and Te Awahou front]]\nThe full size replica of a [[Netherlands|Dutch]] [[windmill]], De Molen,  was completed and opened in 2003<ref>http://www.timberdesign.org.nz/journal/case-studies/demolen-a-traditional-dutch-windmill-and-shining/</ref> and underwent some major repairs in 2018<ref>https://www.stuff.co.nz/manawatu-standard/news/102784075/landmark-foxton-windmill-de-molen-to-run-again-after-repairs</ref>.  \n\nDe Molen is the result of Netherlands-New Zealand collaboration. Running gear, millstones and sails were produced and installed by Vaags Molenwerken in Aalten, the Netherlands. The mill was built largely by volunteers, under the direction of local builder Cor Slobbe.<ref>https://www.timberdesign.org.nz/wp-content/uploads/2018/05/De-Molen-The-Wooden-Design-inside.pdf</ref> The 17th century design with wooden beams is impressive to behold, especially when the mill is creaking loudly and the parts are moving, as it grinds flour on windy days.\n\nThe fully working [https://en.wiktionary.org/wiki/stellingmolen Stellingmolen] windmill produces stone-ground [[flour]], which can be purchased inside the mill's Dutch Deli. Visitors can climb up three floors, to witness the wooden mechanical workings of the mill in action - examples of traditional Dutch 17th Century engineering. The miller sets the blades in motion on windy days, and is available for tours to explain the history of milling, or for a more casual conversation.\n\n== External links ==\n* [https://www.teawahou.com/Te-Awahou-Nieuwe-Stroom/Oranjehof-Dutch-Connection-Centre Oranjehof Museum]\n* [https://www.teawahou.com/Te-Awahou-Nieuwe-Stroom/Piriharakeke-Generation-Inspiration-Centre Piriharakeke museum]\n* [https://www.teawahou.com/Home Te Awahou Nieuwe Stroom]\n* [http://www.foxtonwindmill.co.nz/de-molen.html De Molen - In the Cultural Park]\n* [https://www.foxton.org.nz/attr-flax.html Flax Stripper Museum - In the Cultural Park]\n\n== References  ==\n{{reflist}}\n", "text_old": "{{Infobox museum\n|name     = Oranjehof Dutch Connection Centre\n|image    = [[File:Welcome Wall.jpg|thumb]]\n|location = 92 Main Street, Foxton, New Zealand\n|website  = {{url|www.teawahou.com/Te-Awahou-Nieuwe-Stroom/Oranjehof-Dutch-Connection-Centre}}\n}}\n\n[[File:Bicycle handle bars with Fietsbel.jpg|thumb|Bicycle - Met Delfts Blauwe Fietsbel ]]\nThe '''Oranjehof''' '''Dutch Connection Centre''' is one of the two museums that are part of the multi-cultural, multi-purpose visitor and community hub [[Te Awahou Nieuwe Stroom]] in [[Foxton, New Zealand|Foxton]], just over an hour's drive north of [[Wellington]]. \n\nThe award-winning facility<ref>{{Cite web|url=https://www.scoop.co.nz/stories/CU1805/S00208/2018-serviceiq-new-zealand-museum-awards-winners-announced.htm%20Museums%20Aotearoa%20'Project%20Excellence'%20Award%5D|title=Museums Aotearoa Project Excellence award}}</ref> is also the home of the [https://www.teawahou.com/Te-Awahou-Nieuwe-Stroom/Piriharakeke-Generation-Inspiration-Centre Piriharakeke] museum, a library, community rooms, a gallery, a heritage room, a Council Service Centre and an [https://www.newzealand.com/us/plan/business/foxton-i-site-visitor-information-centre/ i-SITE desk].\n\nThe Oranjehof museum was created with wide support from the Dutch community in New Zealand. In addition to telling the story of the Dutch in New Zealand - it also is a centre for Dutch culture, language and [https://teara.govt.nz/en/dutch/page-3%20Dutch%20immigrants community].\n\nOranjehof is an integral part of the Te Awahou Riverside Cultural Park, which also features two Dutch-inspired cafes, and the flour-grinding windmill [http://www.foxtonwindmill.co.nz/de-molen.html De Molen].\n\nThe [https://www.teawahou.com/Te-Awahou-Nieuwe-Stroom/Oranjehof-Dutch-Connection-Centre/Oranjehof-Dutch-Connection-Trust Dutch Connection Museum Trust] collaborated in partnership with Horowhenua District Council, and the [https://www.teawahou.com/Te-Awahou-Nieuwe-Stroom/Piriharakeke-Generation-Inspiration-Centre/Te-Taitoa-Maori-o-Te-Awahou-Trust Te Taitoa M\u0101ori o Te Awahou Trust] to create the Te Awahou Nieuwe Stroom facility - the home of the Oranjehof Dutch Connection Centre.\n\n== An Unknown Story == \n[[File:Gepakt en gezakt - Dutch immigrant stories.jpg|thumb|Gepakt en gezakt - Dutch immigrant stories]]\nThe Dutch \u2013 and their children and grandchildren \u2013 helped to change New Zealand and transform into a more diverse, multi-cultural nation since the 1950s and 1960s<ref>https://uhcl.recollect.co.nz/nodes/view/25708</ref>. They arrived as the first big wave of non-English speaking immigrants, in what was then still a strongly British nation.\n\nDutch migrants were issued an \u2018Alien Pass\u2019 and told to become \u2018New Britishers\u2019. The directive from both Dutch and New Zealand Governments was to merge into mainstream society. It became the norm to ignore the culture of origin, and speak English at home.<ref>http://www.netherlandsfoundation.org.nz/our-stories/read-our-stories/tasman-s-legacy/</ref>\n\n=== Invisible Immigrants ===\n[[File:Abel Tasman - Arrival in 1642.jpg|thumb|Abel Tasman - Arrival in 1642]]\nAs a result, the Dutch became the \u2018Invisible Immigrants\u2019<ref>https://www.nzgeo.com/stories/the-invisible-immigrants/</ref>, as they integrated into mainstream society<ref>http://www.caddanz.org.nz/massey/fms/Research/ntom/Home-Abroad-A-Profile-of-the-Dutch-Diaspora-in-New-Zealand.pdf?D922BDB365A154782D05E8DF9E19906E</ref>. In a way, the Dutch migrants are missing from the pages of history. Michael King, in his Penguin \u2018History of New Zealand\u2019 tells the story of all migrant groups<ref>http://www.nzjh.auckland.ac.nz/docs/2004/NZJH_38_1_07.pdf</ref> \u2013 except the Dutch. Oranjehof is the place that addresses that omission. \n\nToday, at least one in every 40 or so New Zealanders has some Dutch heritage or connections<ref>http://www.caddanz.org.nz/massey/fms/Research/ntom/Home-Abroad-A-Profile-of-the-Dutch-Diaspora-in-New-Zealand.pdf?D922BDB365A154782D05E8DF9E19906E</ref>. These hard-working arrivals influenced the tastes of a nation \u2013 in the arts, dance, religion, food. Oranjehof tells those eye-opening stories in interactive ways, which include digital displays and hands-on games. \n\nThe history of the Dutch in Aotearoa goes all the way back to Tasman's arrival in 1642, some 127 years before Captain Cook<ref>https://en.wikipedia.org/wiki/Abel_Tasman</ref>.\n\n== Oranjehof Museum ==\n[[File:Kunst - Art and design.jpg|thumb|Kunst - Art and design]]\nOranjehof is a museum that is quintessential Dutch, with a colourful sense of humour of its own, plenty of gezelligheid, and a sense of clear Dutch design. \n\nDutch artists represented, include photographer [http://suite.co.nz/answestra Ans Westra], sculptor [http://www.gibbsfarm.org.nz/vandeneijkel.php Leon van den Eijkel]<ref>https://en.wikipedia.org/wiki/Leon_van_den_Eijkel</ref>, and ceramicists [https://www.cordys.co.nz/auctions/Z12/catalogue Anneke Borren] and [http://www.newzealandpottery.net/t3512-melis-van-der-sluis Melis van der Sluis]. Designers include fashion icon [[Doris de Pont]] and [https://collections.tepapa.govt.nz/topic/886 Frank Carpay] who worked for Crown Lynn and also had a major impact on textile and graphic design<ref>https://www.art-newzealand.com/Issue109/carpay.htm</ref>.\n\n=== Dutch Connections ===\nThe story of the Dutch in New Zealand touches on many aspects of Kiwi life<ref>https://en.wikipedia.org/wiki/Frank_Carpay</ref><ref>http://www.nzfashionmuseum.org.nz/doris-de-pont</ref>. The origins of Vogel\u2019s bread, Verkerks salami, and artisan Gouda and Edam cheeses are all Dutch.  Many New Zealanders have lived in a Lockwood home, or drank coffee at [https://nzhistory.govt.nz/media/photo/interior-suzy%26%23039%3Bs-coffee-bar Suzy\u2019s Coffee Lounge] \u2013 the \u2018Queen of the Coffee Houses\u2019 in Wellington<ref>https://www.stuff.co.nz/dominion-post/news/108528916/wellington-cafe-legend-suzy-van-der-kwast-has-died-aged-80</ref>. \n\nA \u2018touch of Dutch\u2019 can be found just about anywhere in New Zealand \u2013 even in the country\u2019s name, due to the arrival of Abel Tasman and the first European encounter with the Maori<ref>https://nzhistory.govt.nz/people/abel-tasman</ref>. \n\n== The Exhibition and Collection ==\n[[File:Zand zeep soda.jpg|thumb|Keukenspul - Dutch kitchen]]\nOranjehof preserves Dutch heritage \u2013 history, treasures, art, language, identity, culture, Nederlandse dingen.\nAs the Dutch Connection Centre, it is the centrepoint for the Dutch community in New Zealand. \n\nOranjehof showcases:\n* Tasman's travels  \u2013 The first meeting of two worlds, M\u0101ori and P\u0101keh\u0101\n* The story of why so many Nederlanders ventured to Aotearoa\n* The Dutch influence on art and design - And on coffee culture, cheese making, agriculture and dairy\n* Nederlandse Taal \u2013 You can listen to Dutch language on Dutch radio\n* Traditional games - Plus dress up costumes for selfies \n\n== De Molen Windmill ==\n[[File:Molen lights.jpg|thumb|De Molen and Te Awahou front]]\nThe full size replica of a [[Netherlands|Dutch]] [[windmill]], De Molen,  was completed and opened in 2003<ref>http://www.timberdesign.org.nz/journal/case-studies/demolen-a-traditional-dutch-windmill-and-shining/</ref> and underwent some major repairs in 2018<ref>https://www.stuff.co.nz/manawatu-standard/news/102784075/landmark-foxton-windmill-de-molen-to-run-again-after-repairs</ref>.  \n\nDe Molen is the result of Netherlands-New Zealand collaboration. Running gear, millstones and sails were produced and installed by Vaags Molenwerken in Aalten, the Netherlands. The mill was built largely by volunteers, under the direction of local builder Cor Slobbe.<ref>https://www.timberdesign.org.nz/wp-content/uploads/2018/05/De-Molen-The-Wooden-Design-inside.pdf</ref> The 17th century design with wooden beams is impressive to behold, especially when the mill is creaking loudly and the parts are moving, as it grinds flour on windy days.\n\nThe fully working [https://en.wiktionary.org/wiki/stellingmolen Stellingmolen] windmill produces stone-ground [[flour]], which can be purchased inside the mill's Dutch Deli. Visitors can climb up three floors, to witness the wooden mechanical workings of the mill in action - examples of traditional Dutch 17th Century engineering. The miller sets the blades in motion on windy days, and is available for tours to explain the history of milling, or for a more casual conversation.\n\n== External links ==\n* [https://www.teawahou.com/Te-Awahou-Nieuwe-Stroom/Oranjehof-Dutch-Connection-Centre Oranjehof Museum]\n* [https://www.teawahou.com/Te-Awahou-Nieuwe-Stroom/Piriharakeke-Generation-Inspiration-Centre Piriharakeke museum]\n* [https://www.teawahou.com/Home Te Awahou Nieuwe Stroom]\n* [http://www.foxtonwindmill.co.nz/de-molen.html De Molen - In the Cultural Park]\n* [https://www.foxton.org.nz/attr-flax.html Flax Stripper Museum - In the Cultural Park]\n\n== References  ==\n{{reflist}}\n", "name_user": "Arjanvanderboon", "label": "safe", "comment": "", "url_page": "//en.wikipedia.org/wiki/Oranjehof"}
{"title_page": "Magniflex (cycling team)", "text_new": "{{Infobox cycling team\n| name           = Magniflex\n| image          = Magniflex cycling team 1973.jpg\n| caption        = The Magniflex team of 1973\n| code           = \n| registered     = Italy\n| founded        = {{start date|1973}}\n| disbanded      = 1987\n| generalmanager = \n| discipline     = [[Road bicycle racing|Road]]\n| status         = \n| bicycles       = \n| season         = 1973\u20131975<br>1976\u20131978<br>1979<br>1980\u20131981<br>1986\u20131987\n| oldname        = Magniflex<br>Magniflex\u2013Torpado<br>Magniflex\u2013Famcucine<br>Magniflex\u2013Olmo<br>Magniflex\u2013Centroscarpa\n| kitimage       = \n}}\n'''Magniflex''' was an Italian professional [[cycling team]] that existed from 1973 to 1981, and in 1986 and  1987.<ref>{{cite web|title=Magniflex (1973)|url=http://www.memoire-du-cyclisme.eu/pelotons/equipes.php?q=8193|language=French|publisher=M\u00e9moire du cyclisme|accessdate=6 March 2017}}</ref><ref>{{cite web|title=Magniflex - Olmo (1981)|url=http://www.memoire-du-cyclisme.eu/pelotons/equipes.php?q=8201|language=French|publisher=M\u00e9moire du cyclisme|accessdate=6 March 2017}}</ref><ref>{{cite web|title=Magniflex - Centroscarpa (1986)|url=http://www.memoire-du-cyclisme.eu/pelotons/equipes.php?q=11988|language=French|publisher=M\u00e9moire du cyclisme|accessdate=6 March 2017}}</ref><ref>{{cite web|title=Magniflex - Centroscarpa / Magniflex - Centroscarpa - Rossin \u00e0 la Coors Classic (1987)|url=http://www.memoire-du-cyclisme.eu/pelotons/equipes.php?q=11989|language=French|publisher=M\u00e9moire du cyclisme|accessdate=6 March 2017}}</ref> Its main sponsor was Italian mattress manufacturer Magniflex. The team's major victory was [[Pierino Gavazzi]]'s win of the 1980 [[Milan\u2013San Remo]].\n\n==References==\n{{reflist}}\n\n==External links==\n{{commons category-inline|Magniflex cycling team|Magniflex (cycling team)}}\n\n{{DEFAULTSORT:Magniflex (cycling team)}}\n[[Category:Cycling teams based in Italy]]\n[[Category:Defunct cycling teams based in Italy]]\n[[Category:1973 establishments in Italy]]\n[[Category:1987 disestablishments in Italy]]\n[[Category:Cycling teams established in 1973]]\n[[Category:Cycling teams disestablished in 1987]]\n\n\n{{cycling-team-stub}}\n{{Italy-sport-team-stub}}\n", "text_old": "{{Infobox cycling team\n| name           = Magniflex\n| image          = Magniflex cycling team 1973.jpg\n| caption        = The Magniflex team of 1973\n| code           = \n| registered     = Italy\n| founded        = {{start date|1973}}\n| disbanded      = 1987\n| generalmanager = \n| discipline     = [[Road bicycle racing|Road]]\n| status         = \n| bicycles       = \n| season         = 1973\u20131975<br>1976\u20131978<br>1979<br>1980\u20131981<br>1986\u20131987\n| oldname        = Magniflex<br>Magniflex\u2013Torpado<br>Magniflex\u2013Famcucine<br>Magniflex\u2013Olmo<br>Magniflex\u2013Centroscarpa\n| kitimage       = \n}}\n'''Magniflex''' was an Italian professional [[cycling team]] that existed from 1973 to 1981, and in 1986 and  1987.<ref>{{cite web|title=Magniflex (1973)|url=http://www.memoire-du-cyclisme.eu/pelotons/equipes.php?q=8193|language=French|publisher=M\u00e9moire du cyclisme|accessdate=6 March 2017}}</ref><ref>{{cite web|title=Magniflex - Olmo (1981)|url=http://www.memoire-du-cyclisme.eu/pelotons/equipes.php?q=8201|language=French|publisher=M\u00e9moire du cyclisme|accessdate=6 March 2017}}</ref><ref>{{cite web|title=Magniflex - Centroscarpa (1986)|url=http://www.memoire-du-cyclisme.eu/pelotons/equipes.php?q=11988|language=French|publisher=M\u00e9moire du cyclisme|accessdate=6 March 2017}}</ref><ref>{{cite web|title=Magniflex - Centroscarpa / Magniflex - Centroscarpa - Rossin \u00e0 la Coors Classic (1987)|url=http://www.memoire-du-cyclisme.eu/pelotons/equipes.php?q=11989|language=French|publisher=M\u00e9moire du cyclisme|accessdate=6 March 2017}}</ref> Its main sponsor was Italian mattress manufacturer Magniflex. The teams major victory was [[Pierino Gavazzi]]'s win of the 1980 [[Milan\u2013San Remo]].\n\n==References==\n{{reflist}}\n\n==External links==\n{{commons category-inline|Magniflex cycling team|Magniflex (cycling team)}}\n\n{{DEFAULTSORT:Magniflex (cycling team)}}\n[[Category:Cycling teams based in Italy]]\n[[Category:Defunct cycling teams based in Italy]]\n[[Category:1973 establishments in Italy]]\n[[Category:1987 disestablishments in Italy]]\n[[Category:Cycling teams established in 1973]]\n[[Category:Cycling teams disestablished in 1987]]\n\n\n{{cycling-team-stub}}\n{{Italy-sport-team-stub}}\n", "name_user": "John of Reading", "label": "safe", "comment": "\u2192\u200etop:Typo fixing, replaced: teams major \u2192 team's major", "url_page": "//en.wikipedia.org/wiki/Magniflex_(cycling_team)"}
{"title_page": "X86-64", "text_new": "{{short description|Type of instruction set which is a 64-bit version of the x86 instruction set}}\n{{Redirect2|AMD64|Intel 64|the Intel 64-bit architecture in Itanium chips|IA-64}}\n{{Use mdy dates|date=October 2018}}\n{{Lowercase title}}\n\n[[File:AMD Opteron 146 Venus, 2005.jpg|thumb|[[Opteron]], the first CPU to introduce the x86-64 extensions in 2003]]\n[[File:AMD_x86-64_Architecture_Programmers_Manuals.jpg|thumb|right|The five-volume set of the ''x86-64 Architecture Programmer's Guide'', as published and distributed by AMD in 2002]]\n\n'''x86-64''' (also known as '''x64''', '''x86_64''', '''AMD64''' and '''Intel 64'''<!--Only those mentioned in \"Industry naming conventions\"-->{{#tag:ref|Various names are used for the instruction set. Prior to the launch, x86-64 and x86_64 were used, while upon the release AMD named it AMD64.<ref name=\"inq-amd64\">{{cite web\n|title     = Debian AMD64 FAQ\n|url       = http://wiki.debian.org/DebianAMD64Faq\n|work      = Debian Wiki\n|accessdate= May 3, 2012 }}</ref>\nIntel initially used the names '''IA-32e''' and '''EM64T''' before finally settling on \"Intel 64\" for its implementation. Some in the industry, including [[Apple Inc.|Apple]],<ref name=\"apple-x86-64\">{{cite web\n|title     = x86-64 Code Model\n|url       = https://developer.apple.com/library/mac/#documentation/developertools/Conceptual/MachOTopics/1-Articles/x86_64_code.html\n|publisher = Apple\n|accessdate= November 23, 2012}}</ref><ref name=\"apple-x86_64-arch-manpage\">{{man|1|arch|Darwin}}</ref><ref name=\"apple-x86_64-email\">{{cite web\n  | url        = http://lists.apple.com/archives/Darwin-dev/2006/Aug/msg00095.html\n  | title      = re: Intel XNU bug report\n  | accessdate = October 5, 2006\n  | author     = Kevin Van Vechten\n  | date       = August 9, 2006\n  | work       = Darwin-dev mailing list\n  | publisher  = [[Apple Computer]]\n  | quote      = The kernel and developer tools have standardized on \"x86_64\" for the name of the Mach-O architecture\n}}</ref> use x86-64 and x86_64, while others, notably [[Sun Microsystems]]<ref name=\"solaris-x64\">{{cite web\n|title     = Solaris 10 on AMD Opteron\n|url       = http://www.oracle.com/technetwork/server-storage/solaris/overview/solaris10amdopteron-jsp-140575.html\n|publisher = Oracle\n|accessdate= December 9, 2010 }}</ref>\n(now [[Oracle Corporation]]) and [[Microsoft]],<ref name=\"ms-x64\">{{cite web\n |title        = Microsoft 64-Bit Computing\n |url          = http://www.microsoft.com/windowsserver2008/en/us/64bit-computing.aspx\n |publisher    = Microsoft\n |accessdate   = December 9, 2010\n |archive-url  = https://web.archive.org/web/20101212040212/http://www.microsoft.com/windowsserver2008/en/us/64bit-computing.aspx\n |archive-date = December 12, 2010\n |url-status     = dead\n |df           = mdy-all\n}}</ref>\nuse x64. The [[BSD]] family of OSs and several [[Linux distribution]]s<ref>{{cite web\n|title     = AMD64 Port\n|url       = http://www.debian.org/ports/amd64/\n|publisher = Debian\n|accessdate= November 23, 2012}}</ref><ref>{{cite web\n|title     = Gentoo/AMD64 Project\n|url       = http://www.gentoo.org/proj/en/base/amd64/\n|publisher = Gentoo Project\n|accessdate= May 27, 2013}}</ref>\nuse AMD64, as does Microsoft Windows internally.<ref>{{cite web|url=https://msdn.microsoft.com/en-us/library/windows/desktop/aa384274(v=vs.85).aspx|title=WOW64 Implementation Details}}</ref><ref>{{cite web|url=https://msdn.microsoft.com/en-us/library/microsoft.build.utilities.processorarchitecture.aspx|title=ProcessorArchitecture Class}}</ref>\n|group=note}}) is the [[64-bit]] version of the [[x86]] [[instruction set]]. It introduces two new modes of operation, 64-bit mode and compatibility mode, along with a new 4-level [[paging]] mode. With 64-bit mode and the new paging mode, it supports vastly larger amounts of [[virtual memory]] and [[physical memory]] than is possible on its 32-bit predecessors, allowing programs to store larger amounts of data in memory. x86-64 also expands [[general-purpose register]]s to 64-bit, as well extends the number of them from 8 (some of which had limited or fixed functionality, e.g. for stack management) to 16 (fully general), and provides numerous other enhancements. Floating point operations are supported via mandatory SSE2-like instructions, and x87/MMX style registers are generally not used (but still available even in 64-bit mode); instead, a set of 32 vector registers, 128 bits each, is used. (Each can store one or two double-precision numbers or one to four single precision numbers, or various integer formats.) In 64-bit mode, instructions are modified to support 64-bit operands and 64-bit addressing mode. The compatibility mode allows 16- and 32-bit [[user space|user applications]] to run unmodified coexisting with 64-bit applications if the 64-bit operating system supports them.<ref name=\"amd-24593\">{{cite web\n  |url        = http://support.amd.com/TechDocs/24593.pdf\n  |title      = Volume 2: System Programming\n  |author     = AMD Corporation\n  |date         = December 2016\n  |work       = AMD64 Architecture Programmer's Manual\n  |publisher  = AMD Corporation\n  |format     = PDF\n  |accessdate = March 25, 2017\n  }}</ref>{{refn|group=note|In practice, 64-bit operating systems generally do not support 16-bit applications, although modern versions of Microsoft Windows contain a limited workaround that effectively supports 16-bit [[InstallShield]] and Microsoft ACME installers by silently substituting them with 32-bit code.<ref>{{cite web|url=https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783|title=If there is no 16-bit emulation layer in 64-bit Windows, how come certain 16-bit installers are allowed to run?|author=Raymond Chen |date=October 31, 2013}}</ref>}} As the full x86 16-bit and 32-bit instruction sets remain implemented in hardware without any intervening emulation, these older [[executable]]s can run with little or no performance penalty,<ref name=\"x86-compat-perf\">{{cite web\n  |url  = ftp://ftp.software.ibm.com/software/webserver/appserv/was/64bitPerf.pdf\n  |title= IBM WebSphere Application Server 64-bit Performance Demystified\n  |page = 14\n  |quote= \"Figures 5, 6 and 7 also show the 32-bit version of WAS runs applications at full native hardware performance on the POWER and x86-64 platforms. Unlike some 64-bit processor architectures, the POWER and x86-64 hardware does not emulate 32-bit mode. Therefore applications that do not benefit from 64-bit features can run with full performance on the 32-bit version of WebSphere running on the above mentioned 64-bit platforms.\"\n  |author    = IBM Corporation\n  |date      = September 6, 2007\n  |accessdate= April 9, 2010}}</ref>\nwhile newer or modified applications can take advantage of new features of the processor design to achieve performance improvements. Also, a processor supporting x86-64 still powers on in [[real mode]] for full [[backward compatibility]], as x86 processors have done since the [[80286]].\n\nThe original specification, created by [[Advanced Micro Devices|AMD]] and released in 2000, has been implemented by AMD, [[Intel Corporation|Intel]] and [[VIA Technologies|VIA]]. The [[AMD K8]] [[microarchitecture]], in the [[Opteron]] and [[Athlon 64]] processors, was the first to implement it. This was the first significant addition to the [[x86]] architecture designed by a company other than Intel. Intel was forced to follow suit and introduced a modified [[NetBurst (microarchitecture)|NetBurst]] family which was software-compatible with AMD's specification. [[VIA Technologies]] introduced x86-64 in their VIA Isaiah architecture, with the [[VIA Nano]].\n\nThe x86-64 architecture is distinct from the Intel [[Itanium]] architecture (formerly [[IA-64]]), which is not compatible on the native instruction set level with the x86 architecture. Operating systems and applications compiled for one cannot be run on the other.\n{{TOC limit|3}}\n\n== AMD64 ==\n[[File:AMD64 Logo.svg|thumb|150px|right|AMD64 logo]]\n\n=== History ===\nAMD64 was created as an alternative to the radically different [[IA-64]] architecture, which was designed by Intel and [[Hewlett Packard]]. Originally announced in 1999<ref>{{cite press release\n| title     = AMD Discloses New Technologies At Microporcessor Forum\n| publisher = AMD\n| date      = October 5, 1999\n| url       = https://www.amd.com/us/press-releases/Pages/Press_Release_751.aspx\n| archiveurl = https://web.archive.org/web/20120308030806/http://www.amd.com/us/press-releases/Pages/Press_Release_751.aspx\n| archivedate = March 8, 2012\n| accessdate= November 9, 2010\n}}</ref> while a full specification became available in August 2000,<ref>{{cite press release\n | title     = AMD Releases x86-64 Architectural Specification; Enables Market Driven Migration to 64-Bit Computing\n | publisher = AMD\n | date      = August 10, 2000\n | url       = https://www.amd.com/us/press-releases/Pages/Press_Release_715.aspx\n | archiveurl = https://web.archive.org/web/20120308025559/http://www.amd.com/us/press-releases/Pages/Press_Release_715.aspx\n | archivedate = March 8, 2012\n | accessdate= November 9, 2010\n}}</ref> the AMD64 architecture was positioned by AMD from the beginning as an evolutionary way to add [[64-bit computing]] capabilities to the existing x86 architecture, as opposed to Intel's approach of creating an entirely new 64-bit architecture with IA-64.\n\nThe first AMD64-based processor, the [[Opteron]], was released in April 2003.\n\n=== Implementations ===\nAMD's processors implementing the AMD64 architecture include [[Opteron]], [[Athlon 64]], [[Athlon 64 X2]], [[Athlon 64 FX]], [[Athlon II]] (followed by \"X2\", \"X3\", or \"X4\" to indicate the number of cores, and XLT models), [[Turion 64]], [[Turion 64 X2]], [[Sempron]] (\"Palermo\" E6 stepping and all \"Manila\" models), [[Phenom (processor)|Phenom]] (followed by \"X3\" or \"X4\" to indicate the number of cores), [[Phenom II]] (followed by \"X2\", \"X3\", \"X4\" or \"X6\" to indicate the number of cores), [[List of AMD FX microprocessors|FX]], [[AMD Accelerated Processing Unit|Fusion/APU]] and [[Ryzen]]/[[Epyc]].\n\n=== Architectural features ===\nThe primary defining characteristic of AMD64 is the availability of 64-bit general-purpose [[processor register]]s (for example, rax and rbx), 64-bit [[Integer (computer science)|integer]] arithmetic and logical operations, and 64-bit [[Protected Virtual Address Mode|virtual addresses]]. The designers took the opportunity to make other improvements as well. Some of the most significant changes are described below.\n\n; 64-bit integer capability\n: All [[general-purpose register]]s (GPRs) are expanded from 32&nbsp;[[bit]]s to 64&nbsp;bits, and all arithmetic and logical operations, memory-to-register and register-to-memory operations, etc., can now operate directly on 64-bit integers. [[Stack (data structure)|Pushes and pops]] on the [[Stack register|stack]] default to 8-byte strides, and [[pointer (computer programming)|pointers]] are 8 bytes wide.\n; Additional registers\n: In addition to increasing the size of the general-purpose registers, the number of named general-purpose registers is increased from eight (i.e. eax, ecx, edx, ebx, esp, ebp, esi, edi) in x86 to 16 (i.e. rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15). It is therefore possible to keep more local variables in registers rather than on the stack, and to let registers hold frequently accessed constants; arguments for small and fast subroutines may also be passed in registers to a greater extent.\n\n: AMD64 still has fewer registers than many [[RISC]] [[instruction set]]s (e.g. [[PA-RISC]], [[Power ISA]], and [[MIPS architecture|MIPS]] have 32 GPRs; [[DEC Alpha|Alpha]], [[ARM architecture#64/32-bit architecture|64-bit ARM]], and [[SPARC]] have 31) or [[VLIW]]-like machines such as the [[IA-64]] (which has 128&nbsp;registers). However, an AMD64 implementation may have far more internal registers than the number of architectural registers exposed by the instruction set (see [[register renaming]]). (For example, AMD Zen cores have 168 64-bit integer and 160 128-bit vector floating point physical internal registers.)\n; Additional XMM (SSE) registers\n: Similarly, the number of 128-bit XMM<!-- don't confuse this name with MMX; MMX has no hardware registers and is mapped to the FPU stack. Here we talk about SSE (XMM) registers --> registers (used for [[Streaming SIMD Extensions|Streaming SIMD]] instructions) is also increased from 8 to 16.\n: The traditional x87 FPU register stack is not included in the register file size extension in 64-bit mode, compared with the XMM registers used by SSE2, which did get extended. The [[x87]] register stack is not a simple register file although it does allow direct access to individual registers by low cost exchange operations.\n; Larger virtual address space\n: The AMD64 architecture defines a 64-bit virtual address format, of which the low-order 48 bits are used in current implementations.<ref name=\"amd-24593\"/>{{rp|page=120|date=November 2012}} This allows up to 256&nbsp;[[Tebibyte|TiB]] (2<sup>48</sup> [[byte]]s) of virtual address space. The architecture definition allows this limit to be raised in future implementations to the full 64 bits,<ref name=\"amd-24593\"/>{{rp|page=2|date=November 2012}}{{rp|page=3|date=November 2012}}{{rp|page=13|date=November 2012}}{{rp|page=117|date=November 2012}}{{rp|page=120|date=November 2012}} extending the virtual address space to 16&nbsp;[[Exbibyte|EiB]] (2<sup>64</sup> bytes).<ref>Mauerer, W. (2010). Professional Linux kernel architecture. John Wiley & Sons.</ref> This is compared to just 4&nbsp;[[Gibibyte|GiB]] (2<sup>32</sup> bytes) for the x86.<ref name=\"intel-253668\">{{cite web\n  |url       = http://www.intel.com/Assets/PDF/manual/253668.pdf\n  |title     = Intel 64 and IA-32 Architectures Software Developer\u2019s Manual, Volume 3A: System Programming Guide, Part&nbsp;1\n  |accessdate= July 10, 2019\n  |format    = PDF\n  |pages     = 4\u20137}}</ref>\n:This means that very large files can be operated on by [[Memory-mapped file|mapping]] the entire file into the process' address space (which is often much faster than working with file read/write calls), rather than having to map regions of the file into and out of the address space.\n; Larger physical address space\n: The original implementation of the AMD64 architecture implemented 40-bit [[physical address]]es and so could address up to 1&nbsp;TiB (2<sup>40</sup> bytes) of RAM.<ref name=\"amd-24593\" />{{rp|page=24|date=November 2012}} Current implementations of the AMD64 architecture (starting from [[AMD K10|AMD 10h microarchitecture]]) <!--- it's \"10h\", as in 10 hex, not 10th as in tenth. Please see the reference named amd10h, immediately following. Please do not change this back to \"10th\" ---> extend this to 48-bit physical addresses<ref name=\"amd10h\">{{cite web|url=http://developer.amd.com/wordpress/media/2012/10/31116.pdf |title=BIOS and Kernel Developer\u2019s Guide (BKDG) For AMD Family 10h Processors |accessdate=February 27, 2016 |format=PDF |page=24 |quote=Physical address space increased to 48 bits.}}</ref> and therefore can address up to 256&nbsp;TB of RAM. The architecture permits extending this to 52 bits in the future<ref name=\"amd-24593\" />{{rp|page=24|date=November 2012}}<ref>\n{{cite web\n  |url      = http://www.amd64.org/fileadmin/user_upload/pub/64bit_Linux-Myths_and_Facts.pdf\n  |title      = Myth and facts about 64-bit Linux\n  |accessdate      = May 30, 2010\n  |date      = March 2, 2008\n  |format      = PDF\n  |page      = 7\n  |quote      = Physical address space increased to 48 bits\n  |url-status      = dead\n  |archiveurl      = https://web.archive.org/web/20101010233951/http://www.amd64.org/fileadmin/user_upload/pub/64bit_Linux-Myths_and_Facts.pdf\n  |archivedate      = October 10, 2010\n  |df      = mdy-all\n  }}</ref> (limited by the page table entry format);<ref name=\"amd-24593\" />{{rp|page=131|date=November 2012}} this would allow addressing of up to 4&nbsp;[[Pebibyte|PiB]] of RAM. For comparison, 32-bit x86 processors are limited to 64&nbsp;GB of RAM in [[Physical Address Extension]] (PAE) mode,<ref name=\"shanley-ppro\">{{cite book |title      = Pentium Pro and Pentium II System Architecture\n |edition    = Second\n |last       = Shanley\n |first      = Tom\n |isbn       = 0-201-30973-4\n |series     = PC System Architecture Series\n |year       = 1998\n |publisher  = Addison-Wesley\n |page       = [https://archive.org/details/pentiumpropentiu00shan/page/445 445]\n |url-access = registration\n |url        = https://archive.org/details/pentiumpropentiu00shan/page/445\n}}</ref> or 4&nbsp;GB of RAM without PAE mode.<ref name=\"amd-24593\" />{{rp|page=4|date=November 2012}}\n; Larger physical address space in legacy mode\n: When operating in [[legacy mode]] the AMD64 architecture supports [[Physical Address Extension]] (PAE) mode, as do most current x86 processors, but AMD64 extends PAE from 36 bits to an architectural limit of 52&nbsp;bits of physical address. Any implementation, therefore, allows the same physical address limit as under [[long mode]].<ref name=\"amd-24593\" />{{rp|page=24|date=November 2012}}\n; Instruction pointer relative data access\n: Instructions can now reference data relative to the instruction pointer (RIP register). This makes [[position independent code]], as is often used in [[Library (computing)#Shared libraries|shared libraries]] and code loaded at run time, more efficient.\n; SSE instructions\n: The original AMD64 architecture adopted Intel's [[Streaming SIMD Extensions|SSE]] and [[SSE2]] as core instructions. These instruction sets provide a vector supplement to the scalar [[x87]] FPU, for the single-precision and double-precision data types. SSE2 also offers integer vector operations, for data types ranging from 8bit to 64bit precision. This makes the vector capabilities of the architecture on par with those of the most advanced x86 processors of its time. These instructions can also be used in 32-bit mode. The proliferation of 64-bit processors has made these vector capabilities ubiquitous in home computers, allowing the improvement of the standards of 32-bit applications. The 32-bit edition of Windows 8, for example, requires the presence of SSE2 instructions.<ref>{{cite web|last=Microsoft Corporation|title=What is PAE, NX, and SSE2 and why does my PC need to support them to run Windows 8 ?|url=http://windows.microsoft.com/en-GB/windows-8/what-is-pae-nx-sse2|accessdate=March 19, 2013}}</ref> [[SSE3]] instructions and later [[Streaming SIMD Extensions]] instruction sets are not standard features of the architecture.\n; No-Execute bit\n: The No-Execute bit or [[NX bit]] (bit 63 of the page table entry) allows the operating system to specify which pages of virtual address space can contain executable code and which cannot. An attempt to execute code from a page tagged \"no execute\" will result in a memory access violation, similar to an attempt to write to a read-only page. This should make it more difficult for malicious code to take control of the system via \"[[Buffer overflow|buffer overrun]]\" or \"unchecked buffer\" attacks. A similar feature has been available on x86 processors since the [[80286]] as an attribute of [[segment descriptor]]s; however, this works only on an entire segment at a time.\n\n: [[x86 memory segmentation|Segmented addressing]] has long been considered an obsolete mode of operation, and all current PC operating systems in effect bypass it, setting all segments to a base address of zero and (in their 32-bit implementation) a size of 4&nbsp; GB. AMD was the first x86-family vendor to implement no-execute in linear addressing mode. The feature is also available in legacy mode on AMD64 processors, and recent Intel x86 processors, when PAE is used.\n; Removal of older features\n: A few \"system programming\" features of the x86 architecture were either unused or underused in modern operating systems and are either not available on AMD64 in long (64-bit and compatibility) mode, or exist only in limited form. These include segmented addressing (although the FS and GS segments are retained in vestigial form for use as extra-base pointers to operating system structures),<ref name=\"amd-24593\"/>{{rp|page=70|date=November 2012}} the [[Task State Segment|task state switch]] mechanism, and [[virtual 8086 mode]]. These features remain fully implemented in \"legacy mode\", allowing these processors to run 32-bit and 16-bit operating systems without modifications. Some instructions that proved to be rarely useful are not supported in 64-bit mode, including saving/restoring of segment registers on the stack, saving/restoring of all registers (PUSHA/POPA), decimal arithmetic, BOUND and INTO instructions, and \"far\" jumps and calls with immediate operands.\n\n=== {{Anchor|VIRTUAL-ADDRESS-SPACE}}Virtual address space details ===\n\n==== Canonical form addresses ====\n{{Multiple image\n | header    = Canonical address space implementations (diagrams not to scale)\n | width     = 150\n | direction = horizontal\n | align     = right\n | image1    = AMD64-canonical--48-bit.svg\n | caption1  = Current 48-bit implementation\n | image2    = AMD64-canonical--56-bit.svg\n | caption2  = 56-bit implementation\n | image3    = AMD64-canonical--64-bit.svg\n | caption3  = 64-bit implementation\n}}\n\nAlthough virtual addresses are 64&nbsp; bits wide in 64-bit mode, current implementations (and all chips that are known to be in the planning stages) do not allow the entire virtual address space of 2<sup>64</sup> bytes (16&nbsp; EiB) to be used.\nThis would be approximately four billion times the size of the virtual address space on 32-bit machines. Most operating systems and applications will not need such a large address space for the foreseeable future, so implementing such wide virtual addresses would simply increase the complexity and cost of address translation with no real benefit. AMD, therefore, decided that, in the first implementations of the architecture, only the least significant 48&nbsp; bits of a virtual address would actually be used in address translation ([[page table]] lookup).<ref name=\"amd-24593\"/>{{rp|page=120|date=November 2012}}\n\nIn addition, the AMD specification requires that the most significant 16 bits of any virtual address,  bits 48 through 63, must be copies of bit 47 (in a manner akin to [[sign extension]]). If this requirement is not met, the processor will raise an exception.<ref name=\"amd-24593\"/>{{rp|page=131|date=November 2012}} Addresses complying with this rule are referred to as \"canonical form.\"<ref name=\"amd-24593\"/>{{rp|page=130|date=November 2012}} Canonical form addresses run from 0 through 00007FFF'FFFFFFFF, and from FFFF8000'00000000 through FFFFFFFF'FFFFFFFF, for a total of 256&nbsp;TB of usable virtual address space. This is still 65,536 times larger than the virtual 4 GB address space of 32-bit machines.\n\nThis feature eases later scalability to true 64-bit addressing. Many operating systems (including, but not limited to, the [[Windows NT]] family) take the higher-addressed half of the address space (named [[kernel space]]) for themselves and leave the lower-addressed half ([[user space]]) for application code, user mode stacks, heaps, and other data regions.<ref name=\"win-lim-msdn\"/> The \"canonical address\" design ensures that every AMD64 compliant implementation has, in effect, two memory halves: the lower half starts at 00000000'00000000 and \"grows upwards\" as more virtual address bits become available, while the higher half is \"docked\" to the top of the address space and grows downwards. Also, enforcing the \"canonical form\" of addresses by checking the unused address bits prevents their use by the operating system in [[tagged pointer]]s as flags, privilege markers, etc., as such use could become problematic when the architecture is extended to implement more virtual address bits.\n\nThe first versions of Windows for x64 did not even use the full 256&nbsp;TB; they were restricted to just 8&nbsp;TB of user space and 8&nbsp;TB of kernel space.<ref name=\"win-lim-msdn\">{{cite web|url=http://msdn.microsoft.com/en-us/library/windows/desktop/aa366778(v=vs.85).aspx#memory_limits |title=Memory Limits for Windows Releases |website=[[MSDN]] |publisher=[[Microsoft]] |date=November 16, 2013 |accessdate=January 20, 2014}}</ref> Windows did not support the entire 48-bit address space until [[Windows&nbsp;8.1]], which was released in October 2013.<ref name=\"win-lim-msdn\"/> <!--- it would be good to include other OS's limits here. --->\n\n==== Page table structure ====\nThe 64-bit addressing mode (\"[[long mode]]\") is a superset of [[Physical Address Extension]]s (PAE); because of this, [[paging|page]] sizes may be 4&nbsp;[[Kilobyte|KB]] (2<sup>12</sup> bytes) or 2&nbsp;[[Megabyte|MB]] (2<sup>21</sup> bytes).<ref name=\"amd-24593\"/>{{rp|page=120|date=November 2012}} Long mode also supports page sizes of 1&nbsp;[[Gigabyte|GB]] (2<sup>30</sup> bytes).<ref name=\"amd-24593\"/>{{rp|page=120|date=November 2012}} Rather than the three-level [[page table]] system used by systems in PAE mode, systems running in [[long mode]] use four levels of page table: PAE's ''Page-Directory Pointer Table'' is extended from four entries to 512, and an additional ''Page-Map Level&nbsp;4 (PML4) Table'' is added, containing 512 entries in 48-bit implementations.<ref name=\"amd-24593\"/>{{rp|page=131|date=November 2012}} A full mapping hierarchy of 4&nbsp;KB pages for the whole 48-bit space would take a bit more than 512&nbsp;GB of memory (about 0.195% of the 256&nbsp;TB virtual space).\n\nIntel has implemented a scheme with a [[Intel 5-level paging|5-level page table]], which allows Intel 64 processors to support a 57-bit virtual address space.<ref>{{cite web|url=https://software.intel.com/sites/default/files/managed/2b/80/5-level_paging_white_paper.pdf|title=5-Level Paging and 5-Level EPT|publisher=Intel|date=May 2017|accessdate=June 17, 2017}}</ref> Further extensions may allow full 64-bit virtual address space and physical memory by expanding the page table entry size to 128-bit, and reduce page walks in the 5-level hierarchy by using a larger 64&nbsp;KB page allocation size that still supports 4&nbsp;KB page operations for backward compatibility. <Ref>{{cite patent | country = US | number = 9858198 | status = patent | title =  64KB page system that supports 4KB page operation | pridate = 2015-06-26 | fdate = 2015-06-26 | pubdate = 2016-12-29 | gdate = 2018-01-02 | invent1 = Larry Seiler | assign1 = Intel Corp.}} </ref>\n\n==== Operating system limits ====\nThe operating system can also limit the virtual address space. Details, where applicable, are given in the \"[[X86-64#Operating system compatibility and characteristics|Operating system compatibility and characteristics]]\" section.\n\n=== Physical address space details ===\nCurrent AMD64 processors support a physical address space of up to 2<sup>48</sup> bytes of RAM, or 256&nbsp;TB.<ref name=\"amd10h\"/> However, {{as of|2010|06|lc=1}}, there were no known x86-64 [[motherboard]]s that support 256&nbsp;TB of RAM.<ref>{{cite web\n|url       = http://www.supermicro.com/Aplus/motherboard/Opteron6100/\n|title     = Opteron 6100 Series Motherboards\n|publisher = Supermicro Corporation\n|accessdate= June 22, 2010}}</ref><ref>{{cite web\n|url       = http://www.supermicro.com/products/motherboard/Xeon1333/#1366\n|title     = Supermicro Xeon<!-- AutoEd: rm unicode ctrl char w/no win-1252 mapping, intent unknown -->Solutions\n|publisher = Supermicro Corporation\n|accessdate= June 20, 2010}}</ref><ref>{{cite web\n|url       = http://www.supermicro.com/Aplus/motherboard/Opteron8000/\n|title     = Opteron 8000 Series Motherboards\n|publisher = Supermicro Corporation\n|accessdate= June 20, 2010}}</ref><ref>{{cite web\n|url       = http://www.supermicro.com/products/motherboard/Core/index.cfm#1366\n|title     = Tyan Product Matrix\n|publisher = MiTEC International Corporation\n|accessdate= June 21, 2010}}</ref>{{failed verification|date=May 2016}}\nThe operating system may place additional limits on the amount of RAM that is usable or supported. Details on this point are given in the \"[[X86-64#Operating system compatibility and characteristics|Operating system compatibility and characteristics]]\" section of this article.\n\n=== {{Anchor|OPMODES}}Operating modes ===\nThe architecture has three primary modes of operation, long mode, legacy mode, and real mode.\n\n{| class=\"wikitable\" style=\"text-align: center;\"\n|-\n! colspan=\"2\" | Operating \n! rowspan=\"2\" | [[Operating system]]<br>required\n! rowspan=\"2\" | Type of code<br>being run\n! colspan=\"4\" | size\n|-\n! mode\n! sub-mode\n! address (default)\n! operand (default)\n! operand (typ. supported)\n! [[Register file]]\n|-\n| rowspan=\"3\"| [[Long mode|Long<br>mode]]\n| 64-bit mode\n| rowspan=\"3\"| 64-bit\n| [[Long mode|64-bit code]]\n| 64 bits\n| 32 bits\n| 8, 16, 32, or 64 bits\n| 16 registers per file\n|-\n| rowspan=\"2\"| Compatibility mode\n| [[Protected mode#The 386|32-bit code]]\n| 32 bits\n| 32 bits\n| 8, 16, or 32 bits\n| 8 registers per file\n|-\n| [[Protected mode#The 286|16-bit code]]\n| 16 bits\n| 16 bits\n| 8, 16, or 32 bits\n| 8 registers per file\n|-\n| rowspan=\"3\"| Legacy<br>mode\n| rowspan=\"2\"| [[Protected mode]]\n| 32-bit\n| [[Protected mode#The 386|32-bit code]]\n| 32 bits\n| 32 bits\n| 8, 16, or 32 bits\n| 8 registers per file\n|-\n| 16-bit protected mode\n| [[Protected mode#The 286|16-bit code]]\n| 16 bits\n| 16 bits\n| 8, 16, or 32 bits<ref group=\"m\" name=\"opsize-prefix\"/>\n| 8 registers per file\n|-\n| [[Virtual 8086 mode]]\n| 16-bit or 32-bit protected mode\n| some of [[Real mode|real mode code]]\n| 16 bits\n| 16 bits\n| 8, 16, or 32 bits<ref group=\"m\" name=\"opsize-prefix\"/>\n| 8 registers per file\n|-\n| rowspan=\"2\"| Real<br>mode\n| [[Unreal mode]]\n| n/a\n| [[Real mode|real mode code]]\n| 16, 20, or 32 bits\n| 16 bits\n| 8, 16, or 32 bits<ref group=\"m\" name=\"opsize-prefix\"/>\n| 8 registers per file\n|-\n| [[Real mode]]\n| n/a\n| [[Real mode|real mode code]]\n| 16, 20, or 21<ref>https://en.wikipedia.org/wiki/A20_line</ref> bits\n| 16 bits\n| 8, 16, or 32 bits<ref group=\"m\" name=\"opsize-prefix\"/>\n| 8 registers per file\n|}\n{{reflist|group=m|refs=<ref name=\"opsize-prefix\">Note that 16-bit code written for the 80286 and below does not use 32-bit operand instructions. Code written for the 80386 and above can use the operand-size override prefix (0x66). Normally this prefix is used by protected and long mode code for the purpose of using 16-bit operands, as that code would be running in a code segment with a default operand size of 32 bits. In real mode, the default operand size is 16 bits, so the 0x66 prefix is interpreted differently, changing operand size to 32 bits.</ref>}}\n[[File:AMD64StateDiagram.svg|thumb|400px|State diagram of the x86-64 operating modes]]\n\n==== Long mode ====\n{{Main|Long mode}}\n\nLong mode is the architecture's intended primary mode of operation; it is a combination of the processor's native 64-bit mode and a combined 32-bit and 16-bit compatibility mode. It is used by 64-bit operating systems. Under a 64-bit operating system, 64-bit programs run under 64-bit mode, and 32-bit and 16-bit protected mode applications (that do not need to use either real mode or virtual 8086 mode in order to execute at any time) run under compatibility mode. Real-mode programs and programs that use virtual 8086 mode at any time cannot be run in long mode unless those modes are emulated in software.<ref name=\"amd-24593\"/>{{rp|11}} However, such programs may be started from an operating system running in long mode on processors supporting [[VT-x]] or [[AMD-V]] by creating a virtual processor running in the desired mode.\n\nSince the basic [[instruction set]] is the same, there is almost no performance penalty for executing protected mode x86 code. This is unlike Intel's [[IA-64]], where differences in the underlying instruction set mean that running 32-bit code must be done either in emulation of x86 (making the process slower) or with a dedicated x86 coprocessor. However, on the x86-64 platform, many x86 applications could benefit from a 64-bit [[recompile]], due to the additional registers in 64-bit code and guaranteed SSE2-based FPU support, which a [[compiler]] can use for optimization. However, applications that regularly handle integers wider than 32 bits, such as cryptographic algorithms, will need a rewrite of the code handling the huge integers in order to take advantage of the 64-bit registers.\n\n==== Legacy mode ====\nLegacy mode is the mode used by 32-bit or 16-bit \"protected mode\" operating systems.<ref name=\"intel-xed-1\">{{cite web |last1=Charney |first1=Mark |url=https://intelxed.github.io/ref-manual/xed-machine-mode-enum_8h.html |website=Xed |publisher=Intel Corporation |title=Xed Machine Mode Definitions |accessdate=16 June 2019}}</ref> In this mode, the processor acts like an older x86 processor, and only 16-bit and 32-bit code can be executed. Legacy mode allows for a maximum of 32&nbsp;bit virtual addressing which limits the virtual address space to 4&nbsp;GB.<ref name=\"amd-24593\"/>{{rp|page=14|date=November 2012}}{{rp|page=24|date=November 2012}}{{rp|page=118|date=November 2012}} 64-bit programs cannot be run from legacy mode.\n\n==== Real mode ====\n[[Real mode]] is the initial mode of operation when the processor is initialized. It is backwards compatible with the original [[8086]] and [[8088]] processors. Real mode is primarily used today by operating system bootloaders, which are required by the architecture to configure [[#Physical_address_space_details|virtual memory details]] before transitioning to higher modes.\n\n== Intel 64 ==\n'''Intel&nbsp;64''' is Intel's implementation of x86-64, used and implemented in various processors made by Intel.\n\n=== History ===\nHistorically, AMD has developed and produced processors with instruction sets patterned after Intel's original designs, but with x86-64, roles were reversed: Intel found itself in the position of adopting the [[instruction set architecture|ISA]] which AMD had created as an extension to Intel's own x86 processor line.\n\nIntel's project was originally [[codename]]d ''Yamhill'' (after the [[Yamhill River]] in Oregon's Willamette Valley).{{Citation needed|date=August 2017}} After several years of denying its existence, Intel announced at the February 2004 [[Intel Developer Forum|IDF]] that the project was indeed underway. Intel's chairman at the time, [[Craig Barrett (chief executive)|Craig Barrett]], admitted that this was one of their worst-kept secrets.<ref>{{cite web |url=https://www.theinquirer.net/inquirer/news/1042795/craig-barrett-confirms-bit-address-extensions-xeon-and-prescott |title=Craig Barrett confirms 64 bit address extensions for Xeon. And Prescott. |publisher=The Inquirer |date=February 17, 2004}}</ref><ref>[http://www.internetnews.com/ent-news/article.php/3518781 \"A Roundup of 64-Bit Computing\", from internetnews.com]</ref>\n\nIntel's name for this instruction set has changed several times. The name used at the IDF was ''CT'' (presumably{{Original research inline|date=August 2017}} for ''Clackamas Technology'', another codename from an [[Clackamas River|Oregon river]]); within weeks they began referring to it as ''IA-32e'' (for [[IA-32]] extensions) and in March 2004 unveiled the \"official\" name ''EM64T'' (Extended Memory 64 Technology). In late 2006 Intel began instead using the name ''Intel&nbsp;64'' for its implementation, paralleling AMD's use of the name AMD64.<ref>{{cite web\n| url        = http://www.intel.com/technology/intel64/index.htm\n| title      = Intel&nbsp;64 Architecture\n| accessdate = June 29, 2007\n| publisher  = [[Intel]]\n}}</ref>\n\nThe first processor to implement Intel&nbsp;64 was the multi-socket processor [[Xeon]] code-named ''[[Xeon#Nocona and Irwindale|Nocona]]'' in June 2004. In contrast, the initial Prescott chips (February 2004) did not enable this feature. Intel subsequently began selling Intel&nbsp;64-enabled Pentium 4s using the E0 revision of the Prescott core, being sold on the OEM market as the Pentium 4, model F. The E0 revision also adds eXecute Disable (XD) (Intel's name for the [[NX bit]]) to Intel&nbsp;64, and has been included in then current Xeon code-named ''Irwindale''. Intel's official launch of Intel&nbsp;64 (under the name EM64T at that time) in mainstream desktop processors was the N0 stepping Prescott-2M.\n\nThe first Intel [[mobile processor]] implementing Intel&nbsp;64 is the [[Merom (microprocessor)|Merom]] version of the [[Core 2]] processor, which was released on July 27, 2006. None of Intel's earlier notebook CPUs ([[Core Duo]], [[Pentium M]], [[Celeron M]], [[Pentium 4|Mobile Pentium 4]]) implement Intel&nbsp;64.\n\n=== Implementations ===\nIntel's processors implementing the Intel64 architecture include the [[Pentium 4]] F-series/5x1 series, 506, and 516, [[Celeron D]] models 3x1, 3x6, 355, 347, 352, 360, and 365 and all later [[Celeron]]s, all models of [[Xeon]] since \"[[Xeon#Nocona and Irwindale|Nocona]]\", all models of [[Pentium Dual-Core]] processors since \"[[Merom (microprocessor)#Merom-2M|Merom-2M]]\", the [[Intel Atom|Atom]] 230, 330, D410, D425, D510, D525, N450, N455, N470, N475, N550, N570, N2600 and N2800, all versions of the [[Pentium D]], [[Pentium Extreme Edition]], [[Core&nbsp;2]], [[Core&nbsp;i9]], [[Core&nbsp;i7]], [[Core&nbsp;i5]], and [[Core&nbsp;i3]] processors, and the [[Xeon Phi]] 7200 series processors.\n\n== VIA's x86-64 implementation ==\n[[VIA Technologies]] introduced their first implementation of the x86-64 architecture in 2008 after five years of development by its CPU division, [[Centaur Technology]].<ref>{{cite web\n|title      = VIA to launch new processor architecture in 1Q08\n|publisher  = [[DigiTimes]]\n|url        = http://www.digitimes.com/news/a20070725PD206.html\n|accessdate = July 25, 2007\n|format     = subscription required}}</ref>\nCodenamed \"Isaiah\", the 64-bit architecture was unveiled on January 24, 2008,<ref>{{cite web\n|title      = Isaiah revealed: VIA's new low-power architecture\n|publisher  = Ars Technica\n|url        = https://arstechnica.com/articles/paedia/cpu/via-cpu-isaiah.ars\n|accessdate = January 24, 2008\n|first      = Jon\n|last       = Stokes\n|date       = January 23, 2008}}</ref> and launched on May 29 under the [[VIA Nano]] brand name.<ref>{{cite press release\n|title      = VIA Launches VIA Nano Processor Family\n|publisher  = [[VIA Technologies|VIA]]\n|url        = http://www.viatech.com/en/2008/05/via-launches-via-nano-processor-family/\n|accessdate = May 25, 2017\n|date       = May 29, 2008}}</ref>\n\nThe processor supports a number of VIA-specific x86 extensions designed to boost efficiency in low-power appliances.\nIt is expected that the Isaiah architecture will be twice as fast in integer performance and four times as fast in [[floating-point]] performance as the previous-generation [[VIA Esther]] at an equivalent [[clock speed]]. Power consumption is also expected to be on par with the previous-generation VIA CPUs, with [[thermal design power]] ranging from 5&nbsp;W to 25&nbsp;W.<ref>{{cite web\n |publisher   = [[VIA Technologies|VIA]]\n |url         = http://www.via.com.tw/en/downloads/presentations/processors/pb_via-isaiah_080124.pdf\n |title       = VIA Isaiah Architecture Introduction\n |format      = PDF\n |accessdate  = July 31, 2013\n |date        = January 23, 2008\n |url-status     = dead\n |archiveurl  = https://web.archive.org/web/20080907181213/http://www.via.com.tw/en/downloads/presentations/processors/pb_via-isaiah_080124.pdf\n |archivedate = September 7, 2008\n |df          = mdy-all\n}}</ref>\nBeing a completely new design, the Isaiah architecture was built with support for features like the x86-64 instruction set and [[x86 virtualization]] which were unavailable on its predecessors, the [[VIA C7]] line, while retaining their encryption extensions.\n\n== Differences between AMD64 and Intel 64 ==\nAlthough nearly identical, there are some differences between the two instruction sets in the semantics of a few seldom used machine instructions (or situations), which are mainly used for [[system programming]].<ref name=trcscott>{{cite web |last= Wasson |first= Scott |title= 64-bit computing in theory and practice |url= http://techreport.com/articles.x/8131/1 |work= The Tech Report |publisher= The Tech Report |accessdate= March 22, 2011}}</ref> Compilers generally produce [[executable]]s (i.e. [[machine code]]) that avoid any differences, at least for ordinary [[application software|application programs]]. This is therefore of interest mainly to developers of compilers, operating systems and similar, which must deal with individual and special system instructions.\n\n=== Recent implementations ===\n* Intel&nbsp;64's [[find first set|<code>BSF</code>]] and [[find first set|<code>BSR</code>]] instructions act differently than AMD64's when the source is zero and the operand size is 32&nbsp;bits. The processor sets the zero flag and leaves the upper 32&nbsp;bits of the destination undefined.\n* AMD64 requires a different microcode update format and control MSRs (model-specific registers) while Intel&nbsp;64 implements [[microcode]] update unchanged from their 32-bit only processors.\n* Intel&nbsp;64 lacks some MSRs that are considered architectural in AMD64. These include <code>SYSCFG</code>, <code>TOP_MEM</code>, and <code>TOP_MEM2</code>.\n* Intel&nbsp;64 allows <code>SYSCALL</code>/<code>SYSRET</code> only in 64-bit mode (not in compatibility mode),<ref>{{cite web|url=http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf|title=Intel 64 and IA-32 Architectures Software Developer\u2019s Manual Volume 2 (2A, 2B & 2C): Instruction Set Reference, A-Z|pages=4\u2013397|publisher=Intel|date=September 2013|accessdate=January 21, 2014}}</ref> and allows <code>SYSENTER</code>/<code>SYSEXIT</code> in both modes.<ref>{{cite web|url=http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf|title=Intel 64 and IA-32 Architectures Software Developer\u2019s Manual Volume 2 (2A, 2B & 2C): Instruction Set Reference, A-Z|pages=4\u2013400|publisher=Intel|date=September 2013|accessdate=January 21, 2014}}</ref> AMD64 lacks <code>SYSENTER</code>/<code>SYSEXIT</code> in both sub-modes of [[long mode]].<ref name=\"amd-24593\"/>{{rp|33}}\n* In 64-bit mode, near branches with the 66H (operand size override) prefix behave differently. Intel&nbsp;64 ignores this prefix: the instruction has 32-bit sign extended offset, and instruction pointer is not truncated. AMD64 uses 16-bit offset field in the instruction, and clears the top 48&nbsp;bits of instruction pointer.\n* AMD processors raise a floating point Invalid Exception when performing an <code>FLD</code> or <code>FSTP</code> of an 80-bit signalling NaN, while Intel processors do not.\n* Intel&nbsp;64 lacks the ability to save and restore a reduced (and thus faster) version of the [[floating-point]] state (involving the <code>FXSAVE</code> and <code>FXRSTOR</code> instructions).\n* AMD processors ever since [[Opteron]] Rev. E and [[Athlon 64]] Rev. D have reintroduced limited support for segmentation, via the Long Mode Segment Limit Enable (LMSLE) bit, to ease [[x86 virtualization#64-bit|virtualization]] of 64-bit guests.<ref>{{cite web |url= http://www.pagetable.com/?p=25 |title= How retiring segmentation in AMD64 long mode broke VMware |publisher= Pagetable.com |date= November 9, 2006 |accessdate= May 2, 2010}}</ref><ref>{{cite web |url= http://download3.vmware.com/vmworld/2005/pac346.pdf |title= VMware and CPU Virtualization Technology |format= PDF |publisher= VMware |date= |accessdate= September 8, 2010}}</ref>\n* When returning to a non-canonical address using <code>SYSRET</code>, AMD64 processors execute the general protection fault handler in privilege level 3,<ref>{{cite web|url=https://support.amd.com/TechDocs/24594.pdf|title=AMD64 Architecture Programmer\u2019s Manual Volume 3: General-Purpose and System Instructions|page=419|publisher=AMD|date=May 2018|accessdate=August 2, 2018}}</ref> while on Intel&nbsp;64 processors it is executed in privilege level 0.<ref>{{cite web|url=http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf|title=Intel 64 and IA-32 Architectures Software Developer\u2019s Manual Volume 2 (2A, 2B & 2C): Instruction Set Reference, A-Z|pages=4\u2013412|publisher=Intel|date=September 2014|accessdate=December 28, 2014}}</ref>\n\n=== Older implementations ===\n* Early AMD64 processors (typically on Socket 939 and 940) lacked the <code>CMPXCHG16B</code> instruction, which is an extension of the <code>CMPXCHG8B</code> instruction present on most post-[[80486]] processors. Similar to <code>CMPXCHG8B</code>, <code>CMPXCHG16B</code> allows for [[atomic operation]]s on octa-words (128-bit values). This is useful for parallel algorithms that use [[compare and swap]] on data larger than the size of a pointer, common in [[lock-free and wait-free algorithms]]. Without <code>CMPXCHG16B</code> one must use workarounds, such as a [[critical section]] or alternative lock-free approaches.<ref>{{cite web|url=http://www.research.ibm.com/people/m/michael/disc-2004.pdf|title=Practical Lock-Free and Wait-Free LL/SC/VL Implementations Using 64-Bit CAS|author=Maged M. Michael|publisher=IBM|accessdate=January 21, 2014}}</ref> Its absence also prevents 64-bit [[Microsoft Windows|Windows]] prior to Windows 8.1 from having a [[user-mode]] address space larger than 8&nbsp;terabytes.<ref>{{cite web|url=https://blogs.msdn.microsoft.com/oldnewthing/20040817-00/?p=38153#comment-204583|title=Why is the virtual address space 4GB anyway?|website=The Old New Thing|author=darwou|date=August 20, 2004|publisher=Microsoft}}</ref> The 64-bit version of [[Windows 8.1]] requires the instruction.<ref  name=\"CPUinsts8.1\">{{cite web\n|url=http://windows.microsoft.com/en-us/windows-8/system-requirements\n|title=System Requirements\u2014Windows 8.1\n|quote=To install a 64-bit OS on a 64-bit PC, your processor needs to support CMPXCHG16b, PrefetchW, and LAHF/SAHF.\n|accessdate=April 27, 2014\n}}</ref>\n* Early AMD64 and Intel&nbsp;64 CPUs lacked <code>LAHF</code> and <code>SAHF</code> instructions in 64-bit mode. AMD introduced these instructions (also in 64-bit mode) with their Athlon&nbsp;64, Opteron and Turion&nbsp;64 revision&nbsp;D processors in March 2005<ref>[http://support.amd.com/us/Processor_TechDocs/25759.pdf \"Revision Guide for AMD Athlon&nbsp;64 and AMD Opteron Processors\", from AMD]</ref><ref>[http://www.theinquirer.net/inquirer/news/1021373/amd-turion-64-pictured-up-and-running \"AMD Turion&nbsp;64 pictured up and running\", from The Inquirer]</ref><ref>[http://www.theinquirer.net/inquirer/news/1042931/athlon-64-revision-e-wont-work-on-some-nforce-34--boards \"Athlon&nbsp;64 revision&nbsp;E won't work on some Nforce 3/4 boards\", from The Inquirer]</ref> while Intel introduced the instructions with the Pentium&nbsp;4&nbsp;G1 stepping in December 2005. The 64-bit version of Windows 8.1 requires this feature.<ref name=\"CPUinsts8.1\"/>\n* Early Intel CPUs with Intel&nbsp;64 also lack the [[NX bit]] of the AMD64 architecture. This feature is required by all versions of Windows 8.x.\n* Early Intel&nbsp;64 implementations ([[Pentium 4#Prescott|Prescott]] and [[Pentium 4#Cedar Mill|Cedar Mill]]) only allowed access to 64&nbsp;GB of physical memory while original AMD64 implementations allowed access to 1&nbsp;TB of physical memory. Recent AMD64 implementations provide 256&nbsp;TB of physical address space (and AMD plans an expansion to 4&nbsp;PB),{{Citation needed|date=October 2010}} while some Intel&nbsp;64 implementations could address up to 64&nbsp;TB.<ref>\"Intel 64 architecture increases the linear address space for software to 64 bits and supports physical address space up to 46 bits.\" on page Vol. 1 2-21 of [http://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-manual-325462.html Intel 64 and IA-32 Architectures Software Developer\u2019s Manual September 2014]</ref> Physical memory capacities of this size are appropriate for large-scale applications (such as large databases), and high-performance computing (centrally oriented applications and scientific computing).\n* Also, a processor supporting x86-64 still powers on in real mode for full backward compatibility.\n\n== Adoption ==\n[[File:Processor families in TOP500 supercomputers.svg|thumb|350x350px|An area chart showing the representation of different families of microprocessors in the TOP500 supercomputer ranking list, from 1992 to 2014.<ref>{{cite web|url=http://www.top500.org/statistics |title=Statistics &#124; TOP500 Supercomputer Sites |publisher=Top500.org |date= |accessdate=March 22, 2014}}</ref>]]\n\nIn [[supercomputer]]s tracked by [[TOP500]], the appearance of 64-bit extensions for the x86 architecture enabled 64-bit x86 processors by AMD and Intel (light olive with circles, and red with circles on the diagram provided in this section, respectively) to replace most RISC processor architectures previously used in such systems (including [[PA-RISC]], [[SPARC]], [[DEC Alpha|Alpha]] and others), as well as 32-bit x86 (green with dots and purple with dots on the diagram), even though Intel itself initially tried unsuccessfully to replace x86 with a new incompatible 64-bit architecture in the [[Itanium]] processor.\n\n{{As of|2018}}, the main non-x86 CPU architecture which is still used in supercomputing is the [[Power ISA]] used by [[IBM POWER microprocessors]] (blue with a diamond pattern on the diagram), with SPARC being far behind in numbers on TOP500, while in 2011 a [[Fujitsu]] [[SPARC64 VIIIfx]] based supercomputer without co-processors reached number one (while it since dropped off top-10). The first ARM-based supercomputer appeared on the list in 2018<ref>{{Cite web|url=https://www.top500.org/statistics/sublist/|title=Sublist Generator {{!}} TOP500 Supercomputer Sites|website=www.top500.org|access-date=2018-12-06}}</ref> and, in recent years, non-CPU architecture co-processors ([[General-purpose computing on graphics processing units|GPGPU]]) have also played a big role in performance. Intel's [[Xeon Phi#Knights Corner|Xeon Phi \"Knights Corner\"]] coprocessors, which implement a subset of x86-64 with some vector extensions,<ref>{{cite web|url=https://software.intel.com/sites/default/files/forum/278102/327364001en.pdf|title=Intel\u00ae Xeon PhiTM Coprocessor Instruction Set Architecture Reference Manual|at=section B.2 Intel Xeon Phi coprocessor 64 bit Mode Limitations|publisher=Intel|date=September 7, 2012}}</ref> are also used, along with x86-64 processors, in the [[Tianhe-2]] supercomputer.<ref>{{cite web|url=http://newsroom.intel.com/community/intel_newsroom/blog/2013/06/17/intel-powers-the-worlds-fastest-supercomputer-reveals-new-and-future-high-performance-computing-technologies|title=Intel Powers the World's Fastest Supercomputer, Reveals New and Future High Performance Computing Technologies|accessdate=June 21, 2013}}</ref>\n\n== Operating system compatibility and characteristics ==\nThe following operating systems and releases support the x86-64 architecture in [[long mode]].\n\n=== BSD ===\n\n==== DragonFly BSD ====\nPreliminary infrastructure work was started in February 2004 for a x86-64 port.<ref name=dfly-amd64-prelim>{{cite web |url= http://leaf.dragonflybsd.org/mailarchive/commits/2004-02/msg00011.html |title= cvs commit: src/sys/amd64/amd64 genassym.c src/sys/amd64/include asm.h atomic.h bootinfo.h coredump.h cpufunc.h elf.h endian.h exec.h float.h fpu.h frame.h globaldata.h ieeefp.h limits.h lock.h md_var.h param.h pcb.h pcb_ext.h pmap.h proc.h profile.h psl.h ... |accessdate= May 3, 2009}}</ref> This development later stalled. Development started again during July 2007<ref name=dfly-amd64-noah>{{cite web |url= http://leaf.dragonflybsd.org/mailarchive/users/2007-07/msg00016.html |title= AMD64 port |accessdate= May 3, 2009}}</ref>\nand continued during [[Google Summer of Code]] 2008 and SoC 2009.<ref name=dfly-amd64-soc2008>{{cite web |url= http://www.dragonflybsd.org/docs/developer/GoogleSoC2008/ |title= DragonFlyBSD: GoogleSoC2008 |accessdate= May 3, 2009}}</ref><ref name=dfly-amd64-soc2009>{{cite web |url= http://leaf.dragonflybsd.org/mailarchive/users/2009-04/msg00091.html |title= Summer of Code accepted students |accessdate= May 3, 2009}}</ref> The first official release to contain x86-64 support was version 2.4.<ref name=dflyamd64-release>{{cite web |url= http://www.dragonflybsd.org/release24/ |title= DragonFlyBSD: release24 |accessdate= May 3, 2009}}</ref>\n\n==== FreeBSD ====\n[[FreeBSD]] first added x86-64 support under the name \"amd64\" as an experimental architecture in 5.1-RELEASE in June 2003. It was included as a standard distribution architecture as of 5.2-RELEASE in January 2004. Since then, FreeBSD has designated it as a Tier&nbsp;1 platform. The 6.0-RELEASE version cleaned up some quirks with running x86 executables under amd64, and most drivers work just as they do on the x86 architecture. Work is currently being done to integrate more fully the x86 [[application binary interface]] (ABI), in the same manner as the Linux 32-bit ABI compatibility currently works.\n\n==== NetBSD ====\nx86-64 architecture support was first committed to the [[NetBSD]] source tree on June 19, 2001. As of NetBSD&nbsp;2.0, released on December 9, 2004, ''NetBSD/amd64'' is a fully integrated and supported port.\n32-bit code is still supported in 64-bit mode, with a netbsd-32 kernel compatibility layer for 32-bit syscalls. The NX bit is used to provide non-executable stack and heap with per-page granularity (segment granularity being used on 32-bit x86).\n\n==== OpenBSD ====\n[[OpenBSD]] has supported AMD64 since OpenBSD 3.5, released on May 1, 2004. Complete in-tree implementation of AMD64 support was achieved prior to the hardware's initial release because AMD had loaned several machines for the project's [[hackathon]] that year. OpenBSD developers have taken to the platform because of its support for the [[NX bit]], which allowed for an easy implementation of the [[W^X]] feature.\n\nThe code for the AMD64 port of OpenBSD also runs on Intel 64 processors which contains cloned use of the AMD64 extensions, but since Intel left out the page table NX bit in early Intel 64 processors, there is no W^X capability on those Intel CPUs; later Intel 64 processors added the NX bit under the name \"XD bit\". [[Symmetric multiprocessing]] (SMP) works on OpenBSD's AMD64 port, starting with release 3.6 on November 1, 2004.\n\n=== DOS ===\nIt is possible to enter [[long mode]] under [[DOS]] without a DOS extender,<ref>{{Cite web |url=http://www.turboirc.com/asm |title=Tutorial for entering protected and long mode from DOS |access-date=July 6, 2008 |archive-url=https://web.archive.org/web/20170222181811/http://www.turboirc.com/asm/ |archive-date=February 22, 2017 |url-status=dead |df=mdy-all }}</ref> but the user must return to real mode in order to call BIOS or DOS interrupts.\n\nIt may also be possible to enter [[long mode]] with a [[DOS extender]] similar to [[DOS/4GW]], but more complex since x86-64 lacks [[virtual 8086 mode]]. DOS itself is not aware of that, and no benefits should be expected unless running DOS in an emulation with an adequate virtualization driver backend, for example: the mass storage interface.\n\n=== Linux ===\n{{See also|Comparison of Linux distributions#Instruction set architecture support}}\n\n[[Linux]] was the first operating system kernel to run the x86-64 architecture in [[long mode]], starting with the 2.4 version in 2001 (preceding the hardware's availability).<ref>{{cite web |title=Porting Linux to x86-64 |author=Andi Kleen |url=http://www.x86-64.org/pipermail/announce/2001-June/000020.html |date=June 26, 2001 |quote=Status: The kernel, compiler, tool chain work. The kernel boots and work on simulator and is used for porting of userland and running programs |url-status=dead |archiveurl=https://web.archive.org/web/20100910014057/http://www.x86-64.org/pipermail/announce/2001-June/000020.html |archivedate=September 10, 2010 |df=mdy }}</ref><ref>{{cite web |url= http://www.halobates.de/ |title= Andi Kleen's Page |author= Andi Kleen |quote= This was the original paper describing the Linux x86-64 kernel port back when x86-64 was only available on simulators.}}</ref> Linux also provides backward compatibility for running 32-bit executables. This permits programs to be recompiled into long mode while retaining the use of 32-bit programs. Several Linux distributions currently ship with x86-64-native kernels and [[userland (computing)|userlands]]. Some, such as [[Arch Linux]],<ref>{{cite web |url= https://wiki.archlinux.org/index.php/Arch64_FAQ |title= Arch64 FAQ |date= April 23, 2012 |quote= You can either use the multilib packages or a i686 chroot.}}</ref> [[SUSE Linux|SUSE]], [[Mandriva Linux|Mandriva]], and [[Debian]] allow users to install a set of 32-bit components and libraries when installing off a 64-bit DVD, thus allowing most existing 32-bit applications to run alongside the 64-bit OS. Other distributions, such as [[Fedora (operating system)|Fedora]], [[Slackware]] and [[Ubuntu (operating system)|Ubuntu]], are available in one version compiled for a 32-bit architecture and another compiled for a 64-bit architecture. Fedora and [[Red Hat Enterprise Linux]] allow concurrent installation of all userland components in both 32 and 64-bit versions on a 64-bit system.\n\n[[x32 ABI]] (Application Binary Interface), introduced in Linux 3.4, allows programs compiled for the x32 ABI to run in the 64-bit mode of x86-64 while only using 32-bit pointers and data fields.<ref name=\"x32ABIHOnline\">{{cite news\n |url = http://www.h-online.com/open/features/Kernel-Log-x32-ABI-gets-around-64-bit-drawbacks-1342061.html\n |archiveurl = https://web.archive.org/web/20111028081253/http://www.h-online.com/open/features/Kernel-Log-x32-ABI-gets-around-64-bit-drawbacks-1342061.html\n |archivedate = October 28, 2011\n |title = Kernel Log: x32 ABI gets around 64-bit drawbacks\n |publisher = www.h-online.com\n |author = Thorsten Leemhuis\n |date = September 13, 2011\n |accessdate = November 1, 2011\n |url-status = dead\n |df = mdy-all\n }}</ref><ref name=\"x32ABILinuxPlumbers\">{{cite news\n |url       = http://linuxplumbersconf.org/2011/ocw/sessions/531\n |title     = x32 - a native 32-bit ABI for x86-64\n |publisher = linuxplumbersconf.org\n |accessdate= November 1, 2011}}</ref><ref name=\"x32ABIDevelopmentGroup\">{{cite news\n |url       = http://sites.google.com/site/x32abi/\n |title     = x32-abi\n |publisher = Google Sites\n |accessdate= November 1, 2011}}</ref>\nThough this limits the program to a virtual address space of 4&nbsp;GB it also decreases the memory footprint of the program and in some cases can allow it to run faster.<ref name=\"x32ABIHOnline\"/><ref name=\"x32ABILinuxPlumbers\"/><ref name=\"x32ABIDevelopmentGroup\"/>\n\n64-bit Linux allows up to 128&nbsp;[[Terabyte|TB]] of virtual address space for individual processes, and can address approximately 64&nbsp;TB of physical memory, subject to processor and system limitations.<ref name=\"DebianAMD64\">{{cite news\n |url       = http://www.debian.org/ports/amd64/\n |title     = AMD64 Port\n |publisher = debian.org\n |accessdate= October 29, 2011}}</ref>\n\n=== macOS ===\nMac OS X 10.4.7 and higher versions of [[Mac OS X Tiger|Mac OS X 10.4]] run 64-bit command-line tools using the POSIX and math libraries on 64-bit Intel-based machines, just as all versions of Mac OS X 10.4 and 10.5 run them on 64-bit PowerPC machines. No other libraries or frameworks work with 64-bit applications in Mac OS X 10.4.<ref>{{cite web\n |url        = https://developer.apple.com/releasenotes/DeveloperTools/RN-CompilerTools/index.html\n |archiveurl = https://web.archive.org/web/20090422045532/http://developer.apple.com/releasenotes/DeveloperTools/RN-CompilerTools/index.html\n |archivedate= April 22, 2009\n |title      = Apple \u2013 Mac OS X Xcode 2.4 Release Notes: Compiler Tools\n |publisher  = [[Apple Inc.]]\n |date       = April 11, 2007\n |accessdate = November 19, 2012}}</ref>\nThe kernel, and all kernel extensions, are 32-bit only.\n\n[[Mac OS X Leopard|Mac OS X 10.5]] supports 64-bit GUI applications using [[Cocoa (API)|Cocoa]], [[Quartz (graphics layer)|Quartz]], [[OpenGL]], and [[X11]] on 64-bit Intel-based machines, as well as on 64-bit [[PowerPC]] machines.<ref>{{cite web\n |url        = https://www.apple.com/macosx/technology/64bit.html\n |archiveurl = https://web.archive.org/web/20090112055017/http://www.apple.com/macosx/technology/64bit.html\n |archivedate= January 12, 2009\n |title      = Apple \u2013 Mac OS X Leopard \u2013 Technology - 64-bit\n |publisher  = Apple Inc.\n |accessdate = November 19, 2012}}</ref>\nAll non-GUI libraries and frameworks also support 64-bit applications on those platforms. The kernel, and all kernel extensions, are 32-bit only.\n\n[[Mac OS X Snow Leopard|Mac OS X 10.6]] is the first version of [[macOS]] that supports a 64-bit [[Kernel (computing)|kernel]]. However, not all 64-bit computers can run the 64-bit kernel, and not all 64-bit computers that can run the 64-bit kernel will do so by default.<ref>{{cite web\n |title      = Mac OS X v10.6: Macs that use the 64-bit kernel\n |url        = http://support.apple.com/kb/HT3770\n |publisher  = Apple Inc.\n |accessdate = November 29, 2012}}</ref>\nThe 64-bit kernel, like the 32-bit kernel, supports 32-bit applications; both kernels also support 64-bit applications. 32-bit applications have a virtual address space limit of 4&nbsp;GB under either kernel.<ref name=\"arstechnicaMacOSX64bit\">{{cite web\n |url        = https://arstechnica.com/apple/reviews/2009/08/mac-os-x-10-6.ars/5\n |title      = Mac OS X 10.6 Snow Leopard: the Ars Technica review\n |publisher  = Ars Technica LLC\n |author     = John Siracusa\n |accessdate = June 20, 2010}}</ref><ref name=\"Apple64Bit\">{{cite web\n |url        = https://www.apple.com/macosx/technology/#sixtyfourbit\n |archiveurl = https://web.archive.org/web/20110328170107/http://www.apple.com/macosx/technology/#sixtyfourbit\n |archivedate= March 28, 2011\n |title      = Mac OS X Technology\n |publisher  = Apple Inc.\n |accessdate = November 19, 2012}}</ref>\n\n[[OS X Mountain Lion|OS X 10.8]] includes only the 64-bit kernel, but continues to support 32-bit applications.\n\n[[macOS Catalina|macOS 10.15]] includes only the 64-bit kernel and no longer supports 32-bit applications.\n\nThe 64-bit kernel does not support 32-bit [[loadable kernel module|kernel extensions]], and the 32-bit kernel does not support 64-bit kernel extensions.\n\nmacOS uses the [[universal binary]] format to package 32- and 64-bit versions of application and library code into a single file; the most appropriate version is automatically selected at load time. In Mac OS X 10.6, the universal binary format is also used for the kernel and for those kernel extensions that support both 32-bit and 64-bit kernels.\n\n=== Solaris ===\n{{see also|illumos}}\n[[Solaris (operating system)|Solaris]] 10 and later releases support the x86-64 architecture.\n\nFor Solaris 10, just as with the [[SPARC]] architecture, there is only one operating system image, which contains a 32-bit kernel and a 64-bit kernel; this is labeled as the \"x64/x86\" DVD-ROM image. The default behavior is to boot a 64-bit kernel, allowing both 64-bit and existing or new 32-bit executables to be run. A 32-bit kernel can also be manually selected, in which case only 32-bit executables will run. The <code>isainfo</code> command can be used to determine if a system is running a 64-bit kernel.\n\nFor Solaris 11, only the 64-bit kernel is provided. However, the 64-bit kernel supports both 32- and 64-bit executables, libraries, and system calls.\n\n=== Windows ===\nx64 editions of Microsoft Windows client and server\u2014[[Windows XP Professional x64 Edition]] and [[Windows Server 2003]] x64 Edition\u2014were released in March 2005.<ref>{{Cite web|url=http://news.microsoft.com/2005/04/25/microsoft-raises-the-speed-limit-with-the-availability-of-64-bit-editions-of-windows-server-2003-and-windows-xp-professional/#sm.0000kw91cdgntf2kwp82ed9a9yn4e|title=Microsoft Raises the Speed Limit with the Availability of 64-Bit Editions of Windows Server 2003 and Windows XP Professional {{!}} News Center|website=news.microsoft.com|access-date=August 14, 2016}}</ref> Internally they are actually the same build (5.2.3790.1830 SP1),<ref>{{Cite web|url=https://support.microsoft.com/en-gb/kb/888733|title=A description of the x64-based versions of Windows Server 2003 and of Windows XP Professional x64 Edition|last=|first=|date=|website=Microsoft Support|publisher=|access-date=August 14, 2016}}</ref><ref>{{Cite web|url=https://www.microsoft.com/en-us/download/details.aspx?id=3725|title=Windows Server 2003 SP1 Administration Tools Pack|website=Microsoft Download Center|access-date=August 14, 2016|archive-url=https://web.archive.org/web/20160827033240/http://www.microsoft.com/en-us/download/details.aspx?id=3725|archive-date=August 27, 2016|url-status=dead|df=mdy-all}}</ref> as they share the same source base and operating system binaries, so even system updates are released in unified packages, much in the manner as Windows 2000 Professional and Server editions for x86. [[Windows Vista]], which also has many different editions, was released in January 2007. [[Windows&nbsp;7]] was released in July 2009. [[Windows Server 2008 R2]] was sold in only x64 and Itanium editions; later versions of Windows Server only offer an x64 edition.\n\nVersions of Windows for x64 prior to Windows 8.1 and Windows Server 2012 R2 offer the following:\n* 8&nbsp;TB of virtual address space per process, accessible from both user mode and kernel mode, referred to as the user mode address space. An x64 program can use all of this, subject to backing store limits on the system, and provided it is linked with the \"large address aware\" option.<ref name=\"VSdocLAA\">{{cite web\n |url        = http://msdn.microsoft.com/en-us/library/wz223b1z(VS.80).aspx\n |title      = /LARGEADDRESSAWARE (Handle Large Addresses)\n |quote      = The /LARGEADDRESSAWARE option tells the linker that the application can handle addresses larger than 2&nbsp;gigabytes.\n |work       = Visual Studio 2005 Documentation \u2013 Visual C++ \u2013 Linker Options\n |publisher  = Microsoft\n |accessdate = June 19, 2010\n}}</ref> This is a 4096-fold increase over the default 2&nbsp;GB user-mode virtual address space offered by 32-bit Windows.<ref name=\"Pietrek64BitWindowsProgramming\">{{cite web\n |url        = http://msdn.microsoft.com/en-us/magazine/cc300794.aspx\n |title      = Everything You Need To Know To Start Programming 64-Bit Windows Systems\n |publisher  = Microsoft\n |author     = [[Matt Pietrek]]\n |date       = May 2006\n |accessdate = May 24, 2010\n}}</ref><ref name=\"MicrosoftMoveTox64\">{{cite web\n |url        = https://technet.microsoft.com/en-us/magazine/2006.01.insidemscom.aspx\n |title      = Making the Move to x64\n |publisher  = Microsoft\n |author     = Chris St. Amand\n |date       = January 2006\n |accessdate = May 24, 2010\n}}</ref>\n* 8&nbsp;TB of kernel mode virtual address space for the operating system.<ref name=\"Pietrek64BitWindowsProgramming\"/> As with the user mode address space, this is a 4096-fold increase over 32-bit Windows versions. The increased space primarily benefits the file system cache and kernel mode \"heaps\" (non-paged pool and paged pool). Windows only uses a total of 16&nbsp;TB out of the 256&nbsp;TB implemented by the processors because early AMD64 processors lacked a <code>CMPXCHG16B</code> instruction.<ref>{{cite web\n |title      = Behind Windows x86-64\u2019s 44-bit Virtual Memory Addressing Limit\n |url        = http://www.alex-ionescu.com/?p=50\n |accessdate = July 2, 2009\n}}</ref>\n\nUnder Windows 8.1 and Windows Server 2012 R2, both user mode and kernel mode virtual address spaces have been extended to 128&nbsp;TB.<ref name=\"win-lim-msdn\"/> These versions of Windows will not install on processors that lack the <code>CMPXCHG16B</code> instruction.\n\nThe following additional characteristics apply to all x64 versions of Windows:\n\n* Ability to run existing 32-bit applications (<code>.exe</code> programs) and dynamic link libraries (<code>.dll</code>s) using [[WoW64]] if WoW64 is supported on that version. Furthermore, a 32-bit program, if it was linked with the \"large address aware\" option,<ref name=\"VSdocLAA\"/> can use up to 4&nbsp;GB of virtual address space in 64-bit Windows, instead of the default 2&nbsp;GB (optional 3&nbsp;GB with <code>/3GB</code> boot option and \"large address aware\" link option) offered by 32-bit Windows.<ref name=\"64-bitProgrammingGameDevelopers\">{{cite web\n |url       = http://msdn.microsoft.com/en-us/library/ee418798(VS.85).aspx#Porting_to_64bit\n |title     = 64-bit programming for Game Developers\n |accessdate= August 21, 2013\n}}</ref> Unlike the use of the <code>/3GB</code> boot option on x86, this does not reduce the kernel mode virtual address space available to the operating system. 32-bit applications can, therefore, benefit from running on x64 Windows even if they are not recompiled for x86-64.\n* Both 32- and 64-bit applications, if not linked with \"large address aware,\" are limited to 2&nbsp;GB of virtual address space.\n* Ability to use up to 128&nbsp;GB (Windows XP/Vista), 192&nbsp;GB (Windows&nbsp;7), 512&nbsp;GB (Windows&nbsp;8), 1&nbsp;TB (Windows Server 2003), 2&nbsp;TB (Windows Server 2008/Windows 10), 4&nbsp;TB (Windows Server 2012), or 24&nbsp;TB (Windows Server 2016/2019) of physical random access memory (RAM).<ref>{{cite web\n |url        = http://msdn.microsoft.com/en-us/library/aa366778(VS.85).aspx\n |title      = Memory Limits for Windows Releases\n |publisher  = Microsoft\n |accessdate = February 20, 2013}}</ref>\n* [[LLP64]] data model: \"int\" and \"long\" types are 32&nbsp;bits wide, long long is 64&nbsp;bits, while pointers and types derived from pointers are 64&nbsp;bits wide.\n* Kernel mode device drivers must be 64-bit versions; there is no way to run 32-bit kernel mode executables within the 64-bit operating system. User mode device drivers can be either 32-bit or 64-bit.\n* 16-bit Windows (Win16) and DOS applications will not run on x86-64 versions of Windows due to the removal of the [[virtual DOS machine]] subsystem (NTVDM) which relied upon the ability to use virtual 8086 mode. Virtual 8086 mode cannot be entered while running in long mode.\n* Full implementation of the [[NX bit|NX]] (No Execute) page protection feature. This is also implemented on recent 32-bit versions of Windows when they are started in PAE mode.\n* Instead of FS segment descriptor on x86 versions of the [[Windows NT]] family, GS segment descriptor is used to point to two operating system defined structures: Thread Information Block (NT_TIB) in user mode and Processor Control Region (KPCR) in kernel mode. Thus, for example, in user mode <code>GS:0</code> is the address of the first member of the Thread Information Block. Maintaining this convention made the x86-64 port easier, but required AMD to retain the function of the FS and GS segments in long mode \u2013 even though segmented addressing ''per se'' is not really used by any modern operating system.<ref name=\"Pietrek64BitWindowsProgramming\"/>\n* Early reports claimed that the operating system scheduler would not save and restore the x87 FPU machine state across thread context switches. Observed behavior shows that this is not the case: the x87 state is saved and restored, except for kernel mode-only threads (a limitation that exists in the 32-bit version as well). The most recent documentation available from Microsoft states that the x87/MMX/3DNow! instructions may be used in long mode, but that they are deprecated and may cause compatibility problems in the future.<ref name=\"64-bitProgrammingGameDevelopers\"/>\n<!--- is there a way to use quotes with named refs?\n |quote=The x87, MMX, and 3DNow! instruction sets are deprecated in 64-bit modes.--->\n* Some components like [[Microsoft Jet Database Engine]] and [[Data Access Objects]] will not be ported to 64-bit architectures such as x86-64 and IA-64.<ref>[http://msdn2.microsoft.com/en-us/library/aa384190.aspx Microsoft Developer Network \u2013 General Porting Guidelines (64-bit Windows Programming)]</ref><ref>[http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnmdac/html/data_mdacroadmap.asp Microsoft Developer Network \u2013 Data Access Road Map]{{dead link|date=July 2016 |bot=InternetArchiveBot |fix-attempted=yes }}</ref>\n* [[Microsoft Visual Studio]] can compile [[native code|native applications]] to target either the x86-64 architecture, which can run only on 64-bit Microsoft Windows, or the [[IA-32]] architecture, which can run as a 32-bit application on 32-bit Microsoft Windows or 64-bit Microsoft Windows in [[WoW64]] emulation mode. [[Managed code|Managed applications]] can be compiled either in IA-32, x86-64 or AnyCPU modes. Software created in the first two modes behave like their IA-32 or x86-64 native code counterparts respectively; When using the AnyCPU mode, however, applications in 32-bit versions of Microsoft Windows run as 32-bit applications, while they run as a 64-bit application in 64-bit editions of Microsoft Windows.\n\n== Video game consoles ==\nBoth [[PlayStation 4]] and [[Xbox One]] and their successors incorporate AMD x86-64 processors, based on the [[Jaguar (microarchitecture)|Jaguar]] [[microarchitecture]].<ref name=XboxOneMay2013Anandtechcomparison>{{cite news |title= The Xbox&nbsp;One: Hardware Analysis & Comparison to PlayStation&nbsp;4 |author= Anand Lal Shimpi |publisher= Anandtech |url= http://www.anandtech.com/show/6972/xbox-one-hardware-compared-to-playstation-4/2 |date= May 21, 2013 |accessdate= May 22, 2013}}</ref><ref name=XboxOneMay2013SpecGameinformer>{{cite web |url= http://www.gameinformer.com/b/news/archive/2013/05/21/the-tech-spec-test-xbox-one-vs-playstation-4.aspx |title= The Tech Spec Test: Xbox&nbsp;One Vs. PlayStation&nbsp;4 |publisher= Game Informer |date= May 21, 2013 |accessdate= May 22, 2013}}</ref> Firmware and games are written in x86-64 code; no legacy x86 code is involved.\n\n== Industry naming conventions ==\nSince AMD64 and Intel 64 are substantially similar, many software and hardware products use one vendor-neutral term to indicate their compatibility with both implementations. AMD's original designation for this processor architecture, \"x86-64\", is still sometimes used for this purpose,<ref name=\"apple-x86-64\"/> as is the variant \"x86_64\".<ref name=\"apple-x86_64-arch-manpage\"/><ref name=\"apple-x86_64-email\"/> Other companies, such as [[Microsoft]]<ref name=\"ms-x64\"/> and [[Sun Microsystems]]/[[Oracle Corporation]],<ref name=\"solaris-x64\"/> use the contraction \"x64\" in marketing material.\n\nThe term [[IA-64]] refers to the [[Itanium]] processor, and should not be confused with x86-64, as it is a completely different instruction set.\n\nMany operating systems and products, especially those that introduced x86-64 support prior to Intel's entry into the market, use the term \"AMD64\" or \"amd64\" to refer to both AMD64 and Intel 64.\n* '''amd64'''\n** Most [[BSD]] systems such as [[FreeBSD]], [[MidnightBSD]], [[NetBSD]] and [[OpenBSD]] refer to both AMD64 and Intel 64 under the architecture name \"amd64\".\n** Some [[Linux distribution]]s such as [[Debian]], [[Ubuntu (operating system)|Ubuntu]], [[Gentoo Linux]] refer to both AMD64 and Intel 64 under the architecture name \"amd64\".\n** [[Microsoft Windows]]'s x64 versions use the AMD64 moniker internally to designate various components which use or are compatible with this architecture. For example, the [[environment variable]] PROCESSOR_ARCHITECTURE is assigned the value \"AMD64\" as opposed to \"x86\" in 32-bit versions, and the system directory on a Windows x64 Edition installation CD-ROM is named \"AMD64\", in contrast to \"i386\" in 32-bit versions.<ref>[http://msdn.microsoft.com/en-us/library/microsoft.build.utilities.processorarchitecture_fields.aspx ProcessorArchitecture Fields]</ref>\n** Sun's [[Solaris (operating system)|Solaris]]' ''isalist'' command identifies both AMD64- and Intel 64-based systems as \"amd64\".\n** [[Java Development Kit]] (JDK): the name \"amd64\" is used in directory names containing x86-64 files.\n* '''x86_64'''\n** The [[Linux kernel]]<ref>{{cite web | url = http://lxr.linux.no/#linux+v3.7.8/arch/x86/configs/x86_64_defconfig | title = An example file from Linux 3.7.8 kernel source tree displaying the usage of the term x86_64 | accessdate = February 17, 2013 | url-status = dead | archiveurl = https://web.archive.org/web/20050923210216/http://lxr.linux.no/#linux+v3.7.8/arch/x86/configs/x86_64_defconfig | archivedate = September 23, 2005 | df = mdy-all }}</ref> and the [[GNU Compiler Collection]] refers to 64-bit architecture as \"x86_64\".\n** Some Linux distributions, such as [[Fedora (operating system)|Fedora]], [[openSUSE]], [[Arch Linux]], [[Gentoo Linux]] refer to this 64-bit architecture as \"x86_64\".\n** Apple [[macOS]] refers to 64-bit architecture as \"x86-64\" or \"x86_64\", as seen in the Terminal command <code>arch</code><ref name=\"apple-x86_64-arch-manpage\"/> and in their developer documentation.<ref name=\"apple-x86-64\"/><ref name=\"apple-x86_64-email\"/>\n** Breaking with most other BSD systems, [[DragonFly BSD]] refers to 64-bit architecture as \"x86_64\".\n** [[Haiku (operating system)|Haiku]] refers to 64-bit architecture as \"x86_64\".\n\n== Licensing ==\nx86-64/AMD64 was solely developed by AMD. AMD holds patents on techniques used in AMD64;<ref>{{patent|US|6877084}}</ref><ref>{{patent|US|6889312}}</ref><ref>{{patent|US|6732258}}</ref> those patents must be licensed from AMD in order to implement AMD64. Intel entered into a cross-licensing agreement with AMD, licensing to AMD their patents on existing x86 techniques, and licensing from AMD their patents on techniques used in x86-64.<ref>{{cite web\n |url=http://contracts.corporate.findlaw.com/agreements/amd/intel.license.2001.01.01.html \n |title=Patent Cross License Agreement Between AMD and Intel \n |accessdate=August 23, 2009 \n |date=January 1, 2001 \n |url-status=dead \n |archiveurl=https://web.archive.org/web/20070621084244/http://contracts.corporate.findlaw.com/agreements/amd/intel.license.2001.01.01.html \n |archivedate=June 21, 2007 \n}}</ref> In 2009, AMD and Intel settled several lawsuits and cross-licensing disagreements, extending their cross-licensing agreements.<ref>{{cite web |url = https://www.sec.gov/Archives/edgar/data/2488/000119312509236705/dex101.htm |title = AMD Intel Settlement Agreement}}</ref><ref>{{cite web |url= http://news.cnet.com/8301-1001_3-10396188-92.html |publisher= CNET |author= Stephen Shankland and Jonathan E. Skillings |title= Intel to pay AMD $1.25 billion in antitrust settlement |date= November 12, 2009 |accessdate= April 24, 2012}}</ref><ref>{{cite web|last1=Smith|first1=Ryan|title=AMD and Intel Settle Their Differences: AMD Gets To Go Fabless|url=http://www.anandtech.com/show/2873|website=AnandTech|archiveurl=https://web.archive.org/web/20100513042947/http://www.anandtech.com/show/2873|archivedate=May 13, 2010|date=November 12, 2009}}</ref>\n\n== See also ==\n* [[AMD Generic Encapsulated Software Architecture]] (AGESA)\n\n==Notes ==\n{{reflist|group=note}}\n\n== References==\n{{reflist|30em}}\n\n== External links ==\n* [https://developer.amd.com/resources/developer-guides-manuals/ AMD Developer Guides, Manuals & ISA Documents]\n* [http://www.stanford.edu/class/ee380/Abstracts/O00927.html x86-64: Extending the x86 architecture to 64-bits] \u2013 technical talk by the architect of AMD64 ([https://web.archive.org/web/20100813052749/http://stanford-online.stanford.edu/courses/ee380/000927-ee380-100.asx video archive]), and [http://www.stanford.edu/class/ee380/Abstracts/040107.html second talk by the same speaker] ([https://web.archive.org/web/20100813100133/http://stanford-online.stanford.edu/courses/ee380/040107-ee380-100.asx video archive])\n* [https://web.archive.org/web/20060623073619/http://www.xbitlabs.com/news/other/display/20041227094638.html AMD's \"Enhanced Virus Protection\"]\n* [https://www.theregister.co.uk/2005/08/23/intel_fixes_em64t/ Intel tweaks EM64T for full AMD64 compatibility]\n* [http://www.extremetech.com/extreme/56018-analyst-intel-reverseengineered-amd64 Analyst: Intel Reverse-Engineered AMD64]\n* [http://marc.info/?l=linux-kernel&m=107766481408468&w=2 Early report of differences between Intel IA32e and AMD64]\n* [ftp://gcc.gnu.org/pub/gcc/summit/2003/Porting%20to%2064%20bit.pdf Porting to 64-bit GNU/Linux Systems], by Andreas Jaeger from [[GCC Summit]] 2003. An excellent paper explaining almost all practical aspects for a transition from 32-bit to 64-bit.\n* [http://www.intel.com/technology/intel64/index.htm Intel 64 Architecture]\n* [https://web.archive.org/web/20110403005033/http://software.intel.com/en-us/articles/all-about-64-bits/ Intel Software Network: \"64 bits\"]\n* [https://web.archive.org/web/20170222181811/http://www.turboirc.com/asm/ TurboIRC.COM tutorials, including examples of how to of enter protected and long mode the raw way from DOS]\n* [https://web.archive.org/web/20100123010204/http://software.intel.com/en-us/articles/seven-steps-of-migrating-a-program-to-a-64-bit-system/ Seven Steps of Migrating a Program to a 64-bit System]\n* [http://msdn.microsoft.com/en-us/library/aa366778%28VS.85%29.aspx Memory Limits for Windows Releases]\n\n<!-- [[Category:Advanced Micro Devices products]] category is added to the AMD64 redirect page instead of here, in order to make that name appear in the category listing rather than \"X86-64\"; -->\n[[Category:Computer-related introductions in 2003]]\n[[Category:X86 architecture]]\n[[Category:64-bit computers]]\n[[Category:Advanced Micro Devices technologies]]\n\n{{AMD technology}}\n", "text_old": "{{short description|Type of instruction set which is a 64-bit version of the x86 instruction set}}\n{{Redirect2|AMD64|Intel 64|the Intel 64-bit architecture in Itanium chips|IA-64}}\n{{Use mdy dates|date=October 2018}}\n{{Lowercase title}}\n\n[[File:AMD Opteron 146 Venus, 2005.jpg|thumb|[[Opteron]], the first CPU to introduce the x86-64 extensions in 2003]]\n[[File:AMD_x86-64_Architecture_Programmers_Manuals.jpg|thumb|right|The five-volume set of the ''x86-64 Architecture Programmer's Guide'', as published and distributed by AMD in 2002]]\n\n'''x86-64''' (also known as '''x64''', '''x86_64''', '''AMD64''' and '''Intel 64'''<!--Only those mentioned in \"Industry naming conventions\"-->{{#tag:ref|Various names are used for the instruction set. Prior to the launch, x86-64 and x86_64 were used, while upon the release AMD named it AMD64.<ref name=\"inq-amd64\">{{cite web\n|title     = Debian AMD64 FAQ\n|url       = http://wiki.debian.org/DebianAMD64Faq\n|work      = Debian Wiki\n|accessdate= May 3, 2012 }}</ref>\nIntel initially used the names '''IA-32e''' and '''EM64T''' before finally settling on \"Intel 64\" for its implementation. Some in the industry, including [[Apple Inc.|Apple]],<ref name=\"apple-x86-64\">{{cite web\n|title     = x86-64 Code Model\n|url       = https://developer.apple.com/library/mac/#documentation/developertools/Conceptual/MachOTopics/1-Articles/x86_64_code.html\n|publisher = Apple\n|accessdate= November 23, 2012}}</ref><ref name=\"apple-x86_64-arch-manpage\">{{man|1|arch|Darwin}}</ref><ref name=\"apple-x86_64-email\">{{cite web\n  | url        = http://lists.apple.com/archives/Darwin-dev/2006/Aug/msg00095.html\n  | title      = re: Intel XNU bug report\n  | accessdate = October 5, 2006\n  | author     = Kevin Van Vechten\n  | date       = August 9, 2006\n  | work       = Darwin-dev mailing list\n  | publisher  = [[Apple Computer]]\n  | quote      = The kernel and developer tools have standardized on \"x86_64\" for the name of the Mach-O architecture\n}}</ref> use x86-64 and x86_64, while others, notably [[Sun Microsystems]]<ref name=\"solaris-x64\">{{cite web\n|title     = Solaris 10 on AMD Opteron\n|url       = http://www.oracle.com/technetwork/server-storage/solaris/overview/solaris10amdopteron-jsp-140575.html\n|publisher = Oracle\n|accessdate= December 9, 2010 }}</ref>\n(now [[Oracle Corporation]]) and [[Microsoft]],<ref name=\"ms-x64\">{{cite web\n |title        = Microsoft 64-Bit Computing\n |url          = http://www.microsoft.com/windowsserver2008/en/us/64bit-computing.aspx\n |publisher    = Microsoft\n |accessdate   = December 9, 2010\n |archive-url  = https://web.archive.org/web/20101212040212/http://www.microsoft.com/windowsserver2008/en/us/64bit-computing.aspx\n |archive-date = December 12, 2010\n |url-status     = dead\n |df           = mdy-all\n}}</ref>\nuse x64. The [[BSD]] family of OSs and several [[Linux distribution]]s<ref>{{cite web\n|title     = AMD64 Port\n|url       = http://www.debian.org/ports/amd64/\n|publisher = Debian\n|accessdate= November 23, 2012}}</ref><ref>{{cite web\n|title     = Gentoo/AMD64 Project\n|url       = http://www.gentoo.org/proj/en/base/amd64/\n|publisher = Gentoo Project\n|accessdate= May 27, 2013}}</ref>\nuse AMD64, as does Microsoft Windows internally.<ref>{{cite web|url=https://msdn.microsoft.com/en-us/library/windows/desktop/aa384274(v=vs.85).aspx|title=WOW64 Implementation Details}}</ref><ref>{{cite web|url=https://msdn.microsoft.com/en-us/library/microsoft.build.utilities.processorarchitecture.aspx|title=ProcessorArchitecture Class}}</ref>\n|group=note}}) is the [[64-bit]] version of the [[x86]] [[instruction set]]. It introduces two new modes of operation, 64-bit mode and compatibility mode, along with a new 4-level [[paging]] mode. With 64-bit mode and the new paging mode, it supports vastly larger amounts of [[virtual memory]] and [[physical memory]] than is possible on its 32-bit predecessors, allowing programs to store larger amounts of data in memory. x86-64 also expands [[general-purpose register]]s to 64-bit, as well extends the number of them from 8 (some of which had limited or fixed functionality, e.g. for stack management) to 16 (fully general), and provides numerous other enhancements. Floating point operations are supported via mandatory SSE2-like instructions, and x87/MMX style registers are generally not used (but still available even in 64-bit mode); instead, a set of 32 vector registers, 128 bits each, is used. (Each can store one or two double-precision numbers or one to four single precision numbers, or various integer formats.) In 64-bit mode, instructions are modified to support 64-bit operands and 64-bit addressing mode. The compatibility mode allows 16- and 32-bit [[user space|user applications]] to run unmodified coexisting with 64-bit applications if the 64-bit operating system supports them.<ref name=\"amd-24593\">{{cite web\n  |url        = http://support.amd.com/TechDocs/24593.pdf\n  |title      = Volume 2: System Programming\n  |author     = AMD Corporation\n  |date         = December 2016\n  |work       = AMD64 Architecture Programmer's Manual\n  |publisher  = AMD Corporation\n  |format     = PDF\n  |accessdate = March 25, 2017\n  }}</ref>{{refn|group=note|In practice, 64-bit operating systems generally do not support 16-bit applications, although modern versions of Microsoft Windows contain a limited workaround that effectively supports 16-bit [[InstallShield]] and Microsoft ACME installers by silently substituting them with 32-bit code.<ref>{{cite web|url=https://blogs.msdn.microsoft.com/oldnewthing/20131031-00/?p=2783|title=If there is no 16-bit emulation layer in 64-bit Windows, how come certain 16-bit installers are allowed to run?|author=Raymond Chen |date=October 31, 2013}}</ref>}} As the full x86 16-bit and 32-bit instruction sets remain implemented in hardware without any intervening emulation, these older [[executable]]s can run with little or no performance penalty,<ref name=\"x86-compat-perf\">{{cite web\n  |url  = ftp://ftp.software.ibm.com/software/webserver/appserv/was/64bitPerf.pdf\n  |title= IBM WebSphere Application Server 64-bit Performance Demystified\n  |page = 14\n  |quote= \"Figures 5, 6 and 7 also show the 32-bit version of WAS runs applications at full native hardware performance on the POWER and x86-64 platforms. Unlike some 64-bit processor architectures, the POWER and x86-64 hardware does not emulate 32-bit mode. Therefore applications that do not benefit from 64-bit features can run with full performance on the 32-bit version of WebSphere running on the above mentioned 64-bit platforms.\"\n  |author    = IBM Corporation\n  |date      = September 6, 2007\n  |accessdate= April 9, 2010}}</ref>\nwhile newer or modified applications can take advantage of new features of the processor design to achieve performance improvements. Also, a processor supporting x86-64 still powers on in [[real mode]] for full [[backward compatibility]], as x86 processors have done since the [[80286]].\n\nThe original specification, created by [[Advanced Micro Devices|AMD]] and released in 2000, has been implemented by AMD, [[Intel Corporation|Intel]] and [[VIA Technologies|VIA]]. The [[AMD K8]] [[microarchitecture]], in the [[Opteron]] and [[Athlon 64]] processors, was the first to implement it. This was the first significant addition to the [[x86]] architecture designed by a company other than Intel. Intel was forced to follow suit and introduced a modified [[NetBurst (microarchitecture)|NetBurst]] family which was software-compatible with AMD's specification. [[VIA Technologies]] introduced x86-64 in their VIA Isaiah architecture, with the [[VIA Nano]].\n\nThe x86-64 architecture is distinct from the Intel [[Itanium]] architecture (formerly [[IA-64]]), which is not compatible on the native instruction set level with the x86 architecture. Operating systems and applications compiled for one cannot be run on the other.\n{{TOC limit|3}}\n\n== AMD64 ==\n[[File:AMD64 Logo.svg|thumb|150px|right|AMD64 logo]]\n\n=== History ===\nAMD64 was created as an alternative to the radically different [[IA-64]] architecture, which was designed by Intel and [[Hewlett Packard]]. Originally announced in 1999<ref>{{cite press release\n| title     = AMD Discloses New Technologies At Microporcessor Forum\n| publisher = AMD\n| date      = October 5, 1999\n| url       = https://www.amd.com/us/press-releases/Pages/Press_Release_751.aspx\n| archiveurl = https://web.archive.org/web/20120308030806/http://www.amd.com/us/press-releases/Pages/Press_Release_751.aspx\n| archivedate = March 8, 2012\n| accessdate= November 9, 2010\n}}</ref> while a full specification became available in August 2000,<ref>{{cite press release\n | title     = AMD Releases x86-64 Architectural Specification; Enables Market Driven Migration to 64-Bit Computing\n | publisher = AMD\n | date      = August 10, 2000\n | url       = https://www.amd.com/us/press-releases/Pages/Press_Release_715.aspx\n | archiveurl = https://web.archive.org/web/20120308025559/http://www.amd.com/us/press-releases/Pages/Press_Release_715.aspx\n | archivedate = March 8, 2012\n | accessdate= November 9, 2010\n}}</ref> the AMD64 architecture was positioned by AMD from the beginning as an evolutionary way to add [[64-bit computing]] capabilities to the existing x86 architecture, as opposed to Intel's approach of creating an entirely new 64-bit architecture with IA-64.\n\nThe first AMD64-based processor, the [[Opteron]], was released in April 2003.\n\n=== Implementations ===\nAMD's processors implementing the AMD64 architecture include [[Opteron]], [[Athlon 64]], [[Athlon 64 X2]], [[Athlon 64 FX]], [[Athlon II]] (followed by \"X2\", \"X3\", or \"X4\" to indicate the number of cores, and XLT models), [[Turion 64]], [[Turion 64 X2]], [[Sempron]] (\"Palermo\" E6 stepping and all \"Manila\" models), [[Phenom (processor)|Phenom]] (followed by \"X3\" or \"X4\" to indicate the number of cores), [[Phenom II]] (followed by \"X2\", \"X3\", \"X4\" or \"X6\" to indicate the number of cores), [[List of AMD FX microprocessors|FX]], [[AMD Accelerated Processing Unit|Fusion/APU]] and [[Ryzen]]/[[Epyc]].\n\n=== Architectural features ===\nThe primary defining characteristic of AMD64 is the availability of 64-bit general-purpose [[processor register]]s (for example, rax and rbx), 64-bit [[Integer (computer science)|integer]] arithmetic and logical operations, and 64-bit [[Protected Virtual Address Mode|virtual addresses]]. The designers took the opportunity to make other improvements as well. Some of the most significant changes are described below.\n\n; 64-bit integer capability\n: All [[general-purpose register]]s (GPRs) are expanded from 32&nbsp;[[bit]]s to 64&nbsp;bits, and all arithmetic and logical operations, memory-to-register and register-to-memory operations, etc., can now operate directly on 64-bit integers. [[Stack (data structure)|Pushes and pops]] on the [[Stack register|stack]] default to 8-byte strides, and [[pointer (computer programming)|pointers]] are 8 bytes wide.\n; Additional registers\n: In addition to increasing the size of the general-purpose registers, the number of named general-purpose registers is increased from eight (i.e. eax, ecx, edx, ebx, esp, ebp, esi, edi) in x86 to 16 (i.e. rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15). It is therefore possible to keep more local variables in registers rather than on the stack, and to let registers hold frequently accessed constants; arguments for small and fast subroutines may also be passed in registers to a greater extent.\n\n: AMD64 still has fewer registers than many [[RISC]] [[instruction set]]s (e.g. [[PA-RISC]], [[Power ISA]], and [[MIPS architecture|MIPS]] have 32 GPRs; [[DEC Alpha|Alpha]], [[ARM architecture#64/32-bit architecture|64-bit ARM]], and [[SPARC]] have 31) or [[VLIW]]-like machines such as the [[IA-64]] (which has 128&nbsp;registers). However, an AMD64 implementation may have far more internal registers than the number of architectural registers exposed by the instruction set (see [[register renaming]]). (For example, AMD Zen cores have 168 64-bit integer and 160 128-bit vector floating point physical internal registers.)\n; Additional XMM (SSE) registers\n: Similarly, the number of 128-bit XMM<!-- don't confuse this name with MMX; MMX has no hardware registers and is mapped to the FPU stack. Here we talk about SSE (XMM) registers --> registers (used for [[Streaming SIMD Extensions|Streaming SIMD]] instructions) is also increased from 8 to 16.\n: The traditional x87 FPU register stack is not included in the register file size extension in 64-bit mode, compared with the XMM registers used by SSE2, which did get extended. The [[x87]] register stack is not a simple register file although it does allow direct access to individual registers by low cost exchange operations.\n; Larger virtual address space\n: The AMD64 architecture defines a 64-bit virtual address format, of which the low-order 48 bits are used in current implementations.<ref name=\"amd-24593\"/>{{rp|page=120|date=November 2012}} This allows up to 256&nbsp;[[Tebibyte|TiB]] (2<sup>48</sup> [[byte]]s) of virtual address space. The architecture definition allows this limit to be raised in future implementations to the full 64 bits,<ref name=\"amd-24593\"/>{{rp|page=2|date=November 2012}}{{rp|page=3|date=November 2012}}{{rp|page=13|date=November 2012}}{{rp|page=117|date=November 2012}}{{rp|page=120|date=November 2012}} extending the virtual address space to 16&nbsp;[[Exbibyte|EiB]] (2<sup>64</sup> bytes).<ref>Mauerer, W. (2010). Professional Linux kernel architecture. John Wiley & Sons.</ref> This is compared to just 4&nbsp;[[Gigabyte|GB]] (2<sup>32</sup> bytes) for the x86.<ref name=\"intel-253668\">{{cite web\n  |url       = http://www.intel.com/Assets/PDF/manual/253668.pdf\n  |title     = Intel 64 and IA-32 Architectures Software Developer\u2019s Manual, Volume 3A: System Programming Guide, Part&nbsp;1\n  |accessdate= July 10, 2019\n  |format    = PDF\n  |pages     = 4\u20137}}</ref>\n:This means that very large files can be operated on by [[Memory-mapped file|mapping]] the entire file into the process' address space (which is often much faster than working with file read/write calls), rather than having to map regions of the file into and out of the address space.\n; Larger physical address space\n: The original implementation of the AMD64 architecture implemented 40-bit [[physical address]]es and so could address up to 1&nbsp;TiB (2<sup>40</sup> bytes) of RAM.<ref name=\"amd-24593\" />{{rp|page=24|date=November 2012}} Current implementations of the AMD64 architecture (starting from [[AMD K10|AMD 10h microarchitecture]]) <!--- it's \"10h\", as in 10 hex, not 10th as in tenth. Please see the reference named amd10h, immediately following. Please do not change this back to \"10th\" ---> extend this to 48-bit physical addresses<ref name=\"amd10h\">{{cite web|url=http://developer.amd.com/wordpress/media/2012/10/31116.pdf |title=BIOS and Kernel Developer\u2019s Guide (BKDG) For AMD Family 10h Processors |accessdate=February 27, 2016 |format=PDF |page=24 |quote=Physical address space increased to 48 bits.}}</ref> and therefore can address up to 256&nbsp;TB of RAM. The architecture permits extending this to 52 bits in the future<ref name=\"amd-24593\" />{{rp|page=24|date=November 2012}}<ref>\n{{cite web\n  |url      = http://www.amd64.org/fileadmin/user_upload/pub/64bit_Linux-Myths_and_Facts.pdf\n  |title      = Myth and facts about 64-bit Linux\n  |accessdate      = May 30, 2010\n  |date      = March 2, 2008\n  |format      = PDF\n  |page      = 7\n  |quote      = Physical address space increased to 48 bits\n  |url-status      = dead\n  |archiveurl      = https://web.archive.org/web/20101010233951/http://www.amd64.org/fileadmin/user_upload/pub/64bit_Linux-Myths_and_Facts.pdf\n  |archivedate      = October 10, 2010\n  |df      = mdy-all\n  }}</ref> (limited by the page table entry format);<ref name=\"amd-24593\" />{{rp|page=131|date=November 2012}} this would allow addressing of up to 4&nbsp;[[Pebibyte|PiB]] of RAM. For comparison, 32-bit x86 processors are limited to 64&nbsp;GB of RAM in [[Physical Address Extension]] (PAE) mode,<ref name=\"shanley-ppro\">{{cite book |title      = Pentium Pro and Pentium II System Architecture\n |edition    = Second\n |last       = Shanley\n |first      = Tom\n |isbn       = 0-201-30973-4\n |series     = PC System Architecture Series\n |year       = 1998\n |publisher  = Addison-Wesley\n |page       = [https://archive.org/details/pentiumpropentiu00shan/page/445 445]\n |url-access = registration\n |url        = https://archive.org/details/pentiumpropentiu00shan/page/445\n}}</ref> or 4&nbsp;GB of RAM without PAE mode.<ref name=\"amd-24593\" />{{rp|page=4|date=November 2012}}\n; Larger physical address space in legacy mode\n: When operating in [[legacy mode]] the AMD64 architecture supports [[Physical Address Extension]] (PAE) mode, as do most current x86 processors, but AMD64 extends PAE from 36 bits to an architectural limit of 52&nbsp;bits of physical address. Any implementation, therefore, allows the same physical address limit as under [[long mode]].<ref name=\"amd-24593\" />{{rp|page=24|date=November 2012}}\n; Instruction pointer relative data access\n: Instructions can now reference data relative to the instruction pointer (RIP register). This makes [[position independent code]], as is often used in [[Library (computing)#Shared libraries|shared libraries]] and code loaded at run time, more efficient.\n; SSE instructions\n: The original AMD64 architecture adopted Intel's [[Streaming SIMD Extensions|SSE]] and [[SSE2]] as core instructions. These instruction sets provide a vector supplement to the scalar [[x87]] FPU, for the single-precision and double-precision data types. SSE2 also offers integer vector operations, for data types ranging from 8bit to 64bit precision. This makes the vector capabilities of the architecture on par with those of the most advanced x86 processors of its time. These instructions can also be used in 32-bit mode. The proliferation of 64-bit processors has made these vector capabilities ubiquitous in home computers, allowing the improvement of the standards of 32-bit applications. The 32-bit edition of Windows 8, for example, requires the presence of SSE2 instructions.<ref>{{cite web|last=Microsoft Corporation|title=What is PAE, NX, and SSE2 and why does my PC need to support them to run Windows 8 ?|url=http://windows.microsoft.com/en-GB/windows-8/what-is-pae-nx-sse2|accessdate=March 19, 2013}}</ref> [[SSE3]] instructions and later [[Streaming SIMD Extensions]] instruction sets are not standard features of the architecture.\n; No-Execute bit\n: The No-Execute bit or [[NX bit]] (bit 63 of the page table entry) allows the operating system to specify which pages of virtual address space can contain executable code and which cannot. An attempt to execute code from a page tagged \"no execute\" will result in a memory access violation, similar to an attempt to write to a read-only page. This should make it more difficult for malicious code to take control of the system via \"[[Buffer overflow|buffer overrun]]\" or \"unchecked buffer\" attacks. A similar feature has been available on x86 processors since the [[80286]] as an attribute of [[segment descriptor]]s; however, this works only on an entire segment at a time.\n\n: [[x86 memory segmentation|Segmented addressing]] has long been considered an obsolete mode of operation, and all current PC operating systems in effect bypass it, setting all segments to a base address of zero and (in their 32-bit implementation) a size of 4&nbsp; GB. AMD was the first x86-family vendor to implement no-execute in linear addressing mode. The feature is also available in legacy mode on AMD64 processors, and recent Intel x86 processors, when PAE is used.\n; Removal of older features\n: A few \"system programming\" features of the x86 architecture were either unused or underused in modern operating systems and are either not available on AMD64 in long (64-bit and compatibility) mode, or exist only in limited form. These include segmented addressing (although the FS and GS segments are retained in vestigial form for use as extra-base pointers to operating system structures),<ref name=\"amd-24593\"/>{{rp|page=70|date=November 2012}} the [[Task State Segment|task state switch]] mechanism, and [[virtual 8086 mode]]. These features remain fully implemented in \"legacy mode\", allowing these processors to run 32-bit and 16-bit operating systems without modifications. Some instructions that proved to be rarely useful are not supported in 64-bit mode, including saving/restoring of segment registers on the stack, saving/restoring of all registers (PUSHA/POPA), decimal arithmetic, BOUND and INTO instructions, and \"far\" jumps and calls with immediate operands.\n\n=== {{Anchor|VIRTUAL-ADDRESS-SPACE}}Virtual address space details ===\n\n==== Canonical form addresses ====\n{{Multiple image\n | header    = Canonical address space implementations (diagrams not to scale)\n | width     = 150\n | direction = horizontal\n | align     = right\n | image1    = AMD64-canonical--48-bit.svg\n | caption1  = Current 48-bit implementation\n | image2    = AMD64-canonical--56-bit.svg\n | caption2  = 56-bit implementation\n | image3    = AMD64-canonical--64-bit.svg\n | caption3  = 64-bit implementation\n}}\n\nAlthough virtual addresses are 64&nbsp; bits wide in 64-bit mode, current implementations (and all chips that are known to be in the planning stages) do not allow the entire virtual address space of 2<sup>64</sup> bytes (16&nbsp; EiB) to be used.\nThis would be approximately four billion times the size of the virtual address space on 32-bit machines. Most operating systems and applications will not need such a large address space for the foreseeable future, so implementing such wide virtual addresses would simply increase the complexity and cost of address translation with no real benefit. AMD, therefore, decided that, in the first implementations of the architecture, only the least significant 48&nbsp; bits of a virtual address would actually be used in address translation ([[page table]] lookup).<ref name=\"amd-24593\"/>{{rp|page=120|date=November 2012}}\n\nIn addition, the AMD specification requires that the most significant 16 bits of any virtual address,  bits 48 through 63, must be copies of bit 47 (in a manner akin to [[sign extension]]). If this requirement is not met, the processor will raise an exception.<ref name=\"amd-24593\"/>{{rp|page=131|date=November 2012}} Addresses complying with this rule are referred to as \"canonical form.\"<ref name=\"amd-24593\"/>{{rp|page=130|date=November 2012}} Canonical form addresses run from 0 through 00007FFF'FFFFFFFF, and from FFFF8000'00000000 through FFFFFFFF'FFFFFFFF, for a total of 256&nbsp;TB of usable virtual address space. This is still 65,536 times larger than the virtual 4 GB address space of 32-bit machines.\n\nThis feature eases later scalability to true 64-bit addressing. Many operating systems (including, but not limited to, the [[Windows NT]] family) take the higher-addressed half of the address space (named [[kernel space]]) for themselves and leave the lower-addressed half ([[user space]]) for application code, user mode stacks, heaps, and other data regions.<ref name=\"win-lim-msdn\"/> The \"canonical address\" design ensures that every AMD64 compliant implementation has, in effect, two memory halves: the lower half starts at 00000000'00000000 and \"grows upwards\" as more virtual address bits become available, while the higher half is \"docked\" to the top of the address space and grows downwards. Also, enforcing the \"canonical form\" of addresses by checking the unused address bits prevents their use by the operating system in [[tagged pointer]]s as flags, privilege markers, etc., as such use could become problematic when the architecture is extended to implement more virtual address bits.\n\nThe first versions of Windows for x64 did not even use the full 256&nbsp;TB; they were restricted to just 8&nbsp;TB of user space and 8&nbsp;TB of kernel space.<ref name=\"win-lim-msdn\">{{cite web|url=http://msdn.microsoft.com/en-us/library/windows/desktop/aa366778(v=vs.85).aspx#memory_limits |title=Memory Limits for Windows Releases |website=[[MSDN]] |publisher=[[Microsoft]] |date=November 16, 2013 |accessdate=January 20, 2014}}</ref> Windows did not support the entire 48-bit address space until [[Windows&nbsp;8.1]], which was released in October 2013.<ref name=\"win-lim-msdn\"/> <!--- it would be good to include other OS's limits here. --->\n\n==== Page table structure ====\nThe 64-bit addressing mode (\"[[long mode]]\") is a superset of [[Physical Address Extension]]s (PAE); because of this, [[paging|page]] sizes may be 4&nbsp;[[Kilobyte|KB]] (2<sup>12</sup> bytes) or 2&nbsp;[[Megabyte|MB]] (2<sup>21</sup> bytes).<ref name=\"amd-24593\"/>{{rp|page=120|date=November 2012}} Long mode also supports page sizes of 1&nbsp;[[Gigabyte|GB]] (2<sup>30</sup> bytes).<ref name=\"amd-24593\"/>{{rp|page=120|date=November 2012}} Rather than the three-level [[page table]] system used by systems in PAE mode, systems running in [[long mode]] use four levels of page table: PAE's ''Page-Directory Pointer Table'' is extended from four entries to 512, and an additional ''Page-Map Level&nbsp;4 (PML4) Table'' is added, containing 512 entries in 48-bit implementations.<ref name=\"amd-24593\"/>{{rp|page=131|date=November 2012}} A full mapping hierarchy of 4&nbsp;KB pages for the whole 48-bit space would take a bit more than 512&nbsp;GB of memory (about 0.195% of the 256&nbsp;TB virtual space).\n\nIntel has implemented a scheme with a [[Intel 5-level paging|5-level page table]], which allows Intel 64 processors to support a 57-bit virtual address space.<ref>{{cite web|url=https://software.intel.com/sites/default/files/managed/2b/80/5-level_paging_white_paper.pdf|title=5-Level Paging and 5-Level EPT|publisher=Intel|date=May 2017|accessdate=June 17, 2017}}</ref> Further extensions may allow full 64-bit virtual address space and physical memory by expanding the page table entry size to 128-bit, and reduce page walks in the 5-level hierarchy by using a larger 64&nbsp;KB page allocation size that still supports 4&nbsp;KB page operations for backward compatibility. <Ref>{{cite patent | country = US | number = 9858198 | status = patent | title =  64KB page system that supports 4KB page operation | pridate = 2015-06-26 | fdate = 2015-06-26 | pubdate = 2016-12-29 | gdate = 2018-01-02 | invent1 = Larry Seiler | assign1 = Intel Corp.}} </ref>\n\n==== Operating system limits ====\nThe operating system can also limit the virtual address space. Details, where applicable, are given in the \"[[X86-64#Operating system compatibility and characteristics|Operating system compatibility and characteristics]]\" section.\n\n=== Physical address space details ===\nCurrent AMD64 processors support a physical address space of up to 2<sup>48</sup> bytes of RAM, or 256&nbsp;TB.<ref name=\"amd10h\"/> However, {{as of|2010|06|lc=1}}, there were no known x86-64 [[motherboard]]s that support 256&nbsp;TB of RAM.<ref>{{cite web\n|url       = http://www.supermicro.com/Aplus/motherboard/Opteron6100/\n|title     = Opteron 6100 Series Motherboards\n|publisher = Supermicro Corporation\n|accessdate= June 22, 2010}}</ref><ref>{{cite web\n|url       = http://www.supermicro.com/products/motherboard/Xeon1333/#1366\n|title     = Supermicro Xeon<!-- AutoEd: rm unicode ctrl char w/no win-1252 mapping, intent unknown -->Solutions\n|publisher = Supermicro Corporation\n|accessdate= June 20, 2010}}</ref><ref>{{cite web\n|url       = http://www.supermicro.com/Aplus/motherboard/Opteron8000/\n|title     = Opteron 8000 Series Motherboards\n|publisher = Supermicro Corporation\n|accessdate= June 20, 2010}}</ref><ref>{{cite web\n|url       = http://www.supermicro.com/products/motherboard/Core/index.cfm#1366\n|title     = Tyan Product Matrix\n|publisher = MiTEC International Corporation\n|accessdate= June 21, 2010}}</ref>{{failed verification|date=May 2016}}\nThe operating system may place additional limits on the amount of RAM that is usable or supported. Details on this point are given in the \"[[X86-64#Operating system compatibility and characteristics|Operating system compatibility and characteristics]]\" section of this article.\n\n=== {{Anchor|OPMODES}}Operating modes ===\nThe architecture has three primary modes of operation, long mode, legacy mode, and real mode.\n\n{| class=\"wikitable\" style=\"text-align: center;\"\n|-\n! colspan=\"2\" | Operating \n! rowspan=\"2\" | [[Operating system]]<br>required\n! rowspan=\"2\" | Type of code<br>being run\n! colspan=\"4\" | size\n|-\n! mode\n! sub-mode\n! address (default)\n! operand (default)\n! operand (typ. supported)\n! [[Register file]]\n|-\n| rowspan=\"3\"| [[Long mode|Long<br>mode]]\n| 64-bit mode\n| rowspan=\"3\"| 64-bit\n| [[Long mode|64-bit code]]\n| 64 bits\n| 32 bits\n| 8, 16, 32, or 64 bits\n| 16 registers per file\n|-\n| rowspan=\"2\"| Compatibility mode\n| [[Protected mode#The 386|32-bit code]]\n| 32 bits\n| 32 bits\n| 8, 16, or 32 bits\n| 8 registers per file\n|-\n| [[Protected mode#The 286|16-bit code]]\n| 16 bits\n| 16 bits\n| 8, 16, or 32 bits\n| 8 registers per file\n|-\n| rowspan=\"3\"| Legacy<br>mode\n| rowspan=\"2\"| [[Protected mode]]\n| 32-bit\n| [[Protected mode#The 386|32-bit code]]\n| 32 bits\n| 32 bits\n| 8, 16, or 32 bits\n| 8 registers per file\n|-\n| 16-bit protected mode\n| [[Protected mode#The 286|16-bit code]]\n| 16 bits\n| 16 bits\n| 8, 16, or 32 bits<ref group=\"m\" name=\"opsize-prefix\"/>\n| 8 registers per file\n|-\n| [[Virtual 8086 mode]]\n| 16-bit or 32-bit protected mode\n| some of [[Real mode|real mode code]]\n| 16 bits\n| 16 bits\n| 8, 16, or 32 bits<ref group=\"m\" name=\"opsize-prefix\"/>\n| 8 registers per file\n|-\n| rowspan=\"2\"| Real<br>mode\n| [[Unreal mode]]\n| n/a\n| [[Real mode|real mode code]]\n| 16, 20, or 32 bits\n| 16 bits\n| 8, 16, or 32 bits<ref group=\"m\" name=\"opsize-prefix\"/>\n| 8 registers per file\n|-\n| [[Real mode]]\n| n/a\n| [[Real mode|real mode code]]\n| 16, 20, or 21<ref>https://en.wikipedia.org/wiki/A20_line</ref> bits\n| 16 bits\n| 8, 16, or 32 bits<ref group=\"m\" name=\"opsize-prefix\"/>\n| 8 registers per file\n|}\n{{reflist|group=m|refs=<ref name=\"opsize-prefix\">Note that 16-bit code written for the 80286 and below does not use 32-bit operand instructions. Code written for the 80386 and above can use the operand-size override prefix (0x66). Normally this prefix is used by protected and long mode code for the purpose of using 16-bit operands, as that code would be running in a code segment with a default operand size of 32 bits. In real mode, the default operand size is 16 bits, so the 0x66 prefix is interpreted differently, changing operand size to 32 bits.</ref>}}\n[[File:AMD64StateDiagram.svg|thumb|400px|State diagram of the x86-64 operating modes]]\n\n==== Long mode ====\n{{Main|Long mode}}\n\nLong mode is the architecture's intended primary mode of operation; it is a combination of the processor's native 64-bit mode and a combined 32-bit and 16-bit compatibility mode. It is used by 64-bit operating systems. Under a 64-bit operating system, 64-bit programs run under 64-bit mode, and 32-bit and 16-bit protected mode applications (that do not need to use either real mode or virtual 8086 mode in order to execute at any time) run under compatibility mode. Real-mode programs and programs that use virtual 8086 mode at any time cannot be run in long mode unless those modes are emulated in software.<ref name=\"amd-24593\"/>{{rp|11}} However, such programs may be started from an operating system running in long mode on processors supporting [[VT-x]] or [[AMD-V]] by creating a virtual processor running in the desired mode.\n\nSince the basic [[instruction set]] is the same, there is almost no performance penalty for executing protected mode x86 code. This is unlike Intel's [[IA-64]], where differences in the underlying instruction set mean that running 32-bit code must be done either in emulation of x86 (making the process slower) or with a dedicated x86 coprocessor. However, on the x86-64 platform, many x86 applications could benefit from a 64-bit [[recompile]], due to the additional registers in 64-bit code and guaranteed SSE2-based FPU support, which a [[compiler]] can use for optimization. However, applications that regularly handle integers wider than 32 bits, such as cryptographic algorithms, will need a rewrite of the code handling the huge integers in order to take advantage of the 64-bit registers.\n\n==== Legacy mode ====\nLegacy mode is the mode used by 32-bit or 16-bit \"protected mode\" operating systems.<ref name=\"intel-xed-1\">{{cite web |last1=Charney |first1=Mark |url=https://intelxed.github.io/ref-manual/xed-machine-mode-enum_8h.html |website=Xed |publisher=Intel Corporation |title=Xed Machine Mode Definitions |accessdate=16 June 2019}}</ref> In this mode, the processor acts like an older x86 processor, and only 16-bit and 32-bit code can be executed. Legacy mode allows for a maximum of 32&nbsp;bit virtual addressing which limits the virtual address space to 4&nbsp;GB.<ref name=\"amd-24593\"/>{{rp|page=14|date=November 2012}}{{rp|page=24|date=November 2012}}{{rp|page=118|date=November 2012}} 64-bit programs cannot be run from legacy mode.\n\n==== Real mode ====\n[[Real mode]] is the initial mode of operation when the processor is initialized. It is backwards compatible with the original [[8086]] and [[8088]] processors. Real mode is primarily used today by operating system bootloaders, which are required by the architecture to configure [[#Physical_address_space_details|virtual memory details]] before transitioning to higher modes.\n\n== Intel 64 ==\n'''Intel&nbsp;64''' is Intel's implementation of x86-64, used and implemented in various processors made by Intel.\n\n=== History ===\nHistorically, AMD has developed and produced processors with instruction sets patterned after Intel's original designs, but with x86-64, roles were reversed: Intel found itself in the position of adopting the [[instruction set architecture|ISA]] which AMD had created as an extension to Intel's own x86 processor line.\n\nIntel's project was originally [[codename]]d ''Yamhill'' (after the [[Yamhill River]] in Oregon's Willamette Valley).{{Citation needed|date=August 2017}} After several years of denying its existence, Intel announced at the February 2004 [[Intel Developer Forum|IDF]] that the project was indeed underway. Intel's chairman at the time, [[Craig Barrett (chief executive)|Craig Barrett]], admitted that this was one of their worst-kept secrets.<ref>{{cite web |url=https://www.theinquirer.net/inquirer/news/1042795/craig-barrett-confirms-bit-address-extensions-xeon-and-prescott |title=Craig Barrett confirms 64 bit address extensions for Xeon. And Prescott. |publisher=The Inquirer |date=February 17, 2004}}</ref><ref>[http://www.internetnews.com/ent-news/article.php/3518781 \"A Roundup of 64-Bit Computing\", from internetnews.com]</ref>\n\nIntel's name for this instruction set has changed several times. The name used at the IDF was ''CT'' (presumably{{Original research inline|date=August 2017}} for ''Clackamas Technology'', another codename from an [[Clackamas River|Oregon river]]); within weeks they began referring to it as ''IA-32e'' (for [[IA-32]] extensions) and in March 2004 unveiled the \"official\" name ''EM64T'' (Extended Memory 64 Technology). In late 2006 Intel began instead using the name ''Intel&nbsp;64'' for its implementation, paralleling AMD's use of the name AMD64.<ref>{{cite web\n| url        = http://www.intel.com/technology/intel64/index.htm\n| title      = Intel&nbsp;64 Architecture\n| accessdate = June 29, 2007\n| publisher  = [[Intel]]\n}}</ref>\n\nThe first processor to implement Intel&nbsp;64 was the multi-socket processor [[Xeon]] code-named ''[[Xeon#Nocona and Irwindale|Nocona]]'' in June 2004. In contrast, the initial Prescott chips (February 2004) did not enable this feature. Intel subsequently began selling Intel&nbsp;64-enabled Pentium 4s using the E0 revision of the Prescott core, being sold on the OEM market as the Pentium 4, model F. The E0 revision also adds eXecute Disable (XD) (Intel's name for the [[NX bit]]) to Intel&nbsp;64, and has been included in then current Xeon code-named ''Irwindale''. Intel's official launch of Intel&nbsp;64 (under the name EM64T at that time) in mainstream desktop processors was the N0 stepping Prescott-2M.\n\nThe first Intel [[mobile processor]] implementing Intel&nbsp;64 is the [[Merom (microprocessor)|Merom]] version of the [[Core 2]] processor, which was released on July 27, 2006. None of Intel's earlier notebook CPUs ([[Core Duo]], [[Pentium M]], [[Celeron M]], [[Pentium 4|Mobile Pentium 4]]) implement Intel&nbsp;64.\n\n=== Implementations ===\nIntel's processors implementing the Intel64 architecture include the [[Pentium 4]] F-series/5x1 series, 506, and 516, [[Celeron D]] models 3x1, 3x6, 355, 347, 352, 360, and 365 and all later [[Celeron]]s, all models of [[Xeon]] since \"[[Xeon#Nocona and Irwindale|Nocona]]\", all models of [[Pentium Dual-Core]] processors since \"[[Merom (microprocessor)#Merom-2M|Merom-2M]]\", the [[Intel Atom|Atom]] 230, 330, D410, D425, D510, D525, N450, N455, N470, N475, N550, N570, N2600 and N2800, all versions of the [[Pentium D]], [[Pentium Extreme Edition]], [[Core&nbsp;2]], [[Core&nbsp;i9]], [[Core&nbsp;i7]], [[Core&nbsp;i5]], and [[Core&nbsp;i3]] processors, and the [[Xeon Phi]] 7200 series processors.\n\n== VIA's x86-64 implementation ==\n[[VIA Technologies]] introduced their first implementation of the x86-64 architecture in 2008 after five years of development by its CPU division, [[Centaur Technology]].<ref>{{cite web\n|title      = VIA to launch new processor architecture in 1Q08\n|publisher  = [[DigiTimes]]\n|url        = http://www.digitimes.com/news/a20070725PD206.html\n|accessdate = July 25, 2007\n|format     = subscription required}}</ref>\nCodenamed \"Isaiah\", the 64-bit architecture was unveiled on January 24, 2008,<ref>{{cite web\n|title      = Isaiah revealed: VIA's new low-power architecture\n|publisher  = Ars Technica\n|url        = https://arstechnica.com/articles/paedia/cpu/via-cpu-isaiah.ars\n|accessdate = January 24, 2008\n|first      = Jon\n|last       = Stokes\n|date       = January 23, 2008}}</ref> and launched on May 29 under the [[VIA Nano]] brand name.<ref>{{cite press release\n|title      = VIA Launches VIA Nano Processor Family\n|publisher  = [[VIA Technologies|VIA]]\n|url        = http://www.viatech.com/en/2008/05/via-launches-via-nano-processor-family/\n|accessdate = May 25, 2017\n|date       = May 29, 2008}}</ref>\n\nThe processor supports a number of VIA-specific x86 extensions designed to boost efficiency in low-power appliances.\nIt is expected that the Isaiah architecture will be twice as fast in integer performance and four times as fast in [[floating-point]] performance as the previous-generation [[VIA Esther]] at an equivalent [[clock speed]]. Power consumption is also expected to be on par with the previous-generation VIA CPUs, with [[thermal design power]] ranging from 5&nbsp;W to 25&nbsp;W.<ref>{{cite web\n |publisher   = [[VIA Technologies|VIA]]\n |url         = http://www.via.com.tw/en/downloads/presentations/processors/pb_via-isaiah_080124.pdf\n |title       = VIA Isaiah Architecture Introduction\n |format      = PDF\n |accessdate  = July 31, 2013\n |date        = January 23, 2008\n |url-status     = dead\n |archiveurl  = https://web.archive.org/web/20080907181213/http://www.via.com.tw/en/downloads/presentations/processors/pb_via-isaiah_080124.pdf\n |archivedate = September 7, 2008\n |df          = mdy-all\n}}</ref>\nBeing a completely new design, the Isaiah architecture was built with support for features like the x86-64 instruction set and [[x86 virtualization]] which were unavailable on its predecessors, the [[VIA C7]] line, while retaining their encryption extensions.\n\n== Differences between AMD64 and Intel 64 ==\nAlthough nearly identical, there are some differences between the two instruction sets in the semantics of a few seldom used machine instructions (or situations), which are mainly used for [[system programming]].<ref name=trcscott>{{cite web |last= Wasson |first= Scott |title= 64-bit computing in theory and practice |url= http://techreport.com/articles.x/8131/1 |work= The Tech Report |publisher= The Tech Report |accessdate= March 22, 2011}}</ref> Compilers generally produce [[executable]]s (i.e. [[machine code]]) that avoid any differences, at least for ordinary [[application software|application programs]]. This is therefore of interest mainly to developers of compilers, operating systems and similar, which must deal with individual and special system instructions.\n\n=== Recent implementations ===\n* Intel&nbsp;64's [[find first set|<code>BSF</code>]] and [[find first set|<code>BSR</code>]] instructions act differently than AMD64's when the source is zero and the operand size is 32&nbsp;bits. The processor sets the zero flag and leaves the upper 32&nbsp;bits of the destination undefined.\n* AMD64 requires a different microcode update format and control MSRs (model-specific registers) while Intel&nbsp;64 implements [[microcode]] update unchanged from their 32-bit only processors.\n* Intel&nbsp;64 lacks some MSRs that are considered architectural in AMD64. These include <code>SYSCFG</code>, <code>TOP_MEM</code>, and <code>TOP_MEM2</code>.\n* Intel&nbsp;64 allows <code>SYSCALL</code>/<code>SYSRET</code> only in 64-bit mode (not in compatibility mode),<ref>{{cite web|url=http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf|title=Intel 64 and IA-32 Architectures Software Developer\u2019s Manual Volume 2 (2A, 2B & 2C): Instruction Set Reference, A-Z|pages=4\u2013397|publisher=Intel|date=September 2013|accessdate=January 21, 2014}}</ref> and allows <code>SYSENTER</code>/<code>SYSEXIT</code> in both modes.<ref>{{cite web|url=http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf|title=Intel 64 and IA-32 Architectures Software Developer\u2019s Manual Volume 2 (2A, 2B & 2C): Instruction Set Reference, A-Z|pages=4\u2013400|publisher=Intel|date=September 2013|accessdate=January 21, 2014}}</ref> AMD64 lacks <code>SYSENTER</code>/<code>SYSEXIT</code> in both sub-modes of [[long mode]].<ref name=\"amd-24593\"/>{{rp|33}}\n* In 64-bit mode, near branches with the 66H (operand size override) prefix behave differently. Intel&nbsp;64 ignores this prefix: the instruction has 32-bit sign extended offset, and instruction pointer is not truncated. AMD64 uses 16-bit offset field in the instruction, and clears the top 48&nbsp;bits of instruction pointer.\n* AMD processors raise a floating point Invalid Exception when performing an <code>FLD</code> or <code>FSTP</code> of an 80-bit signalling NaN, while Intel processors do not.\n* Intel&nbsp;64 lacks the ability to save and restore a reduced (and thus faster) version of the [[floating-point]] state (involving the <code>FXSAVE</code> and <code>FXRSTOR</code> instructions).\n* AMD processors ever since [[Opteron]] Rev. E and [[Athlon 64]] Rev. D have reintroduced limited support for segmentation, via the Long Mode Segment Limit Enable (LMSLE) bit, to ease [[x86 virtualization#64-bit|virtualization]] of 64-bit guests.<ref>{{cite web |url= http://www.pagetable.com/?p=25 |title= How retiring segmentation in AMD64 long mode broke VMware |publisher= Pagetable.com |date= November 9, 2006 |accessdate= May 2, 2010}}</ref><ref>{{cite web |url= http://download3.vmware.com/vmworld/2005/pac346.pdf |title= VMware and CPU Virtualization Technology |format= PDF |publisher= VMware |date= |accessdate= September 8, 2010}}</ref>\n* When returning to a non-canonical address using <code>SYSRET</code>, AMD64 processors execute the general protection fault handler in privilege level 3,<ref>{{cite web|url=https://support.amd.com/TechDocs/24594.pdf|title=AMD64 Architecture Programmer\u2019s Manual Volume 3: General-Purpose and System Instructions|page=419|publisher=AMD|date=May 2018|accessdate=August 2, 2018}}</ref> while on Intel&nbsp;64 processors it is executed in privilege level 0.<ref>{{cite web|url=http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf|title=Intel 64 and IA-32 Architectures Software Developer\u2019s Manual Volume 2 (2A, 2B & 2C): Instruction Set Reference, A-Z|pages=4\u2013412|publisher=Intel|date=September 2014|accessdate=December 28, 2014}}</ref>\n\n=== Older implementations ===\n* Early AMD64 processors (typically on Socket 939 and 940) lacked the <code>CMPXCHG16B</code> instruction, which is an extension of the <code>CMPXCHG8B</code> instruction present on most post-[[80486]] processors. Similar to <code>CMPXCHG8B</code>, <code>CMPXCHG16B</code> allows for [[atomic operation]]s on octa-words (128-bit values). This is useful for parallel algorithms that use [[compare and swap]] on data larger than the size of a pointer, common in [[lock-free and wait-free algorithms]]. Without <code>CMPXCHG16B</code> one must use workarounds, such as a [[critical section]] or alternative lock-free approaches.<ref>{{cite web|url=http://www.research.ibm.com/people/m/michael/disc-2004.pdf|title=Practical Lock-Free and Wait-Free LL/SC/VL Implementations Using 64-Bit CAS|author=Maged M. Michael|publisher=IBM|accessdate=January 21, 2014}}</ref> Its absence also prevents 64-bit [[Microsoft Windows|Windows]] prior to Windows 8.1 from having a [[user-mode]] address space larger than 8&nbsp;terabytes.<ref>{{cite web|url=https://blogs.msdn.microsoft.com/oldnewthing/20040817-00/?p=38153#comment-204583|title=Why is the virtual address space 4GB anyway?|website=The Old New Thing|author=darwou|date=August 20, 2004|publisher=Microsoft}}</ref> The 64-bit version of [[Windows 8.1]] requires the instruction.<ref  name=\"CPUinsts8.1\">{{cite web\n|url=http://windows.microsoft.com/en-us/windows-8/system-requirements\n|title=System Requirements\u2014Windows 8.1\n|quote=To install a 64-bit OS on a 64-bit PC, your processor needs to support CMPXCHG16b, PrefetchW, and LAHF/SAHF.\n|accessdate=April 27, 2014\n}}</ref>\n* Early AMD64 and Intel&nbsp;64 CPUs lacked <code>LAHF</code> and <code>SAHF</code> instructions in 64-bit mode. AMD introduced these instructions (also in 64-bit mode) with their Athlon&nbsp;64, Opteron and Turion&nbsp;64 revision&nbsp;D processors in March 2005<ref>[http://support.amd.com/us/Processor_TechDocs/25759.pdf \"Revision Guide for AMD Athlon&nbsp;64 and AMD Opteron Processors\", from AMD]</ref><ref>[http://www.theinquirer.net/inquirer/news/1021373/amd-turion-64-pictured-up-and-running \"AMD Turion&nbsp;64 pictured up and running\", from The Inquirer]</ref><ref>[http://www.theinquirer.net/inquirer/news/1042931/athlon-64-revision-e-wont-work-on-some-nforce-34--boards \"Athlon&nbsp;64 revision&nbsp;E won't work on some Nforce 3/4 boards\", from The Inquirer]</ref> while Intel introduced the instructions with the Pentium&nbsp;4&nbsp;G1 stepping in December 2005. The 64-bit version of Windows 8.1 requires this feature.<ref name=\"CPUinsts8.1\"/>\n* Early Intel CPUs with Intel&nbsp;64 also lack the [[NX bit]] of the AMD64 architecture. This feature is required by all versions of Windows 8.x.\n* Early Intel&nbsp;64 implementations ([[Pentium 4#Prescott|Prescott]] and [[Pentium 4#Cedar Mill|Cedar Mill]]) only allowed access to 64&nbsp;GB of physical memory while original AMD64 implementations allowed access to 1&nbsp;TB of physical memory. Recent AMD64 implementations provide 256&nbsp;TB of physical address space (and AMD plans an expansion to 4&nbsp;PB),{{Citation needed|date=October 2010}} while some Intel&nbsp;64 implementations could address up to 64&nbsp;TB.<ref>\"Intel 64 architecture increases the linear address space for software to 64 bits and supports physical address space up to 46 bits.\" on page Vol. 1 2-21 of [http://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-manual-325462.html Intel 64 and IA-32 Architectures Software Developer\u2019s Manual September 2014]</ref> Physical memory capacities of this size are appropriate for large-scale applications (such as large databases), and high-performance computing (centrally oriented applications and scientific computing).\n* Also, a processor supporting x86-64 still powers on in real mode for full backward compatibility.\n\n== Adoption ==\n[[File:Processor families in TOP500 supercomputers.svg|thumb|350x350px|An area chart showing the representation of different families of microprocessors in the TOP500 supercomputer ranking list, from 1992 to 2014.<ref>{{cite web|url=http://www.top500.org/statistics |title=Statistics &#124; TOP500 Supercomputer Sites |publisher=Top500.org |date= |accessdate=March 22, 2014}}</ref>]]\n\nIn [[supercomputer]]s tracked by [[TOP500]], the appearance of 64-bit extensions for the x86 architecture enabled 64-bit x86 processors by AMD and Intel (light olive with circles, and red with circles on the diagram provided in this section, respectively) to replace most RISC processor architectures previously used in such systems (including [[PA-RISC]], [[SPARC]], [[DEC Alpha|Alpha]] and others), as well as 32-bit x86 (green with dots and purple with dots on the diagram), even though Intel itself initially tried unsuccessfully to replace x86 with a new incompatible 64-bit architecture in the [[Itanium]] processor.\n\n{{As of|2018}}, the main non-x86 CPU architecture which is still used in supercomputing is the [[Power ISA]] used by [[IBM POWER microprocessors]] (blue with a diamond pattern on the diagram), with SPARC being far behind in numbers on TOP500, while in 2011 a [[Fujitsu]] [[SPARC64 VIIIfx]] based supercomputer without co-processors reached number one (while it since dropped off top-10). The first ARM-based supercomputer appeared on the list in 2018<ref>{{Cite web|url=https://www.top500.org/statistics/sublist/|title=Sublist Generator {{!}} TOP500 Supercomputer Sites|website=www.top500.org|access-date=2018-12-06}}</ref> and, in recent years, non-CPU architecture co-processors ([[General-purpose computing on graphics processing units|GPGPU]]) have also played a big role in performance. Intel's [[Xeon Phi#Knights Corner|Xeon Phi \"Knights Corner\"]] coprocessors, which implement a subset of x86-64 with some vector extensions,<ref>{{cite web|url=https://software.intel.com/sites/default/files/forum/278102/327364001en.pdf|title=Intel\u00ae Xeon PhiTM Coprocessor Instruction Set Architecture Reference Manual|at=section B.2 Intel Xeon Phi coprocessor 64 bit Mode Limitations|publisher=Intel|date=September 7, 2012}}</ref> are also used, along with x86-64 processors, in the [[Tianhe-2]] supercomputer.<ref>{{cite web|url=http://newsroom.intel.com/community/intel_newsroom/blog/2013/06/17/intel-powers-the-worlds-fastest-supercomputer-reveals-new-and-future-high-performance-computing-technologies|title=Intel Powers the World's Fastest Supercomputer, Reveals New and Future High Performance Computing Technologies|accessdate=June 21, 2013}}</ref>\n\n== Operating system compatibility and characteristics ==\nThe following operating systems and releases support the x86-64 architecture in [[long mode]].\n\n=== BSD ===\n\n==== DragonFly BSD ====\nPreliminary infrastructure work was started in February 2004 for a x86-64 port.<ref name=dfly-amd64-prelim>{{cite web |url= http://leaf.dragonflybsd.org/mailarchive/commits/2004-02/msg00011.html |title= cvs commit: src/sys/amd64/amd64 genassym.c src/sys/amd64/include asm.h atomic.h bootinfo.h coredump.h cpufunc.h elf.h endian.h exec.h float.h fpu.h frame.h globaldata.h ieeefp.h limits.h lock.h md_var.h param.h pcb.h pcb_ext.h pmap.h proc.h profile.h psl.h ... |accessdate= May 3, 2009}}</ref> This development later stalled. Development started again during July 2007<ref name=dfly-amd64-noah>{{cite web |url= http://leaf.dragonflybsd.org/mailarchive/users/2007-07/msg00016.html |title= AMD64 port |accessdate= May 3, 2009}}</ref>\nand continued during [[Google Summer of Code]] 2008 and SoC 2009.<ref name=dfly-amd64-soc2008>{{cite web |url= http://www.dragonflybsd.org/docs/developer/GoogleSoC2008/ |title= DragonFlyBSD: GoogleSoC2008 |accessdate= May 3, 2009}}</ref><ref name=dfly-amd64-soc2009>{{cite web |url= http://leaf.dragonflybsd.org/mailarchive/users/2009-04/msg00091.html |title= Summer of Code accepted students |accessdate= May 3, 2009}}</ref> The first official release to contain x86-64 support was version 2.4.<ref name=dflyamd64-release>{{cite web |url= http://www.dragonflybsd.org/release24/ |title= DragonFlyBSD: release24 |accessdate= May 3, 2009}}</ref>\n\n==== FreeBSD ====\n[[FreeBSD]] first added x86-64 support under the name \"amd64\" as an experimental architecture in 5.1-RELEASE in June 2003. It was included as a standard distribution architecture as of 5.2-RELEASE in January 2004. Since then, FreeBSD has designated it as a Tier&nbsp;1 platform. The 6.0-RELEASE version cleaned up some quirks with running x86 executables under amd64, and most drivers work just as they do on the x86 architecture. Work is currently being done to integrate more fully the x86 [[application binary interface]] (ABI), in the same manner as the Linux 32-bit ABI compatibility currently works.\n\n==== NetBSD ====\nx86-64 architecture support was first committed to the [[NetBSD]] source tree on June 19, 2001. As of NetBSD&nbsp;2.0, released on December 9, 2004, ''NetBSD/amd64'' is a fully integrated and supported port.\n32-bit code is still supported in 64-bit mode, with a netbsd-32 kernel compatibility layer for 32-bit syscalls. The NX bit is used to provide non-executable stack and heap with per-page granularity (segment granularity being used on 32-bit x86).\n\n==== OpenBSD ====\n[[OpenBSD]] has supported AMD64 since OpenBSD 3.5, released on May 1, 2004. Complete in-tree implementation of AMD64 support was achieved prior to the hardware's initial release because AMD had loaned several machines for the project's [[hackathon]] that year. OpenBSD developers have taken to the platform because of its support for the [[NX bit]], which allowed for an easy implementation of the [[W^X]] feature.\n\nThe code for the AMD64 port of OpenBSD also runs on Intel 64 processors which contains cloned use of the AMD64 extensions, but since Intel left out the page table NX bit in early Intel 64 processors, there is no W^X capability on those Intel CPUs; later Intel 64 processors added the NX bit under the name \"XD bit\". [[Symmetric multiprocessing]] (SMP) works on OpenBSD's AMD64 port, starting with release 3.6 on November 1, 2004.\n\n=== DOS ===\nIt is possible to enter [[long mode]] under [[DOS]] without a DOS extender,<ref>{{Cite web |url=http://www.turboirc.com/asm |title=Tutorial for entering protected and long mode from DOS |access-date=July 6, 2008 |archive-url=https://web.archive.org/web/20170222181811/http://www.turboirc.com/asm/ |archive-date=February 22, 2017 |url-status=dead |df=mdy-all }}</ref> but the user must return to real mode in order to call BIOS or DOS interrupts.\n\nIt may also be possible to enter [[long mode]] with a [[DOS extender]] similar to [[DOS/4GW]], but more complex since x86-64 lacks [[virtual 8086 mode]]. DOS itself is not aware of that, and no benefits should be expected unless running DOS in an emulation with an adequate virtualization driver backend, for example: the mass storage interface.\n\n=== Linux ===\n{{See also|Comparison of Linux distributions#Instruction set architecture support}}\n\n[[Linux]] was the first operating system kernel to run the x86-64 architecture in [[long mode]], starting with the 2.4 version in 2001 (preceding the hardware's availability).<ref>{{cite web |title=Porting Linux to x86-64 |author=Andi Kleen |url=http://www.x86-64.org/pipermail/announce/2001-June/000020.html |date=June 26, 2001 |quote=Status: The kernel, compiler, tool chain work. The kernel boots and work on simulator and is used for porting of userland and running programs |url-status=dead |archiveurl=https://web.archive.org/web/20100910014057/http://www.x86-64.org/pipermail/announce/2001-June/000020.html |archivedate=September 10, 2010 |df=mdy }}</ref><ref>{{cite web |url= http://www.halobates.de/ |title= Andi Kleen's Page |author= Andi Kleen |quote= This was the original paper describing the Linux x86-64 kernel port back when x86-64 was only available on simulators.}}</ref> Linux also provides backward compatibility for running 32-bit executables. This permits programs to be recompiled into long mode while retaining the use of 32-bit programs. Several Linux distributions currently ship with x86-64-native kernels and [[userland (computing)|userlands]]. Some, such as [[Arch Linux]],<ref>{{cite web |url= https://wiki.archlinux.org/index.php/Arch64_FAQ |title= Arch64 FAQ |date= April 23, 2012 |quote= You can either use the multilib packages or a i686 chroot.}}</ref> [[SUSE Linux|SUSE]], [[Mandriva Linux|Mandriva]], and [[Debian]] allow users to install a set of 32-bit components and libraries when installing off a 64-bit DVD, thus allowing most existing 32-bit applications to run alongside the 64-bit OS. Other distributions, such as [[Fedora (operating system)|Fedora]], [[Slackware]] and [[Ubuntu (operating system)|Ubuntu]], are available in one version compiled for a 32-bit architecture and another compiled for a 64-bit architecture. Fedora and [[Red Hat Enterprise Linux]] allow concurrent installation of all userland components in both 32 and 64-bit versions on a 64-bit system.\n\n[[x32 ABI]] (Application Binary Interface), introduced in Linux 3.4, allows programs compiled for the x32 ABI to run in the 64-bit mode of x86-64 while only using 32-bit pointers and data fields.<ref name=\"x32ABIHOnline\">{{cite news\n |url = http://www.h-online.com/open/features/Kernel-Log-x32-ABI-gets-around-64-bit-drawbacks-1342061.html\n |archiveurl = https://web.archive.org/web/20111028081253/http://www.h-online.com/open/features/Kernel-Log-x32-ABI-gets-around-64-bit-drawbacks-1342061.html\n |archivedate = October 28, 2011\n |title = Kernel Log: x32 ABI gets around 64-bit drawbacks\n |publisher = www.h-online.com\n |author = Thorsten Leemhuis\n |date = September 13, 2011\n |accessdate = November 1, 2011\n |url-status = dead\n |df = mdy-all\n }}</ref><ref name=\"x32ABILinuxPlumbers\">{{cite news\n |url       = http://linuxplumbersconf.org/2011/ocw/sessions/531\n |title     = x32 - a native 32-bit ABI for x86-64\n |publisher = linuxplumbersconf.org\n |accessdate= November 1, 2011}}</ref><ref name=\"x32ABIDevelopmentGroup\">{{cite news\n |url       = http://sites.google.com/site/x32abi/\n |title     = x32-abi\n |publisher = Google Sites\n |accessdate= November 1, 2011}}</ref>\nThough this limits the program to a virtual address space of 4&nbsp;GB it also decreases the memory footprint of the program and in some cases can allow it to run faster.<ref name=\"x32ABIHOnline\"/><ref name=\"x32ABILinuxPlumbers\"/><ref name=\"x32ABIDevelopmentGroup\"/>\n\n64-bit Linux allows up to 128&nbsp;[[Terabyte|TB]] of virtual address space for individual processes, and can address approximately 64&nbsp;TB of physical memory, subject to processor and system limitations.<ref name=\"DebianAMD64\">{{cite news\n |url       = http://www.debian.org/ports/amd64/\n |title     = AMD64 Port\n |publisher = debian.org\n |accessdate= October 29, 2011}}</ref>\n\n=== macOS ===\nMac OS X 10.4.7 and higher versions of [[Mac OS X Tiger|Mac OS X 10.4]] run 64-bit command-line tools using the POSIX and math libraries on 64-bit Intel-based machines, just as all versions of Mac OS X 10.4 and 10.5 run them on 64-bit PowerPC machines. No other libraries or frameworks work with 64-bit applications in Mac OS X 10.4.<ref>{{cite web\n |url        = https://developer.apple.com/releasenotes/DeveloperTools/RN-CompilerTools/index.html\n |archiveurl = https://web.archive.org/web/20090422045532/http://developer.apple.com/releasenotes/DeveloperTools/RN-CompilerTools/index.html\n |archivedate= April 22, 2009\n |title      = Apple \u2013 Mac OS X Xcode 2.4 Release Notes: Compiler Tools\n |publisher  = [[Apple Inc.]]\n |date       = April 11, 2007\n |accessdate = November 19, 2012}}</ref>\nThe kernel, and all kernel extensions, are 32-bit only.\n\n[[Mac OS X Leopard|Mac OS X 10.5]] supports 64-bit GUI applications using [[Cocoa (API)|Cocoa]], [[Quartz (graphics layer)|Quartz]], [[OpenGL]], and [[X11]] on 64-bit Intel-based machines, as well as on 64-bit [[PowerPC]] machines.<ref>{{cite web\n |url        = https://www.apple.com/macosx/technology/64bit.html\n |archiveurl = https://web.archive.org/web/20090112055017/http://www.apple.com/macosx/technology/64bit.html\n |archivedate= January 12, 2009\n |title      = Apple \u2013 Mac OS X Leopard \u2013 Technology - 64-bit\n |publisher  = Apple Inc.\n |accessdate = November 19, 2012}}</ref>\nAll non-GUI libraries and frameworks also support 64-bit applications on those platforms. The kernel, and all kernel extensions, are 32-bit only.\n\n[[Mac OS X Snow Leopard|Mac OS X 10.6]] is the first version of [[macOS]] that supports a 64-bit [[Kernel (computing)|kernel]]. However, not all 64-bit computers can run the 64-bit kernel, and not all 64-bit computers that can run the 64-bit kernel will do so by default.<ref>{{cite web\n |title      = Mac OS X v10.6: Macs that use the 64-bit kernel\n |url        = http://support.apple.com/kb/HT3770\n |publisher  = Apple Inc.\n |accessdate = November 29, 2012}}</ref>\nThe 64-bit kernel, like the 32-bit kernel, supports 32-bit applications; both kernels also support 64-bit applications. 32-bit applications have a virtual address space limit of 4&nbsp;GB under either kernel.<ref name=\"arstechnicaMacOSX64bit\">{{cite web\n |url        = https://arstechnica.com/apple/reviews/2009/08/mac-os-x-10-6.ars/5\n |title      = Mac OS X 10.6 Snow Leopard: the Ars Technica review\n |publisher  = Ars Technica LLC\n |author     = John Siracusa\n |accessdate = June 20, 2010}}</ref><ref name=\"Apple64Bit\">{{cite web\n |url        = https://www.apple.com/macosx/technology/#sixtyfourbit\n |archiveurl = https://web.archive.org/web/20110328170107/http://www.apple.com/macosx/technology/#sixtyfourbit\n |archivedate= March 28, 2011\n |title      = Mac OS X Technology\n |publisher  = Apple Inc.\n |accessdate = November 19, 2012}}</ref>\n\n[[OS X Mountain Lion|OS X 10.8]] includes only the 64-bit kernel, but continues to support 32-bit applications.\n\n[[macOS Catalina|macOS 10.15]] includes only the 64-bit kernel and no longer supports 32-bit applications.\n\nThe 64-bit kernel does not support 32-bit [[loadable kernel module|kernel extensions]], and the 32-bit kernel does not support 64-bit kernel extensions.\n\nmacOS uses the [[universal binary]] format to package 32- and 64-bit versions of application and library code into a single file; the most appropriate version is automatically selected at load time. In Mac OS X 10.6, the universal binary format is also used for the kernel and for those kernel extensions that support both 32-bit and 64-bit kernels.\n\n=== Solaris ===\n{{see also|illumos}}\n[[Solaris (operating system)|Solaris]] 10 and later releases support the x86-64 architecture.\n\nFor Solaris 10, just as with the [[SPARC]] architecture, there is only one operating system image, which contains a 32-bit kernel and a 64-bit kernel; this is labeled as the \"x64/x86\" DVD-ROM image. The default behavior is to boot a 64-bit kernel, allowing both 64-bit and existing or new 32-bit executables to be run. A 32-bit kernel can also be manually selected, in which case only 32-bit executables will run. The <code>isainfo</code> command can be used to determine if a system is running a 64-bit kernel.\n\nFor Solaris 11, only the 64-bit kernel is provided. However, the 64-bit kernel supports both 32- and 64-bit executables, libraries, and system calls.\n\n=== Windows ===\nx64 editions of Microsoft Windows client and server\u2014[[Windows XP Professional x64 Edition]] and [[Windows Server 2003]] x64 Edition\u2014were released in March 2005.<ref>{{Cite web|url=http://news.microsoft.com/2005/04/25/microsoft-raises-the-speed-limit-with-the-availability-of-64-bit-editions-of-windows-server-2003-and-windows-xp-professional/#sm.0000kw91cdgntf2kwp82ed9a9yn4e|title=Microsoft Raises the Speed Limit with the Availability of 64-Bit Editions of Windows Server 2003 and Windows XP Professional {{!}} News Center|website=news.microsoft.com|access-date=August 14, 2016}}</ref> Internally they are actually the same build (5.2.3790.1830 SP1),<ref>{{Cite web|url=https://support.microsoft.com/en-gb/kb/888733|title=A description of the x64-based versions of Windows Server 2003 and of Windows XP Professional x64 Edition|last=|first=|date=|website=Microsoft Support|publisher=|access-date=August 14, 2016}}</ref><ref>{{Cite web|url=https://www.microsoft.com/en-us/download/details.aspx?id=3725|title=Windows Server 2003 SP1 Administration Tools Pack|website=Microsoft Download Center|access-date=August 14, 2016|archive-url=https://web.archive.org/web/20160827033240/http://www.microsoft.com/en-us/download/details.aspx?id=3725|archive-date=August 27, 2016|url-status=dead|df=mdy-all}}</ref> as they share the same source base and operating system binaries, so even system updates are released in unified packages, much in the manner as Windows 2000 Professional and Server editions for x86. [[Windows Vista]], which also has many different editions, was released in January 2007. [[Windows&nbsp;7]] was released in July 2009. [[Windows Server 2008 R2]] was sold in only x64 and Itanium editions; later versions of Windows Server only offer an x64 edition.\n\nVersions of Windows for x64 prior to Windows 8.1 and Windows Server 2012 R2 offer the following:\n* 8&nbsp;TB of virtual address space per process, accessible from both user mode and kernel mode, referred to as the user mode address space. An x64 program can use all of this, subject to backing store limits on the system, and provided it is linked with the \"large address aware\" option.<ref name=\"VSdocLAA\">{{cite web\n |url        = http://msdn.microsoft.com/en-us/library/wz223b1z(VS.80).aspx\n |title      = /LARGEADDRESSAWARE (Handle Large Addresses)\n |quote      = The /LARGEADDRESSAWARE option tells the linker that the application can handle addresses larger than 2&nbsp;gigabytes.\n |work       = Visual Studio 2005 Documentation \u2013 Visual C++ \u2013 Linker Options\n |publisher  = Microsoft\n |accessdate = June 19, 2010\n}}</ref> This is a 4096-fold increase over the default 2&nbsp;GB user-mode virtual address space offered by 32-bit Windows.<ref name=\"Pietrek64BitWindowsProgramming\">{{cite web\n |url        = http://msdn.microsoft.com/en-us/magazine/cc300794.aspx\n |title      = Everything You Need To Know To Start Programming 64-Bit Windows Systems\n |publisher  = Microsoft\n |author     = [[Matt Pietrek]]\n |date       = May 2006\n |accessdate = May 24, 2010\n}}</ref><ref name=\"MicrosoftMoveTox64\">{{cite web\n |url        = https://technet.microsoft.com/en-us/magazine/2006.01.insidemscom.aspx\n |title      = Making the Move to x64\n |publisher  = Microsoft\n |author     = Chris St. Amand\n |date       = January 2006\n |accessdate = May 24, 2010\n}}</ref>\n* 8&nbsp;TB of kernel mode virtual address space for the operating system.<ref name=\"Pietrek64BitWindowsProgramming\"/> As with the user mode address space, this is a 4096-fold increase over 32-bit Windows versions. The increased space primarily benefits the file system cache and kernel mode \"heaps\" (non-paged pool and paged pool). Windows only uses a total of 16&nbsp;TB out of the 256&nbsp;TB implemented by the processors because early AMD64 processors lacked a <code>CMPXCHG16B</code> instruction.<ref>{{cite web\n |title      = Behind Windows x86-64\u2019s 44-bit Virtual Memory Addressing Limit\n |url        = http://www.alex-ionescu.com/?p=50\n |accessdate = July 2, 2009\n}}</ref>\n\nUnder Windows 8.1 and Windows Server 2012 R2, both user mode and kernel mode virtual address spaces have been extended to 128&nbsp;TB.<ref name=\"win-lim-msdn\"/> These versions of Windows will not install on processors that lack the <code>CMPXCHG16B</code> instruction.\n\nThe following additional characteristics apply to all x64 versions of Windows:\n\n* Ability to run existing 32-bit applications (<code>.exe</code> programs) and dynamic link libraries (<code>.dll</code>s) using [[WoW64]] if WoW64 is supported on that version. Furthermore, a 32-bit program, if it was linked with the \"large address aware\" option,<ref name=\"VSdocLAA\"/> can use up to 4&nbsp;GB of virtual address space in 64-bit Windows, instead of the default 2&nbsp;GB (optional 3&nbsp;GB with <code>/3GB</code> boot option and \"large address aware\" link option) offered by 32-bit Windows.<ref name=\"64-bitProgrammingGameDevelopers\">{{cite web\n |url       = http://msdn.microsoft.com/en-us/library/ee418798(VS.85).aspx#Porting_to_64bit\n |title     = 64-bit programming for Game Developers\n |accessdate= August 21, 2013\n}}</ref> Unlike the use of the <code>/3GB</code> boot option on x86, this does not reduce the kernel mode virtual address space available to the operating system. 32-bit applications can, therefore, benefit from running on x64 Windows even if they are not recompiled for x86-64.\n* Both 32- and 64-bit applications, if not linked with \"large address aware,\" are limited to 2&nbsp;GB of virtual address space.\n* Ability to use up to 128&nbsp;GB (Windows XP/Vista), 192&nbsp;GB (Windows&nbsp;7), 512&nbsp;GB (Windows&nbsp;8), 1&nbsp;TB (Windows Server 2003), 2&nbsp;TB (Windows Server 2008/Windows 10), 4&nbsp;TB (Windows Server 2012), or 24&nbsp;TB (Windows Server 2016/2019) of physical random access memory (RAM).<ref>{{cite web\n |url        = http://msdn.microsoft.com/en-us/library/aa366778(VS.85).aspx\n |title      = Memory Limits for Windows Releases\n |publisher  = Microsoft\n |accessdate = February 20, 2013}}</ref>\n* [[LLP64]] data model: \"int\" and \"long\" types are 32&nbsp;bits wide, long long is 64&nbsp;bits, while pointers and types derived from pointers are 64&nbsp;bits wide.\n* Kernel mode device drivers must be 64-bit versions; there is no way to run 32-bit kernel mode executables within the 64-bit operating system. User mode device drivers can be either 32-bit or 64-bit.\n* 16-bit Windows (Win16) and DOS applications will not run on x86-64 versions of Windows due to the removal of the [[virtual DOS machine]] subsystem (NTVDM) which relied upon the ability to use virtual 8086 mode. Virtual 8086 mode cannot be entered while running in long mode.\n* Full implementation of the [[NX bit|NX]] (No Execute) page protection feature. This is also implemented on recent 32-bit versions of Windows when they are started in PAE mode.\n* Instead of FS segment descriptor on x86 versions of the [[Windows NT]] family, GS segment descriptor is used to point to two operating system defined structures: Thread Information Block (NT_TIB) in user mode and Processor Control Region (KPCR) in kernel mode. Thus, for example, in user mode <code>GS:0</code> is the address of the first member of the Thread Information Block. Maintaining this convention made the x86-64 port easier, but required AMD to retain the function of the FS and GS segments in long mode \u2013 even though segmented addressing ''per se'' is not really used by any modern operating system.<ref name=\"Pietrek64BitWindowsProgramming\"/>\n* Early reports claimed that the operating system scheduler would not save and restore the x87 FPU machine state across thread context switches. Observed behavior shows that this is not the case: the x87 state is saved and restored, except for kernel mode-only threads (a limitation that exists in the 32-bit version as well). The most recent documentation available from Microsoft states that the x87/MMX/3DNow! instructions may be used in long mode, but that they are deprecated and may cause compatibility problems in the future.<ref name=\"64-bitProgrammingGameDevelopers\"/>\n<!--- is there a way to use quotes with named refs?\n |quote=The x87, MMX, and 3DNow! instruction sets are deprecated in 64-bit modes.--->\n* Some components like [[Microsoft Jet Database Engine]] and [[Data Access Objects]] will not be ported to 64-bit architectures such as x86-64 and IA-64.<ref>[http://msdn2.microsoft.com/en-us/library/aa384190.aspx Microsoft Developer Network \u2013 General Porting Guidelines (64-bit Windows Programming)]</ref><ref>[http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnmdac/html/data_mdacroadmap.asp Microsoft Developer Network \u2013 Data Access Road Map]{{dead link|date=July 2016 |bot=InternetArchiveBot |fix-attempted=yes }}</ref>\n* [[Microsoft Visual Studio]] can compile [[native code|native applications]] to target either the x86-64 architecture, which can run only on 64-bit Microsoft Windows, or the [[IA-32]] architecture, which can run as a 32-bit application on 32-bit Microsoft Windows or 64-bit Microsoft Windows in [[WoW64]] emulation mode. [[Managed code|Managed applications]] can be compiled either in IA-32, x86-64 or AnyCPU modes. Software created in the first two modes behave like their IA-32 or x86-64 native code counterparts respectively; When using the AnyCPU mode, however, applications in 32-bit versions of Microsoft Windows run as 32-bit applications, while they run as a 64-bit application in 64-bit editions of Microsoft Windows.\n\n== Video game consoles ==\nBoth [[PlayStation 4]] and [[Xbox One]] and their successors incorporate AMD x86-64 processors, based on the [[Jaguar (microarchitecture)|Jaguar]] [[microarchitecture]].<ref name=XboxOneMay2013Anandtechcomparison>{{cite news |title= The Xbox&nbsp;One: Hardware Analysis & Comparison to PlayStation&nbsp;4 |author= Anand Lal Shimpi |publisher= Anandtech |url= http://www.anandtech.com/show/6972/xbox-one-hardware-compared-to-playstation-4/2 |date= May 21, 2013 |accessdate= May 22, 2013}}</ref><ref name=XboxOneMay2013SpecGameinformer>{{cite web |url= http://www.gameinformer.com/b/news/archive/2013/05/21/the-tech-spec-test-xbox-one-vs-playstation-4.aspx |title= The Tech Spec Test: Xbox&nbsp;One Vs. PlayStation&nbsp;4 |publisher= Game Informer |date= May 21, 2013 |accessdate= May 22, 2013}}</ref> Firmware and games are written in x86-64 code; no legacy x86 code is involved.\n\n== Industry naming conventions ==\nSince AMD64 and Intel 64 are substantially similar, many software and hardware products use one vendor-neutral term to indicate their compatibility with both implementations. AMD's original designation for this processor architecture, \"x86-64\", is still sometimes used for this purpose,<ref name=\"apple-x86-64\"/> as is the variant \"x86_64\".<ref name=\"apple-x86_64-arch-manpage\"/><ref name=\"apple-x86_64-email\"/> Other companies, such as [[Microsoft]]<ref name=\"ms-x64\"/> and [[Sun Microsystems]]/[[Oracle Corporation]],<ref name=\"solaris-x64\"/> use the contraction \"x64\" in marketing material.\n\nThe term [[IA-64]] refers to the [[Itanium]] processor, and should not be confused with x86-64, as it is a completely different instruction set.\n\nMany operating systems and products, especially those that introduced x86-64 support prior to Intel's entry into the market, use the term \"AMD64\" or \"amd64\" to refer to both AMD64 and Intel 64.\n* '''amd64'''\n** Most [[BSD]] systems such as [[FreeBSD]], [[MidnightBSD]], [[NetBSD]] and [[OpenBSD]] refer to both AMD64 and Intel 64 under the architecture name \"amd64\".\n** Some [[Linux distribution]]s such as [[Debian]], [[Ubuntu (operating system)|Ubuntu]], [[Gentoo Linux]] refer to both AMD64 and Intel 64 under the architecture name \"amd64\".\n** [[Microsoft Windows]]'s x64 versions use the AMD64 moniker internally to designate various components which use or are compatible with this architecture. For example, the [[environment variable]] PROCESSOR_ARCHITECTURE is assigned the value \"AMD64\" as opposed to \"x86\" in 32-bit versions, and the system directory on a Windows x64 Edition installation CD-ROM is named \"AMD64\", in contrast to \"i386\" in 32-bit versions.<ref>[http://msdn.microsoft.com/en-us/library/microsoft.build.utilities.processorarchitecture_fields.aspx ProcessorArchitecture Fields]</ref>\n** Sun's [[Solaris (operating system)|Solaris]]' ''isalist'' command identifies both AMD64- and Intel 64-based systems as \"amd64\".\n** [[Java Development Kit]] (JDK): the name \"amd64\" is used in directory names containing x86-64 files.\n* '''x86_64'''\n** The [[Linux kernel]]<ref>{{cite web | url = http://lxr.linux.no/#linux+v3.7.8/arch/x86/configs/x86_64_defconfig | title = An example file from Linux 3.7.8 kernel source tree displaying the usage of the term x86_64 | accessdate = February 17, 2013 | url-status = dead | archiveurl = https://web.archive.org/web/20050923210216/http://lxr.linux.no/#linux+v3.7.8/arch/x86/configs/x86_64_defconfig | archivedate = September 23, 2005 | df = mdy-all }}</ref> and the [[GNU Compiler Collection]] refers to 64-bit architecture as \"x86_64\".\n** Some Linux distributions, such as [[Fedora (operating system)|Fedora]], [[openSUSE]], [[Arch Linux]], [[Gentoo Linux]] refer to this 64-bit architecture as \"x86_64\".\n** Apple [[macOS]] refers to 64-bit architecture as \"x86-64\" or \"x86_64\", as seen in the Terminal command <code>arch</code><ref name=\"apple-x86_64-arch-manpage\"/> and in their developer documentation.<ref name=\"apple-x86-64\"/><ref name=\"apple-x86_64-email\"/>\n** Breaking with most other BSD systems, [[DragonFly BSD]] refers to 64-bit architecture as \"x86_64\".\n** [[Haiku (operating system)|Haiku]] refers to 64-bit architecture as \"x86_64\".\n\n== Licensing ==\nx86-64/AMD64 was solely developed by AMD. AMD holds patents on techniques used in AMD64;<ref>{{patent|US|6877084}}</ref><ref>{{patent|US|6889312}}</ref><ref>{{patent|US|6732258}}</ref> those patents must be licensed from AMD in order to implement AMD64. Intel entered into a cross-licensing agreement with AMD, licensing to AMD their patents on existing x86 techniques, and licensing from AMD their patents on techniques used in x86-64.<ref>{{cite web\n |url=http://contracts.corporate.findlaw.com/agreements/amd/intel.license.2001.01.01.html \n |title=Patent Cross License Agreement Between AMD and Intel \n |accessdate=August 23, 2009 \n |date=January 1, 2001 \n |url-status=dead \n |archiveurl=https://web.archive.org/web/20070621084244/http://contracts.corporate.findlaw.com/agreements/amd/intel.license.2001.01.01.html \n |archivedate=June 21, 2007 \n}}</ref> In 2009, AMD and Intel settled several lawsuits and cross-licensing disagreements, extending their cross-licensing agreements.<ref>{{cite web |url = https://www.sec.gov/Archives/edgar/data/2488/000119312509236705/dex101.htm |title = AMD Intel Settlement Agreement}}</ref><ref>{{cite web |url= http://news.cnet.com/8301-1001_3-10396188-92.html |publisher= CNET |author= Stephen Shankland and Jonathan E. Skillings |title= Intel to pay AMD $1.25 billion in antitrust settlement |date= November 12, 2009 |accessdate= April 24, 2012}}</ref><ref>{{cite web|last1=Smith|first1=Ryan|title=AMD and Intel Settle Their Differences: AMD Gets To Go Fabless|url=http://www.anandtech.com/show/2873|website=AnandTech|archiveurl=https://web.archive.org/web/20100513042947/http://www.anandtech.com/show/2873|archivedate=May 13, 2010|date=November 12, 2009}}</ref>\n\n== See also ==\n* [[AMD Generic Encapsulated Software Architecture]] (AGESA)\n\n==Notes ==\n{{reflist|group=note}}\n\n== References==\n{{reflist|30em}}\n\n== External links ==\n* [https://developer.amd.com/resources/developer-guides-manuals/ AMD Developer Guides, Manuals & ISA Documents]\n* [http://www.stanford.edu/class/ee380/Abstracts/O00927.html x86-64: Extending the x86 architecture to 64-bits] \u2013 technical talk by the architect of AMD64 ([https://web.archive.org/web/20100813052749/http://stanford-online.stanford.edu/courses/ee380/000927-ee380-100.asx video archive]), and [http://www.stanford.edu/class/ee380/Abstracts/040107.html second talk by the same speaker] ([https://web.archive.org/web/20100813100133/http://stanford-online.stanford.edu/courses/ee380/040107-ee380-100.asx video archive])\n* [https://web.archive.org/web/20060623073619/http://www.xbitlabs.com/news/other/display/20041227094638.html AMD's \"Enhanced Virus Protection\"]\n* [https://www.theregister.co.uk/2005/08/23/intel_fixes_em64t/ Intel tweaks EM64T for full AMD64 compatibility]\n* [http://www.extremetech.com/extreme/56018-analyst-intel-reverseengineered-amd64 Analyst: Intel Reverse-Engineered AMD64]\n* [http://marc.info/?l=linux-kernel&m=107766481408468&w=2 Early report of differences between Intel IA32e and AMD64]\n* [ftp://gcc.gnu.org/pub/gcc/summit/2003/Porting%20to%2064%20bit.pdf Porting to 64-bit GNU/Linux Systems], by Andreas Jaeger from [[GCC Summit]] 2003. An excellent paper explaining almost all practical aspects for a transition from 32-bit to 64-bit.\n* [http://www.intel.com/technology/intel64/index.htm Intel 64 Architecture]\n* [https://web.archive.org/web/20110403005033/http://software.intel.com/en-us/articles/all-about-64-bits/ Intel Software Network: \"64 bits\"]\n* [https://web.archive.org/web/20170222181811/http://www.turboirc.com/asm/ TurboIRC.COM tutorials, including examples of how to of enter protected and long mode the raw way from DOS]\n* [https://web.archive.org/web/20100123010204/http://software.intel.com/en-us/articles/seven-steps-of-migrating-a-program-to-a-64-bit-system/ Seven Steps of Migrating a Program to a 64-bit System]\n* [http://msdn.microsoft.com/en-us/library/aa366778%28VS.85%29.aspx Memory Limits for Windows Releases]\n\n<!-- [[Category:Advanced Micro Devices products]] category is added to the AMD64 redirect page instead of here, in order to make that name appear in the category listing rather than \"X86-64\"; -->\n[[Category:Computer-related introductions in 2003]]\n[[Category:X86 architecture]]\n[[Category:64-bit computers]]\n[[Category:Advanced Micro Devices technologies]]\n\n{{AMD technology}}\n", "name_user": "Dondervogel 2", "label": "safe", "comment": "\u2192\u200eArchitectural features:consistency", "url_page": "//en.wikipedia.org/wiki/X86-64"}
