{"title_page": "1991 World Championships in Athletics \u2013 Men's 100 metres", "text_new": "{{AthleticsAt1991WorldChampionships}}\n[[Image:TV-icon-2.svg|thumb|110px|'''{{Youtube|8gSOKcda-OQ}} Official video''']]\nThese are the official results of the '''[[100 metres|Men's 100 metres]]''' event at the '''[[1991 World Championships in Athletics|1991 IAAF World Championships]]''' in [[Tokyo, Japan]]. There were a total number of 77 participating athletes, with ten qualifying heats and the final held on Sunday 25 August 1991. The [[Men's 100 metres world record progression|world record]], [[List of African records in athletics|African record]], and [[Men's 100 metres European record progression|European record]] were broken by [[Carl Lewis]], [[Frankie Fredericks]], and [[Linford Christie]] respectively. The then world record holder [[Leroy Burrell]] also bettered his previous mark of 9.90&nbsp;seconds while [[Ray Stewart (athlete)|Ray Stewart]] set the Jamaican record for the event.<ref>[http://www2.iaaf.org/results/past/WCH91/data/M/100/Rf.html Results - 100 METRES - Men - Final]. [[IAAF]] (1991-08-25). Retrieved on 2009-05-19. [https://www.webcitation.org/5gwhx33JT Archived] 2009-05-21.</ref>\n\n==Medalists==\n{| class=\"wikitable\" style=\" text-align:center; font-size:110%;\" width=\"35%\"\n|-\n|bgcolor=\"gold\"|'''Gold'''||{{flagicon|USA}} [[Carl Lewis]]<br>''United States <small>(USA)</small>''\n|-\n|bgcolor=\"silver\"|'''Silver'''||{{flagicon|USA}} [[Leroy Burrell]]<br>''United States <small>(USA)</small>''\n|-\n|bgcolor=\"CC9966\"|'''Bronze'''||{{flagicon|USA}} [[Dennis Mitchell]]<br>''United States <small>(USA)</small>''\n|}\n\n==Schedule==\n*''All times are [[Japan Standard Time]] ([[UTC+9]])''\n{| class=\"wikitable\" style=\" text-align:center; font-size:110%;\" width=\"35%\"\n|-\n!Heats\n|-\n|24.08.1991 &ndash; 09:00h\n|-\n!Quarterfinals\n|-\n|24.08.1991 &ndash; 17:35h\n|-\n!Semifinals\n|-\n|25.08.1991 &ndash; 17:00h\n|-\n!Final\n|-\n|25.08.1991 &ndash; 19:05h\n|}\n\n==Records==\nExisting records at the start of the event.\n{| class=\"wikitable\" width=75%\n|-\n|'''World Record'''\n|{{flagathlete|[[Leroy Burrell]]|USA}}\n|'''9.90'''\n|[[New York City]], United States\n|June 14, 1991\n|-\n|'''Championship Record'''\n|{{flagathlete|[[Carl Lewis]]|USA}}\n|'''9.93'''\n|[[Rome]], Italy\n|August 30, 1987\n|}\n\n==Final==\n{| class=\"wikitable sortable\" width=75%\n|-\n! Rank\n! Athlete\n! Time\n|-\n|align=\"center\"|[[Image:Med 1.png]]\n|{{flagathlete|[[Carl Lewis]]|USA}}\n|align=\"center\"|'''9.86''' <small>[[Men's 100 metres world record progression|WR]]</small>\n|-\n|align=\"center\"|[[Image:Med 2.png]]\n|{{flagathlete|[[Leroy Burrell]]|USA}}\n|align=\"center\"|'''9.88''' <small>PB</small>\n|-\n|align=\"center\"|[[Image:Med 3.png]]\n|{{flagathlete|[[Dennis Mitchell]]|USA}}\n|align=\"center\"|'''9.91''' <small>PB</small>\n|-\n|align=\"center\"|4.\n|{{flagathlete|[[Linford Christie]]|GBR}}\n|align=\"center\"|'''9.92''' <small>[[List of European records in athletics|AR]]</small>\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Frankie Fredericks]]|NAM}}\n|align=\"center\"|'''9.95''' <small>[[List of African records in athletics|AR]]</small>\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Ray Stewart (athlete)|Raymond Stewart]]|JAM}}\n|align=\"center\"|'''9.96''' <small>NR</small>\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Robson da Silva|Robson Caetano da Silva]]|BRA|1968}}\n|align=\"center\"|'''10.12'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Bruny Surin]]|CAN}}\n|align=\"center\"|'''10.14'''\n|}\n\n==Semifinals==\n*Held on Sunday 1991-08-25\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 1\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Carl Lewis]]|USA}}\n|align=\"center\"|'''9.93''' <small>ECR</small>\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Frankie Fredericks]]|NAM}}\n|align=\"center\"|'''10.02'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Bruny Surin]]|CAN}}\n|align=\"center\"|'''10.07''' <small>PB</small>\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|4.\n|{{flagathlete|[[Robson da Silva|Robson Caetano da Silva]]|BRA|1968}}\n|align=\"center\"|'''10.13'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Olapade Adeniken]]|NGR}}\n|align=\"center\"|'''10.17'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Jean-Olivier Zirignon]]|CIV}}\n|align=\"center\"|'''10.25'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Salaam Gariba]]|GHA}}\n|align=\"center\"|'''10.37'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Michael Green (sprinter)|Michael Green]]|JAM}}\n|align=\"center\"|'''10.38'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 2\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Leroy Burrell]]|USA}}\n|align=\"center\"|'''9.94'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Dennis Mitchell]]|USA}}\n|align=\"center\"|'''9.99'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Linford Christie]]|GBR}}\n|align=\"center\"|'''9.99'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|4.\n|{{flagathlete|[[Ray Stewart (athlete)|Raymond Stewart]]|JAM}}\n|align=\"center\"|'''10.03'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Daniel Sangouma]]|FRA}}\n|align=\"center\"|'''10.18'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Atlee Mahorn]]|CAN}}\n|align=\"center\"|'''10.18'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Davidson Ezinwa]]|NGR}}\n|align=\"center\"|'''10.20'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Ezio Madonia]]|ITA}}\n|align=\"center\"|'''10.33'''\n|}\n\n==Quarterfinals==\n*Held on Saturday 1991-08-24\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 1\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Ray Stewart (athlete)|Raymond Stewart]]|JAM}}\n|align=\"center\"|'''10.02'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Dennis Mitchell]]|USA}}\n|align=\"center\"|'''10.05'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Davidson Ezinwa]]|NGR}}\n|align=\"center\"|'''10.23'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|4.\n|{{flagathlete|[[Ezio Madonia]]|ITA}}\n|align=\"center\"|'''10.24'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Max Morini\u00e8re]]|FRA}}\n|align=\"center\"|'''10.24'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Vitaliy Savin]]|URS}}\n|align=\"center\"|'''10.26'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Jacek Marlicki]]|POL}}\n|align=\"center\"|'''10.38'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Tetsuya Yamashita]]|JPN}}\n|align=\"center\"|'''10.56'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 2\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Carl Lewis]]|USA}}\n|align=\"center\"|'''9.80'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Linford Christie]]|GBR}}\n|align=\"center\"|'''9.90'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Bruny Surin]]|CAN}}\n|align=\"center\"|'''10.01'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|4.\n|{{flagathlete|[[Michael Green (sprinter)|Michael Green]]|JAM}}\n|align=\"center\"|'''10.18'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Emmanuel Tuffour]]|GHA}}\n|align=\"center\"|'''10.19'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Arnaldo da Silva]]|BRA}}\n|align=\"center\"|'''10.32'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Carlos Moreno (athlete)|Carlos Moreno]]|CHI}}\n|align=\"center\"|'''10.40'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Chidi Imoh]]|NGR}}\n|align=\"center\"|'''10.46'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 3\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Leroy Burrell]]|USA}}\n|align=\"center\"|'''10.11'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Daniel Sangouma]]|FRA}}\n|align=\"center\"|'''10.23'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Jean-Olivier Zirignon]]|CIV}}\n|align=\"center\"|'''10.30'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|4.\n|{{flagathlete|[[Salaam Gariba]]|GHA}}\n|align=\"center\"|'''10.43'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Darren Braithwaite]]|GBR}}\n|align=\"center\"|'''10.45'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Menelik Lawson]]|TOG}}\n|align=\"center\"|'''10.60'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Tatsuo Sugimoto]]|JPN}}\n|align=\"center\"|'''10.61'''\n|-\n|align=\"center\"|&mdash;\n|{{flagathlete|[[Andreas Berger]]|AUT}}\n|align=\"center\"|'''DNS'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 4\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Frankie Fredericks]]|NAM}}\n|align=\"center\"|'''9.89'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Olapade Adeniken]]|NGR}}\n|align=\"center\"|'''10.00'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Atlee Mahorn]]|CAN}}\n|align=\"center\"|'''10.01'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|4.\n|{{flagathlete|[[Robson da Silva|Robson Caetano da Silva]]|BRA|1968}}\n|align=\"center\"|'''10.08'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Satoru Inoue]]|JPN}}\n|align=\"center\"|'''10.21'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Oleh Kramarenko (sprinter)|Oleh Kramarenko]]|URS}}\n|align=\"center\"|'''10.23'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Attila Kov\u00e1cs (athlete)|Attila Kov\u00e1cs]]|HUN}}\n|align=\"center\"|'''10.32'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Charles-Louis Seck]]|SEN}}\n|align=\"center\"|'''10.46'''\n|}\n\n==Qualifying heats==\n*Held on Saturday 1991-08-24\n\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 1\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Daniel Sangouma]]|FRA}}\n|align=\"center\"|'''10.27'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Darren Braithwaite]]|GBR}}\n|align=\"center\"|'''10.31'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Menelik Lawson]]|TOG}}\n|align=\"center\"|'''10.38'''\n|- style=\"background:#ddffdd;\"\n|align=\"center\"|4.\n|{{flagathlete|[[Chidi Imoh]]|NGR}}\n|align=\"center\"|'''10.42'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Neville Hodge]]|ISV}}\n|align=\"center\"|'''10.51'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Thabani Gonye]]|ZIM}}\n|align=\"center\"|'''10.92'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Botlhoko Shebe]]|LES|1987}}\n|align=\"center\"|'''10.96'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Ahmed Shageef]]|MDV}}\n|align=\"center\"|'''11.18'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 2\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Frank Fredericks]]|NAM}}\n|align=\"center\"|'''10.21'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Emmanuel Tuffour]]|GHA}}\n|align=\"center\"|'''10.36'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Jacek Malicki]]|TOG}}\n|align=\"center\"|'''10.49'''\n|- \n|align=\"center\"|4.\n|{{flagathlete|[[Daniel Cojocaru]]|ROM}}\n|align=\"center\"|'''10.51'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Sun-Kuk Jin]]|KOR}}\n|align=\"center\"|'''10.67'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Visut Watanasin]]|THA}}\n|align=\"center\"|'''10.68'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Mark Sherwin]]|COK}}\n|align=\"center\"|'''11.35'''\n|-\n|align=\"center\"|\n|{{flagathlete|[[Karim Abdul (sprinter)|Karim Abdul]]|AFG|1987}}\n|align=\"center\"|'''DNS'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 3\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Dennis Mitchell]]|USA}}\n|align=\"center\"|'''10.27'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Michael Green (sprinter)|Michael Green]]|JAM}}\n|align=\"center\"|'''10.38'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Salaam Gariba]]|GHA}}\n|align=\"center\"|'''10.38'''\n|- \n|align=\"center\"|4.\n|{{flagathlete|[[Joel Lamela]]|CUB}}\n|align=\"center\"|'''10.53'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Kennedy Ondiek]]|KEN}}\n|align=\"center\"|'''10.57'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Joel Otim]]|UGA}}\n|align=\"center\"|'''11.06'''\n|-\n|align=\"center\"|\n|{{flagathlete|[[Mohamed Abderrehin]]|LBA|1977}}\n|align=\"center\"|'''DNS'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 4\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Leroy Burrell]]|USA}}\n|align=\"center\"|'''10.17'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Jean-Olivier Zirignon]]|CIV}}\n|align=\"center\"|'''10.20'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Arnaldo Oliveira Silva]]|BRA|1968}}\n|align=\"center\"|'''10.42'''\n|- \n|align=\"center\"|4.\n|{{flagathlete|[[Steffen Bringmann]]|GER}}\n|align=\"center\"|'''10.47'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Jason Livingston]]|GBR}}\n|align=\"center\"|'''10.57'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Florencio Aguilar]]|PAN}}\n|align=\"center\"|'''10.85'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Dudley Den Dulk]]|AHO}}\n|align=\"center\"|'''11.10'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 5\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Davidson Ezinwa]]|NGR}}\n|align=\"center\"|'''10.25'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Max Morini\u00e9re]]|FRA}}\n|align=\"center\"|'''10.28'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Oleh Kramarenko (sprinter)|Oleh Kramarenko]]|URS}}\n|align=\"center\"|'''10.36'''\n|- style=\"background:#ddffdd;\"\n|align=\"center\"|4.\n|{{flagathlete|[[Attila Kov\u00e1cs (athlete)|Attila Kov\u00e1cs]]|HUN}}\n|align=\"center\"|'''10.39'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Juan Jesus Trapero]]|ESP}}\n|align=\"center\"|'''10.44'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Eduardo Nava]]|MEX}}\n|align=\"center\"|'''10.56'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Edmund Estaphane]]|LCA|1979}}\n|align=\"center\"|'''10.62'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Trevor Davis (athlete)|Trevor Davis]]|AIA}}\n|align=\"center\"|'''11.16'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 6\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Ray Stewart (athlete)|Raymond Stewart]]|JAM}}\n|align=\"center\"|'''10.17'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Robson Caetano da Silva]]|BRA|1968}}\n|align=\"center\"|'''10.24'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Tatsuo Sugimoto]]|JPN}}\n|align=\"center\"|'''10.58'''\n|- \n|align=\"center\"|4.\n|{{flagathlete|[[Valentin Atanasov]]|BUL}}\n|align=\"center\"|'''10.63'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Khalid Juma]]|BHR|1972}}\n|align=\"center\"|'''10.68'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Ousmane Diarra (Malian athlete)|Ousmane Diarra]]|MLI}}\n|align=\"center\"|'''10.69'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Jerry Jeremiah]]|VAN}}\n|align=\"center\"|'''10.82'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Fred Rocio]]|GUM}}\n|align=\"center\"|'''12.27'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 7\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Linford Christie]]|GBR}}\n|align=\"center\"|'''10.39'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Satoru Inoue]]|JPN}}\n|align=\"center\"|'''10.47'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Charles-Louis Seck]]|SEN}}\n|align=\"center\"|'''10.60'''\n|- \n|align=\"center\"|4.\n|{{flagathlete|[[Eric Haynes]]|SKN}}\n|align=\"center\"|'''10.82'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Franck Zio]]|BUR}}\n|align=\"center\"|'''10.93'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Erwin Heru]]|INA}}\n|align=\"center\"|'''11.14'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Tryson Duburiya]]|NRU}}\n|align=\"center\"|'''12.04'''\n|-\n|align=\"center\"|\n|{{flagathlete|[[Joseph Gikonyo]]|KEN}}\n|align=\"center\"|'''DNS'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 8\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Bruny Surin]]|CAN}}\n|align=\"center\"|'''10.28'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Andreas Berger]]|AUT}}\n|align=\"center\"|'''10.40'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Carlos Moreno (athlete)|Carlos Moreno]]|CHI}}\n|align=\"center\"|'''10.44'''\n|- \n|align=\"center\"|4.\n|{{flagathlete|[[Horace Dove-Edwin]]|SLE}}\n|align=\"center\"|'''10.48'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Gilles Qu\u00e9n\u00e9herv\u00e9]]|FRA}}\n|align=\"center\"|'''10.59'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Fortune Ogouchi]]|BEN}}\n|align=\"center\"|'''10.92'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Christian Mandengue]]|CMR}}\n|align=\"center\"|'''10.98'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Golam Ambia]]|BAN}}\n|align=\"center\"|'''11.09'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 9\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Carl Lewis]]|USA}}\n|align=\"center\"|'''10.12'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Ezio Madonia]]|ITA}}\n|align=\"center\"|'''10.43'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Tetsuya Yamashita]]|JPN}}\n|align=\"center\"|'''10.55'''\n|- \n|align=\"center\"|4.\n|{{flagathlete|[[Yiannis Zisimides]]|CYP}}\n|align=\"center\"|'''10.68'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Rodney Cox]]|TCA}}\n|align=\"center\"|'''11.02'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Jerome Romain]]|DMA}}\n|align=\"center\"|'''11.09'''\n|-\n|align=\"center\"|\n|{{flagathlete|[[Cengiz Kavaklioglu]]|TUR}}\n|align=\"center\"|'''DNS'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 10\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Olapade Adeniken]]|NGR}}\n|align=\"center\"|'''10.20'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Atlee Mahorn]]|CAN}}\n|align=\"center\"|'''10.25'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Vitaliy Savin]]|URS}}\n|align=\"center\"|'''10.36'''\n|- \n|align=\"center\"|4.\n|{{flagathlete|[[Fernando Botasso]]|BRA|1968}}\n|align=\"center\"|'''10.44'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Junior Cornette]]|GUY}}\n|align=\"center\"|'''10.63'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Tzong-Tze Hsieh]]|TPE}}\n|align=\"center\"|'''10.79'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[John Hou]]|PNG}}\n|align=\"center\"|'''11.04'''\n|-\n|align=\"center\"|\n|{{flagathlete|[[Adam Hassam Sakkak]]|SUD}}\n|align=\"center\"|'''DNS'''\n|}\n\n==See also==\n* [[1990 European Championships in Athletics - Men's 100 metres|1990 Men's European Championships 100 metres (Split)]]\n* [[Athletics at the 1992 Summer Olympics - Men's 100 metres|1992 Men's Olympic 100 metres (Barcelona)]]\n* [[1993 World Championships in Athletics - Men's 100 metres|1993 Men's World Championships 100 metres (Stuttgart)]]\n\n==References==\n{{Reflist}}\n\n==External links==\n{{external media|video1={{youtube|5kd6SLgVqqI|Men's 100m, World Championships Tokyo 1991}}}}\n* [http://todor66.com/athletics/world/1991/Men_100m.html Results]\n\n{{WC100metres}}\n\n{{DEFAULTSORT:1991 World Championships In Athletics - Men's 100 Metres}}\n[[Category:Events at the 1991 World Championships in Athletics| ]]\n[[Category:100 metres at the World Athletics Championships]]\n", "text_old": "{{AthleticsAt1991WorldChampionships}}\n[[Image:TV-icon-2.svg|thumb|110px|'''{{Youtube|8gSOKcda-OQ}} Official video''']]\nThese are the official results of the '''[[100 metres|Men's 100 metres]]''' event at the '''[[1991 World Championships in Athletics|1991 IAAF World Championships]]''' in [[Tokyo, Japan]]. There were a total number of 77 participating athletes, with ten qualifying heats and the final held on Sunday 25 August 1991. The [[Men's 100 metres world record progression|world record]], [[List of African records in athletics|African record]], and [[Men's 100 metres European record progression|European record]] were broken by [[Carl Lewis]], [[Frankie Fredericks]], and [[Linford Christie]] respectively. The then world record holder [[Leroy Burrell]] also bettered his previous mark of 9.90&nbsp;seconds while [[Ray Stewart (athlete)|Ray Stewart]] set the Jamaican record for the event.<ref>[http://www2.iaaf.org/results/past/WCH91/data/M/100/Rf.html Results - 100 METRES - Men - Final]. [[IAAF]] (1991-08-25). Retrieved on 2009-05-19. [https://www.webcitation.org/5gwhx33JT Archived] 2009-05-21.</ref>\n\n==Medalists==\n{| class=\"wikitable\" style=\" text-align:center; font-size:110%;\" width=\"35%\"\n|-\n|bgcolor=\"gold\"|'''Gold'''||{{flagicon|USA}} [[Carl Lewis]]<br>''United States <small>(USA)</small>''\n|-\n|bgcolor=\"silver\"|'''Silver'''||{{flagicon|USA}} [[Leroy Burrell]]<br>''United States <small>(USA)</small>''\n|-\n|bgcolor=\"CC9966\"|'''Bronze'''||{{flagicon|USA}} [[Dennis Mitchell]]<br>''United States <small>(USA)</small>''\n|}\n\n==Schedule==\n*''All times are [[Japan Standard Time]] ([[UTC+9]])''\n{| class=\"wikitable\" style=\" text-align:center; font-size:110%;\" width=\"35%\"\n|-\n!Heats\n|-\n|24.08.1991 &ndash; 09:00h\n|-\n!Quarterfinals\n|-\n|24.08.1991 &ndash; 17:35h\n|-\n!Semifinals\n|-\n|25.08.1991 &ndash; 17:00h\n|-\n!Final\n|-\n|25.08.1991 &ndash; 19:05h\n|}\n\n==Records==\nExisting records at the start of the event.\n{| class=\"wikitable\" width=75%\n|-\n|'''World Record'''\n|{{flagathlete|[[Leroy Burrell]]|USA}}\n|'''9.90'''\n|[[New York City]], United States\n|June 14, 1991\n|-\n|'''Championship Record'''\n|{{flagathlete|[[Carl Lewis]]|USA}}\n|'''9.93'''\n|[[Rome]], Italy\n|August 30, 1987\n|}\n\n==Final==\n{| class=\"wikitable sortable\" width=75%\n|-\n! Rank\n! Athlete\n! Time\n|-\n|align=\"center\"|[[Image:Med 1.png]]\n|{{flagathlete|[[Carl Lewis]]|USA}}\n|align=\"center\"|'''9.86''' <small>[[Men's 100 metres world record progression|WR]]</small>\n|-\n|align=\"center\"|[[Image:Med 2.png]]\n|{{flagathlete|[[Leroy Burrell]]|USA}}\n|align=\"center\"|'''9.88''' <small>PB</small>\n|-\n|align=\"center\"|[[Image:Med 3.png]]\n|{{flagathlete|[[Dennis Mitchell]]|USA}}\n|align=\"center\"|'''9.91''' <small>PB</small>\n|-\n|align=\"center\"|4.\n|{{flagathlete|[[Linford Christie]]|GBR}}\n|align=\"center\"|'''9.92''' <small>[[List of European records in athletics|AR]]</small>\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Frankie Fredericks]]|NAM}}\n|align=\"center\"|'''9.95''' <small>[[List of African records in athletics|AR]]</small>\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Ray Stewart (athlete)|Raymond Stewart]]|JAM}}\n|align=\"center\"|'''9.96''' <small>NR</small>\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Robson da Silva|Robson Caetano da Silva]]|BRA|1968}}\n|align=\"center\"|'''10.12'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Bruny Surin]]|CAN}}\n|align=\"center\"|'''10.14'''\n|}\n\n==Semifinals==\n*Held on Sunday 1991-08-25\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 1\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Carl Lewis]]|USA}}\n|align=\"center\"|'''9.93''' <small>ECR</small>\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Frankie Fredericks]]|NAM}}\n|align=\"center\"|'''10.02'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Bruny Surin]]|CAN}}\n|align=\"center\"|'''10.07''' <small>PB</small>\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|4.\n|{{flagathlete|[[Robson da Silva|Robson Caetano da Silva]]|BRA|1968}}\n|align=\"center\"|'''10.13'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Olapade Adeniken]]|NGR}}\n|align=\"center\"|'''10.17'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Jean-Olivier Zirignon]]|CIV}}\n|align=\"center\"|'''10.25'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Salaam Gariba]]|GHA}}\n|align=\"center\"|'''10.37'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Michael Green (sprinter)|Michael Green]]|JAM}}\n|align=\"center\"|'''10.38'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 2\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Leroy Burrell]]|USA}}\n|align=\"center\"|'''9.94'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Dennis Mitchell]]|USA}}\n|align=\"center\"|'''9.99'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Linford Christie]]|GBR}}\n|align=\"center\"|'''9.99'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|4.\n|{{flagathlete|[[Ray Stewart (athlete)|Raymond Stewart]]|JAM}}\n|align=\"center\"|'''10.03'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Daniel Sangouma]]|FRA}}\n|align=\"center\"|'''10.18'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Atlee Mahorn]]|CAN}}\n|align=\"center\"|'''10.18'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Davidson Ezinwa]]|NGR}}\n|align=\"center\"|'''10.20'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Ezio Madonia]]|ITA}}\n|align=\"center\"|'''10.33'''\n|}\n\n==Quarterfinals==\n*Held on Saturday 1991-08-24\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 1\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Ray Stewart (athlete)|Raymond Stewart]]|JAM}}\n|align=\"center\"|'''10.02'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Dennis Mitchell]]|USA}}\n|align=\"center\"|'''10.05'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Davidson Ezinwa]]|NGR}}\n|align=\"center\"|'''10.23'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|4.\n|{{flagathlete|[[Ezio Madonia]]|ITA}}\n|align=\"center\"|'''10.24'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Max Morini\u00e8re]]|FRA}}\n|align=\"center\"|'''10.24'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Vitaliy Savin]]|URS}}\n|align=\"center\"|'''10.26'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Jacek Marlicki]]|POL}}\n|align=\"center\"|'''10.38'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Tetsuya Yamashita]]|JPN}}\n|align=\"center\"|'''10.56'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 2\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Carl Lewis]]|USA}}\n|align=\"center\"|'''9.80'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Linford Christie]]|GBR}}\n|align=\"center\"|'''9.90'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Bruny Surin]]|CAN}}\n|align=\"center\"|'''10.01'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|4.\n|{{flagathlete|[[Michael Green (sprinter)|Michael Green]]|JAM}}\n|align=\"center\"|'''10.18'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Emmanuel Tuffour]]|GHA}}\n|align=\"center\"|'''10.19'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Arnaldo da Silva]]|BRA}}\n|align=\"center\"|'''10.32'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Carlos Moreno (athlete)|Carlos Moreno]]|CHI}}\n|align=\"center\"|'''10.40'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Chidi Imoh]]|NGR}}\n|align=\"center\"|'''10.46'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 3\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Leroy Burrell]]|USA}}\n|align=\"center\"|'''10.11'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Daniel Sangouma]]|FRA}}\n|align=\"center\"|'''10.23'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Jean-Olivier Zirignon]]|CIV}}\n|align=\"center\"|'''10.30'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|4.\n|{{flagathlete|[[Salaam Gariba]]|GHA}}\n|align=\"center\"|'''10.43'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Darren Braithwaite]]|GBR}}\n|align=\"center\"|'''10.45'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Menelik Lawson]]|TOG}}\n|align=\"center\"|'''10.60'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Tatsuo Sugimoto]]|JPN}}\n|align=\"center\"|'''10.61'''\n|-\n|align=\"center\"|&mdash;\n|{{flagathlete|[[Andreas Berger]]|AUT}}\n|align=\"center\"|'''DNS'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 4\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Frankie Fredericks]]|NAM}}\n|align=\"center\"|'''9.89'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Olapade Adeniken]]|NGR}}\n|align=\"center\"|'''10.00'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Atlee Mahorn]]|CAN}}\n|align=\"center\"|'''10.01'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|4.\n|{{flagathlete|[[Robson da Silva|Robson Caetano da Silva]]|BRA|1968}}\n|align=\"center\"|'''10.08'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Satoru Inoue]]|JPN}}\n|align=\"center\"|'''10.21'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Oleh Kramarenko (sprinter)|Oleh Kramarenko]]|URS}}\n|align=\"center\"|'''10.23'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Attila Kov\u00e1cs (athlete)|Attila Kov\u00e1cs]]|HUN}}\n|align=\"center\"|'''10.32'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Charles-Louis Seck]]|SEN}}\n|align=\"center\"|'''10.46'''\n|}\n\n==Qualifying heats==\n*Held on Saturday 1991-08-24\n\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 1\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Daniel Sangouma]]|FRA}}\n|align=\"center\"|'''10.27'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Darren Braithwaite]]|GBR}}\n|align=\"center\"|'''10.31'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Menelik Lawson]]|TOG}}\n|align=\"center\"|'''10.38'''\n|- style=\"background:#ddffdd;\"\n|align=\"center\"|4.\n|{{flagathlete|[[Chidi Imoh]]|NGR}}\n|align=\"center\"|'''10.42'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Neville Hodge]]|ISV}}\n|align=\"center\"|'''10.51'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Thabani Gonye]]|ZIM}}\n|align=\"center\"|'''10.92'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Botlhoko Shebe]]|LES|1987}}\n|align=\"center\"|'''10.96'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Ahmed Shageef]]|MDV}}\n|align=\"center\"|'''11.18'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 2\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Frank Fredericks]]|NAM}}\n|align=\"center\"|'''10.21'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Emmanuel Tuffour]]|GHA}}\n|align=\"center\"|'''10.36'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Jacek Malicki]]|TOG}}\n|align=\"center\"|'''10.49'''\n|- \n|align=\"center\"|4.\n|{{flagathlete|[[Daniel Cojocaru]]|ROM}}\n|align=\"center\"|'''10.51'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Sun-Kuk Jin]]|KOR}}\n|align=\"center\"|'''10.67'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Visut Watanasin]]|THA}}\n|align=\"center\"|'''10.68'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Mark Sherwin]]|COK}}\n|align=\"center\"|'''11.35'''\n|-\n|align=\"center\"|\n|{{flagathlete|[[Karim Abdul (sprinter)|Karim Abdul]]|AFG|1987}}\n|align=\"center\"|'''DNS'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 3\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Dennis Mitchell]]|USA}}\n|align=\"center\"|'''10.27'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Michael Green (sprinter)|Michael Green]]|JAM}}\n|align=\"center\"|'''10.38'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Salaam Gariba]]|GHA}}\n|align=\"center\"|'''10.38'''\n|- \n|align=\"center\"|4.\n|{{flagathlete|[[Joel Lamela]]|CUB}}\n|align=\"center\"|'''10.53'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Kennedy Ondiek]]|KEN}}\n|align=\"center\"|'''10.57'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Joel Otim]]|UGA}}\n|align=\"center\"|'''11.06'''\n|-\n|align=\"center\"|\n|{{flagathlete|[[Mohamed Abderrehin]]|LBA|1977}}\n|align=\"center\"|'''DNS'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 4\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Leroy Burrell]]|USA}}\n|align=\"center\"|'''10.17'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Jean-Olivier Zirignon]]|CIV}}\n|align=\"center\"|'''10.20'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Arnaldo Oliveira Silva]]|BRA|1968}}\n|align=\"center\"|'''10.42'''\n|- \n|align=\"center\"|4.\n|{{flagathlete|[[Steffen Bringmann]]|GER}}\n|align=\"center\"|'''10.47'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Jason Livingston]]|GBR}}\n|align=\"center\"|'''10.57'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Florencio Aguilar]]|PAN}}\n|align=\"center\"|'''10.85'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Dudley Den Dulk]]|AHO}}\n|align=\"center\"|'''11.10'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 5\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Davidson Ezinwa]]|NGR}}\n|align=\"center\"|'''10.25'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Max Morini\u00e9re]]|FRA}}\n|align=\"center\"|'''10.28'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Oleh Kramarenko (sprinter)|Oleh Kramarenko]]|URS}}\n|align=\"center\"|'''10.36'''\n|- style=\"background:#ddffdd;\"\n|align=\"center\"|4.\n|{{flagathlete|[[Attila Kov\u00e1cs (athlete)|Attila Kov\u00e1cs]]|HUN}}\n|align=\"center\"|'''10.39'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Juan Jesus Trapero]]|ESP}}\n|align=\"center\"|'''10.44'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Eduardo Nava]]|MEX}}\n|align=\"center\"|'''10.56'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Edmund Estaphane]]|LCA|1979}}\n|align=\"center\"|'''10.62'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Trevor Davis (athlete)|Trevor Davis]]|AIA}}\n|align=\"center\"|'''11.16'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 6\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Ray Stewart (athlete)|Raymond Stewart]]|JAM}}\n|align=\"center\"|'''10.17'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Robson Caetano da Silva]]|BRA|1968}}\n|align=\"center\"|'''10.24'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Tatsuo Sugimoto]]|JPN}}\n|align=\"center\"|'''10.58'''\n|- \n|align=\"center\"|4.\n|{{flagathlete|[[Valentin Atanasov]]|BUL}}\n|align=\"center\"|'''10.63'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Khalid Juma]]|BHR|1972}}\n|align=\"center\"|'''10.68'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Ousmane Diarra (Malian athlete)|Ousmane Diarra]]|MLI}}\n|align=\"center\"|'''10.69'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Jerry Jeremiah]]|VAN}}\n|align=\"center\"|'''10.82'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Fred Rocio]]|GUM}}\n|align=\"center\"|'''12.27'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 7\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Linford Christie]]|GBR}}\n|align=\"center\"|'''10.39'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Satoru Inoue]]|JPN}}\n|align=\"center\"|'''10.47'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Charles-Louis Seck]]|SEN}}\n|align=\"center\"|'''10.60'''\n|- \n|align=\"center\"|4.\n|{{flagathlete|[[Eric Haynes]]|SKN}}\n|align=\"center\"|'''10.82'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Franck Zio]]|BUR}}\n|align=\"center\"|'''10.93'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Erwin Heru]]|INA}}\n|align=\"center\"|'''11.14'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Tryson Duburiya]]|NRU}}\n|align=\"center\"|'''12.04'''\n|-\n|align=\"center\"|\n|{{flagathlete|[[Joseph Gikonyo]]|KEN}}\n|align=\"center\"|'''DNS'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 8\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Bruny Surin]]|CAN}}\n|align=\"center\"|'''10.28'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Andreas Berger]]|AUT}}\n|align=\"center\"|'''10.40'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Carlos Moreno (athlete)|Carlos Moreno]]|CHI}}\n|align=\"center\"|'''10.44'''\n|- \n|align=\"center\"|4.\n|{{flagathlete|[[Horace Dove-Edwin]]|SLE}}\n|align=\"center\"|'''10.48'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Gilles Qu\u00e9n\u00e9herv\u00e9]]|FRA}}\n|align=\"center\"|'''10.59'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Fortune Ogouchi]]|BEN}}\n|align=\"center\"|'''10.92'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[Christian Mandengue]]|CMR}}\n|align=\"center\"|'''10.98'''\n|-\n|align=\"center\"|8.\n|{{flagathlete|[[Golam Ambia]]|BAN}}\n|align=\"center\"|'''11.09'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 9\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Carl Lewis]]|USA}}\n|align=\"center\"|'''10.12'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Ezio Madonia]]|ITA}}\n|align=\"center\"|'''10.43'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Tetsuya Yamashita]]|JPN}}\n|align=\"center\"|'''10.55'''\n|- \n|align=\"center\"|4.\n|{{flagathlete|[[Yiannis Zisimides]]|CYP}}\n|align=\"center\"|'''10.68'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Rodney Cox]]|TCA}}\n|align=\"center\"|'''11.02'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Jerome Romain]]|DMA}}\n|align=\"center\"|'''11.09'''\n|-\n|align=\"center\"|\n|{{flagathlete|[[Cengiz Kavaklioglu]]|TUR}}\n|align=\"center\"|'''DNS'''\n|}\n<br>\n{| border=\"1\" cellspacing=\"2\" cellpadding=\"5\" style=\"border-collapse: collapse; font-size: 90%;\"\n|- bgcolor=\"cccccc\"\n!RANK\n!style=\"width: 20em\"|HEAT 10\n!style=\"width: 5em\"|TIME\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|1.\n|{{flagathlete|[[Olapade Adeniken]]|NGR}}\n|align=\"center\"|'''10.20'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|2.\n|{{flagathlete|[[Atlee Mahorn]]|CAN}}\n|align=\"center\"|'''10.25'''\n|- style=\"background:#ccffcc;\"\n|align=\"center\"|3.\n|{{flagathlete|[[Vitaliy Savin]]|URS}}\n|align=\"center\"|'''10.36'''\n|- \n|align=\"center\"|4.\n|{{flagathlete|[[Fernando Botasso]]|BRA|1968}}\n|align=\"center\"|'''10.44'''\n|-\n|align=\"center\"|5.\n|{{flagathlete|[[Junior Cornette]]|GUY}}\n|align=\"center\"|'''10.63'''\n|-\n|align=\"center\"|6.\n|{{flagathlete|[[Tzong-Tze Hsieh]]|TPE}}\n|align=\"center\"|'''10.79'''\n|-\n|align=\"center\"|7.\n|{{flagathlete|[[John Hou]]|PNG}}\n|align=\"center\"|'''11.04'''\n|-\n|align=\"center\"|\n|{{flagathlete|[[Adam Hassam Sakkak]]|SUD}}\n|align=\"center\"|'''DNS'''\n|}\n\n==See also==\n* [[1990 European Championships in Athletics - Men's 100 metres|1990 Men's European Championships 100 metres (Split)]]\n* [[Athletics at the 1992 Summer Olympics - Men's 100 metres|1992 Men's Olympic 100 metres (Barcelona)]]\n* [[1993 World Championships in Athletics - Men's 100 metres|1993 Men's World Championships 100 metres (Stuttgart)]]\n\n==References==\n{{Reflist}}\n\n==External links==\n{{external media|video1=5kd6SLgVqqI|Men's 100m, World Championships Tokyo 1991}}}}\n* [http://todor66.com/athletics/world/1991/Men_100m.html Results]\n\n{{WC100metres}}\n\n{{DEFAULTSORT:1991 World Championships In Athletics - Men's 100 Metres}}\n[[Category:Events at the 1991 World Championships in Athletics| ]]\n[[Category:100 metres at the World Athletics Championships]]\n", "name_user": "Games of the world", "label": "safe", "comment": "\u2192\u200eExternal links", "url_page": "//en.wikipedia.org/wiki/1991_World_Championships_in_Athletics_%E2%80%93_Men%27s_100_metres"}
{"title_page": "Land systems", "text_new": "'''Land systems''' constitute the terrestrial component of the [[Earth]] system and encompass all processes and activities related to the human use of land, including [[Socioeconomics|socioeconomic]], technological and organizational investments and arrangements, as well as the benefits gained from land and the unintended social and ecological outcomes of societal activities.<ref>{{Cite journal|last=Verburg|first=Peter H|last2=Erb|first2=Karl-Heinz|last3=Mertz|first3=Ole|last4=Espindola|first4=Giovana|date=2013-10-01|title=Land System Science: between global challenges and local realities|journal=Current Opinion in Environmental Sustainability|series=Human settlements and industrial systems|volume=5|issue=5|pages=433\u2013437|doi=10.1016/j.cosust.2013.08.001|pmc=4018982|pmid=24851141}}</ref> Changes in land systems have large consequences for the local environment and human well-being and are at the same time pervasive factors of [[Climate change|global environmental change]]. Land provides vital resources to society, such as [[Agriculture|food]], [[fuel]], [[Fiber|fibres]] and many other [[ecosystem services]] that support production functions, regulate risks of natural hazards, or provide cultural and spiritual services.  By using the land, society alters and modifies the quantity and quality of the provision of these services.\n\nLand system changes are the direct result of human decision making at multiple scales ranging from local land owners decisions to national scale [[Land-use planning|land use planning]] and [[International trade|global trade]] agreements. The aggregate impact of many local land system changes has far reaching consequences for the Earth System, that feedback on ecosystem services, human well-being and decision making.<ref>{{Cite journal|last=Crossman|first=Neville D|last2=Bryan|first2=Brett A|last3=de Groot|first3=Rudolf S|last4=Lin|first4=Yu-Pin|last5=Minang|first5=Peter A|date=2013-10-01|title=Land science contributions to ecosystem services|journal=Current Opinion in Environmental Sustainability|series=Human settlements and industrial systems|volume=5|issue=5|pages=509\u2013514|doi=10.1016/j.cosust.2013.06.003}}</ref> As a consequence, land system change is both a cause and consequence of socio-ecological processes.\n\nThe Global Land Programme (GLP) of [[Future Earth]] is an interdisciplinary community of science and practice fostering the study of land systems and the co-design of solutions for global sustainability.\n\n== References ==\n{{reflist}}\n\n[[Category:Geography]]\n[[Category:Land systems]]\n[[Category:Land management]]\n\n\n{{Geo-term-stub}}\n\n[[es:]]\n", "text_old": "{{Underlinked|date=June 2017}}\n\n'''Land systems''' constitute the terrestrial component of the [[Earth]] system and encompass all processes and activities related to the human use of land, including socioeconomic, technological and organizational investments and arrangements, as well as the benefits gained from land and the unintended social and ecological outcomes of societal activities.<ref>{{Cite journal|last=Verburg|first=Peter H|last2=Erb|first2=Karl-Heinz|last3=Mertz|first3=Ole|last4=Espindola|first4=Giovana|date=2013-10-01|title=Land System Science: between global challenges and local realities|journal=Current Opinion in Environmental Sustainability|series=Human settlements and industrial systems|volume=5|issue=5|pages=433\u2013437|doi=10.1016/j.cosust.2013.08.001|pmc=4018982|pmid=24851141}}</ref> Changes  in land systems have large consequences for the local environment and human well-being and are at the same time pervasive factors of global environmental change. Land provides vital resources to society, such as food, fuel, fibres and many other [[ecosystem services]] that support production functions, regulate risks of natural hazards, or provide cultural and spiritual services.  By using the land, society alters and modifies the quantity and quality of the provision of these services.\n\nLand system changes are the direct result of human decision making at multiple scales ranging from local land owners decisions to national scale land use planning and global trade agreements. The aggregate impact of many local land system changes has far reaching consequences for the Earth System, that feedback on ecosystem services, human well-being and decision making.<ref>{{Cite journal|last=Crossman|first=Neville D|last2=Bryan|first2=Brett A|last3=de Groot|first3=Rudolf S|last4=Lin|first4=Yu-Pin|last5=Minang|first5=Peter A|date=2013-10-01|title=Land science contributions to ecosystem services|journal=Current Opinion in Environmental Sustainability|series=Human settlements and industrial systems|volume=5|issue=5|pages=509\u2013514|doi=10.1016/j.cosust.2013.06.003}}</ref> As a consequence, land system change is both a cause and consequence of socio-ecological processes.\n\nThe Global Land Programme (GLP) of [[Future Earth]] is an interdisciplinary community of science and practice fostering the study of land systems and the co-design of solutions for global sustainability.\n\n== References ==\n{{reflist}}\n\n[[Category:Geography]]\n[[Category:Land systems]]\n[[Category:Land management]]\n\n\n{{Geo-term-stub}}\n\n[[es:]]\n", "name_user": "Falconbravo", "label": "safe", "comment": "Added a few wikilinks, removed banner.", "url_page": "//en.wikipedia.org/wiki/Land_systems"}
{"title_page": "Michael of Glasgow", "text_new": "{{Use dmy dates|date=March 2017}}\n{{Use British English|date=March 2017}}\n'''Michael of Glasgow''' is the earliest known [[bishop of Glasgow]] of the 12th century. Records of his episcopate do not survive from the records of the [[Kingdom of Scotland]], however a bishop and a bishop with the name Michael is recorded in foreign records. A letter of [[Ralph d'Escures]], [[Archbishop of Canterbury]] (1114\u201322), to [[Pope Calixtus II]], records that [[Thomas II of York|Thomas]], [[Archbishop of York]] (1109\u201314), had ordained a bishop for the [[Episcopal See|see]] of the \"Britons of Glasgow\". The bishop here is not named. However, [[Thomas Stubbs (chronicler)|Thomas Stubbs]], a historian writing in the second half of the 14th century, tells us that Archbishop Thomas had ordained a man called Michael at the request of [[David I of Scotland|David]], then [[Kingdom of Strathclyde|Prince of the Cumbrians]]. Stubs informs us that Michael had dedicated churches in the diocese of York. According to Stubbs, Michael was buried in [[St Laurence's Church, Morland]], [[Westmorland]]. It is possible that Michael was merely a nominal bishop, like the nominal York-appointed [[Bishop of Orkney|bishops of Orkney]], whose main duties consisted of assisting the Archbishop of York in day-to-day duties.\n\n==References==\n*[[Alan Orr Anderson|Anderson, Alan Orr]], ''Scottish Annals from English Chroniclers: AD 500\u20131286'', (London, 1908), republished, Marjorie Anderson (ed.) (Stamford, 1991), pp.&nbsp;133\u20134\n*[[John Dowden|Dowden, John]], ''The Bishops of Scotland'', ed. J. Maitland Thomson, (Glasgow, 1912), pp.&nbsp;294\u20135\n\n{{s-start}}\n{{s-rel|ca}}\n|-\n{{s-vac|last=[[John Scotus (Bishop of Mecklenburg)|John Scotus]]}}\n{{s-ttl|title=[[Bishop of Glasgow]]|years=fl. 1109\u20131114}}\n{{s-aft|after=[[John the Chaplain]]}}\n{{s-end}}\n\n{{Bishops of Glasgow}}\n\n{{authority control}}\n\n[[Category:11th-century births]]\n[[Category:12th-century deaths]]\n[[Category:Bishops of Glasgow]]\n[[Category:12th-century Roman Catholic bishops]]\n", "text_old": "{{Use dmy dates|date=March 2017}}\n{{Use British English|date=March 2017}}\n'''Michael of Glasgow''' is the earliest known [[bishop of Glasgow]] of the 12th century. Records of his episcopate do not survive from the records of the [[Kingdom of Scotland]], however a bishop and a bishop with the name Michael is recorded in foreign records. A letter of [[Ralph d'Escures]], [[Archbishop of Canterbury]] (1114\u201322), to [[Pope Calixtus II]], records that [[Thomas II of York|Thomas]], [[Archbishop of York]] (1109\u201314), had ordained a bishop for the [[Episcopal See|see]] of the \"Britons of Glasgow\". The bishop here is not named. However, [[Thomas Stubbs]], a historian writing in the second half of the 14th century, tells us that Archbishop Thomas had ordained a man called Michael at the request of [[David I of Scotland|David]], then [[Kingdom of Strathclyde|Prince of the Cumbrians]]. Stubs informs us that Michael had dedicated churches in the diocese of York. According to Stubbs, Michael was buried in [[St Laurence's Church, Morland]], [[Westmorland]]. It is possible that Michael was merely a nominal bishop, like the nominal York-appointed [[Bishop of Orkney|bishops of Orkney]], whose main duties consisted of assisting the Archbishop of York in day-to-day duties.\n\n==References==\n*[[Alan Orr Anderson|Anderson, Alan Orr]], ''Scottish Annals from English Chroniclers: AD 500\u20131286'', (London, 1908), republished, Marjorie Anderson (ed.) (Stamford, 1991), pp.&nbsp;133\u20134\n*[[John Dowden|Dowden, John]], ''The Bishops of Scotland'', ed. J. Maitland Thomson, (Glasgow, 1912), pp.&nbsp;294\u20135\n\n{{s-start}}\n{{s-rel|ca}}\n|-\n{{s-vac|last=[[John Scotus (Bishop of Mecklenburg)|John Scotus]]}}\n{{s-ttl|title=[[Bishop of Glasgow]]|years=fl. 1109\u20131114}}\n{{s-aft|after=[[John the Chaplain]]}}\n{{s-end}}\n\n{{Bishops of Glasgow}}\n\n{{authority control}}\n\n[[Category:11th-century births]]\n[[Category:12th-century deaths]]\n[[Category:Bishops of Glasgow]]\n[[Category:12th-century Roman Catholic bishops]]\n", "name_user": "Tassedethe", "label": "safe", "comment": "v2.02 - Repaired 1 link to disambiguation page -(You can help)-Thomas Stubbs", "url_page": "//en.wikipedia.org/wiki/Michael_of_Glasgow"}
{"title_page": "Foreach loop", "text_new": "[[File:For-Loop-Mint-Programming-Language-Type-2.gif|thumb|For each loops are almost always used to iterate over items in a sequence of elements.]]\n{{Loop constructs}}<!-- NOTE: Please don't remove. Discuss navigation concept at [[Talk:Do_while_loop#Helpbox_experiment] -->\n\n'''Foreach loop''' (or '''for each loop''') is a [[control flow]] statement for traversing items in a [[Collection class|collection]]. Foreach is usually used in place of a standard '''[[for loop]]''' [[statement (programming)|statement]]. Unlike other for loop constructs, however, foreach loops<ref>{{cite web\n| url=http://www.digitalmars.com/d/statement.html#ForeachStatement\n| title=D Programming Language <tt>foreach</tt> Statement Documentation\n| accessdate=2008-08-04\n| last=\n| first=\n| coauthors=\n| date=\n| work=\n| publisher=Digital Mars\n}}</ref> usually maintain no explicit counter: they essentially say \"do this to everything in this set\", rather than \"do this ''x'' times\". This avoids potential [[off-by-one error]]s and makes code simpler to read. In object-oriented languages an [[iterator]], even if implicit, is often used as the means of traversal.\n\nThe ''foreach'' statement in some languages has some defined order, processing each item in the collection from the first to the last.\nThe ''foreach'' statement in many other languages, especially [[array programming]] languages, does not have any particular order. This simplifies [[loop optimization]] in general and in particular allows [[vector processing]] of items in the collection concurrently.\n\n== Syntax ==\nSyntax varies among languages. Most use the simple word <code>for</code>, roughly as follows:\n\n for each item in collection:\n   do something to item\n\n== Language support ==\n\n[[Programming language]]s which support foreach loops include [[ABC (programming language)|ABC]], [[ActionScript]], [[Ada (programming language)|Ada]], [[C++11]], [[C Sharp (programming language)|C#]], [[ColdFusion Markup Language]] (CFML), [[Cobra (programming language)|Cobra]], [[D (programming language)|D]], [[Daplex]] (query language), [[ECMAScript]], [[Erlang (programming language)|Erlang]], [[Java (programming language)|Java]] (since 1.5), [[JavaScript]], [[Lua (programming language)|Lua]], [[Objective-C]] (since 2.0), [[ParaSail (programming language)|ParaSail]], [[Perl]], [[PHP]], [[Prolog]],<ref>{{Cite web|url=https://www.swi-prolog.org/pldoc/man?predicate=foreach/2|title=SWI-Prolog -- foreach/2|website=www.swi-prolog.org|access-date=2020-02-10}}</ref> [[Python (programming language)|Python]], [[REALbasic]], [[Ruby (programming language)|Ruby]], [[Scala (programming language)|Scala]], [[Smalltalk]], [[Swift (programming language)|Swift]], [[Tcl]], [[tcsh]], [[Unix shell]]s, [[Visual Basic .NET]], and [[Windows PowerShell]]. Notable languages without foreach are [[C (programming language)|C]], and [[C++]] pre-C++11.\n\n=== ActionScript 3.0 ===\n\n[[ActionScript]] supports the ECMAScript 4.0 Standard<ref>{{cite web|url=https://www.ecma-international.org/activities/Languages/Language%20overview.pdf |title=Proposed ECMAScript 4th Edition \u2013 Language Overview |date= |accessdate=2020-02-21}}</ref> for <code>for each .. in</code><ref>{{cite web|url=https://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/statements.html#for_each..in |title=for each..in |date= |accessdate=2020-02-21}}</ref> which pulls the value at each index.\n\n<syntaxhighlight lang=\"actionscript3\">\nvar foo:Object = {\n\t\"apple\":1,\n\t\"orange\":2\n};\n\nfor each (var value:int in foo) { \n\ttrace(value); \n}\n\n// returns \"1\" then \"2\"\n</syntaxhighlight>\n\nIt also supports <code>for .. in</code><ref>{{cite web|url=https://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/statements.html#for..in |title=for..in |date= |accessdate=2020-02-21}}</ref> which pulls the key at each index.\n\n<syntaxhighlight lang=\"actionscript3\">\nfor (var key:String in foo) { \n\ttrace(key); \n}\n\n// returns \"apple\" then \"orange\"\n</syntaxhighlight>\n\n=== Ada ===\n{{Wikibooks|Ada Programming|Control}}\n\n[[Ada (programming language)|Ada]] supports foreach loops as part of the normal [[for loop]]. Say X is an [[Array data structure|array]]:\n\n<source lang=\"Ada\">\nfor I in X'Range loop\n   X (I) := Get_Next_Element;\nend loop;\n</source>\n\nThis syntax is used on mostly arrays, but will also work with other types when a full iteration is needed.\n\nAda 2012 has generalized loops to foreach loops on any kind of container (array, lists, maps...):\n\n<source lang=\"Ada\">\nfor Obj of X loop\n   -- Work on Obj\nend loop;\n</source>\n\n=== C ===\nThe [[C (programming language)|C]] language does not have collections or a foreach construct. However, it has several standard data structures that can be used as collections, and foreach can be made easily with a [[C macro|macro]].\n\nHowever, two obvious problems occur:\n* The macro is unhygienic: it declares a new variable in the existing scope which remains after the loop.\n* One foreach macro cannot be defined that works with different collection types (e.g., array and linked list) or that is extensible to user types.\n\nC string as a collection of char\n<source lang=\"C\" enclose=\"div\" line=\"\" highlight=\"4\">\n#include <stdio.h>\n#include <stdlib.h>\n/* foreach macro for using a string as a collection of char */\n#define foreach( ptrvar, strvar ) char* ptrvar; for( ptrvar=strvar ; (*ptrvar) != '\\0' ; *ptrvar++)\n\nint main(int argc,char* argv[]){\n char* s1 = \"abcdefg\";\n char* s2 = \"123456789\";\n foreach (p1, s1) {\n  printf(\"loop 1 %c\\n\",*p1);\n }\n foreach (p2, s2){\n  printf(\"loop 2 %c\\n\",*p2);\n }\n exit(0);\n return(0);\n}\n</source>\n\nC int array as a collection of int (array size known at compile-time)\n\n<source lang=\"C\" enclose=\"div\" line=\"\" highlight=\"5\">\n#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char* argv[]){\n/* foreach macro viewing an array of int values as a collection of int values */\n#define foreach( intpvar, intary ) int* intpvar; for( intpvar=intary; intpvar < (intary + (sizeof(intary)/sizeof(intary[0]))) ; intpvar++)\n int a1[] = { 1, 1, 2, 3, 5, 8 };\n int a2[] = { 3, 1, 4, 1, 5, 9 };\n foreach (p1, a1) {\n  printf(\"loop 1 %d\\n\", *p1);\n }\n foreach (p2, a2){\n  printf(\"loop 2 %d\\n\", *p2);\n }\n exit(0);\n return(0);\n}\n</source>\n\nMost general: string or array as collection (collection size known at run-time)\n: ''Note: {{code|idxtype}} can be removed and <code>[[typeof]](col[0])</code> used in its place with [[GNU Compiler Collection|GCC]]''\n<source lang=\"C\" enclose=\"div\" line=\"\" highlight=\"5\">\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(int argc, char* argv[]){\n#define foreach(idxtype, idxpvar, col, colsiz ) idxtype* idxpvar; for( idxpvar=col ; idxpvar < (col + (colsiz)) ; idxpvar++)\n#define arraylen( ary ) ( sizeof(ary)/sizeof(ary[0]) )\n char* c1 = \"collection\";\n int c2[] = { 3, 1, 4, 1, 5, 9 };\n double* c3;\n int c3len = 4;\n c3 = (double*)calloc(c3len, sizeof(double)); \n c3[0] = 1.2; c3[1] = 3.4; c3[2] = 5.6; c3[3] = 7.8;\n\n foreach (char, p1, c1, strlen(c1) ) {\n  printf(\"loop 1 : %c\\n\",*p1);\n }\n foreach (int, p2, c2, arraylen(c2) ){\n  printf(\"loop 2 : %d\\n\",*p2);\n }\n foreach (double, p3, c3, c3len ){\n  printf(\"loop 3 : %3.1lf\\n\",*p3);\n }\n exit(0);\n return(0);\n}\n</source>\n\n=== C# ===\nIn [[C Sharp (programming language)|C#]], assuming that myArray is an array of integers:\n\n<source lang=\"csharp\">\n\nforeach (int x in myArray) { Console.WriteLine(x); }\n\n</source>\n\n[[Language Integrated Query]] (LINQ) provides the following syntax, accepting a [[Delegate (CLI)|delegate]] or [[Lambda (programming)|lambda expression]]:\n\n<source lang=\"csharp\">\n\nmyArray.ToList().ForEach(x => Console.WriteLine(x));\n\n</source>\n\n=== C++ ===\n\n[[C++11]] provides a foreach loop. The syntax is similar to that of [[Foreach loop#Java|Java]]:\n\n<source lang=\"Cpp\">\n#include <iostream>\n\nint main()\n{\n  int myint[] = {1, 2, 3, 4, 5};\n\n  for (int i : myint)\n  {\n    std::cout << i << '\\n';\n  }\n}\n</source>\n\nC++11 range-based for statements have been implemented in [[GNU Compiler Collection]] (GCC) (since version 4.6), [[Clang]] (since version 3.0) and [[Visual C++]] 2012 (version 11 <ref>{{cite web|url=http://blogs.msdn.com/b/vcblog/archive/2011/09/12/10209291.aspx |title=C++11 Features in Visual C++ 11 - Visual C++ Team Blog - Site Home - MSDN Blogs |publisher=Blogs.msdn.com |date=2011-09-12 |accessdate=2013-08-04}}</ref>)\n\nThe range-based <tt>for</tt> is [[syntactic sugar]] equivalent to:\n\n<source lang=\"Cpp\">\n  for (auto __anon = begin(myint); __anon != end(myint); ++__anon)\n  {\n    auto i = *__anon;\n    std::cout << i << '\\n';\n  }\n</source>\n\nThe compiler uses [[argument-dependent lookup]] to resolve the <tt>begin</tt> and <tt>end</tt> functions.<ref>{{cite web|url=https://en.cppreference.com/w/cpp/language/range-for |title=Range-based for loop (since C++11) |publisher=en.cppreference.com |date= |accessdate=2018-12-03}}</ref>\n\nThe C++ Standard Library also supports <tt>for_each</tt>,<ref>{{cite web|url=http://en.cppreference.com/w/cpp/algorithm/for_each |title=std::for_each - cppreference |publisher=en.cppreference.com |date= |accessdate=2017-09-30}}</ref> that applies each element to a function, which can be any predefined function or a lambda expression. While range-based for is only from the beginning to the end, the range and direction you can change the direction or range by altering the first two parameters.\n\n<source lang=\"Cpp\">\n#include <iostream>\n#include <algorithm> // contains std::for_each\n#include <vector>\n\nint main()\n{\n  std::vector<int> v {1, 2, 3, 4, 5};\n\n  std::for_each(v.begin(), v.end(), [&](int i)\n  {\n    std::cout << i << '\\n';\n  });\n\n  std::cout << \"reversed but skip 2 elements:\\n\";\n\n  std::for_each(v.rbegin()+2, v.rend(), [&](int i)\n  {\n    std::cout << i << '\\n';\n  });\n}\n</source>\n\n[[Qt (software)|Qt]], a C++ framework, offers a macro providing foreach loops<ref>{{cite web |url=http://doc.qt.digia.com/4.2/containers.html#the-foreach-keyword |title=Qt 4.2: Generic Containers |publisher=Doc.qt.digia.com |date= |accessdate=2013-08-04 |archive-url=https://web.archive.org/web/20151123090839/http://doc.qt.digia.com/4.2/containers.html#the-foreach-keyword |archive-date=2015-11-23 |url-status=dead }}</ref> using the STL iterator interface:\n\n<source lang=\"Cpp\">\n#include <QList>\n#include <QDebug>\n\nint main()\n{\n  QList<int> list;\n\n  list << 1 << 2 << 3 << 4 << 5;\n\n  foreach (int i, list)\n  {\n    qDebug() << i;\n  }\n}</source>\n\n[[Boost (C++ libraries)|Boost]], a set of free peer-reviewed portable C++ libraries also provides foreach loops:<ref>{{cite web|author=Eric Niebler |url=http://www.boost.org/doc/libs/1_53_0/doc/html/foreach.html |title=Chapter 9. Boost.Foreach - 1.53.0 |publisher=Boost.org |date=2013-01-31 |accessdate=2013-08-04}}</ref>\n\n<source lang=\"Cpp\">\n#include <boost/foreach.hpp>\n#include <iostream>\n \nint main()\n{\n  int myint[] = {1, 2, 3, 4, 5};\n \n  BOOST_FOREACH(int &i, myint)\n  {\n    std::cout << i << '\\n';\n  }\n}\n</source>\n\n=== C++/CLI ===\n\nThe [[C++/CLI]] language proposes a construct similar to C#.\n\nAssuming that myArray is an array of integers:\n<!-- At the time of writing, there is no documented C++/CLI support in the [[mw:Extension:SyntaxHighlight GeSHi|MediaWiki syntax highliter]] -->\n<source lang=\"c#\">\n    for each (int x in myArray)\n    {\n        Console::WriteLine(x);\n    }\n</source>\n\n=== ColdFusion Markup Language (CFML) ===\n{{Main|ColdFusion Markup Language}}\n\n==== Script syntax ====\n\n<source lang=\"cfs\">\n// arrays\narrayeach([1,2,3,4,5], function(v){\n    writeOutput(v);\n});\n\n// or\n\nfor (v in [1,2,3,4,5]){\n    writeOutput(v);\n}\n\n// or\n\n// (Railo only; not supported in ColdFusion)\nletters = [\"a\",\"b\",\"c\",\"d\",\"e\"];\nletters.each(function(v){\n    writeOutput(v); // abcde\n});\n\n// structs\nfor (k in collection){\n    writeOutput(collection[k]);\n}\n\n// or\n\nstructEach(collection, function(k,v){\n    writeOutput(\"key: #k#, value: #v#;\");\n});\n\n// or\n// (Railo only; not supported in ColdFusion)\ncollection.each(function(k,v){\n    writeOutput(\"key: #k#, value: #v#;\");\n});\n</source>\n\n==== Tag syntax ====\n\n<source lang=\"CFM\">\n<!--- arrays --->\n<cfloop index=\"v\" array=\"#['a','b','c','d','e']#\">\n  <cfoutput>#v#</cfoutput><!--- a b c d e  --->\n</cfloop>\n</source>\nCFML incorrectly identifies the value as \"index\" in this construct; the <code>index</code> variable does receive the actual value of the array element, not its index.\n\n<source lang=\"CFM\">\n<!--- structs --->\n<cfloop item=\"k\" collection=\"#collection#\">\n    <cfoutput>#collection[k]#</cfoutput>\n</cfloop>\n</source>\n\n=== Common Lisp ===\n\n[[Common Lisp]] provides foreach ability either with the ''dolist'' macro:\n<source lang=\"LISP\">\n(dolist (i '(1 3 5 6 8 10 14 17))\n  (print i))\n</source>\nor the powerful ''loop'' macro to iterate on more data types\n<source lang=\"LISP\">\n(loop for i in '(1 3 5 6 8 10 14 17)\n      do (print i))\n</source>\n\nand even with the ''mapcar'' function:\n<source lang=\"LISP\">\n(mapcar #'print '(1 3 5 6 8 10 14 17))\n</source>\n\n=== D ===\n{{Main|D (programming language)}}\n\n<source lang=\"D\">\nforeach(item; set) {\n  // do something to item\n}\nor\nforeach(argument) {\n  // pass value\n}\n</source>\n\n=== Dart ===\n{{Main|Dart (programming language)}}\n\n<source lang=\"Java\">\nfor (final element in someCollection) {\n  // do something with element\n}\n</source>\n\n=== Object Pascal, Delphi ===\n{{Main|Object Pascal}}\n\nForeach support was added in [[Delphi (programming language)|Delphi]] 2005, and uses an enumerator variable that must be declared in the ''var'' section.\n\n<source lang=\"Delphi\">\nfor enumerator in collection do\nbegin\n  //do something here\nend;\n</source>\n\n=== Eiffel ===\n\nThe iteration (foreach) form of the [[Eiffel (programming language)|Eiffel]] loop construct is introduced by the keyword <code lang=Eiffel>across</code>.\n\nIn this example, every element of the structure <code>my_list</code> is printed:\n\n<syntaxhighlight lang=\"Eiffel\">\n            across my_list as ic loop print (ic.item) end\n</syntaxhighlight>\n\nThe local entity <code>ic</code> is an instance of the library class <code>ITERATION_CURSOR</code>. The cursor's feature <code>item</code> provides access to each structure element. Descendants of class <code>ITERATION_CURSOR</code> can be created to handle specialized iteration algorithms. The types of objects that can be iterated across (<code>my_list</code> in the example) are based on classes that inherit from the library class <code>ITERABLE</code>.\n\nThe iteration form of the Eiffel loop can also be used as a boolean expression when the keyword <code>loop</code> is replaced by either <code>all</code> (effecting [[universal quantification]]) or <code>some</code> (effecting [[existential quantification]]).\n\nThis iteration is a boolean expression which is true if all items in <code>my_list</code> have counts greater than three:\n\n<syntaxhighlight lang=\"Eiffel\">\n            across my_list as ic all ic.item.count > 3 end\n</syntaxhighlight>\n\nThe following is true if at least one item has a count greater than three:\n\n<syntaxhighlight lang=\"Eiffel\">\n            across my_list as ic some ic.item.count > 3 end\n</syntaxhighlight>\n\n=== Go ===\n\n[[Go (programming language)|Go]]'s foreach loop can be used to loop over an array, slice, string, map, or channel.\n\nUsing the two-value form, we get the index/key (first element) and the value (second element):\n<source lang=\"go\">\nfor index, value := range someCollection {\n\t// Do something to index and value\n}\n</source>\n\nUsing the one-value form, we get the index/key (first element):\n<source lang=\"go\">\nfor index := range someCollection {\n\t// Do something to index\n}\n</source><ref>{{cite web | url=http://golang.org/ref/spec#RangeClause | title=Range Clause | publisher=The Go Programming Language | work=The Go Programming Language Specification | accessdate=October 20, 2013}}</ref>\n\n=== Groovy ===\n\n[[Groovy (programming language)|Groovy]] supports ''for'' loops over collections like arrays, lists and ranges:\n\n<source lang=\"Groovy\">\ndef x = [1,2,3,4]\nfor (v in x)           // loop over the 4-element array x\n{\n    println v\n}\n\nfor (v in [1,2,3,4])   // loop over 4-element literal list \n{\n    println v\n}\n\nfor (v in 1..4)        // loop over the range 1..4\n{\n    println v\n}\n</source>\n\nGroovy also supports a C-style for loop with an array index:\n\n<source lang=\"Groovy\">\nfor (i = 0; i < x.size(); i++)\n{\n    println x[i]\n}\n</source>\n\nCollections in Groovy can also be iterated over using the ''each'' keyword\nand a closure.  By default, the loop dummy is named ''it''\n\n<source lang=\"Groovy\">\nx.each{ println it }     // print every element of the x array\nx.each{i-> println i}    // equivalent to line above, only loop dummy explicitly named \"i\"\n</source>\n\n=== Haskell ===\n\n[[Haskell (programming language)|Haskell]] allows looping over lists with [[Monad (functional programming)|monadic]] actions using <code>mapM_</code> and <code>forM_</code> (<code>mapM_</code> with its arguments flipped) from [http://hackage.haskell.org/package/base-4.6.0.1/docs/Control-Monad.html Control.Monad]:\n\n{| class=\"wikitable\"\n! code !! prints\n|-\n|\n<source lang=Haskell>\nmapM_ print [1..4]\n</source>\n|\n 1\n 2\n 3\n 4\n|-\n|\n<source lang=Haskell>\nforM_ \"test\" $ \\char -> do \n    putChar char\n    putChar char\n</source>\n|\n tteesstt\n|}\n\nIt's also possible to generalize those functions to work on applicative functors rather than monads and any data structure that is traversable using <code>traverse</code> (<code>for</code> with its arguments flipped) and <code>mapM</code> (<code>forM</code> with its arguments flipped) from [http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-Traversable.html Data.Traversable].\n\n=== Haxe ===\n{{Main|Haxe}}\n<source lang=\"actionscript\">\nfor (value in iterable) {\n    trace(value);\n}\n\nLambda.iter(iterable, function(value) trace(value));\n</source>\n\n=== Java ===\n\nIn [[Java (programming language)|Java]], a foreach-construct was introduced in [[Java Development Kit]] (JDK) 1.5.0.<ref name=\"jdk5release\">\n\"Enhanced for Loop - This new language construct[...]\"\n{{cite web\n|url=http://java.sun.com/j2se/1.5.0/docs/guide/language/index.html\n|title=Java Programming Language, Section: Enhancements in JDK 5\n|accessdate=2009-05-26\n|year=2004\n|publisher=[[Sun Microsystems, Inc.]]\n}}</ref>\n\nOfficial sources use several names for the construct. It is referred to as the \"Enhanced for Loop\",<ref name=\"jdk5release\"/> the \"For-Each Loop\",<ref>\n\"The For-Each Loop\"\n{{cite web\n|url=http://java.sun.com/j2se/1.5.0/docs/guide/language/foreach.html\n|title=The For-Each Loop\n|accessdate=2009-05-10\n|year=2008\n|publisher=[[Sun Microsystems, Inc.]]\n}}</ref> and the \"foreach statement\".<ref>\n\"Implementing this interface allows an object to be the target of the \"foreach\" statement.\"\n{{cite web\n|url=http://java.sun.com/javase/6/docs/api/java/lang/Iterable.html\n|title=Iterable (Java Platform SE 6)\n|accessdate=2009-05-12\n|year=2004\n|publisher=[[Sun Microsystems, Inc.]]\n}}</ref>\n\n<source lang=\"Java\">\nfor (Type item : iterableCollection) {\n    // Do something to item\n}\n</source>\n\n=== JavaScript ===\nThe [[EcmaScript 6]] standard has <code>[https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for...of for..of]</code> for index-less iteration over generators, arrays and more:\n<source lang=\"JavaScript\">\nfor (var item of array){\n    // Do stuff\n}\n</source>\n\nAlternatively, function-based style: <ref>[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach]</ref>\n\n<source lang=\"JavaScript\">\narray.forEach(item => {\n    // Do stuff\n})\n</source>\n\nFor unordered iteration over the keys in an Object, [[JavaScript]] features the <code>for...in</code> loop:\n\n<source lang=\"JavaScript\">\nfor (var key in object) {\n    // Do stuff with object[key]\n}\n</source>\n\nTo limit the iteration to the object's own properties, excluding those inherited through the prototype chain, it is sometimes useful to add a hasOwnProperty() test, [[Comparison of layout engines (ECMAScript)#Object object|if supported by the JavaScript engine]] (for WebKit/Safari, this means \"in version 3 or later\").\n\n<source lang=\"JavaScript\">\nfor (var key in object) {\n    if (object.hasOwnProperty(key)) {\n        // Do stuff with object[key]\n    }\n}\n</source>\n\n[[ECMAScript 5]] provided Object.keys method, to transfer the own keys of an object into array.<ref>{{cite web | url= https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys | title=Object.keys | work=Mozilla Developer Network | accessdate=May 7, 2014}}</ref>\n<source lang=\"JavaScript\">\nvar book = { name: \"A Christmas Carol\", author: \"Charles Dickens\" }; \nfor(var key of Object.keys(book)){\n    alert(\"PropertyName = \" key + \" Property Value = \" + book[key]);\n}\n</source>\n\n=== Lua<ref>{{Cite web|url=https://en.wikibooks.org/wiki/Lua_Programming/Tables#Foreach_loop|title=Lua Programming/Tables - Wikibooks, open books for an open world|website=en.wikibooks.org|language=en|access-date=2017-12-06}}</ref> ===\n{{Main|Lua (programming language)}}\nIterate only through numerical index values:<syntaxhighlight lang=\"lua\">\nfor index, value in ipairs(array) do\n\t-- do something\nend\n</syntaxhighlight>Iterate through all index values:<syntaxhighlight lang=\"lua\">\nfor index, value in pairs(array) do\n\t-- do something\nend\n</syntaxhighlight>\n\n=== Mathematica ===\n\nIn [[Mathematica]], <code>Do</code> will simply evaluate an expression for each element of a list, without returning any value.\n\n<source lang=\"Mathematica\">\nIn[]:= Do[doSomethingWithItem, {item, list}]\n</source>\n\nIt is more common to use <code>Table</code>, which returns the result of each evaluation in a new list.\n\n<source lang=\"Mathematica\">\nIn[]:= list = {3, 4, 5};\n\nIn[]:= Table[item^2, {item, list}]\nOut[]= {9, 16, 25}\n</source>\n\n=== MATLAB ===\n{{Main|MATLAB}}\n\n<source lang=\"MATLAB\">\nfor item = array\n%do something\nend\n</source>\n\n=== Mint ===\n\nFor each loops are supported in Mint, possessing the following syntax:\n<source lang=\"Ruby\">\nfor each element of list\n    /* 'Do something.' */\nend\n</source>\n\nThe <code>for (;;)</code> or <code>while (true)</code> [[infinite loop]]\nin Mint can be written using a for each loop and an [[Infinite set|infinitely long list]].<ref>{{cite web |url=http://prezi.com/ougvv1wzx2lb/mint-tutorial-part-0/ |title=Mint Tutorial |accessdate=20 October 2013 |author=Chu, Oliver}}</ref>\n\n<source lang=\"Ruby\">\nimport type\n/* 'This function is mapped to'\n * 'each index number i of the'\n * 'infinitely long list.'\n */\nsub identity(x)\n    return x\nend\n/* 'The following creates the list'\n * '[0, 1, 2, 3, 4, 5, ..., infinity]'\n */\ninfiniteList = list(identity)\nfor each element of infiniteList\n    /* 'Do something forever.' */\nend\n</source>\n\n=== Objective-C ===\n\nForeach loops, called [[Objective-C#Fast enumeration|Fast enumeration]], are supported starting in [[Objective-C]] 2.0. They can be used to iterate over any object that implements the NSFastEnumeration protocol, including NSArray, NSDictionary (iterates over keys), NSSet, etc.\n\n<source lang=\"ObjC\">\nNSArray *a = [NSArray new];       // Any container class can be substituted\n\nfor(id obj in a) {                // Note the dynamic typing (we do not need to know the\n                                  // Type of object stored in 'a'.  In fact, there can be\n                                  // many different types of object in the array.\n\n    printf(\"%s\\n\", [[obj description] UTF8String]);  // Must use UTF8String with %s\n    NSLog(@\"%@\", obj);                               // Leave as an object\n}\n</source>\n\nNSArrays can also broadcast a message to their members:\n\n<source lang=\"ObjC\">\nNSArray *a = [NSArray new];\n\n[a makeObjectsPerformSelector:@selector(printDescription)];\n</source>\n\nWhere [[Blocks (C language extension)|blocks]] are available, an NSArray can automatically perform a block on every contained item:\n\n<source lang=\"ObjC\">\n[myArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop)\n\t{\n\t\tNSLog(@\"obj %@\", obj);\n\t\tif ([obj shouldStopIterationNow])\n\t\t\t*stop = YES;\n\t}];\n</source>\n\nThe type of collection being iterated will dictate the item returned with each iteration.\nFor example:\n\n<source lang=\"ObjC\">\nNSDictionary *d = [NSDictionary new];\n\nfor(id key in d) {\n    NSObject *obj = [d objectForKey:key];      // We use the (unique) key to access the (possibly nonunique) object.\n    NSLog(@\"%@\", obj);\n}\n</source>\n\n=== OCaml ===\n\n[[OCaml]] is a [[functional language]]. Thus, the equivalent of a foreach loop can be achieved as a library function over lists and arrays.\n\nFor lists:\n\n<source lang=\"OCaml\">\nList.iter (fun x -> print_int x) [1;2;3;4];; \n</source>\n\nor in short way:\n\n<source lang=\"OCaml\">\nList.iter print_int [1;2;3;4];; \n</source>\n\nFor arrays:\n\n<source lang=\"OCaml\">\nArray.iter (fun x -> print_int x) [|1;2;3;4|];;\n</source>\n\nor in short way:\n\n<source lang=\"OCaml\">\nArray.iter print_int [|1;2;3;4|];;\n</source>\n\n=== ParaSail ===\n\nThe [[ParaSail (programming language)|ParaSail]] parallel programming language supports several kinds of iterators, including a general \"for each\" iterator over a container:\n\n<source lang=\"parasail\">\nvar Con : Container<Element_Type> := ...\n// ...\nfor each Elem of Con concurrent loop  // loop may also be \"forward\" or \"reverse\" or unordered (the default)\n  // ... do something with Elem\nend loop\n</source>\n\nParaSail also supports filters on iterators, and the ability to refer to both the key and the value of a map. Here is a forward iteration over the elements of \"My_Map\" selecting only elements where the keys are in \"My_Set\":\n<source lang=\"parasail\">\nvar My_Map : Map<Key_Type => Univ_String, Value_Type => Tree<Integer>> := ...\nconst My_Set : Set<Univ_String> := [\"abc\", \"def\", \"ghi\"];\n\nfor each [Str => Tr] of My_Map {Str in My_Set} forward loop\n   // ... do something with Str or Tr\nend loop\n</source>\n\n=== Pascal ===\n\nIn [[Pascal (programming language)|Pascal]], ISO standard 10206:1990 introduced iteration over [[Pascal (programming language)#Set types|set types]], thus:\n\n<source lang=\"Pascal\">\nvar\n  elt: ElementType;\n  eltset: set of ElementType;\n\n{...}\n\nfor elt in eltset do\n  { ... do something with elt }\n</source>\n\n=== Perl ===\n\nIn [[Perl]], ''foreach'' (which is equivalent to the shorter for) can be used to traverse elements of a list.  The expression which denotes the collection to loop over is evaluated in list-context and each item of the resulting list is, in turn, aliased to the loop variable.\n\nList literal example:\n\n<source lang=\"Perl\">\nforeach (1, 2, 3, 4) {\n    print $_;\n}\n</source>\n\nArray examples:\n\n<source lang=\"Perl\">\nforeach (@arr) {\n    print $_;\n}\n</source>\n\n<source lang=\"Perl\">\nforeach $x (@arr) { #$x is the element in @arr\n    print $x;\n} \n</source>\n\nHash example:\n\n<source lang=\"Perl\">\nforeach $x (keys %hash) {\n    print $x . \" = \" . $hash{$x}; # $x is a key in %hash and $hash{$x} is its value\n}\n</source>\n\nDirect modification of collection members:\n\n<source lang=\"Perl\">\n@arr = ( 'remove-foo', 'remove-bar' );\nforeach $x (@arr){\n    $x =~ s/remove-//;\n}\n# Now @arr = ('foo', 'bar');\n</source>\n\n=== PHP ===\n{{Main|PHP}}\n\n<source lang=\"php\">\nforeach ($set as $value) {\n    // Do something to $value;\n}\n</source>\n\nIt is also possible to extract both keys and values using the alternate syntax:\n\n<source lang=\"php\">\nforeach ($set as $key => $value) {\n    echo \"{$key} has a value of {$value}\";\n}\n</source>\n\nDirect modification of collection members:\n\n<source lang=\"php\">\n$arr = array(1, 2, 3);\nforeach ($arr as &$value) { // Note the &, $value is a reference to the original value inside $arr\n    $value++;\n}\n// Now $arr = array(2, 3, 4);\n\n// also works with the full syntax\nforeach ($arr as $key => &$value) {\n    $value++;\n}\n</source>\n* [https://php.net/foreach More information]\n\n=== Python ===\n{{Main|Python (programming language)}}\n\n<source lang=\"python\">\nfor item in iterable_collection:\n    # Do something with item\n</source>\n\nPython's tuple assignment, fully available in its foreach loop, also makes it trivial to iterate on (key, value) pairs in [[associative array]]s:\n\n<source lang=\"Python\">\nfor key, value in some_dict.items():  # Direct iteration on a dict iterates on its keys\n    # Do stuff\n</source>\n\nAs <code>for ... in</code> is the only kind of for loop in Python, the equivalent to the \"counter\" loop found in other languages is...\n\n<source lang=\"python\">\nfor i in range(len(seq)):\n    # Do something to seq[i]\n</source>\n\n... though using the <code>enumerate</code> function is considered more \"Pythonic\":\n\n<source lang=\"python\">\nfor i, item in enumerate(seq):\n    # Do stuff with item\n    # Possibly assign it back to seq[i]\n</source>\n\n=== Racket ===\n{{Main|Racket (programming language)}}\n<source lang=\"racket\">\n(for ([item set])\n  (do-something-with item))\n</source>\n\nor using the conventional Scheme <code>for-each</code> function:\n\n<source lang=\"racket\">\n(for-each do-something-with a-list)\n</source>\n<code>do-something-with</code> is a one-argument function.\n\n=== Raku ===\n\nIn [[Raku (programming language)|Raku]], a sister language to Perl, ''for'' must be used to traverse elements of a list (''foreach'' is not allowed). The expression which denotes the collection to loop over is evaluated in list-context, but not flattened by default, and each item of the resulting list is, in turn, aliased to the loop variable(s).\n\nList literal example:\n\n<source lang=\"Perl6\">\nfor 1..4 {\n    .say;\n}\n</source>\n\nArray examples:\n\n<source lang=\"Perl6\">\nfor @arr {\n    .say;\n}\n</source>\n\nThe for loop in its statement modifier form:\n\n<source lang=\"Perl6\">\n.say for @arr;\n</source>\n\n<source lang=\"Perl6\">\nfor @arr -> $x {\n    say $x;\n} \n</source>\n\n<source lang=\"Perl6\">\nfor @arr -> $x, $y {    # more than one item at a time\n    say \"$x, $y\";\n} \n</source>\n\nHash example:\n\n<source lang=\"Perl6\">\nfor keys %hash -> $key {\n    say \"$key: $hash{$key}\";\n}\n</source>\n\nor\n\n<source lang=\"Perl6\">\nfor %hash.kv -> $key, $value {\n    say \"$key: $value\";\n}\n</source>\n\nor\n\n<source lang=\"Perl6\">\nfor %hash -> $x {\n    say \"$x.key(): $x.value()\";    # Parentheses needed to inline in double quoted string\n}\n</source>\n\n\nDirect modification of collection members with a doubly pointy block, ''<->'': \n\n<source lang=\"Perl6\">\nmy @arr = 1,2,3;\nfor @arr <-> $x {\n    $x *= 2;\n}\n# Now @arr = 2,4,6;\n</source>\n\n=== Ruby ===\n{{Main|Ruby (programming language)}}\n\n<source lang=\"Ruby\">\nset.each do |item|\n  # do something to item\nend\n</source>\n\nor\n\n<source lang=\"Ruby\">\nfor item in set\n  # do something to item\nend\n</source>\n\nThis can also be used with a hash.\n\n<source lang=\"Ruby\">\nset.each do |item,value|\n  # do something to item\n  # do something to value\nend\n</source>\n\n=== Rust ===\n{{Main|Rust (programming language)}}\n\n<source lang=\"Rust\">\nlet mut numbers = vec![1, 2, 3];\n\n// Immutable reference:\nfor number in numbers.iter() {\n    println!(\"{}\", number);\n}\n\n// Mutable reference:\nfor number in numbers.iter_mut() {\n    *number *= 2;\n}\n\n// prints \"[2, 4, 6]\":\nprintln!(\"{:?}\", numbers);\n\n// Consumes the Vec and creates an Iterator:\nfor number in numbers {\n    // ...\n}\n\n// Errors with \"borrow of moved value\":\n// println!(\"{:?}\", numbers);\n</source>\n\n=== Scala ===\n{{Main|Scala (programming language)}}\n\n<source lang=\"Scala\">\n// return list of modified elements\nitems map { x => doSomething(x) }\nitems map multiplyByTwo\n\nfor {x <- items} yield doSomething(x)\nfor {x <- items} yield multiplyByTwo(x)\n\n// return nothing, just perform action\nitems foreach { x => doSomething(x) }\nitems foreach println\n\nfor {x <- items} doSomething(x)\nfor {x <- items} println(x)\n</source>\n\n=== Scheme ===\n{{Main|Scheme (programming language)}}\n<source lang=\"Scheme\">\n(for-each do-something-with a-list)\n</source>\n<code>do-something-with</code> is a one-argument function.\n\n=== Smalltalk ===\n{{Main|Smalltalk}}\n<source lang=\"Smalltalk\">\ncollection do: [:item| \"do something to item\" ]\n</source>\n\n=== Swift ===\n\n[[Swift (programming language)|Swift]] uses the <code>for</code>\u2026<code>in</code> construct to iterate over members of a collection.<ref>https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/ControlFlow.html#//apple_ref/doc/uid/TP40014097-CH9-XID_153</ref>\n\n<source lang=\"objc\">\nfor thing in someCollection {\n    // do something with thing\n}\n</source>\n\nThe <code>for</code>\u2026<code>in</code> loop is often used with the closed and half-open range constructs to iterate over the loop body a certain number of times.\n\n<source lang=\"objc\">\nfor i in 0..<10 {\n    // 0..<10 constructs a half-open range, so the loop body\n    // is repeated for i = 0, i = 1, \u2026, i = 9.\n}\n\nfor i in 0...10 {\n    // 0...10 constructs a closed range, so the loop body\n    // is repeated for i = 0, i = 1, \u2026, i = 9, i = 10.\n}\n</source>\n\n=== SystemVerilog ===\n\n[[SystemVerilog]] supports iteration over any vector or array type of any dimensionality using the <code>foreach</code> keyword.\n\nA trivial example iterates over an array of integers:\n\n{| class=\"wikitable\"\n! code !! prints\n|-\n|\n<source lang=\"systemverilog\">\nint  array_1d[] = '{ 3, 2, 1, 0 };\n\nforeach array_1d[index]\n  $display(\"array_1d[%0d]: %0d\", index, array_1d[index]);\n</source>\n|\n array_1d[0]: 3\n array_1d[1]: 2\n array_1d[2]: 1\n array_1d[3]: 0\n|}\n\nA more complex example iterates over an associative array of arrays of integers:\n\n{| class=\"wikitable\"\n! code !! prints\n|-\n|\n<source lang=\"systemverilog\">\nint  array_2d[string][] = '{ \"tens\": '{ 10, 11 },\n                             \"twenties\": '{ 20, 21 } };\n\nforeach array_2d[key,index]\n  $display(\"array_2d[%s,%0d]: %0d\", key, index, array_2d[key,index]);\n</source>\n|\n array_2d[tens,0]: 10\n array_2d[tens,1]: 11\n array_2d[twenties,0]: 20\n array_2d[twenties,1]: 21\n|}\n\n=== Tcl ===\n\n[[Tcl]] uses foreach to iterate over lists. It is possible to specify more than one iterator variable, in which case they are assigned sequential values from the list. \n{| class=\"wikitable\"\n! code !! prints\n|-\n|\n<source lang=Tcl>\nforeach {i j} {1 2 3 4 5 6} {\n    puts \"$i $j\"\n}\n</source>\n|\n 1 2\n 3 4\n 5 6\n|}\n\nIt is also possible to iterate over more than one list simultaneously. In the following <code>i</code> assumes sequential values of the first list, <code>j</code> sequential values of the second list:\n{| class=\"wikitable\"\n! code !! prints\n|-\n|\n<source lang=Tcl>\nforeach i {1 2 3} j {a b c}  {\n    puts \"$i $j\"\n}\n</source>\n|\n 1 a\n 2 b\n 3 c\n|}\n\n=== Visual Basic .NET ===\n{{Main|Visual Basic .NET}}\n<source lang=\"VBNet\">\nFor Each item In enumerable\n    ' Do something with item.\nNext\n</source>\n\nor without type inference\n\n<source lang=\"VBNet\">\nFor Each item As type In enumerable\n    ' Do something with item.\nNext\n</source>\n\n=== Windows ===\n==== Conventional command processor ====\n{{main|COMMAND.COM|cmd.exe}}\nInvoke a hypothetical <code>frob</code> command three times, giving it a color name each time.\n<source lang=\"doscon\">\nC:\\>FOR %%a IN ( red green blue ) DO frob %%a\n</source>\n\n==== Windows PowerShell ====\n{{Main|Windows PowerShell}}\n<source lang=\"PowerShell\">\nforeach ($item in $set) {\n    # Do something to $item\n}\n</source>\n\nFrom a pipeline\n\n<source lang=\"PowerShell\">\n$list | ForEach-Object {Write-Host $_}\n\n# or using the aliases\n$list | foreach {write $_}\n$list | % {write $_}\n</source>\n\n=== Extensible Stylesheet Language (XSL) ===\n{{Main|XSL}}\n<source lang=\"xml\">\n <xsl:for-each select=\"set\">\n   <!-- do something for the elements in <set> -->\n </xsl:for-each>\n</source><ref name=\"xslforeach\">{{cite web | url=https://www.w3schools.com/xsl/xsl_for_each.asp | title=XSLT <xsl:for-each> Element | work=W3Schools.com}}</ref>\n\n== See also ==\n* [[Do while loop]]\n* [[For loop]]\n* [[While loop]]\n* [[Map (higher-order function)]]\n\n== References ==\n{{Reflist|2}}\n\n[[Category:Articles with example Ada code]]\n[[Category:Articles with example Perl code]]\n[[Category:Articles with example PHP code]]\n[[Category:Articles with example Python code]]\n[[Category:Articles with example Racket code]]\n[[Category:Articles with example Smalltalk code]]\n[[Category:Articles with example Tcl code]]\n[[Category:Control flow]]\n[[Category:Programming language comparisons]]\n[[Category:Articles with example Java code]]\n[[Category:Articles with example Haskell code]]\n\n[[ru:\u0426\u0438\u043a\u043b \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430]]\n", "text_old": "[[File:For-Loop-Mint-Programming-Language-Type-2.gif|thumb|For each loops are almost always used to iterate over items in a sequence of elements.]]\n{{Loop constructs}}<!-- NOTE: Please don't remove. Discuss navigation concept at [[Talk:Do_while_loop#Helpbox_experiment] -->\n\n'''Foreach loop''' (or '''for each loop''') is a [[control flow]] statement for traversing items in a [[Collection class|collection]]. Foreach is usually used in place of a standard '''[[for loop]]''' [[statement (programming)|statement]]. Unlike other for loop constructs, however, foreach loops<ref>{{cite web\n| url=http://www.digitalmars.com/d/statement.html#ForeachStatement\n| title=D Programming Language <tt>foreach</tt> Statement Documentation\n| accessdate=2008-08-04\n| last=\n| first=\n| coauthors=\n| date=\n| work=\n| publisher=Digital Mars\n}}</ref> usually maintain no explicit counter: they essentially say \"do this to everything in this set\", rather than \"do this ''x'' times\". This avoids potential [[off-by-one error]]s and makes code simpler to read. In object-oriented languages an [[iterator]], even if implicit, is often used as the means of traversal.\n\nThe ''foreach'' statement in some languages has some defined order, processing each item in the collection from the first to the last.\nThe ''foreach'' statement in many other languages, especially [[array programming]] languages, does not have any particular order. This simplifies [[loop optimization]] in general and in particular allows [[vector processing]] of items in the collection concurrently.\n\n== Syntax ==\nSyntax varies among languages. Most use the simple word <code>for</code>, roughly as follows:\n\n for each item in collection:\n   do something to item\n\n== Language support ==\n\n[[Programming language]]s which support foreach loops include [[ABC (programming language)|ABC]], [[ActionScript]], [[Ada (programming language)|Ada]], [[C++11]], [[C Sharp (programming language)|C#]], [[ColdFusion Markup Language]] (CFML), [[Cobra (programming language)|Cobra]], [[D (programming language)|D]], [[Daplex]] (query language), [[ECMAScript]], [[Erlang (programming language)|Erlang]], [[Java (programming language)|Java]] (since 1.5), [[JavaScript]], [[Lua (programming language)|Lua]], [[Objective-C]] (since 2.0), [[ParaSail (programming language)|ParaSail]], [[Perl]], [[PHP]], [[Prolog]],<ref>{{Cite web|url=https://www.swi-prolog.org/pldoc/man?predicate=foreach/2|title=SWI-Prolog -- foreach/2|website=www.swi-prolog.org|access-date=2020-02-10}}</ref> [[Python (programming language)|Python]], [[REALbasic]], [[Ruby (programming language)|Ruby]], [[Scala (programming language)|Scala]], [[Smalltalk]], [[Swift (programming language)|Swift]], [[Tcl]], [[tcsh]], [[Unix shell]]s, [[Visual Basic .NET]], and [[Windows PowerShell]]. Notable languages without foreach are [[C (programming language)|C]], and [[C++]] pre-C++11.\n\n=== ActionScript 3.0 ===\n\n[[ActionScript]] supports the ECMAScript 4.0 Standard<ref>{{cite web|url=https://www.ecma-international.org/activities/Languages/Language%20overview.pdf |title=Proposed ECMAScript 4th Edition \u2013 Language Overview |date= |accessdate=2020-02-21}}</ref> for <code>for each .. in</code><ref>{{cite web|url=https://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/statements.html#for_each..in |title=for each..in |date= |accessdate=2020-02-21}}</ref> which pulls the value at each index.\n\n<syntaxhighlight lang=\"actionscript3\">\nvar foo:Object = {\n\t\"apple\":1,\n\t\"orange\":2\n};\n\nfor each (var value:int in foo) { \n\ttrace(value); \n}\n\n// returns \"1\" then \"2\"\n</syntaxhighlight>\n\nIt also supports <code>for .. in</code><ref>{{cite web|url=https://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/statements.html#for..in |title=for..in |date= |accessdate=2020-02-21}}</ref> which pulls the key at each index.\n\n<syntaxhighlight lang=\"actionscript3\">\nfor (var key:String in foo) { \n\ttrace(key); \n}\n\n// returns \"apple\" then \"orange\"\n</syntaxhighlight>\n\n=== Ada ===\n{{Wikibooks|Ada Programming|Control}}\n\n[[Ada (programming language)|Ada]] supports foreach loops as part of the normal [[for loop]]. Say X is an [[Array data structure|array]]:\n\n<source lang=\"Ada\">\nfor I in X'Range loop\n   X (I) := Get_Next_Element;\nend loop;\n</source>\n\nThis syntax is used on mostly arrays, but will also work with other types when a full iteration is needed.\n\nAda 2012 has generalized loops to foreach loops on any kind of container (array, lists, maps...):\n\n<source lang=\"Ada\">\nfor Obj of X loop\n   -- Work on Obj\nend loop;\n</source>\n\n=== C ===\nThe [[C (programming language)|C]] language does not have collections or a foreach construct. However, it has several standard data structures that can be used as collections, and foreach can be made easily with a [[C macro|macro]].\n\nHowever, two obvious problems occur:\n* The macro is unhygienic: it declares a new variable in the existing scope which remains after the loop.\n* One foreach macro cannot be defined that works with different collection types (e.g., array and linked list) or that is extensible to user types.\n\nC string as a collection of char\n<source lang=\"C\" enclose=\"div\" line=\"\" highlight=\"4\">\n#include <stdio.h>\n#include <stdlib.h>\n/* foreach macro for using a string as a collection of char */\n#define foreach( ptrvar, strvar ) char* ptrvar; for( ptrvar=strvar ; (*ptrvar) != '\\0' ; *ptrvar++)\n\nint main(int argc,char* argv[]){\n char* s1 = \"abcdefg\";\n char* s2 = \"123456789\";\n foreach (p1, s1) {\n  printf(\"loop 1 %c\\n\",*p1);\n }\n foreach (p2, s2){\n  printf(\"loop 2 %c\\n\",*p2);\n }\n exit(0);\n return(0);\n}\n</source>\n\nC int array as a collection of int (array size known at compile-time)\n\n<source lang=\"C\" enclose=\"div\" line=\"\" highlight=\"5\">\n#include <stdio.h>\n#include <stdlib.h>\nint main(int argc, char* argv[]){\n/* foreach macro viewing an array of int values as a collection of int values */\n#define foreach( intpvar, intary ) int* intpvar; for( intpvar=intary; intpvar < (intary + (sizeof(intary)/sizeof(intary[0]))) ; intpvar++)\n int a1[] = { 1, 1, 2, 3, 5, 8 };\n int a2[] = { 3, 1, 4, 1, 5, 9 };\n foreach (p1, a1) {\n  printf(\"loop 1 %d\\n\", *p1);\n }\n foreach (p2, a2){\n  printf(\"loop 2 %d\\n\", *p2);\n }\n exit(0);\n return(0);\n}\n</source>\n\nMost general: string or array as collection (collection size known at run-time)\n: ''Note: {{code|idxtype}} can be removed and <code>[[typeof]](col[0])</code> used in its place with [[GNU Compiler Collection|GCC]]''\n<source lang=\"C\" enclose=\"div\" line=\"\" highlight=\"5\">\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main(int argc, char* argv[]){\n#define foreach(idxtype, idxpvar, col, colsiz ) idxtype* idxpvar; for( idxpvar=col ; idxpvar < (col + (colsiz)) ; idxpvar++)\n#define arraylen( ary ) ( sizeof(ary)/sizeof(ary[0]) )\n char* c1 = \"collection\";\n int c2[] = { 3, 1, 4, 1, 5, 9 };\n double* c3;\n int c3len = 4;\n c3 = (double*)calloc(c3len, sizeof(double)); \n c3[0] = 1.2; c3[1] = 3.4; c3[2] = 5.6; c3[3] = 7.8;\n\n foreach (char, p1, c1, strlen(c1) ) {\n  printf(\"loop 1 : %c\\n\",*p1);\n }\n foreach (int, p2, c2, arraylen(c2) ){\n  printf(\"loop 2 : %d\\n\",*p2);\n }\n foreach (double, p3, c3, c3len ){\n  printf(\"loop 3 : %3.1lf\\n\",*p3);\n }\n exit(0);\n return(0);\n}\n</source>\n\n=== C# ===\nIn [[C Sharp (programming language)|C#]], assuming that myArray is an array of integers:\n\n<source lang=\"csharp\">\n\nforeach (int x in myArray) { Console.WriteLine(x); }\n\n</source>\n\n[[Language Integrated Query]] (LINQ) provides the following syntax, accepting a [[Delegate (CLI)|delegate]] or [[Lambda (programming)|lambda expression]]:\n\n<source lang=\"csharp\">\n\nmyArray.ToList().ForEach(x => Console.WriteLine(x));\n\n</source>\n\n=== C++ ===\n\n[[C++11]] provides a foreach loop. The syntax is similar to that of [[Foreach loop#Java|Java]]:\n\n<source lang=\"Cpp\">\n#include <iostream>\n\nint main()\n{\n  int myint[] = {1, 2, 3, 4, 5};\n\n  for (int i : myint)\n  {\n    std::cout << i << '\\n';\n  }\n}\n</source>\n\nC++11 range-based for statements have been implemented in [[GNU Compiler Collection]] (GCC) (since version 4.6), [[Clang]] (since version 3.0) and [[Visual C++]] 2012 (version 11 <ref>{{cite web|url=http://blogs.msdn.com/b/vcblog/archive/2011/09/12/10209291.aspx |title=C++11 Features in Visual C++ 11 - Visual C++ Team Blog - Site Home - MSDN Blogs |publisher=Blogs.msdn.com |date=2011-09-12 |accessdate=2013-08-04}}</ref>)\n\nThe range-based <tt>for</tt> is [[syntactic sugar]] equivalent to:\n\n<source lang=\"Cpp\">\n  for (auto __anon = begin(myint); __anon != end(myint); ++__anon)\n  {\n    auto i = *__anon;\n    std::cout << i << '\\n';\n  }\n</source>\n\nThe compiler uses [[argument-dependent lookup]] to resolve the <tt>begin</tt> and <tt>end</tt> functions.<ref>{{cite web|url=https://en.cppreference.com/w/cpp/language/range-for |title=Range-based for loop (since C++11) |publisher=en.cppreference.com |date= |accessdate=2018-12-03}}</ref>\n\nThe C++ Standard Library also supports <tt>for_each</tt>,<ref>{{cite web|url=http://en.cppreference.com/w/cpp/algorithm/for_each |title=std::for_each - cppreference |publisher=en.cppreference.com |date= |accessdate=2017-09-30}}</ref> that applies each element to a function, which can be any predefined function or a lambda expression. While range-based for is only from the beginning to the end, the range and direction you can change the direction or range by altering the first two parameters.\n\n<source lang=\"Cpp\">\n#include <iostream>\n#include <algorithm> // contains std::for_each\n#include <vector>\n\nint main()\n{\n  std::vector<int> v {1, 2, 3, 4, 5};\n\n  std::for_each(v.begin(), v.end(), [&](int i)\n  {\n    std::cout << i << '\\n';\n  });\n\n  std::cout << \"reversed but skip 2 elements:\\n\";\n\n  std::for_each(v.rbegin()+2, v.rend(), [&](int i)\n  {\n    std::cout << i << '\\n';\n  });\n}\n</source>\n\n[[Qt (software)|Qt]], a C++ framework, offers a macro providing foreach loops<ref>{{cite web |url=http://doc.qt.digia.com/4.2/containers.html#the-foreach-keyword |title=Qt 4.2: Generic Containers |publisher=Doc.qt.digia.com |date= |accessdate=2013-08-04 |archive-url=https://web.archive.org/web/20151123090839/http://doc.qt.digia.com/4.2/containers.html#the-foreach-keyword |archive-date=2015-11-23 |url-status=dead }}</ref> using the STL iterator interface:\n\n<source lang=\"Cpp\">\n#include <QList>\n#include <QDebug>\n\nint main()\n{\n  QList<int> list;\n\n  list << 1 << 2 << 3 << 4 << 5;\n\n  foreach (int i, list)\n  {\n    qDebug() << i;\n  }\n}</source>\n\n[[Boost (C++ libraries)|Boost]], a set of free peer-reviewed portable C++ libraries also provides foreach loops:<ref>{{cite web|author=Eric Niebler |url=http://www.boost.org/doc/libs/1_53_0/doc/html/foreach.html |title=Chapter 9. Boost.Foreach - 1.53.0 |publisher=Boost.org |date=2013-01-31 |accessdate=2013-08-04}}</ref>\n\n<source lang=\"Cpp\">\n#include <boost/foreach.hpp>\n#include <iostream>\n \nint main()\n{\n  int myint[] = {1, 2, 3, 4, 5};\n \n  BOOST_FOREACH(int &i, myint)\n  {\n    std::cout << i << '\\n';\n  }\n}\n</source>\n\n=== C++/CLI ===\n\nThe [[C++/CLI]] language proposes a construct similar to C#.\n\nAssuming that myArray is an array of integers:\n<!-- At the time of writing, there is no documented C++/CLI support in the [[mw:Extension:SyntaxHighlight GeSHi|MediaWiki syntax highliter]] -->\n<source lang=\"c#\">\n    for each (int x in myArray)\n    {\n        Console::WriteLine(x);\n    }\n</source>\n\n=== ColdFusion Markup Language (CFML) ===\n{{Main|ColdFusion Markup Language}}\n\n==== Script syntax ====\n\n<source lang=\"cfs\">\n// arrays\narrayeach([1,2,3,4,5], function(v){\n    writeOutput(v);\n});\n\n// or\n\nfor (v in [1,2,3,4,5]){\n    writeOutput(v);\n}\n\n// or\n\n// (Railo only; not supported in ColdFusion)\nletters = [\"a\",\"b\",\"c\",\"d\",\"e\"];\nletters.each(function(v){\n    writeOutput(v); // abcde\n});\n\n// structs\nfor (k in collection){\n    writeOutput(collection[k]);\n}\n\n// or\n\nstructEach(collection, function(k,v){\n    writeOutput(\"key: #k#, value: #v#;\");\n});\n\n// or\n// (Railo only; not supported in ColdFusion)\ncollection.each(function(k,v){\n    writeOutput(\"key: #k#, value: #v#;\");\n});\n</source>\n\n==== Tag syntax ====\n\n<source lang=\"CFM\">\n<!--- arrays --->\n<cfloop index=\"v\" array=\"#['a','b','c','d','e']#\">\n  <cfoutput>#v#</cfoutput><!--- a b c d e  --->\n</cfloop>\n</source>\nCFML incorrectly identifies the value as \"index\" in this construct; the <code>index</code> variable does receive the actual value of the array element, not its index.\n\n<source lang=\"CFM\">\n<!--- structs --->\n<cfloop item=\"k\" collection=\"#collection#\">\n    <cfoutput>#collection[k]#</cfoutput>\n</cfloop>\n</source>\n\n=== Common Lisp ===\n\n[[Common Lisp]] provides foreach ability either with the ''dolist'' macro:\n<source lang=\"LISP\">\n(dolist (i '(1 3 5 6 8 10 14 17))\n  (print i))\n</source>\nor the powerful ''loop'' macro to iterate on more data types\n<source lang=\"LISP\">\n(loop for i in '(1 3 5 6 8 10 14 17)\n      do (print i))\n</source>\n\nand even with the ''mapcar'' function:\n<source lang=\"LISP\">\n(mapcar #'print '(1 3 5 6 8 10 14 17))\n</source>\n\n=== D ===\n{{Main|D (programming language)}}\n\n<source lang=\"D\">\nforeach(item; set) {\n  // do something to item\n}\nor\nforeach(argument) {\n  // pass value\n}\n</source>\n\n=== Dart ===\n{{Main|Dart (programming language)}}\n\n<source lang=\"Java\">\nfor (final element in someCollection) {\n  // do something with element\n}\n</source>\n\n=== Object Pascal, Delphi ===\n{{Main|Object Pascal}}\n\nForeach support was added in [[Delphi (programming language)|Delphi]] 2005, and uses an enumerator variable that must be declared in the ''var'' section.\n\n<source lang=\"Delphi\">\nfor enumerator in collection do\nbegin\n  //do something here\nend;\n</source>\n\n=== Eiffel ===\n\nThe iteration (foreach) form of the [[Eiffel (programming language)|Eiffel]] loop construct is introduced by the keyword <code lang=Eiffel>across</code>.\n\nIn this example, every element of the structure <code>my_list</code> is printed:\n\n<syntaxhighlight lang=\"Eiffel\">\n            across my_list as ic loop print (ic.item) end\n</syntaxhighlight>\n\nThe local entity <code>ic</code> is an instance of the library class <code>ITERATION_CURSOR</code>. The cursor's feature <code>item</code> provides access to each structure element. Descendants of class <code>ITERATION_CURSOR</code> can be created to handle specialized iteration algorithms. The types of objects that can be iterated across (<code>my_list</code> in the example) are based on classes that inherit from the library class <code>ITERABLE</code>.\n\nThe iteration form of the Eiffel loop can also be used as a boolean expression when the keyword <code>loop</code> is replaced by either <code>all</code> (effecting [[universal quantification]]) or <code>some</code> (effecting [[existential quantification]]).\n\nThis iteration is a boolean expression which is true if all items in <code>my_list</code> have counts greater than three:\n\n<syntaxhighlight lang=\"Eiffel\">\n            across my_list as ic all ic.item.count > 3 end\n</syntaxhighlight>\n\nThe following is true if at least one item has a count greater than three:\n\n<syntaxhighlight lang=\"Eiffel\">\n            across my_list as ic some ic.item.count > 3 end\n</syntaxhighlight>\n\n=== Go ===\n\n[[Go (programming language)|Go]]'s foreach loop can be used to loop over an array, slice, string, map, or channel.\n\nUsing the two-value form, we get the index/key (first element) and the value (second element):\n<source lang=\"go\">\nfor index, value := range someCollection {\n\t// Do something to index and value\n}\n</source>\n\nUsing the one-value form, we get the index/key (first element):\n<source lang=\"go\">\nfor index := range someCollection {\n\t// Do something to index\n}\n</source><ref>{{cite web | url=http://golang.org/ref/spec#RangeClause | title=Range Clause | publisher=The Go Programming Language | work=The Go Programming Language Specification | accessdate=October 20, 2013}}</ref>\n\n=== Groovy ===\n\n[[Groovy (programming language)|Groovy]] supports ''for'' loops over collections like arrays, lists and ranges:\n\n<source lang=\"Groovy\">\ndef x = [1,2,3,4]\nfor (v in x)           // loop over the 4-element array x\n{\n    println v\n}\n\nfor (v in [1,2,3,4])   // loop over 4-element literal list \n{\n    println v\n}\n\nfor (v in 1..4)        // loop over the range 1..4\n{\n    println v\n}\n</source>\n\nGroovy also supports a C-style for loop with an array index:\n\n<source lang=\"Groovy\">\nfor (i = 0; i < x.size(); i++)\n{\n    println x[i]\n}\n</source>\n\nCollections in Groovy can also be iterated over using the ''each'' keyword\nand a closure.  By default, the loop dummy is named ''it''\n\n<source lang=\"Groovy\">\nx.each{ println it }     // print every element of the x array\nx.each{i-> println i}    // equivalent to line above, only loop dummy explicitly named \"i\"\n</source>\n\n=== Haskell ===\n\n[[Haskell (programming language)|Haskell]] allows looping over lists with [[Monad (functional programming)|monadic]] actions using <code>mapM_</code> and <code>forM_</code> (<code>mapM_</code> with its arguments flipped) from [http://hackage.haskell.org/package/base-4.6.0.1/docs/Control-Monad.html Control.Monad]:\n\n{| class=\"wikitable\"\n! code !! prints\n|-\n|\n<source lang=Haskell>\nmapM_ print [1..4]\n</source>\n|\n 1\n 2\n 3\n 4\n|-\n|\n<source lang=Haskell>\nforM_ \"test\" $ \\char -> do \n    putChar char\n    putChar char\n</source>\n|\n tteesstt\n|}\n\nIt's also possible to generalize those functions to work on applicative functors rather than monads and any data structure that is traversable using <code>traverse</code> (<code>for</code> with its arguments flipped) and <code>mapM</code> (<code>forM</code> with its arguments flipped) from [http://hackage.haskell.org/package/base-4.6.0.1/docs/Data-Traversable.html Data.Traversable].\n\n=== Haxe ===\n{{Main|Haxe}}\n<source lang=\"actionscript\">\nfor (value in iterable) {\n    trace(value);\n}\n\nLambda.iter(iterable, function(value) trace(value));\n</source>\n\n=== Java ===\n\nIn [[Java (programming language)|Java]], a foreach-construct was introduced in [[Java Development Kit]] (JDK) 1.5.0.<ref name=\"jdk5release\">\n\"Enhanced for Loop - This new language construct[...]\"\n{{cite web\n|url=http://java.sun.com/j2se/1.5.0/docs/guide/language/index.html\n|title=Java Programming Language, Section: Enhancements in JDK 5\n|accessdate=2009-05-26\n|year=2004\n|publisher=[[Sun Microsystems, Inc.]]\n}}</ref>\n\nOfficial sources use several names for the construct. It is referred to as the \"Enhanced for Loop\",<ref name=\"jdk5release\"/> the \"For-Each Loop\",<ref>\n\"The For-Each Loop\"\n{{cite web\n|url=http://java.sun.com/j2se/1.5.0/docs/guide/language/foreach.html\n|title=The For-Each Loop\n|accessdate=2009-05-10\n|year=2008\n|publisher=[[Sun Microsystems, Inc.]]\n}}</ref> and the \"foreach statement\".<ref>\n\"Implementing this interface allows an object to be the target of the \"foreach\" statement.\"\n{{cite web\n|url=http://java.sun.com/javase/6/docs/api/java/lang/Iterable.html\n|title=Iterable (Java Platform SE 6)\n|accessdate=2009-05-12\n|year=2004\n|publisher=[[Sun Microsystems, Inc.]]\n}}</ref>\n\n<source lang=\"Java\">\nfor (Type item : iterableCollection) {\n    // Do something to item\n}\n</source>\n\n=== JavaScript ===\nThe [[EcmaScript 6]] standard has <code>[https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for...of for..of]</code> for index-less iteration over generators, arrays and more:\n<source lang=\"JavaScript\">\nfor (var item of array){\n    // Do stuff\n}\n</source>\n\nAlternatively, function-based style: <ref>[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach]</ref>\n\n<source lang=\"JavaScript\">\narray.forEach(item => {\n    // Do stuff\n})\n</source>\n\nFor unordered iteration over the keys in an Object, [[JavaScript]] features the <code>for...in</code> loop:\n\n<source lang=\"JavaScript\">\nfor (var key in object) {\n    // Do stuff with object[key]\n}\n</source>\n\nTo limit the iteration to the object's own properties, excluding those inherited through the prototype chain, it is sometimes useful to add a hasOwnProperty() test, [[Comparison of layout engines (ECMAScript)#Object object|if supported by the JavaScript engine]] (for WebKit/Safari, this means \"in version 3 or later\").\n\n<source lang=\"JavaScript\">\nfor (var key in object) {\n    if (object.hasOwnProperty(key)) {\n        // Do stuff with object[key]\n    }\n}\n</source>\n\n[[ECMAScript 5]] provided Object.keys method, to transfer the own keys of an object into array.<ref>{{cite web | url= https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys | title=Object.keys | work=Mozilla Developer Network | accessdate=May 7, 2014}}</ref>\n<source lang=\"JavaScript\">\nvar book = { name: \"A Christmas Carol\", author: \"Charles Dickens\" }; \nfor(var key of Object.keys(book)){\n    alert(\"PropertyName = \" key + \" Property Value = \" + book[key]);\n}\n</source>\n\n=== Lua<ref>{{Cite web|url=https://en.wikibooks.org/wiki/Lua_Programming/Tables#Foreach_loop|title=Lua Programming/Tables - Wikibooks, open books for an open world|website=en.wikibooks.org|language=en|access-date=2017-12-06}}</ref> ===\n{{Main|Lua (programming language)}}\nIterate only through numerical index values:<syntaxhighlight lang=\"lua\">\nfor index, value in ipairs(array) do\n\t-- do something\nend\n</syntaxhighlight>Iterate through all index values:<syntaxhighlight lang=\"lua\">\nfor index, value in pairs(array) do\n\t-- do something\nend\n</syntaxhighlight>\n\n=== Mathematica ===\n\nIn [[Mathematica]], <code>Do</code> will simply evaluate an expression for each element of a list, without returning any value.\n\n<source lang=\"Mathematica\">\nIn[]:= Do[doSomethingWithItem, {item, list}]\n</source>\n\nIt is more common to use <code>Table</code>, which returns the result of each evaluation in a new list.\n\n<source lang=\"Mathematica\">\nIn[]:= list = {3, 4, 5};\n\nIn[]:= Table[item^2, {item, list}]\nOut[]= {9, 16, 25}\n</source>\n\n=== MATLAB ===\n{{Main|MATLAB}}\n\n<source lang=\"MATLAB\">\nfor item = array\n%do something\nend\n</source>\n\n=== Mint ===\n\nFor each loops are supported in Mint, possessing the following syntax:\n<source lang=\"Ruby\">\nfor each element of list\n    /* 'Do something.' */\nend\n</source>\n\nThe <code>for (;;)</code> or <code>while (true)</code> [[infinite loop]]\nin Mint can be written using a for each loop and an [[Infinite set|infinitely long list]].<ref>{{cite web |url=http://prezi.com/ougvv1wzx2lb/mint-tutorial-part-0/ |title=Mint Tutorial |accessdate=20 October 2013 |author=Chu, Oliver}}</ref>\n\n<source lang=\"Ruby\">\nimport type\n/* 'This function is mapped to'\n * 'each index number i of the'\n * 'infinitely long list.'\n */\nsub identity(x)\n    return x\nend\n/* 'The following creates the list'\n * '[0, 1, 2, 3, 4, 5, ..., infinity]'\n */\ninfiniteList = list(identity)\nfor each element of infiniteList\n    /* 'Do something forever.' */\nend\n</source>\n\n=== Objective-C ===\n\nForeach loops, called [[Objective-C#Fast enumeration|Fast enumeration]], are supported starting in [[Objective-C]] 2.0. They can be used to iterate over any object that implements the NSFastEnumeration protocol, including NSArray, NSDictionary (iterates over keys), NSSet, etc.\n\n<source lang=\"ObjC\">\nNSArray *a = [NSArray new];       // Any container class can be substituted\n\nfor(id obj in a) {                // Note the dynamic typing (we do not need to know the\n                                  // Type of object stored in 'a'.  In fact, there can be\n                                  // many different types of object in the array.\n\n    printf(\"%s\\n\", [[obj description] UTF8String]);  // Must use UTF8String with %s\n    NSLog(@\"%@\", obj);                               // Leave as an object\n}\n</source>\n\nNSArrays can also broadcast a message to their members:\n\n<source lang=\"ObjC\">\nNSArray *a = [NSArray new];\n\n[a makeObjectsPerformSelector:@selector(printDescription)];\n</source>\n\nWhere [[Blocks (C language extension)|blocks]] are available, an NSArray can automatically perform a block on every contained item:\n\n<source lang=\"ObjC\">\n[myArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop)\n\t{\n\t\tNSLog(@\"obj %@\", obj);\n\t\tif ([obj shouldStopIterationNow])\n\t\t\t*stop = YES;\n\t}];\n</source>\n\nThe type of collection being iterated will dictate the item returned with each iteration.\nFor example:\n\n<source lang=\"ObjC\">\nNSDictionary *d = [NSDictionary new];\n\nfor(id key in d) {\n    NSObject *obj = [d objectForKey:key];      // We use the (unique) key to access the (possibly nonunique) object.\n    NSLog(@\"%@\", obj);\n}\n</source>\n\n=== OCaml ===\n\n[[OCaml]] is a [[functional language]]. Thus, the equivalent of a foreach loop can be achieved as a library function over lists and arrays.\n\nFor lists:\n\n<source lang=\"OCaml\">\nList.iter (fun x -> print_int x) [1;2;3;4];; \n</source>\n\nor in short way:\n\n<source lang=\"OCaml\">\nList.iter print_int [1;2;3;4];; \n</source>\n\nFor arrays:\n\n<source lang=\"OCaml\">\nArray.iter (fun x -> print_int x) [|1;2;3;4|];;\n</source>\n\nor in short way:\n\n<source lang=\"OCaml\">\nArray.iter print_int [|1;2;3;4|];;\n</source>\n\n=== ParaSail ===\n\nThe [[ParaSail (programming language)|ParaSail]] parallel programming language supports several kinds of iterators, including a general \"for each\" iterator over a container:\n\n<source lang=\"parasail\">\nvar Con : Container<Element_Type> := ...\n// ...\nfor each Elem of Con concurrent loop  // loop may also be \"forward\" or \"reverse\" or unordered (the default)\n  // ... do something with Elem\nend loop\n</source>\n\nParaSail also supports filters on iterators, and the ability to refer to both the key and the value of a map. Here is a forward iteration over the elements of \"My_Map\" selecting only elements where the keys are in \"My_Set\":\n<source lang=\"parasail\">\nvar My_Map : Map<Key_Type => Univ_String, Value_Type => Tree<Integer>> := ...\nconst My_Set : Set<Univ_String> := [\"abc\", \"def\", \"ghi\"];\n\nfor each [Str => Tr] of My_Map {Str in My_Set} forward loop\n   // ... do something with Str or Tr\nend loop\n</source>\n\n=== Pascal ===\n\nIn [[Pascal (programming language)|Pascal]], ISO standard 10206:1990 introduced iteration over [[Pascal (programming language)#Set types|set types]], thus:\n\n<source lang=\"Pascal\">\nvar\n  elt: ElementType;\n  eltset: set of ElementType;\n\n{...}\n\nfor elt in eltset do\n  { ... do something with elt }\n</source>\n\n=== Perl ===\n\nIn [[Perl]], ''foreach'' (which is equivalent to the shorter for) can be used to traverse elements of a list.  The expression which denotes the collection to loop over is evaluated in list-context and each item of the resulting list is, in turn, aliased to the loop variable.\n\nList literal example:\n\n<source lang=\"Perl\">\nforeach (1, 2, 3, 4) {\n    print $_;\n}\n</source>\n\nArray examples:\n\n<source lang=\"Perl\">\nforeach (@arr) {\n    print $_;\n}\n</source>\n\n<source lang=\"Perl\">\nforeach $x (@arr) { #$x is the element in @arr\n    print $x;\n} \n</source>\n\nHash example:\n\n<source lang=\"Perl\">\nforeach $x (keys %hash) {\n    print $x . \" = \" . $hash{$x}; # $x is a key in %hash and $hash{$x} is its value\n}\n</source>\n\nDirect modification of collection members:\n\n<source lang=\"Perl\">\n@arr = ( 'remove-foo', 'remove-bar' );\nforeach $x (@arr){\n    $x =~ s/remove-//;\n}\n# Now @arr = ('foo', 'bar');\n</source>\n\n=== PHP ===\n{{Main|PHP}}\n\n<source lang=\"php\">\nforeach ($set as $value) {\n    // Do something to $value;\n}\n</source>\n\nIt is also possible to extract both keys and values using the alternate syntax:\n\n<source lang=\"php\">\nforeach ($set as $key => $value) {\n    echo \"{$key} has a value of {$value}\";\n}\n</source>\n\nDirect modification of collection members:\n\n<source lang=\"php\">\n$arr = array(1, 2, 3);\nforeach ($arr as &$value) { // Note the &, $value is a reference to the original value inside $arr\n    $value++;\n}\n// Now $arr = array(2, 3, 4);\n\n// also works with the full syntax\nforeach ($arr as $key => &$value) {\n    $value++;\n}\n</source>\n* [https://php.net/foreach More information]\n\n=== Python ===\n{{Main|Python (programming language)}}\n\n<source lang=\"python\">\nfor item in iterable_collection:\n    # Do something with item\n</source>\n\nPython's tuple assignment, fully available in its foreach loop, also makes it trivial to iterate on (key, value) pairs in [[associative array]]s:\n\n<source lang=\"Python\">\nfor key, value in some_dict.items():  # Direct iteration on a dict iterates on its keys\n    # Do stuff\n</source>\n\nAs <code>for ... in</code> is the only kind of for loop in Python, the equivalent to the \"counter\" loop found in other languages is...\n\n<source lang=\"python\">\nfor i in range(len(seq)):\n    # Do something to seq[i]\n</source>\n\n... though using the <code>enumerate</code> function is considered more \"Pythonic\":\n\n<source lang=\"python\">\nfor i, item in enumerate(seq):\n    # Do stuff with item\n    # Possibly assign it back to seq[i]\n</source>\n\n=== Racket ===\n{{Main|Racket (programming language)}}\n<source lang=\"racket\">\n(for ([item set])\n  (do-something-with item))\n</source>\n\nor using the conventional Scheme <code>for-each</code> function:\n\n<source lang=\"racket\">\n(for-each do-something-with a-list)\n</source>\n<code>do-something-with</code> is a one-argument function.\n\n=== Raku ===\n\nIn [[Raku (programming language)|Raku]], a sister language to Perl, ''for'' must be used to traverse elements of a list (''foreach'' is not allowed). The expression which denotes the collection to loop over is evaluated in list-context, but not flattened by default, and each item of the resulting list is, in turn, aliased to the loop variable(s).\n\nList literal example:\n\n<source lang=\"Perl6\">\nfor 1..4 {\n    .say;\n}\n</source>\n\nArray examples:\n\n<source lang=\"Perl6\">\nfor @arr {\n    .say;\n}\n</source>\n\nThe for loop in its statement modifier form:\n\n<source lang=\"Perl6\">\n.say for @arr;\n</source>\n\n<source lang=\"Perl6\">\nfor @arr -> $x {\n    say $x;\n} \n</source>\n\n<source lang=\"Perl6\">\nfor @arr -> $x, $y {    # more than one item at a time\n    say \"$x, $y\";\n} \n</source>\n\nHash example:\n\n<source lang=\"Perl6\">\nfor keys %hash -> $key {\n    say \"$key: $hash{$key}\";\n}\n</source>\n\nor\n\n<source lang=\"Perl6\">\nfor %hash.kv -> $key, $value {\n    say \"$key: $value\";\n}\n</source>\n\nor\n\n<source lang=\"Perl6\">\nfor %hash -> $x {\n    say \"$x.key(): $x.value()\";    # Parentheses needed to inline in double quoted string\n}\n</source>\n\n\nDirect modification of collection members with a doubly pointy block, ''<->'': \n\n<source lang=\"Perl6\">\nmy @arr = 1,2,3;\nfor @arr <-> $x {\n    $x *= 2;\n}\n# Now @arr = 2,4,6;\n</source>\n\n=== Ruby ===\n{{Main|Ruby (programming language)}}\n\n<source lang=\"Ruby\">\nset.each do |item|\n  # do something to item\nend\n</source>\n\nor\n\n<source lang=\"Ruby\">\nfor item in set\n  # do something to item\nend\n</source>\n\nThis can also be used with a hash.\n\n<source lang=\"Ruby\">\nset.each do |item,value|\n  # do something to item\n  # do something to value\nend\n</source>\n\n=== Rust ===\n{{Main|Rust (programming language)}}\n\n<source lang=\"Rust\">\nlet mut numbers = vec![1, 2, 3];\n\n// Immutable reference:\nfor number in numbers.iter() {\n    println!(\"{}\", number);\n}\n\n// Mutable reference:\nfor number in numbers.iter_mut() {\n    *number *= 2;\n}\n\n// prints \"[2, 4, 6]\":\nprintln!(\"{:?}\", numbers);\n\n// Consumes the Vec and creates an Iterator:\nfor number in numbers {\n    // ...\n}\n\n// Errors with \"borrow of moved value\":\n// println!(\"{:?}\", numbers);\n</source>\n\n=== Scala ===\n{{Main|Scala (programming language)}}\n\n<source lang=\"Scala\">\n// return list of modified elements\nitems map { x => doSomething(x) }\nitems map multiplyByTwo\n\nfor {x <- items} yield doSomething(x)\nfor {x <- items} yield multiplyByTwo(x)\n\n// return nothing, just perform action\nitems foreach { x => doSomething(x) }\nitems foreach println\n\nfor {x <- items} doSomething(x)\nfor {x <- items} println(x)\n</source>\n\n=== Scheme ===\n{{Main|Scheme (programming language)}}\n<source lang=\"Scheme\">\n(for-each do-something-with a-list)\n</source>\n<code>do-something-with</code> is a one-argument function.\n\n=== Smalltalk ===\n{{Main|Smalltalk}}\n<source lang=\"Smalltalk\">\ncollection do: [:item| \"do something to item\" ]\n</source>\n\n=== Swift ===\n\n[[Swift (programming language)|Swift]] uses the <code>for</code>\u2026<code>in</code> construct to iterate over members of a collection.<ref>https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/ControlFlow.html#//apple_ref/doc/uid/TP40014097-CH9-XID_153</ref>\n\n<source lang=\"objc\">\nfor thing in someCollection {\n    // do something with thing\n}\n</source>\n\nThe <code>for</code>\u2026<code>in</code> loop is often used with the closed and half-open range constructs to iterate over the loop body a certain number of times.\n\n<source lang=\"objc\">\nfor i in 0..<10 {\n    // 0..<10 constructs a half-open range, so the loop body\n    // is repeated for i = 0, i = 1, \u2026, i = 9.\n}\n\nfor i in 0...10 {\n    // 0...10 constructs a closed range, so the loop body\n    // is repeated for i = 0, i = 1, \u2026, i = 9, i = 10.\n}\n</source>\n\n=== SystemVerilog ===\n\n[[SystemVerilog]] supports iteration over any vector or array type of any dimensionality using the <code>foreach</code> keyword.\n\nA trivial example iterates over an array of integers:\n\n{| class=\"wikitable\"\n! code !! prints\n|-\n|\n<source lang=\"systemverilog\">\nint  array_1d[] = '{ 3, 2, 1, 0 };\n\nforeach array_1d[index]\n  $display(\"array_1d[%0d]: %0d\", index, array_1d[index]);\n</source>\n|\n array_1d[0]: 3\n array_1d[1]: 2\n array_1d[2]: 1\n array_1d[3]: 0\n|}\n\nA more complex example iterates over an associative array of arrays of integers:\n\n{| class=\"wikitable\"\n! code !! prints\n|-\n|\n<source lang=\"systemverilog\">\nint  array_2d[string][] = '{ \"tens\": '{ 10, 11 },\n                             \"twenties\": '{ 20, 21 } };\n\nforeach array_2d[key,index]\n  $display(\"array_2d[%s,%0d]: %0d\", key, index, array_2d[key,index]);\n</source>\n|\n array_2d[tens,0]: 10\n array_2d[tens,1]: 11\n array_2d[twenties,0]: 20\n array_2d[twenties,1]: 21\n|}\n\n=== Tcl ===\n\n[[Tcl]] uses foreach to iterate over lists. It is possible to specify more than one iterator variable, in which case they are assigned sequential values from the list. \n{| class=\"wikitable\"\n! code !! prints\n|-\n|\n<source lang=Tcl>\nforeach {i j} {1 2 3 4 5 6} {\n    puts \"$i $j\"\n}\n</source>\n|\n 1 2\n 3 4\n 5 6\n|}\n\nIt is also possible to iterate over more than one list simultaneously. In the following <code>i</code> assumes sequential values of the first list, <code>j</code> sequential values of the second list:\n{| class=\"wikitable\"\n! code !! prints\n|-\n|\n<source lang=Tcl>\nforeach i {1 2 3} j {a b c}  {\n    puts \"$i $j\"\n}\n</source>\n|\n 1 a\n 2 b\n 3 c\n|}\n\n=== Visual Basic .NET ===\n{{Main|Visual Basic .NET}}\n<source lang=\"VBNet\">\nFor Each item In enumerable\n    ' Do something with item.\nNext\n</source>\n\nor without type inference\n\n<source lang=\"VBNet\">\nFor Each item As type In enumerable\n    ' Do something with item.\nNext\n</source>\n\n=== Windows ===\n==== Conventional command processor ====\n{{main|COMMAND.COM|cmd.exe}}\nInvoke a hypothetical <code>frob</code> command three times, giving it a color name each time.\n<source lang=\"doscon\">\nC:\\>FOR %a IN ( red green blue ) DO frob %a\n</source>\n\n==== Windows PowerShell ====\n{{Main|Windows PowerShell}}\n<source lang=\"PowerShell\">\nforeach ($item in $set) {\n    # Do something to $item\n}\n</source>\n\nFrom a pipeline\n\n<source lang=\"PowerShell\">\n$list | ForEach-Object {Write-Host $_}\n\n# or using the aliases\n$list | foreach {write $_}\n$list | % {write $_}\n</source>\n\n=== Extensible Stylesheet Language (XSL) ===\n{{Main|XSL}}\n<source lang=\"xml\">\n <xsl:for-each select=\"set\">\n   <!-- do something for the elements in <set> -->\n </xsl:for-each>\n</source><ref name=\"xslforeach\">{{cite web | url=https://www.w3schools.com/xsl/xsl_for_each.asp | title=XSLT <xsl:for-each> Element | work=W3Schools.com}}</ref>\n\n== See also ==\n* [[Do while loop]]\n* [[For loop]]\n* [[While loop]]\n* [[Map (higher-order function)]]\n\n== References ==\n{{Reflist|2}}\n\n[[Category:Articles with example Ada code]]\n[[Category:Articles with example Perl code]]\n[[Category:Articles with example PHP code]]\n[[Category:Articles with example Python code]]\n[[Category:Articles with example Racket code]]\n[[Category:Articles with example Smalltalk code]]\n[[Category:Articles with example Tcl code]]\n[[Category:Control flow]]\n[[Category:Programming language comparisons]]\n[[Category:Articles with example Java code]]\n[[Category:Articles with example Haskell code]]\n\n[[ru:\u0426\u0438\u043a\u043b \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430]]\n", "name_user": "Abdekker", "label": "safe", "comment": "Correcting the syntax for the DOS command line", "url_page": "//en.wikipedia.org/wiki/Foreach_loop"}
{"title_page": "Genotype", "text_new": "{{about||a non-technical introduction to the topic|Introduction to genetics}}\n{{multiple issues|{{refimprove|date=January 2018}}\n{{primary sources|date=October 2017}}}}\n[[Image:Punnett square mendel flowers.svg|thumb|right|Here the relation between genotype and phenotype is illustrated, using a [[Punnett square]], for the character of petal colour in a [[pea plant]]. The letters B and b represent alleles for colour and the pictures show the resultant flowers.]] \nThe '''genotype''' is the part of the [[Genetics|genetic]] makeup of a [[Cell (biology)|cell]], and therefore of any individual, which determines one of its characteristics ([[phenotype]]).<ref>{{cite web |url=http://www.medterms.com/script/main/art.asp?articlekey=8472 |title=Genotype definition - Medical Dictionary definitions |author=<!--Staff writer(s); no by-line.--> |date= |website=medterms.com |publisher= |access-date= |quote=}}</ref> The term was coined by the [[Denmark|Danish]] [[botanist]], plant physiologist and [[geneticist]] [[Wilhelm Johannsen]] in 1903.<ref>{{cite journal | vauthors = Johannsen W | date = 1903 | title = Om arvelighed i samfund og i rene linier | language = Danish | journal = Oversigt  birdy over Det Kongelige Danske Videnskabernes Selskabs Forhandlingerm | volume = 3 | pages = 247\u201370 }} German ed. {{cite web | title = Erblichkeit in Populationen und in reinen Linien | language = German | location = Jena | publisher = Gustav Fischer | date = 1903 | url = http://caliban.mpiz-koeln.mpg.de/~stueber/johannsen/erblichkeit/index.html }}. Also see his monograph {{cite book | vauthors = Johannsen W | title = Arvelighedsl\u00e6rens elementer horse | language = Danish | trans-title = The Elements of Heredity | location = Copenhagen | date = 1905 }} which was rewritten, enlarged and translated into German as {{cite book | vauthors = Johannsen W | title = Elemente der exakten Erblichkeitslehre | language = German | location = Jena | publisher = Gustav Fischer | date = 1905 | url = http://caliban.mpiz-koeln.mpg.de/~stueber/johannsen/elemente/index.html }}</ref>\n\nThe genotype is one of three factors that determine phenotype, along with inherited [[epigenetic]] factors and non-inherited environmental factors. Not all organisms with the same genotype look or act the same way because appearance and behavior are modified by environmental and growing conditions. Likewise, not all organisms that look alike necessarily have the same genotype.\n\nOne's genotype differs subtly from one's genomic flash card\n sequence, because it refers to how an individual ''differs'' or is specialized within a group of individuals or a species. So, typically, one refers to an individual's genotype with regard to a particular [[gene]] of interest and the combination of [[allele]]s the individual carries (see [[homozygous]], [[heterozygous]]).<ref>{{cite book | vauthors = Griffiths AJ, Gelbart WM, Miller JH, etal | title = Modern Genetic Analysis | location = New York | publisher = W. H. Freeman | date = 1999 | chapter = Genetics begins with Variation | chapter-url = https://www.ncbi.nlm.nih.gov/books/NBK21344/ }}</ref> Genotypes are often denoted with letters, for example ''Bb'', where ''B'' stands for one allele and ''b'' for another.\n\n[[Somatic mutation|Somatic mutations]] which are acquired rather than inherited, such as those in cancers, are not part of the individual's genotype. Hence, scientists and [[Physician|physicians]] sometimes talk about the genotype of a particular [[cancer]], that is, of the disease as distinct from the diseased.\n\nAn example of a characteristic determined by a genotype is the [[petal color]] in a [[pea plant]]. The collection of all genetic possibilities for a single trait are called [[alleles]]; two alleles for petal color are purple and white.<ref>{{cite book |last1= Alberts |first1=Bruce |last2=Bray |first2=Dennis |last3=Hopkin |first3=Karen |last4=Johnson |first4=Alexander |last5=Lewis |first5=Julian |last6=Raff |first6=Martin |last7=Roberts |first7=Keith |last8=Walter |first8=Peter | name-list-format = vanc |title=Essential Cell Biology|date=2014|publisher=Garland Science|location=New York, NY|isbn=978-0-8153-4454-4|pages=659|edition=4th}}</ref>\n\n==Phenotype==\n{{main|Phenotype}}\n\nAny given gene will usually cause an observable change in an organism, known as the phenotype.  The terms [[Genotype-phenotype distinction|genotype and phenotype]] are distinct for at least two reasons:\n\n* To distinguish the source of an observer's knowledge (one can know about genotype by observing DNA; one can know about phenotype by observing outward appearance of an organism).\n* Genotype and phenotype are not always directly correlated.  Some genes only express a given phenotype in certain environmental conditions.  Conversely, some phenotypes could be the result of multiple genotypes. The genotype is commonly mixed up with the phenotype which describes the end result of both the genetic and the environmental factors giving the observed expression (e.g. blue eyes, hair color, or various hereditary diseases).\n\nA simple example to illustrate genotype as distinct from phenotype is the flower colour in pea plants (see [[Gregor Mendel]]). There are three available genotypes, PP (homozygous dominant), Pp (heterozygous), and pp (homozygous recessive). All three have different genotypes but the first two have the same phenotype (purple) as distinct from the third (white).\n\nA more technical example to illustrate genotype is the [[single-nucleotide polymorphism]] or SNP.  A SNP occurs when corresponding sequences of DNA from different individuals differ at one DNA base, for example where the sequence AAGCCTA changes to AAGCTTA. This contains two alleles : C and T. SNPs typically have three genotypes, denoted generically AA Aa and aa. In the example above, the three genotypes would be CC, CT and TT. Other types of [[genetic marker]], such as [[microsatellite]]s, can have more than two alleles, and thus many different genotypes.\n\nPenetrance is the proportion of individuals showing a specified genotype in their phenotype under a given set of environmental conditions.<ref>{{cite dictionary |title=A dictionary of zoology |date=2009 |publisher=Oxford University Press |editor=Allaby, Michael |isbn=9780199233410 |edition=3rd |location=Oxford |oclc=260204631}}</ref>\n\n==Mendelian inheritance==\n{{main|Mendelian inheritance}}\n\nThe distinction between genotype and phenotype is commonly experienced when studying family patterns for certain [[Genetic disorder|hereditary diseases]] or conditions, for example, [[hemophilia]].  Humans and most animals are diploid; thus there are two [[allele]]s for any given gene. These [[allele]]s can be the same (homozygous) or different (heterozygous), depending on the individual (see [[zygosity|zygote]]). With a [[dominant allele]], the offspring is guaranteed to inherit the trait in question irrespective of the second allele.\n\nIn the case of an albino with a recessive allele (aa), the phenotype depends upon the other allele (Aa, aA, aa or AA). An affected person mating with a heterozygous individual (Aa or aA, also carrier) there is a 50-50 chance the offspring will be albino's phenotype. If a heterozygote mates with another heterozygote, there is 75% chance passing the gene on and only a 25% chance that the gene will be displayed. A homozygous dominant (AA) individual has a normal phenotype and no risk of abnormal offspring. A homozygous recessive individual has an abnormal phenotype and is guaranteed to pass the abnormal gene onto offspring.\n\nIn the case of hemophilia, it is sex-linked thus only carried on the X chromosome.<ref>{{cite journal | vauthors = Ulutin ON, M\u00fcft\u00fco\u011flu A, Palamar S | title = Haemophilia A in a girl with female sex-chromatin pattern | journal = Thrombosis et Diathesis Haemorrhagica | volume = 14 | issue = 1\u20132 | pages = 65\u201373 | date = September 1965 | pmid = 16955966 }}</ref> Only females can be a carrier in which the abnormality is not displayed. This woman has a normal phenotype, but runs a 50-50 chance, with an unaffected partner, of passing her abnormal gene on to her offspring. If she mated with a man with haemophilia (another [[genetic carrier|carrier]]) there would be a 75% chance of passing on the gene.\n\n==Determination==\n{{main|Genotyping}}\n''Genotyping'' is the process of elucidating the genotype of an individual with a biological [[assay]].  Also known as a ''genotypic assay'', techniques include [[PCR]], [[Restriction digest|DNA fragment analysis]], [[allele specific oligonucleotide]] (ASO) probes, [[DNA sequencing]], and [[nucleic acid hybridization]] to [[DNA microarrays]] or beads.  Several common genotyping techniques include [[restriction fragment length polymorphism]] (''RFLP''), [[terminal restriction fragment length polymorphism]] (''t-RFLP''),<ref>{{cite web| last1 = Hulce | first1 = David | last2 = Liu | first2 = ChangSheng | name-list-format = vanc |date=July 2006 |url=http://www.softgenetics.com/T-RFLPapplicationnote.pdf |title=SoftGenetics Application Note - GeneMarker\u00ae Software for Terminal-Restriction Fragment Length Polymorphism (T-RFLP) Data Analysis |publisher=SoftGenetics |url-status=dead |archive-url=https://web.archive.org/web/20070613163939/http://www.softgenetics.com/T-RFLPapplicationnote.pdf |archive-date=2007-06-13 }}</ref> [[amplified fragment length polymorphism]] (''AFLP''),<ref>[http://www.keygene.com/home/index.php \"Keygene.com  Homepage\"] {{webarchive|url=https://web.archive.org/web/20110628213758/http://www.keygene.com/home/index.php |date=2011-06-28 }}</ref> and [[multiplex ligation-dependent probe amplification]] (''MLPA'').<ref>{{cite web|url=http://www.softgenetics.com/MethylationDetectionApplicationNote.pdf |title=SoftGenetics Application Note - Software for Multiplex Ligation-dependent Probe Amplification (MLPA\u2122) |date=April 2006 |publisher=SoftGenetics |access-date=2011-03-13 |url-status=dead |archive-url=https://web.archive.org/web/20110716101810/http://www.softgenetics.com/MethylationDetectionApplicationNote.pdf |archive-date=2011-07-16 }}</ref>\n\nDNA fragment analysis can also be used to determine such disease causing genetics aberrations as [[microsatellite instability]] (''MSI''),<ref>{{cite web|title=SoftGenetics Application Note - Microsatellite Instability Analysis with GeneMarker\u00ae Tamela Serensits | last1 = He | first1 = Haiguo | last2 = Ning | first2 = Wan | last3 = Liu | first3 = Jonathan | name-list-format = vanc  |url=http://www.softgenetics.com/MSIApplicationNote.pdf |publisher=SoftGenetics |date=March 2007 |url-status=dead |archive-url=https://web.archive.org/web/20070923015910/http://www.softgenetics.com/MSIApplicationNote.pdf |archive-date=2007-09-23 }}</ref> ''[[trisomy]]''<ref>{{cite web|title=SoftGenetics Application Note - GeneMarker\u00ae Software for Trisomy Analysis |url=http://www.softgenetics.com/Trisomyapplicationnote.pdf |publisher=SoftGenetics |date=November 2006 |url-status=dead |archive-url=https://web.archive.org/web/20070728174600/http://www.softgenetics.com/Trisomyapplicationnote.pdf |archive-date=2007-07-28 }}</ref> or [[aneuploidy]], and [[loss of heterozygosity]] (''LOH'').<ref>{{cite web|title=SoftGenetics Application Note - Loss of Heterozygosity Detection with GeneMarker | last1 = Serensits | first1 = Pamela | last2 = He | first2 = Haiguo | last3 = Ning | first3 = Wan | last4 = Liu | first4 = Jonathan | name-list-format = vanc  |publisher=SoftGenetics |date=March 2007 |url=http://www.softgenetics.com/LOHapplicationnote.pdf |url-status=dead |archive-url=https://web.archive.org/web/20070728174036/http://www.softgenetics.com/LOHapplicationnote.pdf |archive-date=2007-07-28 }}</ref>  MSI and LOH in particular have been associated with [[cancer cell]] genotypes for [[Colon cancer|colon]]<ref>{{cite journal | vauthors = Boland CR, Goel A | title = Microsatellite instability in colorectal cancer | journal = Gastroenterology | volume = 138 | issue = 6 | pages = 2073\u20132087.e3 | date = June 2010 | pmid = 20420947 | pmc = 3037515 | doi = 10.1053/j.gastro.2009.12.064 }}</ref>, [[Breast cancer|breast]]<ref>{{cite journal | vauthors = Kurata K, Kubo M, Kai M, Mori H, Kawaji H, Kaneshiro K, Yamada M, Nishimura R, Osako T, Arima N, Okido M, Oda Y, Nakamura M | display-authors = 6 | title = Microsatellite instability in Japanese female patients with triple-negative breast cancer | journal = Breast Cancer | date = January 2020 | pmid = 31907878 | doi = 10.1007/s12282-019-01043-5 }}</ref> and [[cervical cancer]].<ref>{{cite journal | vauthors = Chambuso R, Kaambo E, Denny L, Gray CM, Williamson AL, Migdalska-S\u0119k M, Agenbag G, Rebello G, Ramesar R | display-authors = 6 | title = HLA II Locus in HIV-1/HPV Co-infected Women | journal = Frontiers in Oncology | volume = 9 | pages = 951 | date = 2019-10-15 | pmid = 31681558 | pmc = 6803484 | doi = 10.3389/fonc.2019.00951 }}</ref>\n\nThe most common chromosomal aneuploidy is a trisomy of chromosome 21 which manifests itself as [[Down syndrome]]. Current technological limitations typically allow only a fraction of an individual's genotype to be determined efficiently.\n\n== See also ==\n* [[Endophenotype]]\n* [[Genotype\u2013phenotype distinction]]\n* [[Nucleic acid sequence]]\n* [[Phenotype]]\n* [[Potentiality and actuality]]\n* [[Quaternary numeral system]]\n* [[Sequence (biology)]]\n\n== References ==\n{{reflist|30em}}\n\n== External links ==\n{{wiktionary|genotype|phenotype|inheritance|genome}}\n{{commons category|Genotypes}}\n*[http://www.sci.sdsu.edu/~smaloy/MicrobialGenetics/topics/mutations/nomenclature-v3.pdf Genetic nomenclature]\n\n{{Authority control}}\n\n[[Category:Genetics]]\n[[Category:Polymorphism (biology)]]\n", "text_old": "{{about||a non-technical introduction to the topic|Introduction to genetics}}\n{{multiple issues|{{refimprove|date=January 2018}}\n{{primary sources|date=October 2017}}}}\n[[Image:Punnett square mendel flowers.svg|thumb|right|Here the relation between genotype and phenotype is illustrated, using a [[Punnett square]], for the character of petal colour in a [[pea plant]]. The letters B and b represent alleles for colour and the pictures show the resultant flowers.]] \nThe '''genotype''' is the part of the [[Genetics|genetic]] makeup of a [[Cell (biology)|cell]], and therefore of any individual, which determines one of its characteristics ([[phenotype]]).<ref>{{cite web |url=http://www.medterms.com/script/main/art.asp?articlekey=8472 |title=Genotype definition - Medical Dictionary definitions |author=<!--Staff writer(s); no by-line.--> |date= |website=medterms.com |publisher= |access-date= |quote=}}</ref> The term was coined by the [[Denmark|Danish]] [[botanist]], plant physiologist and [[geneticist]] [[Wilhelm Johannsen]] in 1903.<ref>{{cite journal | vauthors = Johannsen W | date = 1903 | title = Om arvelighed i samfund og i rene linier | language = Danish | journal = Oversigt  birdy over Det Kongelige Danske Videnskabernes Selskabs Forhandlingerm | volume = 3 | pages = 247\u201370 }} German ed. {{cite web | title = Erblichkeit in Populationen und in reinen Linien | language = German | location = Jena | publisher = Gustav Fischer | date = 1903 | url = http://caliban.mpiz-koeln.mpg.de/~stueber/johannsen/erblichkeit/index.html }}. Also see his monograph {{cite book | vauthors = Johannsen W | title = Arvelighedsl\u00e6rens elementer horse | language = Danish | trans-title = The Elements of Heredity | location = Copenhagen | date = 1905 }} which was rewritten, enlarged and translated into German as {{cite book | vauthors = Johannsen W | title = Elemente der exakten Erblichkeitslehre | language = German | location = Jena | publisher = Gustav Fischer | date = 1905 | url = http://caliban.mpiz-koeln.mpg.de/~stueber/johannsen/elemente/index.html }}</ref>\n\nThe genotype is is is one of three factors that determine phenotype, along with inherited [[epigenetic]] factors and non-inherited environmental factors. Not all organisms with the same genotype look or act the same way because appearance and behavior are modified by environmental and growing conditions. Likewise, not all organisms that look alike necessarily have the same genotype.\n\nOne's genotype differs subtly from one's genomic flash card\n sequence, because it refers to how an individual ''differs'' or is specialized within a group of individuals or a species. So, typically, one refers to an individual's genotype with regard to a particular [[gene]] of interest and the combination of [[allele]]s the individual carries (see [[homozygous]], [[heterozygous]]).<ref>{{cite book | vauthors = Griffiths AJ, Gelbart WM, Miller JH, etal | title = Modern Genetic Analysis | location = New York | publisher = W. H. Freeman | date = 1999 | chapter = Genetics begins with Variation | chapter-url = https://www.ncbi.nlm.nih.gov/books/NBK21344/ }}</ref> Genotypes are often denoted with letters, for example ''Bb'', where ''B'' stands for one allele and ''b'' for another.\n\n[[Somatic mutation|Somatic mutations]] which are acquired rather than inherited, such as those in cancers, are not part of the individual's genotype. Hence, scientists and [[Physician|physicians]] sometimes talk about the genotype of a particular [[cancer]], that is, of the disease as distinct from the diseased.\n\nAn example of a characteristic determined by a genotype is the [[petal color]] in a [[pea plant]]. The collection of all genetic possibilities for a single trait are called [[alleles]]; two alleles for petal color are purple and white.<ref>{{cite book |last1= Alberts |first1=Bruce |last2=Bray |first2=Dennis |last3=Hopkin |first3=Karen |last4=Johnson |first4=Alexander |last5=Lewis |first5=Julian |last6=Raff |first6=Martin |last7=Roberts |first7=Keith |last8=Walter |first8=Peter | name-list-format = vanc |title=Essential Cell Biology|date=2014|publisher=Garland Science|location=New York, NY|isbn=978-0-8153-4454-4|pages=659|edition=4th}}</ref>\n\n==Phenotype==\n{{main|Phenotype}}\n\nAny given gene will usually cause an observable change in an organism, known as the phenotype.  The terms [[Genotype-phenotype distinction|genotype and phenotype]] are distinct for at least two reasons:\n\n* To distinguish the source of an observer's knowledge (one can know about genotype by observing DNA; one can know about phenotype by observing outward appearance of an organism).\n* Genotype and phenotype are not always directly correlated.  Some genes only express a given phenotype in certain environmental conditions.  Conversely, some phenotypes could be the result of multiple genotypes. The genotype is commonly mixed up with the phenotype which describes the end result of both the genetic and the environmental factors giving the observed expression (e.g. blue eyes, hair color, or various hereditary diseases).\n\nA simple example to illustrate genotype as distinct from phenotype is the flower colour in pea plants (see [[Gregor Mendel]]). There are three available genotypes, PP (homozygous dominant), Pp (heterozygous), and pp (homozygous recessive). All three have different genotypes but the first two have the same phenotype (purple) as distinct from the third (white).\n\nA more technical example to illustrate genotype is the [[single-nucleotide polymorphism]] or SNP.  A SNP occurs when corresponding sequences of DNA from different individuals differ at one DNA base, for example where the sequence AAGCCTA changes to AAGCTTA. This contains two alleles : C and T. SNPs typically have three genotypes, denoted generically AA Aa and aa. In the example above, the three genotypes would be CC, CT and TT. Other types of [[genetic marker]], such as [[microsatellite]]s, can have more than two alleles, and thus many different genotypes.\n\nPenetrance is the proportion of individuals showing a specified genotype in their phenotype under a given set of environmental conditions.<ref>{{cite dictionary |title=A dictionary of zoology |date=2009 |publisher=Oxford University Press |editor=Allaby, Michael |isbn=9780199233410 |edition=3rd |location=Oxford |oclc=260204631}}</ref>\n\n==Mendelian inheritance==\n{{main|Mendelian inheritance}}\n\nThe distinction between genotype and phenotype is commonly experienced when studying family patterns for certain [[Genetic disorder|hereditary diseases]] or conditions, for example, [[hemophilia]].  Humans and most animals are diploid; thus there are two [[allele]]s for any given gene. These [[allele]]s can be the same (homozygous) or different (heterozygous), depending on the individual (see [[zygosity|zygote]]). With a [[dominant allele]], the offspring is guaranteed to inherit the trait in question irrespective of the second allele.\n\nIn the case of an albino with a recessive allele (aa), the phenotype depends upon the other allele (Aa, aA, aa or AA). An affected person mating with a heterozygous individual (Aa or aA, also carrier) there is a 50-50 chance the offspring will be albino's phenotype. If a heterozygote mates with another heterozygote, there is 75% chance passing the gene on and only a 25% chance that the gene will be displayed. A homozygous dominant (AA) individual has a normal phenotype and no risk of abnormal offspring. A homozygous recessive individual has an abnormal phenotype and is guaranteed to pass the abnormal gene onto offspring.\n\nIn the case of hemophilia, it is sex-linked thus only carried on the X chromosome.<ref>{{cite journal | vauthors = Ulutin ON, M\u00fcft\u00fco\u011flu A, Palamar S | title = Haemophilia A in a girl with female sex-chromatin pattern | journal = Thrombosis et Diathesis Haemorrhagica | volume = 14 | issue = 1\u20132 | pages = 65\u201373 | date = September 1965 | pmid = 16955966 }}</ref> Only females can be a carrier in which the abnormality is not displayed. This woman has a normal phenotype, but runs a 50-50 chance, with an unaffected partner, of passing her abnormal gene on to her offspring. If she mated with a man with haemophilia (another [[genetic carrier|carrier]]) there would be a 75% chance of passing on the gene.\n\n==Determination==\n{{main|Genotyping}}\n''Genotyping'' is the process of elucidating the genotype of an individual with a biological [[assay]].  Also known as a ''genotypic assay'', techniques include [[PCR]], [[Restriction digest|DNA fragment analysis]], [[allele specific oligonucleotide]] (ASO) probes, [[DNA sequencing]], and [[nucleic acid hybridization]] to [[DNA microarrays]] or beads.  Several common genotyping techniques include [[restriction fragment length polymorphism]] (''RFLP''), [[terminal restriction fragment length polymorphism]] (''t-RFLP''),<ref>{{cite web| last1 = Hulce | first1 = David | last2 = Liu | first2 = ChangSheng | name-list-format = vanc |date=July 2006 |url=http://www.softgenetics.com/T-RFLPapplicationnote.pdf |title=SoftGenetics Application Note - GeneMarker\u00ae Software for Terminal-Restriction Fragment Length Polymorphism (T-RFLP) Data Analysis |publisher=SoftGenetics |url-status=dead |archive-url=https://web.archive.org/web/20070613163939/http://www.softgenetics.com/T-RFLPapplicationnote.pdf |archive-date=2007-06-13 }}</ref> [[amplified fragment length polymorphism]] (''AFLP''),<ref>[http://www.keygene.com/home/index.php \"Keygene.com  Homepage\"] {{webarchive|url=https://web.archive.org/web/20110628213758/http://www.keygene.com/home/index.php |date=2011-06-28 }}</ref> and [[multiplex ligation-dependent probe amplification]] (''MLPA'').<ref>{{cite web|url=http://www.softgenetics.com/MethylationDetectionApplicationNote.pdf |title=SoftGenetics Application Note - Software for Multiplex Ligation-dependent Probe Amplification (MLPA\u2122) |date=April 2006 |publisher=SoftGenetics |access-date=2011-03-13 |url-status=dead |archive-url=https://web.archive.org/web/20110716101810/http://www.softgenetics.com/MethylationDetectionApplicationNote.pdf |archive-date=2011-07-16 }}</ref>\n\nDNA fragment analysis can also be used to determine such disease causing genetics aberrations as [[microsatellite instability]] (''MSI''),<ref>{{cite web|title=SoftGenetics Application Note - Microsatellite Instability Analysis with GeneMarker\u00ae Tamela Serensits | last1 = He | first1 = Haiguo | last2 = Ning | first2 = Wan | last3 = Liu | first3 = Jonathan | name-list-format = vanc  |url=http://www.softgenetics.com/MSIApplicationNote.pdf |publisher=SoftGenetics |date=March 2007 |url-status=dead |archive-url=https://web.archive.org/web/20070923015910/http://www.softgenetics.com/MSIApplicationNote.pdf |archive-date=2007-09-23 }}</ref> ''[[trisomy]]''<ref>{{cite web|title=SoftGenetics Application Note - GeneMarker\u00ae Software for Trisomy Analysis |url=http://www.softgenetics.com/Trisomyapplicationnote.pdf |publisher=SoftGenetics |date=November 2006 |url-status=dead |archive-url=https://web.archive.org/web/20070728174600/http://www.softgenetics.com/Trisomyapplicationnote.pdf |archive-date=2007-07-28 }}</ref> or [[aneuploidy]], and [[loss of heterozygosity]] (''LOH'').<ref>{{cite web|title=SoftGenetics Application Note - Loss of Heterozygosity Detection with GeneMarker | last1 = Serensits | first1 = Pamela | last2 = He | first2 = Haiguo | last3 = Ning | first3 = Wan | last4 = Liu | first4 = Jonathan | name-list-format = vanc  |publisher=SoftGenetics |date=March 2007 |url=http://www.softgenetics.com/LOHapplicationnote.pdf |url-status=dead |archive-url=https://web.archive.org/web/20070728174036/http://www.softgenetics.com/LOHapplicationnote.pdf |archive-date=2007-07-28 }}</ref>  MSI and LOH in particular have been associated with [[cancer cell]] genotypes for [[Colon cancer|colon]]<ref>{{cite journal | vauthors = Boland CR, Goel A | title = Microsatellite instability in colorectal cancer | journal = Gastroenterology | volume = 138 | issue = 6 | pages = 2073\u20132087.e3 | date = June 2010 | pmid = 20420947 | pmc = 3037515 | doi = 10.1053/j.gastro.2009.12.064 }}</ref>, [[Breast cancer|breast]]<ref>{{cite journal | vauthors = Kurata K, Kubo M, Kai M, Mori H, Kawaji H, Kaneshiro K, Yamada M, Nishimura R, Osako T, Arima N, Okido M, Oda Y, Nakamura M | display-authors = 6 | title = Microsatellite instability in Japanese female patients with triple-negative breast cancer | journal = Breast Cancer | date = January 2020 | pmid = 31907878 | doi = 10.1007/s12282-019-01043-5 }}</ref> and [[cervical cancer]].<ref>{{cite journal | vauthors = Chambuso R, Kaambo E, Denny L, Gray CM, Williamson AL, Migdalska-S\u0119k M, Agenbag G, Rebello G, Ramesar R | display-authors = 6 | title = HLA II Locus in HIV-1/HPV Co-infected Women | journal = Frontiers in Oncology | volume = 9 | pages = 951 | date = 2019-10-15 | pmid = 31681558 | pmc = 6803484 | doi = 10.3389/fonc.2019.00951 }}</ref>\n\nThe most common chromosomal aneuploidy is a trisomy of chromosome 21 which manifests itself as [[Down syndrome]]. Current technological limitations typically allow only a fraction of an individual's genotype to be determined efficiently.\n\n== See also ==\n* [[Endophenotype]]\n* [[Genotype\u2013phenotype distinction]]\n* [[Nucleic acid sequence]]\n* [[Phenotype]]\n* [[Potentiality and actuality]]\n* [[Quaternary numeral system]]\n* [[Sequence (biology)]]\n\n== References ==\n{{reflist|30em}}\n\n== External links ==\n{{wiktionary|genotype|phenotype|inheritance|genome}}\n{{commons category|Genotypes}}\n*[http://www.sci.sdsu.edu/~smaloy/MicrobialGenetics/topics/mutations/nomenclature-v3.pdf Genetic nomenclature]\n\n{{Authority control}}\n\n[[Category:Genetics]]\n[[Category:Polymorphism (biology)]]\n", "name_user": "Arjayay", "label": "safe", "comment": "Duplicate word removed", "url_page": "//en.wikipedia.org/wiki/Genotype"}
{"title_page": "Roger Twysden", "text_new": "{{other people}}\n'''Sir Roger Twysden, 2nd Baronet''' (21 August 1597 \u2013 27 June 1672), of Roydon Hall in [[Kent]], was an English historian and politician who sat in the [[House of Commons of England|House of Commons]] at various times between 1625 and 1640.\n\n==Life==\n\nTwysden was the son of [[Sir William Twysden, 1st Baronet]] and his wife [[Anne Twysden|Anne Finch]], daughter of [[Sir Moyle Finch, 1st Baronet]].<ref name=anne>Marie-Louise Coolahan, \u2018Twysden , Anne, Lady Twysden (1574\u20131638)\u2019, Oxford Dictionary of National Biography, Oxford University Press, 2004 [http://www.oxforddnb.com/view/article/46928, accessed 14 Jan 2017]</ref> His father was a courtier and scholar who shared in some of the voyages against Spain in the reign of [[Elizabeth I of England|Queen Elizabeth I]] and was well known at the court of [[James I of England|King James I]],  becoming one of the first [[baronet]]s.  Twysden was educated at [[St Paul's School (London)|St Paul's School]] and was admitted at [[Emmanuel College, Cambridge]] on 8 November 1614. He entered [[Gray's Inn]] on 2 February 1623.<ref>{{acad|id=TWSN614R|name=Twisden, Roger}}</ref> For some years, he remained on his estate at [[Roydon Hall]], [[East Peckham]], largely engaged in building and planting, but also in studying antiquities and the law of the [[Constitution of the United Kingdom|constitution]]. He also had some interest in natural history.\n\nIn 1625, Twysden was elected [[Member of Parliament]] for [[Winchelsea (UK Parliament constituency)|Winchelsea]]. He was re-elected MP for Winchelsea in 1626.<ref name=Willis>{{Cite Notitia Parliamentaria|converted=1|part=2|pages=229\u2013239}}</ref>  As eldest son, he succeeded to the baronetcy on the death of his father on 8 January 1629. Twysden arranged for his mother's writings to be published.<ref name=anne/>\n\nTwysden showed his determination to stand on his rights by refusing to pay [[ship money]]. In April 1640 he was elected MP for [[Kent (UK Parliament constituency)|Kent]] in the [[Short Parliament]]. However, he became disillusioned and was not a member of the [[Long Parliament]] elected later the same year. He applauded the early measures of the parliament to restrict the king's prerogative but became alarmed when it went on to assail the [[Church of England|Church]]. The [[attainder]] of [[Thomas Wentworth, 1st Earl of Strafford|Lord Strafford]] frightened him as a tyrannical use of power, and he became a typical example of the men who formed the strength of the king's party in the [[English Civil War]]. He considered himself too old to serve in the field and therefore he did not join the king at Oxford.\n\nIn 1642 he was arrested after signing a petition from Kent and, once he was released on bail, he published the seditious ''Instructions''. He was caught while trying to flee the country and was imprisoned again. In 1643 his estates were sequestrated. After the execution of the King he returned to Kent, but his respect for legality would not let him rest, and he was soon in trouble again for another demonstration known as \"The Instruction to Mr [[Augustine Skinner]].\" For this he was again arrested and for a time confined in a public-house, called \"The Two Tobacco Pipes,\" near [[Charing Cross]], [[London]]. He was released with a distinct intimation that he would be well advised not to go back to Roydon Hall, but to keep out of temptation in London. He took the advice and applied himself to reading. One plan for going abroad was given up, but at last he endeavoured to escape in disguise, was detected, and was brought back to London. He was now subjected to all the vexations inflicted on Royalist partisans of good property: sequestrations of his rents, fines for \"malignancy,\" and confinement in the [[Tower of London]], where he consoled himself with his books. At last he reached a settlement in 1650 and went home, where he lived quietly till the [[English Restoration|Restoration]], when he resumed his position as magistrate and was made [[Deputy Lieutenant]] of the county. He  was never fully reconciled to the Court or government.\n\nTwysden died on 27 June 1672 and was buried at Peckham. Memorials to the Twysden family are to be found in [[St Michael's Church, East Peckham|St Michael's church]], East Peckham.\n\n==Works==\n\nTwysden's claim to notice rests on three works:\n\n*''The Commoners Liberty'' (1648);\n*''Historiae Anglicanae Scriptores Decem'' (1652), a pioneering work of English medieval history; and\n*''An Historical Vindication of the Church of England'' (1657).\n\nThe ''Scriptores Decem'' were ten chroniclers, namely: Simeon Monachus Dunelmensis, Johannes Prior Hagustaldensis, Ricardus Prior Hagustaldensis, Ailredus Abbas Rievallensis, Radulphus de Diceto Londoniensis, Johannes Brompton Jornallensis, Gervasius Monachus Dorobornensis, Thomas Stubbs Dominicanus, Gulielmus Thorn Cantuariensis, Henricus Knighton Leicestrensis.<ref>Given in the DNB article on Twysden. I.e. [[Symeon of Durham]] (the ''[[libellus de exordio]]''), [[John of Hexham]], [[Richard of Hexham]], [[Aelred of Rievaulx]], [[Ralph de Diceto]], [[John Brompton]], [[Gervase of Canterbury]], [[Thomas Stubbs (chronicler)|Thomas Stubbs]], [[William Thorne (chronicler)|William Thorne]], and [[Henry Knighton]].</ref>\n\n==Family==\n\nTwysden married Isabella Saunders who was a diarist and his mother's [[lady-in-waiting]].<ref name=\"anne\"/> Isabella was the daughter of Sir Nicholas Saunders of [[Ewell]]. Their son, [[Sir William Twysden, 3rd Baronet|William]] (1635\u20131697), succeeded to the baronetcy on Twysden's death.\n\n== References ==\n{{EB1911|wstitle=Twysden, Sir Roger|volume=27}}\n{{Reflist}}\n* {{Rayment-bt|date=March 2012}}\n* [http://www.stirnet.com/HTML/genie/british/tt/twysden1.htm Twysden genealogy]\n* ''Concise Dictionary of National Biography''\n\n{{S-start}}\n{{s-par|en}}\n {{succession box\n| title=[[Member of Parliament]] for [[Winchelsea (UK Parliament constituency)|Winchelsea]]\n| before= [[John Finch (MP for Winchelsea)|John Finch]]\n| before2= [[Edward Nicholas]]\n| years=1625\u20131626\n| after= [[Sir William Twysden, 1st Baronet|William Twysden]]\n| after2= Sir Ralph Freeman\n}}\n\n{{succession box\n| title=[[Member of Parliament]] for [[Kent (UK Parliament constituency)|Kent]]\n| before=  Parliament suspended since 1629\n| years=1640\n| with= [[Sir Norton Knatchbull, 1st Baronet|Norton Knatchbull]]\n| after= [[John Colepeper, 1st Baron Colepeper|Sir John Colepeper]]\n| after2=[[Sir Edward Dering, 1st Baronet|Sir Edward Dering]]\n}}\n{{s-reg|en-bt}}\n|-\n{{s-bef|before=[[Sir William Twysden, 1st Baronet|William Twysden]]}}\n{{s-ttl|title=[[Twysden baronets|Baronet]]<br />'''(of Roydon Hall)'''|years=1629\u20131672}}\n{{s-aft|after=[[Sir William Twysden, 3rd Baronet|William Twysden]]}}\n{{S-end}}\n\n{{East Peckham}}\n\n{{Use dmy dates|date=March 2012}}\n\n{{Authority control}}\n\n{{DEFAULTSORT:Twysden, Roger, 2nd Baronet}}\n[[Category:1597 births]]\n[[Category:1672 deaths]]\n[[Category:Baronets in the Baronetage of England]]\n[[Category:English antiquarians]]\n[[Category:People from Kent]]\n[[Category:People educated at St Paul's School, London]]\n[[Category:17th-century English writers]]\n[[Category:17th-century male writers]]\n[[Category:People of the Stuart period]]\n[[Category:English MPs 1625]]\n[[Category:English MPs 1626]]\n[[Category:English MPs 1640 (April)]]\n[[Category:Cavaliers]]\n", "text_old": "{{other people}}\n'''Sir Roger Twysden, 2nd Baronet''' (21 August 1597 \u2013 27 June 1672), of Roydon Hall in [[Kent]], was an English historian and politician who sat in the [[House of Commons of England|House of Commons]] at various times between 1625 and 1640.\n\n==Life==\n\nTwysden was the son of [[Sir William Twysden, 1st Baronet]] and his wife [[Anne Twysden|Anne Finch]], daughter of [[Sir Moyle Finch, 1st Baronet]].<ref name=anne>Marie-Louise Coolahan, \u2018Twysden , Anne, Lady Twysden (1574\u20131638)\u2019, Oxford Dictionary of National Biography, Oxford University Press, 2004 [http://www.oxforddnb.com/view/article/46928, accessed 14 Jan 2017]</ref> His father was a courtier and scholar who shared in some of the voyages against Spain in the reign of [[Elizabeth I of England|Queen Elizabeth I]] and was well known at the court of [[James I of England|King James I]],  becoming one of the first [[baronet]]s.  Twysden was educated at [[St Paul's School (London)|St Paul's School]] and was admitted at [[Emmanuel College, Cambridge]] on 8 November 1614. He entered [[Gray's Inn]] on 2 February 1623.<ref>{{acad|id=TWSN614R|name=Twisden, Roger}}</ref> For some years, he remained on his estate at [[Roydon Hall]], [[East Peckham]], largely engaged in building and planting, but also in studying antiquities and the law of the [[Constitution of the United Kingdom|constitution]]. He also had some interest in natural history.\n\nIn 1625, Twysden was elected [[Member of Parliament]] for [[Winchelsea (UK Parliament constituency)|Winchelsea]]. He was re-elected MP for Winchelsea in 1626.<ref name=Willis>{{Cite Notitia Parliamentaria|converted=1|part=2|pages=229\u2013239}}</ref>  As eldest son, he succeeded to the baronetcy on the death of his father on 8 January 1629. Twysden arranged for his mother's writings to be published.<ref name=anne/>\n\nTwysden showed his determination to stand on his rights by refusing to pay [[ship money]]. In April 1640 he was elected MP for [[Kent (UK Parliament constituency)|Kent]] in the [[Short Parliament]]. However, he became disillusioned and was not a member of the [[Long Parliament]] elected later the same year. He applauded the early measures of the parliament to restrict the king's prerogative but became alarmed when it went on to assail the [[Church of England|Church]]. The [[attainder]] of [[Thomas Wentworth, 1st Earl of Strafford|Lord Strafford]] frightened him as a tyrannical use of power, and he became a typical example of the men who formed the strength of the king's party in the [[English Civil War]]. He considered himself too old to serve in the field and therefore he did not join the king at Oxford.\n\nIn 1642 he was arrested after signing a petition from Kent and, once he was released on bail, he published the seditious ''Instructions''. He was caught while trying to flee the country and was imprisoned again. In 1643 his estates were sequestrated. After the execution of the King he returned to Kent, but his respect for legality would not let him rest, and he was soon in trouble again for another demonstration known as \"The Instruction to Mr [[Augustine Skinner]].\" For this he was again arrested and for a time confined in a public-house, called \"The Two Tobacco Pipes,\" near [[Charing Cross]], [[London]]. He was released with a distinct intimation that he would be well advised not to go back to Roydon Hall, but to keep out of temptation in London. He took the advice and applied himself to reading. One plan for going abroad was given up, but at last he endeavoured to escape in disguise, was detected, and was brought back to London. He was now subjected to all the vexations inflicted on Royalist partisans of good property: sequestrations of his rents, fines for \"malignancy,\" and confinement in the [[Tower of London]], where he consoled himself with his books. At last he reached a settlement in 1650 and went home, where he lived quietly till the [[English Restoration|Restoration]], when he resumed his position as magistrate and was made [[Deputy Lieutenant]] of the county. He  was never fully reconciled to the Court or government.\n\nTwysden died on 27 June 1672 and was buried at Peckham. Memorials to the Twysden family are to be found in [[St Michael's Church, East Peckham|St Michael's church]], East Peckham.\n\n==Works==\n\nTwysden's claim to notice rests on three works:\n\n*''The Commoners Liberty'' (1648);\n*''Historiae Anglicanae Scriptores Decem'' (1652), a pioneering work of English medieval history; and\n*''An Historical Vindication of the Church of England'' (1657).\n\nThe ''Scriptores Decem'' were ten chroniclers, namely: Simeon Monachus Dunelmensis, Johannes Prior Hagustaldensis, Ricardus Prior Hagustaldensis, Ailredus Abbas Rievallensis, Radulphus de Diceto Londoniensis, Johannes Brompton Jornallensis, Gervasius Monachus Dorobornensis, Thomas Stubbs Dominicanus, Gulielmus Thorn Cantuariensis, Henricus Knighton Leicestrensis.<ref>Given in the DNB article on Twysden. I.e. [[Symeon of Durham]] (the ''[[libellus de exordio]]''), [[John of Hexham]], [[Richard of Hexham]], [[Aelred of Rievaulx]], [[Ralph de Diceto]], [[John Brompton]], [[Gervase of Canterbury]], [[Thomas Stubbs]], [[William Thorne (chronicler)|William Thorne]], and [[Henry Knighton]].</ref>\n\n==Family==\n\nTwysden married Isabella Saunders who was a diarist and his mother's [[lady-in-waiting]].<ref name=\"anne\"/> Isabella was the daughter of Sir Nicholas Saunders of [[Ewell]]. Their son, [[Sir William Twysden, 3rd Baronet|William]] (1635\u20131697), succeeded to the baronetcy on Twysden's death.\n\n== References ==\n{{EB1911|wstitle=Twysden, Sir Roger|volume=27}}\n{{Reflist}}\n* {{Rayment-bt|date=March 2012}}\n* [http://www.stirnet.com/HTML/genie/british/tt/twysden1.htm Twysden genealogy]\n* ''Concise Dictionary of National Biography''\n\n{{S-start}}\n{{s-par|en}}\n {{succession box\n| title=[[Member of Parliament]] for [[Winchelsea (UK Parliament constituency)|Winchelsea]]\n| before= [[John Finch (MP for Winchelsea)|John Finch]]\n| before2= [[Edward Nicholas]]\n| years=1625\u20131626\n| after= [[Sir William Twysden, 1st Baronet|William Twysden]]\n| after2= Sir Ralph Freeman\n}}\n\n{{succession box\n| title=[[Member of Parliament]] for [[Kent (UK Parliament constituency)|Kent]]\n| before=  Parliament suspended since 1629\n| years=1640\n| with= [[Sir Norton Knatchbull, 1st Baronet|Norton Knatchbull]]\n| after= [[John Colepeper, 1st Baron Colepeper|Sir John Colepeper]]\n| after2=[[Sir Edward Dering, 1st Baronet|Sir Edward Dering]]\n}}\n{{s-reg|en-bt}}\n|-\n{{s-bef|before=[[Sir William Twysden, 1st Baronet|William Twysden]]}}\n{{s-ttl|title=[[Twysden baronets|Baronet]]<br />'''(of Roydon Hall)'''|years=1629\u20131672}}\n{{s-aft|after=[[Sir William Twysden, 3rd Baronet|William Twysden]]}}\n{{S-end}}\n\n{{East Peckham}}\n\n{{Use dmy dates|date=March 2012}}\n\n{{Authority control}}\n\n{{DEFAULTSORT:Twysden, Roger, 2nd Baronet}}\n[[Category:1597 births]]\n[[Category:1672 deaths]]\n[[Category:Baronets in the Baronetage of England]]\n[[Category:English antiquarians]]\n[[Category:People from Kent]]\n[[Category:People educated at St Paul's School, London]]\n[[Category:17th-century English writers]]\n[[Category:17th-century male writers]]\n[[Category:People of the Stuart period]]\n[[Category:English MPs 1625]]\n[[Category:English MPs 1626]]\n[[Category:English MPs 1640 (April)]]\n[[Category:Cavaliers]]\n", "name_user": "Tassedethe", "label": "safe", "comment": "v2.02 - Repaired 1 link to disambiguation page -(You can help)-Thomas Stubbs", "url_page": "//en.wikipedia.org/wiki/Roger_Twysden"}
