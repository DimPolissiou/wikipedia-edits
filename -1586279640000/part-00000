{"title_page": "Niels Helveg Petersen", "text_new": "{{Use dmy dates|date=September 2011}}\n{{Infobox officeholder\n|name           = Niels Helveg Petersen\n|office         = [[Minister of Foreign Affairs (Denmark)]]\n|image          = Niels-Helveg-Petersen.jpg\n|caption        = Petersen in 2008\n|predecessor    = [[Uffe Ellemann-Jensen]]\n|successor      = [[Mogens Lykketoft]]\n|office2        = Leader of [[Danish Social Liberal Party|Radikale Venstre]]\n|predecessor2   = [[Svend Haugaard]]\n|party          = [[Danish Social Liberal Party|Radikale Venstre]]\n|office1        = Minister of Economic Affairs (Denmark)\n|predecessor1   = [[Knud Enggaard]]\n|successor1     = [[Anders Fogh Rasmussen]]\n|successor2     = [[Marianne Jelved]]\n|birth_date     = {{birth date|1939|1|17|df=y}}\n|birth_place    = [[Odense]], [[Denmark]]\n|death_date     = 3 June 2017 (aged 78)\n|death_place    = \n|death_cause = [[Esophageal Cancer]]\n|spouse         = {{marriage|Kirsten Lee|1984<!--Year omitted per template instructions because of article subject's death-->}}\n|signature      = Amsterdam Treaty FA Denmark.png\n|children       = 2\n|alma_mater     = [[University of Copenhagen]]<br />[[Stanford University]]\n|term_start     = 15 January 1993\n|term_end       = 1 December 2000\n|term_start1    = 3 June 1988\n|term_end1      = 18 December 1990\n|term_start2    = 1978\n|term_end2      = 1990\n|office3        = [[Folketing|Member of Parliament]]<br />for [[Funen|Fyns Storkreds]]\n|term_start3    = 13 November 2007\n|term_end3      = 15 September 2011\n|office4        = [[Folketing|Member of Parliament]]<br />for [[Funen|Fyns Amtskreds]]\n|term_start4    = 21 September 1994\n|term_end4      = 13 November 2007\n|office5        = [[Folketing|Member of Parliament]]<br />for [[Funen|Fyns Amtskreds]]\n|term_start5    = 15 February 1977\n|term_end5      = 1 February 1993\n|office6        = [[Folketing|Member of Parliament]]<br />for [[Frederiksborg County|Frederiksborg Amtskreds]]\n|term_start6    = 22 November 1966\n|term_end6      = 30 September 1974}}\n\n'''Niels Lolk Helveg Petersen''' ({{IPA-da|\u02c8nels \u02c8l\u0252l\u02c0k \u02c8h\u025bl\u02ccve\u02c0j \u02c8p\u02b0e\u02c0t\u0250sn\u0329}}; informally '''Niels Helveg'''; 17 January 1939 \u2013 3 June 2017) was a [[Denmark|Danish]] [[politician]]. He was Minister of Foreign Affairs from 1993 to 2000, having previously held the role of Minister for Economic Affairs between 1988 and 1990. He was a Member of Parliament ([[Folketinget]]) for the [[Danish Social Liberal Party]] from 1966 to 1974, 1977 to 1993, and again from 1994 to 2011.\n\n== Early life ==\nNiels Helveg Petersen was born in Odense in 1939. His parents were former cabinet minister Kristen Helveg Petersen and former Mayor of Copenhagen Lilly Helveg Petersen. He graduated from the University of Copenhagen in 1965, earning a  [[Candidate of Law|cand.jur.]] degree. From 1961 to 1962, he spent a year as an exchange student at Stanford University studying Government. During his years in Copenhagen he was an active member of the youth branch of the Danish Social Liberal Party, editing their paper 'Libert\u00e9'.<ref>{{ft.dk link}}</ref>\n\n==Political career==\n===Member of Parliament 1966\u20132011===\nNiels Helveg Petersen ran for election to the Danish Parliament for the first time in 1964. In 1966, he was elected a Member of Parliament for the first time in the Frederiksborg County. In 1974, he left Denmark to become a civil servant in the [[European Commission]]. He returned to Danish politics in 1977, this time being elected to parliament standing in the Funen constituency. He became leader of the Danish Social Liberal Party (Danish: Radikale Venstre) in 1978 and kept this role until 1990. During the 1980s, he supported the economic policies of the Conservative-Liberal government. At the same time, he supported the opposition on other questions such as security policies. In doing so, his party created majorities without the parties in government, a practice that became known as 'footnote politics'.<ref>[http://danmarkshistorien.dk/leksikon-og-kilder/vis/materiale/fodnotepolitikken-og-det-alternative-sikkerhedspolitiske-flertal/ Fodnotepolitikken og det alternative politiske flertal<!-- Bot generated title -->]</ref> In supporting different sides of parliament, he was sometimes referred to by the Danish media as a 'king maker', deciding which policies would pass and which would not.<ref>[http://jyllands-posten.dk/indland/article5030576.ece Kongemageren Niels Helveg Petersen<!-- Bot generated title -->]</ref> The Social Liberal's footnote politics ended in 1988 when the party entered the government coalition. In April 2008, Niels Helveg Petersen announced that he was not standing at the next election that took place in September 2011.<ref>[http://politiken.dk/politik/article492551.ece Niels Helveg Petersen stopper i politik - Politiken.dk<!-- Bot generated title -->]</ref>\n\n===Minister for Economic Affairs 1988\u201390===\nHe was [[Minister for Economic Affairs (Denmark)|Minister for Economic Affairs]] in the [[Cabinet of Poul Schl\u00fcter III]] from 3 June 1988 to 18 December 1990, when his party left the government coalition after poor election results in 1990. He consequently also stepped down as party leader.\n\n===Minister of Foreign Affairs 1993\u20132000===\nHe was appointed [[Minister for Foreign Affairs (Denmark)|Minister for Foreign Affairs]] from 25 January 1993 to 21 December 2000 in the [[Cabinet of Poul Nyrup Rasmussen I]], [[Cabinet of Poul Nyrup Rasmussen II|II]], [[Cabinet of Poul Nyrup Rasmussen III|III]], and [[Cabinet of Poul Nyrup Rasmussen IV|IV]] (except for the last part of the IV cabinet). When the [[European Union|European Union's]] [[Maastricht Treaty]] was rejected by the Danish people in 1992, it was accepted after a referendum in 1993 adding certain opt-out concessions for Denmark. As the new Minister of Foreign Affairs, Niels Helveg Petersen had to work to implement those concessions, although he had been a long supporter of greater internationalisation of Danish foreign policy. When he left the position of Foreign Minister in 2000, the official reason given was that he could no longer accept the opt-outs.\nHe joined the newly created [[Council of the Baltic Sea States]], which in 1993 successfully established the [[EuroFaculty]] in Tartu, Riga, and Vilnius, of which he became an active supporter.<ref>Kristensen, Gustav N.  2010. Born into a Dream. EuroFaculty and the Council of the Baltic Sea States. Berliner Wissentshafts-Verlag. {{ISBN|978-3-8305-1769-6}}.</ref>\n\n==Personal life==\nNiels Helveg Petersen was married to Kirsten Lee, who is also a former member of the Danish Parliament for the Social Liberal Party. His son [[Morten Helveg Petersen]] was member of the parliament from 11 March 1998 and until August 2009. His son [[Rasmus Helveg Petersen]] was member of parliament 2011-2015 and again from 2019, and a cabinet minister 2013-2015. Niels Helveg Petersen died of [[esophageal cancer]], aged 78.<ref>[http://www.fyens.dk/indland/Tidligere-udenrigsminister-Niels-Helveg-Petersen-er-doed/artikel/3156004 Tidligere udenrigsminister Niels Helveg Petersen er d\u00f8d]</ref>\n\n==See also==\n*[[1968 Thule Air Base B-52 crash|Thulegate]]\n\n==References==\n{{Reflist}}\n\n==External links==\n{{Commons category}}\n* {{ft.dk link}}\n*[http://www.drv.dk/helveg/ Personal webpage]{{dead link|date=December 2017 |bot=InternetArchiveBot |fix-attempted=yes }} from the official website of the [[Danish Social Liberal Party]]\n\n{{Authority control}}\n\n{{DEFAULTSORT:Petersen, Niels Helveg}}\n[[Category:1939 births]]\n[[Category:2017 deaths]]\n[[Category:People from Odense]]\n[[Category:Danish Social Liberal Party politicians]]\n[[Category:Foreign ministers of Denmark]]\n[[Category:Members of the Folketing]]\n[[Category:Family of Helveg Petersen|Niels]]\n[[Category:21st-century Danish politicians]]\n[[Category:Deaths from esophageal cancer]]\n[[Category:Deaths from cancer in Denmark]]\n", "text_old": "{{Use dmy dates|date=September 2011}}\n{{Infobox officeholder\n|name           = Niels Helveg Petersen\n|office         = [[Minister of Foreign Affairs (Denmark)]]\n|image          = Niels-Helveg-Petersen.jpg\n|caption        = Petersen in 2008\n|predecessor    = [[Uffe Ellemann-Jensen]]\n|successor      = [[Mogens Lykketoft]]\n|office2        = Leader of [[Danish Social Liberal Party|Radikale Venstre]]\n|predecessor2   = [[Svend Haugaard]]\n|party          = [[Danish Social Liberal Party|Radikale Venstre]]\n|office1        = Minister of Economic Affairs (Denmark)\n|predecessor1   = [[Knud Enggaard]]\n|successor1     = [[Anders Fogh Rasmussen]]\n|successor2     = [[Marianne Jelved]]\n|birth_date     = {{birth date|1939|1|17|df=y}}\n|birth_place    = [[Odense]], [[Denmark]]\n|death_date     = 3 June 2017 (aged 78)\n|death_place    = \n|death_cause = [[Esophageal Cancer]]\n|spouse         = {{marriage|Kirsten Lee|1984<!--Year omitted per template instructions because of article subject's death-->}}\n|signature      = Amsterdam Treaty FA Denmark.png\n|children       = 2\n|alma_mater     = [[University of Copenhagen]]<br />[[Stanford University]]\n|term_start     = 15 January 1993\n|term_end       = 1 December 2000\n|term_start1    = 3 June 1988\n|term_end1      = 18 December 1990\n|term_start2    = 1978\n|term_end2      = 1990\n|office3        = [[Folketing|Member of Parliament]]<br />for [[Funen|Fyns Storkreds]]\n|term_start3    = 13 November 2007\n|term_end3      = 15 September 2011\n|office4        = [[Folketing|Member of Parliament]]<br />for [[Funen|Fyns Amtskreds]]\n|term_start4    = 21 September 1994\n|term_end4      = 13 November 2007\n|office5        = [[Folketing|Member of Parliament]]<br />for [[Funen|Fyns Amtskreds]]\n|term_start5    = 15 February 1977\n|term_end5      = 1 February 1993\n|office6        = [[Folketing|Member of Parliament]]<br />for [[Frederiksborg County|Frederiksborg Amtskreds]]\n|term_start6    = 22 November 1966\n|term_end6      = 30 September 1974}}\n\n'''Niels Lolk Helveg Petersen''' ({{IPA-da|nels l\u0252lk \u02c8h\u025bl\u02ccve\u02c0 \u02c8p\u02b0e\u02c0t\u0250sn\u0329}}; informally '''Niels Helveg'''; 17 January 1939 \u2013 3 June 2017) was a [[Denmark|Danish]] [[politician]]. He was Minister of Foreign Affairs from 1993 to 2000, having previously held the role of Minister for Economic Affairs between 1988 and 1990. He was a Member of Parliament ([[Folketinget]]) for the [[Danish Social Liberal Party]] from 1966 to 1974, 1977 to 1993, and again from 1994 to 2011.\n\n== Early life ==\nNiels Helveg Petersen was born in Odense in 1939. His parents were former cabinet minister Kristen Helveg Petersen and former Mayor of Copenhagen Lilly Helveg Petersen. He graduated from the University of Copenhagen in 1965, earning a  [[Candidate of Law|cand.jur.]] degree. From 1961 to 1962, he spent a year as an exchange student at Stanford University studying Government. During his years in Copenhagen he was an active member of the youth branch of the Danish Social Liberal Party, editing their paper 'Libert\u00e9'.<ref>{{ft.dk link}}</ref>\n\n==Political career==\n===Member of Parliament 1966\u20132011===\nNiels Helveg Petersen ran for election to the Danish Parliament for the first time in 1964. In 1966, he was elected a Member of Parliament for the first time in the Frederiksborg County. In 1974, he left Denmark to become a civil servant in the [[European Commission]]. He returned to Danish politics in 1977, this time being elected to parliament standing in the Funen constituency. He became leader of the Danish Social Liberal Party (Danish: Radikale Venstre) in 1978 and kept this role until 1990. During the 1980s, he supported the economic policies of the Conservative-Liberal government. At the same time, he supported the opposition on other questions such as security policies. In doing so, his party created majorities without the parties in government, a practice that became known as 'footnote politics'.<ref>[http://danmarkshistorien.dk/leksikon-og-kilder/vis/materiale/fodnotepolitikken-og-det-alternative-sikkerhedspolitiske-flertal/ Fodnotepolitikken og det alternative politiske flertal<!-- Bot generated title -->]</ref> In supporting different sides of parliament, he was sometimes referred to by the Danish media as a 'king maker', deciding which policies would pass and which would not.<ref>[http://jyllands-posten.dk/indland/article5030576.ece Kongemageren Niels Helveg Petersen<!-- Bot generated title -->]</ref> The Social Liberal's footnote politics ended in 1988 when the party entered the government coalition. In April 2008, Niels Helveg Petersen announced that he was not standing at the next election that took place in September 2011.<ref>[http://politiken.dk/politik/article492551.ece Niels Helveg Petersen stopper i politik - Politiken.dk<!-- Bot generated title -->]</ref>\n\n===Minister for Economic Affairs 1988\u201390===\nHe was [[Minister for Economic Affairs (Denmark)|Minister for Economic Affairs]] in the [[Cabinet of Poul Schl\u00fcter III]] from 3 June 1988 to 18 December 1990, when his party left the government coalition after poor election results in 1990. He consequently also stepped down as party leader.\n\n===Minister of Foreign Affairs 1993\u20132000===\nHe was appointed [[Minister for Foreign Affairs (Denmark)|Minister for Foreign Affairs]] from 25 January 1993 to 21 December 2000 in the [[Cabinet of Poul Nyrup Rasmussen I]], [[Cabinet of Poul Nyrup Rasmussen II|II]], [[Cabinet of Poul Nyrup Rasmussen III|III]], and [[Cabinet of Poul Nyrup Rasmussen IV|IV]] (except for the last part of the IV cabinet). When the [[European Union|European Union's]] [[Maastricht Treaty]] was rejected by the Danish people in 1992, it was accepted after a referendum in 1993 adding certain opt-out concessions for Denmark. As the new Minister of Foreign Affairs, Niels Helveg Petersen had to work to implement those concessions, although he had been a long supporter of greater internationalisation of Danish foreign policy. When he left the position of Foreign Minister in 2000, the official reason given was that he could no longer accept the opt-outs.\nHe joined the newly created [[Council of the Baltic Sea States]], which in 1993 successfully established the [[EuroFaculty]] in Tartu, Riga, and Vilnius, of which he became an active supporter.<ref>Kristensen, Gustav N.  2010. Born into a Dream. EuroFaculty and the Council of the Baltic Sea States. Berliner Wissentshafts-Verlag. {{ISBN|978-3-8305-1769-6}}.</ref>\n\n==Personal life==\nNiels Helveg Petersen was married to Kirsten Lee, who is also a former member of the Danish Parliament for the Social Liberal Party. His son [[Morten Helveg Petersen]] was member of the parliament from 11 March 1998 and until August 2009. His son [[Rasmus Helveg Petersen]] was member of parliament 2011-2015 and again from 2019, and a cabinet minister 2013-2015. Niels Helveg Petersen died of [[esophageal cancer]], aged 78.<ref>[http://www.fyens.dk/indland/Tidligere-udenrigsminister-Niels-Helveg-Petersen-er-doed/artikel/3156004 Tidligere udenrigsminister Niels Helveg Petersen er d\u00f8d]</ref>\n\n==See also==\n*[[1968 Thule Air Base B-52 crash|Thulegate]]\n\n==References==\n{{Reflist}}\n\n==External links==\n{{Commons category}}\n* {{ft.dk link}}\n*[http://www.drv.dk/helveg/ Personal webpage]{{dead link|date=December 2017 |bot=InternetArchiveBot |fix-attempted=yes }} from the official website of the [[Danish Social Liberal Party]]\n\n{{Authority control}}\n\n{{DEFAULTSORT:Petersen, Niels Helveg}}\n[[Category:1939 births]]\n[[Category:2017 deaths]]\n[[Category:People from Odense]]\n[[Category:Danish Social Liberal Party politicians]]\n[[Category:Foreign ministers of Denmark]]\n[[Category:Members of the Folketing]]\n[[Category:Family of Helveg Petersen|Niels]]\n[[Category:21st-century Danish politicians]]\n[[Category:Deaths from esophageal cancer]]\n[[Category:Deaths from cancer in Denmark]]\n", "name_user": "Nardog", "label": "safe", "comment": "fixingDanish IPA", "url_page": "//en.wikipedia.org/wiki/Niels_Helveg_Petersen"}
{"title_page": "Bogdanovo, Vologda Oblast", "text_new": "{{Infobox settlement\n|official_name          = Bogdanovo\n|other_name             = \n|native_name            = \u0411\u043e\u0433\u0434\u0430\u043d\u043e\u0432\u043e\n|nickname               = \n|settlement_type        = Village\n|image_skyline          = \n|image_caption          = \n|pushpin_map            = Russia Vologda Oblast#Russia\n|pushpin_label_position = \n|pushpin_mapsize        =\n|pushpin_map_caption    = \n|subdivision_type       = Country\n|subdivision_name       = [[Russia]]\n|subdivision_type1      = [[List of regions of Russia|Region]] \n|subdivision_name1      = [[Vologda Oblast]]\n|subdivision_type2      = [[Counties of Russia|County]] \n|subdivision_name2      = \n|subdivision_type3      = [[Districts of Russia|District]] \n|subdivision_name3      = [[Gryazovetsky District]]\n|subdivision_type4      = [[List of municipalities of Russia|Municipality]]\n|subdivision_name4      = \n|timezone1              = \n|utc_offset1            = +3:00\n|timezone1_DST          = \n|utc_offset1_DST        = \n|postal_code_type       = \n|postal_code            = \n|elevation_m            = \n|elevation_footnotes    = \n|coordinates            = {{coord|58|52|N|41|11|E|display=inline}}<ref>[https://mapdata.ru/vologodskaya-oblast/gryazoveckiy-rayon/ \u041a\u0430\u0440\u0442\u0430 \u0413\u0440\u044f\u0437\u043e\u0432\u0435\u0446\u043a\u043e\u0433\u043e  \u0440\u0430\u0439\u043e\u043d\u0430 \u0412\u043e\u043b\u043e\u0433\u043e\u0434\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438]</ref>\n}}\n'''Bogdanovo''' ({{lang-ru|\u0411\u043e\u0433\u0434\u0430\u043d\u043e\u0432\u043e}}) is a [[types of inhabited localities in Russia|rural locality]] (a [[Village#Russia|village]]) in Vokhtozhskoye Rural Settlement, [[Gryazovetsky District]], [[Vologda Oblast]], Russia. The population was 6 as of 2002.<ref>\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0438 2002 \u0433\u043e\u0434\u0430: \u0442\u0430\u0431\u043b\u0438\u0446\u0430 2\u0421. \u041c.: \u0424\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u0443\u0436\u0431\u0430 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438, 2004.</ref>\n\n== Geography ==\nThe distance to [[Gryazovets]] is 72&nbsp;km, to Vokhtoga is 11&nbsp;km. Demyanovo is the nearest rural locality.\n\n== References ==\n{{reflist}}\n\n{{Rural localities in Gryazovetsky District}}\n{{Authority control}}\n\n[[Category:Rural localities in Vologda Oblast]]\n[[Category:Rural localities in Gryazovetsky District]]\n\n{{VologdaOblast-geo-stub}}\n", "text_old": "{{Infobox settlement\n|official_name          = Bogdanovo\n|other_name             = \n|native_name            = \u0411\u043e\u0433\u0434\u0430\u043d\u043e\u0432\u043e\n|nickname               = \n|settlement_type        = Village\n|image_skyline          = \n|image_caption          = \n|pushpin_map            = Russia Vologda Oblast#Russia\n|pushpin_label_position = \n|pushpin_mapsize        =\n|pushpin_map_caption    = \n|subdivision_type       = Country\n|subdivision_name       = [[Russia]]\n|subdivision_type1      = [[List of regions of Russia|Region]] \n|subdivision_name1      = [[Vologda Oblast]]\n|subdivision_type2      = [[Counties of Russia|County]] \n|subdivision_name2      = \n|subdivision_type3      = [[Districts of Russia|District]] \n|subdivision_name3      = [[Gryazovetsky District]]\n|subdivision_type4      = [[List of municipalities of Russia|Municipality]]\n|subdivision_name4      = \n|timezone1              = \n|utc_offset1            = +3:00\n|timezone1_DST          = \n|utc_offset1_DST        = \n|postal_code_type       = \n|postal_code            = \n|elevation_m            = \n|elevation_footnotes    = \n|coordinates            = {{coord|58|52|N|41|11|E|display=inline}}<ref>[https://mapdata.ru/vologodskaya-oblast/gryazoveckiy-rayon/ \u041a\u0430\u0440\u0442\u0430 \u0413\u0440\u044f\u0437\u043e\u0432\u0435\u0446\u043a\u043e\u0433\u043e  \u0440\u0430\u0439\u043e\u043d\u0430 \u0412\u043e\u043b\u043e\u0433\u043e\u0434\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438]</ref>\n}}\n'''Bogdanovo''' ({{lang-ru|\u0411\u043e\u0433\u0434\u0430\u043d\u043e\u0432\u043e}}) is a [[types of inhabited localities in Russia|rural locality]] (a [[Village#Russia|village]]) in Vokhtozhskoye Rural Settlement, [[Gryazovetsky District]], [[Vologda Oblast]], Russia. The population was 6 as of 2002.<ref>\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0438 2002 \u0433\u043e\u0434\u0430: \u0442\u0430\u0431\u043b\u0438\u0446\u0430 2\u0421. \u041c.: \u0424\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u0443\u0436\u0431\u0430 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438, 2004.</ref>\n\n== Geography ==\nThe distance to [[Gryazovets]] is 72&nbsp;km, to Vokhtoga is 11&nbsp;km. Demyanovo is the nearest rural locality.\n\n== References ==\n{{reflist}}\n\n{{Rural localities in Gryazovetsky District}}\n{{Authority control}}\n\n[[Category:Rural localities in Vologda Oblast]]\n[[Category:Rural localities in Gryazovetsky District]]\n\n\n{{VologdaOblast-geo-stub}}\n", "name_user": "Wagino 20100516", "label": "safe", "comment": "\u2192\u200eReferences:clean up", "url_page": "//en.wikipedia.org/wiki/Bogdanovo,_Vologda_Oblast"}
{"title_page": "National Students Federation", "text_new": "{{More citations needed|date=March 2018}}\n\nThe '''National Students Federation Pakistan''' ('''NSF''') is a [[left-wing]] [[student federation]] in Pakistan. In the late 1960s, NSF adopted the political ideologies of [[Marxism\u2013Leninism]] and Mao Zedong Thought.<ref>{{cite news |title=Student politics in Karachi: The classmate full of hate |url=http://www.dailytimes.com.pk/default.asp?page=2006\\05\\14\\story_14-5-2006_pg12_3 |work=[[Daily Times (Pakistan)|Daily Times]] |date=14 May 2006 |accessdate=8 January 2012 }}</ref><ref>{{cite news|title=Student politics: a brief history|url=https://www.dawn.com/news/881731|accessdate=20 March 2018|work=Dawn|date=10 February 2008}}</ref><ref>{{cite news|last1=Paracha|first1=Nadeem F.|title=Student politics in Pakistan: A celebration, lament & history|url=https://www.dawn.com/news/1116782|accessdate=20 March 2018|work=Dawn|date=3 July 2014}}</ref>\n\nIts predecessor, the DSF (Democratic Students Federation), had links to the [[Communist Party of Pakistan]]. It had power base among progressive students from [[Dow University of Health Sciences|Dow Medical]] and [[DJ Science College]]s. It dominated student politics in [[Karachi]], then the [[Federal Capital Territory (Pakistan)|Federal Capital]] of the country. In a convention at the national level of students, held in Khaliqdina Hall, [[Karachi]] (1953), the DSF renamed itself to NSF (National Students Federation) in the late 1960s, laying claim to being a national movement and hoping to spread the Student Revolution to the whole country. Demonstrations and strikes had already paralyzed the Karachi for several days. The government apparently gave in by sacrificing the [[Minister for Education (Pakistan)|Minister for Education]], Mr Fazlur Rahman, who hailed from [[East Pakistan]]. He was sacked from his post. It was not much of a victory for the students. APSO was banned and the leaders were thrown in the [[Karachi Central Jail]]. NSF (The National Students Federation) a small nationalist and right-wing group which had been propped up by the help of Karachi University Vice Chancellor to counter DSF's activities, was invaded practically overnight by the now-banned DSF party members, who were still outside. The former DSF members had enough muscle and organisational skills to take over the control of NSF in 1956, thus its new \"left\" leaning profile emerged. Due to its links with communist movement, DSF was infested with the presence of double agents/informers from the secret service.\n\n==First split==\nNSF saw its first major split in 1965, between the [[Maoist|pro-China]] and pro-Moscow factions, better known as the NSF-Meraj Group and the NSF-Kazmi Group. While the NSF-Meraj group supported the PPP, the NSF Kazmi group was the student arm of the [[National Awami Party]] (NAP), which today is the [[Awami National Party|ANP]]. Because this particular faction hold most backward views within the progressive movement they soon loose the ground. Mr Ameer Haider Kazmi took position in PPP and his faction was liquidated.\n\nNSF remained active in many [[Universities of Pakistan|Pakistani universities]] and colleges and won the elections of Students Unions. It played a major role in the [[1968 movement in Pakistan|popular student and labour uprising]] against the pro-US dictatorship of [[Field Marshal Ayub Khan]] in 1967 and 1968. NSF activists were among the first major supporters of future Pakistani Prime Minister [[Zulfikar Ali Bhutto]] and his populist/socialist [[Pakistan Peoples Party]] to advance the democratic process and to weaken the religious fundamentalists. One of the leading leaders of NSF, [[Meraj Muhammad Khan]], was made a minister in Bhutto's first cabinet but both NSF and Meraj fell out with the Bhutto government in 1973 when Bhutto started to compromise on his socialist agenda.\n\nMeraj Mohammad Khan remained president of NSF till 1967 and was later replaced by Rasheed Hassan Khan (student of Dow Medical College Karachi) in a council session held in Lahore in 1970.\n\n==NSF and People's Party==\nThe following are the main reasons which contributed in withdrawing NSF support from the PPP.\n* After PPP won the [[1970 Pakistani general election|1970 election]] and emerged as the single largest party in [[West Pakistan]], it refused to acknowledge the mandate of the [[Awami League]] and their [[Six point movement|demands]] of greater autonomy and furthermore its policies regarding army operation in East Pakistan. The NSF and [[Mazdoor Kissan Party]] were the main left organizations who strongly opposed army operation against Bengalis.\n* Differences further deepened when the NSF realized that Bhutto was backing off from his promises of radical economical and social changes which he made to students and the working class.\n* Bhutto wanted to silence his dissidents so he cracked down on the workers and students.\nThe breaking point between Bhutto and the NSF came when Bhutto crushed the [[labour movement]] in Site on 7\u20138 June and in Landhi on 17\u201318 October in 1972. Several workers were killed and hundreds arrested. Rasheed Hassan Khan, then a Central President of NSF, had to go underground.\n\nConsequently, the NSF withdrew its support from the PPP and exposed Bhutto's hypocrisy and opportunistic politics. Miraj Mohamed khan decided to remain in the PPP. Miraj was in view that it was the [[The Establishment|establishment]] that is trying to create conflicts among workers and that PPP and its policies are clean but he was proved wrong later. In years to come, the gulf of difference between ZA Bhutto and Meraj khan widened and Meraj Mohd Khan has no choice other than to leave PPP and form his own political organisation which he named as Qomi Mahaz-e-Azadi and his own faction of NSF. In the mid 1990s Miraj dissolved the [[Qomi Mahaz-e-Azadi]] and joined hand with cricketer turn politician [[Imran Khan]] and become Secretary General of PTI. He soon fell out with Khan and resigned from PTI. Once, a flamboyant student leader, Meraj fell into political isolation and he never regained his position as a representative leader of working class, a position he enjoyed once.\n\n==Afghan saur revolution==\nNSF saw another split in the 1980s when [[Soviet invasion of Afghanistan|the USSR invaded]] [[Afghanistan]]. A majority faction condemned the soviet invasion, believed that revolution can not be exported. It was said that this will provide opportunity to imperialist powers to use religious extremist to curb progressive movements. Within Afghanistan various Marxist parties and groups were also divided over the issue. The small faction headed by Zahid Hussain took the position that criticizing so called '[[Afghan saur revolution]]' would meant to be supporting the [[Mujahideen]] and see this as support to the Army Junta and dictatorship of [[General Zia-ul-Haq]], playing into the hands of the USA. That gave birth to a small dissident group headed by Zahid Hussain. This faction liquidated soon and member of this faction later joined various pro soviet groups or took positions in establishment.  These Opportunist wolves in sheep's clothing done damage to NSF in particular and to the progressive and workers movement in general.\nTheir position on this issue demonstrated that they failed to understand the imperialist strategy and their grasp of Marxism\u2013Leninism-Mao Tsetung Thought was fairly shallow. Revisionism and opportunism is always the main danger and obstacle to the advance of progressive movement.\n\nBoth betrayals from inside and the state crack down from outside were great setback to NSF and helped NSF's arch rivals, the right-wing, [[Islami Jamiat-e-Talaba]] (IJT), the student wing of the [[Jamaat-e-Islami Pakistan|Jamaat-e-Islami]], gain ground in the many student union elections held in the country's campuses in the 1970s and the 1980s. Till then the NSF had been sweeping student union elections in the 1950s, 1960s and 1970s. NSF was also affected by the creation of the Pakistan Peoples Party's student wing, the [[Peoples Students Federation]] (PSF) whose main purpose was to counter the NSF opposition to PPP in the early 1970s.\n\n==Ban on students' unions==\nLeft leaning and progressive parties were persecuted and harassed by the [[right-wing]] dictatorship of President General Muhammad Zia-ul-Haq in the 1980s, dozens of NSF activists were arrested, tortured and expelled from the campuses. NSF joined alliance of progressive student parties that included DSF, [[Peoples Students Federation|PSF]] and many secular nationalist student groups like [[Baloch Students Federation]] in students' union elections across the country. NSF gained significant victories in students unions elections before they were banned by General Zia-ul-Huq in 1984.\nAfter seeing the fate of Ayub Khan, Zia realised that student power needs to be curbed and crushed. He also wanted to pave his way to freely act as an American agent to fight a proxy war for America in Afghanistan, which eventually led the downfall of the Russian social Imperialism. On 9\u201311 February 1984, he banned students union starting from Sindh and than carrying out the orders to the rest of the country. [[Dow Medical College]] had always been the focus of the left politics and produced great student leaders from time to time. It was not a surprise that Dow Medical College was first to react to the ban on student political activities. At that particular time there were five elected unions in major campuses of Karachi, Dow Medical College (Khalid Anwer NSF panel), [[Sind Medical College]] (Rizwan Naeem, NSF panel)) and [[Dawood Engineering College]] (Rao Jamal Hamid, NSF panel) had elected Presidents from NSF. This was the popularity of NSF that Karachi University was the only institute with panel elected from right wing Islami Jamiat-e-Talba. On the morning of the ban, NSF workers were running an admission campaign to facilitate newcomers to Dow medial and Sind Medical College . NSF refused to accept the Ordinance of military dictator and immediately put black armbands and took students to the streets and ran a campaign for 100 days.  NSF was the only student organisation in Karachi which started the protest and all started from Dow Medical college. Islami Jamiat Talba joined later for face saving and in the broader interest of the students cause NSF had a combined meeting in Dow medical college where two organisations joined hands for the same cause. It must be reiterated that NSF kept the lead in the hand because of the brave nature of the workers and readiness to sacrifice for the cause. Dozens of NSF workers were arrested but were not deterred from the cause. During the process of protest, [[Sind Medical College]] was stormed by police and shelled with tear gas. NSF workers like Hakim Baloch, Humayun from SMC, Babar Asad, Kaleem and Shahid from Dawood Engineering College and Sohail Jaffar and Bashmi Mumtaz from NED and Iqbal, Riaz Pekar from Karachi University were few to name on the forefront of this movement. Thousands of students led by NSF protested across Pakistan, hundreds were put behind the bars and tortured. This movement was brutally suppressed by the dictator and in later years a new era of de-politicization of youth began.\n\nAfter the ban on students' unions, right-wing student organisations were given free hand to operate and violently curb progressive students activism by the military dictator. NSF suffered heavily from the trend of violence once pioneered by [[Islami Jamiat-e-Talaba|IJT]] and later adopted by [[APMSO]], and MSF which was intensified in the late 1980s and 1990s. Across the country NSF workers were banned from entering or holding their political activities on campuses.  Subsequently, major campuses become no go areas for progressive students and NSF was overshadowed by pro establishment and other regional groups like APMSO and PSF and by Islamic fundamentalist student parties such as IJT and [[Pakistan Muslim League]]'s student wing, Muslim Students Federation (MSF).\nNSF suffered greatly by the state crackdown and violence in campuses and its presence were marginalized. NSF held its Eighteenth Central Council Session in 2000 in Lahore but in later year saw little presence in campuses.\n\n==Re-emergence==\nHowever, since the early 2007 NSF is regrouping and has seen activities associated with re-organisation taking along some of the old comrades as well as new ones. It has taken part in [[Lawyers' Movement]] against the dictatorship of General [[Pervaiz Musharraf]].\n\nDespite the numerous errors and zig-zags in developing progressive movement, NSF has made important progress towards Re-organizational work and In Jan 2011 NSF central council session was held in Faislabad. Hundreds of students participated from all over the Pakistan. In the two days council session, Ch Irfan Ali was elected as President of Punjab and [[Alia Amirali]] was elected as General Secretary. Participants vowed to continue their struggle and move beyond any ethnic, linguistic and sectarian affiliations and unite at a national platform not just for better education but for People's Democracy and class consciousness to the people's movements.\nNSF has made second convention on 27 November 2014 in Shakhupur. In this convention hundreds of students of participated from all over Pakistan. One day council session, Khalid was elected as president of Punjab and Ali Raza was elected as General Secretary.\nNSF has made important progress and NSF made a first convention on 30th 2018 NSF central council session was held in Karachi. Hundreds of students participated from all over the Pakistan. In the two days council session, Ahmad Khan from Punjab was elected as Central President, vice president Sajjad Khan from KPK, General Secretary Peral Azad from Sindh, Finance Secretary Comrade Sana, Women Secretary Purva Masaud, Joint Secretary Tahir Mujtba, Press Secretary Sanawar Farid Azad, Latif Ibrahim was elected as Social media Secretary.\nAt present, NSF have become the only one organization of students politics in Pakistan.\n\n==References==\n{{Reflist}}\n\n[[Category:Student societies in Pakistan]]\n[[Category:Students' federations of Pakistan]]\n[[Category:Student wings of political parties in Pakistan]]\n[[Category:Student organizations established in 1965]]\n", "text_old": "{{More citations needed|date=March 2018}}\n\nThe '''National Students Federation Pakistan''' ('''NSF''') is a [[left-wing]] [[student federation]] in Pakistan. In the late 1960s, NSF adopted the political ideologies of [[Marxism\u2013Leninism]] and Mao Zedong Thought.<ref>{{cite news |title=Student politics in Karachi: The classmate full of hate |url=http://www.dailytimes.com.pk/default.asp?page=2006\\05\\14\\story_14-5-2006_pg12_3 |work=[[Daily Times (Pakistan)|Daily Times]] |date=14 May 2006 |accessdate=8 January 2012 }}</ref><ref>{{cite news|title=Student politics: a brief history|url=https://www.dawn.com/news/881731|accessdate=20 March 2018|work=Dawn|date=10 February 2008}}</ref><ref>{{cite news|last1=Paracha|first1=Nadeem F.|title=Student politics in Pakistan: A celebration, lament & history|url=https://www.dawn.com/news/1116782|accessdate=20 March 2018|work=Dawn|date=3 July 2014}}</ref>\n\nIts predecessor, the DSF (Democratic Students Federation), had links to the [[Communist Party of Pakistan]]. It had power base among progressive students from [[Dow University of Health Sciences|Dow Medical]] and [[DJ Science College]]s. It dominated student politics in [[Karachi]], then the [[Federal Capital Territory (Pakistan)|Federal Capital]] of the country. In a convention at the national level of students, held in Khaliqdina Hall, [[Karachi]] (1953), the DSF renamed itself to NSF (National Students Federation) in the late 1960s, laying claim to being a national movement and hoping to spread the Student Revolution to the whole country. Demonstrations and strikes had already paralyzed the Karachi for several days. The government apparently gave in by sacrificing the [[Minister for Education (Pakistan)|Minister for Education]], Mr Fazlur Rahman, who hailed from [[East Pakistan]]. He was sacked from his post. It was not much of a victory for the students. APSO was banned and the leaders were thrown in the [[Karachi Central Jail]]. NSF (The National Students Federation) a small nationalist and right-wing group which had been propped up by the help of Karachi University Vice Chancellor to counter DSF's activities, was invaded practically overnight by the now-banned DSF party members, who were still outside. The former DSF members had enough muscle and organisational skills to take over the control of NSF in 1956, thus its new \"left\" leaning profile emerged. Due to its links with communist movement, DSF was infested with the presence of double agents/informers from the secret service.\n\n==First split==\nNSF saw its first major split in 1965, between the [[Maoist|pro-China]] and pro-Moscow factions, better known as the NSF-Meraj Group and the NSF-Kazmi Group. While the NSF-Meraj group supported the PPP, the NSF Kazmi group was the student arm of the [[National Awami Party]] (NAP), which today is the [[Awami National Party|ANP]]. Because this particular faction hold most backward views within the progressive movement they soon loose the ground. Mr Ameer Haider Kazmi took position in PPP and his faction was liquidated.\n\nNSF remained active in many [[Universities of Pakistan|Pakistani universities]] and colleges and won the elections of Students Unions. It played a major role in the [[1968 movement in Pakistan|popular student and labour uprising]] against the pro-US dictatorship of [[Field Marshal Ayub Khan]] in 1967 and 1968. NSF activists were among the first major supporters of future Pakistani Prime Minister [[Zulfikar Ali Bhutto]] and his populist/socialist [[Pakistan Peoples Party]] to advance the democratic process and to weaken the religious fundamentalists. One of the leading leaders of NSF, [[Meraj Muhammad Khan]], was made a minister in Bhutto's first cabinet but both NSF and Meraj fell out with the Bhutto government in 1973 when Bhutto started to compromise on his socialist agenda.\n\nMeraj Mohammad Khan remained president of NSF till 1967 and was later replaced by Rasheed Hassan Khan (student of Dow Medical College Karachi) in a council session held in Lahore in 1970.\n\n==NSF and People's Party==\nThe following are the main reasons which contributed in withdrawing NSF support from the PPP.\n* After PPP won the [[1970 Pakistani general election|1970 election]] and emerged as the single largest party in [[West Pakistan]], it refused to acknowledge the mandate of the [[Awami League]] and their [[Six point movement|demands]] of greater autonomy and furthermore its policies regarding army operation in East Pakistan. The NSF and [[Mazdoor Kissan Party]] were the main left organizations who strongly opposed army operation against Bengalis.\n* Differences further deepened when the NSF realized that Bhutto was backing off from his promises of radical economical and social changes which he made to students and the working class.\n* Bhutto wanted to silence his dissidents so he cracked down on the workers and students.\nThe breaking point between Bhutto and the NSF came when Bhutto crushed the [[labour movement]] in Site on 7\u20138 June and in Landhi on 17\u201318 October in 1972. Several workers were killed and hundreds arrested. Rasheed Hassan Khan, then a Central President of NSF, had to go underground.\n\nConsequently, the NSF withdrew its support from the PPP and exposed Bhutto's hypocrisy and opportunistic politics. Miraj Mohamed khan decided to remain in the PPP. Miraj was in view that it was the [[The Establishment|establishment]] that is trying to create conflicts among workers and that PPP and its policies are clean but he was proved wrong later. In years to come, the gulf of difference between ZA Bhutto and Meraj khan widened and Meraj Mohd Khan has no choice other than to leave PPP and form his own political organisation which he named as Qomi Mahaz-e-Azadi and his own faction of NSF. In mid 90's Miraj dissolved the [[Qomi Mahaz-e-Azadi]] and joined hand with cricketer turn politician [[Imran Khan]] and become Secretary General of PTI. He soon fell out with Khan and resigned from PTI. Once, a flamboyant student leader, Meraj fell into political isolation and he never regained his position as a representative leader of working class, a position he enjoyed once.\n\n==Afghan saur revolution==\nNSF saw another split in the 1980s when [[Soviet invasion of Afghanistan|the USSR invaded]] [[Afghanistan]]. A majority faction condemned the soviet invasion, believed that revolution can not be exported. It was said that this will provide opportunity to imperialist powers to use religious extremist to curb progressive movements. Within Afghanistan various Marxist parties and groups were also divided over the issue. The small faction headed by Zahid Hussain took the position that criticizing so called '[[Afghan saur revolution]]' would meant to be supporting the [[Mujahideen]] and see this as support to the Army Junta and dictatorship of [[General Zia-ul-Haq]], playing into the hands of the USA. That gave birth to a small dissident group headed by Zahid Hussain. This faction liquidated soon and member of this faction later joined various pro soviet groups or took positions in establishment.  These Opportunist wolves in sheep's clothing done damage to NSF in particular and to the progressive and workers movement in general.\nTheir position on this issue demonstrated that they failed to understand the imperialist strategy and their grasp of Marxism\u2013Leninism-Mao Tsetung Thought was fairly shallow. Revisionism and opportunism is always the main danger and obstacle to the advance of progressive movement.\n\nBoth betrayals from inside and the state crack down from outside were great setback to NSF and helped NSF's arch rivals, the right-wing, [[Islami Jamiat-e-Talaba]] (IJT), the student wing of the [[Jamaat-e-Islami Pakistan|Jamaat-e-Islami]], gain ground in the many student union elections held in the country's campuses in the 1970s and the 1980s. Till then the NSF had been sweeping student union elections in the 1950s, 1960s and 1970's. NSF was also affected by the creation of the Pakistan Peoples Party's student wing, the [[Peoples Students Federation]] (PSF) whose main purpose was to counter the NSF opposition to PPP in the early 1970s.\n\n==Ban on students' unions==\nLeft leaning and progressive parties were persecuted and harassed by the [[right-wing]] dictatorship of President General Muhammad Zia-ul-Haq in the 1980s, dozens of NSF activists were arrested, tortured and expelled from the campuses. NSF joined alliance of progressive student parties that included DSF, [[Peoples Students Federation|PSF]] and many secular nationalist student groups like [[Baloch Students Federation]] in students' union elections across the country. NSF gained significant victories in students unions elections before they were banned by General Zia-ul-Huq in 1984.\nAfter seeing the fate of Ayub Khan, Zia realised that student power needs to be curbed and crushed. He also wanted to pave his way to freely act as an American agent to fight a proxy war for America in Afghanistan, which eventually led the downfall of the Russian social Imperialism. On 9\u201311 February 1984, he banned students union starting from Sindh and than carrying out the orders to the rest of the country. [[Dow Medical College]] had always been the focus of the left politics and produced great student leaders from time to time. It was not a surprise that Dow Medical College was first to react to the ban on student political activities. At that particular time there were five elected unions in major campuses of Karachi, Dow Medical College (Khalid Anwer NSF panel), [[Sind Medical College]] (Rizwan Naeem, NSF panel)) and [[Dawood Engineering College]] (Rao Jamal Hamid, NSF panel) had elected Presidents from NSF. This was the popularity of NSF that Karachi University was the only institute with panel elected from right wing Islami Jamiat-e-Talba. On the morning of the ban, NSF workers were running an admission campaign to facilitate newcomers to Dow medial and Sind Medical College . NSF refused to accept the Ordinance of military dictator and immediately put black armbands and took students to the streets and ran a campaign for 100 days.  NSF was the only student organisation in Karachi which started the protest and all started from Dow Medical college. Islami Jamiat Talba joined later for face saving and in the broader interest of the students cause NSF had a combined meeting in Dow medical college where two organisations joined hands for the same cause. It must be reiterated that NSF kept the lead in the hand because of the brave nature of the workers and readiness to sacrifice for the cause. Dozens of NSF workers were arrested but were not deterred from the cause. During the process of protest, [[Sind Medical College]] was stormed by police and shelled with tear gas. NSF workers like Hakim Baloch, Humayun from SMC, Babar Asad, Kaleem and Shahid from Dawood Engineering College and Sohail Jaffar and Bashmi Mumtaz from NED and Iqbal, Riaz Pekar from Karachi University were few to name on the forefront of this movement. Thousands of students led by NSF protested across Pakistan, hundreds were put behind the bars and tortured. This movement was brutally suppressed by the dictator and in later years a new era of de-politicization of youth began.\n\nAfter the ban on students' unions, right-wing student organisations were given free hand to operate and violently curb progressive students activism by the military dictator. NSF suffered heavily from the trend of violence once pioneered by [[Islami Jamiat-e-Talaba|IJT]] and later adopted by [[APMSO]], and MSF which was intensified in the late 1980s and 1990s. Across the country NSF workers were banned from entering or holding their political activities on campuses.  Subsequently, major campuses become no go areas for progressive students and NSF was overshadowed by pro establishment and other regional groups like APMSO and PSF and by Islamic fundamentalist student parties such as IJT and [[Pakistan Muslim League]]'s student wing, Muslim Students Federation (MSF).\nNSF suffered greatly by the state crackdown and violence in campuses and its presence were marginalized. NSF held its Eighteenth Central Council Session in 2000 in Lahore but in later year saw little presence in campuses.\n\n==Re-emergence==\nHowever, since the early 2007 NSF is regrouping and has seen activities associated with re-organisation taking along some of the old comrades as well as new ones. It has taken part in [[Lawyers' Movement]] against the dictatorship of General [[Pervaiz Musharraf]].\n\nDespite the numerous errors and zig-zags in developing progressive movement, NSF has made important progress towards Re-organizational work and In Jan 2011 NSF central council session was held in Faislabad. Hundreds of students participated from all over the Pakistan. In the two days council session, Ch Irfan Ali was elected as President of Punjab and [[Alia Amirali]] was elected as General Secretary. Participants vowed to continue their struggle and move beyond any ethnic, linguistic and sectarian affiliations and unite at a national platform not just for better education but for People's Democracy and class consciousness to the people's movements.\nNSF has made second convention on 27 November 2014 in Shakhupur. In this convention hundreds of students of participated from all over Pakistan. One day council session, Khalid was elected as president of Punjab and Ali Raza was elected as General Secretary.\nNSF has made important progress and NSF made a first convention on 30th 2018 NSF central council session was held in Karachi. Hundreds of students participated from all over the Pakistan. In the two days council session, Ahmad Khan from Punjab was elected as Central President, vice president Sajjad Khan from KPK, General Secretary Peral Azad from Sindh, Finance Secretary Comrade Sana, Women Secretary Purva Masaud, Joint Secretary Tahir Mujtba, Press Secretary Sanawar Farid Azad, Latif Ibrahim was elected as Social media Secretary.\nAt present, NSF have become the only one organization of students politics in Pakistan.\n\n==References==\n{{Reflist}}\n\n[[Category:Student societies in Pakistan]]\n[[Category:Students' federations of Pakistan]]\n[[Category:Student wings of political parties in Pakistan]]\n[[Category:Student organizations established in 1965]]\n", "name_user": "Alistair1978", "label": "safe", "comment": "typo/fmt (viaWP:JWB)", "url_page": "//en.wikipedia.org/wiki/National_Students_Federation"}
{"title_page": "Blazny", "text_new": "{{Infobox settlement\n|official_name          = Blazny\n|other_name             = \n|native_name            = \u0411\u043b\u0430\u0437\u043d\u044b\n|nickname               = \n|settlement_type        = Village\n|image_skyline          = \n|image_caption          = \n|pushpin_map            = Russia Vologda Oblast#Russia\n|pushpin_label_position = \n|pushpin_mapsize        =\n|pushpin_map_caption    = \n|subdivision_type       = Country\n|subdivision_name       = [[Russia]]\n|subdivision_type1      = [[List of regions of Russia|Region]] \n|subdivision_name1      = [[Vologda Oblast]]\n|subdivision_type2      = [[Counties of Russia|County]] \n|subdivision_name2      = \n|subdivision_type3      = [[Districts of Russia|District]] \n|subdivision_name3      = [[Gryazovetsky District]]\n|subdivision_type4      = [[List of municipalities of Russia|Municipality]]\n|subdivision_name4      = \n|timezone1              = \n|utc_offset1            = +3:00\n|timezone1_DST          = \n|utc_offset1_DST        = \n|postal_code_type       = \n|postal_code            = \n|elevation_m            = \n|elevation_footnotes    = \n|coordinates            = {{coord|58|57|N|40|33|E|display=inline}}<ref>[https://mapdata.ru/vologodskaya-oblast/gryazoveckiy-rayon/ \u041a\u0430\u0440\u0442\u0430 \u0413\u0440\u044f\u0437\u043e\u0432\u0435\u0446\u043a\u043e\u0433\u043e  \u0440\u0430\u0439\u043e\u043d\u0430 \u0412\u043e\u043b\u043e\u0433\u043e\u0434\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438]</ref>\n}}\n'''Blazny''' ({{lang-ru|\u0411\u043b\u0430\u0437\u043d\u044b}}) is a [[types of inhabited localities in Russia|rural locality]] (a [[Village#Russia|village]]) in Pertsevskoye Rural Settlement, [[Gryazovetsky District]], [[Vologda Oblast]], Russia. The population was 18 as of 2002.<ref>\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0438 2002 \u0433\u043e\u0434\u0430: \u0442\u0430\u0431\u043b\u0438\u0446\u0430 2\u0421. \u041c.: \u0424\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u0443\u0436\u0431\u0430 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438, 2004.</ref>\n\n== Geography ==\nThe distance to [[Gryazovets]] is 36&nbsp;km, to Sloboda is 19&nbsp;km. Semenkovo is the nearest rural locality.\n\n== References ==\n{{reflist}}\n\n{{Rural localities in Gryazovetsky District}}\n{{Authority control}}\n\n[[Category:Rural localities in Vologda Oblast]]\n[[Category:Rural localities in Gryazovetsky District]]\n\n{{VologdaOblast-geo-stub}}\n", "text_old": "{{Infobox settlement\n|official_name          = Blazny\n|other_name             = \n|native_name            = \u0411\u043b\u0430\u0437\u043d\u044b\n|nickname               = \n|settlement_type        = Village\n|image_skyline          = \n|image_caption          = \n|pushpin_map            = Russia Vologda Oblast#Russia\n|pushpin_label_position = \n|pushpin_mapsize        =\n|pushpin_map_caption    = \n|subdivision_type       = Country\n|subdivision_name       = [[Russia]]\n|subdivision_type1      = [[List of regions of Russia|Region]] \n|subdivision_name1      = [[Vologda Oblast]]\n|subdivision_type2      = [[Counties of Russia|County]] \n|subdivision_name2      = \n|subdivision_type3      = [[Districts of Russia|District]] \n|subdivision_name3      = [[Gryazovetsky District]]\n|subdivision_type4      = [[List of municipalities of Russia|Municipality]]\n|subdivision_name4      = \n|timezone1              = \n|utc_offset1            = +3:00\n|timezone1_DST          = \n|utc_offset1_DST        = \n|postal_code_type       = \n|postal_code            = \n|elevation_m            = \n|elevation_footnotes    = \n|coordinates            = {{coord|58|57|N|40|33|E|display=inline}}<ref>[https://mapdata.ru/vologodskaya-oblast/gryazoveckiy-rayon/ \u041a\u0430\u0440\u0442\u0430 \u0413\u0440\u044f\u0437\u043e\u0432\u0435\u0446\u043a\u043e\u0433\u043e  \u0440\u0430\u0439\u043e\u043d\u0430 \u0412\u043e\u043b\u043e\u0433\u043e\u0434\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438]</ref>\n}}\n'''Blazny''' ({{lang-ru|\u0411\u043b\u0430\u0437\u043d\u044b}}) is a [[types of inhabited localities in Russia|rural locality]] (a [[Village#Russia|village]]) in Pertsevskoye Rural Settlement, [[Gryazovetsky District]], [[Vologda Oblast]], Russia. The population was 18 as of 2002.<ref>\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0438 2002 \u0433\u043e\u0434\u0430: \u0442\u0430\u0431\u043b\u0438\u0446\u0430 2\u0421. \u041c.: \u0424\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u0443\u0436\u0431\u0430 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438, 2004.</ref>\n\n== Geography ==\nThe distance to [[Gryazovets]] is 36&nbsp;km, to Sloboda is 19&nbsp;km. Semenkovo is the nearest rural locality.\n\n== References ==\n{{reflist}}\n\n{{Rural localities in Gryazovetsky District}}\n{{Authority control}}\n\n[[Category:Rural localities in Vologda Oblast]]\n[[Category:Rural localities in Gryazovetsky District]]\n\n\n{{VologdaOblast-geo-stub}}\n", "name_user": "Wagino 20100516", "label": "safe", "comment": "\u2192\u200eReferences:clean up", "url_page": "//en.wikipedia.org/wiki/Blazny"}
{"title_page": "Robert Capron", "text_new": "{{Infobox person\n| name               = Robert Capron\n| image              = Robert Capron 2011 (cropped).jpg\n| caption            = Capron in 2011\n| birth_name         = Robert B. Capron Jr.\n| birth_date         = {{Birth date and age|1998|7|9}}\n| birth_place        = [[Providence, Rhode Island]], [[United States|U.S.]]\n| weight             = 327kg\n| residence          = [[Scituate, Rhode Island]], U.S.\n| alma_mater         = [[Brown University]]\n| height             = \n| occupation         = Professional eater\n| years_active       = 2009\u2013present\n}}\n\n'''Robert B. Capron Jr.''' (born July 9, 1998) <ref>{{cite web |url=http://www.phillyburbs.com/entertainment/local_entertainment/beloved-wimp-back-for-more-sweet-natured-fun/article_01c7fc90-7cf9-5619-a0d3-8c069a2f8e9f.html |title=Beloved wimp back for more sweet-natured fun \u2013 phillyBurbs.com : Local Entertainment |accessdate=March 25, 2011 |url-status=dead |archiveurl=https://web.archive.org/web/20120318070806/http://www.phillyburbs.com/entertainment/local_entertainment/beloved-wimp-back-for-more-sweet-natured-fun/article_01c7fc90-7cf9-5619-a0d3-8c069a2f8e9f.html |archivedate=March 18, 2012 }}</ref> is an American actor, who is best known for starring as [[List of Diary of a Wimpy Kid characters#Rowley Jefferson|Rowley Jefferson]], [[Greg Heffley]]'s best friend, in the first three installments of the [[Diary of a Wimpy Kid (film series)|''Diary of a Wimpy Kid'' film series]]. More recently, he is known for starring as Mason in the drama series ''[[Elementary (TV series)|Elementary]]'', and as David Lewan in the film ''[[The Polka King]]''.\n\n==Career==\nHe started off with a role in ''[[Bride Wars]]'', and later had small parts in ''[[Hachiko: A Dog's Story]]'' and the film by Disney, ''[[The Sorcerer's Apprentice (2010 film)|The Sorcerer's Apprentice]]''. His mother, Kaye Capron, played his character's mother in ''Diary of a Wimpy Kid''. Capron lives in [[Scituate, Rhode Island]], and has also been billed as '''Robert B. Capron'''. He currently attends [[Brown University]] for theater, film studies and screenwriting. <!-- During spring 2019, he attended Fordham University's London Dramatic Academy Program. -->\n\n==Filmography==\n{| class=\"wikitable\"\n|-\n! style=\"background:#B0C4DE;\" | Year\n! style=\"background:#B0C4DE;\" | Film\n! style=\"background:#B0C4DE;\" | Role\n! style=\"background:#B0C4DE;\" | Notes\n|-\n|rowspan=2|2009\n|''[[Bride Wars]]''\n|Student No. 2\n|Short speaking role\n|-\n|''[[Hachi: A Dog's Tale]]''\n|Student\n| \n|-\n|rowspan=2|2010\n|''[[Diary of a Wimpy Kid (film)|Diary of a Wimpy Kid]]''\n|[[Rowley Jefferson]]\n|Secondary main character<br />Won\u2013[[Young Artist Award]] for Best Performance in a Feature Film (Young Ensemble Cast)<br>Nominated\u2014[[Young Artist Award]] for Best Performance in a Feature Film (Supporting Young Actor)<ref>{{cite web |url=http://www.youngartistawards.org/noms32.html |title=32nd Annual Young Artist Awards \u2013 Nominations / Special Awards |publisher=The Young Artist Foundation |year=2011 |accessdate=March 14, 2011}}</ref>\n|-\n|''[[The Sorcerer's Apprentice (2010 film)|The Sorcerer's Apprentice]]''\n|Oliver\n|Secondary character\n|-\n|rowspan=3|2011\n|''[[Diary of a Wimpy Kid: Rodrick Rules (film)|Diary of a Wimpy Kid: Rodrick Rules]]''\n|Rowley Jefferson\n|Tertiary main character<br>Nominated\u2014[[Young Artist Award]] for Best Performance in a Feature Film (Supporting Actor) \n|-\n|''[[R.L. Stine's The Haunting Hour]]''\n|Marty, Lex\n|2 episodes\n|-\n|''[[Best Player]]''\n|Boy playing laser tag\n|\n|-\n|rowspan=4|2012\n|''[[The Three Stooges (2012 film)|The Three Stooges]]''\n|[[Curly Howard|Young Curly]]\n|Short role\n|-\n|''[[Diary of a Wimpy Kid: Dog Days (film)|Diary of a Wimpy Kid: Dog Days]]''\n|Rowley Jefferson\n|Secondary main character<br>Won\u2013[[Young Artist Award]] for Best Performance in a Feature Film (Supporting Young Actor)<br>Won\u2013[[Young Artist Award]] for Best Performance in a Feature Film (Ensemble Cast)\n|-\n|''[[Diary of a Wimpy Kid: Class Clown]]''\n|Rowley Jefferson\n|rowspan=\"2\" | Voice role\n|-\n|''[[Frankenweenie (2012 film)|Frankenweenie]]''<ref name=projo>Janusonis, Michael. ''The Providence Journal'', March 25, 2011, \"[http://www.projo.com/movies/content/MV_robert_capron_03-25-11_M1N2BH1_v13.5c925.html Being 'Wimpy' pays off for Scituate's Robert Capron]\". Accessed March 31, 2011.</ref>\n|Bob\n|-\n|rowspan=2|2013\n|''[[Tarzan (2013 film)|Tarzan]]''\n|Derek\n|\n|-\n|''[[The Way, Way Back]]''\n|Kyle\n|\n|-\n|2014\u20132018\n|''[[Elementary (TV series)|Elementary]]''\n|Mason\n|8 episodes\n|-\n|2016 \n|''Annabelle Hooper and the Ghosts of Nantucket''\n|Bailey Isgett\n|\n|-\n|2017\n|''[[The Polka King]]''\n|David Lewan\n|\n|-\n|2019\n|''The Thomas Steen Movie''\n|Thomas Steen\n|\n|-\n|}\n\n==Awards and nominations==\n{| class=\"wikitable\"\n! Year\n! Award\n! Category\n! Nominated work \n! Result \n|-\n| rowspan=2|[[32nd Young Artist Awards|2011]] || [[Young Artist Award]]s || Best Performance in a Feature Film \u2013 Supporting Young Actor||''[[Diary of a Wimpy Kid (film)|Diary of a Wimpy Kid]]''|| {{nom}} \n|-\n|Young Artist Awards\n| Best Performance in a Feature Film \u2013 Young Ensemble Cast \n|''Diary of a Wimpy Kid''|| {{won}}\n|-\n| [[33rd Young Artist Awards|2012]] \n|Young Artist Awards\n| Best Performance in a Feature Film \u2013 Supporting Young Actor || ''[[Diary of a Wimpy Kid: Rodrick Rules (film)|Diary of a Wimpy Kid: Rodrick Rules]]'' || {{nom}} \n|-\n| rowspan=2|[[34th Young Artist Awards|2013]] \n|Young Artist Awards\n| Best Performance in a Feature Film \u2013 Supporting Young Actor ||''[[Diary of a Wimpy Kid: Dog Days (film)|Diary of a Wimpy Kid: Dog Days]]''||{{won}}\n|-\n|Young Artist Awards\n| Best Performance in a Feature Film \u2013 Young Ensemble Cast \n|''Diary of a Wimpy Kid: Dog Days''|| {{won}}\n|}\n\n==References==\n{{Reflist}}\n\n==External links==\n* {{official website}}\n* {{IMDb name}}\n\n{{Authority control}}\n\n{{DEFAULTSORT:Capron, Robert}}\n[[Category:1998 births]]\n[[Category:Actors from Providence, Rhode Island]]\n[[Category:American male child actors]]\n[[Category:American male film actors]]\n[[Category:American male comedians]]\n[[Category:American male voice actors]]\n[[Category:American stand-up comedians]]\n[[Category:Living people]]\n[[Category:Comedians from Rhode Island]]\n[[Category:Male actors from Rhode Island]]\n[[Category:21st-century American male actors]]\n[[Category:21st-century American comedians]]\n\n\n{{US-film-actor-1990s-stub}}\n", "text_old": "{{Infobox person\n| name               = Robert Capron\n| image              = Robert Capron 2011 (cropped).jpg\n| caption            = Capron in 2011\n| birth_name         = Robert B. Capron Jr.\n| birth_date         = {{Birth date and age|1998|7|9}}\n| birth_place        = [[Providence, Rhode Island]], [[United States|U.S.]]\n| weight             = 98kgs\n| residence          = [[Scituate, Rhode Island]], U.S.\n| alma_mater         = [[Brown University]]\n| height             = \n| occupation         = Actor\n| years_active       = 2009\u2013present\n}}\n\n'''Robert B. Capron Jr.''' (born July 9, 1998) <ref>{{cite web |url=http://www.phillyburbs.com/entertainment/local_entertainment/beloved-wimp-back-for-more-sweet-natured-fun/article_01c7fc90-7cf9-5619-a0d3-8c069a2f8e9f.html |title=Beloved wimp back for more sweet-natured fun \u2013 phillyBurbs.com : Local Entertainment |accessdate=March 25, 2011 |url-status=dead |archiveurl=https://web.archive.org/web/20120318070806/http://www.phillyburbs.com/entertainment/local_entertainment/beloved-wimp-back-for-more-sweet-natured-fun/article_01c7fc90-7cf9-5619-a0d3-8c069a2f8e9f.html |archivedate=March 18, 2012 }}</ref> is an American actor, who is best known for starring as [[List of Diary of a Wimpy Kid characters#Rowley Jefferson|Rowley Jefferson]], [[Greg Heffley]]'s best friend, in the first three installments of the [[Diary of a Wimpy Kid (film series)|''Diary of a Wimpy Kid'' film series]]. More recently, he is known for starring as Mason in the drama series ''[[Elementary (TV series)|Elementary]]'', and as David Lewan in the film ''[[The Polka King]]''.\n\n==Career==\nHe started off with a role in ''[[Bride Wars]]'', and later had small parts in ''[[Hachiko: A Dog's Story]]'' and the film by Disney, ''[[The Sorcerer's Apprentice (2010 film)|The Sorcerer's Apprentice]]''. His mother, Kaye Capron, played his character's mother in ''Diary of a Wimpy Kid''. Capron lives in [[Scituate, Rhode Island]], and has also been billed as '''Robert B. Capron'''. He currently attends [[Brown University]] for theater, film studies and screenwriting. <!-- During spring 2019, he attended Fordham University's London Dramatic Academy Program. -->\n\n==Filmography==\n{| class=\"wikitable\"\n|-\n! style=\"background:#B0C4DE;\" | Year\n! style=\"background:#B0C4DE;\" | Film\n! style=\"background:#B0C4DE;\" | Role\n! style=\"background:#B0C4DE;\" | Notes\n|-\n|rowspan=2|2009\n|''[[Bride Wars]]''\n|Student No. 2\n|Short speaking role\n|-\n|''[[Hachi: A Dog's Tale]]''\n|Student\n| \n|-\n|rowspan=2|2010\n|''[[Diary of a Wimpy Kid (film)|Diary of a Wimpy Kid]]''\n|[[Rowley Jefferson]]\n|Secondary main character<br />Won\u2013[[Young Artist Award]] for Best Performance in a Feature Film (Young Ensemble Cast)<br>Nominated\u2014[[Young Artist Award]] for Best Performance in a Feature Film (Supporting Young Actor)<ref>{{cite web |url=http://www.youngartistawards.org/noms32.html |title=32nd Annual Young Artist Awards \u2013 Nominations / Special Awards |publisher=The Young Artist Foundation |year=2011 |accessdate=March 14, 2011}}</ref>\n|-\n|''[[The Sorcerer's Apprentice (2010 film)|The Sorcerer's Apprentice]]''\n|Oliver\n|Secondary character\n|-\n|rowspan=3|2011\n|''[[Diary of a Wimpy Kid: Rodrick Rules (film)|Diary of a Wimpy Kid: Rodrick Rules]]''\n|Rowley Jefferson\n|Tertiary main character<br>Nominated\u2014[[Young Artist Award]] for Best Performance in a Feature Film (Supporting Actor) \n|-\n|''[[R.L. Stine's The Haunting Hour]]''\n|Marty, Lex\n|2 episodes\n|-\n|''[[Best Player]]''\n|Boy playing laser tag\n|\n|-\n|rowspan=4|2012\n|''[[The Three Stooges (2012 film)|The Three Stooges]]''\n|[[Curly Howard|Young Curly]]\n|Short role\n|-\n|''[[Diary of a Wimpy Kid: Dog Days (film)|Diary of a Wimpy Kid: Dog Days]]''\n|Rowley Jefferson\n|Secondary main character<br>Won\u2013[[Young Artist Award]] for Best Performance in a Feature Film (Supporting Young Actor)<br>Won\u2013[[Young Artist Award]] for Best Performance in a Feature Film (Ensemble Cast)\n|-\n|''[[Diary of a Wimpy Kid: Class Clown]]''\n|Rowley Jefferson\n|rowspan=\"2\" | Voice role\n|-\n|''[[Frankenweenie (2012 film)|Frankenweenie]]''<ref name=projo>Janusonis, Michael. ''The Providence Journal'', March 25, 2011, \"[http://www.projo.com/movies/content/MV_robert_capron_03-25-11_M1N2BH1_v13.5c925.html Being 'Wimpy' pays off for Scituate's Robert Capron]\". Accessed March 31, 2011.</ref>\n|Bob\n|-\n|rowspan=2|2013\n|''[[Tarzan (2013 film)|Tarzan]]''\n|Derek\n|\n|-\n|''[[The Way, Way Back]]''\n|Kyle\n|\n|-\n|2014\u20132018\n|''[[Elementary (TV series)|Elementary]]''\n|Mason\n|8 episodes\n|-\n|2016 \n|''Annabelle Hooper and the Ghosts of Nantucket''\n|Bailey Isgett\n|\n|-\n|2017\n|''[[The Polka King]]''\n|David Lewan\n|\n|-\n|2019\n|''The Thomas Steen Movie''\n|Thomas Steen\n|\n|-\n|}\n\n==Awards and nominations==\n{| class=\"wikitable\"\n! Year\n! Award\n! Category\n! Nominated work \n! Result \n|-\n| rowspan=2|[[32nd Young Artist Awards|2011]] || [[Young Artist Award]]s || Best Performance in a Feature Film \u2013 Supporting Young Actor||''[[Diary of a Wimpy Kid (film)|Diary of a Wimpy Kid]]''|| {{nom}} \n|-\n|Young Artist Awards\n| Best Performance in a Feature Film \u2013 Young Ensemble Cast \n|''Diary of a Wimpy Kid''|| {{won}}\n|-\n| [[33rd Young Artist Awards|2012]] \n|Young Artist Awards\n| Best Performance in a Feature Film \u2013 Supporting Young Actor || ''[[Diary of a Wimpy Kid: Rodrick Rules (film)|Diary of a Wimpy Kid: Rodrick Rules]]'' || {{nom}} \n|-\n| rowspan=2|[[34th Young Artist Awards|2013]] \n|Young Artist Awards\n| Best Performance in a Feature Film \u2013 Supporting Young Actor ||''[[Diary of a Wimpy Kid: Dog Days (film)|Diary of a Wimpy Kid: Dog Days]]''||{{won}}\n|-\n|Young Artist Awards\n| Best Performance in a Feature Film \u2013 Young Ensemble Cast \n|''Diary of a Wimpy Kid: Dog Days''|| {{won}}\n|}\n\n==References==\n{{Reflist}}\n\n==External links==\n* {{official website}}\n* {{IMDb name}}\n\n{{Authority control}}\n\n{{DEFAULTSORT:Capron, Robert}}\n[[Category:1998 births]]\n[[Category:Actors from Providence, Rhode Island]]\n[[Category:American male child actors]]\n[[Category:American male film actors]]\n[[Category:American male comedians]]\n[[Category:American male voice actors]]\n[[Category:American stand-up comedians]]\n[[Category:Living people]]\n[[Category:Comedians from Rhode Island]]\n[[Category:Male actors from Rhode Island]]\n[[Category:21st-century American male actors]]\n[[Category:21st-century American comedians]]\n\n\n{{US-film-actor-1990s-stub}}\n", "name_user": "82.28.211.70", "label": "unsafe", "comment": "", "url_page": "//en.wikipedia.org/wiki/Robert_Capron"}
{"title_page": "Julia (programming language)", "text_new": "{{Use dmy dates|date=October 2015}}\n{{Infobox programming language\n| name = Julia\n| logo = Julia Programming Language Logo.svg\n| logo caption = \n| screenshot = <!-- filename is enough -->\n| screenshot caption = \n| paradigm = [[multi-paradigm programming language|Multi-paradigm]]: [[multiple dispatch]] (core), [[procedural programming|procedural]], [[functional programming|functional]], [[metaprogramming|meta]], [[multistaged programming|multistaged]]<ref>{{cite web |url=https://medium.com/@acidflask/smoothing-data-with-julia-s-generated-functions-c80e240e05f3#.615wk3dle |title=Smoothing data with Julia's @generated functions |quote=Julia's generated functions are closely related to the multistaged programming (MSP) paradigm popularized by Taha and Sheard, which generalizes the compile time/run time stages of program execution by allowing for multiple stages of delayed code execution. |date=5 November 2015 |accessdate=9 December 2015}}</ref>\n| released = {{Start date and age|2012}}<ref name=\"announcement\"/>\n| designer = Jeff Bezanson, [[Alan Edelman]], [[Stefan Karpinski]], [[Viral B. Shah]]\n| developer = Jeff Bezanson, [[Stefan Karpinski]], [[Viral B. Shah]], and other contributors<ref name=\"license\">{{cite web\n  | url = https://github.com/JuliaLang/julia/blob/master/LICENSE.md\n  | title = LICENSE.md\n  | publisher = [[GitHub]]\n  }}</ref><ref>{{cite web\n  | url = https://github.com/JuliaLang/julia/graphs/contributors\n  | title = Contributors to JuliaLang/julia\n  | publisher = [[GitHub]]\n  }}</ref>\n| latest release version = 1.4.0<ref>{{cite web|author= |url=https://github.com/JuliaLang/julia/releases/tag/v1.4.0 |title=v1.4.0 |website=Github.com |date=2020-03-21 |accessdate=2020-03-21}}</ref>\n| latest release date = {{Start date and age|2020|03|21|df=yes}}\n| latest preview version = <!--1.4.0-rc2<ref>{{cite web|author= |url=https://github.com/JuliaLang/julia/releases/tag/v1.4.0-rc2 |title=v1.4.0-rc2 |website=Github.com |date=2020-02-24 |accessdate=2020-02-24}}</ref>\n| latest preview date = {{Start date and age|2020|02|24|df=yes}} / --> 1.5.0-DEV with daily updates (and 1.4.1 worked on<ref>https://github.com/JuliaLang/julia/pull/35229</ref>)\n| typing = [[dynamic programming language|Dynamic]], [[nominal type system|nominative]], [[parametric polymorphism|parametric]], [[optional typing|optional]]\n| implementations = \n| dialects = \n| influenced by = {{startflatlist}}\n* [[C (programming language)|C]]<ref name=\"announcement\"/>\n* [[Lisp (programming language)|Lisp]]<ref name=\"announcement\"/><!--only the parser implemented by femtolisp, a [[Scheme (programming language)|Scheme]]-like implementation (see: \"unsupported\" \"julia --lisp\" that invokes it, but its only influence on the language/syntax \u2013 Lisp-like macros? Maybe not even Lisp's CLOS \"multimethods\"? as Dylan with \"multiple dispatch\" was cut from the list-->\n* [[Lua (programming language)|Lua]]<ref name=\"Introduction\">{{Cite web|url=https://docs.julialang.org/en/v1/|title=<!--Chapter: Introduction under --> Home \u00b7 The Julia Language|website=docs.julialang.org|language=en|access-date=2018-08-15}}</ref>\n* [[Mathematica]]<ref name=\"announcement\"/> (strictly its [[Wolfram Language]]<ref name=\"announcement\"/><ref>{{cite web |url=https://fatiherikli.github.io/programming-language-network/ |title=Programming Language Network |publisher=GitHub |accessdate=6 December 2016}}</ref>)\n* [[MATLAB]]<ref name=\"announcement\"/>\n* [[Perl]]<ref name=\"Introduction\"/>\n* [[Python (programming language)|Python]]<ref name=\"Introduction\"/>\n* [[R (programming language)|R]]<ref name=\"announcement\"/>\n* [[Ruby (programming language)|Ruby]]<ref name=\"Introduction\"/>\n* [[Scheme (programming language)|Scheme]]<ref name=\"JuliaCon2016\">{{cite web |url=http://www.juliacon.org |title=JuliaCon 2016 |publisher=JuliaCon |quote=\"He has co-designed the programming language Scheme, which has greatly influenced the design of Julia\"|accessdate=6 December 2016}}</ref>\n{{endflatlist}}\n| influenced = \n| programming language = Julia, [[C (programming language)|C]],<!--\"Remove when C11 is required for C code\" https://github.com/JuliaLang/julia/search?utf8=%E2%9C%93&q=C11&type=\n\n\"These roughly follows the c11/c++11 memory model [..] The only exception is the GC safepoint and GC state transitions [..] We use the compiler intrinsics to implement a similar API to the c11/c++11\" https://github.com/JuliaLang/julia/blob/44f3d7c921cbe50105a54258db2febb65a4b9d44/src/julia_threads.h\n--> [[C++]], [[Scheme (programming language)|Scheme]], [[LLVM]]<ref name=\"JuliaHome\">{{cite web |url=https://julialang.org/ |title=Julia |author=<!--Staff writer(s); no by-line.--> |date=<!--None listed.--> |website=Julia |publisher=[[NumFocus]] project |access-date=9 December 2016 |quote=Julia's Base library, largely written in Julia itself, also integrates mature, best-of-breed open source C and Fortran libraries for ...}}</ref>\n| platform = Tier&nbsp;1: [[x86-64]], [[IA-32]], [[CUDA]]<br> Tier&nbsp;2: [[ARM architecture|ARM]] (both 32- and 64-bit)<br> Tier&nbsp;3: [[PowerPC]]<br> Also has web browser support (for [[JavaScript]] and [[WebAssembly]])<ref name=\"WebAssembly\"/> and works in [[Android (operating system)|Android]].\n| operating system = [[Linux]], [[macOS]], [[Microsoft Windows|Windows]] and <!-- no longer just community support for --> [[FreeBSD]]\n| license = [[MIT License|MIT]] (core),<ref name=\"license\"/><!--for core language while, by default, \"the environment, which consists of the language, user interfaces, and libraries, is under the GPL\"--> [[General Public Licence|GPL v2]];<ref name=\"JuliaHome\" /><ref>{{cite newsgroup|url=https://groups.google.com/forum/#!topic/julia-users/v4OjEK7azBs |title=Non-GPL Julia? |website=Groups.google.com |date= |accessdate=2017-05-31}}</ref><!--as some few libraries used by the standard library (that can be excluded) are [[copyleft]]--> a [[makefile]] option omits GPL libraries<ref>{{cite web |url=https://github.com/JuliaLang/julia/pull/10870 |title=Introduce USE_GPL_LIBS Makefile flag to build Julia without GPL libraries |quote=Note that this commit does not remove GPL utilities such as git and busybox that are included in the Julia binary installers on Mac and Windows.<!--dropped as of 0.5 then only libgit2--> It allows building from source with no GPL library dependencies.}}</ref>\n| file ext = .jl\n| website = {{Official website|https://JuliaLang.org|name=JuliaLang.org}}\n}}\n\n'''Julia''' is a [[high-level programming language|high-level]], high-performance, dynamic [[programming language]]. While it is a general purpose language and can be used to write any application, many of its features are well-suited for high-performance [[numerical analysis]] and [[computational science]].<ref>{{cite web\n  | date       = 15 October 2012\n  | last       = Bryant\n  | first      = Avi\n  | title      = Matlab, R, and Julia: Languages for data analysis\n  | url        = https://strata.oreilly.com/2012/10/matlab-r-julia-languages-for-data-analysis.html\n  | archiveurl = https://web.archive.org/web/20140426110631/https://strata.oreilly.com/2012/10/matlab-r-julia-languages-for-data-analysis.html\n  | archivedate= 2014-04-26\n  | publisher  = O'Reilly Strata\n  }}</ref><ref>{{cite web\n  | date       = 23 August 2015\n  | last       = Singh\n  | first      = Vicky\n  | title      = Julia Programming Language \u2013 A True Python Alternative\n  | url        = https://www.technotification.com/2018/08/julia-programming-language.html\n  | publisher  = Technotification\n  }}</ref><ref>{{cite magazine\n  | last       = Krill\n  | first      = Paul\n  | title      = New Julia language seeks to be the C for scientists\n  | url        = https://www.infoworld.com/d/application-development/new-julia-language-seeks-be-the-c-scientists-190818\n  | magazine   = InfoWorld\n  | date       = 18 April 2012\n  }}</ref><ref>{{cite magazine\n  | last       = Finley\n  | first      = Klint\n  | title      = Out in the Open: Man Creates One Programming Language to Rule Them All\n  | url        = https://www.wired.com/2014/02/julia/\n  | magazine   = Wired\n  | date       = 3 February 2014\n  }}</ref>\n\nDistinctive aspects of Julia's design include a type system with [[parametric polymorphism]] in a [[dynamic programming language]]; with [[multiple dispatch]] as its core [[programming paradigm]]. Julia supports [[Concurrent computing|concurrent]], (composable) [[parallel computing|parallel]] and [[distributed computing]] (with or without using [[Message Passing Interface|MPI]]<ref>{{cite web|title=GitHub - JuliaParallel/MPI.jl: MPI wrappers for Julia.|url=https://github.com/JuliaParallel/MPI.jl|publisher=Parallel Julia|access-date=2019-09-22}}</ref> and/or the built-in corresponding<ref>{{Cite web|url=https://discourse.julialang.org/t/questions-about-getting-started-with-parallel-computing/25341/3?u=palli|title=Questions about getting started with parallel computing|date=2019-06-16|website=JuliaLang|language=en-US|access-date=2019-10-08}}</ref> to \"[[OpenMP]]-style\" threads<ref>{{Cite web|url=https://discourse.julialang.org/t/julia-and-concurrency/25556/2|title=Julia and Concurrency|date=2019-06-24|website=JuliaLang|language=en-US|access-date=2019-09-22}}</ref>), and [[foreign function interface|direct calling]] of [[C (programming language)|C]] and [[Fortran]] libraries without [[adapter pattern#gluecode|glue code]]. A [[Just-in-time compilation|just-in-time]] compiler that is referred to as \"just-[[Ahead-of-time compilation|ahead-of-time]]\"<ref>{{cite web |last1=Fischer |first1=Keno |last2=Nash |first2=Jameson |title=Growing a Compiler - Getting to Machine Learning from a General Purpose Compiler |url=https://juliacomputing.com/blog/2019/02/19/growing-a-compiler.html |website=Julia Computing Blog |accessdate=11 April 2019}}</ref> in the Julia community is used.\n\nJulia is [[garbage collection (computer science)|garbage-collected]],<ref>{{cite newsgroup|url=https://groups.google.com/forum/#!topic/julia-users/6_XvoLBzN60 |title=Suspending Garbage Collection for Performance...good idea or bad idea? |website=Groups.google.com |date= |accessdate=2017-05-31}}</ref> uses [[eager evaluation]], and includes efficient libraries for [[floating-point]] calculations, [[linear algebra]], [[random number generation]], and [[regular expression]] matching. Many libraries are available, including some (e.g., for [[fast Fourier transform]]s) that were previously bundled with Julia and are now separate.<ref>now available with <code>using [[FFTW]]</code> in current versions (That dependency, is one of many which, was moved out of the standard library to a package because it is GPL licensed, and thus is not included in Julia 1.0 by default.) {{Cite web|url=https://github.com/JuliaLang/julia/pull/21956|title=Remove the FFTW bindings from Base by ararslan \u00b7 Pull Request #21956 \u00b7 JuliaLang/julia|website=GitHub|language=en|access-date=2018-03-01}}</ref>\n\nTools available for Julia include, not just many widely used editors, such as [[Vim (text editor)|Vim]] and [[Emacs]], but also [[integrated development environment|IDEs]] (e.g. Juno, and Microsoft's [[Visual Studio Code]], with [[Plug-in (computing)|extensions]] adding Julia support, both providing debugging support); with integrated tools, e.g. a [[lint (software)|linter]],<ref>{{Cite web|url=https://discourse.julialang.org/t/ann-linter-julia-plugin-for-atom-juno/2118|title=ANN: linter-julia plugin for Atom / Juno|date=2017-02-15|website=JuliaLang|language=en|access-date=2019-04-10}}</ref> [[profiling (computer programming)|profiler]] (and flame graph support available<ref>{{Citation|last=Holy|first=Tim|title=GitHub - timholy/ProfileView.jl: Visualization of Julia profiling data.|date=2019-09-13|url=https://github.com/timholy/ProfileView.jl|access-date=2019-09-22}}</ref><ref>{{Citation|last=Gregg|first=Brendan|title=GitHub - brendangregg/FlameGraph: Stack trace visualizer.|date=2019-09-20|url=https://github.com/brendangregg/FlameGraph|access-date=2019-09-22}}</ref> for the built-in one), debugger,<ref>{{Cite web|url=https://julialang.org/blog/2019/03/debuggers|title=A Julia interpreter and debugger|website=julialang.org|access-date=2019-04-10}}</ref> and the Rebugger.jl package \"supports [[interactive programming|repeated-execution debugging]]\"{{Efn|<!--quote= --> [With Rebugger.jl] you can:\n* test different modifications to the code or arguments as many times as you want; you are never forced to exit \u201cdebug mode\u201d and save your file\n* run the same chosen block of code repeatedly (perhaps trying out different ways of fixing a bug) without needing to repeat any of the \u201csetup\u201d work that might have been necessary to get to some deeply nested method in the original call stack.<ref name=\"Rebugger\">{{Cite web|url=https://discourse.julialang.org/t/ann-rebugger-interactive-debugging-for-julia-0-7-1-0/13843|title=[ANN] Rebugger: interactive debugging for Julia 0.7/1.0|quote=<!--Better in the \"Efn\" footnote above?-->\n|date=2018-08-21|website=JuliaLang|language=en|access-date=2019-04-10}}</ref>}} and more.<ref>{{Cite web|url=https://timholy.github.io/Rebugger.jl/dev/|title=Home \u00b7 Rebugger.jl|website=timholy.github.io|access-date=2019-04-10}}</ref>\n\n==History==\nWork on Julia was started in 2009, by Jeff Bezanson, [[Stefan Karpinski]], [[Viral B. Shah]], and [[Alan Edelman]], who set out to create a free language that was both high-level and fast. On 14 February 2012, the team launched a website with a blog post explaining the language's mission.<ref>{{cite web|last1=Jeff Bezanson, Stefan Karpinski, Viral Shah, Alan Edelman|title=Why We Created Julia|url=https://julialang.org/blog/2012/02/why-we-created-julia|website=JuliaLang.org|accessdate=5 June 2017}}</ref>  In an interview with InfoWorld in April 2012, Karpinski said of the name \"Julia\": \"There's no good reason, really. It just seemed like a pretty name.\"<ref>[[Stefan Karpinski]], [https://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html New Julia language seeks to be the C for scientists], [[InfoWorld]], 18 April 2012</ref> Bezanson said he chose the name on the recommendation of a friend.<ref>{{cite web |last1=Torre |first1=Charles |title=Stefan Karpinski and Jeff Bezanson on Julia |url=https://channel9.msdn.com/Blogs/Charles/Stefan-Karpinski-and-Jeff-Bezanson-Julia-Programming-Language |website=Channel 9 |publisher=MSDN |accessdate=4 December 2018}}</ref>\n\nSince the 2012 launch, the Julia community has grown, with over 13,000,000 downloads {{as of|2020|03|lc=y}} (and is used at more than 1,500 universities),<ref>{{Cite web|url=https://juliacomputing.com/|title=Julia Computing|website=juliacomputing.com||access-date=2020-04-05}}</ref><ref>{{Cite web|url=https://juliacomputing.com/blog/2019/11/07/november-newsletter.html|title=Newsletter November 2019|date=2019-11-07|website=juliacomputing.com|access-date=2019-11-29}}</ref><ref>{{Cite web|url=https://juliacomputing.com/blog/2019/01/04/january-newsletter.html |title=Julia Computing Newsletter, Growth Metrics|website=juliacomputing.com|access-date=2019-02-11}}</ref> The Official Julia Docker images, at [[Docker, Inc.|Docker Hub]], have seen over 4,000,000 downloads as of January 2019.<ref>{{Cite web|url=https://juliacomputing.com/blog/2019/01/04/january-newsletter.html|title=Newsletter January 2019|website=juliacomputing.com|date=4 January 2019|access-date=2019-08-20}}</ref><ref>https://hub.docker.com/_/julia</ref> The JuliaCon<ref>{{cite web|url=http://juliacon.org/ |title=JuliaCon website |website=juliacon.org |accessdate=2018-05-10}}</ref> [[academic conference]] for Julia users and developers has been held annually since 2014.\n\nVersion 0.3 was released in August 2014, version 0.4 in October 2015, version 0.5 in October 2016,<ref>[https://julialang.org/blog/ The Julia Blog]</ref> and version 0.6 in June 2017.<ref>https://julialang.org/blog/2017/06/julia-0.6-release</ref>  Both Julia 0.7 (a useful release for testing packages, and for knowing how to upgrade them for 1.0<ref>{{Cite web|url=https://discourse.julialang.org/t/what-is-julia-0-7-how-does-it-relate-to-1-0/9994|title=What is Julia 0.7? How does it relate to 1.0?|website=JuliaLang|language=en|access-date=2018-10-17}}</ref>) and version 1.0 were released on 8 August 2018. Work on Julia 0.7 was a \"huge undertaking\" (e.g., because of \"entirely new optimizer\"), and some changes were made to semantics, e.g. the [[iteration]] interface was simplified;<ref>{{Cite web|url=https://julialang.org/blog/2018/07/iterators-in-julia-0.7 |title=Writing Iterators in Julia 0.7 |authors=Eric Davies |website=julialang.org |access-date=2018-08-05}}</ref> and the syntax changed a little (with the syntax now stable, and same for 1.x and 0.7).\n\nThe release candidate for Julia 1.0 (Julia 1.0.0-rc1) was released on 7 August 2018, and the final version a day later (and by now, Julia 1.0.x are the oldest versions still supported, having [[long-term support]]; for at least a year). Julia 1.1 was released in January 2019 with, e.g., a new \"exception stack\" language feature. Bugfix releases are expected roughly monthly, for 1.4.x and 1.0.x and Julia 1.0.1 up to 1.0.5 have followed that schedule. Julia 1.2 was released in August 2019, and it has e.g. some built-in support for web browsers (for testing if running in [[JavaScript]] VM),<ref>{{Cite web|title=Sys.isjsvm([os])|date=2019-08-20|url=https://github.com/JuliaLang/julia/blob/75c10e435b2b9c947422ad38fa0b020595d3f747/base/sysinfo.jl#L401|quote=Predicate for testing if Julia is running in a JavaScript VM (JSVM), including e.g. a WebAssembly JavaScript embedding in a web browser.|publisher=The Julia Language|access-date=2019-08-20}}</ref> and Julia 1.4 in March 2020 (and with it Julia 1.3.x, 1.2.x and Julia 1.1.x releases are no longer maintained). Julia 1.3 added e.g. composable multi-threaded parallelism and a binary artifacts system for Julia packages.<ref>{{Cite web|url=https://julialang.org/blog/2019/11/artifacts|title=The Julia Language|others=Jeff Bezanson, Stefan Karpinski, Viral Shah, Alan Edelman, et al <!--|others=et al |authors5=et al-->|website=julialang.org|access-date=2019-12-13}}</ref> JuliaPro version 1.4.0-1 is also out.<ref>{{Cite web|url=https://juliacomputing.com/|title=Julia Computing|website=juliacomputing.com|access-date=2020-04-05}}</ref>\n\nMost packages that work in Julia 1.0.x also work in 1.1.x or newer, enabled by the [[forward compatibility|forward compatible]] syntax guarantee. A major exception was, for interacting with non-Julia code, the JavaCall.jl package (however calling other languages, e.g. [[R (programming language)|R language]] works, with the package for R fixed<ref>{{Cite web|url=https://github.com/JuliaInterop/RCall.jl/pull/293|title=Fix for C stack checking issues on 1.1 by simonbyrne \u00b7 Pull Request #293 \u00b7 JuliaInterop/RCall.jl|website=GitHub|language=en|access-date=2019-08-10}}</ref>) to call Java, Scala etc. This was fixed by Java 11,<ref>{{Cite web|url=https://github.com/JuliaInterop/JavaCall.jl/issues/96#issuecomment-534178269|title=StackOverflowError in `JavaCall.init` for Julia 1.1.0 \u00b7 Issue #96 \u00b7 JuliaInterop/JavaCall.jl|website=GitHub|language=en|access-date=2019-10-21}}</ref> or alternatively to use those languages with Julia (on older JVM), for e.g. [[Java Database Connectivity|JDBC]].jl or [[Apache Spark]] (through Spark.jl), users could choose to stay with the LTS version of Julia.<ref>{{Cite web|url=https://github.com/JuliaLang/julia/issues/31104|title=JVM fails to load in 1.1 (JavaCall.jl) \u00b7 Issue #31104 \u00b7 JuliaLang/julia|quote=JeffBezanson modified the milestones: 1.3, 1.4|website=GitHub|language=en|access-date=2019-08-18}}</ref> <!--A milestone was set for a fix in Julia 1.4 (while there's already a workaround in Julia 1.3.0<ref>{{Cite web|url=https://github.com/JuliaLang/julia/commit/ae4e08c5581a077ea269a9bd5a351082104f6daf|title=add environment variable `JULIA_ALWAYS_COPY_STACKS` (#32885) \u00b7 JuliaLang/julia@ae4e08c|website=GitHub|language=en|access-date=2019-08-18}}</ref>), to support older Java, which has-->  Julia 1.4 had a milestone set for 15 December 2019 and for Julia 1.5 the due date is 15 April 2020. Milestones for Julia 2.0 (and later, e.g. 3.0) currently have no set due dates.<ref>{{Cite web|title=Milestones - JuliaLang/julia|url=https://github.com/JuliaLang/julia/milestones|publisher=The Julia Language|access-date=2019-12-13}}</ref>\n\n===Notable uses===\nJulia has attracted some high-profile users, from investment manager [[BlackRock]], which uses it for [[time-series analytics]], to the British insurer [[Aviva]], which uses it for [[risk calculations]]. In 2015, the [[Federal Reserve Bank of New York]] used Julia to make models of the US economy, noting that the language made model estimation \"about 10 times faster\" than its previous [[MATLAB]] implementation. Julia's co-founders established Julia Computing in 2015 to provide paid support, training, and consulting services to clients, though Julia itself remains free to use. At the 2017 JuliaCon<ref>{{cite web|url=http://juliacon.org/2017/ |title=JuliaCon 2017 |website=juliacon.org |accessdate=2017-06-04}}</ref> conference, Jeffrey Regier, [[Keno Fischer]] and others announced<ref>{{cite web|last1=Fisher|first1=Keno|title=The Celeste Project|url=https://juliacon2017.sched.com/speaker/thecelesteproject|website=juliacon.org|accessdate=24 June 2017}}</ref> that the Celeste project<ref>{{cite arxiv|last1=Regier|first1=Jeffrey|last2=Pamnany|first2=Kiran|last3=Giordano|first3=Ryan|last4=Thomas|first4=Rollin|last5=Schlegel|first5=David|last6=McAulife|first6=Jon|last7=Prabat|title=Learning an Astronomical Catalog of the Visible Universe through Scalable Bayesian Inference|eprint=1611.03404|class=cs.DC|year=2016}}</ref> used Julia to achieve \"peak performance of 1.54&nbsp;[[FLOPS|petaFLOPS]] using 1.3 million threads\"<ref>{{cite press |url=https://juliacomputing.com/press/2017/09/12/julia-joins-petaflop-club.html |title=Julia Joins Petaflop Club |date=12 September 2017 | first=Andrew |last=Claster |work=Julia Computing |quote=Celeste is written entirely in Julia, and the Celeste team loaded an aggregate of 178 terabytes of image data to produce the most accurate catalog of 188 million [[astronomical object]]s in just 14.6 minutes [..] a performance improvement of 1,000x in single-threaded execution.}}</ref> on 9300 <!-- on 9,300 (vs. 8192 Xeon cores\") possibly \"optional nVidia\" GPU cards of Cori are used (or not), unclear conflated with lower numbers? --> [[Knights Landing (microarchitecture)|Knights Landing]] (KNL) nodes of the [[Cray XC40#United States|Cori II (Cray XC40)]] supercomputer (then 6th fastest computer in the world).<ref>{{Cite web|url=https://twitter.com/Viral_B_Shah/status/930928375400751105|title=. @KenoFischer is speaking on Celeste in the @Intel theatre at @Supercomputing. 0.65M cores, 56 TB of data, Cori - world's 6th largest supecomputer.pic.twitter.com/21nLHo1qty|last=Shah|first=Viral B.|date=2017-11-15|website=@Viral_B_Shah|language=en|access-date=2019-09-15}}</ref> Julia thus joins C, C++, and Fortran as high-level languages in which petaFLOPS computations have been achieved.\n\nThree of the Julia co-creators are the recipients of the 2019 [[J. H. Wilkinson Prize for Numerical Software|James H. Wilkinson Prize for Numerical Software]] (awarded every four years) \"for the creation of Julia, an innovative environment for the creation of high-performance tools that enable the analysis and solution of computational science problems.\"<ref>{{Cite web|url=https://news.mit.edu/2018/julia-language-co-creators-win-james-wilkinson-prize-numerical-software-1226|title=Julia language co-creators win James H. Wilkinson Prize for Numerical Software|website=MIT News|access-date=2019-01-22}}</ref>  Also, Alan Edelman, professor of applied mathematics at MIT, has been selected to receive the 2019 IEEE Computer Society Sidney Fernbach Award \"for outstanding breakthroughs in high-performance computing, linear algebra, and computational science and for contributions to the Julia programming language.\"<ref>{{Cite press|url=https://www.computer.org/press-room/2019-news/2019-ieee-fernbach-award-edelman|title=Alan Edelman of MIT Recognized with Prestigious 2019 IEEE Computer Society Sidney Fernbach Award {{!}} IEEE Computer Society|language=en-US|date=1 October 2019|access-date=2019-10-09}}</ref>\n\nJulia Computing and [[NVIDIA]] announce \"the availability of the Julia programming language as a pre-packaged container on the NVIDIA GPU Cloud (NGC) container registry\"<ref name=\"Julia_Nvidia\">{{Cite web|url=https://juliacomputing.com/blog/2019/12/03/nvidia-ngc-arm.html|title=Julia Computing and NVIDIA Bring Julia GPU Computing to Arm|date=2019-12-03|website=juliacomputing.com|access-date=2019-12-03}}</ref> with NVIDIA stating \"Easily Deploy Julia on x86 and Arm [..] Julia offers a package for a comprehensive HPC ecosystem covering machine learning, data science, various scientific domains and visualization.\"<ref>{{Cite web|url=https://blogs.nvidia.com/blog/2019/11/18/ngc-containers-arm/|title=NVIDIA Expands Support for Arm with HPC, AI, Visualization Containers on NGC {{!}} NVIDIA Blog|last=Patel|first=Chintan|date=2019-11-19|website=The Official NVIDIA Blog|language=en-US|access-date=2019-12-03}}</ref>\n\nAdditionally, \"Julia was selected by the [https://clima.caltech.edu/ Climate Modeling Alliance] as the sole implementation language for their next generation global climate model. This multi-million dollar project aims to build an earth-scale climate model providing insight into the effects and challenges of climate change.\"<ref name=\"Julia_Nvidia\"/>\n\n===Sponsors===\nJulia has received contributions from over 870 developers worldwide.<ref>{{Cite web|title=JuliaLang/julia: The Julia Language: A fresh approach to technical computing.|date=2019-01-26|url=https://github.com/JuliaLang/julia|publisher=The Julia Language|access-date=2019-01-26}}</ref> Dr. Jeremy Kepner at [[MIT Lincoln Laboratory]] was the founding sponsor of the Julia project in its early days. In addition, funds from the [[Gordon and Betty Moore Foundation]], the [[Alfred P. Sloan Foundation]], [[Intel]], and agencies such as [[National Science Foundation|NSF]], [[DARPA]], [[National Institutes of Health|NIH]], [[NASA]], and [[Federal Aviation Administration|FAA]] have been essential to the development of Julia.<ref>{{Cite web|url=https://julialang.org/research/|title=The Julia Language|website=julialang.org|access-date=2019-09-22}}</ref> In addition [[Mozilla]], the maker of Firefox web browser, with its research grants for H1 2019, sponsored \"a member of the official Julia team\" for the project \"Bringing Julia to the Browser\",<ref>{{Cite web|url=https://www.zdnet.com/article/mozilla-is-funding-a-way-to-support-julia-in-firefox/|title=Mozilla is funding a way to support Julia in Firefox|last=Cimpanu|first=Catalin|website=ZDNet|language=en|access-date=2019-09-22}}</ref> meaning to Firefox <!-- \"and the general browser environment--> and other web browsers.<ref>{{Cite web|url=https://alpha.iodide.io/notebooks/225/|title=Julia in Iodide|website=alpha.iodide.io|access-date=2019-09-22}}</ref><ref>{{Cite web|url=https://iodide-project.github.io/docs/language_plugins/|title=Language plugins - Iodide Documentation|website=iodide-project.github.io|access-date=2019-09-22}}</ref><ref>{{Cite web|url=https://mozilla-research.forms.fm/mozilla-research-grants-2019h1/forms/6510|title=Mozilla Research Grants 2019H1|website=Mozilla|language=en|quote=running language interpreters in WebAssembly. To further increase access to leading data science tools, we\u2019re looking for someone to port R or Julia to WebAssembly and to attempt to provide a level 3 language plugin for Iodide: automatic conversion of data basic types between R/Julia and Javascript, and the ability to share class instances between R/Julia and Javascript.|access-date=2019-09-22}}</ref><ref>{{Citation|title=Literate scientific computing and communication for the web: iodide-project/iodide|date=2019-09-20|url=https://github.com/iodide-project/iodide|publisher=iodide|quote=We envision a future workflow that allows you to do your data munging in Python, fit a quick model in R or JAGS, solve some differential equations in Julia, and then display your results with a live interactive d3+JavaScript visualization... and all that within within a single, portable, sharable, and hackable file.|access-date=2019-09-22}}</ref>\n\n===Julia Computing===\nJulia Computing, Inc. was founded in 2015 by [[Viral B. Shah]], Deepak Vinchhi, [[Alan Edelman]], Jeff Bezanson, [[Stefan Karpinski]] and Keno Fischer.<ref>{{Cite web|url=https://juliacomputing.com/about-us|title=About Us \u2013 Julia Computing|website=juliacomputing.com|access-date=2017-09-12}}</ref>\n\nIn June 2017, Julia Computing raised $4.6M in seed funding from [[General Catalyst]] and [[Founder Collective]].<ref>https://juliacomputing.com/communication/2017/06/19/seed-funding.html</ref>\n\n==Language features==\nThough designed for numerical computing, Julia is a [[general-purpose programming language]].<ref>{{cite web\n  | title      = The Julia Language\n  | type       = official website\n  | url        = https://julialang.org/\n  | quote      = General Purpose [..] Julia lets you write UIs, statically compile your code, or even deploy it on a webserver.\n}}</ref>\nIt is also useful for low-level [[system programming|systems programming]],<ref name=\"LowLevelSystemsProgrammingInJulia\">{{cite web |url=http://juliacon.org/2018/talks_workshops/42/\n|archiveurl=https://web.archive.org/web/20181105083419/http://juliacon.org/2018/talks_workshops/42/\n|archivedate=5 November 2018\n|first=Todd |last=Green\n|title=Low-Level Systems Programming in High-Level Julia\n|date=10 August 2018\n|accessdate=5 November 2018\n}}</ref> as a [[specification language]],<ref name=\"spec\">{{cite web |url=http://juliacon.org/talks.html#friday\n|archiveurl=https://web.archive.org/web/20150701182804/http://juliacon.org/talks.html\n|archivedate=1 July 2015\n|first=Robert |last=Moss\n|title=Using Julia as a Specification Language for the Next-Generation Airborne Collision Avoidance System\n|quote=[[Airborne collision avoidance system]]\n|date=26 June 2015\n|accessdate=29 June 2015\n}}</ref> and for web programming at both server<ref>{{Cite web|url=https://medium.com/@richardanaya/how-to-create-a-multi-threaded-http-server-in-julia-ca12dca09c35|title=How to create a multi-threaded HTTP server in Julia|last=Anaya|first=Richard|date=2019-04-28|website=Medium|language=en|access-date=2019-07-25|quote=In summary, even though Julia lacks a multi-threaded server solution currently out of box, we can easily take advantage of its process distribution features and a highly popular load balancing tech to get full CPU utilization for HTTP handling.}}</ref><ref>{{Cite web|last=Anthoff|first=David|title=Node.js installation for julia|date=2019-06-01|url=https://github.com/davidanthoff/NodeJS.jl|access-date=2019-07-25}}</ref><!--<ref name=\"node-js\">{{cite web|url=https://node-julia.readme.io/|title=Getting Started with Node Julia \u00b7 Node Julia|date=|website=Node-julia.readme.io|accessdate=2017-05-31}}</ref> --> and client<ref name=\"JSExpr\"/><ref name=\"WebAssembly\"/> side.\n\nAccording to the official website, the main features of the language are:\n\n* [[Multiple dispatch]]: providing ability to define function behavior across many combinations of argument types\n* [[Dynamic type]] system: types for documentation, optimization, and dispatch\n* Good performance, approaching that of [[Type system|statically-typed]] languages like C\n* A built-in [[package manager]]\n* [[Lisp (programming language)|Lisp]]-like macros and other [[metaprogramming]] facilities\n* Call [[Python (programming language)|Python]] functions: use the PyCall package{{Efn|For calling the newer [[Python 3]] (the older default to call Python 2, is also still supported)<ref>{{cite web |url=https://github.com/JuliaPy/PyCall.jl |title=PyCall.jl |work=stevengj |publisher=github.com}}</ref><ref>{{cite newsgroup |url=https://groups.google.com/forum/#!topic/julia-users/lDM7-YXT2LU |title=Using PyCall in julia on Ubuntu with python3 |work=julia-users at Google Groups|quote=to import modules (e.g., python3-numpy)}}</ref> <!--([[PyPy]] and e.g. [[PHP]] was/is supported<ref name=\"Polyglot\">{{cite web|url=https://gitlab.com/wavexx/Polyglot.jl|title=wavexx / Polyglot.jl|website=GitLab|language=en|access-date=2019-07-25}}</ref> for Julia 0.5 (PyPy should work; supported by python-bond that Polyglot.jl is based on); [[Jython]] support is not confirmed, but since JavaCall.jl allows calling Java (and thus Scala) I assume also Jython.)--> and calling in the other direction, from Python to Julia, is also supported with ''pyjulia''.<ref>{{cite web |url=https://github.com/JuliaPy/pyjulia |title=python interface to julia}}</ref> \n<!--\nIt is not like Polyglot. jl does not support this for older Julia (and also interesting project to support other languages, e.g., PHP), but it has not been upgraded for Julia 1.0: Even calling [[recursive]]ly (back and forth) between these languages is possible, without (or with) using ''Polyglot.jl'',<ref name=\"Polyglot\"/> that supports additional languages to Python. \n-->\n\n}}\n* Call [[C (programming language)|C]] functions directly: no wrappers or special [[application programming interface|APIs]]\n* Powerful [[shell (computing)|shell]]-like abilities to manage other processes\n* Designed for [[Parallel computing|parallel]] and [[distributed computing]]\n* [[Coroutine|Coroutines]]: lightweight [[Green threads|''green'' threading]]\n* User-defined types are as fast and compact as built-ins\n* Automatic generation of efficient, specialized code for different argument types\n* Elegant and extensible conversions and promotions for numeric and other types\n* Efficient support for [[Unicode]], including but not limited to [[UTF-8]]\n<!-- |source=JuliaLang.org}} Only part missing it the MIT part, that is better explained elsewhere.-->\n\nMultiple dispatch (also termed [[multimethod]]s in Lisp) is a [[generalization]] of [[single dispatch]]{{snd}} the [[Polymorphism (computer science)|polymorphic mechanism]] used in common [[object-oriented programming]] (OOP) languages{{snd}} that uses [[Inheritance (object-oriented programming)|inheritance]]. In Julia, all concrete types are [[subtyping|subtypes]] of abstract types, directly or indirectly subtypes of the ''Any'' type, which is the top of the type hierarchy. Concrete types can not themselves be subtyped the way they can in other languages; composition is used instead (see also [[Inheritance (object-oriented programming)#Inheritance vs subtyping|inheritance vs subtyping]]).\n\nJulia draws significant inspiration from various dialects of Lisp<!-- Karpinski: \"In short, I would describe it as a Lisp with Matlab-like syntax\" https://www.reddit.com/r/programming/comments/pv3k9/why_we_created_julia_a_new_programming_language/ -->, including [[Scheme (programming language)|Scheme]] and [[Common Lisp]], and it shares many features with [[Dylan (programming language)|Dylan]], also a multiple-dispatch-oriented dynamic language (which features an [[ALGOL]]-like [[Free-form language|free-form]] [[Infix notation|infix]] syntax rather than a Lisp-like prefix syntax, while in Julia \"everything\"<ref name=\"Learn Julia in Y\">{{cite web|url=https://learnxinyminutes.com/docs/julia/ |title=Learn Julia in Y Minutes |website=Learnxinyminutes.com |date= |accessdate=2017-05-31}}</ref> is an [[Expression (computer science)|expression]]), and with [[Fortress (programming language)|Fortress]], another numerical programming language (which features multiple dispatch and a sophisticated parametric type system). While [[Common Lisp Object System]] (CLOS) adds multiple dispatch to Common Lisp, not all functions are generic functions.\n\nIn Julia, Dylan, and Fortress extensibility is the default, and the system's built-in functions are all generic and extensible. In Dylan, multiple dispatch is as fundamental as it is in Julia: all user-defined functions and even basic built-in operations like <code>+</code> are generic. Dylan's type system, however, does not fully support parametric types, which are more typical of the [[Generational list of programming languages#ML based|ML lineage of languages]]. By default, CLOS does not allow for dispatch on Common Lisp's parametric types; such extended dispatch semantics can only be added as an extension through the [[Common Lisp Object System#Metaobject Protocol|CLOS Metaobject Protocol]]. By convergent design, Fortress also features multiple dispatch on parametric types; unlike Julia, however, Fortress is statically rather than dynamically typed, with separate compiling and executing phases. The language features are summarized in the following table:\n\n{| class=\"wikitable\"\n|-\n! [[Programming language|Language]] !! [[Type system]] !! [[Generic function]]s !! [[Parametric polymorphism|Parametric types]]\n|-\n| Julia || Dynamic || Default || Yes\n|-\n| [[Common Lisp]] || Dynamic || Opt-in || Yes (but no dispatch)\n|-\n| [[Dylan (programming language)|Dylan]] || Dynamic || Default || Partial (no dispatch)\n|-\n| [[Fortress (programming language)|Fortress]] || Static || Default || Yes\n|}\n\nBy default, the Julia runtime must be pre-installed as user-provided source code is run. Alternatively, a standalone [[executable]] that needs no Julia source code can be built with ''ApplicationBuilder.jl''<ref>{{Cite web|last=Daly|first=Nathan|title=GitHub - NHDaly/ApplicationBuilder.jl: Compile, bundle, and release julia software.|date=2019-02-13|url=https://github.com/NHDaly/ApplicationBuilder.jl|access-date=2019-02-15}}</ref> and ''PackageCompiler.jl''.<ref>{{cite web|title=GitHub - JuliaLang/PackageCompiler.jl: Compile your Julia Package.|date=2019-02-14|url=https://github.com/JuliaLang/PackageCompiler.jl|publisher=The Julia Language|access-date=2019-02-15}}</ref><!--\n<ref>{{cite web |url=https://github.com/dhoegh/BuildExecutable.jl |title=Build a standalone executables from a Julia script}}</ref><ref>{{cite newsgroup|url=https://groups.google.com/forum/#!topic/julia-users/MtF4wHc77sw |title=.jl to .exe |website=Groups.google.com |date= |accessdate=2017-05-31}}</ref>  -->\n\nJulia's [[Macro (computer science)#Syntactic macros|syntactic macros]] (used for [[metaprogramming]]), like Lisp macros, are more powerful than [[Macro (computer science)#Text-substitution macros|text-substitution macros]] used in the [[preprocessor]] of some other languages such as C, because they work at the level of [[abstract syntax tree]]s (ASTs). Julia's macro system is [[hygienic macro|hygienic]], but also supports deliberate capture when desired (like for [[anaphoric macro]]s) using the <code>esc</code> construct.\n\n==Interaction==\nThe Julia official distribution includes a \"full-featured interactive command-line REPL\" ([[read\u2013eval\u2013print loop]]),<ref>{{Cite web|url=https://docs.julialang.org/en/v1/stdlib/REPL/|title=The Julia REPL \u00b7 The Julia Language|website=docs.julialang.org|access-date=2019-09-22}}</ref> with a searchable history, [[tab-completion]], many helpful keybindings, and dedicated help and [[shell (computing)|shell]] modes;<ref>{{Cite web|url=https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL|title=Introducing Julia/The REPL - Wikibooks, open books for an open world|website=en.wikibooks.org|quote=you can install the Julia package OhMyREPL.jl (https://github.com/KristofferC/OhMyREPL.jl) which lets you customize the REPL's appearance and behaviour|access-date=2019-09-22}}</ref> which can be used to experiment and test code quickly.<ref>{{Cite web|url=https://docs.julialang.org/en/v1/manual/getting-started/|title=Getting Started \u00b7 The Julia Language|website=docs.julialang.org|language=en|access-date=2018-08-15}}</ref> The following fragment represents a sample session example where strings are concatenated automatically by println:<ref>See also: https://docs.julialang.org/en/v1/manual/strings/ for string interpolation and the <code>string(greet, \", \", whom, \".\\n\")</code> example for preferred ways to concatenate strings. <!--While the <code>+</code> operator is not used for string concatenation, it could easily be defined to do so.--> Julia has the println and print functions, but also a @printf macro (i.e., not in function form) to eliminate run-time overhead of formatting (unlike the same function in C).</ref>\n\n<source lang=\"jlcon\">\njulia> p(x) = 2x^2 + 1; f(x, y) = 1 + 2p(x)y\njulia> println(\"Hello world!\", \" I'm on cloud \", f(0, 4), \" as Julia supports recognizable syntax!\")\nHello world! I'm on cloud 9 as Julia supports recognizable syntax!\n</source>\n\nThe REPL gives user access to the system shell and to help mode, by pressing <code>;</code> or <code>?</code> after the prompt (preceding each command), respectively. It also keeps the history of commands, including between sessions.<ref>{{cite web|title=Julia Documentation|url=https://docs.julialang.org|website=JuliaLang.org|accessdate=18 November 2014}}</ref> Code that can be tested inside the Julia's interactive section or saved into a file with a <code>.jl</code> extension and run from the command line by typing:<ref name=\"Learn Julia in Y\"/>\n\n<source lang=\"console\">\n $ julia <filename>\n</source>\n\nJulia is supported by [[Jupyter]], an online interactive \"notebooks\" environment.<ref>{{cite web |url=https://jupyter.org/ |title=Project Jupyter}}</ref>\n\n===Use with other languages===\nJulia is in practice [[interoperability|interoperable]] with many languages. Julia's <source lang=\"julia\" inline>ccall</source> keyword is used to call C-exported or Fortran shared library functions individually.\n\nJulia has support for [[Unicode 12.1]] (support for current Unicode 13.0 has been implemented<ref>{{Cite web|url=https://github.com/JuliaStrings/utf8proc/pull/179|title=Unicode 13 support by stevengj \u00b7 Pull Request #179 \u00b7 JuliaStrings/utf8proc|website=GitHub|language=en|access-date=2020-03-29}}</ref> and will for Julia 1.5), which added only one letter since Unicode 12.0<ref>{{Cite web|url=https://github.com/JuliaLang/julia/pull/32002|title=support for Unicode 12.1.0 by stevengj \u00b7 Pull Request #32002 \u00b7 JuliaLang/julia|website=GitHub|language=en|access-date=2019-05-12}}</ref>, with [[UTF-8]] used for strings (by default) and for Julia source code (only allowing legal UTF-8 in latest version), meaning also allowing as an option common math symbols for many operators, such as \u2208 for the <code>in</code> operator.\n\nJulia has packages supporting markup languages such as [[HTML]] (and also for [[HTTP]]), [[XML]], [[JSON]] and [[BSON]], and for [[database]]s and web use in general.\n\n== Usage ==\nLibraries such as [[Flux (machine-learning framework)|Flux]] and [[Knet (machine-learning framework)|Knet]] implement complete machine-learning frameworks written completely in Julia. [[Apache MXNet]] and [[TensorFlow]] are also available through wrapper libraries. [[Turing (probabilistic programming)|Turing]] and [[Gen (probabilistic programming)|Gen]] implement general-purpose [[probabilistic programming]] languages into Julia. [[Pharmacokinetics|Pharmacokinetic]] modeling and simulations are made available through the [[Pumas (pharmaceutical modeling)|Pumas]] suite.\n\n==Implementation==\nJulia's core is implemented in Julia and [[C (programming language)|C]]<!--C99, except for 0.4 needing C11 because of static asserts-->, together with [[C++]] for the [[LLVM]] dependency. The parsing and code-lowering are implemented in FemtoLisp, a [[Scheme (programming language)|Scheme]] dialect.<ref name=\"JeffBezanson 2019\">{{cite web | author=JeffBezanson | title=JeffBezanson/femtolisp | website=GitHub | date=June 6, 2019 | url=https://github.com/JeffBezanson/femtolisp | access-date=June 16, 2019}}</ref> The LLVM compiler infrastructure project is used as the [[Compiler#Back end|back end]] for generation of [[64-bit computing|64-bit]] or [[32-bit]] optimized [[machine code]] depending on the platform Julia runs on. With some exceptions (e.g., [[PCRE]]), the [[standard library]] is implemented in Julia itself. The most notable aspect of Julia's implementation is its speed, which is often within a factor of two relative to fully optimized C code (and thus often an order of magnitude faster than Python or [[R (programming language)|R]]).<ref name=\"Julia-TR\">{{cite web\n  | format       = PDF\n  | title        = Julia: A Fast Dynamic Language for Technical Computing\n  | url          = https://julialang.org/images/julia-dynamic-2012-tr.pdf\n  | year         = 2012\n  }}</ref><ref>{{cite web\n  | title        = How To Make Python Run As Fast As Julia\n  | url          = https://www.ibm.com/developerworks/community/blogs/jfp/entry/Python_Meets_Julia_Micro_Performance?lang=en\n  | year         = 2015\n  }}</ref><ref>{{cite web\n  | title        = Basic Comparison of Python, Julia, R, Matlab and IDL\n  | url          = https://modelingguru.nasa.gov/docs/DOC-2625\n  | year         = 2015\n  }}</ref> Development of Julia began in 2009 and an [[Open-source software|open-source]] version was publicized in February 2012.<ref name=\"announcement\">{{cite web\n  | title        = Why We Created Julia\n  | date         = February 2012\n  | website      = Julia website\n  | url          = https://julialang.org/blog/2012/02/why-we-created-julia\n  | accessdate   = 7 February 2013\n  }}</ref><ref>{{cite web\n  | last         = Gibbs\n  | first        = Mark\n  | title        = Pure and Julia are cool languages worth checking out\n  | url          = https://www.networkworld.com/columnists/2013/010913-gearhead.html\n  | type         = column\n  | work         = Network World\n  | date         = 9 January 2013\n  | accessdate   = 7 February 2013\n}}</ref>\n\n===Current and future platforms===\nWhile Julia uses JIT,<!-- Viral states \"Julia no longer uses the MCJIT in LLVM\" so this link is probably misleading:\n<ref>{{cite web |url=https://github.com/JuliaLang/julia/pull/5208\n|title=Support MCJIT\n|website=Github.com\n|accessdate=26 May 2015\n}}</ref> --> Julia generates native machine code directly, before a function is first run (not [[bytecode]]s that are run on a [[virtual machine]] (VM) or translated as the bytecode is running, as with, ''e.g.'', Java; the [[JVM]] or [[Dalvik (software)|Dalvik]] in Android).\n\nJulia has four support tiers,<ref>{{cite web|url=https://julialang.org/downloads/#support-tiers|title=Julia Downloads|website=julialang.org|access-date=2019-05-17}}</ref> and currently supports all [[x86-64]] processors, that are [[64-bit computing|64-bit]] (and is more [[program optimization|optimized]] for the latest generations) and all [[IA-32]] (\"x86\") processors except for decades old ones, i.e., in [[32-bit]] mode (\"i686\", excepting CPUs from the pre-[[Pentium 4]]-era); and supports more in lower tiers, e.g., ARM has tier 2 support: Julia \"fully supports ARMv8 (AArch64) processors, and supports ARMv7 and ARMv6 (AArch32) with some caveats.\"<ref>{{cite web|title=julia/arm.md|date=2019-11-29|url=https://github.com/JuliaLang/julia/blob/master/doc/build/arm.md|publisher=The Julia Language|quote=A list of [https://github.com/JuliaLang/julia/labels/arm known issues] for ARM is available.|access-date=2019-11-29}}</ref> [[CUDA]] (i.e. Nvidia GPUs; implementing [[Parallel Thread Execution|PTX]]) has tier 1 support, with the help of an [https://github.com/JuliaGPU/CUDAnative.jl external package]. There are also additionally packages supporting other accelerators, such as Google's [[tensor processing unit|TPU]]s,<ref>{{Citation|title=Julia on TPUs|date=2019-11-26|url=https://github.com/JuliaTPU/XLA.jl|publisher=JuliaTPU|access-date=2019-11-29}}</ref> and AMD's GPUs also have support with e.g. [[OpenCL]]. Julia's downloads page provides [[executable]]s (and source) for all the officially supported platforms.\n\nOn some platforms, Julia may need to be compiled from [[source code]] (e.g., the original [[Raspberry Pi]]), with specific build options. Julia has been \"successfully built\" <!--on the following ARMv8 devices:\n\n* [https://www.nvidia.com/object/embedded-systems-dev-kits-modules.html nVidia Jetson TX1 & TX2];\n* [https://www.apm.com/products/data-center/x-gene-family/x-gene/ X-Gene 1];\n* [https://softiron.com/products/overdrive-3000/ Overdrive 3000];\n* [https://www.cavium.com/ThunderX_ARM_Processors.html Cavium ThunderX]-->\non several ARM platforms, up to, e.g., \"ARMv8 Data Center & Cloud Processors\", such as [https://www.cavium.com/ThunderX_ARM_Processors.html Cavium ThunderX] (first ARM with 48 cores). PowerPC (64-bit) has tier 3 support meaning \"may or may not build\".\n<!--\n Support for ARM, [[AArch64]], and [[Power Architecture|POWER8]] (little-endian) has been added recently as of 0.5.1 is available too.<ref>{{cite web|author= |url=https://github.com/JuliaLang/julia/blob/v0.5.2/README.md |title=julia/README.md at v0.5.2 \u00b7 JuliaLang/julia \u00b7 GitHub |website=Github.com |date=2017-05-03 |accessdate=2017-05-31}}</ref>\n\nand in 0.5.x:\n\n\"work in progress\" text dropped with (not yet backported (possibly the text, only docs left behind?) to 0.6.x): https://github.com/JuliaLang/julia/commit/dcffef03594779402bb5c2666fbcf24b4438adba#diff-8b8b297c5626992d7377a6bbb3aadceb\n\n\"only supports ARMv7\" text dropped on master (may apply on older, meaning possibly only for ARMv6?:\n\n\"[[Nightly build]]s are available for ARMv7-A. [..] Note that OpenBLAS only supports ARMv7. For older ARM variants, using the reference BLAS may be the simplest thing to do. [..] Note: These [Raspberry Pi] chips use ARMv6, which is not well supported at the moment. However it is possible to get a working Julia build. [e.g., supported] [[Tegra#Tegra P1|nVidia Jetson TX2]] [with] CUDA functionality\"<ref>{{cite web|author=JuliaLang |url=https://github.com/JuliaLang/julia/blob/v0.6.2/README.arm.md |title=julia/README.arm.md at v0.5.2 \u00b7 JuliaLang/julia \u00b7 GitHub |publisher=Github.com |date= |accessdate=2017-05-31}}</ref>\n\nThe [[Raspberry Pi]] support also includes limited support for [[Raspberry Pi]] 1 (since it has [[ARMv6]]),<ref>{{cite web |url=https://github.com/JuliaLang/julia/issues/10488\n|title=Cross-compiling for ARMv6\n|quote=I believe #10917 should fix this. The CPU used there <code>arm1176jzf-s</code>. Please reopen if it does not.\n|accessdate=16 May 2015}}\n</ref><ref>\n{{cite web |url=https://github.com/JuliaLang/julia/issues/10235\n|title=ARM build failing during bootstrap on Raspberry Pi 2\n|quote=I can confirm (FINALLY) that it works on the Raspberry Pi 2 [..] I guess we can announce alpha support for arm in 0.4 as well. |accessdate=16 May 2015}}</ref>\n\n-->\nJulia is now supported in [[Raspbian]]<ref>{{cite web |url=https://julialang.org/blog/2017/05/raspberry-pi-julia |title=Julia available in Raspbian on the Raspberry Pi |quote=Julia works on all the Pi variants, we recommend using the Pi 3.}}</ref> while support is better for newer Pis, e.g. those with ARMv7 or newer; the Julia support is promoted by the [[Raspberry Pi Foundation]].<ref>{{cite web |url=https://www.raspberrypi.org/blog/julia-language-raspberry-pi/ |title=Julia language for Raspberry Pi |work=[[Raspberry Pi Foundation]]}}</ref> There's also support for web browsers/[[JavaScript]] through JSExpr.jl;<ref name=\"JSExpr\">{{Cite web|title=Translate Julia to JavaScript |date=2019-07-07|url=https://github.com/JuliaGizmos/JSExpr.jl|publisher=JuliaGizmos|access-date=2019-07-25}}</ref> and the alternative language of web browsers, [[WebAssembly]], has support<ref name=\"WebAssembly\">{{Cite web|last=Fischer|first=Keno|title=Running julia on wasm|date=2019-07-22|url=https://github.com/Keno/julia-wasm|access-date=2019-07-25}}</ref> through minimal support in Julia itself, that supports several upcoming external Julia projects.\n<!--\nJulia supports [[64-bit computing|64-bit]] [[ARM architecture|ARM]] and [[PowerPC]] and \"fully supports [[ARMv8]] ([[AArch64]]) processors, and supports ARMv7 and ARMv6 (AArch32) with some caveats\"<ref>https://github.com/JuliaLang/julia/blob/master/README.arm.md</ref><ref>https://github.com/JuliaLang/julia/issues/10791#issuecomment-91735439</ref> and [[PowerPC]] being worked on, with almost no open specific issues,<ref>https://github.com/JuliaLang/julia/labels/Power</ref><ref>{{cite web |url=https://groups.google.com/forum/#!topic/julia-dev/BYVCyUlNR8c |title=Porting Julia to PowerPC |quote=Wow, the latest git allows me to build to completion. |accessdate=9 May 2015}}</ref> with [[Executable|binaries]] available for [[POWER7]] (\"due to some small support from [[IBM]]\") and [[POWER8]], that are expected to have official beta support as of 0.5 (at least for non-parallel support).<ref>{{cite web |url=https://groups.google.com/forum/#!topic/julia-users/xB0k7XMBNqM |title=IBM Power port |quote=I am hoping we can have beta support from the 0.5 release onwards for sequential julia. We were able to do this work due to some small support from IBM.}}</ref>\n-->\n<!--\nSupport for [[GNU/kFreeBSD]] and [[GNU Hurd]] is being worked on (in JuliaLang's [[C mathematical functions#libm|openlibm]] dependency project).<ref>{{cite web|url=https://github.com/JuliaLang/openlibm/pull/129 |title=Fix building tests on GNU/kFreeBSD and GNU/Hurd by ginggs \u00b7 Pull Request #129 \u00b7 JuliaLang/openlibm |website=Github.com |date= |accessdate=2017-05-31}}</ref>\nYes, openlibm, is not Julia, but is a dependency of it-->\n<!--\nAn unofficial Julia-lite,<ref>https://github.com/ScottPJones/julia/tree/spj/lite</ref>a trimmed down fork (by now outdated) is a available. Officially Julia has been dropping dependencies and features from the standard library, to make GPL-free (one left), so it's also the official plan.\n-->\nJulia can compile to ARM; thus in theory [[Android app]]s can be made, but for now only Julia itself (and most packages) has been made to run under [[Android (operating system)|Android]] indirectly, i.e. in Ubuntu on Android.<ref>{{Cite web|url=https://discourse.julialang.org/t/using-julia-on-android/8086/7|title=Using Julia on Android?|date=2019-09-27|website=JuliaLang|language=en-US|access-date=2019-10-02}}</ref>\n\n==See also==\n* [[Comparison of numerical analysis software]]\n* [[Comparison of statistical packages]]\n\n==Notes==\n{{Notelist|80em}}\n\n==References==\n{{Reflist|30em}}\n\n==Further reading==\n* {{cite book|last=Nagar|first=Sandeep|year=2017|title=Beginning Julia Programming-For Engineers and Scientists|publisher=Springer}}\n* {{cite journal|author1=Bezanson, J|author2=Edelman, A|author3=Karpinski, S|author4=Shah, V. B|year=2017|title=Julia: A fresh approach to numerical computing|publisher=SIAM Review |volume=59 |issue=1 |pages=65\u201398}}\n* {{cite book|last=Joshi|first=Anshul|year=2016|title=Julia for Data Science \uff0d Explore the world of data science from scratch with Julia by your side|publisher=Packt Publishing}}\n\n==External links==\n{{wikibook|Introducing Julia}}\n* {{Official website|https://julialang.org}}\n* [https://github.com/JuliaLang/julia Source code]\n\n{{Programming languages}}\n{{FOSS}}\n{{Numerical analysis software}}\n{{Mathematical optimization software}}\n{{Statistical software}}\n\n[[Category:2012 software]]\n[[Category:Array programming languages]]\n[[Category:Computational notebook]]\n[[Category:Cross-platform software]]\n[[Category:Data mining and machine learning software]]\n[[Category:Data-centric programming languages]]\n[[Category:Dynamically typed programming languages]]\n[[Category:Free compilers and interpreters]]<!-- note there's also a Julia interpreter (not on by default); beside FemptoLisp-->\n[[Category:Free computer libraries]]\n[[Category:Free data analysis software]]\n[[Category:Free data visualization software]]\n[[Category:Free software projects]]\n[[Category:Free software programmed in C]]\n[[Category:Free statistical software]]\n[[Category:Functional languages]]\n[[Category:High-level programming languages]]\n[[Category:Lisp programming language_family]]\n[[Category:Multi-paradigm programming languages]]<!-- ok? Mostly only using the main paradigm multiple-dispatch, but Julia enables using more, e.g. implementing class-based OO-->\n[[Category:Numerical analysis software for Linux]]\n[[Category:Numerical analysis software for MacOS]]\n[[Category:Numerical analysis software for Windows]]\n[[Category:Numerical libraries]] <!--for Julia's standard library: seems ok, as e.g. part of (and all planned) C's libm has been rewritten in Julia-->\n[[Category:Numerical linear algebra]]\n[[Category:Numerical programming languages]]\n[[Category:Object-oriented programming languages]]\n[[Category:Parallel computing]]\n[[Category:Procedural programming languages]]\n[[Category:Programming languages]]\n[[Category:Programming languages created in 2012]]\n[[Category:Software using the MIT license]]\n<!-- [[Category:Scripting languages]] ? -->\n[[Category:Statistical programming languages]]\n[[Category:Text-oriented programming languages]]\n[[Category:Homoiconic programming languages]]\n[[Category:Articles with example Julia code]]\n[[Category:Free software programmed in Julia]] <!--Julia is written, mostly, in Julia itself-->\n", "text_old": "{{Use dmy dates|date=October 2015}}\n{{Infobox programming language\n| name = Julia\n| logo = Julia Programming Language Logo.svg\n| logo caption = \n| screenshot = <!-- filename is enough -->\n| screenshot caption = \n| paradigm = [[multi-paradigm programming language|Multi-paradigm]]: [[multiple dispatch]] (core), [[procedural programming|procedural]], [[functional programming|functional]], [[metaprogramming|meta]], [[multistaged programming|multistaged]]<ref>{{cite web |url=https://medium.com/@acidflask/smoothing-data-with-julia-s-generated-functions-c80e240e05f3#.615wk3dle |title=Smoothing data with Julia's @generated functions |quote=Julia's generated functions are closely related to the multistaged programming (MSP) paradigm popularized by Taha and Sheard, which generalizes the compile time/run time stages of program execution by allowing for multiple stages of delayed code execution. |date=5 November 2015 |accessdate=9 December 2015}}</ref>\n| released = {{Start date and age|2012}}<ref name=\"announcement\"/>\n| designer = Jeff Bezanson, [[Alan Edelman]], [[Stefan Karpinski]], [[Viral B. Shah]]\n| developer = Jeff Bezanson, [[Stefan Karpinski]], [[Viral B. Shah]], and other contributors<ref name=\"license\">{{cite web\n  | url = https://github.com/JuliaLang/julia/blob/master/LICENSE.md\n  | title = LICENSE.md\n  | publisher = [[GitHub]]\n  }}</ref><ref>{{cite web\n  | url = https://github.com/JuliaLang/julia/graphs/contributors\n  | title = Contributors to JuliaLang/julia\n  | publisher = [[GitHub]]\n  }}</ref>\n| latest release version = 1.4.0<ref>{{cite web|author= |url=https://github.com/JuliaLang/julia/releases/tag/v1.4.0 |title=v1.4.0 |website=Github.com |date=2020-03-21 |accessdate=2020-03-21}}</ref>\n| latest release date = {{Start date and age|2020|03|21|df=yes}}\n| latest preview version = <!--1.4.0-rc2<ref>{{cite web|author= |url=https://github.com/JuliaLang/julia/releases/tag/v1.4.0-rc2 |title=v1.4.0-rc2 |website=Github.com |date=2020-02-24 |accessdate=2020-02-24}}</ref>\n| latest preview date = {{Start date and age|2020|02|24|df=yes}} / --> 1.5.0-DEV with daily updates (and 1.4.1 worked on<ref>https://github.com/JuliaLang/julia/pull/35229</ref>)\n| typing = [[dynamic programming language|Dynamic]], [[nominal type system|nominative]], [[parametric polymorphism|parametric]], [[optional typing|optional]]\n| implementations = \n| dialects = \n| influenced by = {{startflatlist}}\n* [[C (programming language)|C]]<ref name=\"announcement\"/>\n* [[Lisp (programming language)|Lisp]]<ref name=\"announcement\"/><!--only the parser implemented by femtolisp, a [[Scheme (programming language)|Scheme]]-like implementation (see: \"unsupported\" \"julia --lisp\" that invokes it, but its only influence on the language/syntax \u2013 Lisp-like macros? Maybe not even Lisp's CLOS \"multimethods\"? as Dylan with \"multiple dispatch\" was cut from the list-->\n* [[Lua (programming language)|Lua]]<ref name=\"Introduction\">{{Cite web|url=https://docs.julialang.org/en/v1/|title=<!--Chapter: Introduction under --> Home \u00b7 The Julia Language|website=docs.julialang.org|language=en|access-date=2018-08-15}}</ref>\n* [[Mathematica]]<ref name=\"announcement\"/> (strictly its [[Wolfram Language]]<ref name=\"announcement\"/><ref>{{cite web |url=https://fatiherikli.github.io/programming-language-network/ |title=Programming Language Network |publisher=GitHub |accessdate=6 December 2016}}</ref>)\n* [[MATLAB]]<ref name=\"announcement\"/>\n* [[Perl]]<ref name=\"Introduction\"/>\n* [[Python (programming language)|Python]]<ref name=\"Introduction\"/>\n* [[R (programming language)|R]]<ref name=\"announcement\"/>\n* [[Ruby (programming language)|Ruby]]<ref name=\"Introduction\"/>\n* [[Scheme (programming language)|Scheme]]<ref name=\"JuliaCon2016\">{{cite web |url=http://www.juliacon.org |title=JuliaCon 2016 |publisher=JuliaCon |quote=\"He has co-designed the programming language Scheme, which has greatly influenced the design of Julia\"|accessdate=6 December 2016}}</ref>\n{{endflatlist}}\n| influenced = \n| programming language = Julia, [[C (programming language)|C]],<!--\"Remove when C11 is required for C code\" https://github.com/JuliaLang/julia/search?utf8=%E2%9C%93&q=C11&type=\n\n\"These roughly follows the c11/c++11 memory model [..] The only exception is the GC safepoint and GC state transitions [..] We use the compiler intrinsics to implement a similar API to the c11/c++11\" https://github.com/JuliaLang/julia/blob/44f3d7c921cbe50105a54258db2febb65a4b9d44/src/julia_threads.h\n--> [[C++]], [[Scheme (programming language)|Scheme]], [[LLVM]]<ref name=\"JuliaHome\">{{cite web |url=https://julialang.org/ |title=Julia |author=<!--Staff writer(s); no by-line.--> |date=<!--None listed.--> |website=Julia |publisher=[[NumFocus]] project |access-date=9 December 2016 |quote=Julia's Base library, largely written in Julia itself, also integrates mature, best-of-breed open source C and Fortran libraries for ...}}</ref>\n| platform = Tier&nbsp;1: [[x86-64]], [[IA-32]], [[CUDA]]<br> Tier&nbsp;2: [[ARM architecture|ARM]] (both 32- and 64-bit)<br> Tier&nbsp;3: [[PowerPC]]<br> Also has web browser support (for [[JavaScript]] and [[WebAssembly]])<ref name=\"WebAssembly\"/> and works in [[Android (operating system)|Android]].\n| operating system = [[Linux]], [[macOS]], [[Microsoft Windows|Windows]] and <!-- no longer just community support for --> [[FreeBSD]]\n| license = [[MIT License|MIT]] (core),<ref name=\"license\"/><!--for core language while, by default, \"the environment, which consists of the language, user interfaces, and libraries, is under the GPL\"--> [[General Public Licence|GPL v2]];<ref name=\"JuliaHome\" /><ref>{{cite newsgroup|url=https://groups.google.com/forum/#!topic/julia-users/v4OjEK7azBs |title=Non-GPL Julia? |website=Groups.google.com |date= |accessdate=2017-05-31}}</ref><!--as some few libraries used by the standard library (that can be excluded) are [[copyleft]]--> a [[makefile]] option omits GPL libraries<ref>{{cite web |url=https://github.com/JuliaLang/julia/pull/10870 |title=Introduce USE_GPL_LIBS Makefile flag to build Julia without GPL libraries |quote=Note that this commit does not remove GPL utilities such as git and busybox that are included in the Julia binary installers on Mac and Windows.<!--dropped as of 0.5 then only libgit2--> It allows building from source with no GPL library dependencies.}}</ref>\n| file ext = .jl\n| website = {{Official website|https://JuliaLang.org|name=JuliaLang.org}}\n}}\n\n'''Julia''' is a [[high-level programming language|high-level]], high-performance, dynamic [[programming language]]. While it is a general purpose language and can be used to write any application, many of its features are well-suited for high-performance [[numerical analysis]] and [[computational science]].<ref>{{cite web\n  | date       = 15 October 2012\n  | last       = Bryant\n  | first      = Avi\n  | title      = Matlab, R, and Julia: Languages for data analysis\n  | url        = https://strata.oreilly.com/2012/10/matlab-r-julia-languages-for-data-analysis.html\n  | archiveurl = https://web.archive.org/web/20140426110631/https://strata.oreilly.com/2012/10/matlab-r-julia-languages-for-data-analysis.html\n  | archivedate= 2014-04-26\n  | publisher  = O'Reilly Strata\n  }}</ref><ref>{{cite web\n  | date       = 23 August 2015\n  | last       = Singh\n  | first      = Vicky\n  | title      = Julia Programming Language \u2013 A True Python Alternative\n  | url        = https://www.technotification.com/2018/08/julia-programming-language.html\n  | publisher  = Technotification\n  }}</ref><ref>{{cite magazine\n  | last       = Krill\n  | first      = Paul\n  | title      = New Julia language seeks to be the C for scientists\n  | url        = https://www.infoworld.com/d/application-development/new-julia-language-seeks-be-the-c-scientists-190818\n  | magazine   = InfoWorld\n  | date       = 18 April 2012\n  }}</ref><ref>{{cite magazine\n  | last       = Finley\n  | first      = Klint\n  | title      = Out in the Open: Man Creates One Programming Language to Rule Them All\n  | url        = https://www.wired.com/2014/02/julia/\n  | magazine   = Wired\n  | date       = 3 February 2014\n  }}</ref>\n\nDistinctive aspects of Julia's design include a type system with [[parametric polymorphism]] in a [[dynamic programming language]]; with [[multiple dispatch]] as its core [[programming paradigm]]. Julia supports [[Concurrent computing|concurrent]], (composable) [[parallel computing|parallel]] and [[distributed computing]] (with or without using [[Message Passing Interface|MPI]]<ref>{{cite web|title=GitHub - JuliaParallel/MPI.jl: MPI wrappers for Julia.|url=https://github.com/JuliaParallel/MPI.jl|publisher=Parallel Julia|access-date=2019-09-22}}</ref> and/or the built-in corresponding<ref>{{Cite web|url=https://discourse.julialang.org/t/questions-about-getting-started-with-parallel-computing/25341/3?u=palli|title=Questions about getting started with parallel computing|date=2019-06-16|website=JuliaLang|language=en-US|access-date=2019-10-08}}</ref> to \"[[OpenMP]]-style\" threads<ref>{{Cite web|url=https://discourse.julialang.org/t/julia-and-concurrency/25556/2|title=Julia and Concurrency|date=2019-06-24|website=JuliaLang|language=en-US|access-date=2019-09-22}}</ref>), and [[foreign function interface|direct calling]] of [[C (programming language)|C]] and [[Fortran]] libraries without [[adapter pattern#gluecode|glue code]]. A [[Just-in-time compilation|just-in-time]] compiler that is referred to as \"just-[[Ahead-of-time compilation|ahead-of-time]]\"<ref>{{cite web |last1=Fischer |first1=Keno |last2=Nash |first2=Jameson |title=Growing a Compiler - Getting to Machine Learning from a General Purpose Compiler |url=https://juliacomputing.com/blog/2019/02/19/growing-a-compiler.html |website=Julia Computing Blog |accessdate=11 April 2019}}</ref> in the Julia community is used.\n\nJulia is [[garbage collection (computer science)|garbage-collected]],<ref>{{cite newsgroup|url=https://groups.google.com/forum/#!topic/julia-users/6_XvoLBzN60 |title=Suspending Garbage Collection for Performance...good idea or bad idea? |website=Groups.google.com |date= |accessdate=2017-05-31}}</ref> uses [[eager evaluation]], and includes efficient libraries for [[floating-point]] calculations, [[linear algebra]], [[random number generation]], and [[regular expression]] matching. Many libraries are available, including some (e.g., for [[fast Fourier transform]]s) that were previously bundled with Julia and are now separate.<ref>now available with <code>using [[FFTW]]</code> in current versions (That dependency, is one of many which, was moved out of the standard library to a package because it is GPL licensed, and thus is not included in Julia 1.0 by default.) {{Cite web|url=https://github.com/JuliaLang/julia/pull/21956|title=Remove the FFTW bindings from Base by ararslan \u00b7 Pull Request #21956 \u00b7 JuliaLang/julia|website=GitHub|language=en|access-date=2018-03-01}}</ref>\n\nTools available for Julia include, not just many widely used editors, such as [[Vim (text editor)|Vim]] and [[Emacs]], but also [[integrated development environment|IDEs]] (e.g. Juno, and Microsoft's [[Visual Studio Code]], with [[Plug-in (computing)|extensions]] adding Julia support, both providing debugging support); with integrated tools, e.g. a [[lint (software)|linter]],<ref>{{Cite web|url=https://discourse.julialang.org/t/ann-linter-julia-plugin-for-atom-juno/2118|title=ANN: linter-julia plugin for Atom / Juno|date=2017-02-15|website=JuliaLang|language=en|access-date=2019-04-10}}</ref> [[profiling (computer programming)|profiler]] (and flame graph support available<ref>{{Citation|last=Holy|first=Tim|title=GitHub - timholy/ProfileView.jl: Visualization of Julia profiling data.|date=2019-09-13|url=https://github.com/timholy/ProfileView.jl|access-date=2019-09-22}}</ref><ref>{{Citation|last=Gregg|first=Brendan|title=GitHub - brendangregg/FlameGraph: Stack trace visualizer.|date=2019-09-20|url=https://github.com/brendangregg/FlameGraph|access-date=2019-09-22}}</ref> for the built-in one), debugger,<ref>{{Cite web|url=https://julialang.org/blog/2019/03/debuggers|title=A Julia interpreter and debugger|website=julialang.org|access-date=2019-04-10}}</ref> and the Rebugger.jl package \"supports [[interactive programming|repeated-execution debugging]]\"{{Efn|<!--quote= --> [With Rebugger.jl] you can:\n* test different modifications to the code or arguments as many times as you want; you are never forced to exit \u201cdebug mode\u201d and save your file\n* run the same chosen block of code repeatedly (perhaps trying out different ways of fixing a bug) without needing to repeat any of the \u201csetup\u201d work that might have been necessary to get to some deeply nested method in the original call stack.<ref name=\"Rebugger\">{{Cite web|url=https://discourse.julialang.org/t/ann-rebugger-interactive-debugging-for-julia-0-7-1-0/13843|title=[ANN] Rebugger: interactive debugging for Julia 0.7/1.0|quote=<!--Better in the \"Efn\" footnote above?-->\n|date=2018-08-21|website=JuliaLang|language=en|access-date=2019-04-10}}</ref>}} and more.<ref>{{Cite web|url=https://timholy.github.io/Rebugger.jl/dev/|title=Home \u00b7 Rebugger.jl|website=timholy.github.io|access-date=2019-04-10}}</ref>\n\n==History==\nWork on Julia was started in 2009, by Jeff Bezanson, [[Stefan Karpinski]], [[Viral B. Shah]], and [[Alan Edelman]], who set out to create a free language that was both high-level and fast. On 14 February 2012, the team launched a website with a blog post explaining the language's mission.<ref>{{cite web|last1=Jeff Bezanson, Stefan Karpinski, Viral Shah, Alan Edelman|title=Why We Created Julia|url=https://julialang.org/blog/2012/02/why-we-created-julia|website=JuliaLang.org|accessdate=5 June 2017}}</ref>  In an interview with InfoWorld in April 2012, Karpinski said of the name \"Julia\": \"There's no good reason, really. It just seemed like a pretty name.\"<ref>[[Stefan Karpinski]], [https://www.infoworld.com/article/2616709/application-development/new-julia-language-seeks-to-be-the-c-for-scientists.html New Julia language seeks to be the C for scientists], [[InfoWorld]], 18 April 2012</ref> Bezanson said he chose the name on the recommendation of a friend.<ref>{{cite web |last1=Torre |first1=Charles |title=Stefan Karpinski and Jeff Bezanson on Julia |url=https://channel9.msdn.com/Blogs/Charles/Stefan-Karpinski-and-Jeff-Bezanson-Julia-Programming-Language |website=Channel 9 |publisher=MSDN |accessdate=4 December 2018}}</ref>\n\nSince the 2012 launch, the Julia community has grown, with over 13,000,000 downloads {{as of|2020|03|lc=y}} (and is used at more than 1,500 universities),<ref>{{Cite web|url=https://juliacomputing.com/|title=Julia Computing|website=juliacomputing.com||access-date=2020-04-05}}</ref><ref>{{Cite web|url=https://juliacomputing.com/blog/2019/11/07/november-newsletter.html|title=Newsletter November 2019|date=2019-11-07|website=juliacomputing.com|access-date=2019-11-29}}</ref><ref>{{Cite web|url=https://juliacomputing.com/blog/2019/01/04/january-newsletter.html |title=Julia Computing Newsletter, Growth Metrics|website=juliacomputing.com|access-date=2019-02-11}}</ref> The Official Julia Docker images, at [[Docker, Inc.|Docker Hub]], have seen over 4,000,000 downloads as of January 2019.<ref>{{Cite web|url=https://juliacomputing.com/blog/2019/01/04/january-newsletter.html|title=Newsletter January 2019|website=juliacomputing.com|date=4 January 2019|access-date=2019-08-20}}</ref><ref>https://hub.docker.com/_/julia</ref> The JuliaCon<ref>{{cite web|url=http://juliacon.org/ |title=JuliaCon website |website=juliacon.org |accessdate=2018-05-10}}</ref> [[academic conference]] for Julia users and developers has been held annually since 2014.\n\nVersion 0.3 was released in August 2014, version 0.4 in October 2015, version 0.5 in October 2016,<ref>[https://julialang.org/blog/ The Julia Blog]</ref> and version 0.6 in June 2017.<ref>https://julialang.org/blog/2017/06/julia-0.6-release</ref>  Both Julia 0.7 (a useful release for testing packages, and for knowing how to upgrade them for 1.0<ref>{{Cite web|url=https://discourse.julialang.org/t/what-is-julia-0-7-how-does-it-relate-to-1-0/9994|title=What is Julia 0.7? How does it relate to 1.0?|website=JuliaLang|language=en|access-date=2018-10-17}}</ref>) and version 1.0 were released on 8 August 2018. Work on Julia 0.7 was a \"huge undertaking\" (e.g., because of \"entirely new optimizer\"), and some changes were made to semantics, e.g. the [[iteration]] interface was simplified;<ref>{{Cite web|url=https://julialang.org/blog/2018/07/iterators-in-julia-0.7 |title=Writing Iterators in Julia 0.7 |authors=Eric Davies |website=julialang.org |access-date=2018-08-05}}</ref> and the syntax changed a little (with the syntax now stable, and same for 1.x and 0.7).\n\nThe release candidate for Julia 1.0 (Julia 1.0.0-rc1) was released on 7 August 2018, and the final version a day later (and by now, Julia 1.0.x are the oldest versions still supported, having [[long-term support]]; for at least a year). Julia 1.1 was released in January 2019 with, e.g., a new \"exception stack\" language feature. Bugfix releases are expected roughly monthly, for 1.4.x and 1.0.x and Julia 1.0.1 up to 1.0.5 have followed that schedule. Julia 1.2 was released in August 2019, and it has e.g. some built-in support for web browsers (for testing if running in [[JavaScript]] VM),<ref>{{Cite web|title=Sys.isjsvm([os])|date=2019-08-20|url=https://github.com/JuliaLang/julia/blob/75c10e435b2b9c947422ad38fa0b020595d3f747/base/sysinfo.jl#L401|quote=Predicate for testing if Julia is running in a JavaScript VM (JSVM), including e.g. a WebAssembly JavaScript embedding in a web browser.|publisher=The Julia Language|access-date=2019-08-20}}</ref> and Julia 1.3 in November 2019 (and with it Julia 1.2.x, in addition to Julia 1.1.x, releases are no longer maintained), adding e.g. composable multi-threaded parallelism and a binaray artifacts system for Julia packages.<ref>{{Cite web|url=https://julialang.org/blog/2019/11/artifacts|title=The Julia Language|others=Jeff Bezanson, Stefan Karpinski, Viral Shah, Alan Edelman, et al <!--|others=et al |authors5=et al-->|website=julialang.org|access-date=2019-12-13}}</ref> JuliaPro version 1.4.0-1 is also out.<ref>{{Cite web|url=https://juliacomputing.com/|title=Julia Computing|website=juliacomputing.com|access-date=2020-04-05}}</ref>\n\nMost packages that work in Julia 1.0.x also work in 1.1.x or newer, enabled by the [[forward compatibility|forward compatible]] syntax guarantee. A major exception was, for interacting with non-Julia code, the JavaCall.jl package (however calling other languages, e.g. [[R (programming language)|R language]] works, with the package for R fixed<ref>{{Cite web|url=https://github.com/JuliaInterop/RCall.jl/pull/293|title=Fix for C stack checking issues on 1.1 by simonbyrne \u00b7 Pull Request #293 \u00b7 JuliaInterop/RCall.jl|website=GitHub|language=en|access-date=2019-08-10}}</ref>) to call Java, Scala etc. This was fixed by Java 11,<ref>{{Cite web|url=https://github.com/JuliaInterop/JavaCall.jl/issues/96#issuecomment-534178269|title=StackOverflowError in `JavaCall.init` for Julia 1.1.0 \u00b7 Issue #96 \u00b7 JuliaInterop/JavaCall.jl|website=GitHub|language=en|access-date=2019-10-21}}</ref> or alternatively to use those languages with Julia (on older JVM), for e.g. [[Java Database Connectivity|JDBC]].jl or [[Apache Spark]] (through Spark.jl), users could choose to stay with the LTS version of Julia.<ref>{{Cite web|url=https://github.com/JuliaLang/julia/issues/31104|title=JVM fails to load in 1.1 (JavaCall.jl) \u00b7 Issue #31104 \u00b7 JuliaLang/julia|quote=JeffBezanson modified the milestones: 1.3, 1.4|website=GitHub|language=en|access-date=2019-08-18}}</ref> <!--A milestone was set for a fix in Julia 1.4 (while there's already a workaround in Julia 1.3.0<ref>{{Cite web|url=https://github.com/JuliaLang/julia/commit/ae4e08c5581a077ea269a9bd5a351082104f6daf|title=add environment variable `JULIA_ALWAYS_COPY_STACKS` (#32885) \u00b7 JuliaLang/julia@ae4e08c|website=GitHub|language=en|access-date=2019-08-18}}</ref>), to support older Java, which has-->  Julia 1.4 had a milestone set for 15 December 2019 and for Julia 1.5 the due date is 15 April 2020. Milestones for Julia 2.0 (and later, e.g. 3.0) currently have no set due dates.<ref>{{Cite web|title=Milestones - JuliaLang/julia|url=https://github.com/JuliaLang/julia/milestones|publisher=The Julia Language|access-date=2019-12-13}}</ref>\n\n===Notable uses===\nJulia has attracted some high-profile users, from investment manager [[BlackRock]], which uses it for [[time-series analytics]], to the British insurer [[Aviva]], which uses it for [[risk calculations]]. In 2015, the [[Federal Reserve Bank of New York]] used Julia to make models of the US economy, noting that the language made model estimation \"about 10 times faster\" than its previous [[MATLAB]] implementation. Julia's co-founders established Julia Computing in 2015 to provide paid support, training, and consulting services to clients, though Julia itself remains free to use. At the 2017 JuliaCon<ref>{{cite web|url=http://juliacon.org/2017/ |title=JuliaCon 2017 |website=juliacon.org |accessdate=2017-06-04}}</ref> conference, Jeffrey Regier, [[Keno Fischer]] and others announced<ref>{{cite web|last1=Fisher|first1=Keno|title=The Celeste Project|url=https://juliacon2017.sched.com/speaker/thecelesteproject|website=juliacon.org|accessdate=24 June 2017}}</ref> that the Celeste project<ref>{{cite arxiv|last1=Regier|first1=Jeffrey|last2=Pamnany|first2=Kiran|last3=Giordano|first3=Ryan|last4=Thomas|first4=Rollin|last5=Schlegel|first5=David|last6=McAulife|first6=Jon|last7=Prabat|title=Learning an Astronomical Catalog of the Visible Universe through Scalable Bayesian Inference|eprint=1611.03404|class=cs.DC|year=2016}}</ref> used Julia to achieve \"peak performance of 1.54&nbsp;[[FLOPS|petaFLOPS]] using 1.3 million threads\"<ref>{{cite press |url=https://juliacomputing.com/press/2017/09/12/julia-joins-petaflop-club.html |title=Julia Joins Petaflop Club |date=12 September 2017 | first=Andrew |last=Claster |work=Julia Computing |quote=Celeste is written entirely in Julia, and the Celeste team loaded an aggregate of 178 terabytes of image data to produce the most accurate catalog of 188 million [[astronomical object]]s in just 14.6 minutes [..] a performance improvement of 1,000x in single-threaded execution.}}</ref> on 9300 <!-- on 9,300 (vs. 8192 Xeon cores\") possibly \"optional nVidia\" GPU cards of Cori are used (or not), unclear conflated with lower numbers? --> [[Knights Landing (microarchitecture)|Knights Landing]] (KNL) nodes of the [[Cray XC40#United States|Cori II (Cray XC40)]] supercomputer (then 6th fastest computer in the world).<ref>{{Cite web|url=https://twitter.com/Viral_B_Shah/status/930928375400751105|title=. @KenoFischer is speaking on Celeste in the @Intel theatre at @Supercomputing. 0.65M cores, 56 TB of data, Cori - world's 6th largest supecomputer.pic.twitter.com/21nLHo1qty|last=Shah|first=Viral B.|date=2017-11-15|website=@Viral_B_Shah|language=en|access-date=2019-09-15}}</ref> Julia thus joins C, C++, and Fortran as high-level languages in which petaFLOPS computations have been achieved.\n\nThree of the Julia co-creators are the recipients of the 2019 [[J. H. Wilkinson Prize for Numerical Software|James H. Wilkinson Prize for Numerical Software]] (awarded every four years) \"for the creation of Julia, an innovative environment for the creation of high-performance tools that enable the analysis and solution of computational science problems.\"<ref>{{Cite web|url=https://news.mit.edu/2018/julia-language-co-creators-win-james-wilkinson-prize-numerical-software-1226|title=Julia language co-creators win James H. Wilkinson Prize for Numerical Software|website=MIT News|access-date=2019-01-22}}</ref>  Also, Alan Edelman, professor of applied mathematics at MIT, has been selected to receive the 2019 IEEE Computer Society Sidney Fernbach Award \"for outstanding breakthroughs in high-performance computing, linear algebra, and computational science and for contributions to the Julia programming language.\"<ref>{{Cite press|url=https://www.computer.org/press-room/2019-news/2019-ieee-fernbach-award-edelman|title=Alan Edelman of MIT Recognized with Prestigious 2019 IEEE Computer Society Sidney Fernbach Award {{!}} IEEE Computer Society|language=en-US|date=1 October 2019|access-date=2019-10-09}}</ref>\n\nJulia Computing and [[NVIDIA]] announce \"the availability of the Julia programming language as a pre-packaged container on the NVIDIA GPU Cloud (NGC) container registry\"<ref name=\"Julia_Nvidia\">{{Cite web|url=https://juliacomputing.com/blog/2019/12/03/nvidia-ngc-arm.html|title=Julia Computing and NVIDIA Bring Julia GPU Computing to Arm|date=2019-12-03|website=juliacomputing.com|access-date=2019-12-03}}</ref> with NVIDIA stating \"Easily Deploy Julia on x86 and Arm [..] Julia offers a package for a comprehensive HPC ecosystem covering machine learning, data science, various scientific domains and visualization.\"<ref>{{Cite web|url=https://blogs.nvidia.com/blog/2019/11/18/ngc-containers-arm/|title=NVIDIA Expands Support for Arm with HPC, AI, Visualization Containers on NGC {{!}} NVIDIA Blog|last=Patel|first=Chintan|date=2019-11-19|website=The Official NVIDIA Blog|language=en-US|access-date=2019-12-03}}</ref>\n\nAdditionally, \"Julia was selected by the [https://clima.caltech.edu/ Climate Modeling Alliance] as the sole implementation language for their next generation global climate model. This multi-million dollar project aims to build an earth-scale climate model providing insight into the effects and challenges of climate change.\"<ref name=\"Julia_Nvidia\"/>\n\n===Sponsors===\nJulia has received contributions from over 870 developers worldwide.<ref>{{Cite web|title=JuliaLang/julia: The Julia Language: A fresh approach to technical computing.|date=2019-01-26|url=https://github.com/JuliaLang/julia|publisher=The Julia Language|access-date=2019-01-26}}</ref> Dr. Jeremy Kepner at [[MIT Lincoln Laboratory]] was the founding sponsor of the Julia project in its early days. In addition, funds from the [[Gordon and Betty Moore Foundation]], the [[Alfred P. Sloan Foundation]], [[Intel]], and agencies such as [[National Science Foundation|NSF]], [[DARPA]], [[National Institutes of Health|NIH]], [[NASA]], and [[Federal Aviation Administration|FAA]] have been essential to the development of Julia.<ref>{{Cite web|url=https://julialang.org/research/|title=The Julia Language|website=julialang.org|access-date=2019-09-22}}</ref> In addition [[Mozilla]], the maker of Firefox web browser, with its research grants for H1 2019, sponsored \"a member of the official Julia team\" for the project \"Bringing Julia to the Browser\",<ref>{{Cite web|url=https://www.zdnet.com/article/mozilla-is-funding-a-way-to-support-julia-in-firefox/|title=Mozilla is funding a way to support Julia in Firefox|last=Cimpanu|first=Catalin|website=ZDNet|language=en|access-date=2019-09-22}}</ref> meaning to Firefox <!-- \"and the general browser environment--> and other web browsers.<ref>{{Cite web|url=https://alpha.iodide.io/notebooks/225/|title=Julia in Iodide|website=alpha.iodide.io|access-date=2019-09-22}}</ref><ref>{{Cite web|url=https://iodide-project.github.io/docs/language_plugins/|title=Language plugins - Iodide Documentation|website=iodide-project.github.io|access-date=2019-09-22}}</ref><ref>{{Cite web|url=https://mozilla-research.forms.fm/mozilla-research-grants-2019h1/forms/6510|title=Mozilla Research Grants 2019H1|website=Mozilla|language=en|quote=running language interpreters in WebAssembly. To further increase access to leading data science tools, we\u2019re looking for someone to port R or Julia to WebAssembly and to attempt to provide a level 3 language plugin for Iodide: automatic conversion of data basic types between R/Julia and Javascript, and the ability to share class instances between R/Julia and Javascript.|access-date=2019-09-22}}</ref><ref>{{Citation|title=Literate scientific computing and communication for the web: iodide-project/iodide|date=2019-09-20|url=https://github.com/iodide-project/iodide|publisher=iodide|quote=We envision a future workflow that allows you to do your data munging in Python, fit a quick model in R or JAGS, solve some differential equations in Julia, and then display your results with a live interactive d3+JavaScript visualization... and all that within within a single, portable, sharable, and hackable file.|access-date=2019-09-22}}</ref>\n\n===Julia Computing===\nJulia Computing, Inc. was founded in 2015 by [[Viral B. Shah]], Deepak Vinchhi, [[Alan Edelman]], Jeff Bezanson, [[Stefan Karpinski]] and Keno Fischer.<ref>{{Cite web|url=https://juliacomputing.com/about-us|title=About Us \u2013 Julia Computing|website=juliacomputing.com|access-date=2017-09-12}}</ref>\n\nIn June 2017, Julia Computing raised $4.6M in seed funding from [[General Catalyst]] and [[Founder Collective]].<ref>https://juliacomputing.com/communication/2017/06/19/seed-funding.html</ref>\n\n==Language features==\nThough designed for numerical computing, Julia is a [[general-purpose programming language]].<ref>{{cite web\n  | title      = The Julia Language\n  | type       = official website\n  | url        = https://julialang.org/\n  | quote      = General Purpose [..] Julia lets you write UIs, statically compile your code, or even deploy it on a webserver.\n}}</ref>\nIt is also useful for low-level [[system programming|systems programming]],<ref name=\"LowLevelSystemsProgrammingInJulia\">{{cite web |url=http://juliacon.org/2018/talks_workshops/42/\n|archiveurl=https://web.archive.org/web/20181105083419/http://juliacon.org/2018/talks_workshops/42/\n|archivedate=5 November 2018\n|first=Todd |last=Green\n|title=Low-Level Systems Programming in High-Level Julia\n|date=10 August 2018\n|accessdate=5 November 2018\n}}</ref> as a [[specification language]],<ref name=\"spec\">{{cite web |url=http://juliacon.org/talks.html#friday\n|archiveurl=https://web.archive.org/web/20150701182804/http://juliacon.org/talks.html\n|archivedate=1 July 2015\n|first=Robert |last=Moss\n|title=Using Julia as a Specification Language for the Next-Generation Airborne Collision Avoidance System\n|quote=[[Airborne collision avoidance system]]\n|date=26 June 2015\n|accessdate=29 June 2015\n}}</ref> and for web programming at both server<ref>{{Cite web|url=https://medium.com/@richardanaya/how-to-create-a-multi-threaded-http-server-in-julia-ca12dca09c35|title=How to create a multi-threaded HTTP server in Julia|last=Anaya|first=Richard|date=2019-04-28|website=Medium|language=en|access-date=2019-07-25|quote=In summary, even though Julia lacks a multi-threaded server solution currently out of box, we can easily take advantage of its process distribution features and a highly popular load balancing tech to get full CPU utilization for HTTP handling.}}</ref><ref>{{Cite web|last=Anthoff|first=David|title=Node.js installation for julia|date=2019-06-01|url=https://github.com/davidanthoff/NodeJS.jl|access-date=2019-07-25}}</ref><!--<ref name=\"node-js\">{{cite web|url=https://node-julia.readme.io/|title=Getting Started with Node Julia \u00b7 Node Julia|date=|website=Node-julia.readme.io|accessdate=2017-05-31}}</ref> --> and client<ref name=\"JSExpr\"/><ref name=\"WebAssembly\"/> side.\n\nAccording to the official website, the main features of the language are:\n\n* [[Multiple dispatch]]: providing ability to define function behavior across many combinations of argument types\n* [[Dynamic type]] system: types for documentation, optimization, and dispatch\n* Good performance, approaching that of [[Type system|statically-typed]] languages like C\n* A built-in [[package manager]]\n* [[Lisp (programming language)|Lisp]]-like macros and other [[metaprogramming]] facilities\n* Call [[Python (programming language)|Python]] functions: use the PyCall package{{Efn|For calling the newer [[Python 3]] (the older default to call Python 2, is also still supported)<ref>{{cite web |url=https://github.com/JuliaPy/PyCall.jl |title=PyCall.jl |work=stevengj |publisher=github.com}}</ref><ref>{{cite newsgroup |url=https://groups.google.com/forum/#!topic/julia-users/lDM7-YXT2LU |title=Using PyCall in julia on Ubuntu with python3 |work=julia-users at Google Groups|quote=to import modules (e.g., python3-numpy)}}</ref> <!--([[PyPy]] and e.g. [[PHP]] was/is supported<ref name=\"Polyglot\">{{cite web|url=https://gitlab.com/wavexx/Polyglot.jl|title=wavexx / Polyglot.jl|website=GitLab|language=en|access-date=2019-07-25}}</ref> for Julia 0.5 (PyPy should work; supported by python-bond that Polyglot.jl is based on); [[Jython]] support is not confirmed, but since JavaCall.jl allows calling Java (and thus Scala) I assume also Jython.)--> and calling in the other direction, from Python to Julia, is also supported with ''pyjulia''.<ref>{{cite web |url=https://github.com/JuliaPy/pyjulia |title=python interface to julia}}</ref> \n<!--\nIt is not like Polyglot. jl does not support this for older Julia (and also interesting project to support other languages, e.g., PHP), but it has not been upgraded for Julia 1.0: Even calling [[recursive]]ly (back and forth) between these languages is possible, without (or with) using ''Polyglot.jl'',<ref name=\"Polyglot\"/> that supports additional languages to Python. \n-->\n\n}}\n* Call [[C (programming language)|C]] functions directly: no wrappers or special [[application programming interface|APIs]]\n* Powerful [[shell (computing)|shell]]-like abilities to manage other processes\n* Designed for [[Parallel computing|parallel]] and [[distributed computing]]\n* [[Coroutine|Coroutines]]: lightweight [[Green threads|''green'' threading]]\n* User-defined types are as fast and compact as built-ins\n* Automatic generation of efficient, specialized code for different argument types\n* Elegant and extensible conversions and promotions for numeric and other types\n* Efficient support for [[Unicode]], including but not limited to [[UTF-8]]\n<!-- |source=JuliaLang.org}} Only part missing it the MIT part, that is better explained elsewhere.-->\n\nMultiple dispatch (also termed [[multimethod]]s in Lisp) is a [[generalization]] of [[single dispatch]]{{snd}} the [[Polymorphism (computer science)|polymorphic mechanism]] used in common [[object-oriented programming]] (OOP) languages{{snd}} that uses [[Inheritance (object-oriented programming)|inheritance]]. In Julia, all concrete types are [[subtyping|subtypes]] of abstract types, directly or indirectly subtypes of the ''Any'' type, which is the top of the type hierarchy. Concrete types can not themselves be subtyped the way they can in other languages; composition is used instead (see also [[Inheritance (object-oriented programming)#Inheritance vs subtyping|inheritance vs subtyping]]).\n\nJulia draws significant inspiration from various dialects of Lisp<!-- Karpinski: \"In short, I would describe it as a Lisp with Matlab-like syntax\" https://www.reddit.com/r/programming/comments/pv3k9/why_we_created_julia_a_new_programming_language/ -->, including [[Scheme (programming language)|Scheme]] and [[Common Lisp]], and it shares many features with [[Dylan (programming language)|Dylan]], also a multiple-dispatch-oriented dynamic language (which features an [[ALGOL]]-like [[Free-form language|free-form]] [[Infix notation|infix]] syntax rather than a Lisp-like prefix syntax, while in Julia \"everything\"<ref name=\"Learn Julia in Y\">{{cite web|url=https://learnxinyminutes.com/docs/julia/ |title=Learn Julia in Y Minutes |website=Learnxinyminutes.com |date= |accessdate=2017-05-31}}</ref> is an [[Expression (computer science)|expression]]), and with [[Fortress (programming language)|Fortress]], another numerical programming language (which features multiple dispatch and a sophisticated parametric type system). While [[Common Lisp Object System]] (CLOS) adds multiple dispatch to Common Lisp, not all functions are generic functions.\n\nIn Julia, Dylan, and Fortress extensibility is the default, and the system's built-in functions are all generic and extensible. In Dylan, multiple dispatch is as fundamental as it is in Julia: all user-defined functions and even basic built-in operations like <code>+</code> are generic. Dylan's type system, however, does not fully support parametric types, which are more typical of the [[Generational list of programming languages#ML based|ML lineage of languages]]. By default, CLOS does not allow for dispatch on Common Lisp's parametric types; such extended dispatch semantics can only be added as an extension through the [[Common Lisp Object System#Metaobject Protocol|CLOS Metaobject Protocol]]. By convergent design, Fortress also features multiple dispatch on parametric types; unlike Julia, however, Fortress is statically rather than dynamically typed, with separate compiling and executing phases. The language features are summarized in the following table:\n\n{| class=\"wikitable\"\n|-\n! [[Programming language|Language]] !! [[Type system]] !! [[Generic function]]s !! [[Parametric polymorphism|Parametric types]]\n|-\n| Julia || Dynamic || Default || Yes\n|-\n| [[Common Lisp]] || Dynamic || Opt-in || Yes (but no dispatch)\n|-\n| [[Dylan (programming language)|Dylan]] || Dynamic || Default || Partial (no dispatch)\n|-\n| [[Fortress (programming language)|Fortress]] || Static || Default || Yes\n|}\n\nBy default, the Julia runtime must be pre-installed as user-provided source code is run. Alternatively, a standalone [[executable]] that needs no Julia source code can be built with ''ApplicationBuilder.jl''<ref>{{Cite web|last=Daly|first=Nathan|title=GitHub - NHDaly/ApplicationBuilder.jl: Compile, bundle, and release julia software.|date=2019-02-13|url=https://github.com/NHDaly/ApplicationBuilder.jl|access-date=2019-02-15}}</ref> and ''PackageCompiler.jl''.<ref>{{cite web|title=GitHub - JuliaLang/PackageCompiler.jl: Compile your Julia Package.|date=2019-02-14|url=https://github.com/JuliaLang/PackageCompiler.jl|publisher=The Julia Language|access-date=2019-02-15}}</ref><!--\n<ref>{{cite web |url=https://github.com/dhoegh/BuildExecutable.jl |title=Build a standalone executables from a Julia script}}</ref><ref>{{cite newsgroup|url=https://groups.google.com/forum/#!topic/julia-users/MtF4wHc77sw |title=.jl to .exe |website=Groups.google.com |date= |accessdate=2017-05-31}}</ref>  -->\n\nJulia's [[Macro (computer science)#Syntactic macros|syntactic macros]] (used for [[metaprogramming]]), like Lisp macros, are more powerful than [[Macro (computer science)#Text-substitution macros|text-substitution macros]] used in the [[preprocessor]] of some other languages such as C, because they work at the level of [[abstract syntax tree]]s (ASTs). Julia's macro system is [[hygienic macro|hygienic]], but also supports deliberate capture when desired (like for [[anaphoric macro]]s) using the <code>esc</code> construct.\n\n==Interaction==\nThe Julia official distribution includes a \"full-featured interactive command-line REPL\" ([[read\u2013eval\u2013print loop]]),<ref>{{Cite web|url=https://docs.julialang.org/en/v1/stdlib/REPL/|title=The Julia REPL \u00b7 The Julia Language|website=docs.julialang.org|access-date=2019-09-22}}</ref> with a searchable history, [[tab-completion]], many helpful keybindings, and dedicated help and [[shell (computing)|shell]] modes;<ref>{{Cite web|url=https://en.wikibooks.org/wiki/Introducing_Julia/The_REPL|title=Introducing Julia/The REPL - Wikibooks, open books for an open world|website=en.wikibooks.org|quote=you can install the Julia package OhMyREPL.jl (https://github.com/KristofferC/OhMyREPL.jl) which lets you customize the REPL's appearance and behaviour|access-date=2019-09-22}}</ref> which can be used to experiment and test code quickly.<ref>{{Cite web|url=https://docs.julialang.org/en/v1/manual/getting-started/|title=Getting Started \u00b7 The Julia Language|website=docs.julialang.org|language=en|access-date=2018-08-15}}</ref> The following fragment represents a sample session example where strings are concatenated automatically by println:<ref>See also: https://docs.julialang.org/en/v1/manual/strings/ for string interpolation and the <code>string(greet, \", \", whom, \".\\n\")</code> example for preferred ways to concatenate strings. <!--While the <code>+</code> operator is not used for string concatenation, it could easily be defined to do so.--> Julia has the println and print functions, but also a @printf macro (i.e., not in function form) to eliminate run-time overhead of formatting (unlike the same function in C).</ref>\n\n<source lang=\"jlcon\">\njulia> p(x) = 2x^2 + 1; f(x, y) = 1 + 2p(x)y\njulia> println(\"Hello world!\", \" I'm on cloud \", f(0, 4), \" as Julia supports recognizable syntax!\")\nHello world! I'm on cloud 9 as Julia supports recognizable syntax!\n</source>\n\nThe REPL gives user access to the system shell and to help mode, by pressing <code>;</code> or <code>?</code> after the prompt (preceding each command), respectively. It also keeps the history of commands, including between sessions.<ref>{{cite web|title=Julia Documentation|url=https://docs.julialang.org|website=JuliaLang.org|accessdate=18 November 2014}}</ref> Code that can be tested inside the Julia's interactive section or saved into a file with a <code>.jl</code> extension and run from the command line by typing:<ref name=\"Learn Julia in Y\"/>\n\n<source lang=\"console\">\n $ julia <filename>\n</source>\n\nJulia is supported by [[Jupyter]], an online interactive \"notebooks\" environment.<ref>{{cite web |url=https://jupyter.org/ |title=Project Jupyter}}</ref>\n\n===Use with other languages===\nJulia is in practice [[interoperability|interoperable]] with many languages. Julia's <source lang=\"julia\" inline>ccall</source> keyword is used to call C-exported or Fortran shared library functions individually.\n\nJulia has support for [[Unicode 12.1]] (support for current Unicode 13.0 has been implemented<ref>{{Cite web|url=https://github.com/JuliaStrings/utf8proc/pull/179|title=Unicode 13 support by stevengj \u00b7 Pull Request #179 \u00b7 JuliaStrings/utf8proc|website=GitHub|language=en|access-date=2020-03-29}}</ref> and will for Julia 1.5), which added only one letter since Unicode 12.0<ref>{{Cite web|url=https://github.com/JuliaLang/julia/pull/32002|title=support for Unicode 12.1.0 by stevengj \u00b7 Pull Request #32002 \u00b7 JuliaLang/julia|website=GitHub|language=en|access-date=2019-05-12}}</ref>, with [[UTF-8]] used for strings (by default) and for Julia source code (only allowing legal UTF-8 in latest version), meaning also allowing as an option common math symbols for many operators, such as \u2208 for the <code>in</code> operator.\n\nJulia has packages supporting markup languages such as [[HTML]] (and also for [[HTTP]]), [[XML]], [[JSON]] and [[BSON]], and for [[database]]s and web use in general.\n\n== Usage ==\nLibraries such as [[Flux (machine-learning framework)|Flux]] and [[Knet (machine-learning framework)|Knet]] implement complete machine-learning frameworks written completely in Julia. [[Apache MXNet]] and [[TensorFlow]] are also available through wrapper libraries. [[Turing (probabilistic programming)|Turing]] and [[Gen (probabilistic programming)|Gen]] implement general-purpose [[probabilistic programming]] languages into Julia. [[Pharmacokinetics|Pharmacokinetic]] modeling and simulations are made available through the [[Pumas (pharmaceutical modeling)|Pumas]] suite.\n\n==Implementation==\nJulia's core is implemented in Julia and [[C (programming language)|C]]<!--C99, except for 0.4 needing C11 because of static asserts-->, together with [[C++]] for the [[LLVM]] dependency. The parsing and code-lowering are implemented in FemtoLisp, a [[Scheme (programming language)|Scheme]] dialect.<ref name=\"JeffBezanson 2019\">{{cite web | author=JeffBezanson | title=JeffBezanson/femtolisp | website=GitHub | date=June 6, 2019 | url=https://github.com/JeffBezanson/femtolisp | access-date=June 16, 2019}}</ref> The LLVM compiler infrastructure project is used as the [[Compiler#Back end|back end]] for generation of [[64-bit computing|64-bit]] or [[32-bit]] optimized [[machine code]] depending on the platform Julia runs on. With some exceptions (e.g., [[PCRE]]), the [[standard library]] is implemented in Julia itself. The most notable aspect of Julia's implementation is its speed, which is often within a factor of two relative to fully optimized C code (and thus often an order of magnitude faster than Python or [[R (programming language)|R]]).<ref name=\"Julia-TR\">{{cite web\n  | format       = PDF\n  | title        = Julia: A Fast Dynamic Language for Technical Computing\n  | url          = https://julialang.org/images/julia-dynamic-2012-tr.pdf\n  | year         = 2012\n  }}</ref><ref>{{cite web\n  | title        = How To Make Python Run As Fast As Julia\n  | url          = https://www.ibm.com/developerworks/community/blogs/jfp/entry/Python_Meets_Julia_Micro_Performance?lang=en\n  | year         = 2015\n  }}</ref><ref>{{cite web\n  | title        = Basic Comparison of Python, Julia, R, Matlab and IDL\n  | url          = https://modelingguru.nasa.gov/docs/DOC-2625\n  | year         = 2015\n  }}</ref> Development of Julia began in 2009 and an [[Open-source software|open-source]] version was publicized in February 2012.<ref name=\"announcement\">{{cite web\n  | title        = Why We Created Julia\n  | date         = February 2012\n  | website      = Julia website\n  | url          = https://julialang.org/blog/2012/02/why-we-created-julia\n  | accessdate   = 7 February 2013\n  }}</ref><ref>{{cite web\n  | last         = Gibbs\n  | first        = Mark\n  | title        = Pure and Julia are cool languages worth checking out\n  | url          = https://www.networkworld.com/columnists/2013/010913-gearhead.html\n  | type         = column\n  | work         = Network World\n  | date         = 9 January 2013\n  | accessdate   = 7 February 2013\n}}</ref>\n\n===Current and future platforms===\nWhile Julia uses JIT,<!-- Viral states \"Julia no longer uses the MCJIT in LLVM\" so this link is probably misleading:\n<ref>{{cite web |url=https://github.com/JuliaLang/julia/pull/5208\n|title=Support MCJIT\n|website=Github.com\n|accessdate=26 May 2015\n}}</ref> --> Julia generates native machine code directly, before a function is first run (not [[bytecode]]s that are run on a [[virtual machine]] (VM) or translated as the bytecode is running, as with, ''e.g.'', Java; the [[JVM]] or [[Dalvik (software)|Dalvik]] in Android).\n\nJulia has four support tiers,<ref>{{cite web|url=https://julialang.org/downloads/#support-tiers|title=Julia Downloads|website=julialang.org|access-date=2019-05-17}}</ref> and currently supports all [[x86-64]] processors, that are [[64-bit computing|64-bit]] (and is more [[program optimization|optimized]] for the latest generations) and all [[IA-32]] (\"x86\") processors except for decades old ones, i.e., in [[32-bit]] mode (\"i686\", excepting CPUs from the pre-[[Pentium 4]]-era); and supports more in lower tiers, e.g., ARM has tier 2 support: Julia \"fully supports ARMv8 (AArch64) processors, and supports ARMv7 and ARMv6 (AArch32) with some caveats.\"<ref>{{cite web|title=julia/arm.md|date=2019-11-29|url=https://github.com/JuliaLang/julia/blob/master/doc/build/arm.md|publisher=The Julia Language|quote=A list of [https://github.com/JuliaLang/julia/labels/arm known issues] for ARM is available.|access-date=2019-11-29}}</ref> [[CUDA]] (i.e. Nvidia GPUs; implementing [[Parallel Thread Execution|PTX]]) has tier 1 support, with the help of an [https://github.com/JuliaGPU/CUDAnative.jl external package]. There are also additionally packages supporting other accelerators, such as Google's [[tensor processing unit|TPU]]s,<ref>{{Citation|title=Julia on TPUs|date=2019-11-26|url=https://github.com/JuliaTPU/XLA.jl|publisher=JuliaTPU|access-date=2019-11-29}}</ref> and AMD's GPUs also have support with e.g. [[OpenCL]]. Julia's downloads page provides [[executable]]s (and source) for all the officially supported platforms.\n\nOn some platforms, Julia may need to be compiled from [[source code]] (e.g., the original [[Raspberry Pi]]), with specific build options. Julia has been \"successfully built\" <!--on the following ARMv8 devices:\n\n* [https://www.nvidia.com/object/embedded-systems-dev-kits-modules.html nVidia Jetson TX1 & TX2];\n* [https://www.apm.com/products/data-center/x-gene-family/x-gene/ X-Gene 1];\n* [https://softiron.com/products/overdrive-3000/ Overdrive 3000];\n* [https://www.cavium.com/ThunderX_ARM_Processors.html Cavium ThunderX]-->\non several ARM platforms, up to, e.g., \"ARMv8 Data Center & Cloud Processors\", such as [https://www.cavium.com/ThunderX_ARM_Processors.html Cavium ThunderX] (first ARM with 48 cores). PowerPC (64-bit) has tier 3 support meaning \"may or may not build\".\n<!--\n Support for ARM, [[AArch64]], and [[Power Architecture|POWER8]] (little-endian) has been added recently as of 0.5.1 is available too.<ref>{{cite web|author= |url=https://github.com/JuliaLang/julia/blob/v0.5.2/README.md |title=julia/README.md at v0.5.2 \u00b7 JuliaLang/julia \u00b7 GitHub |website=Github.com |date=2017-05-03 |accessdate=2017-05-31}}</ref>\n\nand in 0.5.x:\n\n\"work in progress\" text dropped with (not yet backported (possibly the text, only docs left behind?) to 0.6.x): https://github.com/JuliaLang/julia/commit/dcffef03594779402bb5c2666fbcf24b4438adba#diff-8b8b297c5626992d7377a6bbb3aadceb\n\n\"only supports ARMv7\" text dropped on master (may apply on older, meaning possibly only for ARMv6?:\n\n\"[[Nightly build]]s are available for ARMv7-A. [..] Note that OpenBLAS only supports ARMv7. For older ARM variants, using the reference BLAS may be the simplest thing to do. [..] Note: These [Raspberry Pi] chips use ARMv6, which is not well supported at the moment. However it is possible to get a working Julia build. [e.g., supported] [[Tegra#Tegra P1|nVidia Jetson TX2]] [with] CUDA functionality\"<ref>{{cite web|author=JuliaLang |url=https://github.com/JuliaLang/julia/blob/v0.6.2/README.arm.md |title=julia/README.arm.md at v0.5.2 \u00b7 JuliaLang/julia \u00b7 GitHub |publisher=Github.com |date= |accessdate=2017-05-31}}</ref>\n\nThe [[Raspberry Pi]] support also includes limited support for [[Raspberry Pi]] 1 (since it has [[ARMv6]]),<ref>{{cite web |url=https://github.com/JuliaLang/julia/issues/10488\n|title=Cross-compiling for ARMv6\n|quote=I believe #10917 should fix this. The CPU used there <code>arm1176jzf-s</code>. Please reopen if it does not.\n|accessdate=16 May 2015}}\n</ref><ref>\n{{cite web |url=https://github.com/JuliaLang/julia/issues/10235\n|title=ARM build failing during bootstrap on Raspberry Pi 2\n|quote=I can confirm (FINALLY) that it works on the Raspberry Pi 2 [..] I guess we can announce alpha support for arm in 0.4 as well. |accessdate=16 May 2015}}</ref>\n\n-->\nJulia is now supported in [[Raspbian]]<ref>{{cite web |url=https://julialang.org/blog/2017/05/raspberry-pi-julia |title=Julia available in Raspbian on the Raspberry Pi |quote=Julia works on all the Pi variants, we recommend using the Pi 3.}}</ref> while support is better for newer Pis, e.g. those with ARMv7 or newer; the Julia support is promoted by the [[Raspberry Pi Foundation]].<ref>{{cite web |url=https://www.raspberrypi.org/blog/julia-language-raspberry-pi/ |title=Julia language for Raspberry Pi |work=[[Raspberry Pi Foundation]]}}</ref> There's also support for web browsers/[[JavaScript]] through JSExpr.jl;<ref name=\"JSExpr\">{{Cite web|title=Translate Julia to JavaScript |date=2019-07-07|url=https://github.com/JuliaGizmos/JSExpr.jl|publisher=JuliaGizmos|access-date=2019-07-25}}</ref> and the alternative language of web browsers, [[WebAssembly]], has support<ref name=\"WebAssembly\">{{Cite web|last=Fischer|first=Keno|title=Running julia on wasm|date=2019-07-22|url=https://github.com/Keno/julia-wasm|access-date=2019-07-25}}</ref> through minimal support in Julia itself, that supports several upcoming external Julia projects.\n<!--\nJulia supports [[64-bit computing|64-bit]] [[ARM architecture|ARM]] and [[PowerPC]] and \"fully supports [[ARMv8]] ([[AArch64]]) processors, and supports ARMv7 and ARMv6 (AArch32) with some caveats\"<ref>https://github.com/JuliaLang/julia/blob/master/README.arm.md</ref><ref>https://github.com/JuliaLang/julia/issues/10791#issuecomment-91735439</ref> and [[PowerPC]] being worked on, with almost no open specific issues,<ref>https://github.com/JuliaLang/julia/labels/Power</ref><ref>{{cite web |url=https://groups.google.com/forum/#!topic/julia-dev/BYVCyUlNR8c |title=Porting Julia to PowerPC |quote=Wow, the latest git allows me to build to completion. |accessdate=9 May 2015}}</ref> with [[Executable|binaries]] available for [[POWER7]] (\"due to some small support from [[IBM]]\") and [[POWER8]], that are expected to have official beta support as of 0.5 (at least for non-parallel support).<ref>{{cite web |url=https://groups.google.com/forum/#!topic/julia-users/xB0k7XMBNqM |title=IBM Power port |quote=I am hoping we can have beta support from the 0.5 release onwards for sequential julia. We were able to do this work due to some small support from IBM.}}</ref>\n-->\n<!--\nSupport for [[GNU/kFreeBSD]] and [[GNU Hurd]] is being worked on (in JuliaLang's [[C mathematical functions#libm|openlibm]] dependency project).<ref>{{cite web|url=https://github.com/JuliaLang/openlibm/pull/129 |title=Fix building tests on GNU/kFreeBSD and GNU/Hurd by ginggs \u00b7 Pull Request #129 \u00b7 JuliaLang/openlibm |website=Github.com |date= |accessdate=2017-05-31}}</ref>\nYes, openlibm, is not Julia, but is a dependency of it-->\n<!--\nAn unofficial Julia-lite,<ref>https://github.com/ScottPJones/julia/tree/spj/lite</ref>a trimmed down fork (by now outdated) is a available. Officially Julia has been dropping dependencies and features from the standard library, to make GPL-free (one left), so it's also the official plan.\n-->\nJulia can compile to ARM; thus in theory [[Android app]]s can be made, but for now only Julia itself (and most packages) has been made to run under [[Android (operating system)|Android]] indirectly, i.e. in Ubuntu on Android.<ref>{{Cite web|url=https://discourse.julialang.org/t/using-julia-on-android/8086/7|title=Using Julia on Android?|date=2019-09-27|website=JuliaLang|language=en-US|access-date=2019-10-02}}</ref>\n\n==See also==\n* [[Comparison of numerical analysis software]]\n* [[Comparison of statistical packages]]\n\n==Notes==\n{{Notelist|80em}}\n\n==References==\n{{Reflist|30em}}\n\n==Further reading==\n* {{cite book|last=Nagar|first=Sandeep|year=2017|title=Beginning Julia Programming-For Engineers and Scientists|publisher=Springer}}\n* {{cite journal|author1=Bezanson, J|author2=Edelman, A|author3=Karpinski, S|author4=Shah, V. B|year=2017|title=Julia: A fresh approach to numerical computing|publisher=SIAM Review |volume=59 |issue=1 |pages=65\u201398}}\n* {{cite book|last=Joshi|first=Anshul|year=2016|title=Julia for Data Science \uff0d Explore the world of data science from scratch with Julia by your side|publisher=Packt Publishing}}\n\n==External links==\n{{wikibook|Introducing Julia}}\n* {{Official website|https://julialang.org}}\n* [https://github.com/JuliaLang/julia Source code]\n\n{{Programming languages}}\n{{FOSS}}\n{{Numerical analysis software}}\n{{Mathematical optimization software}}\n{{Statistical software}}\n\n[[Category:2012 software]]\n[[Category:Array programming languages]]\n[[Category:Computational notebook]]\n[[Category:Cross-platform software]]\n[[Category:Data mining and machine learning software]]\n[[Category:Data-centric programming languages]]\n[[Category:Dynamically typed programming languages]]\n[[Category:Free compilers and interpreters]]<!-- note there's also a Julia interpreter (not on by default); beside FemptoLisp-->\n[[Category:Free computer libraries]]\n[[Category:Free data analysis software]]\n[[Category:Free data visualization software]]\n[[Category:Free software projects]]\n[[Category:Free software programmed in C]]\n[[Category:Free statistical software]]\n[[Category:Functional languages]]\n[[Category:High-level programming languages]]\n[[Category:Lisp programming language_family]]\n[[Category:Multi-paradigm programming languages]]<!-- ok? Mostly only using the main paradigm multiple-dispatch, but Julia enables using more, e.g. implementing class-based OO-->\n[[Category:Numerical analysis software for Linux]]\n[[Category:Numerical analysis software for MacOS]]\n[[Category:Numerical analysis software for Windows]]\n[[Category:Numerical libraries]] <!--for Julia's standard library: seems ok, as e.g. part of (and all planned) C's libm has been rewritten in Julia-->\n[[Category:Numerical linear algebra]]\n[[Category:Numerical programming languages]]\n[[Category:Object-oriented programming languages]]\n[[Category:Parallel computing]]\n[[Category:Procedural programming languages]]\n[[Category:Programming languages]]\n[[Category:Programming languages created in 2012]]\n[[Category:Software using the MIT license]]\n<!-- [[Category:Scripting languages]] ? -->\n[[Category:Statistical programming languages]]\n[[Category:Text-oriented programming languages]]\n[[Category:Homoiconic programming languages]]\n[[Category:Articles with example Julia code]]\n[[Category:Free software programmed in Julia]] <!--Julia is written, mostly, in Julia itself-->\n", "name_user": "Comp.arch", "label": "safe", "comment": "\u2192\u200eHistory", "url_page": "//en.wikipedia.org/wiki/Julia_(programming_language)"}
{"title_page": "Belovo, Vologda Oblast", "text_new": "{{Infobox settlement\n|official_name          = Belovo\n|other_name             = \n|native_name            = \u0411\u0435\u043b\u043e\u0432\u043e\n|nickname               = \n|settlement_type        = Village\n|image_skyline          = \n|image_caption          = \n|pushpin_map            = Russia Vologda Oblast#Russia\n|pushpin_label_position = \n|pushpin_mapsize        =\n|pushpin_map_caption    = \n|subdivision_type       = Country\n|subdivision_name       = [[Russia]]\n|subdivision_type1      = [[List of regions of Russia|Region]] \n|subdivision_name1      = [[Vologda Oblast]]\n|subdivision_type2      = [[Counties of Russia|County]] \n|subdivision_name2      = \n|subdivision_type3      = [[Districts of Russia|District]] \n|subdivision_name3      = [[Gryazovetsky District]]\n|subdivision_type4      = [[List of municipalities of Russia|Municipality]]\n|subdivision_name4      = \n|timezone1              = \n|utc_offset1            = +3:00\n|timezone1_DST          = \n|utc_offset1_DST        = \n|postal_code_type       = \n|postal_code            = \n|elevation_m            = \n|elevation_footnotes    = \n|coordinates            = {{coord|58|50|N|40|56|E|display=inline}}<ref>[https://mapdata.ru/vologodskaya-oblast/gryazoveckiy-rayon/ \u041a\u0430\u0440\u0442\u0430 \u0413\u0440\u044f\u0437\u043e\u0432\u0435\u0446\u043a\u043e\u0433\u043e  \u0440\u0430\u0439\u043e\u043d\u0430 \u0412\u043e\u043b\u043e\u0433\u043e\u0434\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438]</ref>\n}}\n'''Belovo''' ({{lang-ru|\u0411\u0435\u043b\u043e\u0432\u043e}}) is a [[types of inhabited localities in Russia|rural locality]] (a [[Village#Russia|village]]) in Vokhtozhskoye Rural Settlement, [[Gryazovetsky District]], [[Vologda Oblast]], Russia. The population was 5 as of 2002.<ref>\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0438 2002 \u0433\u043e\u0434\u0430: \u0442\u0430\u0431\u043b\u0438\u0446\u0430 2\u0421. \u041c.: \u0424\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u0443\u0436\u0431\u0430 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438, 2004.</ref>\n\n== Geography ==\nThe distance to [[Gryazovets]] is 65&nbsp;km, to Vokhtoga is 8&nbsp;km. Rodionovo is the nearest rural locality.\n\n== References ==\n{{reflist}}\n\n{{Rural localities in Gryazovetsky District}}\n{{Authority control}}\n\n[[Category:Rural localities in Vologda Oblast]]\n[[Category:Rural localities in Gryazovetsky District]]\n\n{{VologdaOblast-geo-stub}}\n", "text_old": "{{Infobox settlement\n|official_name          = Belovo\n|other_name             = \n|native_name            = \u0411\u0435\u043b\u043e\u0432\u043e\n|nickname               = \n|settlement_type        = Village\n|image_skyline          = \n|image_caption          = \n|pushpin_map            = Russia Vologda Oblast#Russia\n|pushpin_label_position = \n|pushpin_mapsize        =\n|pushpin_map_caption    = \n|subdivision_type       = Country\n|subdivision_name       = [[Russia]]\n|subdivision_type1      = [[List of regions of Russia|Region]] \n|subdivision_name1      = [[Vologda Oblast]]\n|subdivision_type2      = [[Counties of Russia|County]] \n|subdivision_name2      = \n|subdivision_type3      = [[Districts of Russia|District]] \n|subdivision_name3      = [[Gryazovetsky District]]\n|subdivision_type4      = [[List of municipalities of Russia|Municipality]]\n|subdivision_name4      = \n|timezone1              = \n|utc_offset1            = +3:00\n|timezone1_DST          = \n|utc_offset1_DST        = \n|postal_code_type       = \n|postal_code            = \n|elevation_m            = \n|elevation_footnotes    = \n|coordinates            = {{coord|58|50|N|40|56|E|display=inline}}<ref>[https://mapdata.ru/vologodskaya-oblast/gryazoveckiy-rayon/ \u041a\u0430\u0440\u0442\u0430 \u0413\u0440\u044f\u0437\u043e\u0432\u0435\u0446\u043a\u043e\u0433\u043e  \u0440\u0430\u0439\u043e\u043d\u0430 \u0412\u043e\u043b\u043e\u0433\u043e\u0434\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438]</ref>\n}}\n'''Belovo''' ({{lang-ru|\u0411\u0435\u043b\u043e\u0432\u043e}}) is a [[types of inhabited localities in Russia|rural locality]] (a [[Village#Russia|village]]) in Vokhtozhskoye Rural Settlement, [[Gryazovetsky District]], [[Vologda Oblast]], Russia. The population was 5 as of 2002.<ref>\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0438 2002 \u0433\u043e\u0434\u0430: \u0442\u0430\u0431\u043b\u0438\u0446\u0430 2\u0421. \u041c.: \u0424\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u0443\u0436\u0431\u0430 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438, 2004.</ref>\n\n== Geography ==\nThe distance to [[Gryazovets]] is 65&nbsp;km, to Vokhtoga is 8&nbsp;km. Rodionovo is the nearest rural locality.\n\n== References ==\n{{reflist}}\n\n{{Rural localities in Gryazovetsky District}}\n{{Authority control}}\n\n[[Category:Rural localities in Vologda Oblast]]\n[[Category:Rural localities in Gryazovetsky District]]\n\n\n{{VologdaOblast-geo-stub}}\n", "name_user": "Wagino 20100516", "label": "safe", "comment": "\u2192\u200eReferences:clean up", "url_page": "//en.wikipedia.org/wiki/Belovo,_Vologda_Oblast"}
{"title_page": "Isle of Man/History", "text_new": "#REDIRECT [[History of the Isle of Man]]\n\n{{R from subpage}}\n", "text_old": "#REDIRECT [[Isle of Man]]\n", "name_user": "1234qwer1234qwer4", "label": "safe", "comment": "\u2192\u200etop:R from subpage", "url_page": "//en.wikipedia.org/w/index.php?title=Isle_of_Man/History&redirect=no"}
{"title_page": "Bel, Vologda Oblast", "text_new": "{{Infobox settlement\n|official_name          = Bel\n|other_name             = \n|native_name            = \u0411\u0435\u043b\u044c\n|nickname               = \n|settlement_type        = Village\n|image_skyline          = \n|image_caption          = \n|pushpin_map            = Russia Vologda Oblast#Russia\n|pushpin_label_position = \n|pushpin_mapsize        =\n|pushpin_map_caption    = \n|subdivision_type       = Country\n|subdivision_name       = [[Russia]]\n|subdivision_type1      = [[List of regions of Russia|Region]] \n|subdivision_name1      = [[Vologda Oblast]]\n|subdivision_type2      = [[Counties of Russia|County]] \n|subdivision_name2      = \n|subdivision_type3      = [[Districts of Russia|District]] \n|subdivision_name3      = [[Gryazovetsky District]]\n|subdivision_type4      = [[List of municipalities of Russia|Municipality]]\n|subdivision_name4      = \n|timezone1              = \n|utc_offset1            = +3:00\n|timezone1_DST          = \n|utc_offset1_DST        = \n|postal_code_type       = \n|postal_code            = \n|elevation_m            = \n|elevation_footnotes    = \n|coordinates            = {{coord|59|07|N|40|26|E|display=inline}}<ref>[https://mapdata.ru/vologodskaya-oblast/gryazoveckiy-rayon/ \u041a\u0430\u0440\u0442\u0430 \u0413\u0440\u044f\u0437\u043e\u0432\u0435\u0446\u043a\u043e\u0433\u043e  \u0440\u0430\u0439\u043e\u043d\u0430 \u0412\u043e\u043b\u043e\u0433\u043e\u0434\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438]</ref>\n}}\n'''Bel''' ({{lang-ru|\u0411\u0435\u043b\u044c}}) is a [[types of inhabited localities in Russia|rural locality]] (a [[Village#Russia|village]]) in Komyanskoye Rural Settlement, [[Gryazovetsky District]], [[Vologda Oblast]], Russia. The population was 5 as of 2002.<ref>\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0438 2002 \u0433\u043e\u0434\u0430: \u0442\u0430\u0431\u043b\u0438\u0446\u0430 2\u0421. \u041c.: \u0424\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u0443\u0436\u0431\u0430 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438, 2004.</ref>\n\n== Geography ==\nThe distance to [[Gryazovets]] is 41&nbsp;km, to Khoroshevo is 14&nbsp;km. Nadorozhny Lipovik is the nearest rural locality.\n\n== References ==\n{{reflist}}\n\n{{Rural localities in Gryazovetsky District}}\n{{Authority control}}\n\n[[Category:Rural localities in Vologda Oblast]]\n[[Category:Rural localities in Gryazovetsky District]]\n\n{{VologdaOblast-geo-stub}}\n", "text_old": "{{Infobox settlement\n|official_name          = Bel\n|other_name             = \n|native_name            = \u0411\u0435\u043b\u044c\n|nickname               = \n|settlement_type        = Village\n|image_skyline          = \n|image_caption          = \n|pushpin_map            = Russia Vologda Oblast#Russia\n|pushpin_label_position = \n|pushpin_mapsize        =\n|pushpin_map_caption    = \n|subdivision_type       = Country\n|subdivision_name       = [[Russia]]\n|subdivision_type1      = [[List of regions of Russia|Region]] \n|subdivision_name1      = [[Vologda Oblast]]\n|subdivision_type2      = [[Counties of Russia|County]] \n|subdivision_name2      = \n|subdivision_type3      = [[Districts of Russia|District]] \n|subdivision_name3      = [[Gryazovetsky District]]\n|subdivision_type4      = [[List of municipalities of Russia|Municipality]]\n|subdivision_name4      = \n|timezone1              = \n|utc_offset1            = +3:00\n|timezone1_DST          = \n|utc_offset1_DST        = \n|postal_code_type       = \n|postal_code            = \n|elevation_m            = \n|elevation_footnotes    = \n|coordinates            = {{coord|59|07|N|40|26|E|display=inline}}<ref>[https://mapdata.ru/vologodskaya-oblast/gryazoveckiy-rayon/ \u041a\u0430\u0440\u0442\u0430 \u0413\u0440\u044f\u0437\u043e\u0432\u0435\u0446\u043a\u043e\u0433\u043e  \u0440\u0430\u0439\u043e\u043d\u0430 \u0412\u043e\u043b\u043e\u0433\u043e\u0434\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438]</ref>\n}}\n'''Bel''' ({{lang-ru|\u0411\u0435\u043b\u044c}}) is a [[types of inhabited localities in Russia|rural locality]] (a [[Village#Russia|village]]) in Komyanskoye Rural Settlement, [[Gryazovetsky District]], [[Vologda Oblast]], Russia. The population was 5 as of 2002.<ref>\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0438 2002 \u0433\u043e\u0434\u0430: \u0442\u0430\u0431\u043b\u0438\u0446\u0430 2\u0421. \u041c.: \u0424\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u0443\u0436\u0431\u0430 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438, 2004.</ref>\n\n== Geography ==\nThe distance to [[Gryazovets]] is 41&nbsp;km, to Khoroshevo is 14&nbsp;km. Nadorozhny Lipovik is the nearest rural locality.\n\n== References ==\n{{reflist}}\n\n{{Rural localities in Gryazovetsky District}}\n{{Authority control}}\n\n[[Category:Rural localities in Vologda Oblast]]\n[[Category:Rural localities in Gryazovetsky District]]\n\n\n{{VologdaOblast-geo-stub}}\n", "name_user": "Wagino 20100516", "label": "safe", "comment": "\u2192\u200eReferences:clean up", "url_page": "//en.wikipedia.org/wiki/Bel,_Vologda_Oblast"}
{"title_page": "Bekrenevo, Gryazovetsky District, Vologda Oblast", "text_new": "{{Infobox settlement\n|official_name          = Bekrenevo\n|other_name             = \n|native_name            = \u0411\u0435\u043a\u0440\u0435\u043d\u0435\u0432\u043e\n|nickname               = \n|settlement_type        = Village\n|image_skyline          = \n|image_caption          = \n|pushpin_map            = Russia Vologda Oblast#Russia\n|pushpin_label_position = \n|pushpin_mapsize        =\n|pushpin_map_caption    = \n|subdivision_type       = Country\n|subdivision_name       = [[Russia]]\n|subdivision_type1      = [[List of regions of Russia|Region]] \n|subdivision_name1      = [[Vologda Oblast]]\n|subdivision_type2      = [[Counties of Russia|County]] \n|subdivision_name2      = \n|subdivision_type3      = [[Districts of Russia|District]] \n|subdivision_name3      = [[Gryazovetsky District]]\n|subdivision_type4      = [[List of municipalities of Russia|Municipality]]\n|subdivision_name4      = \n|timezone1              = \n|utc_offset1            = +3:00\n|timezone1_DST          = \n|utc_offset1_DST        = \n|postal_code_type       = \n|postal_code            = \n|elevation_m            = \n|elevation_footnotes    = \n|coordinates            = {{coord|58|45|N|40|57|E|display=inline}}<ref>[https://mapdata.ru/vologodskaya-oblast/gryazoveckiy-rayon/ \u041a\u0430\u0440\u0442\u0430 \u0413\u0440\u044f\u0437\u043e\u0432\u0435\u0446\u043a\u043e\u0433\u043e  \u0440\u0430\u0439\u043e\u043d\u0430 \u0412\u043e\u043b\u043e\u0433\u043e\u0434\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438]</ref>\n}}\n'''Bekrenevo''' ({{lang-ru|\u0411\u0435\u043a\u0440\u0435\u043d\u0435\u0432\u043e}}) is a [[types of inhabited localities in Russia|rural locality]] (a [[Village#Russia|village]]) in Sidorovskoye Rural Settlement, [[Gryazovetsky District]], [[Vologda Oblast]], Russia. The population was 59 as of 2002.<ref>\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0438 2002 \u0433\u043e\u0434\u0430: \u0442\u0430\u0431\u043b\u0438\u0446\u0430 2\u0421. \u041c.: \u0424\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u0443\u0436\u0431\u0430 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438, 2004.</ref>\n\n== Geography ==\nThe distance to [[Gryazovets]] is 49&nbsp;km, to Sidorovo is 1&nbsp;km. Bolshoy Dor is the nearest rural locality.\n\n== References ==\n{{reflist}}\n\n{{Rural localities in Gryazovetsky District}}\n{{Authority control}}\n\n[[Category:Rural localities in Vologda Oblast]]\n[[Category:Rural localities in Gryazovetsky District]]\n\n{{VologdaOblast-geo-stub}}\n", "text_old": "{{Infobox settlement\n|official_name          = Bekrenevo\n|other_name             = \n|native_name            = \u0411\u0435\u043a\u0440\u0435\u043d\u0435\u0432\u043e\n|nickname               = \n|settlement_type        = Village\n|image_skyline          = \n|image_caption          = \n|pushpin_map            = Russia Vologda Oblast#Russia\n|pushpin_label_position = \n|pushpin_mapsize        =\n|pushpin_map_caption    = \n|subdivision_type       = Country\n|subdivision_name       = [[Russia]]\n|subdivision_type1      = [[List of regions of Russia|Region]] \n|subdivision_name1      = [[Vologda Oblast]]\n|subdivision_type2      = [[Counties of Russia|County]] \n|subdivision_name2      = \n|subdivision_type3      = [[Districts of Russia|District]] \n|subdivision_name3      = [[Gryazovetsky District]]\n|subdivision_type4      = [[List of municipalities of Russia|Municipality]]\n|subdivision_name4      = \n|timezone1              = \n|utc_offset1            = +3:00\n|timezone1_DST          = \n|utc_offset1_DST        = \n|postal_code_type       = \n|postal_code            = \n|elevation_m            = \n|elevation_footnotes    = \n|coordinates            = {{coord|58|45|N|40|57|E|display=inline}}<ref>[https://mapdata.ru/vologodskaya-oblast/gryazoveckiy-rayon/ \u041a\u0430\u0440\u0442\u0430 \u0413\u0440\u044f\u0437\u043e\u0432\u0435\u0446\u043a\u043e\u0433\u043e  \u0440\u0430\u0439\u043e\u043d\u0430 \u0412\u043e\u043b\u043e\u0433\u043e\u0434\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438]</ref>\n}}\n'''Bekrenevo''' ({{lang-ru|\u0411\u0435\u043a\u0440\u0435\u043d\u0435\u0432\u043e}}) is a [[types of inhabited localities in Russia|rural locality]] (a [[Village#Russia|village]]) in Sidorovskoye Rural Settlement, [[Gryazovetsky District]], [[Vologda Oblast]], Russia. The population was 59 as of 2002.<ref>\u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0438 2002 \u0433\u043e\u0434\u0430: \u0442\u0430\u0431\u043b\u0438\u0446\u0430 2\u0421. \u041c.: \u0424\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043b\u0443\u0436\u0431\u0430 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438, 2004.</ref>\n\n== Geography ==\nThe distance to [[Gryazovets]] is 49&nbsp;km, to Sidorovo is 1&nbsp;km. Bolshoy Dor is the nearest rural locality.\n\n== References ==\n{{reflist}}\n\n{{Rural localities in Gryazovetsky District}}\n{{Authority control}}\n\n[[Category:Rural localities in Vologda Oblast]]\n[[Category:Rural localities in Gryazovetsky District]]\n\n\n{{VologdaOblast-geo-stub}}\n", "name_user": "Wagino 20100516", "label": "safe", "comment": "\u2192\u200eReferences:clean up", "url_page": "//en.wikipedia.org/wiki/Bekrenevo,_Gryazovetsky_District,_Vologda_Oblast"}
{"title_page": "Fox Spirit Matchmaker", "text_new": "{{Infobox television\n| show_name                = Fox Spirit Matchmaker\n| image                    = [[File:Huyao Xiao Hongniang.xcf|300px|\u62c7\u6307]]\n| caption                  = \n| show_name_2              = \u72d0\u5996\u5c0f\u7ea2\u5a18<br/>Huyao Xiao Hongniang<br/>\n| genre                    = \n| creator                  = Tuo Xiaoxin(Painted)<br />Pansi Daxian(colored)<br />Xiatian Dao(\u590f\u5929\u5c9b,company)\n| based_on                 = \n| writer                   = \n| director                 = Wang Zixuan(\u738b\u5b50\u8f69),f director\n| creative_director        = Wang Xin(\u738b\u6615)\n| starring                 = \n| voices                   = \n| opentheme                = \n| endtheme                 = \n| composer                 = \n| country                  = [[China]]\n| language                 = [[Standard Mandarin|Mandarin]]\n| num_seasons              = \n| num_episodes             = 111\n| executive_producer       = \n| producer                 = \n| animator                 = [[Haoliners Animation League]] Garden-Culture\n| location                 = \n| cinematography           = \n| editor                   = \n| runtime                  = 10-24 minutes per episodes\n| company                  = [[Tencent Pictures|Tencent Penguin Pictures]]\n| channel                  = [[Tencent Video]] [[bilibili]]\n| picture_format           = \n| audio_format             = \n| first_run                = \n| first_aired              = {{Start date|2015|6|26}}\n| last_aired               = \n| preceded_by              = \n| followed_by              = \n| related                  = \n| website                  = https://ac.qq.com/Comic/comicInfo/id/518333<br/>https://v.qq.com/detail/0/0sdnyl7h86atoyt.html\n| website_title            = \n| production_website       = \n| production_website_title = \n}}\n'''Fox Spirit Matchmaker''' (Chinese: '''\u72d0\u5996\u5c0f\u7ea2\u5a18''', '''Huyao Xiao Hongniang'''; Japanese: '''\u7e01\u7d50\u3073\u306e\u5996\u72d0\u3061\u3083\u3093''') is a Chinese romance [[manhua]] work painted by Tuo Xiaoxin(\u5eb9\u5c0f\u65b0) and colored by Pansi Daxian(\u76d8\u4e1d\u5927\u4ed9). It was originally published on the magazine Manhua Show(\u6f2b\u753bSHOW) since 2012 until the magazine's cancellation but continued on Tencent Comics. On June 26, 2015, Huyao was animated in [[Tencent Video]]. Today it has been broadcast 111 episodes.<ref>{{Cite web|url=https://acg.gamersky.com/news/201506/608183.shtml|title=\u4e2d\u56fd\u9996\u4e2a\u52a8\u753b\u9996\u6620\u793c\u5728\u4eac\u5f00\u5e55 \u53e4\u98ce\u7231\u60c5\u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300b6\u670826\u65e5\u4e0a\u7ebf_\u52a8\u6f2b\u661f\u7a7a|website=acg.gamersky.com|access-date=2020-02-15}}</ref> In Tencent Animation 2nd PV competition it passed the group stage and in the final with 35,838 votes to win the first.<ref>{{Cite news|author=|url=http://ent.jschina.com.cn/system/2015/06/26/025250431.shtml|title=\u52d5\u756b\u7248\u300a\u82b1\u5343\u9aa8\u300b\uff1a\u300a\u72d0\u5996\u5c0f\u7d05\u5a18\u300b\u9996\u64ad|date=2015-06-26|accessdate=2015-07-24|archiveurl=https://web.archive.org/web/20150724082749/http://ent.jschina.com.cn/system/2015/06/26/025250431.shtml|archivedate=2015-07-24|publisher=\u4e2d\u570b\u6c5f\u8607\u7db2|language=zh-cn|url-status=dead}}</ref> In July 2018 it was temporarily removed after [[Bilibili]] was named and criticised by [[CCTV]].<ref>[http://www.expreview.com/62948.html \u592e\u89c6\u70b9\u540d\u6279\u8bc4B\u7ad9\u3001\u52a8\u6f2bAPP\u5b58\u5728\u4f4e\u4fd7\u5185\u5bb9\u5f8c\uff0c\u5927\u91cf\u52a8\u6f2b\u89c6\u9891\u88ab\u4e0b\u67b6] \u8d85\u80fd\u7f51 2018-07-21[2018-07-23]</ref><ref>[https://www.ithome.com/html/it/371809.htm \u6c42\u751f\u6b32\u5f3a\u70c8\uff1a\u592e\u89c6\u70b9\u540d\u6279\u8bc4B\u7ad9\u542b\u5144\u59b9\u604b\u7b49\u4f4e\u4fd7\u52a8\u6f2b \uff0c\u5f8c\u8005\u7d27\u6025\u4e0b\u67b6] IT\u4e4b\u5bb6 2018-07-20[2018-07-23]</ref>\n\n== Introduction of Story ==\nThe story revolves around the love between human and spirits. According to classical novelrecords, there are spirits in the world, spirits will love people, the life of the spirit for thousands of years, people's life span is limited, people die, spirits live. People will give birth to reincarnation, but after the birth, do not remember the love of the previous life. If the spirit is infatuated, go to the fox spirit \"buy\" a service, so that the person who cast the tire reincarnation, recall the love of the previous life.\n\nThe role of the fox spirit was born, the work mainly tells the story of the fox spirit as a career in the red line process of the former lovers in a series of interesting, mysterious story.<ref>{{Cite news|author=|url=http://finance.ifeng.com/a/20150618/13786593_0.shtml|title=\u52d5\u756b\u96fb\u5f71\u300a\u72d0\u5996\u5c0f\u7d05\u5a18\u300b\u5c07\u4e0a\u7dda \u6545\u4e8b\u4e3b\u8ef8\u5fe0\u65bc\u539f\u8457|date=2015-06-18|accessdate=2015-07-24|publisher=\u9cf3\u51f0\u8ca1\u7d93|language=zh-cn}}</ref>\n\n== Characters ==\n\n=== Main Characters ===\n'''Bai Yuechu'''(\u767d\u6708\u521d, Voiced by Yang Tianxiang(\u6768\u5929\u7fd4))\n\nMain actor of the story, whose reincarnation of Dongfang Yuechu(\u4e1c\u65b9\u6708\u521d).<ref>[http://comic.qq.com/a/20171218/018121.htm \u5168\u7f51\u64ad\u653e\u91cf\u7a81\u783421\u4ebf\uff01\u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300b\u8fde\u9738\u767e\u5ea6\u98ce\u4e91\u699cTOP1]</ref> He obsessed with money and food, and he is the fiance of Tushan Susu. He is a special individual created by Aolaiguo Sanshao(\u50b2\u6765\u56fd\u4e09\u5c11). He has Tushan Honghong(\u6d82\u5c71\u7ea2\u7ea2)'s spirit power. He was strictly controlled by Yiqi Taoist League(\u4e00\u6c14\u9053\u76df), but because of an agreement signed 500 years ago between Tushan and Yiqi Taoist League, He got freedom.\n\n'''Tushan Susu'''(\u6d82\u5c71\u82cf\u82cf, Voiced by Liu Xiaoyu(\u5218\u6821\u59a4))<ref>[https://movie.douban.com/celebrity/1325738/ \u5218\u6821\u59a4 Xiaoyu Liu]</ref>\n\nMain actress of the story, who always carrys a variety of snacks, the spirit power is very low. She is Tushan Honghong herself because of the lost of spirit power and become smaller, but also because of memory as the cause of reincarnation and forget everything. Only blood that has been drunk from Bai Yuechu in certain conditions can be temporarily restored. She calls Bai Yuechu Mister Taoist(\u9053\u58eb\u54e5\u54e5) and Bai calls her Little fool(\u5c0f\u8822\u8d27).\n\n'''Tushan Yaya'''(\u6d82\u5c71\u96c5\u96c5, Voiced by Zhang Kai(\u5f20\u51ef)), elder sister of Tushan Rongrong(\u6d82\u5c71\u5bb9\u5bb9) and Tushan Susu. She has the strongest spirit power in Tushan at present and she is the leader of Spirit League.<ref>{{Cite web|url=https://www.mingyantong.com/jianjie/295747|title=\u6d82\u5c71\u96c5\u96c5\u7b80\u4ecb_\u8d44\u6599\u4ecb\u7ecd_\u540d\u8a00\u901a|website=www.mingyantong.com|language=zh-hans|access-date=2020-02-16}}</ref>\n\n'''Tushan Rongrong'''(\u6d82\u5c71\u5bb9\u5bb9, Voiced by Qiao Shiyu(\u4e54\u8bd7\u8bed)), the smartest fox spirit and second boss in Tushan.<ref>{{Cite web|url=https://acg.gamersky.com/otaku/data/201510/677194.shtml|title=\u72d0\u5996\u5c0f\u7ea2\u5a18\u6d82\u5c71\u5bb9\u5bb9\u662f\u8c01\uff1f\u6d82\u5c71\u5bb9\u5bb9\u4eba\u7269\u4ecb\u7ecd_\u52a8\u6f2b\u661f\u7a7a|website=acg.gamersky.com|access-date=2020-02-16}}</ref>\n\n'''Wang Fugui'''(\u738b\u5bcc\u8d35, Voiced by Wei Chao(\u9b4f\u8d85)), a rich play boy. He is reincarnation of Wangquan Fugui(\u738b\u6743\u5bcc\u8d35), a member of Yiqi Taoist League.<ref>{{Cite web|url=https://acg.gamersky.com/otaku/data/201510/678024.shtml|title=\u72d0\u5996\u5c0f\u7ea2\u5a18\u738b\u5bcc\u8d35\u662f\u8c01\uff1f\u72d0\u5996\u5c0f\u7ea2\u5a18\u738b\u5bcc\u8d35\u4ecb\u7ecd_\u52a8\u6f2b\u661f\u7a7a|website=acg.gamersky.com|access-date=2020-02-16}}</ref>\n\n== Plot ==\nThe animation has several seasons. They are Shahu Chapter(\u6c99\u72d0\u7bc7), Wangquan Chapter(\u738b\u6743\u7bc7), Yuehong Chapter(\u6708\u7ea2\u7bc7), Beishan Yaodi Chapter(\u5317\u5c71\u5996\u5e1d\u7bc7), Qianyan Chapter(\u5343\u989c\u7bc7), Nanguo Chapter(\u5357\u56fd\u7bc7), Zhuye Chapter(\u7af9\u4e1a\u7bc7) and Weisheng Chapter(\u5c3e\u751f\u7bc7). Each chapter tells a story and they jointly promote the development of the main line plot.\n\n=== Shahu Chapter ===\nEpisode: 1-13\n\nOP: Love You Ready, Love Me Ready (\u7231YOU READY\uff0c\u7231\u6211READY)\n\nED: Dongliu (\u4e1c\u6d41, means water flows eastward)\n\nThis chapter mainly tells about the love story about the Fan Yunfei(\u68b5\u4e91\u98de) who is the Prince of Xixiyu(\u897f\u897f\u57df) and Li Xueyang(\u5389\u96ea\u626c) whose reincarnation was called Ice General(\u51b0\u5c06\u519b). Fan Yunfei is a sand fox spirit but he isn't afraid of water. He has  bad stammer. In Li's reincarnation, Fan wanted her to marry him but she refused 99 times. Fortunately, he succeeded. They used Qiannian Yushuizhu(\u5343\u5e74\u5fa1\u6c34\u73e0, has amazing power to control water) as their magic weapon of love continuation.  In the end, with the help of Bai Yuechu, Fan inherits the throne of Xixiyu.\n\n=== Wangquan Chapter ===\nEpisode: 14-27\n\nOP: Meng Huihuan(\u68a6\u56de\u8fd8, means dream about returning)\n\nED: Dongliu\n\nThis chapter mainly tells about the love story of Wangquan Fugui and a spider spirit Qingtong(\u6e05\u77b3, the name has meaning about the eyes which can see world clearly). Wangquan family was the first family to use magic weapon to fight against spirits. Wangquan Fugui was the most talented in his family. He could use Wangquan Sword well. His father Wangquan Baye(\u738b\u6743\u9738\u4e1a), who was the host of the family, asked him to kill any spirits and could not get out of mansion. But when a spider spirit came to his mansion, he didn't kill her. The spirit knew he couldn't go anywhere so she used her arachnoid to weave paintings which showed beautiful scenery outside of his mansion. Unfortunately, Wangquan Fugui's shimei, Feng Tingyun(\u98ce\u5ead\u4e91) knew what happened and told everything to Wangquan Baye. Baye asked Fugui to kill the spirit at once, but Fugui didn't follow him and ready to get out of the mansion with the spirit. He was badly wounded in the yard. However, Dongfang Yuechu came here in time and saved him, while Tushan Honghong fighting against 500 guards out of the mansion.\n\n=== Yuehong Chapter ===\nEpisode: 28-48(including Beishan Yaodi Chapter)\n\nOP: Ruodang Laishi(\u82e5\u5f53\u6765\u4e16, means if we meet in afterlife)\n\nED: Lingzhou(\u94c3\u821f, means bell rings and boat floats)   Junlu(\u541b\u8def, means the way you walk, in Beishan Yaodi Chapter)\n\nThis is one of the most important chapters. It tells about the love between Dongfang Yuechu and Tushan Honghong. Tushan Honghong was the king of Tushan. Dongfang Yuechu came from Dongfang family, whose members could use magic kill-spirit fire, Chunzhi Yangyan(\u7eaf\u8d28\u9633\u708e, means pure sun fire). His parents were killed by Huhe Shuangxian(\u864e\u9e64\u53cc\u4ed9, a two-spirits group) so he ran to Tushan and was saved by Tushan Honghong. After that, Tushan was attacked by Jinmian Huoshen(\u91d1\u9762\u706b\u795e, King of fire , real name is Jin Renfeng(\u91d1\u4eba\u51e4)). Jin's Chunzhi Yangyan was so strong that Tushan couldn't fight against him. However, Dongfang Yuechu asked Tushan Honghong to use her hand through his heart and he kissed her immediately. Honghong got strong spirit power from that and finally Jin failed. After the attack. Yuechu used his diluted blood to wash her hands so that she was not afraid of Chunzhi Yangyan. Yuechu loved Honghong so much that he was ready to confess to her on Double Seventh Festival which day that Niulang and Zhinu meet each other every year in Chinese traditional legend. After Tushan Rongrong knew his idea, she told him that Honghong often went to Shuangsheng Mountain(\u53cc\u751f\u5cf0) on that festival. When Yuechu arrived there, he just saw Honghong walked into an icy cave and sat in front of a dead little Taoist body. Honghong knew he was nearby and said something to him on propose. Then Yuechu knew that she and Rongrong were caught by two Taoists when they were young. But while the elder one sleeping, the little one wanted to save these two fox spirits. Honghong remaineded of something that be told by an elder fox spirit, she just thought the little one would kill her so she uesd her hand through his heart but she understood his real motivation at that moment. The little Taoist told her his thoughts and died soon. Honghong was very guilty and it left a shadow in her heart. She couldn't do what she wanted even couldn't love others. Yuechu was distressed after knowing the fact and left Tushan for 50 years.\n\nIn these years, the friendship between people and spirits became worse than before. Yuechu experienced something and became much stronger. He became the host of Yiqi Taoist League. At that time, people still thought Tushan fox spirits often killed people. Only Yuechu and Wangquan Fugui knew the fact: the black fox spirits(\u9ed1\u72d0) broke the peace. Yuechu and Fugui talked about how to let people belive the fact. Yuechu pretended to believe black fox spirits' plan and fight Honghong in order to lure black fox spirit to show up. But he knew the end clearly, it's a bet of his whole life. After fighting, the Queen of balck fox spirit showed up. Honghong knew his real idea and was moved. Yuechu left Tushan 50 years ago just wanted to achieve her dream, a dream about the peace between people and spirits. Until this moment, Honghong expressed her love to Yuechu and Yuechu got his magic weapon, Xukong Zhilei(\u865a\u7a7a\u4e4b\u6cea, means the tears of void). The Queen really wanted to get it, she seriously hurt Yuechu. But the magic weapon had been become Yuechu and Honghong's magic weapon of love continuation in their heart. The Queen couldn't kill them if she wanted the complete weapon. Honghong started the love continuation, Dongfang Yuechu was dead and Tushan Honghong lost her spirit power and memory, become Tushan Susu.\n\nIn Tushan Theater, people knew what happened 500 years ago in Bai Yuechu's reincarnation and Tushan Susu. But Tushan was attacked by black fox spirits, Beishan Yaodi(real name is Shi Kuan(\u77f3\u5bbd)) and Tushan Meimei(\u6d82\u5c71\u7f8e\u7f8e, a member of black fox spirits). Tushan Susu became Honghong temporarily but was controlled by Meimei. To save her, Bai and Rongrong came into her dream and finally saw Honghong and Dongfang Yuechu's soul. Susu became back. With the help of Bai and Susu's help, Shi Kuan was back to normal and accepted a girl whose reincarnation was the Princess of Yuyao Guo(\u5fa1\u5996\u56fd) and Shi was her lover in their former life.\n\nAll of spirits in Tushan and people in Yiqi Taoist League wanted Tushan Honghong could really be back, so Tushan Yaya asked Bai to marry Susu. At the wedding ceremony. Bai sightly asked Susu whether she wanted to be a real excellent matchmaker or not. Susu was exhuasted but finally she expressed her real idea that she didn't want to marry, she just wanted to be an excellent matchmaker. Bai kissed her and she bacame Honghong flying away. Yaya wanted to catch her but Bai said if she did that he would die again. \"If you don't force us to marry right now, I can promise you, I will bring her back, and as she becomes the best matchmaker, I'll woo her, and make her truly fall in love with me.\"\n\n== Anime ==\nThe Japanese version was broadcast in [[Tokyo MX]] between 2017-7-1 and 2017-12-16.<ref>{{Cite web|url=http://enmusuyouko.com/news-01/|title=\u7e01\u7d50\u3073\u306e\u5996\u72d0\u3061\u3083\u3093-2017\u5e747\u67081\u65e5\u30aa\u30f3\u30a8\u30a2\u958b\u59cb\uff01\uff01 {{!}} \u30a2\u30cb\u30e1 \u300c\u7e01\u7d50\u3073\u306e\u5996\u72d0\u3061\u3083\u3093\u300d \u516c\u5f0f\u30b5\u30a4\u30c8|language=ja|access-date=2020-02-15}}</ref>\n\nSince Zhuye Chapter, the broadcasting rights only belongs to Tencent Video.<ref>{{Cite web|url=https://ent.huanqiu.com/article/9CaKrnKiAqD|title=\u56fd\u6f2b\u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300b\"\u7af9\u4e1a\u7bc7\"\u817e\u8baf\u72ec\u5bb6\u5f00\u64ad|website=ent.huanqiu.com|access-date=2020-02-15}}</ref>\n\n== Mobile Game ==\nThe game was operated by [[Tencent Game]] Aurora Studios and tested publicly in November 2019.<ref>{{Cite web|url=http://www.9game.cn/hyxhn/3907653.html|title=\u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300b\u4ec0\u4e48\u65f6\u5019\u516c\u6d4b \u5168\u5e73\u53f0\u516c\u6d4b\u65f6\u95f4\u516c\u5e03_\u72d0\u5996\u5c0f\u7ea2\u5a18\u624b\u6e38_\u4e5d\u6e38\u624b\u673a\u6e38\u620f|website=www.9game.cn|access-date=2020-02-15}}</ref> It uses [[Unity3D]] as its engine and game type is [[MMORPG]] with traditional Chinese style.<ref>{{Cite web|url=https://cloud.tencent.com/developer/news/510964|title=\u72d0\u5996\u5c0f\u7ea2\u5a18\u624b\u6e38\uff1a\u56fd\u6f2b\u98ce\u683c\u7684RPG\u7c7b\u6e38\u620f\uff0c\u6e38\u620f\u4ee3\u5165\u611f\u8d85\u5f3a\uff01 - \u4e91+\u793e\u533a - \u817e\u8baf\u4e91|website=cloud.tencent.com|access-date=2020-02-15}}</ref>\n\n== Influence ==\nWhen Fox Spirit Matchmaker was appeared, it has had a lot of impact, there have high clicks on many major platforms.<ref>{{Cite web|url=http://www.sohu.com/a/322224170_565158|title=\u72d0\u5996\u5c0f\u7ea2\u5a18\u64ad\u653e\u91cf\u7a81\u783450\u4ebf\uff0c\u9605\u6587\u52a8\u753b\u70b9\u51fb\u91cf\u7834\u767e\u4ebf\uff0c\u56fd\u6f2bIP\u664b\u7ea7\u4e0b\u4e00\u7ad9\uff1aIP\u884d\u751f\u6388\u6743\u5e02\u573a_\u4e2d\u56fd|website=www.sohu.com|language=en|access-date=2020-02-19}}</ref> To enrich Chinese culture industry and improve cultural travel level, Tencent has carried out many multi-faceted cooperation.<ref>{{Cite web|url=https://k.sina.cn/article_6216747334_1728c094601900j6oe.html|title=\u5e03\u5c40\u5168\u56fd\u3001\u64ac\u52a8\u5168\u7f51\uff0c\u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300bIP\u5f71\u54cd\u529b\u5230\u5e95\u6709\u591a\u5f3a\uff1f|last=sina_mobile|date=2019-05-17|website=k.sina.cn|access-date=2020-02-19}}</ref>\n\nIn December 2018, Hangzhou Animation Bus officially joined hands with Tencent Animation to launch No.51 \"pure love bus\". The main character Tushan Susu, was awarded the \"animation public transport image messenger\" official status. In May 2019, the \"Fox Spirit Matchmaker\" large-scale pure love parade series of activities opened in Hangzhou.<ref name=\":0\">{{Cite web|url=http://www.sohu.com/a/341498874_$%7Barticle.mediaId%7D|title=\u6765\u676d\u5dde\uff0c\u8d70\u8fdb\u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300b\u7684\u4e16\u754c_\u52a8\u6f2b|website=www.sohu.com|access-date=2020-02-19}}</ref>\n\nOn September 16, 2019, Hangzhou Lin'an District Government, Tencent Animation, Hangzhou Hongyi Investment Group Co., Ltd. held a signing ceremony in Hangzhou, announced that in Hangzhou Lin'an District Heqiao ancient town and Liuxi river area, with the \"Fox Spirit Matchmaker\" as the core, the three parties jointly build China's first National manhua theme tourist attractions, the total project projection area of more than 6 square kilometers. The project plans to restore the scenes and characters in the original Fox Spirit Matchmaker through large-scale real-life construction.<ref name=\":0\" />\n\nIn the second half of 2019, Tencent created a \"Red Line Inn\" live experience area with the theme of \"pure love\" in Yulong Snow Mountain, Lijiang, Yunnan Province. Tushan Susu was also awarded the title of \"Lijiang City Smart Arts and Animation Ambassador\" by Lijiang City Culture and Tourism Bureau.<ref>{{Cite web|url=http://globaltraveler.cn/info.aspx?id=26380&typeid=16|title=\u5f53\u72d0\u5996\u5c0f\u7ea2\u5a18\u9047\u89c1\u4e3d\u6c5f\u7389\u9f99\u96ea\u5c71|website=globaltraveler.cn|access-date=2020-02-19}}</ref>\n\n== Award Records ==\n\n* China International Comics Festival Golden Dragon Award \"2017 Best Comics\".<ref>[https://m.weibo.cn/status/4195700126169390 \u5165\u9009\u201c\u4e2d\u56fd\u4e8c\u6b21\u5143\u6307\u65702017\u5e74\u5ea6\u6700\u4f73\u6f2b\u753b\u201d\u5566] \u72d0\u5996\u5c0f\u7ea2\u5a18\u5b98\u65b9[[\u65b0\u6d6a\u5fae\u535a]] 2018-01-22[2018-05-24]</ref><ref name=\"\u7372\u591a\u734e2\">[https://mp.weixin.qq.com/s/Wzu2YmEVi_HCmm0Q6WWn4A \u62ff\u5956\u62ff\u5230\u624b\u8f6f\uff01\u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300b\u8363\u83b7\u661f\u8000\u76db\u5178\u201c\u9b45\u529b\u865a\u62df\u5076\u50cf\u5956\u201d] \u9a30\u8a0a\u52d5\u6f2b\u5b98\u65b9[[\u5fae\u4fe1]] 2019-01-16[2019-01-17]</ref>\n* 2017 ACG Fengshen Shengdian Won \"Most Fan Appeal 2D Animation Works\".<ref>[http://www.hxnews.com/news/dmyx/dmzx/dhxw/201707/21/1263647.shtml \u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300b\u7c89\u4e1d\u597d\u8bc4\u5982\u6f6e \u6df1\u53d7\u5927\u4f17\u54c1\u724c\u7684\u9752\u7750] \u6d77\u5cfd\u7db2 2017-07-21[2019-05-15]</ref>\n* China's game list \"Popular Comics of the Year\" award.<ref name=\"\u7372\u591a\u734e2\"/>\n* The 3rd Golden Number Entertainment Award and 2018 Outstanding Works of China's Entertainment Industry.<ref name=\"\u7372\u591a\u734e2\" />\n* 2018 China Entertainment Industry Best Original Works Award.<ref name=\"\u7372\u591a\u734e2\" />\n* 2018 China's entertainment industry the second \"Stars share virtual stars fashion festival\" Tushan Susu won the China Virtual Idol Glamour Award for best original works.<ref name=\"\u7372\u591a\u734e2\" /><ref>[https://m.weibo.cn/detail/4327237555393119 \u6d82\u5c71\u82cf\u82cf\u83b7\u5f97\u4e2d\u56fd\u865a\u62df\u5076\u50cf\u9b45\u529b\u5956] \u72d0\u5996\u5c0f\u7ea2\u5a18\u5b98\u65b9[[\u65b0\u6d6a\u5fae\u535a]] 2019-01-11[2019-01-12]</ref>\n* 2018 Outstanding Original Work Award.<ref>[https://m.weibo.cn/detail/4327354585215961 \u4e2d\u56fd\u6587\u5a31\u4ea7\u4e1a\u8d8b\u52bf\u9ad8\u5cf0\u8bba\u575b\u66a8\u7b2c\u4e09\u5c4a\u91d1\u6570\u5a31\u5956\u4e0a\uff0c\u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300b\u83b7\u5f97\u4e86\u30102018\u5e74\u5ea6\u5353\u8d8a\u539f\u521b\u4f5c\u54c1\u5956\u3011] \u9a30\u8a0a\u52d5\u6f2b\u5b98\u65b9[[\u65b0\u6d6a\u5fae\u535a]] 2019-01-11[2019-01-12]</ref>\n\n== References ==\n\n* [https://v.qq.com/detail/0/0sdnyl7h86atoyt.html Fox Spirit Matchmaker Tencent Video site]\n* [https://ac.qq.com/Comic/comicInfo/id/518333 Fox Spirit Matchmaker Tencent Comics site]\n* [http://www.haoliners.net/ Haoliners Animation Leagur official site]\n* [http://www.garden-culture.net/ Garden-Culture official site]\n\n== External links ==\n<references />\n\n\n\n[[Category:Manhua titles]]\n", "text_old": "{{Infobox television\n| show_name                = Fox Spirit Matchmaker\n| image                    = [[File:Huyao Xiao Hongniang.xcf|300px|\u62c7\u6307]]\n| caption                  = \n| show_name_2              = \u72d0\u5996\u5c0f\u7ea2\u5a18<br/>Huyao Xiao Hongniang<br/>\n| genre                    = \n| creator                  = Tuo Xiaoxin(Painted)<br />Pansi Daxian(colored)<br />Xiatian Dao(\u590f\u5929\u5c9b,company)\n| based_on                 = \n| writer                   = \n| director                 = Wang Zixuan(\u738b\u5b50\u8f69),f director\n| creative_director        = Wang Xin(\u738b\u6615)\n| starring                 = \n| voices                   = \n| opentheme                = \n| endtheme                 = \n| composer                 = \n| country                  = [[China]]\n| language                 = [[Standard Mandarin|Mandarin]]\n| num_seasons              = \n| num_episodes             = 111\n| executive_producer       = \n| producer                 = \n| animator                 = [[Haoliners Animation League]] Garden-Culture\n| location                 = \n| cinematography           = \n| editor                   = \n| runtime                  = 10-24 minutes per episodes\n| company                  = [[Tencent Pictures|Tencent Penguin Pictures]]\n| channel                  = [[Tencent Video]] [[bilibili]]\n| picture_format           = \n| audio_format             = \n| first_run                = \n| first_aired              = {{Start date|2015|6|26}}\n| last_aired               = \n| preceded_by              = \n| followed_by              = \n| related                  = \n| website                  = https://ac.qq.com/Comic/comicInfo/id/518333<br/>https://v.qq.com/detail/0/0sdnyl7h86atoyt.html\n| website_title            = \n| production_website       = \n| production_website_title = \n}}\n'''Fox Spirit Matchmaker''' (Chinese: '''\u72d0\u5996\u5c0f\u7ea2\u5a18''', '''Huyao Xiao Hongniang'''; Japanese: '''\u7e01\u7d50\u3073\u306e\u5996\u72d0\u3061\u3083\u3093''') is a Chinese romance [[manhua]] work painted by Tuo Xiaoxin(\u5eb9\u5c0f\u65b0) and colored by Pansi Daxian(\u76d8\u4e1d\u5927\u4ed9). It was originally published on the magazine Manhua Show(\u6f2b\u753bSHOW) since 2012 until the magazine's cancellation but continued on Tencent Comics. On June 26, 2015, Huyao was animated in [[Tencent Video]]. Today it has been broadcast 111 episodes.<ref>{{Cite web|url=https://acg.gamersky.com/news/201506/608183.shtml|title=\u4e2d\u56fd\u9996\u4e2a\u52a8\u753b\u9996\u6620\u793c\u5728\u4eac\u5f00\u5e55 \u53e4\u98ce\u7231\u60c5\u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300b6\u670826\u65e5\u4e0a\u7ebf_\u52a8\u6f2b\u661f\u7a7a|website=acg.gamersky.com|access-date=2020-02-15}}</ref> In Tencent Animation 2nd PV competition it passed the group stage and in the final with 35,838 votes to win the first.<ref>{{Cite news|author=|url=http://ent.jschina.com.cn/system/2015/06/26/025250431.shtml|title=\u52d5\u756b\u7248\u300a\u82b1\u5343\u9aa8\u300b\uff1a\u300a\u72d0\u5996\u5c0f\u7d05\u5a18\u300b\u9996\u64ad|date=2015-06-26|accessdate=2015-07-24|archiveurl=https://web.archive.org/web/20150724082749/http://ent.jschina.com.cn/system/2015/06/26/025250431.shtml|archivedate=2015-07-24|publisher=\u4e2d\u570b\u6c5f\u8607\u7db2|language=zh-cn|url-status=dead}}</ref> In July 2018 it was temporarily removed after [[Bilibili]] was named and criticised by [[CCTV]].<ref>[http://www.expreview.com/62948.html \u592e\u89c6\u70b9\u540d\u6279\u8bc4B\u7ad9\u3001\u52a8\u6f2bAPP\u5b58\u5728\u4f4e\u4fd7\u5185\u5bb9\u5f8c\uff0c\u5927\u91cf\u52a8\u6f2b\u89c6\u9891\u88ab\u4e0b\u67b6] \u8d85\u80fd\u7f51 2018-07-21[2018-07-23]</ref><ref>[https://www.ithome.com/html/it/371809.htm \u6c42\u751f\u6b32\u5f3a\u70c8\uff1a\u592e\u89c6\u70b9\u540d\u6279\u8bc4B\u7ad9\u542b\u5144\u59b9\u604b\u7b49\u4f4e\u4fd7\u52a8\u6f2b \uff0c\u5f8c\u8005\u7d27\u6025\u4e0b\u67b6] IT\u4e4b\u5bb6 2018-07-20[2018-07-23]</ref>\n\n== Introduction of Story ==\nThe story revolves around the love between human and spirits. According to classical novelrecords, there are spirits in the world, spirits will love people, the life of the spirit for thousands of years, people's life span is limited, people die, spirits live. People will give birth to reincarnation, but after the birth, do not remember the love of the previous life. If the spirit is infatuated, go to the fox spirit \"buy\" a service, so that the person who cast the tire reincarnation, recall the love of the previous life.\n\nThe role of the fox spirit was born, the work mainly tells the story of the fox spirit as a career in the red line process of the former lovers in a series of interesting, mysterious story.<ref>{{Cite news|author=|url=http://finance.ifeng.com/a/20150618/13786593_0.shtml|title=\u52d5\u756b\u96fb\u5f71\u300a\u72d0\u5996\u5c0f\u7d05\u5a18\u300b\u5c07\u4e0a\u7dda \u6545\u4e8b\u4e3b\u8ef8\u5fe0\u65bc\u539f\u8457|date=2015-06-18|accessdate=2015-07-24|publisher=\u9cf3\u51f0\u8ca1\u7d93|language=zh-cn}}</ref>\n\n== Characters ==\n\n=== Main Characters ===\n'''Bai Yuechu'''(\u767d\u6708\u521d, Voiced by Yang Tianxiang(\u6768\u5929\u7fd4))\n\nMain actor of the story, whose reincarnation of Dongfang Yuechu(\u4e1c\u65b9\u6708\u521d).<ref>[http://comic.qq.com/a/20171218/018121.htm \u5168\u7f51\u64ad\u653e\u91cf\u7a81\u783421\u4ebf\uff01\u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300b\u8fde\u9738\u767e\u5ea6\u98ce\u4e91\u699cTOP1]</ref> He obsessed with money and food, and he is the fiance of Tushan Susu. He is a special individual created by Aolaiguo Sanshao(\u50b2\u6765\u56fd\u4e09\u5c11). He has Tushan Honghong(\u6d82\u5c71\u7ea2\u7ea2)'s spirit power. He was strictly controlled by Yiqi Taoist League(\u4e00\u6c14\u9053\u76df), but because of an agreement signed 500 years ago between Tushan and Yi Qi Dao League, He got freedom.\n\n'''Tushan Susu'''(\u6d82\u5c71\u82cf\u82cf, Voiced by Liu Xiaoyu(\u5218\u6821\u59a4))<ref>[https://movie.douban.com/celebrity/1325738/ \u5218\u6821\u59a4 Xiaoyu Liu]</ref>\n\nMain actress of the story, who always carrys a variety of snacks, the spirit power is very low. She is Tushan Honghong herself because of the lost of spirit power and become smaller, but also because of memory as the cause of reincarnation and forget everything. Only blood that has been drunk from Bai Yuechu in certain conditions can be temporarily restored. She calls Bai Yuechu Bro Taoist(\u9053\u58eb\u54e5\u54e5).\n\n'''Tushan Yaya'''(\u6d82\u5c71\u96c5\u96c5, Voiced by Zhang Kai(\u5f20\u51ef)), elder sister of Tushan Rongrong(\u6d82\u5c71\u5bb9\u5bb9) and Tushan Susu. She has the strongest spirit power in Tushan at present and she is the leader of Spirit League.<ref>{{Cite web|url=https://www.mingyantong.com/jianjie/295747|title=\u6d82\u5c71\u96c5\u96c5\u7b80\u4ecb_\u8d44\u6599\u4ecb\u7ecd_\u540d\u8a00\u901a|website=www.mingyantong.com|language=zh-hans|access-date=2020-02-16}}</ref>\n\n'''Tushan Rongrong'''(\u6d82\u5c71\u5bb9\u5bb9, Voiced by Qiao Shiyu(\u4e54\u8bd7\u8bed)), the smartest fox spirit and second boss in Tushan.<ref>{{Cite web|url=https://acg.gamersky.com/otaku/data/201510/677194.shtml|title=\u72d0\u5996\u5c0f\u7ea2\u5a18\u6d82\u5c71\u5bb9\u5bb9\u662f\u8c01\uff1f\u6d82\u5c71\u5bb9\u5bb9\u4eba\u7269\u4ecb\u7ecd_\u52a8\u6f2b\u661f\u7a7a|website=acg.gamersky.com|access-date=2020-02-16}}</ref>\n\n'''Wang Fugui'''(\u738b\u5bcc\u8d35, Voiced by Wei Chao(\u9b4f\u8d85)), a rich play boy. He is reincarnation of Wangquan Fugui(\u738b\u6743\u5bcc\u8d35), a member of Yiqi Taoist League.<ref>{{Cite web|url=https://acg.gamersky.com/otaku/data/201510/678024.shtml|title=\u72d0\u5996\u5c0f\u7ea2\u5a18\u738b\u5bcc\u8d35\u662f\u8c01\uff1f\u72d0\u5996\u5c0f\u7ea2\u5a18\u738b\u5bcc\u8d35\u4ecb\u7ecd_\u52a8\u6f2b\u661f\u7a7a|website=acg.gamersky.com|access-date=2020-02-16}}</ref>\n\n== Plot ==\nThe animation has several seasons. They are Shahu Chapter(\u6c99\u72d0\u7bc7), Wangquan Chapter(\u738b\u6743\u7bc7), Yuehong Chapter(\u6708\u7ea2\u7bc7), Beishan Yaodi Chapter(\u5317\u5c71\u5996\u5e1d\u7bc7), Qianyan Chapter(\u5343\u989c\u7bc7), Nanguo Chapter(\u5357\u56fd\u7bc7), Zhuye Chapter(\u7af9\u4e1a\u7bc7) and Weisheng Chapter(\u5c3e\u751f\u7bc7). Each chapter tells a story and they jointly promote the development of the main line plot.\n\n=== Shahu Chapter ===\nEpisode: 1-13\n\nOP: Love You Ready, Love Me Ready (\u7231YOU READY\uff0c\u7231\u6211READY)\n\nED: Dongliu (\u4e1c\u6d41, means water flows eastward)\n\nThis chapter mainly tells about the love story about the Fan Yunfei(\u68b5\u4e91\u98de) who is the Prince of Xixiyu(\u897f\u897f\u57df) and Li Xueyang(\u5389\u96ea\u626c) whose reincarnation was called Ice General(\u51b0\u5c06\u519b). Fan Yunfei is a sand fox spirit but he isn't afraid of water. He has  bad stammer. In Li's reincarnation, Fan wanted her to marry him but she refused 99 times. Fortunately, he succeeded. They used Qiannian Yushuizhu(\u5343\u5e74\u5fa1\u6c34\u73e0, has amazing power to control water) as their magic weapon of love continuation.  In the end, with the help of Bai Yuechu, Fan inherits the throne of Xixiyu.\n\n=== Wangquan Chapter ===\nEpisode: 14-27\n\nOP: Meng Huihuan(\u68a6\u56de\u8fd8, means dream about returning)\n\nED: Dongliu\n\nThis chapter mainly tells about the love story of Wangquan Fugui and a spider spirit Qingtong(\u6e05\u77b3, the name has meaning about the eyes which can see world clearly). Wangquan family was the first family to use magic weapon to fight against spirits. Wangquan Fugui was the most talented in his family. He could use Wangquan Sword well. His father Wangquan Baye(\u738b\u6743\u9738\u4e1a), who was the host of the family, asked him to kill any spirits and could not get out of mansion. But when a spider spirit came to his mansion, he didn't kill her. The spirit knew he couldn't go anywhere so she used her arachnoid to weave paintings which showed beautiful scenery outside of his mansion. Unfortunately, Wangquan Fugui's shimei, Feng Tingyun(\u98ce\u5ead\u4e91) knew what happened and told everything to Wangquan Baye. Baye asked Fugui to kill the spirit at once, but Fugui didn't follow him and ready to get out of the mansion with the spirit. He was badly wounded in the yard. However, Dongfang Yuechu came here in time and saved him, while Tushan Honghong fighting against 500 guards out of the mansion.\n\n=== Yuehong Chapter ===\nEpisode: 28-48(including Beishan Yaodi Chapter)\n\nOP: Ruodang Laishi(\u82e5\u5f53\u6765\u4e16, means if we meet in afterlife)\n\nED: Lingzhou(\u94c3\u821f, means bell rings and boat floats)   Junlu(\u541b\u8def, means the way you walk, in Beishan Yaodi Chapter)\n\nThis is one of the most important chapters. It tells about the love between Dongfang Yuechu and Tushan Honghong. Tushan Honghong was the king of Tushan. Dongfang Yuechu came from Dongfang family, whose members could use magic kill-spirit fire, Chunzhi Yangyan(\u7eaf\u8d28\u9633\u708e, means pure sun fire). His parents were killed by Huhe Shuangxian(\u864e\u9e64\u53cc\u4ed9, a two-spirits group) so he ran to Tushan and was saved by Tushan Honghong. After that, Tushan was attacked by Jinmian Huoshen(\u91d1\u9762\u706b\u795e, King of fire , real name is Jin Renfeng(\u91d1\u4eba\u51e4)). Jin's Chunzhi Yangyan was so strong that Tushan couldn't fight against him. However, Dongfang Yuechu asked Tushan Honghong to use her hand through his heart and he kissed her immediately. Honghong got strong spirit power from that and finally Jin failed. After the attack. Yuechu used his diluted blood to wash her hands so that she was not afraid of Chunzhi Yangyan. Yuechu loved Honghong so much that he was ready to confess to her on Double Seventh Festival which day that Niulang and Zhinu meet each other every year in Chinese traditional legend. After Tushan Rongrong knew his idea, she told him that Honghong often went to Shuangsheng Mountain(\u53cc\u751f\u5cf0) on that festival. When Yuechu arrived there, he just saw Honghong walked into an icy cave and sat in front of a dead little Taoist body. Honghong knew he was nearby and said something to him on propose. Then Yuechu knew that she and Rongrong were caught by two Taoists when they were young. But while the elder one sleeping, the little one wanted to save these two fox spirits. Honghong remaineded of something that be told by an elder fox spirit, she just thought the little one would kill her so she uesd her hand through his heart but she understood his real motivation at that moment. The little Taoist told her his thoughts and died soon. Honghong was very guilty and it left a shadow in her heart. She couldn't do what she wanted even couldn't love others. Yuechu was distressed after knowing the fact and left Tushan for 50 years.\n\nIn these years, the friendship between people and spirits became worse than before. Yuechu experienced something and became much stronger. He became the host of Yiqi Taoist League. At that time, people still thought Tushan fox spirits often killed people. Only Yuechu and Wangquan Fugui knew the fact: the black fox spirits(\u9ed1\u72d0) broke the peace. Yuechu and Fugui talked about how to let people belive the fact. Yuechu pretended to believe black fox spirits' plan and fight Honghong in order to lure black fox spirit to show up. But he knew the end clearly, it's a bet of his whole life. After fighting, the Queen of balck fox spirit showed up. Honghong knew his real idea and was moved. Yuechu left Tushan 50 years ago just wanted to achieve her dream, a dream about the peace between people and spirits. Until this moment, Honghong expressed her love to Yuechu and Yuechu got his magic weapon, Xukong Zhilei(\u865a\u7a7a\u4e4b\u6cea, means the tears of void). The Queen really wanted to get it, she seriously hurt Yuechu. But the magic weapon had been become Yuechu and Honghong's magic weapon of love continuation in their heart. The Queen couldn't kill them if she wanted the complete weapon. Honghong started the love continuation, Dongfang Yuechu was dead and Tushan Honghong lost her spirit power and memory, become Tushan Susu.\n\nIn Tushan Theater, people knew what happened 500 years ago in Bai Yuechu's reincarnation and Tushan Susu. But Tushan was attacked by black fox spirits, Beishan Yaodi(real name is Shi Kuan(\u77f3\u5bbd)) and Tushan Meimei(\u6d82\u5c71\u7f8e\u7f8e, a member of black fox spirits). Tushan Susu became Honghong temporarily but was controlled by Meimei. To save her, Bai and Rongrong came into her dream and finally saw Honghong and Dongfang Yuechu's soul. Susu became back. With the help of Bai and Susu's help, Shi Kuan was back to normal and accepted a girl whose reincarnation was the Princess of Yuyao Guo(\u5fa1\u5996\u56fd) and Shi was her lover in their former life.\n\nAll of spirits in Tushan and people in Yiqi Taoist League wanted Tushan Honghong could really be back, so Tushan Yaya asked Bai to marry Susu. At the wedding ceremony. Bai sightly asked Susu whether she wanted to be a real excellent matchmaker or not. Susu was exhuasted but finally she expressed her real idea that she didn't want to marry, she just wanted to be an excellent matchmaker. Bai kissed her and she bacame Honghong flying away. Yaya wanted to catch her but Bai said if she did that he would die again. \"If you don't force us to marry right now, I can promise you, I will bring her back, and as she becomes the best matchmaker, I'll woo her, and make her truly fall in love with me.\"\n\n== Anime ==\nThe Japanese version was broadcast in [[Tokyo MX]] between 2017-7-1 and 2017-12-16.<ref>{{Cite web|url=http://enmusuyouko.com/news-01/|title=\u7e01\u7d50\u3073\u306e\u5996\u72d0\u3061\u3083\u3093-2017\u5e747\u67081\u65e5\u30aa\u30f3\u30a8\u30a2\u958b\u59cb\uff01\uff01 {{!}} \u30a2\u30cb\u30e1 \u300c\u7e01\u7d50\u3073\u306e\u5996\u72d0\u3061\u3083\u3093\u300d \u516c\u5f0f\u30b5\u30a4\u30c8|language=ja|access-date=2020-02-15}}</ref>\n\nSince Zhuye Chapter, the broadcasting rights only belongs to Tencent Video.<ref>{{Cite web|url=https://ent.huanqiu.com/article/9CaKrnKiAqD|title=\u56fd\u6f2b\u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300b\"\u7af9\u4e1a\u7bc7\"\u817e\u8baf\u72ec\u5bb6\u5f00\u64ad|website=ent.huanqiu.com|access-date=2020-02-15}}</ref>\n\n== Mobile Game ==\nThe game was operated by [[Tencent Game]] Aurora Studios and tested publicly in November 2019.<ref>{{Cite web|url=http://www.9game.cn/hyxhn/3907653.html|title=\u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300b\u4ec0\u4e48\u65f6\u5019\u516c\u6d4b \u5168\u5e73\u53f0\u516c\u6d4b\u65f6\u95f4\u516c\u5e03_\u72d0\u5996\u5c0f\u7ea2\u5a18\u624b\u6e38_\u4e5d\u6e38\u624b\u673a\u6e38\u620f|website=www.9game.cn|access-date=2020-02-15}}</ref> It uses [[Unity3D]] as its engine and game type is [[MMORPG]] with traditional Chinese style.<ref>{{Cite web|url=https://cloud.tencent.com/developer/news/510964|title=\u72d0\u5996\u5c0f\u7ea2\u5a18\u624b\u6e38\uff1a\u56fd\u6f2b\u98ce\u683c\u7684RPG\u7c7b\u6e38\u620f\uff0c\u6e38\u620f\u4ee3\u5165\u611f\u8d85\u5f3a\uff01 - \u4e91+\u793e\u533a - \u817e\u8baf\u4e91|website=cloud.tencent.com|access-date=2020-02-15}}</ref>\n\n== Influence ==\nWhen Fox Spirit Matchmaker was appeared, it has had a lot of impact, there have high clicks on many major platforms.<ref>{{Cite web|url=http://www.sohu.com/a/322224170_565158|title=\u72d0\u5996\u5c0f\u7ea2\u5a18\u64ad\u653e\u91cf\u7a81\u783450\u4ebf\uff0c\u9605\u6587\u52a8\u753b\u70b9\u51fb\u91cf\u7834\u767e\u4ebf\uff0c\u56fd\u6f2bIP\u664b\u7ea7\u4e0b\u4e00\u7ad9\uff1aIP\u884d\u751f\u6388\u6743\u5e02\u573a_\u4e2d\u56fd|website=www.sohu.com|language=en|access-date=2020-02-19}}</ref> To enrich Chinese culture industry and improve cultural travel level, Tencent has carried out many multi-faceted cooperation.<ref>{{Cite web|url=https://k.sina.cn/article_6216747334_1728c094601900j6oe.html|title=\u5e03\u5c40\u5168\u56fd\u3001\u64ac\u52a8\u5168\u7f51\uff0c\u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300bIP\u5f71\u54cd\u529b\u5230\u5e95\u6709\u591a\u5f3a\uff1f|last=sina_mobile|date=2019-05-17|website=k.sina.cn|access-date=2020-02-19}}</ref>\n\nIn December 2018, Hangzhou Animation Bus officially joined hands with Tencent Animation to launch No.51 \"pure love bus\". The main character Tushan Susu, was awarded the \"animation public transport image messenger\" official status. In May 2019, the \"Fox Spirit Matchmaker\" large-scale pure love parade series of activities opened in Hangzhou.<ref name=\":0\">{{Cite web|url=http://www.sohu.com/a/341498874_$%7Barticle.mediaId%7D|title=\u6765\u676d\u5dde\uff0c\u8d70\u8fdb\u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300b\u7684\u4e16\u754c_\u52a8\u6f2b|website=www.sohu.com|access-date=2020-02-19}}</ref>\n\nOn September 16, 2019, Hangzhou Lin'an District Government, Tencent Animation, Hangzhou Hongyi Investment Group Co., Ltd. held a signing ceremony in Hangzhou, announced that in Hangzhou Lin'an District Heqiao ancient town and Liuxi river area, with the \"Fox Spirit Matchmaker\" as the core, the three parties jointly build China's first National manhua theme tourist attractions, the total project projection area of more than 6 square kilometers. The project plans to restore the scenes and characters in the original Fox Spirit Matchmaker through large-scale real-life construction.<ref name=\":0\" />\n\nIn the second half of 2019, Tencent created a \"Red Line Inn\" live experience area with the theme of \"pure love\" in Yulong Snow Mountain, Lijiang, Yunnan Province. Tushan Susu was also awarded the title of \"Lijiang City Smart Arts and Animation Ambassador\" by Lijiang City Culture and Tourism Bureau.<ref>{{Cite web|url=http://globaltraveler.cn/info.aspx?id=26380&typeid=16|title=\u5f53\u72d0\u5996\u5c0f\u7ea2\u5a18\u9047\u89c1\u4e3d\u6c5f\u7389\u9f99\u96ea\u5c71|website=globaltraveler.cn|access-date=2020-02-19}}</ref>\n\n== Award Records ==\n\n* China International Comics Festival Golden Dragon Award \"2017 Best Comics\".<ref>[https://m.weibo.cn/status/4195700126169390 \u5165\u9009\u201c\u4e2d\u56fd\u4e8c\u6b21\u5143\u6307\u65702017\u5e74\u5ea6\u6700\u4f73\u6f2b\u753b\u201d\u5566] \u72d0\u5996\u5c0f\u7ea2\u5a18\u5b98\u65b9[[\u65b0\u6d6a\u5fae\u535a]] 2018-01-22[2018-05-24]</ref><ref name=\"\u7372\u591a\u734e2\">[https://mp.weixin.qq.com/s/Wzu2YmEVi_HCmm0Q6WWn4A \u62ff\u5956\u62ff\u5230\u624b\u8f6f\uff01\u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300b\u8363\u83b7\u661f\u8000\u76db\u5178\u201c\u9b45\u529b\u865a\u62df\u5076\u50cf\u5956\u201d] \u9a30\u8a0a\u52d5\u6f2b\u5b98\u65b9[[\u5fae\u4fe1]] 2019-01-16[2019-01-17]</ref>\n* 2017 ACG Fengshen Shengdian Won \"Most Fan Appeal 2D Animation Works\".<ref>[http://www.hxnews.com/news/dmyx/dmzx/dhxw/201707/21/1263647.shtml \u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300b\u7c89\u4e1d\u597d\u8bc4\u5982\u6f6e \u6df1\u53d7\u5927\u4f17\u54c1\u724c\u7684\u9752\u7750] \u6d77\u5cfd\u7db2 2017-07-21[2019-05-15]</ref>\n* China's game list \"Popular Comics of the Year\" award.<ref name=\"\u7372\u591a\u734e2\"/>\n* The 3rd Golden Number Entertainment Award and 2018 Outstanding Works of China's Entertainment Industry.<ref name=\"\u7372\u591a\u734e2\" />\n* 2018 China Entertainment Industry Best Original Works Award.<ref name=\"\u7372\u591a\u734e2\" />\n* 2018 China's entertainment industry the second \"Stars share virtual stars fashion festival\" Tushan Susu won the China Virtual Idol Glamour Award for best original works.<ref name=\"\u7372\u591a\u734e2\" /><ref>[https://m.weibo.cn/detail/4327237555393119 \u6d82\u5c71\u82cf\u82cf\u83b7\u5f97\u4e2d\u56fd\u865a\u62df\u5076\u50cf\u9b45\u529b\u5956] \u72d0\u5996\u5c0f\u7ea2\u5a18\u5b98\u65b9[[\u65b0\u6d6a\u5fae\u535a]] 2019-01-11[2019-01-12]</ref>\n* 2018 Outstanding Original Work Award.<ref>[https://m.weibo.cn/detail/4327354585215961 \u4e2d\u56fd\u6587\u5a31\u4ea7\u4e1a\u8d8b\u52bf\u9ad8\u5cf0\u8bba\u575b\u66a8\u7b2c\u4e09\u5c4a\u91d1\u6570\u5a31\u5956\u4e0a\uff0c\u300a\u72d0\u5996\u5c0f\u7ea2\u5a18\u300b\u83b7\u5f97\u4e86\u30102018\u5e74\u5ea6\u5353\u8d8a\u539f\u521b\u4f5c\u54c1\u5956\u3011] \u9a30\u8a0a\u52d5\u6f2b\u5b98\u65b9[[\u65b0\u6d6a\u5fae\u535a]] 2019-01-11[2019-01-12]</ref>\n\n== References ==\n\n* [https://v.qq.com/detail/0/0sdnyl7h86atoyt.html Fox Spirit Matchmaker Tencent Video site]\n* [https://ac.qq.com/Comic/comicInfo/id/518333 Fox Spirit Matchmaker Tencent Comics site]\n* [http://www.haoliners.net/ Haoliners Animation Leagur official site]\n* [http://www.garden-culture.net/ Garden-Culture official site]\n\n== External links ==\n<references />\n\n\n\n[[Category:Manhua titles]]\n", "name_user": "Perimeter Chou", "label": "safe", "comment": "", "url_page": "//en.wikipedia.org/wiki/Fox_Spirit_Matchmaker"}
