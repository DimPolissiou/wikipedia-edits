{"title_page": "Shire of Torres", "text_new": "{{Use Australian English|date=August 2014}}\n{{Use dmy dates|date=August 2014}}\n{{Infobox Australian place | type = lga\n| name     = Shire of Torres\n| state    = qld\n| image    = \n| caption  = \n| pop      = 3848\n| pop_year = 2018\n| pop_footnotes = <ref name=ABSLGA>{{cite web|title=3218.0 \u2013 Regional Population Growth, Australia, 2017-18: Population Estimates by Local Government Area (ASGS 2018), 2017 to 2018|url=http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/3218.02017-18|website=Australian Bureau of Statistics|publisher=[[Australian Bureau of Statistics]]|date=27 March 2019|accessdate=25 October 2019|archive-url=https://web.archive.org/web/20190327110730/http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/3218.02017-18|archive-date=27 March 2019|url-status=live}} Estimated resident population, 30 June 2018.</ref>\n| area     = 884\n| area_footnotes = <ref name=ABSLGA/>\n| est      = 1974\n| seat     = [[Thursday Island, Queensland|Thursday Island]]\n| mayor    = Vonda Malone\n| region   = [[Far North Queensland]]\n| logo     = Torres Logo.png\n| logo_upright   = 1.2\n| url      = http://www.torres.qld.gov.au/\n| stategov = [[Electoral district of Cook|Cook]]\n| fedgov   = [[Division of Leichhardt|Leichhardt]]\n| near-nw  = ''[[Papua New Guinea]]''\n| near-n   = ''[[Torres Strait Island Region]]''\n| near-ne  = ''[[Papua New Guinea]]''\n| near-w   = ''[[Torres Strait]]''\n| near-e   = ''[[Coral Sea]]''\n| near-sw  = ''[[Gulf of Carpentaria]]''\n| near-s   = [[Shire of Cook|Cook]]\n| near-se  = ''[[Coral Sea]]''\n}}\n\nThe '''Shire of Torres''' is a [[Local government in Australia|local government area]] located in [[Far North Queensland]], Australia, covering large sections of the [[Torres Strait Islands]] and the northern tip of [[Cape York Peninsula]] north of [[11th parallel south|11\u00b0S latitude]]. It holds two distinctions\u2014it is the northernmost Local Government Area in Australia, and is the only one to abut an international border \u2013 it is at one point just {{convert|73|km|mi|0}} from [[Papua New Guinea]]. It is administered from [[Thursday Island, Queensland|Thursday Island]].\n\n==History==\n[[File:Torres Division, March 1902.jpg|thumb|Map of Torres Division and adjacent local government areas, March 1902]]\nThe [[Hann Division]] was created on 11 November 1879 as one of 74 divisions around Queensland under the ''Divisional Boards Act 1879''.<ref name=dba1879>{{Gazette QLD|title=Proclamation [Hann Division constituted]|volume=25|page=1008|date=11 November 1879}}</ref><ref name=hd>{{cite QSA Agency|936|Hann Divisional Board|10 September 2013}}</ref> On 30 October 1885, the coastal islands of [[Hann Division]] were separated to create [[Torres Division]].<ref>{{Gazette QLD|title=Proclamation [Torres Division constituted]|volume=37|page=1508|date=31 October 1885}}</ref><ref>{{Gazette QLD|title=Proclamation [Hann Division amended]|volume=37|page=1508|date=31 October 1885}}</ref>\n\nWith the passage of the ''Local Authorities Act 1902'', Balonne Division became Shire of Balonne on 31 March 1903.\n\nMost of the islands were unincorporated until the 1970s, but Thursday Island had a town council going back to 1912. In 1939, the ''Torres Strait Islanders Act'' was passed by the Federal Government, allowing for a form of local government on each island. On 27 January 1942, after the fall of Singapore during [[World War II]], the Australian government gave the order to evacuate all civilians from Thursday Island, which now became a military base. In 1946, civilians started returning to the island. In 1952 the Council was dissolved and replaced by administrators.\n\nOn 9 May 1974, the Shire was established and gazetted by the [[Joh Bjelke-Petersen|Bjelke-Petersen]] government, in an effort to gain leverage on a boundary dispute between the Australian and [[Papua New Guinea]] governments.<ref>Hughes, Colin A. (Dec 1974.) \"Political Chronicles (May\u2013August 1974)\", ''Australian Journal of Politics and History'' 20(3), University of Queensland Press, p.390.</ref> It was created from the following parts:<ref>{{cite book|title=2411.0 Population And Dwellings : Summary Tables : Queensland|author=[[Australian Bureau of Statistics]]|location=[[Canberra]]|work=1976 Census of Population and Housing|isbn=0-642-90405-7}}</ref> However, elective government was not restored to the Shire until March 1991\u2014along with the Shires of [[Shire of Mornington (Queensland)|Mornington]], [[Shire of Cook|Cook]] and [[Shire of Aurukun|Aurukun]], it was administered by the Local Government Department's Far North regional office.<ref>Australian Bureau of Statistics, Queensland Office. (1986) ''Queensland Year Book'' (under \"Local Government\")</ref>\n\n{| class=wikitable\n|-\n! rowspan=2 width=50% | Original entity\n! colspan=2 | Area transferred\n! rowspan=2 width=100 | Population<br />transferred\n|-\n! km<sup>2</sup>\n! sq mi\n|-\n| Thursday Island Town \n| align=right | 3.23 \n| align=right | 1.25  \n| align=center | 2,237\n|-\n| Cook Shire\n| align=right | 2041.22\n| align=right | 788.12  \n| align=center | 1,120\n|-\n| Unincorporated islands\n| align=right | 751.55\n| align=right | 290.18  \n| align=center | 2,909\n|}\n\nWhen the ''Community Services (Torres Strait) Act 1984'' was enacted, 15 island councils were created. Each was responsible for local basic utilities and services, and worked with the Queensland Police to provide for community police officers\u2014hence extending well beyond the normal functions of local government.<ref>{{cite book|last=Kaye|first=Stuart|year=1997|title=The Torres Strait|pages=12\u201315|publisher=Martinus Nijhoff Publishers|location=[[Boston]]|isbn=90-411-0506-9}}</ref> The remaining areas were governed under the ''Local Government Act'' like most other parts of Queensland.\n\nIn March 1991, elected Council status was restored by the new [[Wayne Goss|Goss]] [[Australian Labor Party (Queensland Branch)|Labor]] government, and in 1994 Pedro Stephen became its first and so far only mayor.<ref>{{cite web|url=http://www.torres.qld.gov.au/council/Publications/Corporate%20Plan%202006-2010%20adopted%20Min%2006-06-11.pdf|title=Corporate Plan 2006\u20132010|author=Torres Shire Council|date=20 June 2006|accessdate=31 March 2008 |archiveurl = https://web.archive.org/web/20071024151033/http://www.torres.qld.gov.au/council/Publications/Corporate%20Plan%202006-2010%20adopted%20Min%2006-06-11.pdf <!-- Bot retrieved archive --> |archivedate = 24 October 2007}}</ref>\n\n==Geography and jurisdiction==\nSince 1984, the Shire of Torres only administers those sections of its area which are not autonomous. It is effectively colocated with the [[Northern Peninsula Area Region]], which covers a number of [[Deed of Grant in Trust]] (DOGIT) areas on the peninsula, and the [[Torres Strait Island Region]], which replaced 15 autonomous island councils in March 2008. During statewide local government reform in 2007\u201308, the Queensland Government considered merging the Shire with the other areas, but felt that having one area subject to three different types of legislation would be inefficient, and the Shire was one of a handful to remain unchanged through the process.<ref>{{cite book|title=Report of the Local Government Reform Commission|date=July 2007|isbn=1-921057-10-6|publisher=State of Queensland|chapterurl=http://www.localgovernment.qld.gov.au/docs/local_govt/stronger-councils/13_AboriginalAndTorresStrait.pdf|chapter=Aboriginal and Torres Strait Island local government|pages=59\u201365|accessdate=31 March 2008|url-status=dead|archiveurl=https://web.archive.org/web/20080725052557/http://www.localgovernment.qld.gov.au/docs/local_govt/stronger-councils/13_AboriginalAndTorresStrait.pdf|archivedate=25 July 2008|df=dmy-all}}</ref>\n\nThe shire covers a land area of {{convert|1856.9|km2|sqmi|1}}, of which it controls and administers {{convert|885.9|km2|sqmi|1}} under the ''Local Government Act 1993''. Areas under its jurisdiction include:<ref>{{cite web|url=http://www.torres.qld.gov.au/council/index.shtml|title=Torres Shire Council (About The Shire)|author=Torres Shire Council|accessdate=31 March 2008 |archiveurl = https://web.archive.org/web/20080317033459/http://www.torres.qld.gov.au/council/index.shtml <!-- Bot retrieved archive --> |archivedate = 17 March 2008}}</ref>\n\n* [[Thursday Island, Queensland|Thursday Island]] (Waibene)\n* [[Horn Island, Queensland|Horn Island]] (Narupai) and its [[Horn Island Airport|airport]]\n* [[Prince of Wales Island (Queensland)|Prince of Wales Island]] (Muralug)\n* [[Albany Island (Queensland)|Albany Island]] and [[Manar Group]]\n* [[Booby Island (Queensland)|Booby Island]]\n* Dayman Island\n* Entrance Island\n* Friday Island (Gealug)\n* Goods Island (Palilug)\n* Little Adolphus Island\n* [[Mabuiag Island]]\n* [[Mount Adolphus Island]]\n* Packe Island\n* [[Yeta (Port Lihou Island), Queensland|Port Lihou Island]]\n* [[Punsand]], including [[Possession Island (Queensland)|Possession Island]]\n* [[Somerset, Queensland|Somerset]]\n* [[Turtle Head Island (Queensland)|Turtle Head Island]]\n* Wednesday Island (Mawai)\n\nTravel in the shire is generally by boat.\n\n==Population==\nThe population of the Shire of Torres, along with Cook, Aurukun and Mornington, have been singled out by the [[Australian Bureau of Statistics]] (ABS), who conduct the quinquennial census, as particularly difficult to measure accurately. Reasons for this include cultural and language barriers, transport and geographical spread of the population, who are located in isolated communities and on small islands. As such, all figures are likely to be lower than the actual population on the census date.\n\nIn addition, until 1 July 2002, the Australian Bureau of Statistics included the Island and DOGIT councils within the Shire of Torres statistical local area. Information for the reduced Shire back to 1996 has been provided on the ABS website through the Time Series Profile.\n\n{| class=\"wikitable\"\n|-\n! Year\n! Population\n! Combined<br />population\n|- \n| 1974 || || 6,266\n|- \n| 1976 || || 6,275 \n|- \n| 1981 || || 6,131 \n|- \n| 1986 || || 6,821\n|- \n| 1991 || || 8,233\n|-\n| 1996 || 3,282 || 8,572\n|-\n| 2001 || 4,097 || 9,698\n|-\n| 2006 || 3,457 || 9,684\n|}\n\n==Mayor and council==\nUntil the 2007\u201308 reforms, the council consisted of seven councillors, but this was reduced to four. A mayor is elected separately by the entire Shire. Meetings are held on the third Tuesday of each month at the Torres Shire Council offices at Douglas Street, [[Thursday Island, Queensland|Thursday\n\n\nOn 15 March 2008, Pedro Stephen, an ordained [[Full Gospel]] minister first elected in 1994 and the first ever [[Torres Strait Islanders|Torres Strait Islander]] to be elected as a mayor of a local government area, was re-elected with almost 50% of the vote.<ref>{{cite web|url=http://www.ecq.qld.gov.au/elections/local/lg2008/TorresShireCouncil/results/mayoral/summary.html|title=2008 Torres Shire Council \u2013 Mayoral Election \u2013 Election Summary|author=Electoral Commission Queensland|date=31 March 2008|accessdate=31 March 2008|url-status=dead|archiveurl=https://web.archive.org/web/20080727153533/http://www.ecq.qld.gov.au/elections/local/lg2008/TorresShireCouncil/results/mayoral/summary.html|archivedate=27 July 2008|df=dmy-all}}</ref>\n\n== Mayors ==\n{{Expand list|date=November 2017}}\n* 2008: Napau Pedro Stephen <ref>{{Cite web|url=http://results.ecq.qld.gov.au/elections/local/LG2008/TorresShireCouncil/results/mayoral/summary.html|title=2008 Torres Shire Council - Mayoral Election - Election Summary|website=results.ecq.qld.gov.au|access-date=2017-12-04|archive-url=https://web.archive.org/web/20190407053946/http://results.ecq.qld.gov.au/elections/local/lg2008/TorresShireCouncil/results/mayoral/summary.html|archive-date=7 April 2019|url-status=live|df=dmy-all}}</ref>\n* 2012: Napau Pedro Stephen <ref>{{Cite web|url=http://results.ecq.qld.gov.au/elections/local/LG2012/TorresShireCouncil/results/mayoral/summary.html|title=2012 Torres Shire Council - Mayoral Election - Election Summary|website=results.ecq.qld.gov.au|access-date=2017-12-04|archive-url=https://web.archive.org/web/20190322205006/http://results.ecq.qld.gov.au/elections/local/LG2012/TorresShireCouncil/results/mayoral/summary.html|archive-date=22 March 2019|url-status=live|df=dmy-all}}</ref>\n* 2016: Vonda Malone <ref>{{Cite web|url=http://results.ecq.qld.gov.au/elections/local/LG2016/TorresShireCouncil/results/mayoral/summary.html|title=2016 Torres Shire Council - Mayoral Election - Election Summary|website=results.ecq.qld.gov.au|access-date=2017-12-04|archive-url=https://web.archive.org/web/20190317043715/http://results.ecq.qld.gov.au/elections/local/LG2016/TorresShireCouncil/results/mayoral/summary.html|archive-date=17 March 2019|url-status=live|df=dmy-all}}</ref><ref>{{Cite web|url=http://www.torres.qld.gov.au/mayor|title=Mayor - Torres Shire Council|website=www.torres.qld.gov.au|access-date=2020-02-14|archive-url=https://web.archive.org/web/20191021043345/http://www.torres.qld.gov.au/mayor|archive-date=21 October 2019|url-status=live}}</ref>\n\n== Library ==\nThe Torres Shire Council operates Ngulaig Meta Municipal Library at 121 Douglas Street on Thursday Island.<ref>{{Cite web|url=http://plconnect.slq.qld.gov.au/networking/directory-of-public-libraries/services/torres_shire|title=Torres Shire Council|date=20 September 2016|website=Public Libraries Connect|archive-url=https://web.archive.org/web/20180205055837/http://plconnect.slq.qld.gov.au/networking/directory-of-public-libraries/services/torres_shire|archive-date=5 February 2018|url-status=live|access-date=5 February 2018}}</ref>\n\n==See also==\n{{stack|{{Portal|Queensland}}}}\n* [[List of Torres Strait Islands]]\n* [[Torres Strait Island Region]]\n* [[Torres Strait Regional Authority]]\n\n==References==\n{{reflist}}\n\n{{Shire of Torres}}\n{{Torres Strait}}\n{{Far North Queensland}}\n{{Local Government Areas of Queensland}}\n\n{{coord|10|35|S|142|12|E|region:AU-QLD_type:adm2nd_source:kolossus-dewiki|display=title}}\n\n{{DEFAULTSORT:Torres Shire}}\n[[Category:Local government areas of Queensland]]\n[[Category:Far North Queensland]]\n[[Category:1885 establishments in Australia]]\n[[Category:Queensland in World War II]]\n[[Category:Shire of Torres]]\n", "text_old": "{{Use Australian English|date=August 2014}}\n{{Use dmy dates|date=August 2014}}\n{{Infobox Australian place | type = lga\n| name     = Shire of Torres\n| state    = qld\n| image    = \n| caption  = \n| pop      = 3848\n| pop_year = 2018\n| pop_footnotes = <ref name=ABSLGA>{{cite web|title=3218.0 \u2013 Regional Population Growth, Australia, 2017-18: Population Estimates by Local Government Area (ASGS 2018), 2017 to 2018|url=http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/3218.02017-18|website=Australian Bureau of Statistics|publisher=[[Australian Bureau of Statistics]]|date=27 March 2019|accessdate=25 October 2019|archive-url=https://web.archive.org/web/20190327110730/http://www.abs.gov.au/AUSSTATS/abs@.nsf/DetailsPage/3218.02017-18|archive-date=27 March 2019|url-status=live}} Estimated resident population, 30 June 2018.</ref>\n| area     = 884\n| area_footnotes = <ref name=ABSLGA/>\n| est      = 1974\n| seat     = [[Thursday Island, Queensland|Thursday Island]]\n| mayor    = Vonda Malone\n| region   = [[Far North Queensland]]\n| logo     = Torres Logo.png\n| logo_upright   = 1.2\n| url      = http://www.torres.qld.gov.au/\n| stategov = [[Electoral district of Cook|Cook]]\n| fedgov   = [[Division of Leichhardt|Leichhardt]]\n| near-nw  = ''[[Papua New Guinea]]''\n| near-n   = ''[[Torres Strait Island Region]]''\n| near-ne  = ''[[Papua New Guinea]]''\n| near-w   = ''[[Torres Strait]]''\n| near-e   = ''[[Coral Sea]]''\n| near-sw  = ''[[Gulf of Carpentaria]]''\n| near-s   = [[Shire of Cook|Cook]]\n| near-se  = ''[[Coral Sea]]''\n}}\n\nThe '''Shire of Torres''' is a [[Local government in Australia|local government area]] located in [[Far North Queensland]], Australia, covering large sections of the [[Torres Strait Islands]] and the northern tip of [[Cape York Peninsula]] north of [[11th parallel south|11\u00b0S latitude]]. It holds two distinctions\u2014it is the northernmost Local Government Area in Australia, and is the only one to abut an international border \u2013 it is at one point just {{convert|73|km|mi|0}} from [[Papua New Guinea]]. It is administered from [[Thursday Island, Queensland|Thursday Island]].\n\n==History==\n[[File:Torres Division, March 1902.jpg|thumb|Map of Torres Division and adjacent local government areas, March 1902]]\nThe [[Hann Division]] was created on 11 November 1879 as one of 74 divisions around Queensland under the ''Divisional Boards Act 1879''.<ref name=dba1879>{{Gazette QLD|title=Proclamation [Hann Division constituted]|volume=25|page=1008|date=11 November 1879}}</ref><ref name=hd>{{cite QSA Agency|936|Hann Divisional Board|10 September 2013}}</ref> On 30 October 1885, the coastal islands of [[Hann Division]] was separated to create [[Torres Division]].<ref>{{Gazette QLD|title=Proclamation [Torres Division constituted]|volume=37|page=1508|date=31 October 1885}}</ref><ref>{{Gazette QLD|title=Proclamation [Hann Division amended]|volume=37|page=1508|date=31 October 1885}}</ref>\n\nWith the passage of the ''Local Authorities Act 1902'', Balonne Division became Shire of Balonne on 31 March 1903.\n\nMost of the islands were unincorporated until the 1970s, but Thursday Island had a town council going back to 1912. In 1939, the ''Torres Strait Islanders Act'' was passed by the Federal Government, allowing for a form of local government on each island. On 27 January 1942, after the fall of Singapore during [[World War II]], the Australian government gave the order to evacuate all civilians from Thursday Island, which now became a military base. In 1946, civilians started returning to the island. In 1952 the Council was dissolved and replaced by administrators.\n\nOn 9 May 1974, the Shire was established and gazetted by the [[Joh Bjelke-Petersen|Bjelke-Petersen]] government, in an effort to gain leverage on a boundary dispute between the Australian and [[Papua New Guinea]] governments.<ref>Hughes, Colin A. (Dec 1974.) \"Political Chronicles (May\u2013August 1974)\", ''Australian Journal of Politics and History'' 20(3), University of Queensland Press, p.390.</ref> It was created from the following parts:<ref>{{cite book|title=2411.0 Population And Dwellings : Summary Tables : Queensland|author=[[Australian Bureau of Statistics]]|location=[[Canberra]]|work=1976 Census of Population and Housing|isbn=0-642-90405-7}}</ref> However, elective government was not restored to the Shire until March 1991\u2014along with the Shires of [[Shire of Mornington (Queensland)|Mornington]], [[Shire of Cook|Cook]] and [[Shire of Aurukun|Aurukun]], it was administered by the Local Government Department's Far North regional office.<ref>Australian Bureau of Statistics, Queensland Office. (1986) ''Queensland Year Book'' (under \"Local Government\")</ref>\n\n{| class=wikitable\n|-\n! rowspan=2 width=50% | Original entity\n! colspan=2 | Area transferred\n! rowspan=2 width=100 | Population<br />transferred\n|-\n! km<sup>2</sup>\n! sq mi\n|-\n| Thursday Island Town \n| align=right | 3.23 \n| align=right | 1.25  \n| align=center | 2,237\n|-\n| Cook Shire\n| align=right | 2041.22\n| align=right | 788.12  \n| align=center | 1,120\n|-\n| Unincorporated islands\n| align=right | 751.55\n| align=right | 290.18  \n| align=center | 2,909\n|}\n\nWhen the ''Community Services (Torres Strait) Act 1984'' was enacted, 15 island councils were created. Each was responsible for local basic utilities and services, and worked with the Queensland Police to provide for community police officers\u2014hence extending well beyond the normal functions of local government.<ref>{{cite book|last=Kaye|first=Stuart|year=1997|title=The Torres Strait|pages=12\u201315|publisher=Martinus Nijhoff Publishers|location=[[Boston]]|isbn=90-411-0506-9}}</ref> The remaining areas were governed under the ''Local Government Act'' like most other parts of Queensland.\n\nIn March 1991, elected Council status was restored by the new [[Wayne Goss|Goss]] [[Australian Labor Party (Queensland Branch)|Labor]] government, and in 1994 Pedro Stephen became its first and so far only mayor.<ref>{{cite web|url=http://www.torres.qld.gov.au/council/Publications/Corporate%20Plan%202006-2010%20adopted%20Min%2006-06-11.pdf|title=Corporate Plan 2006\u20132010|author=Torres Shire Council|date=20 June 2006|accessdate=31 March 2008 |archiveurl = https://web.archive.org/web/20071024151033/http://www.torres.qld.gov.au/council/Publications/Corporate%20Plan%202006-2010%20adopted%20Min%2006-06-11.pdf <!-- Bot retrieved archive --> |archivedate = 24 October 2007}}</ref>\n\n==Geography and jurisdiction==\nSince 1984, the Shire of Torres only administers those sections of its area which are not autonomous. It is effectively colocated with the [[Northern Peninsula Area Region]], which covers a number of [[Deed of Grant in Trust]] (DOGIT) areas on the peninsula, and the [[Torres Strait Island Region]], which replaced 15 autonomous island councils in March 2008. During statewide local government reform in 2007\u201308, the Queensland Government considered merging the Shire with the other areas, but felt that having one area subject to three different types of legislation would be inefficient, and the Shire was one of a handful to remain unchanged through the process.<ref>{{cite book|title=Report of the Local Government Reform Commission|date=July 2007|isbn=1-921057-10-6|publisher=State of Queensland|chapterurl=http://www.localgovernment.qld.gov.au/docs/local_govt/stronger-councils/13_AboriginalAndTorresStrait.pdf|chapter=Aboriginal and Torres Strait Island local government|pages=59\u201365|accessdate=31 March 2008|url-status=dead|archiveurl=https://web.archive.org/web/20080725052557/http://www.localgovernment.qld.gov.au/docs/local_govt/stronger-councils/13_AboriginalAndTorresStrait.pdf|archivedate=25 July 2008|df=dmy-all}}</ref>\n\nThe shire covers a land area of {{convert|1856.9|km2|sqmi|1}}, of which it controls and administers {{convert|885.9|km2|sqmi|1}} under the ''Local Government Act 1993''. Areas under its jurisdiction include:<ref>{{cite web|url=http://www.torres.qld.gov.au/council/index.shtml|title=Torres Shire Council (About The Shire)|author=Torres Shire Council|accessdate=31 March 2008 |archiveurl = https://web.archive.org/web/20080317033459/http://www.torres.qld.gov.au/council/index.shtml <!-- Bot retrieved archive --> |archivedate = 17 March 2008}}</ref>\n\n* [[Thursday Island, Queensland|Thursday Island]] (Waibene)\n* [[Horn Island, Queensland|Horn Island]] (Narupai) and its [[Horn Island Airport|airport]]\n* [[Prince of Wales Island (Queensland)|Prince of Wales Island]] (Muralug)\n* [[Albany Island (Queensland)|Albany Island]] and [[Manar Group]]\n* [[Booby Island (Queensland)|Booby Island]]\n* Dayman Island\n* Entrance Island\n* Friday Island (Gealug)\n* Goods Island (Palilug)\n* Little Adolphus Island\n* [[Mabuiag Island]]\n* [[Mount Adolphus Island]]\n* Packe Island\n* [[Yeta (Port Lihou Island), Queensland|Port Lihou Island]]\n* [[Punsand]], including [[Possession Island (Queensland)|Possession Island]]\n* [[Somerset, Queensland|Somerset]]\n* [[Turtle Head Island (Queensland)|Turtle Head Island]]\n* Wednesday Island (Mawai)\n\nTravel in the shire is generally by boat.\n\n==Population==\nThe population of the Shire of Torres, along with Cook, Aurukun and Mornington, have been singled out by the [[Australian Bureau of Statistics]] (ABS), who conduct the quinquennial census, as particularly difficult to measure accurately. Reasons for this include cultural and language barriers, transport and geographical spread of the population, who are located in isolated communities and on small islands. As such, all figures are likely to be lower than the actual population on the census date.\n\nIn addition, until 1 July 2002, the Australian Bureau of Statistics included the Island and DOGIT councils within the Shire of Torres statistical local area. Information for the reduced Shire back to 1996 has been provided on the ABS website through the Time Series Profile.\n\n{| class=\"wikitable\"\n|-\n! Year\n! Population\n! Combined<br />population\n|- \n| 1974 || || 6,266\n|- \n| 1976 || || 6,275 \n|- \n| 1981 || || 6,131 \n|- \n| 1986 || || 6,821\n|- \n| 1991 || || 8,233\n|-\n| 1996 || 3,282 || 8,572\n|-\n| 2001 || 4,097 || 9,698\n|-\n| 2006 || 3,457 || 9,684\n|}\n\n==Mayor and council==\nUntil the 2007\u201308 reforms, the council consisted of seven councillors, but this was reduced to four. A mayor is elected separately by the entire Shire. Meetings are held on the third Tuesday of each month at the Torres Shire Council offices at Douglas Street, [[Thursday Island, Queensland|Thursday\n\n\nOn 15 March 2008, Pedro Stephen, an ordained [[Full Gospel]] minister first elected in 1994 and the first ever [[Torres Strait Islanders|Torres Strait Islander]] to be elected as a mayor of a local government area, was re-elected with almost 50% of the vote.<ref>{{cite web|url=http://www.ecq.qld.gov.au/elections/local/lg2008/TorresShireCouncil/results/mayoral/summary.html|title=2008 Torres Shire Council \u2013 Mayoral Election \u2013 Election Summary|author=Electoral Commission Queensland|date=31 March 2008|accessdate=31 March 2008|url-status=dead|archiveurl=https://web.archive.org/web/20080727153533/http://www.ecq.qld.gov.au/elections/local/lg2008/TorresShireCouncil/results/mayoral/summary.html|archivedate=27 July 2008|df=dmy-all}}</ref>\n\n== Mayors ==\n{{Expand list|date=November 2017}}\n* 2008: Napau Pedro Stephen <ref>{{Cite web|url=http://results.ecq.qld.gov.au/elections/local/LG2008/TorresShireCouncil/results/mayoral/summary.html|title=2008 Torres Shire Council - Mayoral Election - Election Summary|website=results.ecq.qld.gov.au|access-date=2017-12-04|archive-url=https://web.archive.org/web/20190407053946/http://results.ecq.qld.gov.au/elections/local/lg2008/TorresShireCouncil/results/mayoral/summary.html|archive-date=7 April 2019|url-status=live|df=dmy-all}}</ref>\n* 2012: Napau Pedro Stephen <ref>{{Cite web|url=http://results.ecq.qld.gov.au/elections/local/LG2012/TorresShireCouncil/results/mayoral/summary.html|title=2012 Torres Shire Council - Mayoral Election - Election Summary|website=results.ecq.qld.gov.au|access-date=2017-12-04|archive-url=https://web.archive.org/web/20190322205006/http://results.ecq.qld.gov.au/elections/local/LG2012/TorresShireCouncil/results/mayoral/summary.html|archive-date=22 March 2019|url-status=live|df=dmy-all}}</ref>\n* 2016: Vonda Malone <ref>{{Cite web|url=http://results.ecq.qld.gov.au/elections/local/LG2016/TorresShireCouncil/results/mayoral/summary.html|title=2016 Torres Shire Council - Mayoral Election - Election Summary|website=results.ecq.qld.gov.au|access-date=2017-12-04|archive-url=https://web.archive.org/web/20190317043715/http://results.ecq.qld.gov.au/elections/local/LG2016/TorresShireCouncil/results/mayoral/summary.html|archive-date=17 March 2019|url-status=live|df=dmy-all}}</ref><ref>{{Cite web|url=http://www.torres.qld.gov.au/mayor|title=Mayor - Torres Shire Council|website=www.torres.qld.gov.au|access-date=2020-02-14|archive-url=https://web.archive.org/web/20191021043345/http://www.torres.qld.gov.au/mayor|archive-date=21 October 2019|url-status=live}}</ref>\n\n== Library ==\nThe Torres Shire Council operates Ngulaig Meta Municipal Library at 121 Douglas Street on Thursday Island.<ref>{{Cite web|url=http://plconnect.slq.qld.gov.au/networking/directory-of-public-libraries/services/torres_shire|title=Torres Shire Council|date=20 September 2016|website=Public Libraries Connect|archive-url=https://web.archive.org/web/20180205055837/http://plconnect.slq.qld.gov.au/networking/directory-of-public-libraries/services/torres_shire|archive-date=5 February 2018|url-status=live|access-date=5 February 2018}}</ref>\n\n==See also==\n{{stack|{{Portal|Queensland}}}}\n* [[List of Torres Strait Islands]]\n* [[Torres Strait Island Region]]\n* [[Torres Strait Regional Authority]]\n\n==References==\n{{reflist}}\n\n{{Shire of Torres}}\n{{Torres Strait}}\n{{Far North Queensland}}\n{{Local Government Areas of Queensland}}\n\n{{coord|10|35|S|142|12|E|region:AU-QLD_type:adm2nd_source:kolossus-dewiki|display=title}}\n\n{{DEFAULTSORT:Torres Shire}}\n[[Category:Local government areas of Queensland]]\n[[Category:Far North Queensland]]\n[[Category:1885 establishments in Australia]]\n[[Category:Queensland in World War II]]\n[[Category:Shire of Torres]]\n", "name_user": "Graham87", "label": "safe", "comment": "\u2192\u200eHistory:grammar", "url_page": "//en.wikipedia.org/wiki/Shire_of_Torres"}
{"title_page": "John I, Duke of Bavaria", "text_new": "{{Infobox nobility\n| name         = John I, Duke of Bavaria\n| image        = \n| caption      = \n| noble family = [[House of Wittelsbach]]\n| father       = [[Henry XIV, Duke of Bavaria]]\n| mother       = [[Margaret of Bohemia, Duchess of Bavaria|Margaret of Bohemia]]\n| spouse       = Anna of Bavaria\n| birth_date   = 29 November 1329\n| birth_place  = \n| death_date   = {{death date and age|1340|12|20|1329|11|29|df=y}}\n| death_place  = [[Landshut]]\n}}\n'''John I of Bavaria''' (29 November 1329 &ndash; 20 December 1340), (German: ''Johann I das Kind, Herzog von Niederbayern''),  he was the Duke of [[Lower Bavaria]] since 1339.\n\nJohn I was the son of [[Henry XIV, Duke of Bavaria|Henry XIV]], Duke of Lower Bavaria, and [[Margaret of Bohemia, Duchess of Bavaria|Margaret of Bohemia]]. His maternal grandparents were [[John I of Bohemia]] and [[Elisabeth of Bohemia (1292\u20131330)|Elisabeth of Bohemia]]\n\n==Life==\nHe married Anna of Bavaria (1326 - 3 June 1361), daughter of [[Louis IV, Holy Roman Emperor|Louis IV of Bavaria]]. Still a minor, John I was the last duke of Lower Bavaria for one year only. After his early death in 1340 the duchy of Lower Bavaria passed to Louis IV, who then reunited the duchy of Bavaria in January 1341. His mother Margaret of Bohemia, as a member of the Luxemburg dynasty, then had to return to Bohemia.\n\n== Ancestors ==\n{{unreferenced section|date=August 2012}}\n{{ahnentafel\n|collapsed=yes |align=center\n|boxstyle_1=background-color: #fcc;\n|boxstyle_2=background-color: #fb9;\n|boxstyle_3=background-color: #ffc;\n|boxstyle_4=background-color: #bfc;\n|boxstyle_5=background-color: #9fe;\n| 1= 1. '''John I, Duke of Bavaria'''\n| 2= 2. [[Henry XIV, Duke of Bavaria]]\n| 3= 3. [[Margaret of Bohemia, Duchess of Bavaria|Margaret of Bohemia]]\n| 4= 4. [[Stephen I, Duke of Bavaria]]\n| 5= 5. Jutta of \u015awidnica\n| 6= 6. [[John of Bohemia]]\n| 7= 7. [[Elisabeth of Bohemia (1292\u20131330)|Elisabeth of Bohemia]]\n| 8= 8. [[Henry XIII, Duke of Bavaria]]\n| 9= 9. [[Elisabeth of Hungary, Duchess of Bavaria|Elisabeth of Hungary]]\n| 10= 10. [[Bolko I, Duke of Jawor and \u015awidnica]]\n| 11= 11. [[Beatrice of Brandenburg]]-Salzwedel\n| 12= 12. [[Henry VII, Holy Roman Emperor]]\n| 13= 13. [[Margaret of Brabant]]\n| 14= 14. [[Wenceslaus II of Bohemia]]\n| 15= 15. [[Judith of Habsburg]]\n| 16= 16. [[Otto II Wittelsbach, Duke of Bavaria]]\n| 17= 17. [[Agnes of the Palatinate]]\n| 18= 18. [[B\u00e9la IV of Hungary]]\n| 19= 19. [[Maria Laskarina]]\n| 20= 20. [[Boles\u0142aw II the Bald]]\n| 21= 21. Hedwig of Anhalt\n| 22= 22. [[Otto V, Margrave of Brandenburg-Salzwedel]]\n| 23= 23. Judith of Henneberg-Coburg\n| 24= 24. [[Henry VI of Luxembourg]]\n| 25= 25. [[Beatrice d'Avesnes]]\n| 26= 26. [[John I, Duke of Brabant]]\n| 27= 27. [[Margaret of Flanders, Duchess of Brabant|Margaret of Flanders]]\n| 28= 28. [[Ottokar II of Bohemia]]\n| 29= 29. [[Kunigunda of Slavonia]]\n| 30= 30. [[Rudolf I of Germany]]\n| 31= 31. [[Gertrude of Hohenberg]]\n}}\n\n{{S-start}}\n{{s-hou|[[House of Wittelsbach]]||1329||1340}}\n{{s-roy|de}}\n{{s-reg|}}\n{{succession box  | before=[[Henry XIV, Duke of Bavaria|Henry XIV]] | title=[[List of rulers of Bavaria|Duke of Lower Bavaria]] | years=1339&ndash;1340 | after=[[Louis IV, Holy Roman Emperor|Louis IV of Upper Bavaria]]}}\n{{S-end}}\n\n==External links==\n*{{MLCC |external links=1 |url=http://fmg.ac/Projects/MedLands/BAVARIA.htm#HeinrichIDukedied1290B |title-date= |title= His listing along with his wife . The  project \"involves extracting and analysing detailed information from primary sources, including contemporary chronicles, cartularies, necrologies and testaments.\"|date=August 2012}}\n*[http://genealogy.euweb.cz/wittel/wittel1.html#H1 A listing of descendants of Otto I, Count of Scheyern, including Henry XIII and his children]\n\n{{Authority control}}\n\n[[Category:1329 births|John I of Bavaria]]\n[[Category:1340 deaths|John I of Bavaria]]\n[[Category:14th-century rulers of Bavaria]]\n[[Category:House of Wittelsbach|John I of Bavaria]]\n[[Category:Rulers who died as children]]\n[[Category:Medieval child rulers]]\n\n\n{{Germany-noble-stub}}\n", "text_old": "{{Infobox nobility\n| name = John I, Duke of Bavaria\n| image = \n| caption = \n| noble family = [[House of Wittelsbach]]\n| father = [[Henry XIV, Duke of Bavaria]]\n| mother = [[Margaret of Bohemia, Duchess of Bavaria|Margaret of Bohemia]]\n| spouse = \n| birth_date = 29 November 1329\n| birth_place = \n| death_date = {{death date and age|1340|12|20|1329|11|29|df=y}}\n| death_place = [[Landshut]]\n}}\n'''John I of Bavaria''' (29 November 1329 &ndash; 20 December 1340), (German: ''Johann I das Kind, Herzog von Niederbayern''),  he was the Duke of [[Lower Bavaria]] since 1339.\n\nJohn I was the son of [[Henry XIV, Duke of Bavaria|Henry XIV]], Duke of Lower Bavaria, and [[Margaret of Bohemia, Duchess of Bavaria|Margaret of Bohemia]]. His maternal grandparents were [[John I of Bohemia]] and [[Elisabeth of Bohemia (1292\u20131330)|Elisabeth of Bohemia]]\n\n==Life==\nHe married Anna of Bavaria (1326 - 3 June 1361), daughter of [[Louis IV, Holy Roman Emperor|Louis IV of Bavaria]]. Still a minor, John I was the last duke of Lower Bavaria for one year only. After his early death in 1340 the duchy of Lower Bavaria passed to Louis IV, who then reunited the duchy of Bavaria in January 1341. His mother Margaret of Bohemia, as a member of the Luxemburg dynasty, then had to return to Bohemia.\n\n== Ancestors ==\n{{unreferenced section|date=August 2012}}\n{{ahnentafel\n|collapsed=yes |align=center\n|boxstyle_1=background-color: #fcc;\n|boxstyle_2=background-color: #fb9;\n|boxstyle_3=background-color: #ffc;\n|boxstyle_4=background-color: #bfc;\n|boxstyle_5=background-color: #9fe;\n| 1= 1. '''John I, Duke of Bavaria'''\n| 2= 2. [[Henry XIV, Duke of Bavaria]]\n| 3= 3. [[Margaret of Bohemia, Duchess of Bavaria|Margaret of Bohemia]]\n| 4= 4. [[Stephen I, Duke of Bavaria]]\n| 5= 5. Jutta of \u015awidnica\n| 6= 6. [[John of Bohemia]]\n| 7= 7. [[Elisabeth of Bohemia (1292\u20131330)|Elisabeth of Bohemia]]\n| 8= 8. [[Henry XIII, Duke of Bavaria]]\n| 9= 9. [[Elisabeth of Hungary, Duchess of Bavaria|Elisabeth of Hungary]]\n| 10= 10. [[Bolko I, Duke of Jawor and \u015awidnica]]\n| 11= 11. [[Beatrice of Brandenburg]]-Salzwedel\n| 12= 12. [[Henry VII, Holy Roman Emperor]]\n| 13= 13. [[Margaret of Brabant]]\n| 14= 14. [[Wenceslaus II of Bohemia]]\n| 15= 15. [[Judith of Habsburg]]\n| 16= 16. [[Otto II Wittelsbach, Duke of Bavaria]]\n| 17= 17. [[Agnes of the Palatinate]]\n| 18= 18. [[B\u00e9la IV of Hungary]]\n| 19= 19. [[Maria Laskarina]]\n| 20= 20. [[Boles\u0142aw II the Bald]]\n| 21= 21. Hedwig of Anhalt\n| 22= 22. [[Otto V, Margrave of Brandenburg-Salzwedel]]\n| 23= 23. Judith of Henneberg-Coburg\n| 24= 24. [[Henry VI of Luxembourg]]\n| 25= 25. [[Beatrice d'Avesnes]]\n| 26= 26. [[John I, Duke of Brabant]]\n| 27= 27. [[Margaret of Flanders, Duchess of Brabant|Margaret of Flanders]]\n| 28= 28. [[Ottokar II of Bohemia]]\n| 29= 29. [[Kunigunda of Slavonia]]\n| 30= 30. [[Rudolf I of Germany]]\n| 31= 31. [[Gertrude of Hohenberg]]\n}}\n\n{{S-start}}\n{{s-hou|[[House of Wittelsbach]]||1329||1340}}\n{{s-roy|de}}\n{{s-reg|}}\n{{succession box  | before=[[Henry XIV, Duke of Bavaria|Henry XIV]] | title=[[List of rulers of Bavaria|Duke of Lower Bavaria]] | years=1339&ndash;1340 | after=[[Louis IV, Holy Roman Emperor|Louis IV of Upper Bavaria]]}}\n{{S-end}}\n\n==External links==\n*{{MLCC |external links=1 |url=http://fmg.ac/Projects/MedLands/BAVARIA.htm#HeinrichIDukedied1290B |title-date= |title= His listing along with his wife . The  project \"involves extracting and analysing detailed information from primary sources, including contemporary chronicles, cartularies, necrologies and testaments.\"|date=August 2012}}\n*[http://genealogy.euweb.cz/wittel/wittel1.html#H1 A listing of descendants of Otto I, Count of Scheyern, including Henry XIII and his children]\n\n{{Authority control}}\n\n[[Category:1329 births|John I of Bavaria]]\n[[Category:1340 deaths|John I of Bavaria]]\n[[Category:14th-century rulers of Bavaria]]\n[[Category:House of Wittelsbach|John I of Bavaria]]\n[[Category:Rulers who died as children]]\n[[Category:Medieval child rulers]]\n\n\n{{Germany-noble-stub}}\n", "name_user": "ArisMethymna", "label": "safe", "comment": "spouse is added to infobox", "url_page": "//en.wikipedia.org/wiki/John_I,_Duke_of_Bavaria"}
{"title_page": "Algorithm", "text_new": "{{short description|unambiguous \nspecification of how to solve a class of problems}}\n{{other uses}}\n{{Use mdy dates|date=September 2017}}\n[[Image:Euclid flowchart.svg|thumb|right| [[Flowchart]] of an algorithm ([[Euclid's algorithm]]) for calculating the greatest common divisor (g.c.d.) of two numbers ''a'' and ''b'' in locations named A and B. The algorithm proceeds by successive subtractions in two loops: IF the test B \u2265 A yields \"yes\" or \"true\" (more accurately, the ''number'' ''b'' in location B is greater than or equal to the ''number'' ''a'' in location A) THEN, the algorithm specifies B \u2190 B \u2212 A (meaning the number ''b'' \u2212 ''a'' replaces the old ''b''). Similarly, IF A > B, THEN A \u2190 A \u2212 B. The process terminates when (the contents of) B is 0, yielding the g.c.d. in A. (Algorithm derived from Scott 2009:13; symbols and drawing style from Tausworthe 1977).]]\n[[File:Diagram for the computation of Bernoulli numbers.jpg|thumb|Ada Lovelace's diagram from \"note G\", the first published computer algorithm.]]\n\nIn [[mathematics]] and [[computer science]], an '''algorithm''' ({{IPAc-en|audio=en-us-algorithm.ogg|\u02c8|\u00e6|l|\u0261|\u0259|r|\u026a|\u00f0|\u0259m}}) is a finite sequence of [[well-defined]], computer-implementable instructions, typically to solve a class of problems or to perform a computation.<ref>{{Cite web|url=https://mathvault.ca/math-glossary/#algo|title=The Definitive Glossary of Higher Mathematical Jargon \u2014 Algorithm|last=|first=|date=2019-08-01|website=Math Vault|language=en-US|url-status=live|archive-url=https://web.archive.org/web/20200228211953/https://mathvault.ca/math-glossary/#algo|archive-date=February 28, 2020|access-date=2019-11-14}}</ref><ref>{{Cite web|url=https://www.merriam-webster.com/dictionary/algorithm|title=Definition of ALGORITHM|work=Merriam-Webster Online Dictionary|language=en|access-date=2019-11-14|archive-url=https://web.archive.org/web/20200214074446/https://www.merriam-webster.com/dictionary/algorithm|archive-date=February 14, 2020|url-status=live}}</ref> Algorithms are always [[unambiguous]] and are used as specifications for performing [[calculation]]s, [[data processing]], [[automated reasoning]], and other tasks.\n\nAs an [[effective method]], an algorithm can be expressed within a finite amount of space and time,<ref>\"Any classical mathematical algorithm, for example, can be described in a finite number of English words\" (Rogers 1987:2).</ref> and in a well-defined formal language<ref>Well defined with respect to the agent that executes the algorithm: \"There is a computing agent, usually human, which can react to the instructions and carry out the computations\" (Rogers 1987:2).</ref> for calculating a [[Function (mathematics)|function]].<ref>\"an algorithm is a procedure for computing a ''function'' (with respect to some chosen notation for integers) ... this limitation (to numerical functions) results in no loss of generality\", (Rogers 1987:1).</ref> Starting from an initial state and initial input (perhaps [[Empty string|empty]]),<ref>\"An algorithm has [[zero]] or more inputs, i.e., [[quantity|quantities]] which are given to it initially before the algorithm begins\" (Knuth 1973:5).</ref> the instructions describe a [[computation]] that, when [[Execution (computing)|executed]], proceeds through a finite<ref>\"A procedure which has all the characteristics of an algorithm except that it possibly lacks finiteness may be called a 'computational method{{'\"}} (Knuth 1973:5).</ref> number of well-defined successive states, eventually producing \"output\"<ref>\"An algorithm has one or more outputs, i.e. quantities which have a specified relation to the inputs\" (Knuth 1973:5).</ref> and terminating at a final ending state. The transition from one state to the next is not necessarily [[deterministic]]; some algorithms, known as [[randomized algorithms]], incorporate random input.<ref>Whether or not a process with random interior processes (not including the input) is an algorithm is debatable. Rogers opines that: \"a computation is carried out in a discrete stepwise fashion, without the use of continuous methods or analogue devices ... carried forward deterministically, without resort to random methods or devices, e.g., dice\" (Rogers 1987:2).</ref>\n\nThe concept of algorithm has existed since antiquity. [[Arithmetic]] algorithms, such as a [[division algorithm]], was used by ancient [[Babylonian mathematics|Babylonian mathematicians]] c. 2500 BC and [[Egyptian mathematics|Egyptian mathematicians]] c. 1550 BC.<ref name=\"Springer Science & Business Media\"/> [[Greek mathematics|Greek mathematicians]] later used algorithms in the [[sieve of Eratosthenes]] for finding prime numbers,<ref name=\"Hellenistic Mathematics\">{{Cite web|url=http://www.storyofmathematics.com/hellenistic.html|title=Hellenistic Mathematics|publisher=The Story of Mathematics|access-date=2019-11-14|archive-url=https://web.archive.org/web/20190911042247/http://www.storyofmathematics.com/hellenistic.html|archive-date=September 11, 2019|url-status=live}}</ref> and the [[Euclidean algorithm]] for finding the [[greatest common divisor]] of two numbers.<ref name=Cooke2005>{{cite book |last=Cooke |first=Roger L. |title=The History of Mathematics: A Brief Course |date=2005 |publisher=John Wiley & Sons|isbn=978-1-118-46029-0}}</ref> [[Arabic mathematics|Arabic mathematicians]] such as [[Al-Kindi]] in the 9th century used [[cryptographic]] algorithms for [[code-breaking]], based on [[frequency analysis]].<ref name=\"Dooley\"/>\n\nThe word ''algorithm'' itself is derived from the 9th-century [[Persian people|Persian]] mathematician [[Muhammad ibn Musa al-Khwarizmi|Mu\u1e25ammad ibn M\u016bs\u0101 al-Khw\u0101rizm\u012b]], Latinized ''Algoritmi''.<ref>{{Cite web|url=http://www.storyofmathematics.com/islamic_alkhwarizmi.html|title=Al-Khwarizmi - Islamic Mathematics|publisher=The Story of Mathematics|access-date=2019-11-14|archive-url=https://web.archive.org/web/20190725202237/http://www.storyofmathematics.com/islamic_alkhwarizmi.html|archive-date=July 25, 2019|url-status=live}}</ref> A partial formalization of what would become the modern concept of algorithm began with attempts to solve the [[Entscheidungsproblem]] (decision problem) posed by [[David Hilbert]] in 1928. Later formalizations were framed as attempts to define \"[[effective calculability]]\"<ref>Kleene 1943 in Davis 1965:274</ref> or \"effective method\".<ref>Rosser 1939 in Davis 1965:225</ref> Those formalizations included the [[Kurt G\u00f6del|G\u00f6del]]\u2013[[Jacques Herbrand|Herbrand]]\u2013[[Stephen Cole Kleene|Kleene]] [[Recursion (computer science)|recursive functions]] of 1930, 1934 and 1935, [[Alonzo Church]]'s [[lambda calculus]] of 1936, [[Emil Post]]'s [[Formulation 1]] of 1936, and [[Alan Turing]]'s [[Turing machines]] of 1936\u201337 and 1939.\n\n== Etymology ==\nThe word 'algorithm' has its roots in Latinizing the name of Persian mathematician [[Muhammad ibn Musa al-Khwarizmi]] in the first steps to ''algorismus''.<ref>{{cite web|url=http://www-history.mcs.st-andrews.ac.uk/Biographies/Al-Khwarizmi.html|title=Al-Khwarizmi biography|website=www-history.mcs.st-andrews.ac.uk|access-date=May 3, 2017|archive-url=https://web.archive.org/web/20190802091553/http://www-history.mcs.st-andrews.ac.uk/Biographies/Al-Khwarizmi.html|archive-date=August 2, 2019|url-status=live}}</ref><ref>{{cite web|title=Etymology of algorithm|url=http://chambers.co.uk/search/?query=algorithm&title=21st|website=Chambers Dictionary|accessdate=December 13, 2016|archive-url=https://web.archive.org/web/20190331204600/https://chambers.co.uk/search/?query=algorithm&title=21st|archive-date=March 31, 2019|url-status=live}}</ref> Al-Khw\u0101rizm\u012b ({{lang-fa|\u062e\u0648\u0627\u0631\u0632\u0645\u06cc}}, c. 780\u2013850) was a Persian mathematician, [[astronomer]], [[geographer]], and scholar in the [[House of Wisdom]] in [[Baghdad]],<ref name=\"Hellenistic Mathematics\" /> whose name means 'the native of [[Khwarazm]]', a region that was part of [[Greater Iran]] and is now in [[Uzbekistan]].<ref name=\"Hogendijk\">{{cite journal|first=Jan P. |last=Hogendijk |title=al-Khwarzimi |journal=Pythagoras |volume=38 |issue=2 |year=1998 |pages=4\u20135 |url=http://www.kennislink.nl/web/show?id=116543 |ref=harv |url-status=dead |archiveurl=https://web.archive.org/web/20090412193516/http://www.kennislink.nl/web/show?id=116543 |archivedate=April 12, 2009 }}</ref><ref name=\"Oaks\">{{cite web|first=Jeffrey A.|last=Oaks|url=http://facstaff.uindy.edu/~oaks/MHMC.htm|title=Was al-Khwarizmi an applied algebraist?|publisher=[[University of Indianapolis]]|accessdate=May 30, 2008|archive-url=https://web.archive.org/web/20110718094835/http://facstaff.uindy.edu/~oaks/MHMC.htm|archive-date=July 18, 2011|url-status=dead|df=mdy-all}}</ref>\n\nAbout 825, al-Khwarizmi wrote an [[Arabic language]] treatise on the [[Hindu\u2013Arabic numeral system]], which was translated into [[Latin]] during the 12th century under the title ''Algoritmi de numero Indorum''. This title means \"Algoritmi on the numbers of the Indians\", where \"Algoritmi\" was the translator's [[Latinisation of names|Latinization]] of Al-Khwarizmi's name.<ref>{{cite book| last = Brezina| first = Corona| title = Al-Khwarizmi: The Inventor Of Algebra| url = https://books.google.com/?id=955jPgAACAAJ| year = 2006| publisher = The Rosen Publishing Group| isbn = 978-1-4042-0513-0 }}</ref> Al-Khwarizmi was the most widely read mathematician in Europe in the late Middle Ages, primarily through another of his books, the [[Al-Jabr|Algebra]].<ref>[http://www-history.mcs.st-and.ac.uk/Extras/Boyer_Foremost_Text.html Foremost mathematical texts in history] {{Webarchive|url=https://web.archive.org/web/20110609224820/http://www-history.mcs.st-and.ac.uk/Extras/Boyer_Foremost_Text.html |date=June 9, 2011 }}, according to [[Carl B. Boyer]].</ref> In late medieval Latin, ''algorismus'', English '[[algorism]]', the corruption of his name, simply meant the \"decimal number system\".<ref>{{Citation|title=algorismic|url=https://www.thefreedictionary.com/algorismic|work=The Free Dictionary|access-date=2019-11-14|archive-url=https://web.archive.org/web/20191221200124/https://www.thefreedictionary.com/algorismic|archive-date=December 21, 2019|url-status=live}}</ref> In the 15th century, under the influence of the Greek word \u1f00\u03c1\u03b9\u03b8\u03bc\u03cc\u03c2 'number' (''cf.'' 'arithmetic'), the Latin word was altered to ''algorithmus'', and the corresponding English term 'algorithm' is first attested in the 17th century; the modern sense was introduced in the 19th century.<ref>''[[Oxford English Dictionary]]'', Third Edition, 2012 [http://www.oed.com/view/Entry/4959 ''s.v.'']</ref>\n\nIn English, it was first used in about 1230 and then by [[Geoffrey Chaucer|Chaucer]] in 1391. English adopted the French term, but it wasn't until the late 19th century that \"algorithm\" took on the meaning that it has in modern English.<ref>{{Cite journal|last=Mehri|first=Bahman|date=2017|title=From Al-Khwarizmi to Algorithm|journal=Olympiads in Informatics|volume=11|issue=2|pages=71\u201374|doi=10.15388/ioi.2017.special.11}}</ref>\n\nAnother early use of the word is from 1240, in a manual titled ''Carmen de Algorismo'' composed by [[Alexander of Villedieu|Alexandre de Villedieu]]. It begins with:\n\n{{quote|''Haec algorismus ars praesens dicitur, in qua / Talibus Indorum fruimur bis quinque figuris.''}}\nwhich translates to:\n{{quote|Algorism is the art by which at present we use those Indian figures, which number two times five.}}\n\nThe poem is a few hundred lines long and summarizes the art of calculating with the new style of Indian dice, or Talibus Indorum, or Hindu numerals.<ref>{{Cite web|url=http://members.peak.org/~jeremy/calculators/alKwarizmi.html|title=Abu Jafar Muhammad ibn Musa al-Khwarizmi|website=members.peak.org|access-date=2019-11-14|archive-url=https://web.archive.org/web/20190821232118/http://members.peak.org/~jeremy/calculators/alKwarizmi.html|archive-date=August 21, 2019|url-status=live}}</ref>\n\n==Informal definition==\n{{about||a detailed presentation of the various points of view on the definition of \"algorithm\"| Algorithm characterizations}}\nAn informal definition could be \"a set of rules that precisely defines a sequence of operations\",<ref>Stone 1973:4</ref> which would include all computer programs, including programs that do not perform numeric calculations, and (for example) any prescribed [[bureaucratic]] procedure.<ref>{{cite book\n | last1 = Simanowski\n | first1 = Roberto\n | author-link1 = Roberto Simanowski\n | translator1-last = Chase\n | translator1-first = Jefferson\n | title = The Death Algorithm and Other Digital Dilemmas\n | url = https://books.google.com/books?id=RJV5DwAAQBAJ\n | series = Untimely Meditations\n | volume = 14\n | location = Cambridge, Massachusetts\n | publisher = MIT Press\n | date = 2018\n | page = 147\n | isbn = 9780262536370\n | access-date = 27 May 2019\n | quote = [...] the next level of abstraction of central bureaucracy: globally operating algorithms.\n | archive-url = https://web.archive.org/web/20191222120705/https://books.google.com/books?id=RJV5DwAAQBAJ\n | archive-date = December 22, 2019\n | url-status = live\n }}</ref>\nIn general, a program is only an algorithm if it stops eventually.<ref>Stone simply requires that \"it must terminate in a finite number of steps\" (Stone 1973:7\u20138).</ref>\n\nA prototypical example of an algorithm is the [[Euclidean algorithm]], which is used to determine the maximum common divisor of two integers; an example (there are others) is described by the [[flowchart]] above and as an example in a later section.\n\n{{Harvtxt|Boolos|Jeffrey|1974, 1999|ref=CITEREFBoolosJeffrey1999}} offer an informal meaning of the word \"algorithm\" in the following quotation:\n\n<blockquote>No human being can write fast enough, or long enough, or small enough\u2020 ( \u2020\"smaller and smaller without limit \u2026 you'd be trying to write on molecules, on atoms, on electrons\") to list all members of an enumerably infinite set by writing out their names, one after another, in some notation. But humans can do something equally useful, in the case of certain enumerably infinite sets: They can give ''explicit instructions for determining the '''n'''th member of the set'', for arbitrary finite ''n''. Such instructions are to be given quite explicitly, in a form in which ''they could be followed by a computing machine'', or by a ''human who is capable of carrying out only very elementary operations on symbols.''<ref>Boolos and Jeffrey 1974,1999:19</ref></blockquote>\n\nAn \"[[recursively enumerable set|enumerably infinite set]]\" is one whose elements can be put into one-to-one correspondence with the integers. Thus, Boolos and Jeffrey are saying that an algorithm implies instructions for a process that \"creates\" output integers from an ''arbitrary'' \"input\" integer or integers that, in theory, can be arbitrarily large. For example, an algorithm can be an algebraic equation such as ''y = m + n'' (i.e., two arbitrary \"input variables\" ''m'' and ''n'' that produce an output ''y''), but various authors' attempts to define the notion indicate that the word implies much more than this, something on the order of (for the addition example):\n:Precise instructions (in language understood by \"the computer\")<ref>cf Stone 1972:5</ref> for a fast, efficient, \"good\"<ref>Knuth 1973:7 states: \"In practice we not only want algorithms, we want ''good'' algorithms ... one criterion of goodness is the length of time taken to perform the algorithm ... other criteria are the adaptability of the algorithm to computers, its simplicity, and elegance, etc.\"</ref> process that specifies the \"moves\" of \"the computer\" (machine or human, equipped with the necessary internally contained information and capabilities)<ref>cf Stone 1973:6</ref> to find, decode, and then process arbitrary input integers/symbols ''m'' and ''n'', symbols ''+'' and ''='' \u2026 and \"effectively\"<ref>Stone 1973:7\u20138 states that there must be, \"...a procedure that a robot [i.e., computer] can follow in order to determine precisely how to obey the instruction\". Stone adds finiteness of the process, and definiteness (having no ambiguity in the instructions) to this definition.</ref> produce, in a \"reasonable\" time,<ref>Knuth, loc. cit</ref> output-integer ''y'' at a specified place and in a specified format.\n\nThe concept of ''algorithm'' is also used to define the notion of [[decidability (logic)|decidability]]\u2014a notion that is central for explaining how [[formal system]]s come into being starting from a small set of [[axiom]]s and rules. In [[logic]], the time that an algorithm requires to complete cannot be measured, as it is not apparently related to the customary physical dimension. From such uncertainties, that characterize ongoing work, stems the unavailability of a definition of ''algorithm'' that suits both concrete (in some sense) and abstract usage of the term.\n\n==Formalization==\n<!-- [[Computer program]] links here. -->\nAlgorithms are essential to the way computers process data. Many computer programs contain algorithms that detail the specific instructions a computer should perform\u2014in a specific order\u2014to carry out a specified task, such as calculating employees' paychecks or printing students' report cards. Thus, an algorithm can be considered to be any sequence of operations that can be simulated by a [[Turing reduction|Turing-complete]] system. Authors who assert this thesis include Minsky (1967), Savage (1987) and Gurevich (2000):\n<blockquote> Minsky: \"But we will also maintain, with Turing \u2026 that any procedure which could \"naturally\" be called effective, can, in fact, be realized by a (simple) machine. Although this may seem extreme, the arguments \u2026 in its favor are hard to refute\".<ref name=\"Minsky 1967:105\">{{harvnb|Minsky|1967|page=105}}</ref></blockquote>\n\n <blockquote>Gurevich: \u201c\u2026 Turing's informal argument in favor of his thesis justifies a stronger thesis: every algorithm can be simulated by a Turing machine \u2026 according to Savage [1987], an algorithm is a computational process defined by a Turing machine\".<ref>Gurevich 2000:1, 3</ref></blockquote>\n\nTuring machines can define computational processes that do not terminate. The informal definitions of algorithms generally require that the algorithm always terminates. This requirement renders the task of deciding whether a formal procedure is an algorithm impossible in the general case\u2014due to a major theorem of [[computability theory]] known as the [[halting problem]].\n\nTypically, when an algorithm is associated with processing information, data can be read from an input source, written to an output device and stored for further processing. Stored data are regarded as part of the internal state of the entity performing the algorithm. In practice, the state is stored in one or more [[data structure]]s.\n\nFor some of these computational process, the algorithm must be rigorously defined: specified in the way it applies in all possible circumstances that could arise. This means that any conditional steps must be systematically dealt with, case-by-case; the criteria for each case must be clear (and computable).\n\nBecause an algorithm is a precise list of precise steps, the order of computation is always crucial to the functioning of the algorithm. Instructions are usually assumed to be listed explicitly, and are described as starting \"from the top\" and going \"down to the bottom\"\u2014an idea that is described more formally by ''[[control flow|flow of control]]''.\n\nSo far, the discussion on the formalization of an algorithm has assumed the premises of [[imperative programming]]. This is the most common conception\u2014one which attempts to describe a task in discrete, \"mechanical\" means. Unique to this conception of formalized algorithms is the [[assignment operation]], which sets the value of a variable. It derives from the intuition of \"[[memory]]\" as a scratchpad. An example of such an assignment can be found below.\n\nFor some alternate conceptions of what constitutes an algorithm, see [[functional programming]] and [[logic programming]].\n\n===Expressing algorithms===\nAlgorithms can be expressed in many kinds of notation, including [[natural language]]s, [[pseudocode]], [[flowchart]]s, [[DRAKON|drakon-charts]], [[programming language]]s or [[control table]]s (processed by [[Interpreter (computing)|interpreters]]). Natural language expressions of algorithms tend to be verbose and ambiguous, and are rarely used for complex or technical algorithms. Pseudocode, flowcharts, [[DRAKON|drakon-charts]] and control tables are structured ways to express algorithms that avoid many of the ambiguities common in the statements based on natural language. Programming languages are primarily intended for expressing algorithms in a form that can be executed by a computer, but are also often used as a way to define or document algorithms.\n\nThere is a wide variety of representations possible and one can express a given [[Turing machine]] program as a sequence of machine tables (see [[finite-state machine]], [[state transition table]] and [[control table]] for more), as flowcharts and [[DRAKON|drakon-charts]] (see [[state diagram]] for more), or as a form of rudimentary [[machine code]] or [[assembly code]] called \"sets of quadruples\" (see [[Turing machine]] for more).\n\nRepresentations of algorithms can be classed into three accepted levels of Turing machine description, as follows:<ref>Sipser 2006:157</ref>\n; 1 High-level description\n: \u201c\u2026prose to describe an algorithm, ignoring the implementation details. At this level, we do not need to mention how the machine manages its tape or head.\"\n; 2 Implementation description\n: \u201c\u2026prose used to define the way the Turing machine uses its head and the way that it stores data on its tape. At this level, we do not give details of states or transition function.\"\n; 3 Formal description\n: Most detailed, \"lowest level\", gives the Turing machine's \"state table\".\n\nFor an example of the simple algorithm \"Add m+n\" described in all three levels, see [[Algorithm#Examples]].\n\n==Design==\n{{split|Algorithm design|date=March 2020|discuss=Talk:Algorithm#Proposed split}}\n{{See also|Algorithm#By design paradigm}}\n\nAlgorithm design refers to a method or a mathematical process for problem-solving and engineering algorithms. The design of algorithms is part of many solution theories of [[operation research]], such as [[dynamic programming]] and [[Divide and conquer algorithm|divide-and-conquer]]. Techniques for designing and implementing algorithm designs are also called algorithm design patterns,<ref>{{citation|url=http://ww3.algorithmdesign.net/ch00-front.html|title=Algorithm Design: Foundations, Analysis, and Internet Examples|last1=Goodrich|first1=Michael T.|author1-link=Michael T. Goodrich|last2=Tamassia|first2=Roberto|author2-link=Roberto Tamassia|publisher=John Wiley & Sons, Inc.|year=2002|isbn=978-0-471-38365-9|access-date=June 14, 2018|archive-url=https://web.archive.org/web/20150428201622/http://ww3.algorithmdesign.net/ch00-front.html|archive-date=April 28, 2015|url-status=live}}</ref> with examples including the template method pattern and the decorator pattern.\n\nOne of the most important aspects of algorithm design lies in the creation of algorithm that has an efficient run-time, also known as its [[Big O notation|Big O]].\n\nTypical steps in the development of algorithms:\n# Problem definition\n# Development of a model\n# Specification of the algorithm\n# Designing an algorithm\n# Checking the [[correctness (computer science)|correctness]] of the algorithm\n# Analysis of algorithm\n# Implementation of algorithm\n# Program testing\n# Documentation preparation\n\n==Implementation==\n[[Image:TTL npn nand.svg|right|thumb|[[Logical NAND]] algorithm implemented electronically in [[7400 series|7400]] chip]]\nMost algorithms are intended to be implemented as [[computer programs]]. However, algorithms are also implemented by other means, such as in a [[biological neural network]] (for example, the [[human brain]] implementing [[arithmetic]] or an insect looking for food), in an [[electrical circuit]], or in a mechanical device.\n\n==Computer algorithms==\n[[File:Euclid's algorithm structured blocks 1.png|thumb|right|176px|Flowchart examples of the canonical [[Structured program theorem|B\u00f6hm-Jacopini structures]]: the SEQUENCE (rectangles descending the page), the WHILE-DO and the IF-THEN-ELSE. The three structures are made of the primitive conditional GOTO ({{code|IF ''test''=true THEN GOTO step xxx}}) (a diamond), the unconditional GOTO (rectangle), various assignment operators (rectangle), and HALT (rectangle). Nesting of these structures inside assignment-blocks result in complex diagrams (cf Tausworthe 1977:100, 114).]]\n\nIn [[computer systems]], an algorithm is basically an instance of [[logic]] written in software by software developers, to be effective for the intended \"target\" computer(s) to produce ''output'' from given (perhaps null) ''input''. An optimal algorithm, even running in old hardware, would produce faster results than a non-optimal (higher [[time complexity]]) algorithm for the same purpose, running in more efficient hardware; that is why algorithms, like computer hardware, are considered technology.\n\n''\"Elegant\" (compact) programs, \"good\" (fast) programs '': The notion of \"simplicity and elegance\" appears informally in [[Donald Knuth|Knuth]] and precisely in [[Gregory Chaitin|Chaitin]]:\n:Knuth: \" \u2026 we want ''good'' algorithms in some loosely defined aesthetic sense. One criterion \u2026 is the length of time taken to perform the algorithm \u2026. Other criteria are adaptability of the algorithm to computers, its simplicity and elegance, etc\"<ref>Knuth 1973:7</ref>\n\n:Chaitin: \" \u2026 a program is 'elegant,' by which I mean that it's the smallest possible program for producing the output that it does\"<ref>Chaitin 2005:32</ref>\n\nChaitin prefaces his definition with: \"I'll show you can't prove that a program is 'elegant{{'\"}}\u2014such a proof would solve the [[Halting problem]] (ibid).\n\n''Algorithm versus function computable by an algorithm'': For a given function multiple algorithms may exist. This is true, even without expanding the available instruction set available to the programmer. Rogers observes that \"It is ... important to distinguish between the notion of ''algorithm'', i.e. procedure and the notion of ''function computable by algorithm'', i.e. mapping yielded by procedure. The same function may have several different algorithms\".<ref>Rogers 1987:1\u20132</ref>\n\nUnfortunately, there may be a tradeoff between goodness (speed) and elegance (compactness)\u2014an elegant program may take more steps to complete a computation than one less elegant. An example that uses Euclid's algorithm appears below.\n\n''Computers (and computors), models of computation'': A computer (or human \"computor\"<ref>In his essay \"Calculations by Man and Machine: Conceptual Analysis\" Seig 2002:390 credits this distinction to Robin Gandy, cf Wilfred Seig, et al., 2002 ''Reflections on the foundations of mathematics: Essays in honor of Solomon Feferman'', Association for Symbolic Logic, A.K. Peters Ltd, Natick, MA.</ref>) is a restricted type of machine, a \"discrete deterministic mechanical device\"<ref>cf Gandy 1980:126, Robin Gandy ''Church's Thesis and Principles for Mechanisms'' appearing on pp. 123\u2013148 in [[Jon Barwise|J. Barwise]] et al. 1980 ''The Kleene Symposium'', North-Holland Publishing Company.</ref> that blindly follows its instructions.<ref>A \"robot\": \"A computer is a robot that performs any task that can be described as a sequence of instructions.\" cf Stone 1972:3</ref> Melzak's and Lambek's primitive models<ref>Lambek's \"abacus\" is a \"countably infinite number of locations (holes, wires etc.) together with an unlimited supply of counters (pebbles, beads, etc). The locations are distinguishable, the counters are not\". The holes have unlimited capacity, and standing by is an agent who understands and is able to carry out the list of instructions\" (Lambek 1961:295). Lambek references Melzak who defines his Q-machine as \"an indefinitely large number of locations ... an indefinitely large supply of counters distributed among these locations, a program, and an operator whose sole purpose is to carry out the program\" (Melzak 1961:283). B-B-J (loc. cit.) add the stipulation that the holes are \"capable of holding any number of stones\" (p. 46). Both Melzak and Lambek appear in ''The Canadian Mathematical Bulletin'', vol. 4, no. 3, September 1961.</ref> reduced this notion to four elements: (i) discrete, distinguishable ''locations'', (ii) discrete, indistinguishable ''counters''<ref>If no confusion results, the word \"counters\" can be dropped, and a location can be said to contain a single \"number\".</ref> (iii) an agent, and (iv) a list of instructions that are ''effective'' relative to the capability of the agent.<ref>\"We say that an instruction is ''effective'' if there is a procedure that the robot can follow in order to determine precisely how to obey the instruction.\" (Stone 1972:6)</ref>\n\nMinsky describes a more congenial variation of Lambek's \"abacus\" model in his \"Very Simple Bases for [[Computability]]\".<ref>cf Minsky 1967: Chapter 11 \"Computer models\" and Chapter 14 \"Very Simple Bases for Computability\" pp. 255\u2013281 in particular</ref> [[Minsky machine|Minsky's machine]] proceeds sequentially through its five (or six, depending on how one counts) instructions, unless either a conditional IF\u2013THEN GOTO or an unconditional GOTO changes program flow out of sequence. Besides HALT, Minsky's machine includes three ''assignment'' (replacement, substitution)<ref>cf Knuth 1973:3.</ref> operations: ZERO (e.g. the contents of location replaced by 0: L \u2190 0), SUCCESSOR (e.g. L \u2190 L+1), and DECREMENT (e.g. L \u2190 L \u2212 1).<ref>But always preceded by IF\u2013THEN to avoid improper subtraction.</ref> Rarely must a programmer write \"code\" with such a limited instruction set. But Minsky shows (as do Melzak and Lambek) that his machine is [[Turing complete]] with only four general ''types'' of instructions: conditional GOTO, unconditional GOTO, assignment/replacement/substitution, and HALT.  However, a few different assignment instructions (e.g. DECREMENT, INCREMENT, and ZERO/CLEAR/EMPTY for a Minsky machine) are also required for Turing-completeness; their exact specification is somewhat up to the designer. The unconditional GOTO is a convenience; it can be constructed by initializing a dedicated location to zero e.g. the instruction \" Z \u2190 0 \"; thereafter the instruction IF Z=0 THEN GOTO xxx is unconditional.\n\n''Simulation of an algorithm: computer (computor) language'': Knuth advises the reader that \"the best way to learn an algorithm is to try it . . . immediately take pen and paper and work through an example\".<ref>Knuth 1973:4</ref> But what about a simulation or execution of the real thing? The programmer must translate the algorithm into a language that the simulator/computer/computor can ''effectively'' execute. Stone gives an example of this: when computing the roots of a quadratic equation the computor must know how to take a square root. If they don't, then the algorithm, to be effective, must provide a set of rules for extracting a square root.<ref>Stone 1972:5. Methods for extracting roots are not trivial: see [[Methods of computing square roots]].</ref>\n\nThis means that the programmer must know a \"language\" that is effective relative to the target computing agent (computer/computor).\n\nBut what model should be used for the simulation? Van Emde Boas observes \"even if we base [[Computational complexity theory|complexity theory]] on abstract instead of concrete machines, arbitrariness of the choice of a model remains. It is at this point that the notion of ''simulation'' enters\".<ref>{{cite book| last = Leeuwen| first = Jan| title = Handbook of Theoretical Computer Science: Algorithms and complexity. Volume A| url = https://books.google.com/?id=-X39_rA3VSQC| year = 1990| publisher = Elsevier| isbn = 978-0-444-88071-0 | page = 85}}</ref> When speed is being measured, the instruction set matters. For example, the subprogram in Euclid's algorithm to compute the remainder would execute much faster if the programmer had a \"[[modular arithmetic|modulus]]\" instruction available rather than just subtraction (or worse: just Minsky's \"decrement\").\n\n''Structured programming, canonical structures'': Per the [[Church\u2013Turing thesis]], any algorithm can be computed by a model known to be [[Turing complete]], and per Minsky's demonstrations, Turing completeness requires only four instruction types\u2014conditional GOTO, unconditional GOTO, assignment, HALT. Kemeny and Kurtz observe that, while \"undisciplined\" use of unconditional GOTOs and conditional IF-THEN GOTOs can result in \"[[spaghetti code]]\", a programmer can write structured programs using only these instructions; on the other hand \"it is also possible, and not too hard, to write badly structured programs in a structured language\".<ref>[[John G. Kemeny]] and [[Thomas E. Kurtz]] 1985 ''Back to Basic: The History, Corruption, and Future of the Language'', Addison-Wesley Publishing Company, Inc. Reading, MA, {{ISBN|0-201-13433-0}}.</ref> Tausworthe augments the three [[Structured program theorem|B\u00f6hm-Jacopini canonical structures]]:<ref>Tausworthe 1977:101</ref> SEQUENCE, IF-THEN-ELSE, and WHILE-DO, with two more: DO-WHILE and CASE.<ref>Tausworthe 1977:142</ref> An additional benefit of a structured program is that it lends itself to [[proof of correctness|proofs of correctness]] using [[mathematical induction]].<ref>Knuth 1973 section 1.2.1, expanded by Tausworthe 1977 at pages 100ff and Chapter 9.1</ref>\n\n''Canonical flowchart symbols<ref>cf Tausworthe 1977</ref>'': The graphical aide called a [[flowchart]], offers a way to describe and document an algorithm (and a computer program of one). Like the program flow of a Minsky machine, a flowchart always starts at the top of a page and proceeds down. Its primary symbols are only four: the directed arrow showing program flow, the rectangle (SEQUENCE, GOTO), the diamond (IF-THEN-ELSE), and the dot (OR-tie). The B\u00f6hm\u2013Jacopini canonical structures are made of these primitive shapes. Sub-structures can \"nest\" in rectangles, but only if a single exit occurs from the superstructure. The symbols, and their use to build the canonical structures are shown in the diagram.\n\n==Examples==\n{{further|List of algorithms}}\n\n===Algorithm example===\nOne of the simplest algorithms is to find the largest number in a list of numbers of random order. Finding the solution requires looking at every number in the list. From this follows a simple algorithm, which can be stated in a high-level description in English prose, as:\n\n''High-level description:''\n# If there are no numbers in the set then there is no highest number.\n# Assume the first number in the set is the largest number in the set.\n# For each remaining number in the set: if this number is larger than the current largest number, consider this number to be the largest number in the set.\n# When there are no numbers left in the set to iterate over, consider the current largest number to be the largest number of the set.\n\n''(Quasi-)formal description:''\nWritten in prose but much closer to the high-level language of a computer program, the following is the more formal coding of the algorithm in [[pseudocode]] or [[pidgin code]]:\n\n{{algorithm-begin|name=LargestNumber}}\n   Input: A list of numbers ''L''.\n   Output: The largest number in the list ''L''.\n\n   '''if''' ''L.size'' = 0 '''return''' null\n   ''largest'' \u2190 ''L''[0]\n   '''for each''' ''item'' '''in''' ''L'', '''do'''\n     '''if''' ''item'' > ''largest'', '''then'''\n       ''largest'' \u2190 ''item''\n   '''return''' ''largest''\n{{algorithm-end}}\n\n===Euclid's algorithm===\n{{further|Euclid's algorithm}}\n[[File:Euclid's algorithm Book VII Proposition 2 2.png|250px|thumb|left|The example-diagram of Euclid's algorithm from T.L. Heath (1908), with more detail added. Euclid does not go beyond a third measuring and gives no numerical examples. Nicomachus gives the example of 49 and 21: \"I subtract the less from the greater; 28 is left; then again I subtract from this the same 21 (for this is possible); 7 is left; I subtract this from 21, 14 is left; from which I again subtract 7 (for this is possible); 7 is left, but 7 cannot be subtracted from 7.\" Heath comments that \"The last phrase is curious, but the meaning of it is obvious enough, as also the meaning of the phrase about ending 'at one and the same number'.\"(Heath 1908:300).]]\n\n[[Euclid]]'s algorithm to compute the [[greatest common divisor]] (GCD) to two numbers appears as Proposition II in Book VII (\"Elementary Number Theory\") of his ''[[Euclid's Elements|Elements]]''.<ref>Heath 1908:300; Hawking's Dover 2005 edition derives from Heath.</ref> Euclid poses the problem thus: \"Given two numbers not prime to one another, to find their greatest common measure\". He defines \"A number [to be] a multitude composed of units\": a counting number, a positive integer not including zero. To \"measure\" is to place a shorter measuring length ''s'' successively (''q'' times) along longer length ''l'' until the remaining portion ''r'' is less than the shorter length ''s''.<ref>\" 'Let CD, measuring BF, leave FA less than itself.' This is a neat abbreviation for saying, measure along BA successive lengths equal to CD until a point F is reached such that the length FA remaining is less than CD; in other words, let BF be the largest exact multiple of CD contained in BA\" (Heath 1908:297)</ref> In modern words, remainder ''r'' = ''l'' \u2212 ''q''\u00d7''s'', ''q'' being the quotient, or remainder ''r'' is the \"modulus\", the integer-fractional part left over after the division.<ref>For modern treatments using division in the algorithm, see Hardy and Wright 1979:180, Knuth 1973:2 (Volume 1), plus more discussion of Euclid's algorithm in Knuth 1969:293\u2013297 (Volume 2).</ref>\n\nFor Euclid's method to succeed, the starting lengths must satisfy two requirements: (i) the lengths must not be zero, AND (ii) the subtraction must be \u201cproper\u201d; i.e., a test must guarantee that the smaller of the two numbers is subtracted from the larger (or the two can be equal so their subtraction yields zero).\n\nEuclid's original proof adds a third requirement: the two lengths must not be prime to one another. Euclid stipulated this so that he could construct a [[reductio ad absurdum]] proof that the two numbers' common measure is in fact the ''greatest''.<ref>Euclid covers this question in his Proposition 1.</ref> While Nicomachus' algorithm is the same as Euclid's, when the numbers are prime to one another, it yields the number \"1\" for their common measure. So, to be precise, the following is really Nicomachus' algorithm.\n\n[[File:Euclids-algorithm-example-1599-650.gif|350px|thumb|right|A graphical expression of Euclid's algorithm to find the greatest common divisor for 1599 and 650.\n<source lang=\"text\" highlight=\"1,5\">\n 1599 = 650\u00d72 + 299\n 650 = 299\u00d72 + 52\n 299 = 52\u00d75 + 39\n 52 = 39\u00d71 + 13\n 39 = 13\u00d73 + 0</source>]]\n\n====Computer language for Euclid's algorithm====\nOnly a few instruction ''types'' are required to execute Euclid's algorithm\u2014some logical tests (conditional GOTO), unconditional GOTO, assignment (replacement), and subtraction.\n* A ''location'' is symbolized by upper case letter(s), e.g. S, A, etc.\n* The varying quantity (number) in a location is written in lower case letter(s) and (usually) associated with the location's name. For example, location L at the start might contain the number ''l'' = 3009.\n\n====An inelegant program for Euclid's algorithm====\n[[File:Euclid's algorithm Inelegant program 1.png|thumb|163px|right|\"Inelegant\" is a translation of Knuth's version of the algorithm with a subtraction-based remainder-loop replacing his use of division (or a \"modulus\" instruction). Derived from Knuth 1973:2\u20134. Depending on the two numbers \"Inelegant\" may compute the g.c.d. in fewer steps than \"Elegant\".]]\n\nThe following algorithm is framed as Knuth's four-step version of Euclid's and Nicomachus', but, rather than using division to find the remainder, it uses successive subtractions of the shorter length ''s'' from the remaining length ''r'' until ''r'' is less than ''s''. The high-level description, shown in boldface, is adapted from Knuth 1973:2\u20134:\n\n'''INPUT''':\n {{vanchor|1|el1}} [Into two locations L and S put the numbers ''l'' and ''s'' that represent the two lengths]:\n   INPUT L, S\n {{vanchor|2|el2}} [Initialize R: make the remaining length ''r'' equal to the starting/initial/input length ''l'']:\n   R \u2190 L\n\n'''E0: [Ensure ''r'' \u2265 ''s''.]'''\n {{vanchor|3|el3}} [Ensure the smaller of the two numbers is in S and the larger in R]:\n   IF R > S THEN\n     the contents of L is the larger number so skip over the exchange-steps [[#4|4]], [[#5|5]] and [[#6|6]]:\n     GOTO step [[#6|6]]\n   ELSE\n     swap the contents of R and S.\n {{vanchor|4|el4}}   L \u2190 R (this first step is redundant, but is useful for later discussion).\n {{vanchor|5|el5}}   R \u2190 S\n {{vanchor|6|el6}}   S \u2190 L\n\n'''E1: [Find remainder]''': Until the remaining length ''r'' in R is less than the shorter length ''s'' in S, repeatedly subtract the measuring number ''s'' in S from the remaining length ''r'' in R.\n {{vanchor|7|el7}} IF S > R THEN\n     done measuring so\n     GOTO [[#10|10]]\n   ELSE\n     measure again,\n {{vanchor|8|el8}}   R \u2190 R \u2212 S\n {{vanchor|9|el9}}   [Remainder-loop]:\n     GOTO [[#7|7]].\n\n'''E2: [Is the remainder zero?]''': EITHER (i) the last measure was exact, the remainder in R is zero, and the program can halt, OR (ii) the algorithm must continue: the last measure left a remainder in R less than measuring number in S.\n {{vanchor|10|el10}} IF R = 0 THEN\n      done so\n      GOTO [[#15|step 15]]\n    ELSE\n      CONTINUE TO [[#11|step 11]],\n\n'''E3: [Interchange ''s'' and ''r'']''': The nut of Euclid's algorithm. Use remainder ''r'' to measure what was previously smaller number ''s''; L serves as a temporary location.\n {{vanchor|11|el11}}  L \u2190 R\n {{vanchor|12|el12}}  R \u2190 S\n {{vanchor|13|el13}}  S \u2190 L\n {{vanchor|14|el14}}  [Repeat the measuring process]:\n     GOTO [[#7|7]]\n\n'''OUTPUT''':\n\n {{vanchor|15|el15}} [Done. S contains the [[greatest common divisor]]]:\n    PRINT S\n\n'''DONE''':\n {{vanchor|16|el16}} HALT, END, STOP.\n\n====An elegant program for Euclid's algorithm====\n{{clarify span|The following version of Euclid's algorithm requires only six core instructions to do what thirteen are required to do by \"Inelegant\"; worse, \"Inelegant\" requires more ''types'' of instructions.|reason=Contrary this (unsourced) text, it is general consensus in software engineering that good programming style does not aim at minimizing the number of 'core' (whatever that means) instructions or instruction types. Software engineers during the entire recent 50 years would have ostracized the shown program, if only due to its extensive use of 'goto'. While the program should not be removed here, it could serve as an example of poor programming style, leading to hard-to-understand source code.|date=March 2019}} The flowchart of \"Elegant\" can be found at the top of this article. In the (unstructured) Basic language, the steps are numbered, and the instruction <source lang=\"cbmbas\" inline>LET [] = []</source> is the assignment instruction symbolized by \u2190.\n<source lang=\"cbmbas\">\n  5 REM Euclid's algorithm for greatest common divisor\n  6 PRINT \"Type two integers greater than 0\"\n  10 INPUT A,B\n  20 IF B=0 THEN GOTO 80\n  30 IF A > B THEN GOTO 60\n  40 LET B=B-A\n  50 GOTO 20\n  60 LET A=A-B\n  70 GOTO 20\n  80 PRINT A\n  90 END\n</source>\n''How \"Elegant\" works'': In place of an outer \"Euclid loop\", \"Elegant\" shifts back and forth between two \"co-loops\", an A > B loop that computes A \u2190 A \u2212 B, and a B \u2264 A loop that computes B \u2190 B \u2212 A. This works because, when at last the minuend M is less than or equal to the subtrahend S (Difference = Minuend \u2212 Subtrahend), the minuend can become ''s'' (the new measuring length) and the subtrahend can become the new ''r'' (the length to be measured); in other words the \"sense\" of the subtraction reverses.\n\nThe following version can be used with [[Object-oriented programming|object-oriented languages]]:\n<source lang=\"java\">\n// Euclid's algorithm for greatest common divisor\nint euclidAlgorithm (int A, int B){\n     A=Math.abs(A);\n     B=Math.abs(B);\n     while (B!=0){\n          if (A>B) A=A-B;\n          else B=B-A;\n     }\n     return A;\n}\n</source>\n\n===Testing the Euclid algorithms===\nDoes an algorithm do what its author wants it to do? A few test cases usually give some confidence in the core functionality. But tests are not enough. For test cases, one source<ref>{{cite web |url=http://aleph0.clarku.edu/~djoyce/java/elements/bookVII/propVII2.html |title=Euclid's Elements, Book VII, Proposition 2 |publisher=Aleph0.clarku.edu |date= |accessdate=May 20, 2012 |archive-url=https://web.archive.org/web/20120524074919/http://aleph0.clarku.edu/~djoyce/java/elements/bookVII/propVII2.html |archive-date=May 24, 2012 |url-status=live }}</ref> uses 3009 and 884. Knuth suggested 40902, 24140. Another interesting case is the two [[relatively prime]] numbers 14157 and 5950.\n\nBut \"exceptional cases\"<ref>While this notion is in widespread use, it cannot be defined precisely.</ref> must be identified and tested. Will \"Inelegant\" perform properly when R > S, S > R, R = S? Ditto for \"Elegant\": B > A, A > B, A = B? (Yes to all). What happens when one number is zero, both numbers are zero? (\"Inelegant\" computes forever in all cases; \"Elegant\" computes forever when A = 0.) What happens if ''negative'' numbers are entered? Fractional numbers? If the input numbers, i.e. the [[domain (mathematics)|domain]] of the function computed by the algorithm/program, is to include only positive integers including zero, then the failures at zero indicate that the algorithm (and the program that [[instance (computer science)|instantiates]] it) is a [[partial function]] rather than a [[total function]]. A notable failure due to exceptions is the [[Ariane 5 Flight 501]] rocket failure (June 4, 1996).\n\n''Proof of program correctness by use of mathematical induction'': Knuth demonstrates the application of [[mathematical induction]] to an \"extended\" version of Euclid's algorithm, and he proposes \"a general method applicable to proving the validity of any algorithm\".<ref>Knuth 1973:13\u201318. He credits \"the formulation of algorithm-proving in terms of assertions and induction\" to R W. Floyd, Peter Naur, C.A.R. Hoare, H.H. Goldstine and J. von Neumann. Tausworth 1977 borrows Knuth's Euclid example and extends Knuth's method in section 9.1 ''Formal Proofs'' (pp. 288\u2013298).</ref> Tausworthe proposes that a measure of the complexity of a program be the length of its correctness proof.<ref>Tausworthe 1997:294</ref>\n\n===Measuring and improving the Euclid algorithms===\n''Elegance (compactness) versus goodness (speed)'': With only six core instructions, \"Elegant\" is the clear winner, compared to \"Inelegant\" at thirteen instructions. However, \"Inelegant\" is ''faster'' (it arrives at HALT in fewer steps). [[Algorithm analysis]]<ref>cf Knuth 1973:7 (Vol. I), and his more-detailed analyses on pp. 1969:294\u2013313 (Vol II).</ref> indicates why this is the case: \"Elegant\" does ''two'' conditional tests in every subtraction loop, whereas \"Inelegant\" only does one. As the algorithm (usually) requires many loop-throughs, ''on average'' much time is wasted doing a \"B = 0?\" test that is needed only after the remainder is computed.\n\n''Can the algorithms be improved?'': Once the programmer judges a program \"fit\" and \"effective\"\u2014that is, it computes the function intended by its author\u2014then the question becomes, can it be improved?\n\nThe compactness of \"Inelegant\" can be improved by the elimination of five steps. But Chaitin proved that compacting an algorithm cannot be automated by a generalized algorithm;<ref>Breakdown occurs when an algorithm tries to compact itself. Success would solve the [[Halting problem]].</ref> rather, it can only be done [[heuristic]]ally; i.e., by exhaustive search (examples to be found at [[Busy beaver]]), trial and error, cleverness, insight, application of [[inductive reasoning]], etc. Observe that steps 4, 5 and 6 are repeated in steps 11, 12 and 13. Comparison with \"Elegant\" provides a hint that these steps, together with steps 2 and 3, can be eliminated. This reduces the number of core instructions from thirteen to eight, which makes it \"more elegant\" than \"Elegant\", at nine steps.\n\nThe speed of \"Elegant\" can be improved by moving the \"B=0?\" test outside of the two subtraction loops. This change calls for the addition of three instructions (B = 0?, A = 0?, GOTO). Now \"Elegant\" computes the example-numbers faster; whether this is always the case for any given A, B, and R, S would require a detailed analysis.\n\n==Algorithmic analysis==\n{{Main|Analysis of algorithms}}\nIt is frequently important to know how much of a particular resource (such as time or storage) is theoretically required for a given algorithm. Methods have been developed for the [[analysis of algorithms]] to obtain such quantitative answers (estimates); for example, the sorting algorithm above has a time requirement of O(''n''), using the [[big O notation]] with ''n'' as the length of the list. At all times the algorithm only needs to remember two values: the largest number found so far, and its current position in the input list. Therefore, it is said to have a space requirement of ''O(1)'', if the space required to store the input numbers is not counted, or O(''n'') if it is counted.\n\nDifferent algorithms may complete the same task with a different set of instructions in less or more time, space, or '[[algorithmic efficiency|effort]]' than others. For example, a [[binary search]] algorithm (with cost O(log n) ) outperforms a sequential search (cost O(n) ) when used for [[lookup table|table lookups]] on sorted lists or arrays.\n\n===Formal versus empirical===\n{{Main|Empirical algorithmics|Profiling (computer programming)|Program optimization}}\nThe [[analysis of algorithms|analysis, and study of algorithms]] is a discipline of [[computer science]], and is often practiced abstractly without the use of a specific [[programming language]] or implementation. In this sense, algorithm analysis resembles other mathematical disciplines in that it focuses on the underlying properties of the algorithm and not on the specifics of any particular implementation. Usually [[pseudocode]] is used for analysis as it is the simplest and most general representation. However, ultimately, most algorithms are usually implemented on particular hardware/software platforms and their [[algorithmic efficiency]] is eventually put to the test using real code. For the solution of a \"one off\" problem, the efficiency of a particular algorithm may not have significant consequences (unless n is extremely large) but for algorithms designed for fast interactive, commercial or long life scientific usage it may be critical. Scaling from small n to large n frequently exposes inefficient algorithms that are otherwise benign.\n\nEmpirical testing is useful because it may uncover unexpected interactions that affect performance. [[Benchmark (computing)|Benchmarks]] may be used to compare before/after potential improvements to an algorithm after program optimization.\nEmpirical tests cannot replace formal analysis, though, and are not trivial to perform in a fair manner.<ref name=\"KriegelSchubert2016\">{{cite journal|last1=Kriegel|first1=Hans-Peter|authorlink=Hans-Peter Kriegel|last2=Schubert|first2=Erich|last3=Zimek|first3=Arthur|authorlink3=Arthur Zimek|title=The (black) art of run-time evaluation: Are we comparing algorithms or implementations?|journal=Knowledge and Information Systems|volume=52|issue=2|year=2016|pages=341\u2013378|issn=0219-1377|doi=10.1007/s10115-016-1004-2}}</ref>\n\n=== Execution efficiency ===\n{{Main|Algorithmic efficiency}}\nTo illustrate the potential improvements possible even in well-established algorithms, a recent significant innovation, relating to [[Fast Fourier transform|FFT]] algorithms (used heavily in the field of image processing), can decrease processing time up to 1,000 times for applications like medical imaging.<ref>{{cite web| title=Better Math Makes Faster Data Networks| author=Gillian Conahan| date=January 2013| url=http://discovermagazine.com/2013/jan-feb/34-better-math-makes-faster-data-networks#.URAnVieX98F| publisher=discovermagazine.com| access-date=May 13, 2014| archive-url=https://web.archive.org/web/20140513212427/http://discovermagazine.com/2013/jan-feb/34-better-math-makes-faster-data-networks#.URAnVieX98F| archive-date=May 13, 2014| url-status=live}}</ref> In general, speed improvements depend on special properties of the problem, which are very common in practical applications.<ref name=\"Hassanieh12\">Haitham Hassanieh, [[Piotr Indyk]], Dina Katabi, and Eric Price, \"[http://siam.omnibooksonline.com/2012SODA/data/papers/500.pdf ACM-SIAM Symposium On Discrete Algorithms (SODA)] {{webarchive|url=https://web.archive.org/web/20130704180806/http://siam.omnibooksonline.com/2012SODA/data/papers/500.pdf |date=July 4, 2013 }}, Kyoto, January 2012. See also the [http://groups.csail.mit.edu/netmit/sFFT/ sFFT Web Page] {{Webarchive|url=https://web.archive.org/web/20120221145740/http://groups.csail.mit.edu/netmit/sFFT/ |date=February 21, 2012 }}.</ref> Speedups of this magnitude enable computing devices that make extensive use of image processing (like digital cameras and medical equipment) to consume less power.\n\n== Classification ==\nThere are various ways to classify algorithms, each with its own merits.\n\n=== By implementation ===\nOne way to classify algorithms is by implementation means.\n\n{| style=\"float:right; width:200pt;\"\n|-\n| \n<syntaxhighlight lang=\"C\">\nint gcd(int A, int B) {\n    if (B == 0)\n        return A;\n    else if (A > B)\n        return gcd(A-B,B);\n    else\n        return gcd(A,B-A);\n}\n</syntaxhighlight>\n|-\n| Recursive [[C (programming language)|C]] implementation of Euclid's algorithm from the [[#lead|above]] flowchart\n|}\n\n; Recursion\n: A [[recursive algorithm]] is one that invokes (makes reference to) itself repeatedly until a certain condition (also known as termination condition) matches, which is a method common to [[functional programming]]. [[Iteration|Iterative]] algorithms use repetitive constructs like [[Program loops|loops]] and sometimes additional data structures like [[Stack (data structure)|stacks]] to solve the given problems. Some problems are naturally suited for one implementation or the other. For example, [[towers of Hanoi]] is well understood using recursive implementation. Every recursive version has an equivalent (but possibly more or less complex) iterative version, and vice versa.\n; Logical\n: An algorithm may be viewed as controlled [[Deductive reasoning|logical deduction]]. This notion may be expressed as: ''Algorithm = logic + control''.<ref>Kowalski 1979</ref> The logic component expresses the axioms that may be used in the computation and the control component determines the way in which deduction is applied to the axioms. This is the basis for the [[logic programming]] paradigm. In pure logic programming languages, the control component is fixed and algorithms are specified by supplying only the logic component. The appeal of this approach is the elegant [[Formal semantics of programming languages|semantics]]: a change in the axioms produces a well-defined change in the algorithm.\n; Serial, parallel or distributed\n: Algorithms are usually discussed with the assumption that computers execute one instruction of an algorithm at a time. Those computers are sometimes called serial computers. An [[algorithm design]]ed for such an environment is called a serial algorithm, as opposed to [[parallel algorithm]]s or [[distributed algorithms]]. Parallel algorithms take advantage of computer architectures where several processors can work on a problem at the same time, whereas distributed algorithms utilize multiple machines connected with a [[computer network]]. Parallel or distributed algorithms divide the problem into more symmetrical or asymmetrical subproblems and collect the results back together. The resource consumption in such algorithms is not only processor cycles on each processor but also the communication overhead between the processors. Some sorting algorithms can be parallelized efficiently, but their communication overhead is expensive. Iterative algorithms are generally parallelizable. Some problems have no parallel algorithms and are called inherently serial problems.\n; Deterministic or non-deterministic\n: [[Deterministic algorithm]]s solve the problem with exact decision at every step of the algorithm whereas [[non-deterministic algorithm]]s solve problems via guessing although typical guesses are made more accurate through the use of [[heuristics]].\n; Exact or approximate\n: While many algorithms reach an exact solution, [[approximation algorithm]]s seek an approximation that is closer to the true solution. The approximation can be reached by either using a deterministic or a random strategy. Such algorithms have practical value for many hard problems. One of the examples of an approximate algorithm is the [[Knapsack problem]], where there is a set of given items. Its goal is to pack the knapsack to get the maximum total value. Each item has some weight and some value. Total weight that can be carried is no more than some fixed number X. So, the solution must consider weights of items as well as their value.<ref>{{Cite book|url=https://www.springer.com/us/book/9783540402862|title=Knapsack Problems {{!}} Hans Kellerer {{!}} Springer|language=en|isbn=978-3-540-40286-2|publisher=Springer|year=2004|access-date=September 19, 2017|archive-url=https://web.archive.org/web/20171018181055/https://www.springer.com/us/book/9783540402862|archive-date=October 18, 2017|url-status=live}}</ref>\n; [[Quantum algorithm]]\n: They run on a realistic model of [[quantum computation]]. The term is usually used for those algorithms which seem inherently quantum, or use some essential feature of [[Quantum computing]] such as [[quantum superposition]] or [[quantum entanglement]].\n\n=== By design paradigm ===\nAnother way of classifying algorithms is by their design methodology or [[algorithmic paradigm|paradigm]]. There is a certain number of paradigms, each different from the other. Furthermore, each of these categories includes many different types of algorithms. Some common paradigms are:\n\n; [[Brute force search|Brute-force]] or exhaustive search\n: This is the [[Na\u00efve algorithm|naive method]] of trying every possible solution to see which is best.<ref>{{cite book| last1 = Carroll| first1 = Sue| last2 = Daughtrey| first2 = Taz| title = Fundamental Concepts for the Software Quality Engineer| url = https://books.google.com/?id=bz_cl3B05IcC&pg=PA282| date = July 4, 2007| publisher = American Society for Quality| isbn = 978-0-87389-720-4| pages = 282 et seq }}</ref>\n; Divide and conquer\n: A [[divide and conquer algorithm]] repeatedly reduces an instance of a problem to one or more smaller instances of the same problem (usually [[recursion|recursively]]) until the instances are small enough to solve easily. One such example of divide and conquer is [[mergesort|merge sorting]]. Sorting can be done on each segment of data after dividing data into segments and sorting of entire data can be obtained in the conquer phase by merging the segments. A simpler variant of divide and conquer is called a ''decrease and conquer algorithm'', that solves an identical subproblem and uses the solution of this subproblem to solve the bigger problem. Divide and conquer divides the problem into multiple subproblems and so the conquer stage is more complex than decrease and conquer algorithms. An example of a decrease and conquer algorithm is the [[binary search algorithm]].\n; Search and enumeration\n: Many problems (such as playing [[chess]]) can be modeled as problems on [[graph theory|graphs]]. A [[graph exploration algorithm]] specifies rules for moving around a graph and is useful for such problems. This category also includes [[search algorithm]]s, [[branch and bound]] enumeration and [[backtracking]].\n;[[Randomized algorithm]]\n: Such algorithms make some choices randomly (or pseudo-randomly). They can be very useful in finding approximate solutions for problems where finding exact solutions can be impractical (see heuristic method below). For some of these problems, it is known that the fastest approximations must involve some [[randomness]].<ref>For instance, the [[volume]] of a [[convex polytope]] (described using a membership oracle) can be approximated to high accuracy by a randomized polynomial time algorithm, but not by a deterministic one: see {{citation\n | last1 = Dyer | first1 = Martin\n | last2 = Frieze | first2 = Alan\n | last3 = Kannan | first3 = Ravi\n | date = January 1991\n | doi = 10.1145/102782.102783\n | issue = 1\n | journal = J. ACM\n | pages = 1\u201317\n | title = A Random Polynomial-time Algorithm for Approximating the Volume of Convex Bodies\n | volume = 38| citeseerx = 10.1.1.145.4600}}.</ref> Whether randomized algorithms with [[P (complexity)|polynomial time complexity]] can be the fastest algorithms for some problems is an open question known as the [[P versus NP problem]]. There are two large classes of such algorithms:\n# [[Monte Carlo algorithm]]s return a correct answer with high-probability. E.g. [[RP (complexity)|RP]] is the subclass of these that run in [[polynomial time]].\n# [[Las Vegas algorithm]]s always return the correct answer, but their running time is only probabilistically bound, e.g. [[Zero-error Probabilistic Polynomial time|ZPP]].\n; [[Reduction (complexity)|Reduction of complexity]]\n: This technique involves solving a difficult problem by transforming it into a better-known problem for which we have (hopefully) [[asymptotically optimal]] algorithms. The goal is to find a reducing algorithm whose [[Computational complexity theory|complexity]] is not dominated by the resulting reduced algorithm's. For example, one [[selection algorithm]] for finding the median in an unsorted list involves first sorting the list (the expensive portion) and then pulling out the middle element in the sorted list (the cheap portion). This technique is also known as ''[[Transform and conquer algorithm|transform and conquer]]''.\n; [[Back tracking]]\n: In this approach, multiple solutions are built incrementally and abandoned when it is determined that they cannot lead to a valid full solution.\n\n=== Optimization problems ===\n\nFor [[optimization problem]]s there is a more specific classification of algorithms; an algorithm for such problems may fall into one or more of the general categories described above as well as into one of the following:\n\n; [[Linear programming]]\n: When searching for optimal solutions to a linear function bound to linear equality and inequality constraints, the constraints of the problem can be used directly in producing the optimal solutions. There are algorithms that can solve any problem in this category, such as the popular [[simplex algorithm]].<ref>\n[[George B. Dantzig]] and Mukund N. Thapa. 2003. ''Linear Programming 2: Theory and Extensions''. Springer-Verlag.</ref> Problems that can be solved with linear programming include the [[maximum flow problem]] for directed graphs. If a problem additionally requires that one or more of the unknowns must be an [[integer]] then it is classified in [[integer programming]]. A linear programming algorithm can solve such a problem if it can be proved that all restrictions for integer values are superficial, i.e., the solutions satisfy these restrictions anyway. In the general case, a specialized algorithm or an algorithm that finds approximate solutions is used, depending on the difficulty of the problem.\n; [[Dynamic programming]]\n: When a problem shows [[optimal substructure]]s\u2014meaning the optimal solution to a problem can be constructed from optimal solutions to subproblems\u2014and [[overlapping subproblems]], meaning the same subproblems are used to solve many different problem instances, a quicker approach called ''dynamic programming'' avoids recomputing solutions that have already been computed. For example, [[Floyd\u2013Warshall algorithm]], the shortest path to a goal from a vertex in a weighted [[graph (discrete mathematics)|graph]] can be found by using the shortest path to the goal from all adjacent vertices. Dynamic programming and [[memoization]] go together. The main difference between dynamic programming and divide and conquer is that subproblems are more or less independent in divide and conquer, whereas subproblems overlap in dynamic programming. The difference between dynamic programming and straightforward recursion is in caching or memoization of recursive calls. When subproblems are independent and there is no repetition, memoization does not help; hence dynamic programming is not a solution for all complex problems. By using memoization or maintaining a [[Mathematical table|table]] of subproblems already solved, dynamic programming reduces the exponential nature of many problems to polynomial complexity.\n; The greedy method\n: A [[greedy algorithm]] is similar to a dynamic programming algorithm in that it works by examining substructures, in this case not of the problem but of a given solution. Such algorithms start with some solution, which may be given or have been constructed in some way, and improve it by making small modifications. For some problems they can find the optimal solution while for others they stop at [[local optimum|local optima]], that is, at solutions that cannot be improved by the algorithm but are not optimum. The most popular use of greedy algorithms is for finding the minimal spanning tree where finding the optimal solution is possible with this method. [[Huffman coding|Huffman Tree]], [[kruskal's algorithm|Kruskal]], [[Prim's algorithm|Prim]], [[Sollin's algorithm|Sollin]] are greedy algorithms that can solve this optimization problem.\n;The heuristic method\n:In [[optimization problem]]s, [[heuristic algorithm]]s can be used to find a solution close to the optimal solution in cases where finding the optimal solution is impractical. These algorithms work by getting closer and closer to the optimal solution as they progress. In principle, if run for an infinite amount of time, they will find the optimal solution. Their merit is that they can find a solution very close to the optimal solution in a relatively short time. Such algorithms include [[local search (optimization)|local search]], [[tabu search]], [[simulated annealing]], and [[genetic algorithm]]s. Some of them, like simulated annealing, are non-deterministic algorithms while others, like tabu search, are deterministic. When a bound on the error of the non-optimal solution is known, the algorithm is further categorized as an [[approximation algorithm]].\n\n=== By field of study ===\n{{See also|List of algorithms}}\nEvery field of science has its own problems and needs efficient algorithms. Related problems in one field are often studied together. Some example classes are [[search algorithm]]s, [[sorting algorithm]]s, [[merge algorithm]]s, [[numerical analysis|numerical algorithms]], [[graph theory|graph algorithms]], [[string algorithms]], [[computational geometry|computational geometric algorithms]], [[combinatorial|combinatorial algorithms]], [[medical algorithm]]s, [[machine learning]], [[cryptography]], [[data compression]] algorithms and [[parsing|parsing techniques]].\n\nFields tend to overlap with each other, and algorithm advances in one field may improve those of other, sometimes completely unrelated, fields. For example, dynamic programming was invented for optimization of resource consumption in industry but is now used in solving a broad range of problems in many fields.\n\n=== By complexity ===\n{{See also|Complexity class| Parameterized complexity}}\nAlgorithms can be classified by the amount of time they need to complete compared to their input size:\n* Constant time: if the time needed by the algorithm is the same, regardless of the input size. E.g. an access to an [[Array data structure|array]] element.\n* Logarithmic time: if the time is a logarithmic function of the input size. E.g. [[binary search algorithm]].\n* Linear time: if the time is proportional to the input size. E.g. the traverse of a list.\n* Polynomial time: if the time is a power of the input size. E.g. the [[bubble sort]] algorithm has quadratic time complexity.\n* Exponential time: if the time is an exponential function of the input size. E.g. [[Brute-force search]].\n\nSome problems may have multiple algorithms of differing complexity, while other problems might have no algorithms or no known efficient algorithms. There are also mappings from some problems to other problems. Owing to this, it was found to be more suitable to classify the problems themselves instead of the algorithms into equivalence classes based on the complexity of the best possible algorithms for them.\n\n== Continuous algorithms ==\nThe adjective \"continuous\" when applied to the word \"algorithm\" can mean:\n* An algorithm operating on data that represents continuous quantities, even though this data is represented by discrete approximations\u2014such algorithms are studied in [[numerical analysis]]; or\n* An algorithm in the form of a [[differential equation]] that operates continuously on the data, running on an [[analog computer]].<ref>{{cite book| author = Tsypkin| title = Adaptation and learning in automatic systems| url = https://books.google.com/?id=sgDHJlafMskC&pg=PA54| year = 1971| publisher = Academic Press| isbn = 978-0-08-095582-7| page = 54 }}</ref>\n\n== Legal issues ==\n{{see also|Software patent}}\n\nAlgorithms, by themselves, are not usually patentable. In the United States, a claim consisting solely of simple manipulations of abstract concepts, numbers, or signals does not constitute \"processes\" (USPTO 2006), and hence algorithms are not patentable (as in [[Gottschalk v. Benson]]). However practical applications of algorithms are sometimes patentable. For example, in [[Diamond v. Diehr]], the application of a simple [[feedback]] algorithm to aid in the curing of [[synthetic rubber]] was deemed patentable. The [[Software patent debate|patenting of software]] is highly controversial, and there are highly criticized patents involving algorithms, especially [[data compression]] algorithms, such as [[Unisys]]' [[Graphics Interchange Format#Unisys and LZW patent enforcement|LZW patent]].\n\nAdditionally, some cryptographic algorithms have export restrictions (see [[export of cryptography]]).\n\n== History: Development of the notion of \"algorithm\" ==\n\n=== Ancient Near East ===\nThe earliest  evidence of algorithms is found in the [[Babylonian mathematics]] of ancient [[Mesopotamia]] (modern Iraq). A [[Sumer]]ian clay tablet found in [[Shuruppak]] near [[Baghdad]] and dated to circa 2500 BC described the earliest [[division algorithm]].<ref name=\"Springer Science & Business Media\">{{cite book |last1=Chabert |first1=Jean-Luc |title=A History of Algorithms: From the Pebble to the Microchip |date=2012 |publisher=Springer Science & Business Media |isbn=9783642181924 |pages=7\u20138}}</ref> During the [[First Babylonian dynasty|Hammurabi dynasty]] circa 1800-1600 BC, [[Babylonia]]n clay tablets described algorithms for computing [[formulas]].<ref>{{cite journal |last1=Knuth |first1=Donald E. |title=Ancient Babylonian Algorithms |journal=Commun. ACM |date=1972 |volume=15 |issue=7 |pages=671\u2013677 |doi=10.1145/361454.361514 |url=https://web.archive.org/web/20121224100137/steiner.math.nthu.edu.tw/disk5/js/computer/1.pdf |issn=0001-0782}}</ref> Algorithms were also used in [[Babylonian astronomy]]. Babylonian clay tablets describe and employ algorithmic procedures to compute the time and place of significant astronomical events.<ref>{{Citation | last = Aaboe | first = Asger | author-link = Asger Aaboe | date = 2001 | title = Episodes from the Early History of Astronomy | publisher = Springer | place = New York | pages = 40\u201362 | isbn = 978-0-387-95136-2 }}</ref>\n\nAlgorithms for arithmetic are also found in ancient [[Egyptian mathematics]], dating back to the [[Rhind Mathematical Papyrus]] circa 1550 BC.<ref name=\"Springer Science & Business Media\"/> Algorithms were later used in ancient [[Hellenistic mathematics]]. Two examples are the [[Sieve of Eratosthenes]], which was described in the ''[[Introduction to Arithmetic]]'' by [[Nicomachus]],<ref>{{cite web|url=http://www.math.wichita.edu/history/men/eratosthenes.html|title=Eratosthenes|publisher=Wichita State University: Department of Mathematics and Statistics|first=Courtney|last=Ast|access-date=February 27, 2015|archive-url=https://web.archive.org/web/20150227150653/http://www.math.wichita.edu/history/men/eratosthenes.html|archive-date=February 27, 2015|url-status=live}}</ref><ref name=Cooke2005/>{{rp|Ch 9.2}} and the [[Euclidean algorithm]], which was first described in ''[[Euclid's Elements]]'' (c. 300 BC).<ref name=Cooke2005/>{{rp|Ch 9.1}}\n\n=== Discrete and distinguishable symbols ===\nTally-marks: To keep track of their flocks, their sacks of grain and their money the ancients used tallying: accumulating stones or marks scratched on sticks or making discrete symbols in clay. Through the Babylonian and Egyptian use of marks and symbols, eventually [[Roman numerals]] and the [[abacus]] evolved (Dilson, p.&nbsp;16\u201341). Tally marks appear prominently in [[unary numeral system]] arithmetic used in [[Turing machine]] and [[Post\u2013Turing machine]] computations.\n\n=== Manipulation of symbols as \"place holders\" for numbers: algebra ===\n[[Muhammad ibn M\u016bs\u0101 al-Khw\u0101rizm\u012b]], a [[Mathematics in medieval Islam|Persian mathematician]], wrote the ''[[Al-jabr]]'' in the 9th century. The terms \"[[algorism]]\" and \"algorithm\" are derived from the name al-Khw\u0101rizm\u012b, while the term \"[[algebra]]\" is derived from the book ''Al-jabr''. In Europe, the word \"algorithm\" was originally used to refer to the sets of rules and techniques used by Al-Khwarizmi to solve algebraic equations, before later being generalized to refer to any set of rules or techniques.<ref>{{cite book |last1=Chabert |first1=Jean-Luc |title=A History of Algorithms: From the Pebble to the Microchip |date=2012 |publisher=Springer Science & Business Media |isbn=9783642181924 |page=2}}</ref> This eventually culminated in [[Gottfried Leibniz|Leibniz]]'s notion of the [[calculus ratiocinator]] (ca 1680):\n\n{{quote|A good century and a half ahead of his time, Leibniz proposed an algebra of logic, an algebra that would specify the rules for manipulating logical concepts in the manner that ordinary algebra specifies the rules for manipulating numbers.<ref>Davis 2000:18</ref>}}\n\n=== Cryptographic algorithms ===\nThe first [[cryptographic]] algorithm for deciphering encrypted code was developed by [[Al-Kindi]], a 9th-century [[Mathematics in medieval Islam|Arab mathematician]], in ''A Manuscript On Deciphering Cryptographic Messages''. He gave the first description of [[cryptanalysis]] by [[frequency analysis]], the earliest [[codebreaking]] algorithm.<ref name=\"Dooley\">{{cite book |last1=Dooley |first1=John F. |title=A Brief History of Cryptology and Cryptographic Algorithms |date=2013 |publisher=Springer Science & Business Media |isbn=9783319016283 |pages=12\u20133}}</ref>\n\n=== Mechanical contrivances with discrete states ===\n''The clock'': Bolter credits the invention of the weight-driven [[clock]] as \"The key invention [of Europe in the Middle Ages]\", in particular, the [[verge escapement]]<ref>Bolter 1984:24</ref> that provides us with the tick and tock of a mechanical clock. \"The accurate automatic machine\"<ref>Bolter 1984:26</ref> led immediately to \"mechanical [[automata theory|automata]]\" beginning in the 13th century and finally to \"computational machines\"\u2014the [[difference engine]] and [[analytical engine]]s of [[Charles Babbage]] and Countess [[Ada Lovelace]], mid-19th century.<ref>Bolter 1984:33\u201334, 204\u2013206.</ref> Lovelace is credited with the first creation of an algorithm intended for processing on a computer\u2014Babbage's analytical engine, the first device considered a real [[Turing-complete]] computer instead of just a [[calculator]]\u2014and is sometimes called \"history's first programmer\" as a result, though a full implementation of Babbage's second device would not be realized until decades after her lifetime.\n\n''Logical machines 1870 \u2013 [[Stanley Jevons]]' \"logical abacus\" and \"logical machine\"'': The technical problem was to reduce [[Boolean equation]]s when presented in a form similar to what is now known as [[Karnaugh map]]s. Jevons (1880) describes first a simple \"abacus\" of \"slips of wood furnished with pins, contrived so that any part or class of the [logical] combinations can be picked out mechanically ... More recently, however, I have reduced the system to a completely mechanical form, and have thus embodied the whole of the indirect process of inference in what may be called a ''Logical Machine''\" His machine came equipped with \"certain moveable wooden rods\" and \"at the foot are 21 keys like those of a piano [etc] ...\". With this machine he could analyze a \"[[syllogism]] or any other simple logical argument\".<ref>All quotes from W. Stanley Jevons 1880 ''Elementary Lessons in Logic: Deductive and Inductive'', Macmillan and Co., London and New York. Republished as a googlebook; cf Jevons 1880:199\u2013201. Louis Couturat 1914 ''the Algebra of Logic'', The Open Court Publishing Company, Chicago and London. Republished as a googlebook; cf Couturat 1914:75\u201376 gives a few more details; he compares this to a typewriter as well as a piano. Jevons states that the account is to be found at January 20, 1870 ''The Proceedings of the Royal Society''.</ref>\n\nThis machine he displayed in 1870 before the Fellows of the Royal Society.<ref>Jevons 1880:199\u2013200</ref> Another logician [[John Venn]], however, in his 1881 ''Symbolic Logic'', turned a jaundiced eye to this effort: \"I have no high estimate myself of the interest or importance of what are sometimes called logical machines ... it does not seem to me that any contrivances at present known or likely to be discovered really deserve the name of logical machines\"; see more at [[Algorithm characterizations]]. But not to be outdone he too presented \"a plan somewhat analogous, I apprehend, to Prof. Jevon's ''abacus'' ... [And] [a]gain, corresponding to Prof. Jevons's logical machine, the following contrivance may be described. I prefer to call it merely a logical-diagram machine ... but I suppose that it could do very completely all that can be rationally expected of any logical machine\".<ref>All quotes from John Venn 1881 ''Symbolic Logic'', Macmillan and Co., London. Republished as a googlebook. cf Venn 1881:120\u2013125. The interested reader can find a deeper explanation in those pages.</ref>\n\n''Jacquard loom, Hollerith punch cards, telegraphy and telephony \u2013 the electromechanical relay'': Bell and Newell (1971) indicate that the [[Jacquard loom]] (1801), precursor to [[Hollerith cards]] (punch cards, 1887), and \"telephone switching technologies\" were the roots of a tree leading to the development of the first computers.<ref>Bell and Newell diagram 1971:39, cf. Davis 2000</ref> By the mid-19th century the [[telegraph]], the precursor of the telephone, was in use throughout the world, its discrete and distinguishable encoding of letters as \"dots and dashes\" a common sound. By the late 19th century the [[ticker tape]] (ca 1870s) was in use, as was the use of Hollerith cards in the 1890 U.S. census. Then came the [[teleprinter]] (ca. 1910) with its punched-paper use of [[Baudot code]] on tape.\n\n''Telephone-switching networks'' of electromechanical [[relay]]s (invented 1835) was behind the work of [[George Stibitz]] (1937), the inventor of the digital adding device. As he worked in Bell Laboratories, he observed the \"burdensome' use of mechanical calculators with gears. \"He went home one evening in 1937 intending to test his idea... When the tinkering was over, Stibitz had constructed a binary adding device\".<ref>* Melina Hill, Valley News Correspondent, ''A Tinkerer Gets a Place in History'', Valley News West Lebanon NH, Thursday, March 31, 1983, p. 13.</ref>\n\nDavis (2000) observes the particular importance of the electromechanical relay (with its two \"binary states\" ''open'' and ''closed''):\n: It was only with the development, beginning in the 1930s, of electromechanical calculators using electrical relays, that machines were built having the scope Babbage had envisioned.\"<ref>Davis 2000:14</ref>\n\n=== Mathematics during the 19th century up to the mid-20th century ===\n''Symbols and rules'': In rapid succession, the mathematics of [[George Boole]] (1847, 1854), [[Gottlob Frege]] (1879), and [[Giuseppe Peano]] (1888\u20131889) reduced arithmetic to a sequence of symbols manipulated by rules. Peano's ''The principles of arithmetic, presented by a new method'' (1888) was \"the first attempt at an axiomatization of mathematics in a [[Symbolic language (programming)|symbolic language]]\".<ref>van Heijenoort 1967:81ff</ref>\n\nBut Heijenoort gives Frege (1879) this kudos: Frege's is \"perhaps the most important single work ever written in logic. ... in which we see a \" 'formula language', that is a ''lingua characterica'', a language written with special symbols, \"for pure thought\", that is, free from rhetorical embellishments ... constructed from specific symbols that are manipulated according to definite rules\".<ref>van Heijenoort's commentary on Frege's ''Begriffsschrift, a formula language, modeled upon that of arithmetic, for pure thought'' in van Heijenoort 1967:1</ref> The work of Frege was further simplified and amplified by [[Alfred North Whitehead]] and [[Bertrand Russell]] in their [[Principia Mathematica]] (1910\u20131913).\n\n''The paradoxes'': At the same time a number of disturbing paradoxes appeared in the literature, in particular, the [[Burali-Forti paradox]] (1897), the [[Russell paradox]] (1902\u201303), and the [[Richard Paradox]].<ref>Dixon 1906, cf. Kleene 1952:36\u201340</ref> The resultant considerations led to [[Kurt G\u00f6del]]'s paper (1931)\u2014he specifically cites the paradox of the liar\u2014that completely reduces rules of [[recursion]] to numbers.\n\n''Effective calculability'': In an effort to solve the [[Entscheidungsproblem]] defined precisely by Hilbert in 1928, mathematicians first set about to define what was meant by an \"effective method\" or \"effective calculation\" or \"effective calculability\" (i.e., a calculation that would succeed). In rapid succession the following appeared: [[Alonzo Church]], [[Stephen Kleene]] and [[J.B. Rosser]]'s [[\u03bb-calculus]]<ref>cf. footnote in Alonzo Church 1936a in Davis 1965:90 and 1936b in Davis 1965:110</ref> a finely honed definition of \"general recursion\" from the work of G\u00f6del acting on suggestions of [[Jacques Herbrand]] (cf. G\u00f6del's Princeton lectures of 1934) and subsequent simplifications by Kleene.<ref>Kleene 1935\u20136 in Davis 1965:237ff, Kleene 1943 in Davis 1965:255ff</ref> Church's proof<ref>Church 1936 in Davis 1965:88ff</ref> that the Entscheidungsproblem was unsolvable, [[Emil Post]]'s definition of effective calculability as a worker mindlessly following a list of instructions to move left or right through a sequence of rooms and while there either mark or erase a paper or observe the paper and make a yes-no decision about the next instruction.<ref>cf. \"Finite Combinatory Processes \u2013 formulation 1\", Post 1936 in Davis 1965:289\u2013290</ref> Alan Turing's proof of that the Entscheidungsproblem was unsolvable by use of his \"a- [automatic-] machine\"<ref>Turing 1936\u201337 in Davis 1965:116ff</ref>\u2014in effect almost identical to Post's \"formulation\", [[J. Barkley Rosser]]'s definition of \"effective method\" in terms of \"a machine\".<ref>Rosser 1939 in Davis 1965:226</ref> [[S.C. Kleene]]'s proposal of a precursor to \"[[Church thesis]]\" that he called \"Thesis I\",<ref>Kleene 1943 in Davis 1965:273\u2013274</ref> and a few years later Kleene's renaming his Thesis \"Church's Thesis\"<ref>Kleene 1952:300, 317</ref> and proposing \"Turing's Thesis\".<ref>Kleene 1952:376</ref>\n\n=== Emil Post (1936) and Alan Turing (1936\u201337, 1939) ===\n\n[[Emil Post]] (1936) described the actions of a \"computer\" (human being) as follows:\n:\"...two concepts are involved: that of a ''symbol space'' in which the work leading from problem to answer is to be carried out, and a fixed unalterable ''set of directions''.\n\nHis symbol space would be\n:\"a two-way infinite sequence of spaces or boxes... The problem solver or worker is to move and work in this symbol space, being capable of being in, and operating in but one box at a time.... a box is to admit of but two possible conditions, i.e., being empty or unmarked, and having a single mark in it, say a vertical stroke.\n\n:\"One box is to be singled out and called the starting point. ...a specific problem is to be given in symbolic form by a finite number of boxes [i.e., INPUT] being marked with a stroke. Likewise, the answer [i.e., OUTPUT] is to be given in symbolic form by such a configuration of marked boxes...\n\n:\"A set of directions applicable to a general problem sets up a deterministic process when applied to each specific problem. This process terminates only when it comes to the direction of type (C ) [i.e., STOP]\".<ref>Turing 1936\u201337 in Davis 1965:289\u2013290</ref> See more at [[Post\u2013Turing machine]]\n[[File:Alan Turing.jpg|thumb|200px|Alan Turing's statue at [[Bletchley Park]]]]\n[[Alan Turing]]'s work<ref>Turing 1936 in Davis 1965, Turing 1939 in Davis 1965:160</ref> preceded that of Stibitz (1937); it is unknown whether Stibitz knew of the work of Turing. Turing's biographer believed that Turing's use of a typewriter-like model derived from a youthful interest: \"Alan had dreamt of inventing typewriters as a boy; Mrs. Turing had a typewriter, and he could well have begun by asking himself what was meant by calling a typewriter 'mechanical'\".<ref>Hodges, p.&nbsp;96</ref> Given the prevalence of Morse code and telegraphy, ticker tape machines, and teletypewriters we{{Who|date=March 2017}} might conjecture that all were influences.\n\nTuring\u2014his model of computation is now called a [[Turing machine]]\u2014begins, as did Post, with an analysis of a human computer that he whittles down to a simple set of basic motions and \"states of mind\". But he continues a step further and creates a machine as a model of computation of numbers.<ref>Turing 1936\u201337:116</ref>\n\n:\"Computing is normally done by writing certain symbols on paper. We may suppose this paper is divided into squares like a child's arithmetic book...I assume then that the computation is carried out on one-dimensional paper, i.e., on a tape divided into squares. I shall also suppose that the number of symbols which may be printed is finite...\n\n:\"The behavior of the computer at any moment is determined by the symbols which he is observing, and his \"state of mind\" at that moment. We may suppose that there is a bound B to the number of symbols or squares which the computer can observe at one moment. If he wishes to observe more, he must use successive observations. We will also suppose that the number of states of mind which need be taken into account is finite...\n\n:\"Let us imagine that the operations performed by the computer to be split up into 'simple operations' which are so elementary that it is not easy to imagine them further divided.\"<ref name=\"Turing 1936\u201337 in Davis 1965:136\">Turing 1936\u201337 in Davis 1965:136</ref>\n\nTuring's reduction yields the following:\n:\"The simple operations must therefore include:\n::\"(a) Changes of the symbol on one of the observed squares\n::\"(b) Changes of one of the squares observed to another square within L squares of one of the previously observed squares.\n\"It may be that some of these change necessarily invoke a change of state of mind. The most general single operation must, therefore, be taken to be one of the following:\n::\"(A) A possible change (a) of symbol together with a possible change of state of mind.\n::\"(B) A possible change (b) of observed squares, together with a possible change of state of mind\"\n\n:\"We may now construct a machine to do the work of this computer.\"<ref name=\"Turing 1936\u201337 in Davis 1965:136\"/>\n\nA few years later, Turing expanded his analysis (thesis, definition) with this forceful expression of it:\n:\"A function is said to be \"effectively calculable\" if its values can be found by some purely mechanical process. Though it is fairly easy to get an intuitive grasp of this idea, it is nevertheless desirable to have some more definite, mathematical expressible definition ... [he discusses the history of the definition pretty much as presented above with respect to G\u00f6del, Herbrand, Kleene, Church, Turing, and Post] ... We may take this statement literally, understanding by a purely mechanical process one which could be carried out by a machine. It is possible to give a mathematical description, in a certain normal form, of the structures of these machines. The development of these ideas leads to the author's definition of a computable function, and to an identification of computability \u2020 with effective calculability ... .\n::\"\u2020 We shall use the expression \"computable function\" to mean a function calculable by a machine, and we let \"effectively calculable\" refer to the intuitive idea without particular identification with any one of these definitions\".<ref>Turing 1939 in Davis 1965:160</ref>\n\n=== J.B. Rosser (1939) and S.C. Kleene (1943) ===\n[[J. Barkley Rosser]] defined an 'effective [mathematical] method' in the following manner (italicization added):\n:\"'Effective method' is used here in the rather special sense of a method each step of which is precisely determined and which is certain to produce the answer in a finite number of steps. With this special meaning, three different precise definitions have been given to date. [his footnote #5; see discussion immediately below]. The simplest of these to state (due to Post and Turing) says essentially that ''an effective method of solving certain sets of problems exists if one can build a machine which will then solve any problem of the set with no human intervention beyond inserting the question and (later) reading the answer''. All three definitions are equivalent, so it doesn't matter which one is used. Moreover, the fact that all three are equivalent is a very strong argument for the correctness of any one.\" (Rosser 1939:225\u2013226)\n\nRosser's footnote No. 5 references the work of (1) Church and Kleene and their definition of \u03bb-definability, in particular Church's use of it in his ''An Unsolvable Problem of Elementary Number Theory'' (1936); (2) Herbrand and G\u00f6del and their use of recursion in particular G\u00f6del's use in his famous paper ''On Formally Undecidable Propositions of Principia Mathematica and Related Systems I'' (1931); and (3) Post (1936) and Turing (1936\u201337) in their mechanism-models of computation.\n\n[[Stephen C. Kleene]] defined as his now-famous \"Thesis I\" known as the [[Church\u2013Turing thesis]]. But he did this in the following context (boldface in original):\n:\"12. ''Algorithmic theories''... In setting up a complete algorithmic theory, what we do is to describe a procedure, performable for each set of values of the independent variables, which procedure necessarily terminates and in such manner that from the outcome we can read a definite answer, \"yes\" or \"no,\" to the question, \"is the predicate value true?\"\" (Kleene 1943:273)\n\n=== History after 1950 ===\nA number of efforts have been directed toward further refinement of the definition of \"algorithm\", and activity is on-going because of issues surrounding, in particular, [[foundations of mathematics]] (especially the [[Church\u2013Turing thesis]]) and [[philosophy of mind]] (especially arguments about [[artificial intelligence]]). For more, see [[Algorithm characterizations]].\n\n== See also ==\n{{div col|colwidth=22em}}\n* [[Abstract machine]]\n* [[Algorithm engineering]]\n* [[Algorithm characterizations]]\n* [[Algorithmic composition]]\n* [[Algorithmic entities]]\n* [[Algorithmic synthesis]]\n* [[Algorithmic technique]]\n* [[Algorithmic topology]]\n* [[Garbage in, garbage out]]\n* ''[[Introduction to Algorithms]]'' (textbook)\n* [[List of algorithms]]\n* [[List of algorithm general topics]]\n* [[List of important publications in theoretical computer science#Algorithms|List of important publications in theoretical computer science \u2013 Algorithms]]\n* [[Theory of computation]]\n** [[Computability theory]]\n** [[Computational complexity theory]]\n{{div col end}}\n\n==Notes==\n{{Reflist}}\n\n==Bibliography==\n{{refbegin|30em}}\n* {{cite journal | last1 = Axt | first1 = P | year = 1959 | title = On a Subrecursive Hierarchy and Primitive Recursive Degrees | url = | journal = Transactions of the American Mathematical Society | volume = 92 | issue = 1| pages = 85\u2013105 | doi=10.2307/1993169| jstor = 1993169 | doi-access = free}}\n* Bell, C. Gordon and Newell, Allen (1971), ''Computer Structures: Readings and Examples'', McGraw\u2013Hill Book Company, New York. {{ISBN|0-07-004357-4}}.\n* {{Cite journal|author1-link=Andreas Blass|first1=Andreas|last1=Blass|author2-link=Yuri Gurevich|first2=Yuri|last2=Gurevich|year=2003|url=http://research.microsoft.com/~gurevich/Opera/164.pdf|title=Algorithms: A Quest for Absolute Definitions|journal= Bulletin of European Association for Theoretical Computer Science|volume= 81}} Includes an excellent bibliography of 56 references.\n* {{cite book| last = Bolter| first = David J.| title = Turing's Man: Western Culture in the Computer Age| edition = 1984| year = 1984| publisher = The University of North Carolina Press|location= Chapel Hill, NC| isbn = 978-0-8078-1564-9 }}, {{ISBN|0-8078-4108-0}}\n* {{cite book| last1 = Boolos| first1 = George| last2 = Jeffrey| first2 = Richard| title = Computability and Logic| url = https://archive.org/details/computabilitylog0000bool_r8y9| url-access = registration| edition = 4th| origyear = 1974| year = 1999| publisher = Cambridge University Press, London| isbn = 978-0-521-20402-6| ref = harv| author1-link = George Boolos| author2-link = Richard Jeffrey }}: cf. Chapter 3 ''Turing machines'' where they discuss \"certain enumerable sets not effectively (mechanically) enumerable\".\n* {{cite book| last = Burgin| first = Mark| title = Super-Recursive Algorithms| year = 2004| publisher = Springer| isbn = 978-0-387-95569-8 }}\n* Campagnolo, M.L., [[Cris Moore|Moore, C.]], and Costa, J.F. (2000) An analog characterization of the subrecursive functions. In ''Proc. of the 4th Conference on Real Numbers and Computers'', Odense University, pp.&nbsp;91\u2013109\n* {{Cite journal|last=Church|first=Alonzo|authorlink=Alonzo Church|title=An Unsolvable Problem of Elementary Number Theory|journal=The American Journal of Mathematics|volume=58|pages= 345\u2013363|year=1936a|doi=10.2307/2371045|issue=2|jstor=2371045}} Reprinted in ''The Undecidable'', p.&nbsp;89ff. The first expression of \"Church's Thesis\". See in particular page 100 (''The Undecidable'') where he defines the notion of \"effective calculability\" in terms of \"an algorithm\", and he uses the word \"terminates\", etc.\n* {{Cite journal|last=Church|first=Alonzo|authorlink=Alonzo Church|title=A Note on the Entscheidungsproblem|journal=The Journal of Symbolic Logic|volume=1|year=1936b|pages=40\u201341|doi=10.2307/2269326|issue=1|jstor=2269326}} {{cite journal|last=Church|first=Alonzo|title=Correction to a Note on the Entscheidungsproblem|journal=The Journal of Symbolic Logic|volume=1|year=1936|pages=101\u2013102|doi=10.2307/2269030|issue=3|jstor=2269030}} Reprinted in ''The Undecidable'', p.&nbsp;110ff. Church shows that the Entscheidungsproblem is unsolvable in about 3 pages of text and 3 pages of footnotes.\n* {{cite book| last = Daffa'| first = Ali Abdullah al-| title = The Muslim contribution to mathematics| year = 1977| publisher = Croom Helm| location = London| isbn = 978-0-85664-464-1 }}\n* {{cite book| last = Davis| first = Martin| authorlink = Martin Davis (mathematician)| title = The Undecidable: Basic Papers On Undecidable Propositions, Unsolvable Problems and Computable Functions| url = https://archive.org/details/undecidablebasic0000davi| url-access = registration| year = 1965| publisher = Raven Press| location = New York| isbn = 978-0-486-43228-1 }} Davis gives commentary before each article. Papers of [[G\u00f6del]], [[Alonzo Church]], [[Alan Turing|Turing]], [[J. Barkley Rosser|Rosser]], [[Kleene]], and [[Emil Post]] are included; those cited in the article are listed here by author's name.\n* {{cite book| last = Davis| first = Martin| authorlink = Martin Davis (mathematician)| title = Engines of Logic: Mathematicians and the Origin of the Computer| year = 2000| publisher = W.W. Nortion| location = New York| isbn = 978-0-393-32229-3 }} Davis offers concise biographies of [[Gottfried Leibniz|Leibniz]], [[George Boole|Boole]], [[Gottlob Frege|Frege]], [[Georg Cantor|Cantor]], [[David Hilbert|Hilbert]], G\u00f6del and Turing with [[John von Neumann|von Neumann]] as the show-stealing villain. Very brief bios of [[Joseph-Marie Jacquard]], [[Babbage]], [[Ada Lovelace]], [[Claude Shannon]], [[Howard Aiken]], etc.\n* {{DADS|algorithm|algorithm}}\n* {{cite journal|title= Evolution and moral diversity |author=Dean, Tim |journal=Baltic International Yearbook of Cognition, Logic and Communication|year=2012|volume=7|doi=10.4148/biyclc.v7i0.1775 }}\n* {{cite book| last = Dennett| first = Daniel| authorlink = Daniel Dennett| title = Darwin's Dangerous Idea| journal = Complexity| volume = 2| issue = 1| pages = [https://archive.org/details/darwinsdangerous0000denn/page/32 32]\u201336| year = 1995| publisher = Touchstone/Simon & Schuster| location = New York| isbn = 978-0-684-80290-9| bibcode = 1996Cmplx...2a..32M| doi = 10.1002/(SICI)1099-0526(199609/10)2:1<32::AID-CPLX8>3.0.CO;2-H| url = https://archive.org/details/darwinsdangerous0000denn| url-access = registration}}\n* {{cite book| last = Dilson| first = Jesse| title = The Abacus| edition = (1968, 1994)| year = 2007| publisher = St. Martin's Press, NY| isbn = 978-0-312-10409-2| url = https://archive.org/details/abacusworldsfirs0000dils}}, {{ISBN|0-312-10409-X}}\n* [[Yuri Gurevich]], [http://research.microsoft.com/~gurevich/Opera/141.pdf ''Sequential Abstract State Machines Capture Sequential Algorithms''], ACM Transactions on Computational Logic, Vol 1, no 1 (July 2000), pp.&nbsp;77\u2013111. Includes bibliography of 33 sources.\n* {{cite book| last = van Heijenoort| first = Jean| authorlink = Jean van Heijenoort| title = From Frege to G\u00f6del, A Source Book in Mathematical Logic, 1879\u20131931| edition = (1967)| year = 2001| publisher = Harvard University Press, Cambridge| isbn = 978-0-674-32449-7 }}, 3rd edition 1976[?], {{ISBN|0-674-32449-8}} (pbk.)\n* {{cite book| last = Hodges| first = Andrew| authorlink = Andrew Hodges| title = Alan Turing: The Enigma| journal = Physics Today| volume = 37| issue = 11| pages = 107\u2013108| year = 1983| publisher = [[Simon and Schuster]]| location = New York| isbn = 978-0-671-49207-6| title-link = Alan Turing: The Enigma| bibcode = 1984PhT....37k.107H| doi = 10.1063/1.2915935}}, {{ISBN|0-671-49207-1}}. Cf. Chapter \"The Spirit of Truth\" for a history leading to, and a discussion of, his proof.\n* {{Cite journal|last=Kleene|first=Stephen C.|authorlink=Stephen Kleene|title=General Recursive Functions of Natural Numbers|journal=Mathematische Annalen|volume=112|pages=727\u2013742|url=http://gdz.sub.uni-goettingen.de/index.php?id=11&PPN=GDZPPN002278499&L=1|year=1936|doi=10.1007/BF01565439|issue=5|access-date=September 30, 2013|archive-url=https://web.archive.org/web/20140903092121/http://gdz.sub.uni-goettingen.de/index.php?id=11&PPN=GDZPPN002278499&L=1|archive-date=September 3, 2014|url-status=dead}} Presented to the American Mathematical Society, September 1935. Reprinted in ''The Undecidable'', p.&nbsp;237ff. Kleene's definition of \"general recursion\" (known now as mu-recursion) was used by Church in his 1935 paper ''An Unsolvable Problem of Elementary Number Theory'' that proved the \"decision problem\" to be \"undecidable\" (i.e., a negative result).\n* {{Cite journal|last=Kleene|first=Stephen C.|authorlink=Stephen Kleene |title= Recursive Predicates and Quantifiers|journal=American Mathematical Society Transactions|volume=54|pages=41\u201373|year=1943 |doi= 10.2307/1990131|issue=1|jstor=1990131|doi-access=free}} Reprinted in ''The Undecidable'', p.&nbsp;255ff. Kleene refined his definition of \"general recursion\" and proceeded in his chapter \"12. Algorithmic theories\" to posit \"Thesis I\" (p.&nbsp;274); he would later repeat this thesis (in Kleene 1952:300) and name it \"Church's Thesis\"(Kleene 1952:317) (i.e., the [[Church thesis]]).\n* {{cite book| last = Kleene| first = Stephen C.| authorlink = Kleene| title = Introduction to Metamathematics| edition = Tenth|year= 1991| orig-year = 1952| publisher = North-Holland Publishing Company| isbn = 978-0-7204-2103-3 }}\n* {{cite book| last = Knuth| first = Donald| authorlink = Donald Knuth| title = Fundamental Algorithms, Third Edition| year = 1997| publisher = Addison\u2013Wesley| location = Reading, Massachusetts| isbn = 978-0-201-89683-1 }}\n* {{Cite book|last=Knuth|first=Donald|authorlink=Donald Knuth|title=Volume 2/Seminumerical Algorithms, The Art of Computer Programming First Edition|publisher=Addison\u2013Wesley|location=Reading, Massachusetts|year=1969|isbn= }}\n* Kosovsky, N.K. ''Elements of Mathematical Logic and its Application to the theory of Subrecursive Algorithms'', LSU Publ., Leningrad, 1981\n* {{Cite journal|last=Kowalski|first=Robert|authorlink=Robert Kowalski|title=Algorithm=Logic+Control|journal=[[Communications of the ACM]]|volume=22|issue=7|pages=424\u2013436|year=1979|doi=10.1145/359131.359136}}\n* [[A.A. Markov]] (1954) ''Theory of algorithms''. [Translated by Jacques J. Schorr-Kon and PST staff] Imprint Moscow, Academy of Sciences of the USSR, 1954 [i.e., Jerusalem, Israel Program for Scientific Translations, 1961; available from the Office of Technical Services, U.S. Dept. of Commerce, Washington] Description 444 p.&nbsp;28&nbsp;cm. Added t.p. in Russian Translation of Works of the Mathematical Institute, Academy of Sciences of the USSR, v.&nbsp;42. Original title: Teoriya algerifmov. [QA248.M2943 Dartmouth College library. U.S. Dept. of Commerce, Office of Technical Services, number OTS 60-51085.]\n* {{cite book| last = Minsky| first = Marvin| authorlink = Marvin Minsky| title = Computation: Finite and Infinite Machines| url = https://archive.org/details/computationfinit0000mins| url-access = registration| edition = First| year = 1967| publisher = Prentice-Hall, Englewood Cliffs, NJ| isbn = 978-0-13-165449-5 }} Minsky expands his \"...idea of an algorithm \u2013 an effective procedure...\" in chapter 5.1 ''Computability, Effective Procedures and Algorithms. Infinite machines.''\n* {{Cite journal|last=Post|first=Emil|authorlink=Emil Post|title=Finite Combinatory Processes, Formulation I |journal=The Journal of Symbolic Logic |volume=1 |year=1936 |pages=103\u2013105 |doi=10.2307/2269031 |issue=3 |jstor=2269031}} Reprinted in ''The Undecidable'', pp.&nbsp;289ff. Post defines a simple algorithmic-like process of a man writing marks or erasing marks and going from box to box and eventually halting, as he follows a list of simple instructions. This is cited by Kleene as one source of his \"Thesis I\", the so-called [[Church\u2013Turing thesis]].\n* {{Cite book|last=Rogers, Jr|first=Hartley|title=Theory of Recursive Functions and Effective Computability|publisher=The MIT Press|year=1987|isbn=978-0-262-68052-3}}\n* {{Cite journal|last=Rosser|first=J.B.|authorlink=J. B. Rosser|title=An Informal Exposition of Proofs of Godel's Theorem and Church's Theorem|journal=Journal of Symbolic Logic|volume= 4 |issue=2|year=1939|doi=10.2307/2269059|pages=53\u201360|jstor=2269059}} Reprinted in ''The Undecidable'', p.&nbsp;223ff. Herein is Rosser's famous definition of \"effective method\": \"...a method each step of which is precisely predetermined and which is certain to produce the answer in a finite number of steps... a machine which will then solve any problem of the set with no human intervention beyond inserting the question and (later) reading the answer\" (p.&nbsp;225\u2013226, ''The Undecidable'')\n* {{cite book |last=Santos-Lang |first=Christopher | year=2014 |editor1-first=Simon |editor1-last=van Rysewyk  |editor2-first=Matthijs |editor2-last=Pontier |title=Machine Medical Ethics |volume=74 |publisher=Springer | location=Switzerland | pages=111\u2013127 | chapter=Moral Ecology Approaches to Machine Ethics| chapter-url=http://grinfree.com/MoralEcology.pdf | doi=10.1007/978-3-319-08108-3_8|series=Intelligent Systems, Control and Automation: Science and Engineering |isbn=978-3-319-08107-6 }}\n* {{Cite book|last=Scott|first=Michael L.|title=Programming Language Pragmatics |edition=3rd |publisher=Morgan Kaufmann Publishers/Elsevier|year=2009|isbn=978-0-12-374514-9}}\n* {{cite book| last = Sipser| first = Michael| title = Introduction to the Theory of Computation| year = 2006| publisher = PWS Publishing Company| isbn = 978-0-534-94728-6| url = https://archive.org/details/introductiontoth00sips}}\n* {{cite book |last=Sober |first=Elliott |last2=Wilson |first2=David Sloan |year=1998 |title=Unto Others: The Evolution and Psychology of Unselfish Behavior |url=https://archive.org/details/untoothersevolut00sobe |url-access=registration |location=Cambridge |publisher=Harvard University Press}}\n* {{Cite book|last=Stone|first=Harold S.|title=Introduction to Computer Organization and Data Structures|edition=1972|publisher=McGraw-Hill, New York|isbn=978-0-07-061726-1|year=1972}} Cf. in particular the first chapter titled: ''Algorithms, Turing Machines, and Programs''. His succinct informal definition: \"...any sequence of instructions that can be obeyed by a robot, is called an ''algorithm''\" (p.&nbsp;4).\n* {{cite book| last = Tausworthe| first = Robert C| title = Standardized Development of Computer Software Part 1 Methods| year = 1977| publisher = Prentice\u2013Hall, Inc.| location = Englewood Cliffs NJ| isbn = 978-0-13-842195-3 }}\n* {{Cite journal|last=Turing|first=Alan M.|authorlink=A. M. Turing|title=On Computable Numbers, With An Application to the Entscheidungsproblem|journal=[[Proceedings of the London Mathematical Society]]|series=Series 2|volume=42|pages= 230\u2013265 |year=1936\u201337|doi=10.1112/plms/s2-42.1.230 }}. Corrections, ibid, vol. 43(1937) pp.&nbsp;544\u2013546. Reprinted in ''The Undecidable'', p.&nbsp;116ff. Turing's famous paper completed as a Master's dissertation while at King's College Cambridge UK.\n* {{Cite journal|last=Turing|first=Alan M.|authorlink=A. M. Turing|title=Systems of Logic Based on Ordinals|journal=Proceedings of the London Mathematical Society|volume=45|pages=161\u2013228|year=1939|doi=10.1112/plms/s2-45.1.161|hdl=21.11116/0000-0001-91CE-3}} Reprinted in ''The Undecidable'', pp.&nbsp;155ff. Turing's paper that defined \"the oracle\" was his PhD thesis while at Princeton.\n* [[United States Patent and Trademark Office]] (2006), [http://www.uspto.gov/web/offices/pac/mpep/documents/2100_2106_02.htm ''2106.02 **>Mathematical Algorithms: 2100 Patentability''], Manual of Patent Examining Procedure (MPEP). Latest revision August 2006\n{{refend|30em}}\n\n==Further reading==\n{{refbegin}}\n* {{cite book |last=Bellah |first=Robert Neelly |year=1985 |authorlink=Robert N. Bellah |title=Habits of the Heart: Individualism and Commitment in American Life |location=Berkeley |isbn=978-0-520-25419-0 |publisher=University of California Press |url=https://books.google.com/books?id=XsUojihVZQcC |ref=harv}}\n* {{cite book |last=Berlinski |first=David |title=The Advent of the Algorithm: The 300-Year Journey from an Idea to the Computer |year=2001 |publisher=Harvest Books |isbn=978-0-15-601391-8 |url=https://archive.org/details/adventofalgorith0000berl }}\n* {{cite book |last=Chabert |first=Jean-Luc |title=A History of Algorithms: From the Pebble to the Microchip |year=1999 |publisher=Springer Verlag |isbn=978-3-540-63369-3}}\n* {{cite book |author1=Thomas H. Cormen |author2=Charles E. Leiserson |author3=Ronald L. Rivest |author4=Clifford Stein |title=Introduction To Algorithms |edition=3rd |year=2009 |publisher=MIT Press |isbn=978-0-262-03384-8}}\n* {{cite book |author=Harel, David |author2=Feldman, Yishai |title=Algorithmics: The Spirit of Computing |year=2004 |publisher=Addison-Wesley |isbn=978-0-321-11784-7}}\n* {{cite book |last1=Hertzke |first1=Allen D. |last2=McRorie |first2=Chris |year=1998 |editor1-last=Lawler |editor1-first=Peter Augustine |editor2-last=McConkey |editor2-first=Dale |chapter=The Concept of Moral Ecology |title=Community and Political Thought Today |location=Westport, CT |publisher=[[Praeger Publishers|Praeger]] |ref=harv}}\n* [[Donald Knuth|Knuth, Donald E.]] (2000). ''[http://www-cs-faculty.stanford.edu/~uno/aa.html Selected Papers on Analysis of Algorithms]''. Stanford, California: Center for the Study of Language and Information.\n* Knuth, Donald E. (2010). ''[http://www-cs-faculty.stanford.edu/~uno/da.html Selected Papers on Design of Algorithms]''. Stanford, California: Center for the Study of Language and Information.\n* {{Cite book |first1=Wendell |last1=Wallach |first2=Colin |last2=Allen |date=November 2008 |title=Moral Machines: Teaching Robots Right from Wrong |isbn=978-0-19-537404-9 |publisher=Oxford University Press |location=US |ref=harv}}\n{{refend}}\n\n==External links==\n{{wiktionary}}\n{{wikibooks|Algorithms}}\n{{WVD}}\n{{Commonscat|Algorithms}}\n* {{springer|title=Algorithm|id=p/a011780}}\n* {{dmoz|Computers/Algorithms/|Algorithms}}\n* {{MathWorld | urlname=Algorithm | title=Algorithm}}\n* [https://www.nist.gov/dads/ Dictionary of Algorithms and Data Structures] \u2013 [[National Institute of Standards and Technology]]\n; Algorithm repositories\n* [http://www.cs.sunysb.edu/~algorith/ The Stony Brook Algorithm Repository] \u2013 [[State University of New York at Stony Brook]]\n* [http://calgo.acm.org/ Collected Algorithms of the ACM] \u2013 [[Association for Computing Machinery]]\n* [http://www-cs-staff.stanford.edu/~knuth/sgb.html The Stanford GraphBase] \u2013 [[Stanford University]]\n\n{{Authority control}}\n\n[[Category:Algorithms| ]]\n[[Category:Articles with example pseudocode]]\n[[Category:Mathematical logic]]\n[[Category:Theoretical computer science]]\n", "text_old": "{{short description|unambiguous specification of how to solve a class of problems}}\n{{other uses}}\n{{Use mdy dates|date=September 2017}}\n[[Image:Euclid flowchart.svg|thumb|right| [[Flowchart]] of an algorithm ([[Euclid's algorithm]]) for calculating the greatest common divisor (g.c.d.) of two numbers ''a'' and ''b'' in locations named A and B. The algorithm proceeds by successive subtractions in two loops: IF the test B \u2265 A yields \"yes\" or \"true\" (more accurately, the ''number'' ''b'' in location B is greater than or equal to the ''number'' ''a'' in location A) THEN, the algorithm specifies B \u2190 B \u2212 A (meaning the number ''b'' \u2212 ''a'' replaces the old ''b''). Similarly, IF A > B, THEN A \u2190 A \u2212 B. The process terminates when (the contents of) B is 0, yielding the g.c.d. in A. (Algorithm derived from Scott 2009:13; symbols and drawing style from Tausworthe 1977).]]\n[[File:Diagram for the computation of Bernoulli numbers.jpg|thumb|Ada Lovelace's diagram from \"note G\", the first published computer algorithm.]]\n\nIn [[mathematics]] and [[computer science]], an '''algorithm''' ({{IPAc-en|audio=en-us-algorithm.ogg|\u02c8|\u00e6|l|\u0261|\u0259|r|\u026a|\u00f0|\u0259m}}) is a finite sequence of [[well-defined]], computer-implementable instructions, typically to solve a class of problems or to perform a computation.<ref>{{Cite web|url=https://mathvault.ca/math-glossary/#algo|title=The Definitive Glossary of Higher Mathematical Jargon \u2014 Algorithm|last=|first=|date=2019-08-01|website=Math Vault|language=en-US|url-status=live|archive-url=https://web.archive.org/web/20200228211953/https://mathvault.ca/math-glossary/#algo|archive-date=February 28, 2020|access-date=2019-11-14}}</ref><ref>{{Cite web|url=https://www.merriam-webster.com/dictionary/algorithm|title=Definition of ALGORITHM|work=Merriam-Webster Online Dictionary|language=en|access-date=2019-11-14|archive-url=https://web.archive.org/web/20200214074446/https://www.merriam-webster.com/dictionary/algorithm|archive-date=February 14, 2020|url-status=live}}</ref> Algorithms are always [[unambiguous]] and are used as specifications for performing [[calculation]]s, [[data processing]], [[automated reasoning]], and other tasks.\n\nAs an [[effective method]], an algorithm can be expressed within a finite amount of space and time,<ref>\"Any classical mathematical algorithm, for example, can be described in a finite number of English words\" (Rogers 1987:2).</ref> and in a well-defined formal language<ref>Well defined with respect to the agent that executes the algorithm: \"There is a computing agent, usually human, which can react to the instructions and carry out the computations\" (Rogers 1987:2).</ref> for calculating a [[Function (mathematics)|function]].<ref>\"an algorithm is a procedure for computing a ''function'' (with respect to some chosen notation for integers) ... this limitation (to numerical functions) results in no loss of generality\", (Rogers 1987:1).</ref> Starting from an initial state and initial input (perhaps [[Empty string|empty]]),<ref>\"An algorithm has [[zero]] or more inputs, i.e., [[quantity|quantities]] which are given to it initially before the algorithm begins\" (Knuth 1973:5).</ref> the instructions describe a [[computation]] that, when [[Execution (computing)|executed]], proceeds through a finite<ref>\"A procedure which has all the characteristics of an algorithm except that it possibly lacks finiteness may be called a 'computational method{{'\"}} (Knuth 1973:5).</ref> number of well-defined successive states, eventually producing \"output\"<ref>\"An algorithm has one or more outputs, i.e. quantities which have a specified relation to the inputs\" (Knuth 1973:5).</ref> and terminating at a final ending state. The transition from one state to the next is not necessarily [[deterministic]]; some algorithms, known as [[randomized algorithms]], incorporate random input.<ref>Whether or not a process with random interior processes (not including the input) is an algorithm is debatable. Rogers opines that: \"a computation is carried out in a discrete stepwise fashion, without the use of continuous methods or analogue devices ... carried forward deterministically, without resort to random methods or devices, e.g., dice\" (Rogers 1987:2).</ref>\n\nThe concept of algorithm has existed since antiquity. [[Arithmetic]] algorithms, such as a [[division algorithm]], was used by ancient [[Babylonian mathematics|Babylonian mathematicians]] c. 2500 BC and [[Egyptian mathematics|Egyptian mathematicians]] c. 1550 BC.<ref name=\"Springer Science & Business Media\"/> [[Greek mathematics|Greek mathematicians]] later used algorithms in the [[sieve of Eratosthenes]] for finding prime numbers,<ref name=\"Hellenistic Mathematics\">{{Cite web|url=http://www.storyofmathematics.com/hellenistic.html|title=Hellenistic Mathematics|publisher=The Story of Mathematics|access-date=2019-11-14|archive-url=https://web.archive.org/web/20190911042247/http://www.storyofmathematics.com/hellenistic.html|archive-date=September 11, 2019|url-status=live}}</ref> and the [[Euclidean algorithm]] for finding the [[greatest common divisor]] of two numbers.<ref name=Cooke2005>{{cite book |last=Cooke |first=Roger L. |title=The History of Mathematics: A Brief Course |date=2005 |publisher=John Wiley & Sons|isbn=978-1-118-46029-0}}</ref> [[Arabic mathematics|Arabic mathematicians]] such as [[Al-Kindi]] in the 9th century used [[cryptographic]] algorithms for [[code-breaking]], based on [[frequency analysis]].<ref name=\"Dooley\"/>\n\nThe word ''algorithm'' itself is derived from the 9th-century [[Persian people|Persian]] mathematician [[Muhammad ibn Musa al-Khwarizmi|Mu\u1e25ammad ibn M\u016bs\u0101 al-Khw\u0101rizm\u012b]], Latinized ''Algoritmi''.<ref>{{Cite web|url=http://www.storyofmathematics.com/islamic_alkhwarizmi.html|title=Al-Khwarizmi - Islamic Mathematics|publisher=The Story of Mathematics|access-date=2019-11-14|archive-url=https://web.archive.org/web/20190725202237/http://www.storyofmathematics.com/islamic_alkhwarizmi.html|archive-date=July 25, 2019|url-status=live}}</ref> A partial formalization of what would become the modern concept of algorithm began with attempts to solve the [[Entscheidungsproblem]] (decision problem) posed by [[David Hilbert]] in 1928. Later formalizations were framed as attempts to define \"[[effective calculability]]\"<ref>Kleene 1943 in Davis 1965:274</ref> or \"effective method\".<ref>Rosser 1939 in Davis 1965:225</ref> Those formalizations included the [[Kurt G\u00f6del|G\u00f6del]]\u2013[[Jacques Herbrand|Herbrand]]\u2013[[Stephen Cole Kleene|Kleene]] [[Recursion (computer science)|recursive functions]] of 1930, 1934 and 1935, [[Alonzo Church]]'s [[lambda calculus]] of 1936, [[Emil Post]]'s [[Formulation 1]] of 1936, and [[Alan Turing]]'s [[Turing machines]] of 1936\u201337 and 1939.\n\n== Etymology ==\nThe word 'algorithm' has its roots in Latinizing the name of Persian mathematician [[Muhammad ibn Musa al-Khwarizmi]] in the first steps to ''algorismus''.<ref>{{cite web|url=http://www-history.mcs.st-andrews.ac.uk/Biographies/Al-Khwarizmi.html|title=Al-Khwarizmi biography|website=www-history.mcs.st-andrews.ac.uk|access-date=May 3, 2017|archive-url=https://web.archive.org/web/20190802091553/http://www-history.mcs.st-andrews.ac.uk/Biographies/Al-Khwarizmi.html|archive-date=August 2, 2019|url-status=live}}</ref><ref>{{cite web|title=Etymology of algorithm|url=http://chambers.co.uk/search/?query=algorithm&title=21st|website=Chambers Dictionary|accessdate=December 13, 2016|archive-url=https://web.archive.org/web/20190331204600/https://chambers.co.uk/search/?query=algorithm&title=21st|archive-date=March 31, 2019|url-status=live}}</ref> Al-Khw\u0101rizm\u012b ({{lang-fa|\u062e\u0648\u0627\u0631\u0632\u0645\u06cc}}, c. 780\u2013850) was a Persian mathematician, [[astronomer]], [[geographer]], and scholar in the [[House of Wisdom]] in [[Baghdad]],<ref name=\"Hellenistic Mathematics\" /> whose name means 'the native of [[Khwarazm]]', a region that was part of [[Greater Iran]] and is now in [[Uzbekistan]].<ref name=\"Hogendijk\">{{cite journal|first=Jan P. |last=Hogendijk |title=al-Khwarzimi |journal=Pythagoras |volume=38 |issue=2 |year=1998 |pages=4\u20135 |url=http://www.kennislink.nl/web/show?id=116543 |ref=harv |url-status=dead |archiveurl=https://web.archive.org/web/20090412193516/http://www.kennislink.nl/web/show?id=116543 |archivedate=April 12, 2009 }}</ref><ref name=\"Oaks\">{{cite web|first=Jeffrey A.|last=Oaks|url=http://facstaff.uindy.edu/~oaks/MHMC.htm|title=Was al-Khwarizmi an applied algebraist?|publisher=[[University of Indianapolis]]|accessdate=May 30, 2008|archive-url=https://web.archive.org/web/20110718094835/http://facstaff.uindy.edu/~oaks/MHMC.htm|archive-date=July 18, 2011|url-status=dead|df=mdy-all}}</ref>\n\nAbout 825, al-Khwarizmi wrote an [[Arabic language]] treatise on the [[Hindu\u2013Arabic numeral system]], which was translated into [[Latin]] during the 12th century under the title ''Algoritmi de numero Indorum''. This title means \"Algoritmi on the numbers of the Indians\", where \"Algoritmi\" was the translator's [[Latinisation of names|Latinization]] of Al-Khwarizmi's name.<ref>{{cite book| last = Brezina| first = Corona| title = Al-Khwarizmi: The Inventor Of Algebra| url = https://books.google.com/?id=955jPgAACAAJ| year = 2006| publisher = The Rosen Publishing Group| isbn = 978-1-4042-0513-0 }}</ref> Al-Khwarizmi was the most widely read mathematician in Europe in the late Middle Ages, primarily through another of his books, the [[Al-Jabr|Algebra]].<ref>[http://www-history.mcs.st-and.ac.uk/Extras/Boyer_Foremost_Text.html Foremost mathematical texts in history] {{Webarchive|url=https://web.archive.org/web/20110609224820/http://www-history.mcs.st-and.ac.uk/Extras/Boyer_Foremost_Text.html |date=June 9, 2011 }}, according to [[Carl B. Boyer]].</ref> In late medieval Latin, ''algorismus'', English '[[algorism]]', the corruption of his name, simply meant the \"decimal number system\".<ref>{{Citation|title=algorismic|url=https://www.thefreedictionary.com/algorismic|work=The Free Dictionary|access-date=2019-11-14|archive-url=https://web.archive.org/web/20191221200124/https://www.thefreedictionary.com/algorismic|archive-date=December 21, 2019|url-status=live}}</ref> In the 15th century, under the influence of the Greek word \u1f00\u03c1\u03b9\u03b8\u03bc\u03cc\u03c2 'number' (''cf.'' 'arithmetic'), the Latin word was altered to ''algorithmus'', and the corresponding English term 'algorithm' is first attested in the 17th century; the modern sense was introduced in the 19th century.<ref>''[[Oxford English Dictionary]]'', Third Edition, 2012 [http://www.oed.com/view/Entry/4959 ''s.v.'']</ref>\n\nIn English, it was first used in about 1230 and then by [[Geoffrey Chaucer|Chaucer]] in 1391. English adopted the French term, but it wasn't until the late 19th century that \"algorithm\" took on the meaning that it has in modern English.<ref>{{Cite journal|last=Mehri|first=Bahman|date=2017|title=From Al-Khwarizmi to Algorithm|journal=Olympiads in Informatics|volume=11|issue=2|pages=71\u201374|doi=10.15388/ioi.2017.special.11}}</ref>\n\nAnother early use of the word is from 1240, in a manual titled ''Carmen de Algorismo'' composed by [[Alexander of Villedieu|Alexandre de Villedieu]]. It begins with:\n\n{{quote|''Haec algorismus ars praesens dicitur, in qua / Talibus Indorum fruimur bis quinque figuris.''}}\nwhich translates to:\n{{quote|Algorism is the art by which at present we use those Indian figures, which number two times five.}}\n\nThe poem is a few hundred lines long and summarizes the art of calculating with the new style of Indian dice, or Talibus Indorum, or Hindu numerals.<ref>{{Cite web|url=http://members.peak.org/~jeremy/calculators/alKwarizmi.html|title=Abu Jafar Muhammad ibn Musa al-Khwarizmi|website=members.peak.org|access-date=2019-11-14|archive-url=https://web.archive.org/web/20190821232118/http://members.peak.org/~jeremy/calculators/alKwarizmi.html|archive-date=August 21, 2019|url-status=live}}</ref>\n\n==Informal definition==\n{{about||a detailed presentation of the various points of view on the definition of \"algorithm\"| Algorithm characterizations}}\nAn informal definition could be \"a set of rules that precisely defines a sequence of operations\",<ref>Stone 1973:4</ref> which would include all computer programs, including programs that do not perform numeric calculations, and (for example) any prescribed [[bureaucratic]] procedure.<ref>{{cite book\n | last1 = Simanowski\n | first1 = Roberto\n | author-link1 = Roberto Simanowski\n | translator1-last = Chase\n | translator1-first = Jefferson\n | title = The Death Algorithm and Other Digital Dilemmas\n | url = https://books.google.com/books?id=RJV5DwAAQBAJ\n | series = Untimely Meditations\n | volume = 14\n | location = Cambridge, Massachusetts\n | publisher = MIT Press\n | date = 2018\n | page = 147\n | isbn = 9780262536370\n | access-date = 27 May 2019\n | quote = [...] the next level of abstraction of central bureaucracy: globally operating algorithms.\n | archive-url = https://web.archive.org/web/20191222120705/https://books.google.com/books?id=RJV5DwAAQBAJ\n | archive-date = December 22, 2019\n | url-status = live\n }}</ref>\nIn general, a program is only an algorithm if it stops eventually.<ref>Stone simply requires that \"it must terminate in a finite number of steps\" (Stone 1973:7\u20138).</ref>\n\nA prototypical example of an algorithm is the [[Euclidean algorithm]], which is used to determine the maximum common divisor of two integers; an example (there are others) is described by the [[flowchart]] above and as an example in a later section.\n\n{{Harvtxt|Boolos|Jeffrey|1974, 1999|ref=CITEREFBoolosJeffrey1999}} offer an informal meaning of the word \"algorithm\" in the following quotation:\n\n<blockquote>No human being can write fast enough, or long enough, or small enough\u2020 ( \u2020\"smaller and smaller without limit \u2026 you'd be trying to write on molecules, on atoms, on electrons\") to list all members of an enumerably infinite set by writing out their names, one after another, in some notation. But humans can do something equally useful, in the case of certain enumerably infinite sets: They can give ''explicit instructions for determining the '''n'''th member of the set'', for arbitrary finite ''n''. Such instructions are to be given quite explicitly, in a form in which ''they could be followed by a computing machine'', or by a ''human who is capable of carrying out only very elementary operations on symbols.''<ref>Boolos and Jeffrey 1974,1999:19</ref></blockquote>\n\nAn \"[[recursively enumerable set|enumerably infinite set]]\" is one whose elements can be put into one-to-one correspondence with the integers. Thus, Boolos and Jeffrey are saying that an algorithm implies instructions for a process that \"creates\" output integers from an ''arbitrary'' \"input\" integer or integers that, in theory, can be arbitrarily large. For example, an algorithm can be an algebraic equation such as ''y = m + n'' (i.e., two arbitrary \"input variables\" ''m'' and ''n'' that produce an output ''y''), but various authors' attempts to define the notion indicate that the word implies much more than this, something on the order of (for the addition example):\n:Precise instructions (in language understood by \"the computer\")<ref>cf Stone 1972:5</ref> for a fast, efficient, \"good\"<ref>Knuth 1973:7 states: \"In practice we not only want algorithms, we want ''good'' algorithms ... one criterion of goodness is the length of time taken to perform the algorithm ... other criteria are the adaptability of the algorithm to computers, its simplicity, and elegance, etc.\"</ref> process that specifies the \"moves\" of \"the computer\" (machine or human, equipped with the necessary internally contained information and capabilities)<ref>cf Stone 1973:6</ref> to find, decode, and then process arbitrary input integers/symbols ''m'' and ''n'', symbols ''+'' and ''='' \u2026 and \"effectively\"<ref>Stone 1973:7\u20138 states that there must be, \"...a procedure that a robot [i.e., computer] can follow in order to determine precisely how to obey the instruction\". Stone adds finiteness of the process, and definiteness (having no ambiguity in the instructions) to this definition.</ref> produce, in a \"reasonable\" time,<ref>Knuth, loc. cit</ref> output-integer ''y'' at a specified place and in a specified format.\n\nThe concept of ''algorithm'' is also used to define the notion of [[decidability (logic)|decidability]]\u2014a notion that is central for explaining how [[formal system]]s come into being starting from a small set of [[axiom]]s and rules. In [[logic]], the time that an algorithm requires to complete cannot be measured, as it is not apparently related to the customary physical dimension. From such uncertainties, that characterize ongoing work, stems the unavailability of a definition of ''algorithm'' that suits both concrete (in some sense) and abstract usage of the term.\n\n==Formalization==\n<!-- [[Computer program]] links here. -->\nAlgorithms are essential to the way computers process data. Many computer programs contain algorithms that detail the specific instructions a computer should perform\u2014in a specific order\u2014to carry out a specified task, such as calculating employees' paychecks or printing students' report cards. Thus, an algorithm can be considered to be any sequence of operations that can be simulated by a [[Turing reduction|Turing-complete]] system. Authors who assert this thesis include Minsky (1967), Savage (1987) and Gurevich (2000):\n<blockquote> Minsky: \"But we will also maintain, with Turing \u2026 that any procedure which could \"naturally\" be called effective, can, in fact, be realized by a (simple) machine. Although this may seem extreme, the arguments \u2026 in its favor are hard to refute\".<ref name=\"Minsky 1967:105\">{{harvnb|Minsky|1967|page=105}}</ref></blockquote>\n\n <blockquote>Gurevich: \u201c\u2026 Turing's informal argument in favor of his thesis justifies a stronger thesis: every algorithm can be simulated by a Turing machine \u2026 according to Savage [1987], an algorithm is a computational process defined by a Turing machine\".<ref>Gurevich 2000:1, 3</ref></blockquote>\n\nTuring machines can define computational processes that do not terminate. The informal definitions of algorithms generally require that the algorithm always terminates. This requirement renders the task of deciding whether a formal procedure is an algorithm impossible in the general case\u2014due to a major theorem of [[computability theory]] known as the [[halting problem]].\n\nTypically, when an algorithm is associated with processing information, data can be read from an input source, written to an output device and stored for further processing. Stored data are regarded as part of the internal state of the entity performing the algorithm. In practice, the state is stored in one or more [[data structure]]s.\n\nFor some of these computational process, the algorithm must be rigorously defined: specified in the way it applies in all possible circumstances that could arise. This means that any conditional steps must be systematically dealt with, case-by-case; the criteria for each case must be clear (and computable).\n\nBecause an algorithm is a precise list of precise steps, the order of computation is always crucial to the functioning of the algorithm. Instructions are usually assumed to be listed explicitly, and are described as starting \"from the top\" and going \"down to the bottom\"\u2014an idea that is described more formally by ''[[control flow|flow of control]]''.\n\nSo far, the discussion on the formalization of an algorithm has assumed the premises of [[imperative programming]]. This is the most common conception\u2014one which attempts to describe a task in discrete, \"mechanical\" means. Unique to this conception of formalized algorithms is the [[assignment operation]], which sets the value of a variable. It derives from the intuition of \"[[memory]]\" as a scratchpad. An example of such an assignment can be found below.\n\nFor some alternate conceptions of what constitutes an algorithm, see [[functional programming]] and [[logic programming]].\n\n===Expressing algorithms===\nAlgorithms can be expressed in many kinds of notation, including [[natural language]]s, [[pseudocode]], [[flowchart]]s, [[DRAKON|drakon-charts]], [[programming language]]s or [[control table]]s (processed by [[Interpreter (computing)|interpreters]]). Natural language expressions of algorithms tend to be verbose and ambiguous, and are rarely used for complex or technical algorithms. Pseudocode, flowcharts, [[DRAKON|drakon-charts]] and control tables are structured ways to express algorithms that avoid many of the ambiguities common in the statements based on natural language. Programming languages are primarily intended for expressing algorithms in a form that can be executed by a computer, but are also often used as a way to define or document algorithms.\n\nThere is a wide variety of representations possible and one can express a given [[Turing machine]] program as a sequence of machine tables (see [[finite-state machine]], [[state transition table]] and [[control table]] for more), as flowcharts and [[DRAKON|drakon-charts]] (see [[state diagram]] for more), or as a form of rudimentary [[machine code]] or [[assembly code]] called \"sets of quadruples\" (see [[Turing machine]] for more).\n\nRepresentations of algorithms can be classed into three accepted levels of Turing machine description, as follows:<ref>Sipser 2006:157</ref>\n; 1 High-level description\n: \u201c\u2026prose to describe an algorithm, ignoring the implementation details. At this level, we do not need to mention how the machine manages its tape or head.\"\n; 2 Implementation description\n: \u201c\u2026prose used to define the way the Turing machine uses its head and the way that it stores data on its tape. At this level, we do not give details of states or transition function.\"\n; 3 Formal description\n: Most detailed, \"lowest level\", gives the Turing machine's \"state table\".\n\nFor an example of the simple algorithm \"Add m+n\" described in all three levels, see [[Algorithm#Examples]].\n\n==Design==\n{{split|Algorithm design|date=March 2020|discuss=Talk:Algorithm#Proposed split}}\n{{See also|Algorithm#By design paradigm}}\n\nAlgorithm design refers to a method or a mathematical process for problem-solving and engineering algorithms. The design of algorithms is part of many solution theories of [[operation research]], such as [[dynamic programming]] and [[Divide and conquer algorithm|divide-and-conquer]]. Techniques for designing and implementing algorithm designs are also called algorithm design patterns,<ref>{{citation|url=http://ww3.algorithmdesign.net/ch00-front.html|title=Algorithm Design: Foundations, Analysis, and Internet Examples|last1=Goodrich|first1=Michael T.|author1-link=Michael T. Goodrich|last2=Tamassia|first2=Roberto|author2-link=Roberto Tamassia|publisher=John Wiley & Sons, Inc.|year=2002|isbn=978-0-471-38365-9|access-date=June 14, 2018|archive-url=https://web.archive.org/web/20150428201622/http://ww3.algorithmdesign.net/ch00-front.html|archive-date=April 28, 2015|url-status=live}}</ref> with examples including the template method pattern and the decorator pattern.\n\nOne of the most important aspects of algorithm design lies in the creation of algorithm that has an efficient run-time, also known as its [[Big O notation|Big O]].\n\nTypical steps in the development of algorithms:\n# Problem definition\n# Development of a model\n# Specification of the algorithm\n# Designing an algorithm\n# Checking the [[correctness (computer science)|correctness]] of the algorithm\n# Analysis of algorithm\n# Implementation of algorithm\n# Program testing\n# Documentation preparation\n\n==Implementation==\n[[Image:TTL npn nand.svg|right|thumb|[[Logical NAND]] algorithm implemented electronically in [[7400 series|7400]] chip]]\nMost algorithms are intended to be implemented as [[computer programs]]. However, algorithms are also implemented by other means, such as in a [[biological neural network]] (for example, the [[human brain]] implementing [[arithmetic]] or an insect looking for food), in an [[electrical circuit]], or in a mechanical device.\n\n==Computer algorithms==\n[[File:Euclid's algorithm structured blocks 1.png|thumb|right|176px|Flowchart examples of the canonical [[Structured program theorem|B\u00f6hm-Jacopini structures]]: the SEQUENCE (rectangles descending the page), the WHILE-DO and the IF-THEN-ELSE. The three structures are made of the primitive conditional GOTO ({{code|IF ''test''=true THEN GOTO step xxx}}) (a diamond), the unconditional GOTO (rectangle), various assignment operators (rectangle), and HALT (rectangle). Nesting of these structures inside assignment-blocks result in complex diagrams (cf Tausworthe 1977:100, 114).]]\n\nIn [[computer systems]], an algorithm is basically an instance of [[logic]] written in software by software developers, to be effective for the intended \"target\" computer(s) to produce ''output'' from given (perhaps null) ''input''. An optimal algorithm, even running in old hardware, would produce faster results than a non-optimal (higher [[time complexity]]) algorithm for the same purpose, running in more efficient hardware; that is why algorithms, like computer hardware, are considered technology.\n\n''\"Elegant\" (compact) programs, \"good\" (fast) programs '': The notion of \"simplicity and elegance\" appears informally in [[Donald Knuth|Knuth]] and precisely in [[Gregory Chaitin|Chaitin]]:\n:Knuth: \" \u2026 we want ''good'' algorithms in some loosely defined aesthetic sense. One criterion \u2026 is the length of time taken to perform the algorithm \u2026. Other criteria are adaptability of the algorithm to computers, its simplicity and elegance, etc\"<ref>Knuth 1973:7</ref>\n\n:Chaitin: \" \u2026 a program is 'elegant,' by which I mean that it's the smallest possible program for producing the output that it does\"<ref>Chaitin 2005:32</ref>\n\nChaitin prefaces his definition with: \"I'll show you can't prove that a program is 'elegant{{'\"}}\u2014such a proof would solve the [[Halting problem]] (ibid).\n\n''Algorithm versus function computable by an algorithm'': For a given function multiple algorithms may exist. This is true, even without expanding the available instruction set available to the programmer. Rogers observes that \"It is ... important to distinguish between the notion of ''algorithm'', i.e. procedure and the notion of ''function computable by algorithm'', i.e. mapping yielded by procedure. The same function may have several different algorithms\".<ref>Rogers 1987:1\u20132</ref>\n\nUnfortunately, there may be a tradeoff between goodness (speed) and elegance (compactness)\u2014an elegant program may take more steps to complete a computation than one less elegant. An example that uses Euclid's algorithm appears below.\n\n''Computers (and computors), models of computation'': A computer (or human \"computor\"<ref>In his essay \"Calculations by Man and Machine: Conceptual Analysis\" Seig 2002:390 credits this distinction to Robin Gandy, cf Wilfred Seig, et al., 2002 ''Reflections on the foundations of mathematics: Essays in honor of Solomon Feferman'', Association for Symbolic Logic, A.K. Peters Ltd, Natick, MA.</ref>) is a restricted type of machine, a \"discrete deterministic mechanical device\"<ref>cf Gandy 1980:126, Robin Gandy ''Church's Thesis and Principles for Mechanisms'' appearing on pp. 123\u2013148 in [[Jon Barwise|J. Barwise]] et al. 1980 ''The Kleene Symposium'', North-Holland Publishing Company.</ref> that blindly follows its instructions.<ref>A \"robot\": \"A computer is a robot that performs any task that can be described as a sequence of instructions.\" cf Stone 1972:3</ref> Melzak's and Lambek's primitive models<ref>Lambek's \"abacus\" is a \"countably infinite number of locations (holes, wires etc.) together with an unlimited supply of counters (pebbles, beads, etc). The locations are distinguishable, the counters are not\". The holes have unlimited capacity, and standing by is an agent who understands and is able to carry out the list of instructions\" (Lambek 1961:295). Lambek references Melzak who defines his Q-machine as \"an indefinitely large number of locations ... an indefinitely large supply of counters distributed among these locations, a program, and an operator whose sole purpose is to carry out the program\" (Melzak 1961:283). B-B-J (loc. cit.) add the stipulation that the holes are \"capable of holding any number of stones\" (p. 46). Both Melzak and Lambek appear in ''The Canadian Mathematical Bulletin'', vol. 4, no. 3, September 1961.</ref> reduced this notion to four elements: (i) discrete, distinguishable ''locations'', (ii) discrete, indistinguishable ''counters''<ref>If no confusion results, the word \"counters\" can be dropped, and a location can be said to contain a single \"number\".</ref> (iii) an agent, and (iv) a list of instructions that are ''effective'' relative to the capability of the agent.<ref>\"We say that an instruction is ''effective'' if there is a procedure that the robot can follow in order to determine precisely how to obey the instruction.\" (Stone 1972:6)</ref>\n\nMinsky describes a more congenial variation of Lambek's \"abacus\" model in his \"Very Simple Bases for [[Computability]]\".<ref>cf Minsky 1967: Chapter 11 \"Computer models\" and Chapter 14 \"Very Simple Bases for Computability\" pp. 255\u2013281 in particular</ref> [[Minsky machine|Minsky's machine]] proceeds sequentially through its five (or six, depending on how one counts) instructions, unless either a conditional IF\u2013THEN GOTO or an unconditional GOTO changes program flow out of sequence. Besides HALT, Minsky's machine includes three ''assignment'' (replacement, substitution)<ref>cf Knuth 1973:3.</ref> operations: ZERO (e.g. the contents of location replaced by 0: L \u2190 0), SUCCESSOR (e.g. L \u2190 L+1), and DECREMENT (e.g. L \u2190 L \u2212 1).<ref>But always preceded by IF\u2013THEN to avoid improper subtraction.</ref> Rarely must a programmer write \"code\" with such a limited instruction set. But Minsky shows (as do Melzak and Lambek) that his machine is [[Turing complete]] with only four general ''types'' of instructions: conditional GOTO, unconditional GOTO, assignment/replacement/substitution, and HALT.  However, a few different assignment instructions (e.g. DECREMENT, INCREMENT, and ZERO/CLEAR/EMPTY for a Minsky machine) are also required for Turing-completeness; their exact specification is somewhat up to the designer. The unconditional GOTO is a convenience; it can be constructed by initializing a dedicated location to zero e.g. the instruction \" Z \u2190 0 \"; thereafter the instruction IF Z=0 THEN GOTO xxx is unconditional.\n\n''Simulation of an algorithm: computer (computor) language'': Knuth advises the reader that \"the best way to learn an algorithm is to try it . . . immediately take pen and paper and work through an example\".<ref>Knuth 1973:4</ref> But what about a simulation or execution of the real thing? The programmer must translate the algorithm into a language that the simulator/computer/computor can ''effectively'' execute. Stone gives an example of this: when computing the roots of a quadratic equation the computor must know how to take a square root. If they don't, then the algorithm, to be effective, must provide a set of rules for extracting a square root.<ref>Stone 1972:5. Methods for extracting roots are not trivial: see [[Methods of computing square roots]].</ref>\n\nThis means that the programmer must know a \"language\" that is effective relative to the target computing agent (computer/computor).\n\nBut what model should be used for the simulation? Van Emde Boas observes \"even if we base [[Computational complexity theory|complexity theory]] on abstract instead of concrete machines, arbitrariness of the choice of a model remains. It is at this point that the notion of ''simulation'' enters\".<ref>{{cite book| last = Leeuwen| first = Jan| title = Handbook of Theoretical Computer Science: Algorithms and complexity. Volume A| url = https://books.google.com/?id=-X39_rA3VSQC| year = 1990| publisher = Elsevier| isbn = 978-0-444-88071-0 | page = 85}}</ref> When speed is being measured, the instruction set matters. For example, the subprogram in Euclid's algorithm to compute the remainder would execute much faster if the programmer had a \"[[modular arithmetic|modulus]]\" instruction available rather than just subtraction (or worse: just Minsky's \"decrement\").\n\n''Structured programming, canonical structures'': Per the [[Church\u2013Turing thesis]], any algorithm can be computed by a model known to be [[Turing complete]], and per Minsky's demonstrations, Turing completeness requires only four instruction types\u2014conditional GOTO, unconditional GOTO, assignment, HALT. Kemeny and Kurtz observe that, while \"undisciplined\" use of unconditional GOTOs and conditional IF-THEN GOTOs can result in \"[[spaghetti code]]\", a programmer can write structured programs using only these instructions; on the other hand \"it is also possible, and not too hard, to write badly structured programs in a structured language\".<ref>[[John G. Kemeny]] and [[Thomas E. Kurtz]] 1985 ''Back to Basic: The History, Corruption, and Future of the Language'', Addison-Wesley Publishing Company, Inc. Reading, MA, {{ISBN|0-201-13433-0}}.</ref> Tausworthe augments the three [[Structured program theorem|B\u00f6hm-Jacopini canonical structures]]:<ref>Tausworthe 1977:101</ref> SEQUENCE, IF-THEN-ELSE, and WHILE-DO, with two more: DO-WHILE and CASE.<ref>Tausworthe 1977:142</ref> An additional benefit of a structured program is that it lends itself to [[proof of correctness|proofs of correctness]] using [[mathematical induction]].<ref>Knuth 1973 section 1.2.1, expanded by Tausworthe 1977 at pages 100ff and Chapter 9.1</ref>\n\n''Canonical flowchart symbols<ref>cf Tausworthe 1977</ref>'': The graphical aide called a [[flowchart]], offers a way to describe and document an algorithm (and a computer program of one). Like the program flow of a Minsky machine, a flowchart always starts at the top of a page and proceeds down. Its primary symbols are only four: the directed arrow showing program flow, the rectangle (SEQUENCE, GOTO), the diamond (IF-THEN-ELSE), and the dot (OR-tie). The B\u00f6hm\u2013Jacopini canonical structures are made of these primitive shapes. Sub-structures can \"nest\" in rectangles, but only if a single exit occurs from the superstructure. The symbols, and their use to build the canonical structures are shown in the diagram.\n\n==Examples==\n{{further|List of algorithms}}\n\n===Algorithm example===\nOne of the simplest algorithms is to find the largest number in a list of numbers of random order. Finding the solution requires looking at every number in the list. From this follows a simple algorithm, which can be stated in a high-level description in English prose, as:\n\n''High-level description:''\n# If there are no numbers in the set then there is no highest number.\n# Assume the first number in the set is the largest number in the set.\n# For each remaining number in the set: if this number is larger than the current largest number, consider this number to be the largest number in the set.\n# When there are no numbers left in the set to iterate over, consider the current largest number to be the largest number of the set.\n\n''(Quasi-)formal description:''\nWritten in prose but much closer to the high-level language of a computer program, the following is the more formal coding of the algorithm in [[pseudocode]] or [[pidgin code]]:\n\n{{algorithm-begin|name=LargestNumber}}\n   Input: A list of numbers ''L''.\n   Output: The largest number in the list ''L''.\n\n   '''if''' ''L.size'' = 0 '''return''' null\n   ''largest'' \u2190 ''L''[0]\n   '''for each''' ''item'' '''in''' ''L'', '''do'''\n     '''if''' ''item'' > ''largest'', '''then'''\n       ''largest'' \u2190 ''item''\n   '''return''' ''largest''\n{{algorithm-end}}\n\n===Euclid's algorithm===\n{{further|Euclid's algorithm}}\n[[File:Euclid's algorithm Book VII Proposition 2 2.png|250px|thumb|left|The example-diagram of Euclid's algorithm from T.L. Heath (1908), with more detail added. Euclid does not go beyond a third measuring and gives no numerical examples. Nicomachus gives the example of 49 and 21: \"I subtract the less from the greater; 28 is left; then again I subtract from this the same 21 (for this is possible); 7 is left; I subtract this from 21, 14 is left; from which I again subtract 7 (for this is possible); 7 is left, but 7 cannot be subtracted from 7.\" Heath comments that \"The last phrase is curious, but the meaning of it is obvious enough, as also the meaning of the phrase about ending 'at one and the same number'.\"(Heath 1908:300).]]\n\n[[Euclid]]'s algorithm to compute the [[greatest common divisor]] (GCD) to two numbers appears as Proposition II in Book VII (\"Elementary Number Theory\") of his ''[[Euclid's Elements|Elements]]''.<ref>Heath 1908:300; Hawking's Dover 2005 edition derives from Heath.</ref> Euclid poses the problem thus: \"Given two numbers not prime to one another, to find their greatest common measure\". He defines \"A number [to be] a multitude composed of units\": a counting number, a positive integer not including zero. To \"measure\" is to place a shorter measuring length ''s'' successively (''q'' times) along longer length ''l'' until the remaining portion ''r'' is less than the shorter length ''s''.<ref>\" 'Let CD, measuring BF, leave FA less than itself.' This is a neat abbreviation for saying, measure along BA successive lengths equal to CD until a point F is reached such that the length FA remaining is less than CD; in other words, let BF be the largest exact multiple of CD contained in BA\" (Heath 1908:297)</ref> In modern words, remainder ''r'' = ''l'' \u2212 ''q''\u00d7''s'', ''q'' being the quotient, or remainder ''r'' is the \"modulus\", the integer-fractional part left over after the division.<ref>For modern treatments using division in the algorithm, see Hardy and Wright 1979:180, Knuth 1973:2 (Volume 1), plus more discussion of Euclid's algorithm in Knuth 1969:293\u2013297 (Volume 2).</ref>\n\nFor Euclid's method to succeed, the starting lengths must satisfy two requirements: (i) the lengths must not be zero, AND (ii) the subtraction must be \u201cproper\u201d; i.e., a test must guarantee that the smaller of the two numbers is subtracted from the larger (or the two can be equal so their subtraction yields zero).\n\nEuclid's original proof adds a third requirement: the two lengths must not be prime to one another. Euclid stipulated this so that he could construct a [[reductio ad absurdum]] proof that the two numbers' common measure is in fact the ''greatest''.<ref>Euclid covers this question in his Proposition 1.</ref> While Nicomachus' algorithm is the same as Euclid's, when the numbers are prime to one another, it yields the number \"1\" for their common measure. So, to be precise, the following is really Nicomachus' algorithm.\n\n[[File:Euclids-algorithm-example-1599-650.gif|350px|thumb|right|A graphical expression of Euclid's algorithm to find the greatest common divisor for 1599 and 650.\n<source lang=\"text\" highlight=\"1,5\">\n 1599 = 650\u00d72 + 299\n 650 = 299\u00d72 + 52\n 299 = 52\u00d75 + 39\n 52 = 39\u00d71 + 13\n 39 = 13\u00d73 + 0</source>]]\n\n====Computer language for Euclid's algorithm====\nOnly a few instruction ''types'' are required to execute Euclid's algorithm\u2014some logical tests (conditional GOTO), unconditional GOTO, assignment (replacement), and subtraction.\n* A ''location'' is symbolized by upper case letter(s), e.g. S, A, etc.\n* The varying quantity (number) in a location is written in lower case letter(s) and (usually) associated with the location's name. For example, location L at the start might contain the number ''l'' = 3009.\n\n====An inelegant program for Euclid's algorithm====\n[[File:Euclid's algorithm Inelegant program 1.png|thumb|163px|right|\"Inelegant\" is a translation of Knuth's version of the algorithm with a subtraction-based remainder-loop replacing his use of division (or a \"modulus\" instruction). Derived from Knuth 1973:2\u20134. Depending on the two numbers \"Inelegant\" may compute the g.c.d. in fewer steps than \"Elegant\".]]\n\nThe following algorithm is framed as Knuth's four-step version of Euclid's and Nicomachus', but, rather than using division to find the remainder, it uses successive subtractions of the shorter length ''s'' from the remaining length ''r'' until ''r'' is less than ''s''. The high-level description, shown in boldface, is adapted from Knuth 1973:2\u20134:\n\n'''INPUT''':\n {{vanchor|1|el1}} [Into two locations L and S put the numbers ''l'' and ''s'' that represent the two lengths]:\n   INPUT L, S\n {{vanchor|2|el2}} [Initialize R: make the remaining length ''r'' equal to the starting/initial/input length ''l'']:\n   R \u2190 L\n\n'''E0: [Ensure ''r'' \u2265 ''s''.]'''\n {{vanchor|3|el3}} [Ensure the smaller of the two numbers is in S and the larger in R]:\n   IF R > S THEN\n     the contents of L is the larger number so skip over the exchange-steps [[#4|4]], [[#5|5]] and [[#6|6]]:\n     GOTO step [[#6|6]]\n   ELSE\n     swap the contents of R and S.\n {{vanchor|4|el4}}   L \u2190 R (this first step is redundant, but is useful for later discussion).\n {{vanchor|5|el5}}   R \u2190 S\n {{vanchor|6|el6}}   S \u2190 L\n\n'''E1: [Find remainder]''': Until the remaining length ''r'' in R is less than the shorter length ''s'' in S, repeatedly subtract the measuring number ''s'' in S from the remaining length ''r'' in R.\n {{vanchor|7|el7}} IF S > R THEN\n     done measuring so\n     GOTO [[#10|10]]\n   ELSE\n     measure again,\n {{vanchor|8|el8}}   R \u2190 R \u2212 S\n {{vanchor|9|el9}}   [Remainder-loop]:\n     GOTO [[#7|7]].\n\n'''E2: [Is the remainder zero?]''': EITHER (i) the last measure was exact, the remainder in R is zero, and the program can halt, OR (ii) the algorithm must continue: the last measure left a remainder in R less than measuring number in S.\n {{vanchor|10|el10}} IF R = 0 THEN\n      done so\n      GOTO [[#15|step 15]]\n    ELSE\n      CONTINUE TO [[#11|step 11]],\n\n'''E3: [Interchange ''s'' and ''r'']''': The nut of Euclid's algorithm. Use remainder ''r'' to measure what was previously smaller number ''s''; L serves as a temporary location.\n {{vanchor|11|el11}}  L \u2190 R\n {{vanchor|12|el12}}  R \u2190 S\n {{vanchor|13|el13}}  S \u2190 L\n {{vanchor|14|el14}}  [Repeat the measuring process]:\n     GOTO [[#7|7]]\n\n'''OUTPUT''':\n\n {{vanchor|15|el15}} [Done. S contains the [[greatest common divisor]]]:\n    PRINT S\n\n'''DONE''':\n {{vanchor|16|el16}} HALT, END, STOP.\n\n====An elegant program for Euclid's algorithm====\n{{clarify span|The following version of Euclid's algorithm requires only six core instructions to do what thirteen are required to do by \"Inelegant\"; worse, \"Inelegant\" requires more ''types'' of instructions.|reason=Contrary this (unsourced) text, it is general consensus in software engineering that good programming style does not aim at minimizing the number of 'core' (whatever that means) instructions or instruction types. Software engineers during the entire recent 50 years would have ostracized the shown program, if only due to its extensive use of 'goto'. While the program should not be removed here, it could serve as an example of poor programming style, leading to hard-to-understand source code.|date=March 2019}} The flowchart of \"Elegant\" can be found at the top of this article. In the (unstructured) Basic language, the steps are numbered, and the instruction <source lang=\"cbmbas\" inline>LET [] = []</source> is the assignment instruction symbolized by \u2190.\n<source lang=\"cbmbas\">\n  5 REM Euclid's algorithm for greatest common divisor\n  6 PRINT \"Type two integers greater than 0\"\n  10 INPUT A,B\n  20 IF B=0 THEN GOTO 80\n  30 IF A > B THEN GOTO 60\n  40 LET B=B-A\n  50 GOTO 20\n  60 LET A=A-B\n  70 GOTO 20\n  80 PRINT A\n  90 END\n</source>\n''How \"Elegant\" works'': In place of an outer \"Euclid loop\", \"Elegant\" shifts back and forth between two \"co-loops\", an A > B loop that computes A \u2190 A \u2212 B, and a B \u2264 A loop that computes B \u2190 B \u2212 A. This works because, when at last the minuend M is less than or equal to the subtrahend S (Difference = Minuend \u2212 Subtrahend), the minuend can become ''s'' (the new measuring length) and the subtrahend can become the new ''r'' (the length to be measured); in other words the \"sense\" of the subtraction reverses.\n\nThe following version can be used with [[Object-oriented programming|object-oriented languages]]:\n<source lang=\"java\">\n// Euclid's algorithm for greatest common divisor\nint euclidAlgorithm (int A, int B){\n     A=Math.abs(A);\n     B=Math.abs(B);\n     while (B!=0){\n          if (A>B) A=A-B;\n          else B=B-A;\n     }\n     return A;\n}\n</source>\n\n===Testing the Euclid algorithms===\nDoes an algorithm do what its author wants it to do? A few test cases usually give some confidence in the core functionality. But tests are not enough. For test cases, one source<ref>{{cite web |url=http://aleph0.clarku.edu/~djoyce/java/elements/bookVII/propVII2.html |title=Euclid's Elements, Book VII, Proposition 2 |publisher=Aleph0.clarku.edu |date= |accessdate=May 20, 2012 |archive-url=https://web.archive.org/web/20120524074919/http://aleph0.clarku.edu/~djoyce/java/elements/bookVII/propVII2.html |archive-date=May 24, 2012 |url-status=live }}</ref> uses 3009 and 884. Knuth suggested 40902, 24140. Another interesting case is the two [[relatively prime]] numbers 14157 and 5950.\n\nBut \"exceptional cases\"<ref>While this notion is in widespread use, it cannot be defined precisely.</ref> must be identified and tested. Will \"Inelegant\" perform properly when R > S, S > R, R = S? Ditto for \"Elegant\": B > A, A > B, A = B? (Yes to all). What happens when one number is zero, both numbers are zero? (\"Inelegant\" computes forever in all cases; \"Elegant\" computes forever when A = 0.) What happens if ''negative'' numbers are entered? Fractional numbers? If the input numbers, i.e. the [[domain (mathematics)|domain]] of the function computed by the algorithm/program, is to include only positive integers including zero, then the failures at zero indicate that the algorithm (and the program that [[instance (computer science)|instantiates]] it) is a [[partial function]] rather than a [[total function]]. A notable failure due to exceptions is the [[Ariane 5 Flight 501]] rocket failure (June 4, 1996).\n\n''Proof of program correctness by use of mathematical induction'': Knuth demonstrates the application of [[mathematical induction]] to an \"extended\" version of Euclid's algorithm, and he proposes \"a general method applicable to proving the validity of any algorithm\".<ref>Knuth 1973:13\u201318. He credits \"the formulation of algorithm-proving in terms of assertions and induction\" to R W. Floyd, Peter Naur, C.A.R. Hoare, H.H. Goldstine and J. von Neumann. Tausworth 1977 borrows Knuth's Euclid example and extends Knuth's method in section 9.1 ''Formal Proofs'' (pp. 288\u2013298).</ref> Tausworthe proposes that a measure of the complexity of a program be the length of its correctness proof.<ref>Tausworthe 1997:294</ref>\n\n===Measuring and improving the Euclid algorithms===\n''Elegance (compactness) versus goodness (speed)'': With only six core instructions, \"Elegant\" is the clear winner, compared to \"Inelegant\" at thirteen instructions. However, \"Inelegant\" is ''faster'' (it arrives at HALT in fewer steps). [[Algorithm analysis]]<ref>cf Knuth 1973:7 (Vol. I), and his more-detailed analyses on pp. 1969:294\u2013313 (Vol II).</ref> indicates why this is the case: \"Elegant\" does ''two'' conditional tests in every subtraction loop, whereas \"Inelegant\" only does one. As the algorithm (usually) requires many loop-throughs, ''on average'' much time is wasted doing a \"B = 0?\" test that is needed only after the remainder is computed.\n\n''Can the algorithms be improved?'': Once the programmer judges a program \"fit\" and \"effective\"\u2014that is, it computes the function intended by its author\u2014then the question becomes, can it be improved?\n\nThe compactness of \"Inelegant\" can be improved by the elimination of five steps. But Chaitin proved that compacting an algorithm cannot be automated by a generalized algorithm;<ref>Breakdown occurs when an algorithm tries to compact itself. Success would solve the [[Halting problem]].</ref> rather, it can only be done [[heuristic]]ally; i.e., by exhaustive search (examples to be found at [[Busy beaver]]), trial and error, cleverness, insight, application of [[inductive reasoning]], etc. Observe that steps 4, 5 and 6 are repeated in steps 11, 12 and 13. Comparison with \"Elegant\" provides a hint that these steps, together with steps 2 and 3, can be eliminated. This reduces the number of core instructions from thirteen to eight, which makes it \"more elegant\" than \"Elegant\", at nine steps.\n\nThe speed of \"Elegant\" can be improved by moving the \"B=0?\" test outside of the two subtraction loops. This change calls for the addition of three instructions (B = 0?, A = 0?, GOTO). Now \"Elegant\" computes the example-numbers faster; whether this is always the case for any given A, B, and R, S would require a detailed analysis.\n\n==Algorithmic analysis==\n{{Main|Analysis of algorithms}}\nIt is frequently important to know how much of a particular resource (such as time or storage) is theoretically required for a given algorithm. Methods have been developed for the [[analysis of algorithms]] to obtain such quantitative answers (estimates); for example, the sorting algorithm above has a time requirement of O(''n''), using the [[big O notation]] with ''n'' as the length of the list. At all times the algorithm only needs to remember two values: the largest number found so far, and its current position in the input list. Therefore, it is said to have a space requirement of ''O(1)'', if the space required to store the input numbers is not counted, or O(''n'') if it is counted.\n\nDifferent algorithms may complete the same task with a different set of instructions in less or more time, space, or '[[algorithmic efficiency|effort]]' than others. For example, a [[binary search]] algorithm (with cost O(log n) ) outperforms a sequential search (cost O(n) ) when used for [[lookup table|table lookups]] on sorted lists or arrays.\n\n===Formal versus empirical===\n{{Main|Empirical algorithmics|Profiling (computer programming)|Program optimization}}\nThe [[analysis of algorithms|analysis, and study of algorithms]] is a discipline of [[computer science]], and is often practiced abstractly without the use of a specific [[programming language]] or implementation. In this sense, algorithm analysis resembles other mathematical disciplines in that it focuses on the underlying properties of the algorithm and not on the specifics of any particular implementation. Usually [[pseudocode]] is used for analysis as it is the simplest and most general representation. However, ultimately, most algorithms are usually implemented on particular hardware/software platforms and their [[algorithmic efficiency]] is eventually put to the test using real code. For the solution of a \"one off\" problem, the efficiency of a particular algorithm may not have significant consequences (unless n is extremely large) but for algorithms designed for fast interactive, commercial or long life scientific usage it may be critical. Scaling from small n to large n frequently exposes inefficient algorithms that are otherwise benign.\n\nEmpirical testing is useful because it may uncover unexpected interactions that affect performance. [[Benchmark (computing)|Benchmarks]] may be used to compare before/after potential improvements to an algorithm after program optimization.\nEmpirical tests cannot replace formal analysis, though, and are not trivial to perform in a fair manner.<ref name=\"KriegelSchubert2016\">{{cite journal|last1=Kriegel|first1=Hans-Peter|authorlink=Hans-Peter Kriegel|last2=Schubert|first2=Erich|last3=Zimek|first3=Arthur|authorlink3=Arthur Zimek|title=The (black) art of run-time evaluation: Are we comparing algorithms or implementations?|journal=Knowledge and Information Systems|volume=52|issue=2|year=2016|pages=341\u2013378|issn=0219-1377|doi=10.1007/s10115-016-1004-2}}</ref>\n\n=== Execution efficiency ===\n{{Main|Algorithmic efficiency}}\nTo illustrate the potential improvements possible even in well-established algorithms, a recent significant innovation, relating to [[Fast Fourier transform|FFT]] algorithms (used heavily in the field of image processing), can decrease processing time up to 1,000 times for applications like medical imaging.<ref>{{cite web| title=Better Math Makes Faster Data Networks| author=Gillian Conahan| date=January 2013| url=http://discovermagazine.com/2013/jan-feb/34-better-math-makes-faster-data-networks#.URAnVieX98F| publisher=discovermagazine.com| access-date=May 13, 2014| archive-url=https://web.archive.org/web/20140513212427/http://discovermagazine.com/2013/jan-feb/34-better-math-makes-faster-data-networks#.URAnVieX98F| archive-date=May 13, 2014| url-status=live}}</ref> In general, speed improvements depend on special properties of the problem, which are very common in practical applications.<ref name=\"Hassanieh12\">Haitham Hassanieh, [[Piotr Indyk]], Dina Katabi, and Eric Price, \"[http://siam.omnibooksonline.com/2012SODA/data/papers/500.pdf ACM-SIAM Symposium On Discrete Algorithms (SODA)] {{webarchive|url=https://web.archive.org/web/20130704180806/http://siam.omnibooksonline.com/2012SODA/data/papers/500.pdf |date=July 4, 2013 }}, Kyoto, January 2012. See also the [http://groups.csail.mit.edu/netmit/sFFT/ sFFT Web Page] {{Webarchive|url=https://web.archive.org/web/20120221145740/http://groups.csail.mit.edu/netmit/sFFT/ |date=February 21, 2012 }}.</ref> Speedups of this magnitude enable computing devices that make extensive use of image processing (like digital cameras and medical equipment) to consume less power.\n\n== Classification ==\nThere are various ways to classify algorithms, each with its own merits.\n\n=== By implementation ===\nOne way to classify algorithms is by implementation means.\n\n{| style=\"float:right; width:200pt;\"\n|-\n| \n<syntaxhighlight lang=\"C\">\nint gcd(int A, int B) {\n    if (B == 0)\n        return A;\n    else if (A > B)\n        return gcd(A-B,B);\n    else\n        return gcd(A,B-A);\n}\n</syntaxhighlight>\n|-\n| Recursive [[C (programming language)|C]] implementation of Euclid's algorithm from the [[#lead|above]] flowchart\n|}\n\n; Recursion\n: A [[recursive algorithm]] is one that invokes (makes reference to) itself repeatedly until a certain condition (also known as termination condition) matches, which is a method common to [[functional programming]]. [[Iteration|Iterative]] algorithms use repetitive constructs like [[Program loops|loops]] and sometimes additional data structures like [[Stack (data structure)|stacks]] to solve the given problems. Some problems are naturally suited for one implementation or the other. For example, [[towers of Hanoi]] is well understood using recursive implementation. Every recursive version has an equivalent (but possibly more or less complex) iterative version, and vice versa.\n; Logical\n: An algorithm may be viewed as controlled [[Deductive reasoning|logical deduction]]. This notion may be expressed as: ''Algorithm = logic + control''.<ref>Kowalski 1979</ref> The logic component expresses the axioms that may be used in the computation and the control component determines the way in which deduction is applied to the axioms. This is the basis for the [[logic programming]] paradigm. In pure logic programming languages, the control component is fixed and algorithms are specified by supplying only the logic component. The appeal of this approach is the elegant [[Formal semantics of programming languages|semantics]]: a change in the axioms produces a well-defined change in the algorithm.\n; Serial, parallel or distributed\n: Algorithms are usually discussed with the assumption that computers execute one instruction of an algorithm at a time. Those computers are sometimes called serial computers. An [[algorithm design]]ed for such an environment is called a serial algorithm, as opposed to [[parallel algorithm]]s or [[distributed algorithms]]. Parallel algorithms take advantage of computer architectures where several processors can work on a problem at the same time, whereas distributed algorithms utilize multiple machines connected with a [[computer network]]. Parallel or distributed algorithms divide the problem into more symmetrical or asymmetrical subproblems and collect the results back together. The resource consumption in such algorithms is not only processor cycles on each processor but also the communication overhead between the processors. Some sorting algorithms can be parallelized efficiently, but their communication overhead is expensive. Iterative algorithms are generally parallelizable. Some problems have no parallel algorithms and are called inherently serial problems.\n; Deterministic or non-deterministic\n: [[Deterministic algorithm]]s solve the problem with exact decision at every step of the algorithm whereas [[non-deterministic algorithm]]s solve problems via guessing although typical guesses are made more accurate through the use of [[heuristics]].\n; Exact or approximate\n: While many algorithms reach an exact solution, [[approximation algorithm]]s seek an approximation that is closer to the true solution. The approximation can be reached by either using a deterministic or a random strategy. Such algorithms have practical value for many hard problems. One of the examples of an approximate algorithm is the [[Knapsack problem]], where there is a set of given items. Its goal is to pack the knapsack to get the maximum total value. Each item has some weight and some value. Total weight that can be carried is no more than some fixed number X. So, the solution must consider weights of items as well as their value.<ref>{{Cite book|url=https://www.springer.com/us/book/9783540402862|title=Knapsack Problems {{!}} Hans Kellerer {{!}} Springer|language=en|isbn=978-3-540-40286-2|publisher=Springer|year=2004|access-date=September 19, 2017|archive-url=https://web.archive.org/web/20171018181055/https://www.springer.com/us/book/9783540402862|archive-date=October 18, 2017|url-status=live}}</ref>\n; [[Quantum algorithm]]\n: They run on a realistic model of [[quantum computation]]. The term is usually used for those algorithms which seem inherently quantum, or use some essential feature of [[Quantum computing]] such as [[quantum superposition]] or [[quantum entanglement]].\n\n=== By design paradigm ===\nAnother way of classifying algorithms is by their design methodology or [[algorithmic paradigm|paradigm]]. There is a certain number of paradigms, each different from the other. Furthermore, each of these categories includes many different types of algorithms. Some common paradigms are:\n\n; [[Brute force search|Brute-force]] or exhaustive search\n: This is the [[Na\u00efve algorithm|naive method]] of trying every possible solution to see which is best.<ref>{{cite book| last1 = Carroll| first1 = Sue| last2 = Daughtrey| first2 = Taz| title = Fundamental Concepts for the Software Quality Engineer| url = https://books.google.com/?id=bz_cl3B05IcC&pg=PA282| date = July 4, 2007| publisher = American Society for Quality| isbn = 978-0-87389-720-4| pages = 282 et seq }}</ref>\n; Divide and conquer\n: A [[divide and conquer algorithm]] repeatedly reduces an instance of a problem to one or more smaller instances of the same problem (usually [[recursion|recursively]]) until the instances are small enough to solve easily. One such example of divide and conquer is [[mergesort|merge sorting]]. Sorting can be done on each segment of data after dividing data into segments and sorting of entire data can be obtained in the conquer phase by merging the segments. A simpler variant of divide and conquer is called a ''decrease and conquer algorithm'', that solves an identical subproblem and uses the solution of this subproblem to solve the bigger problem. Divide and conquer divides the problem into multiple subproblems and so the conquer stage is more complex than decrease and conquer algorithms. An example of a decrease and conquer algorithm is the [[binary search algorithm]].\n; Search and enumeration\n: Many problems (such as playing [[chess]]) can be modeled as problems on [[graph theory|graphs]]. A [[graph exploration algorithm]] specifies rules for moving around a graph and is useful for such problems. This category also includes [[search algorithm]]s, [[branch and bound]] enumeration and [[backtracking]].\n;[[Randomized algorithm]]\n: Such algorithms make some choices randomly (or pseudo-randomly). They can be very useful in finding approximate solutions for problems where finding exact solutions can be impractical (see heuristic method below). For some of these problems, it is known that the fastest approximations must involve some [[randomness]].<ref>For instance, the [[volume]] of a [[convex polytope]] (described using a membership oracle) can be approximated to high accuracy by a randomized polynomial time algorithm, but not by a deterministic one: see {{citation\n | last1 = Dyer | first1 = Martin\n | last2 = Frieze | first2 = Alan\n | last3 = Kannan | first3 = Ravi\n | date = January 1991\n | doi = 10.1145/102782.102783\n | issue = 1\n | journal = J. ACM\n | pages = 1\u201317\n | title = A Random Polynomial-time Algorithm for Approximating the Volume of Convex Bodies\n | volume = 38| citeseerx = 10.1.1.145.4600}}.</ref> Whether randomized algorithms with [[P (complexity)|polynomial time complexity]] can be the fastest algorithms for some problems is an open question known as the [[P versus NP problem]]. There are two large classes of such algorithms:\n# [[Monte Carlo algorithm]]s return a correct answer with high-probability. E.g. [[RP (complexity)|RP]] is the subclass of these that run in [[polynomial time]].\n# [[Las Vegas algorithm]]s always return the correct answer, but their running time is only probabilistically bound, e.g. [[Zero-error Probabilistic Polynomial time|ZPP]].\n; [[Reduction (complexity)|Reduction of complexity]]\n: This technique involves solving a difficult problem by transforming it into a better-known problem for which we have (hopefully) [[asymptotically optimal]] algorithms. The goal is to find a reducing algorithm whose [[Computational complexity theory|complexity]] is not dominated by the resulting reduced algorithm's. For example, one [[selection algorithm]] for finding the median in an unsorted list involves first sorting the list (the expensive portion) and then pulling out the middle element in the sorted list (the cheap portion). This technique is also known as ''[[Transform and conquer algorithm|transform and conquer]]''.\n; [[Back tracking]]\n: In this approach, multiple solutions are built incrementally and abandoned when it is determined that they cannot lead to a valid full solution.\n\n=== Optimization problems ===\n\nFor [[optimization problem]]s there is a more specific classification of algorithms; an algorithm for such problems may fall into one or more of the general categories described above as well as into one of the following:\n\n; [[Linear programming]]\n: When searching for optimal solutions to a linear function bound to linear equality and inequality constraints, the constraints of the problem can be used directly in producing the optimal solutions. There are algorithms that can solve any problem in this category, such as the popular [[simplex algorithm]].<ref>\n[[George B. Dantzig]] and Mukund N. Thapa. 2003. ''Linear Programming 2: Theory and Extensions''. Springer-Verlag.</ref> Problems that can be solved with linear programming include the [[maximum flow problem]] for directed graphs. If a problem additionally requires that one or more of the unknowns must be an [[integer]] then it is classified in [[integer programming]]. A linear programming algorithm can solve such a problem if it can be proved that all restrictions for integer values are superficial, i.e., the solutions satisfy these restrictions anyway. In the general case, a specialized algorithm or an algorithm that finds approximate solutions is used, depending on the difficulty of the problem.\n; [[Dynamic programming]]\n: When a problem shows [[optimal substructure]]s\u2014meaning the optimal solution to a problem can be constructed from optimal solutions to subproblems\u2014and [[overlapping subproblems]], meaning the same subproblems are used to solve many different problem instances, a quicker approach called ''dynamic programming'' avoids recomputing solutions that have already been computed. For example, [[Floyd\u2013Warshall algorithm]], the shortest path to a goal from a vertex in a weighted [[graph (discrete mathematics)|graph]] can be found by using the shortest path to the goal from all adjacent vertices. Dynamic programming and [[memoization]] go together. The main difference between dynamic programming and divide and conquer is that subproblems are more or less independent in divide and conquer, whereas subproblems overlap in dynamic programming. The difference between dynamic programming and straightforward recursion is in caching or memoization of recursive calls. When subproblems are independent and there is no repetition, memoization does not help; hence dynamic programming is not a solution for all complex problems. By using memoization or maintaining a [[Mathematical table|table]] of subproblems already solved, dynamic programming reduces the exponential nature of many problems to polynomial complexity.\n; The greedy method\n: A [[greedy algorithm]] is similar to a dynamic programming algorithm in that it works by examining substructures, in this case not of the problem but of a given solution. Such algorithms start with some solution, which may be given or have been constructed in some way, and improve it by making small modifications. For some problems they can find the optimal solution while for others they stop at [[local optimum|local optima]], that is, at solutions that cannot be improved by the algorithm but are not optimum. The most popular use of greedy algorithms is for finding the minimal spanning tree where finding the optimal solution is possible with this method. [[Huffman coding|Huffman Tree]], [[kruskal's algorithm|Kruskal]], [[Prim's algorithm|Prim]], [[Sollin's algorithm|Sollin]] are greedy algorithms that can solve this optimization problem.\n;The heuristic method\n:In [[optimization problem]]s, [[heuristic algorithm]]s can be used to find a solution close to the optimal solution in cases where finding the optimal solution is impractical. These algorithms work by getting closer and closer to the optimal solution as they progress. In principle, if run for an infinite amount of time, they will find the optimal solution. Their merit is that they can find a solution very close to the optimal solution in a relatively short time. Such algorithms include [[local search (optimization)|local search]], [[tabu search]], [[simulated annealing]], and [[genetic algorithm]]s. Some of them, like simulated annealing, are non-deterministic algorithms while others, like tabu search, are deterministic. When a bound on the error of the non-optimal solution is known, the algorithm is further categorized as an [[approximation algorithm]].\n\n=== By field of study ===\n{{See also|List of algorithms}}\nEvery field of science has its own problems and needs efficient algorithms. Related problems in one field are often studied together. Some example classes are [[search algorithm]]s, [[sorting algorithm]]s, [[merge algorithm]]s, [[numerical analysis|numerical algorithms]], [[graph theory|graph algorithms]], [[string algorithms]], [[computational geometry|computational geometric algorithms]], [[combinatorial|combinatorial algorithms]], [[medical algorithm]]s, [[machine learning]], [[cryptography]], [[data compression]] algorithms and [[parsing|parsing techniques]].\n\nFields tend to overlap with each other, and algorithm advances in one field may improve those of other, sometimes completely unrelated, fields. For example, dynamic programming was invented for optimization of resource consumption in industry but is now used in solving a broad range of problems in many fields.\n\n=== By complexity ===\n{{See also|Complexity class| Parameterized complexity}}\nAlgorithms can be classified by the amount of time they need to complete compared to their input size:\n* Constant time: if the time needed by the algorithm is the same, regardless of the input size. E.g. an access to an [[Array data structure|array]] element.\n* Logarithmic time: if the time is a logarithmic function of the input size. E.g. [[binary search algorithm]].\n* Linear time: if the time is proportional to the input size. E.g. the traverse of a list.\n* Polynomial time: if the time is a power of the input size. E.g. the [[bubble sort]] algorithm has quadratic time complexity.\n* Exponential time: if the time is an exponential function of the input size. E.g. [[Brute-force search]].\n\nSome problems may have multiple algorithms of differing complexity, while other problems might have no algorithms or no known efficient algorithms. There are also mappings from some problems to other problems. Owing to this, it was found to be more suitable to classify the problems themselves instead of the algorithms into equivalence classes based on the complexity of the best possible algorithms for them.\n\n== Continuous algorithms ==\nThe adjective \"continuous\" when applied to the word \"algorithm\" can mean:\n* An algorithm operating on data that represents continuous quantities, even though this data is represented by discrete approximations\u2014such algorithms are studied in [[numerical analysis]]; or\n* An algorithm in the form of a [[differential equation]] that operates continuously on the data, running on an [[analog computer]].<ref>{{cite book| author = Tsypkin| title = Adaptation and learning in automatic systems| url = https://books.google.com/?id=sgDHJlafMskC&pg=PA54| year = 1971| publisher = Academic Press| isbn = 978-0-08-095582-7| page = 54 }}</ref>\n\n== Legal issues ==\n{{see also|Software patent}}\n\nAlgorithms, by themselves, are not usually patentable. In the United States, a claim consisting solely of simple manipulations of abstract concepts, numbers, or signals does not constitute \"processes\" (USPTO 2006), and hence algorithms are not patentable (as in [[Gottschalk v. Benson]]). However practical applications of algorithms are sometimes patentable. For example, in [[Diamond v. Diehr]], the application of a simple [[feedback]] algorithm to aid in the curing of [[synthetic rubber]] was deemed patentable. The [[Software patent debate|patenting of software]] is highly controversial, and there are highly criticized patents involving algorithms, especially [[data compression]] algorithms, such as [[Unisys]]' [[Graphics Interchange Format#Unisys and LZW patent enforcement|LZW patent]].\n\nAdditionally, some cryptographic algorithms have export restrictions (see [[export of cryptography]]).\n\n== History: Development of the notion of \"algorithm\" ==\n\n=== Ancient Near East ===\nThe earliest  evidence of algorithms is found in the [[Babylonian mathematics]] of ancient [[Mesopotamia]] (modern Iraq). A [[Sumer]]ian clay tablet found in [[Shuruppak]] near [[Baghdad]] and dated to circa 2500 BC described the earliest [[division algorithm]].<ref name=\"Springer Science & Business Media\">{{cite book |last1=Chabert |first1=Jean-Luc |title=A History of Algorithms: From the Pebble to the Microchip |date=2012 |publisher=Springer Science & Business Media |isbn=9783642181924 |pages=7\u20138}}</ref> During the [[First Babylonian dynasty|Hammurabi dynasty]] circa 1800-1600 BC, [[Babylonia]]n clay tablets described algorithms for computing [[formulas]].<ref>{{cite journal |last1=Knuth |first1=Donald E. |title=Ancient Babylonian Algorithms |journal=Commun. ACM |date=1972 |volume=15 |issue=7 |pages=671\u2013677 |doi=10.1145/361454.361514 |url=https://web.archive.org/web/20121224100137/steiner.math.nthu.edu.tw/disk5/js/computer/1.pdf |issn=0001-0782}}</ref> Algorithms were also used in [[Babylonian astronomy]]. Babylonian clay tablets describe and employ algorithmic procedures to compute the time and place of significant astronomical events.<ref>{{Citation | last = Aaboe | first = Asger | author-link = Asger Aaboe | date = 2001 | title = Episodes from the Early History of Astronomy | publisher = Springer | place = New York | pages = 40\u201362 | isbn = 978-0-387-95136-2 }}</ref>\n\nAlgorithms for arithmetic are also found in ancient [[Egyptian mathematics]], dating back to the [[Rhind Mathematical Papyrus]] circa 1550 BC.<ref name=\"Springer Science & Business Media\"/> Algorithms were later used in ancient [[Hellenistic mathematics]]. Two examples are the [[Sieve of Eratosthenes]], which was described in the ''[[Introduction to Arithmetic]]'' by [[Nicomachus]],<ref>{{cite web|url=http://www.math.wichita.edu/history/men/eratosthenes.html|title=Eratosthenes|publisher=Wichita State University: Department of Mathematics and Statistics|first=Courtney|last=Ast|access-date=February 27, 2015|archive-url=https://web.archive.org/web/20150227150653/http://www.math.wichita.edu/history/men/eratosthenes.html|archive-date=February 27, 2015|url-status=live}}</ref><ref name=Cooke2005/>{{rp|Ch 9.2}} and the [[Euclidean algorithm]], which was first described in ''[[Euclid's Elements]]'' (c. 300 BC).<ref name=Cooke2005/>{{rp|Ch 9.1}}\n\n=== Discrete and distinguishable symbols ===\nTally-marks: To keep track of their flocks, their sacks of grain and their money the ancients used tallying: accumulating stones or marks scratched on sticks or making discrete symbols in clay. Through the Babylonian and Egyptian use of marks and symbols, eventually [[Roman numerals]] and the [[abacus]] evolved (Dilson, p.&nbsp;16\u201341). Tally marks appear prominently in [[unary numeral system]] arithmetic used in [[Turing machine]] and [[Post\u2013Turing machine]] computations.\n\n=== Manipulation of symbols as \"place holders\" for numbers: algebra ===\n[[Muhammad ibn M\u016bs\u0101 al-Khw\u0101rizm\u012b]], a [[Mathematics in medieval Islam|Persian mathematician]], wrote the ''[[Al-jabr]]'' in the 9th century. The terms \"[[algorism]]\" and \"algorithm\" are derived from the name al-Khw\u0101rizm\u012b, while the term \"[[algebra]]\" is derived from the book ''Al-jabr''. In Europe, the word \"algorithm\" was originally used to refer to the sets of rules and techniques used by Al-Khwarizmi to solve algebraic equations, before later being generalized to refer to any set of rules or techniques.<ref>{{cite book |last1=Chabert |first1=Jean-Luc |title=A History of Algorithms: From the Pebble to the Microchip |date=2012 |publisher=Springer Science & Business Media |isbn=9783642181924 |page=2}}</ref> This eventually culminated in [[Gottfried Leibniz|Leibniz]]'s notion of the [[calculus ratiocinator]] (ca 1680):\n\n{{quote|A good century and a half ahead of his time, Leibniz proposed an algebra of logic, an algebra that would specify the rules for manipulating logical concepts in the manner that ordinary algebra specifies the rules for manipulating numbers.<ref>Davis 2000:18</ref>}}\n\n=== Cryptographic algorithms ===\nThe first [[cryptographic]] algorithm for deciphering encrypted code was developed by [[Al-Kindi]], a 9th-century [[Mathematics in medieval Islam|Arab mathematician]], in ''A Manuscript On Deciphering Cryptographic Messages''. He gave the first description of [[cryptanalysis]] by [[frequency analysis]], the earliest [[codebreaking]] algorithm.<ref name=\"Dooley\">{{cite book |last1=Dooley |first1=John F. |title=A Brief History of Cryptology and Cryptographic Algorithms |date=2013 |publisher=Springer Science & Business Media |isbn=9783319016283 |pages=12\u20133}}</ref>\n\n=== Mechanical contrivances with discrete states ===\n''The clock'': Bolter credits the invention of the weight-driven [[clock]] as \"The key invention [of Europe in the Middle Ages]\", in particular, the [[verge escapement]]<ref>Bolter 1984:24</ref> that provides us with the tick and tock of a mechanical clock. \"The accurate automatic machine\"<ref>Bolter 1984:26</ref> led immediately to \"mechanical [[automata theory|automata]]\" beginning in the 13th century and finally to \"computational machines\"\u2014the [[difference engine]] and [[analytical engine]]s of [[Charles Babbage]] and Countess [[Ada Lovelace]], mid-19th century.<ref>Bolter 1984:33\u201334, 204\u2013206.</ref> Lovelace is credited with the first creation of an algorithm intended for processing on a computer\u2014Babbage's analytical engine, the first device considered a real [[Turing-complete]] computer instead of just a [[calculator]]\u2014and is sometimes called \"history's first programmer\" as a result, though a full implementation of Babbage's second device would not be realized until decades after her lifetime.\n\n''Logical machines 1870 \u2013 [[Stanley Jevons]]' \"logical abacus\" and \"logical machine\"'': The technical problem was to reduce [[Boolean equation]]s when presented in a form similar to what is now known as [[Karnaugh map]]s. Jevons (1880) describes first a simple \"abacus\" of \"slips of wood furnished with pins, contrived so that any part or class of the [logical] combinations can be picked out mechanically ... More recently, however, I have reduced the system to a completely mechanical form, and have thus embodied the whole of the indirect process of inference in what may be called a ''Logical Machine''\" His machine came equipped with \"certain moveable wooden rods\" and \"at the foot are 21 keys like those of a piano [etc] ...\". With this machine he could analyze a \"[[syllogism]] or any other simple logical argument\".<ref>All quotes from W. Stanley Jevons 1880 ''Elementary Lessons in Logic: Deductive and Inductive'', Macmillan and Co., London and New York. Republished as a googlebook; cf Jevons 1880:199\u2013201. Louis Couturat 1914 ''the Algebra of Logic'', The Open Court Publishing Company, Chicago and London. Republished as a googlebook; cf Couturat 1914:75\u201376 gives a few more details; he compares this to a typewriter as well as a piano. Jevons states that the account is to be found at January 20, 1870 ''The Proceedings of the Royal Society''.</ref>\n\nThis machine he displayed in 1870 before the Fellows of the Royal Society.<ref>Jevons 1880:199\u2013200</ref> Another logician [[John Venn]], however, in his 1881 ''Symbolic Logic'', turned a jaundiced eye to this effort: \"I have no high estimate myself of the interest or importance of what are sometimes called logical machines ... it does not seem to me that any contrivances at present known or likely to be discovered really deserve the name of logical machines\"; see more at [[Algorithm characterizations]]. But not to be outdone he too presented \"a plan somewhat analogous, I apprehend, to Prof. Jevon's ''abacus'' ... [And] [a]gain, corresponding to Prof. Jevons's logical machine, the following contrivance may be described. I prefer to call it merely a logical-diagram machine ... but I suppose that it could do very completely all that can be rationally expected of any logical machine\".<ref>All quotes from John Venn 1881 ''Symbolic Logic'', Macmillan and Co., London. Republished as a googlebook. cf Venn 1881:120\u2013125. The interested reader can find a deeper explanation in those pages.</ref>\n\n''Jacquard loom, Hollerith punch cards, telegraphy and telephony \u2013 the electromechanical relay'': Bell and Newell (1971) indicate that the [[Jacquard loom]] (1801), precursor to [[Hollerith cards]] (punch cards, 1887), and \"telephone switching technologies\" were the roots of a tree leading to the development of the first computers.<ref>Bell and Newell diagram 1971:39, cf. Davis 2000</ref> By the mid-19th century the [[telegraph]], the precursor of the telephone, was in use throughout the world, its discrete and distinguishable encoding of letters as \"dots and dashes\" a common sound. By the late 19th century the [[ticker tape]] (ca 1870s) was in use, as was the use of Hollerith cards in the 1890 U.S. census. Then came the [[teleprinter]] (ca. 1910) with its punched-paper use of [[Baudot code]] on tape.\n\n''Telephone-switching networks'' of electromechanical [[relay]]s (invented 1835) was behind the work of [[George Stibitz]] (1937), the inventor of the digital adding device. As he worked in Bell Laboratories, he observed the \"burdensome' use of mechanical calculators with gears. \"He went home one evening in 1937 intending to test his idea... When the tinkering was over, Stibitz had constructed a binary adding device\".<ref>* Melina Hill, Valley News Correspondent, ''A Tinkerer Gets a Place in History'', Valley News West Lebanon NH, Thursday, March 31, 1983, p. 13.</ref>\n\nDavis (2000) observes the particular importance of the electromechanical relay (with its two \"binary states\" ''open'' and ''closed''):\n: It was only with the development, beginning in the 1930s, of electromechanical calculators using electrical relays, that machines were built having the scope Babbage had envisioned.\"<ref>Davis 2000:14</ref>\n\n=== Mathematics during the 19th century up to the mid-20th century ===\n''Symbols and rules'': In rapid succession, the mathematics of [[George Boole]] (1847, 1854), [[Gottlob Frege]] (1879), and [[Giuseppe Peano]] (1888\u20131889) reduced arithmetic to a sequence of symbols manipulated by rules. Peano's ''The principles of arithmetic, presented by a new method'' (1888) was \"the first attempt at an axiomatization of mathematics in a [[Symbolic language (programming)|symbolic language]]\".<ref>van Heijenoort 1967:81ff</ref>\n\nBut Heijenoort gives Frege (1879) this kudos: Frege's is \"perhaps the most important single work ever written in logic. ... in which we see a \" 'formula language', that is a ''lingua characterica'', a language written with special symbols, \"for pure thought\", that is, free from rhetorical embellishments ... constructed from specific symbols that are manipulated according to definite rules\".<ref>van Heijenoort's commentary on Frege's ''Begriffsschrift, a formula language, modeled upon that of arithmetic, for pure thought'' in van Heijenoort 1967:1</ref> The work of Frege was further simplified and amplified by [[Alfred North Whitehead]] and [[Bertrand Russell]] in their [[Principia Mathematica]] (1910\u20131913).\n\n''The paradoxes'': At the same time a number of disturbing paradoxes appeared in the literature, in particular, the [[Burali-Forti paradox]] (1897), the [[Russell paradox]] (1902\u201303), and the [[Richard Paradox]].<ref>Dixon 1906, cf. Kleene 1952:36\u201340</ref> The resultant considerations led to [[Kurt G\u00f6del]]'s paper (1931)\u2014he specifically cites the paradox of the liar\u2014that completely reduces rules of [[recursion]] to numbers.\n\n''Effective calculability'': In an effort to solve the [[Entscheidungsproblem]] defined precisely by Hilbert in 1928, mathematicians first set about to define what was meant by an \"effective method\" or \"effective calculation\" or \"effective calculability\" (i.e., a calculation that would succeed). In rapid succession the following appeared: [[Alonzo Church]], [[Stephen Kleene]] and [[J.B. Rosser]]'s [[\u03bb-calculus]]<ref>cf. footnote in Alonzo Church 1936a in Davis 1965:90 and 1936b in Davis 1965:110</ref> a finely honed definition of \"general recursion\" from the work of G\u00f6del acting on suggestions of [[Jacques Herbrand]] (cf. G\u00f6del's Princeton lectures of 1934) and subsequent simplifications by Kleene.<ref>Kleene 1935\u20136 in Davis 1965:237ff, Kleene 1943 in Davis 1965:255ff</ref> Church's proof<ref>Church 1936 in Davis 1965:88ff</ref> that the Entscheidungsproblem was unsolvable, [[Emil Post]]'s definition of effective calculability as a worker mindlessly following a list of instructions to move left or right through a sequence of rooms and while there either mark or erase a paper or observe the paper and make a yes-no decision about the next instruction.<ref>cf. \"Finite Combinatory Processes \u2013 formulation 1\", Post 1936 in Davis 1965:289\u2013290</ref> Alan Turing's proof of that the Entscheidungsproblem was unsolvable by use of his \"a- [automatic-] machine\"<ref>Turing 1936\u201337 in Davis 1965:116ff</ref>\u2014in effect almost identical to Post's \"formulation\", [[J. Barkley Rosser]]'s definition of \"effective method\" in terms of \"a machine\".<ref>Rosser 1939 in Davis 1965:226</ref> [[S.C. Kleene]]'s proposal of a precursor to \"[[Church thesis]]\" that he called \"Thesis I\",<ref>Kleene 1943 in Davis 1965:273\u2013274</ref> and a few years later Kleene's renaming his Thesis \"Church's Thesis\"<ref>Kleene 1952:300, 317</ref> and proposing \"Turing's Thesis\".<ref>Kleene 1952:376</ref>\n\n=== Emil Post (1936) and Alan Turing (1936\u201337, 1939) ===\n\n[[Emil Post]] (1936) described the actions of a \"computer\" (human being) as follows:\n:\"...two concepts are involved: that of a ''symbol space'' in which the work leading from problem to answer is to be carried out, and a fixed unalterable ''set of directions''.\n\nHis symbol space would be\n:\"a two-way infinite sequence of spaces or boxes... The problem solver or worker is to move and work in this symbol space, being capable of being in, and operating in but one box at a time.... a box is to admit of but two possible conditions, i.e., being empty or unmarked, and having a single mark in it, say a vertical stroke.\n\n:\"One box is to be singled out and called the starting point. ...a specific problem is to be given in symbolic form by a finite number of boxes [i.e., INPUT] being marked with a stroke. Likewise, the answer [i.e., OUTPUT] is to be given in symbolic form by such a configuration of marked boxes...\n\n:\"A set of directions applicable to a general problem sets up a deterministic process when applied to each specific problem. This process terminates only when it comes to the direction of type (C ) [i.e., STOP]\".<ref>Turing 1936\u201337 in Davis 1965:289\u2013290</ref> See more at [[Post\u2013Turing machine]]\n[[File:Alan Turing.jpg|thumb|200px|Alan Turing's statue at [[Bletchley Park]]]]\n[[Alan Turing]]'s work<ref>Turing 1936 in Davis 1965, Turing 1939 in Davis 1965:160</ref> preceded that of Stibitz (1937); it is unknown whether Stibitz knew of the work of Turing. Turing's biographer believed that Turing's use of a typewriter-like model derived from a youthful interest: \"Alan had dreamt of inventing typewriters as a boy; Mrs. Turing had a typewriter, and he could well have begun by asking himself what was meant by calling a typewriter 'mechanical'\".<ref>Hodges, p.&nbsp;96</ref> Given the prevalence of Morse code and telegraphy, ticker tape machines, and teletypewriters we{{Who|date=March 2017}} might conjecture that all were influences.\n\nTuring\u2014his model of computation is now called a [[Turing machine]]\u2014begins, as did Post, with an analysis of a human computer that he whittles down to a simple set of basic motions and \"states of mind\". But he continues a step further and creates a machine as a model of computation of numbers.<ref>Turing 1936\u201337:116</ref>\n\n:\"Computing is normally done by writing certain symbols on paper. We may suppose this paper is divided into squares like a child's arithmetic book...I assume then that the computation is carried out on one-dimensional paper, i.e., on a tape divided into squares. I shall also suppose that the number of symbols which may be printed is finite...\n\n:\"The behavior of the computer at any moment is determined by the symbols which he is observing, and his \"state of mind\" at that moment. We may suppose that there is a bound B to the number of symbols or squares which the computer can observe at one moment. If he wishes to observe more, he must use successive observations. We will also suppose that the number of states of mind which need be taken into account is finite...\n\n:\"Let us imagine that the operations performed by the computer to be split up into 'simple operations' which are so elementary that it is not easy to imagine them further divided.\"<ref name=\"Turing 1936\u201337 in Davis 1965:136\">Turing 1936\u201337 in Davis 1965:136</ref>\n\nTuring's reduction yields the following:\n:\"The simple operations must therefore include:\n::\"(a) Changes of the symbol on one of the observed squares\n::\"(b) Changes of one of the squares observed to another square within L squares of one of the previously observed squares.\n\"It may be that some of these change necessarily invoke a change of state of mind. The most general single operation must, therefore, be taken to be one of the following:\n::\"(A) A possible change (a) of symbol together with a possible change of state of mind.\n::\"(B) A possible change (b) of observed squares, together with a possible change of state of mind\"\n\n:\"We may now construct a machine to do the work of this computer.\"<ref name=\"Turing 1936\u201337 in Davis 1965:136\"/>\n\nA few years later, Turing expanded his analysis (thesis, definition) with this forceful expression of it:\n:\"A function is said to be \"effectively calculable\" if its values can be found by some purely mechanical process. Though it is fairly easy to get an intuitive grasp of this idea, it is nevertheless desirable to have some more definite, mathematical expressible definition ... [he discusses the history of the definition pretty much as presented above with respect to G\u00f6del, Herbrand, Kleene, Church, Turing, and Post] ... We may take this statement literally, understanding by a purely mechanical process one which could be carried out by a machine. It is possible to give a mathematical description, in a certain normal form, of the structures of these machines. The development of these ideas leads to the author's definition of a computable function, and to an identification of computability \u2020 with effective calculability ... .\n::\"\u2020 We shall use the expression \"computable function\" to mean a function calculable by a machine, and we let \"effectively calculable\" refer to the intuitive idea without particular identification with any one of these definitions\".<ref>Turing 1939 in Davis 1965:160</ref>\n\n=== J.B. Rosser (1939) and S.C. Kleene (1943) ===\n[[J. Barkley Rosser]] defined an 'effective [mathematical] method' in the following manner (italicization added):\n:\"'Effective method' is used here in the rather special sense of a method each step of which is precisely determined and which is certain to produce the answer in a finite number of steps. With this special meaning, three different precise definitions have been given to date. [his footnote #5; see discussion immediately below]. The simplest of these to state (due to Post and Turing) says essentially that ''an effective method of solving certain sets of problems exists if one can build a machine which will then solve any problem of the set with no human intervention beyond inserting the question and (later) reading the answer''. All three definitions are equivalent, so it doesn't matter which one is used. Moreover, the fact that all three are equivalent is a very strong argument for the correctness of any one.\" (Rosser 1939:225\u2013226)\n\nRosser's footnote No. 5 references the work of (1) Church and Kleene and their definition of \u03bb-definability, in particular Church's use of it in his ''An Unsolvable Problem of Elementary Number Theory'' (1936); (2) Herbrand and G\u00f6del and their use of recursion in particular G\u00f6del's use in his famous paper ''On Formally Undecidable Propositions of Principia Mathematica and Related Systems I'' (1931); and (3) Post (1936) and Turing (1936\u201337) in their mechanism-models of computation.\n\n[[Stephen C. Kleene]] defined as his now-famous \"Thesis I\" known as the [[Church\u2013Turing thesis]]. But he did this in the following context (boldface in original):\n:\"12. ''Algorithmic theories''... In setting up a complete algorithmic theory, what we do is to describe a procedure, performable for each set of values of the independent variables, which procedure necessarily terminates and in such manner that from the outcome we can read a definite answer, \"yes\" or \"no,\" to the question, \"is the predicate value true?\"\" (Kleene 1943:273)\n\n=== History after 1950 ===\nA number of efforts have been directed toward further refinement of the definition of \"algorithm\", and activity is on-going because of issues surrounding, in particular, [[foundations of mathematics]] (especially the [[Church\u2013Turing thesis]]) and [[philosophy of mind]] (especially arguments about [[artificial intelligence]]). For more, see [[Algorithm characterizations]].\n\n== See also ==\n{{div col|colwidth=22em}}\n* [[Abstract machine]]\n* [[Algorithm engineering]]\n* [[Algorithm characterizations]]\n* [[Algorithmic composition]]\n* [[Algorithmic entities]]\n* [[Algorithmic synthesis]]\n* [[Algorithmic technique]]\n* [[Algorithmic topology]]\n* [[Garbage in, garbage out]]\n* ''[[Introduction to Algorithms]]'' (textbook)\n* [[List of algorithms]]\n* [[List of algorithm general topics]]\n* [[List of important publications in theoretical computer science#Algorithms|List of important publications in theoretical computer science \u2013 Algorithms]]\n* [[Theory of computation]]\n** [[Computability theory]]\n** [[Computational complexity theory]]\n{{div col end}}\n\n==Notes==\n{{Reflist}}\n\n==Bibliography==\n{{refbegin|30em}}\n* {{cite journal | last1 = Axt | first1 = P | year = 1959 | title = On a Subrecursive Hierarchy and Primitive Recursive Degrees | url = | journal = Transactions of the American Mathematical Society | volume = 92 | issue = 1| pages = 85\u2013105 | doi=10.2307/1993169| jstor = 1993169 | doi-access = free}}\n* Bell, C. Gordon and Newell, Allen (1971), ''Computer Structures: Readings and Examples'', McGraw\u2013Hill Book Company, New York. {{ISBN|0-07-004357-4}}.\n* {{Cite journal|author1-link=Andreas Blass|first1=Andreas|last1=Blass|author2-link=Yuri Gurevich|first2=Yuri|last2=Gurevich|year=2003|url=http://research.microsoft.com/~gurevich/Opera/164.pdf|title=Algorithms: A Quest for Absolute Definitions|journal= Bulletin of European Association for Theoretical Computer Science|volume= 81}} Includes an excellent bibliography of 56 references.\n* {{cite book| last = Bolter| first = David J.| title = Turing's Man: Western Culture in the Computer Age| edition = 1984| year = 1984| publisher = The University of North Carolina Press|location= Chapel Hill, NC| isbn = 978-0-8078-1564-9 }}, {{ISBN|0-8078-4108-0}}\n* {{cite book| last1 = Boolos| first1 = George| last2 = Jeffrey| first2 = Richard| title = Computability and Logic| url = https://archive.org/details/computabilitylog0000bool_r8y9| url-access = registration| edition = 4th| origyear = 1974| year = 1999| publisher = Cambridge University Press, London| isbn = 978-0-521-20402-6| ref = harv| author1-link = George Boolos| author2-link = Richard Jeffrey }}: cf. Chapter 3 ''Turing machines'' where they discuss \"certain enumerable sets not effectively (mechanically) enumerable\".\n* {{cite book| last = Burgin| first = Mark| title = Super-Recursive Algorithms| year = 2004| publisher = Springer| isbn = 978-0-387-95569-8 }}\n* Campagnolo, M.L., [[Cris Moore|Moore, C.]], and Costa, J.F. (2000) An analog characterization of the subrecursive functions. In ''Proc. of the 4th Conference on Real Numbers and Computers'', Odense University, pp.&nbsp;91\u2013109\n* {{Cite journal|last=Church|first=Alonzo|authorlink=Alonzo Church|title=An Unsolvable Problem of Elementary Number Theory|journal=The American Journal of Mathematics|volume=58|pages= 345\u2013363|year=1936a|doi=10.2307/2371045|issue=2|jstor=2371045}} Reprinted in ''The Undecidable'', p.&nbsp;89ff. The first expression of \"Church's Thesis\". See in particular page 100 (''The Undecidable'') where he defines the notion of \"effective calculability\" in terms of \"an algorithm\", and he uses the word \"terminates\", etc.\n* {{Cite journal|last=Church|first=Alonzo|authorlink=Alonzo Church|title=A Note on the Entscheidungsproblem|journal=The Journal of Symbolic Logic|volume=1|year=1936b|pages=40\u201341|doi=10.2307/2269326|issue=1|jstor=2269326}} {{cite journal|last=Church|first=Alonzo|title=Correction to a Note on the Entscheidungsproblem|journal=The Journal of Symbolic Logic|volume=1|year=1936|pages=101\u2013102|doi=10.2307/2269030|issue=3|jstor=2269030}} Reprinted in ''The Undecidable'', p.&nbsp;110ff. Church shows that the Entscheidungsproblem is unsolvable in about 3 pages of text and 3 pages of footnotes.\n* {{cite book| last = Daffa'| first = Ali Abdullah al-| title = The Muslim contribution to mathematics| year = 1977| publisher = Croom Helm| location = London| isbn = 978-0-85664-464-1 }}\n* {{cite book| last = Davis| first = Martin| authorlink = Martin Davis (mathematician)| title = The Undecidable: Basic Papers On Undecidable Propositions, Unsolvable Problems and Computable Functions| url = https://archive.org/details/undecidablebasic0000davi| url-access = registration| year = 1965| publisher = Raven Press| location = New York| isbn = 978-0-486-43228-1 }} Davis gives commentary before each article. Papers of [[G\u00f6del]], [[Alonzo Church]], [[Alan Turing|Turing]], [[J. Barkley Rosser|Rosser]], [[Kleene]], and [[Emil Post]] are included; those cited in the article are listed here by author's name.\n* {{cite book| last = Davis| first = Martin| authorlink = Martin Davis (mathematician)| title = Engines of Logic: Mathematicians and the Origin of the Computer| year = 2000| publisher = W.W. Nortion| location = New York| isbn = 978-0-393-32229-3 }} Davis offers concise biographies of [[Gottfried Leibniz|Leibniz]], [[George Boole|Boole]], [[Gottlob Frege|Frege]], [[Georg Cantor|Cantor]], [[David Hilbert|Hilbert]], G\u00f6del and Turing with [[John von Neumann|von Neumann]] as the show-stealing villain. Very brief bios of [[Joseph-Marie Jacquard]], [[Babbage]], [[Ada Lovelace]], [[Claude Shannon]], [[Howard Aiken]], etc.\n* {{DADS|algorithm|algorithm}}\n* {{cite journal|title= Evolution and moral diversity |author=Dean, Tim |journal=Baltic International Yearbook of Cognition, Logic and Communication|year=2012|volume=7|doi=10.4148/biyclc.v7i0.1775 }}\n* {{cite book| last = Dennett| first = Daniel| authorlink = Daniel Dennett| title = Darwin's Dangerous Idea| journal = Complexity| volume = 2| issue = 1| pages = [https://archive.org/details/darwinsdangerous0000denn/page/32 32]\u201336| year = 1995| publisher = Touchstone/Simon & Schuster| location = New York| isbn = 978-0-684-80290-9| bibcode = 1996Cmplx...2a..32M| doi = 10.1002/(SICI)1099-0526(199609/10)2:1<32::AID-CPLX8>3.0.CO;2-H| url = https://archive.org/details/darwinsdangerous0000denn| url-access = registration}}\n* {{cite book| last = Dilson| first = Jesse| title = The Abacus| edition = (1968, 1994)| year = 2007| publisher = St. Martin's Press, NY| isbn = 978-0-312-10409-2| url = https://archive.org/details/abacusworldsfirs0000dils}}, {{ISBN|0-312-10409-X}}\n* [[Yuri Gurevich]], [http://research.microsoft.com/~gurevich/Opera/141.pdf ''Sequential Abstract State Machines Capture Sequential Algorithms''], ACM Transactions on Computational Logic, Vol 1, no 1 (July 2000), pp.&nbsp;77\u2013111. Includes bibliography of 33 sources.\n* {{cite book| last = van Heijenoort| first = Jean| authorlink = Jean van Heijenoort| title = From Frege to G\u00f6del, A Source Book in Mathematical Logic, 1879\u20131931| edition = (1967)| year = 2001| publisher = Harvard University Press, Cambridge| isbn = 978-0-674-32449-7 }}, 3rd edition 1976[?], {{ISBN|0-674-32449-8}} (pbk.)\n* {{cite book| last = Hodges| first = Andrew| authorlink = Andrew Hodges| title = Alan Turing: The Enigma| journal = Physics Today| volume = 37| issue = 11| pages = 107\u2013108| year = 1983| publisher = [[Simon and Schuster]]| location = New York| isbn = 978-0-671-49207-6| title-link = Alan Turing: The Enigma| bibcode = 1984PhT....37k.107H| doi = 10.1063/1.2915935}}, {{ISBN|0-671-49207-1}}. Cf. Chapter \"The Spirit of Truth\" for a history leading to, and a discussion of, his proof.\n* {{Cite journal|last=Kleene|first=Stephen C.|authorlink=Stephen Kleene|title=General Recursive Functions of Natural Numbers|journal=Mathematische Annalen|volume=112|pages=727\u2013742|url=http://gdz.sub.uni-goettingen.de/index.php?id=11&PPN=GDZPPN002278499&L=1|year=1936|doi=10.1007/BF01565439|issue=5|access-date=September 30, 2013|archive-url=https://web.archive.org/web/20140903092121/http://gdz.sub.uni-goettingen.de/index.php?id=11&PPN=GDZPPN002278499&L=1|archive-date=September 3, 2014|url-status=dead}} Presented to the American Mathematical Society, September 1935. Reprinted in ''The Undecidable'', p.&nbsp;237ff. Kleene's definition of \"general recursion\" (known now as mu-recursion) was used by Church in his 1935 paper ''An Unsolvable Problem of Elementary Number Theory'' that proved the \"decision problem\" to be \"undecidable\" (i.e., a negative result).\n* {{Cite journal|last=Kleene|first=Stephen C.|authorlink=Stephen Kleene |title= Recursive Predicates and Quantifiers|journal=American Mathematical Society Transactions|volume=54|pages=41\u201373|year=1943 |doi= 10.2307/1990131|issue=1|jstor=1990131|doi-access=free}} Reprinted in ''The Undecidable'', p.&nbsp;255ff. Kleene refined his definition of \"general recursion\" and proceeded in his chapter \"12. Algorithmic theories\" to posit \"Thesis I\" (p.&nbsp;274); he would later repeat this thesis (in Kleene 1952:300) and name it \"Church's Thesis\"(Kleene 1952:317) (i.e., the [[Church thesis]]).\n* {{cite book| last = Kleene| first = Stephen C.| authorlink = Kleene| title = Introduction to Metamathematics| edition = Tenth|year= 1991| orig-year = 1952| publisher = North-Holland Publishing Company| isbn = 978-0-7204-2103-3 }}\n* {{cite book| last = Knuth| first = Donald| authorlink = Donald Knuth| title = Fundamental Algorithms, Third Edition| year = 1997| publisher = Addison\u2013Wesley| location = Reading, Massachusetts| isbn = 978-0-201-89683-1 }}\n* {{Cite book|last=Knuth|first=Donald|authorlink=Donald Knuth|title=Volume 2/Seminumerical Algorithms, The Art of Computer Programming First Edition|publisher=Addison\u2013Wesley|location=Reading, Massachusetts|year=1969|isbn= }}\n* Kosovsky, N.K. ''Elements of Mathematical Logic and its Application to the theory of Subrecursive Algorithms'', LSU Publ., Leningrad, 1981\n* {{Cite journal|last=Kowalski|first=Robert|authorlink=Robert Kowalski|title=Algorithm=Logic+Control|journal=[[Communications of the ACM]]|volume=22|issue=7|pages=424\u2013436|year=1979|doi=10.1145/359131.359136}}\n* [[A.A. Markov]] (1954) ''Theory of algorithms''. [Translated by Jacques J. Schorr-Kon and PST staff] Imprint Moscow, Academy of Sciences of the USSR, 1954 [i.e., Jerusalem, Israel Program for Scientific Translations, 1961; available from the Office of Technical Services, U.S. Dept. of Commerce, Washington] Description 444 p.&nbsp;28&nbsp;cm. Added t.p. in Russian Translation of Works of the Mathematical Institute, Academy of Sciences of the USSR, v.&nbsp;42. Original title: Teoriya algerifmov. [QA248.M2943 Dartmouth College library. U.S. Dept. of Commerce, Office of Technical Services, number OTS 60-51085.]\n* {{cite book| last = Minsky| first = Marvin| authorlink = Marvin Minsky| title = Computation: Finite and Infinite Machines| url = https://archive.org/details/computationfinit0000mins| url-access = registration| edition = First| year = 1967| publisher = Prentice-Hall, Englewood Cliffs, NJ| isbn = 978-0-13-165449-5 }} Minsky expands his \"...idea of an algorithm \u2013 an effective procedure...\" in chapter 5.1 ''Computability, Effective Procedures and Algorithms. Infinite machines.''\n* {{Cite journal|last=Post|first=Emil|authorlink=Emil Post|title=Finite Combinatory Processes, Formulation I |journal=The Journal of Symbolic Logic |volume=1 |year=1936 |pages=103\u2013105 |doi=10.2307/2269031 |issue=3 |jstor=2269031}} Reprinted in ''The Undecidable'', pp.&nbsp;289ff. Post defines a simple algorithmic-like process of a man writing marks or erasing marks and going from box to box and eventually halting, as he follows a list of simple instructions. This is cited by Kleene as one source of his \"Thesis I\", the so-called [[Church\u2013Turing thesis]].\n* {{Cite book|last=Rogers, Jr|first=Hartley|title=Theory of Recursive Functions and Effective Computability|publisher=The MIT Press|year=1987|isbn=978-0-262-68052-3}}\n* {{Cite journal|last=Rosser|first=J.B.|authorlink=J. B. Rosser|title=An Informal Exposition of Proofs of Godel's Theorem and Church's Theorem|journal=Journal of Symbolic Logic|volume= 4 |issue=2|year=1939|doi=10.2307/2269059|pages=53\u201360|jstor=2269059}} Reprinted in ''The Undecidable'', p.&nbsp;223ff. Herein is Rosser's famous definition of \"effective method\": \"...a method each step of which is precisely predetermined and which is certain to produce the answer in a finite number of steps... a machine which will then solve any problem of the set with no human intervention beyond inserting the question and (later) reading the answer\" (p.&nbsp;225\u2013226, ''The Undecidable'')\n* {{cite book |last=Santos-Lang |first=Christopher | year=2014 |editor1-first=Simon |editor1-last=van Rysewyk  |editor2-first=Matthijs |editor2-last=Pontier |title=Machine Medical Ethics |volume=74 |publisher=Springer | location=Switzerland | pages=111\u2013127 | chapter=Moral Ecology Approaches to Machine Ethics| chapter-url=http://grinfree.com/MoralEcology.pdf | doi=10.1007/978-3-319-08108-3_8|series=Intelligent Systems, Control and Automation: Science and Engineering |isbn=978-3-319-08107-6 }}\n* {{Cite book|last=Scott|first=Michael L.|title=Programming Language Pragmatics |edition=3rd |publisher=Morgan Kaufmann Publishers/Elsevier|year=2009|isbn=978-0-12-374514-9}}\n* {{cite book| last = Sipser| first = Michael| title = Introduction to the Theory of Computation| year = 2006| publisher = PWS Publishing Company| isbn = 978-0-534-94728-6| url = https://archive.org/details/introductiontoth00sips}}\n* {{cite book |last=Sober |first=Elliott |last2=Wilson |first2=David Sloan |year=1998 |title=Unto Others: The Evolution and Psychology of Unselfish Behavior |url=https://archive.org/details/untoothersevolut00sobe |url-access=registration |location=Cambridge |publisher=Harvard University Press}}\n* {{Cite book|last=Stone|first=Harold S.|title=Introduction to Computer Organization and Data Structures|edition=1972|publisher=McGraw-Hill, New York|isbn=978-0-07-061726-1|year=1972}} Cf. in particular the first chapter titled: ''Algorithms, Turing Machines, and Programs''. His succinct informal definition: \"...any sequence of instructions that can be obeyed by a robot, is called an ''algorithm''\" (p.&nbsp;4).\n* {{cite book| last = Tausworthe| first = Robert C| title = Standardized Development of Computer Software Part 1 Methods| year = 1977| publisher = Prentice\u2013Hall, Inc.| location = Englewood Cliffs NJ| isbn = 978-0-13-842195-3 }}\n* {{Cite journal|last=Turing|first=Alan M.|authorlink=A. M. Turing|title=On Computable Numbers, With An Application to the Entscheidungsproblem|journal=[[Proceedings of the London Mathematical Society]]|series=Series 2|volume=42|pages= 230\u2013265 |year=1936\u201337|doi=10.1112/plms/s2-42.1.230 }}. Corrections, ibid, vol. 43(1937) pp.&nbsp;544\u2013546. Reprinted in ''The Undecidable'', p.&nbsp;116ff. Turing's famous paper completed as a Master's dissertation while at King's College Cambridge UK.\n* {{Cite journal|last=Turing|first=Alan M.|authorlink=A. M. Turing|title=Systems of Logic Based on Ordinals|journal=Proceedings of the London Mathematical Society|volume=45|pages=161\u2013228|year=1939|doi=10.1112/plms/s2-45.1.161|hdl=21.11116/0000-0001-91CE-3}} Reprinted in ''The Undecidable'', pp.&nbsp;155ff. Turing's paper that defined \"the oracle\" was his PhD thesis while at Princeton.\n* [[United States Patent and Trademark Office]] (2006), [http://www.uspto.gov/web/offices/pac/mpep/documents/2100_2106_02.htm ''2106.02 **>Mathematical Algorithms: 2100 Patentability''], Manual of Patent Examining Procedure (MPEP). Latest revision August 2006\n{{refend|30em}}\n\n==Further reading==\n{{refbegin}}\n* {{cite book |last=Bellah |first=Robert Neelly |year=1985 |authorlink=Robert N. Bellah |title=Habits of the Heart: Individualism and Commitment in American Life |location=Berkeley |isbn=978-0-520-25419-0 |publisher=University of California Press |url=https://books.google.com/books?id=XsUojihVZQcC |ref=harv}}\n* {{cite book |last=Berlinski |first=David |title=The Advent of the Algorithm: The 300-Year Journey from an Idea to the Computer |year=2001 |publisher=Harvest Books |isbn=978-0-15-601391-8 |url=https://archive.org/details/adventofalgorith0000berl }}\n* {{cite book |last=Chabert |first=Jean-Luc |title=A History of Algorithms: From the Pebble to the Microchip |year=1999 |publisher=Springer Verlag |isbn=978-3-540-63369-3}}\n* {{cite book |author1=Thomas H. Cormen |author2=Charles E. Leiserson |author3=Ronald L. Rivest |author4=Clifford Stein |title=Introduction To Algorithms |edition=3rd |year=2009 |publisher=MIT Press |isbn=978-0-262-03384-8}}\n* {{cite book |author=Harel, David |author2=Feldman, Yishai |title=Algorithmics: The Spirit of Computing |year=2004 |publisher=Addison-Wesley |isbn=978-0-321-11784-7}}\n* {{cite book |last1=Hertzke |first1=Allen D. |last2=McRorie |first2=Chris |year=1998 |editor1-last=Lawler |editor1-first=Peter Augustine |editor2-last=McConkey |editor2-first=Dale |chapter=The Concept of Moral Ecology |title=Community and Political Thought Today |location=Westport, CT |publisher=[[Praeger Publishers|Praeger]] |ref=harv}}\n* [[Donald Knuth|Knuth, Donald E.]] (2000). ''[http://www-cs-faculty.stanford.edu/~uno/aa.html Selected Papers on Analysis of Algorithms]''. Stanford, California: Center for the Study of Language and Information.\n* Knuth, Donald E. (2010). ''[http://www-cs-faculty.stanford.edu/~uno/da.html Selected Papers on Design of Algorithms]''. Stanford, California: Center for the Study of Language and Information.\n* {{Cite book |first1=Wendell |last1=Wallach |first2=Colin |last2=Allen |date=November 2008 |title=Moral Machines: Teaching Robots Right from Wrong |isbn=978-0-19-537404-9 |publisher=Oxford University Press |location=US |ref=harv}}\n{{refend}}\n\n==External links==\n{{wiktionary}}\n{{wikibooks|Algorithms}}\n{{WVD}}\n{{Commonscat|Algorithms}}\n* {{springer|title=Algorithm|id=p/a011780}}\n* {{dmoz|Computers/Algorithms/|Algorithms}}\n* {{MathWorld | urlname=Algorithm | title=Algorithm}}\n* [https://www.nist.gov/dads/ Dictionary of Algorithms and Data Structures] \u2013 [[National Institute of Standards and Technology]]\n; Algorithm repositories\n* [http://www.cs.sunysb.edu/~algorith/ The Stony Brook Algorithm Repository] \u2013 [[State University of New York at Stony Brook]]\n* [http://calgo.acm.org/ Collected Algorithms of the ACM] \u2013 [[Association for Computing Machinery]]\n* [http://www-cs-staff.stanford.edu/~knuth/sgb.html The Stanford GraphBase] \u2013 [[Stanford University]]\n\n{{Authority control}}\n\n[[Category:Algorithms| ]]\n[[Category:Articles with example pseudocode]]\n[[Category:Mathematical logic]]\n[[Category:Theoretical computer science]]\n", "name_user": "XaviRizo", "label": "unsafe", "comment": "", "url_page": "//en.wikipedia.org/wiki/Algorithm"}
{"title_page": "Where Is Everybody?", "text_new": "{{About|the Twilight Zone episode|absence of evidence for extraterrestrial intelligence|Fermi paradox}}\n{{Infobox television episode\n| title        = Where Is Everybody?\n| series       = [[The Twilight Zone (1959 TV series)|The Twilight Zone]]\n| image        =Earl Holliman Twilight Zone 1959.jpg\n| image_size   =200px\n| caption      = [[Earl Holliman]] in \"Where Is Everybody?\"\n| season       = 1\n| episode      = 1\n| music        = Original score by [[Bernard Herrmann]]\n| airdate      = October 2, 1959\n| production   = 173-3601\n| writer       = [[Rod Serling]]\n| director     = [[Robert Stevens (director)|Robert Stevens]]\n| editor = [[Roland Gross]]\n| photographer = [[Joseph La Shelle]]\n| guests       = {{plainlist|\n* [[Earl Holliman]]\n* [[James Gregory (actor)|James Gregory]] \n* [[Garry Walberg]]}}\n| season_article = The Twilight Zone (1959 TV series) (season 1)\n| episode_list = List of The Twilight Zone episodes\n| prev         =\n| next         = [[One for the Angels]]\n}}\n\"'''Where Is Everybody?'''\" is the first episode of the American [[anthology series|anthology]] [[television series]] ''[[The Twilight Zone]]''. It was originally broadcast on October 2, 1959 on [[CBS]].\n\n==Opening narration==\n\n=== Original pilot ===\nThis narration was used for the original pilot of \"Where is Everybody\", where it was narrated by Westbrook Van Voorhis, as it is written in the original script for the episode.\n{{Cquote\n| quote = There is a sixth dimension beyond that which is known to man. It is a dimension as vast as space, and as timeless as infinity. It is the middle ground between light and shadow -- between man's grasp and his reach; between science and superstition; between the pit of his fears and the sunlight of his knowledge. This is the dimension of imagination. It is an area that might be called the Twilight Zone.\n}}\n\n===Televised pilot===\nThe following narration was used in the later-released versions of the episode which had been dubbed over by Rod Serling as narrator, where the phrase \"the sixth dimension\" is replaced with \"the fifth dimension\" to fall in line with later episodes of ''The Twilight Zone''.{{cquote|''There is a fifth dimension beyond that which is known to man. It is a dimension as vast as space, and as timeless as infinity. It is the middle ground between light and shadow, and it lies between the pit of man's fears, and the summit of his knowledge. This is the dimension of imagination. It is an area that we call, The Twilight Zone.''\n}}\n\n===''The Twilight Zone''===\n{{cquote|''The place is here. The time is now, and the journey into the shadows that we are about to watch, could be ''our'' journey.''}}\n\n==Plot==\nA man dressed in a [[U.S. Air Force]] flight suit finds himself alone on a dirt road, with no memory of who he is or how he got there. He finds a [[diner]] and walks in to find a [[jukebox]] playing loudly; he lowers the volume and continues to call out. Eventually, he heads into the kitchen where he finds a hot pot of coffee on the stove and freshly made pies, but there are no other people besides himself. He accidentally knocks over and breaks a clock, at which point the jukebox stops playing.\n\nThe man leaves the diner and walks to a nearby town; he sees a parked truck with an apparent female passenger, but 'she' turns out to be a mannequin. Like the diner, the rest of the town seems deserted, but the man feels he is being watched and that there is someone around. The phone rings in a telephone booth and he dashes to answer it. There is nobody on the line and he can only raise a recorded message when he tried to call the operator. He grows unsettled as he wanders through the empty town, increasingly anxious to find someone to talk to.\n\nInside the police station, he uses the radio (\"Calling all cars, calling all cars, unknown man walking around police station...\"); then he notices a lit cigar in an ashtray. This prods him to check the jail cells in back. In one cell, there is evidence that someone had recently been there shaving. He declares that he wants to \"wake up now\". The man makes his way to the soda shop where, as he makes himself a sundae, he considers this dream he must be having and marvels at how detailed it is. He sees an entire rack of paperback books titled ''The Last Man on Earth, Feb. 1959''. This spooks him and he quickly leaves. \n\nAs night falls, lights turn on and the man is drawn to the illuminated movie theater marquee. The advertised film is [[Battle Hymn (film)|Battle Hymn]] and this causes him to remember that he is in the Air Force. He runs inside shouting, \"I'm in the Air Force.\"  Inside the theater he sits down to ponder this discovery and what could have happened that resulted in him being in this situation. \n\nWhen the film suddenly begins onscreen, he sprints to the projection booth and finds nobody there, then becomes even more paranoid that he is being watched. Panicked, he runs downstairs and headfirst into a wall-length mirror. When he recovers from this shock, he gives in to terror and races through the streets, stumbling, falling and startled by everything. He comes upon a [[pedestrian crossing|pedestrian call button]] and desperately pushes it over and over, begging for help. The call button is revealed to be a [[panic button]]: the man, whose name is given as Sgt. Mike Ferris, is actually in an isolation booth being observed by a group of uniformed servicemen. He has been undergoing tests to determine his fitness as an [[astronaut]] and whether he can handle a prolonged trip to the [[Moon]] alone; the town was a hallucination caused by [[sensory deprivation]].\n\nThe officiating general warns Ferris that while his basic needs will be provided for in space travel, he will not have [[Interpersonal relationship|companionship]]: \"next time [he will] really be alone\".  As Ferris is carried from the hangar on a stretcher, he looks into the sky and tells the Moon, \"don't go away up there\" and, \"we'll be up there in a little while\".\n\n==Closing narration==\n{{cquote|''The barrier of loneliness: The palpable, desperate need of the human animal to be with his fellow man. Up there, up there in the vastness of space, in the void that is sky, up there is an enemy known as isolation. It sits there in the stars waiting, waiting with the patience of eons, forever waiting... in The Twilight Zone.''}}\n\n==Cast==\n* [[Earl Holliman]] as Mike Ferris\n* [[James Gregory (actor)|James Gregory]] as General\n* [[Garry Walberg]] as Colonel\n\n== Production ==\nSerling's original pilot for ''The Twilight Zone'' was \"The Happy Place\", which revolved around a society in which people were executed upon reaching the age of 60, being considered no longer useful. CBS executive [[William Self (actor)|William Self]] rejected the story, feeling it was too dark; Serling eventually relented and wrote \"Where is Everybody?\" as a more acceptable substitute. Unlike other episodes, which were filmed at [[Metro-Goldwyn-Mayer]], \"Where is Everybody?\" was filmed at [[Universal Studios Hollywood|Universal Studios]], using [[Courthouse Square]] as the episode's Oakwood town.\n\nThe episode originally featured [[Westbrook Van Voorhis]] as narrator. When Voorhis was unavailable for later episodes, Serling re-recorded the narration himself for consistency. Serling notably changed the opening narration to place the Twilight Zone within the [[Five-dimensional space|fifth dimension]], among other alterations.\n\nSerling later adapted \"Where is Everybody?\" for a [[novelization]] titled ''Stories From the Twilight Zone''. Serling allegedly{{where|date=January 2015}} grew dissatisfied with the lack of [[science fiction]] content and changed the story to include Ferris discovering a movie ticket in his pocket while on the stretcher.{{citation needed|date=April 2012}} A variation on this plotline was used in the episode \"[[King Nine Will Not Return|''King Nine'' Will Not Return]]\".{{citation needed|date=January 2019}}\n\n== Reception ==\n''[[The New York Times]]'' praised the episode, saying that Serling proved \"that science cannot foretell what may be the effect of total isolation on a human being\", though \"[the episode's] resolution... seemed trite and anticlimactic. In the desultory field of filmed half-hour drama, however, Mr. Serling should not have much trouble in making his mark. At least his series promises to be different.<ref name=\"companion\">Zicree, Marc Scott: ''The Twilight Zone Companion''. Sillman-James Press, 1982 (second edition)</ref>\n\n[[Charles Beaumont]] praised the episode in ''The Magazine of Fantasy and Science-Fiction'', writing that he \"read Serling's first script... Old stuff? Of course. I thought so at the time... but there was one element in the story which kept me from my customary bitterness. The element was quality. Quality shone on every page. It shone in the dialogue and in the scene set-ups. And because of this, the story seemed fresh and new and powerful. There was one compromise, but it was made for the purpose of selling the series.\"<ref name=\"companion\"/>\n<!-- http://www.avclub.com/tvclub/the-twilight-zone-where-is-everybodyone-for-the-an-61553 -->\n\n== Further reading ==\n*DeVoe, Bill. (2008). ''Trivia from The Twilight Zone''. Albany, GA: Bear Manor Media. {{ISBN|978-1-59393-136-0}}\n*Grams, Martin. (2008). ''The Twilight Zone: Unlocking the Door to a Television Classic''. Churchville, MD: OTR Publishing. {{ISBN|978-0-9703310-9-0}}\n\n== References ==\n{{Reflist}}\n\n==External links==\n* {{IMDb episode|0734692}}\n* {{TV.com episode|12585}}\n\n{{The Twilight Zone (1959 TV series) episodes}}\n\n[[Category:The Twilight Zone (1959 TV series season 1) episodes]]\n[[Category:1959 American television episodes]]\n[[Category:American television pilots]]\n[[Category:Compositions by Bernard Herrmann]]\n[[Category:Solitude in fiction]]\n[[Category:Television episodes written by Rod Serling]]\n[[Category:Works about astronauts]]\n", "text_old": "{{About|the Twilight Zone episode|absence of evidence for extraterrestrial intelligence|Fermi paradox}}\n{{Infobox television episode\n| title        = Where Is Everybody?\n| series       = [[The Twilight Zone (1959 TV series)|The Twilight Zone]]\n| image        =Earl Holliman Twilight Zone 1959.jpg\n| image_size   =200px\n| caption      = [[Earl Holliman]] in \"Where Is Everybody?\"\n| season       = 1\n| episode      = 1\n| music        = Original score by [[Bernard Herrmann]]\n| airdate      = October 2, 1959\n| production   = 173-3601\n| writer       = [[Rod Serling]]\n| director     = [[Robert Stevens (director)|Robert Stevens]]\n| editor = [[Roland Gross]]\n| photographer = [[Joseph La Shelle]]\n| guests       = {{plainlist|\n* [[Earl Holliman]]\n* [[James Gregory (actor)|James Gregory]] \n* [[Garry Walberg]]}}\n| season_article = The Twilight Zone (1959 TV series) (season 1)\n| episode_list = List of The Twilight Zone episodes\n| prev         =\n| next         = [[One for the Angels]]\n}}\n\"'''Where Is Everybody?'''\" is the first episode of the American [[anthology series|anthology]] [[television series]] ''[[The Twilight Zone]]''. It was originally broadcast on October 2, 1959 on [[CBS]].\n\n==Opening narration==\n\n=== Original pilot ===\nThis narration was used for the original pilot of \"Where is Everybody\", where it was narrated by Westbrook Van Voorhis, as it is written in the original script for the episode.\n{{Cquote\n| quote = There is a sixth dimension beyond that which is known to man. It is a dimension as vast as space, and as timeless as infinity. It is the middle ground between light and shadow -- between man's grasp and his reach; between science and superstition; between the pit of his fears and the sunlight of his knowledge. This is the dimension of imagination. It is an area that might be called the Twilight Zone.\n}}\n\n===Televised pilot===\nThe following narration was used in the later-released versions of the episode which had been dubbed over by Rod Serling as narrator, where the phrase \"the sixth dimension\" is replaced with \"the fifth dimension\" to fall in line with later episodes of ''The Twilight Zone''.{{cquote|''There is a fifth dimension beyond that which is known to man. It is a dimension as vast as space, and as timeless as infinity. It is the middle ground between light and shadow, and it lies between the pit of man's fears, and the summit of his knowledge. This is the dimension of imagination. It is an area that we call, The Twilight Zone.''\n}}\n\n===''The Twilight Zone''===\n{{cquote|''The place is here. The time is now, and the journey into the shadows that we are about to watch, could be ''our'' journey.''}}\n\n==Plot==\nA man dressed in a [[U.S. Air Force]] flight suit finds himself alone on a dirt road, with no memory of who he is or how he got there. He finds a diner and walks in to find a jukebox playing loudly; he lowers the volume and continues to call out. Eventually, he heads into the kitchen where he finds a hot pot of coffee on the stove and freshly made pies, but there are no other people besides himself. He accidentally knocks over and breaks a clock, at which point the jukebox stops playing.\n\nThe man leaves the diner and walks to a nearby town; he sees a parked truck with an apparent female passenger, but 'she' turns out to be a mannequin. Like the diner, the rest of the town seems deserted, but the man feels he is being watched and that there is someone around. The phone rings in a telephone booth and he dashes to answer it. There is nobody on the line and he can only raise a recorded message when he tried to call the operator. He grows unsettled as he wanders through the empty town, increasingly anxious to find someone to talk to.\n\nInside the police station, he uses the radio (\"Calling all cars, calling all cars, unknown man walking around police station...\"); then he notices a lit cigar in an ashtray. This prods him to check the jail cells in back. In one cell, there is evidence that someone had recently been there shaving. He declares that he wants to \"wake up now\". The man makes his way to the soda shop where, as he makes himself a sundae, he considers this dream he must be having and marvels at how detailed it is. He sees an entire rack of paperback books titled ''The Last Man on Earth, Feb. 1959''. This spooks him and he quickly leaves. \n\nAs night falls, lights turn on and the man is drawn to the illuminated movie theater marquee. The advertised film is [[Battle Hymn (film)|Battle Hymn]] and this causes him to remember that he is in the Air Force. He runs inside shouting, \"I'm in the Air Force.\"  Inside the theater he sits down to ponder this discovery and what could have happened that resulted in him being in this situation. \n\nWhen the film suddenly begins onscreen, he sprints to the projection booth and finds nobody there, then becomes even more paranoid that he is being watched. Panicked, he runs downstairs and headfirst into a wall-length mirror. When he recovers from this shock, he gives in to terror and races through the streets, stumbling, falling and startled by everything. He comes upon a [[pedestrian crossing|pedestrian call button]] and desperately pushes it over and over, begging for help. The call button is revealed to be a [[panic button]]: the man, whose name is given as Sgt. Mike Ferris, is actually in an isolation booth being observed by a group of uniformed servicemen. He has been undergoing tests to determine his fitness as an [[astronaut]] and whether he can handle a prolonged trip to the [[Moon]] alone; the town was a hallucination caused by [[sensory deprivation]].\n\nThe officiating general warns Ferris that while his basic needs will be provided for in space travel, he will not have [[Interpersonal relationship|companionship]]: \"next time [he will] really be alone\".  As Ferris is carried from the hangar on a stretcher, he looks into the sky and tells the Moon, \"don't go away up there\" and, \"we'll be up there in a little while\". \n\n==Closing narration==\n{{cquote|''The barrier of loneliness: The palpable, desperate need of the human animal to be with his fellow man. Up there, up there in the vastness of space, in the void that is sky, up there is an enemy known as isolation. It sits there in the stars waiting, waiting with the patience of eons, forever waiting... in The Twilight Zone.''}}\n\n==Cast==\n* [[Earl Holliman]] as Mike Ferris\n* [[James Gregory (actor)|James Gregory]] as General\n* [[Garry Walberg]] as Colonel\n\n== Production ==\nSerling's original pilot for ''The Twilight Zone'' was \"The Happy Place\", which revolved around a society in which people were executed upon reaching the age of 60, being considered no longer useful. CBS executive [[William Self (actor)|William Self]] rejected the story, feeling it was too dark; Serling eventually relented and wrote \"Where is Everybody?\" as a more acceptable substitute. Unlike other episodes, which were filmed at [[Metro-Goldwyn-Mayer]], \"Where is Everybody?\" was filmed at [[Universal Studios Hollywood|Universal Studios]], using [[Courthouse Square]] as the episode's Oakwood town.\n\nThe episode originally featured [[Westbrook Van Voorhis]] as narrator. When Voorhis was unavailable for later episodes, Serling re-recorded the narration himself for consistency. Serling notably changed the opening narration to place the Twilight Zone within the [[Five-dimensional space|fifth dimension]], among other alterations.\n\nSerling later adapted \"Where is Everybody?\" for a [[novelization]] titled ''Stories From the Twilight Zone''. Serling allegedly{{where|date=January 2015}} grew dissatisfied with the lack of [[science fiction]] content and changed the story to include Ferris discovering a movie ticket in his pocket while on the stretcher.{{citation needed|date=April 2012}} A variation on this plotline was used in the episode \"[[King Nine Will Not Return|''King Nine'' Will Not Return]]\".{{citation needed|date=January 2019}}\n\n== Reception ==\n''[[The New York Times]]'' praised the episode, saying that Serling proved \"that science cannot foretell what may be the effect of total isolation on a human being\", though \"[the episode's] resolution... seemed trite and anticlimactic. In the desultory field of filmed half-hour drama, however, Mr. Serling should not have much trouble in making his mark. At least his series promises to be different.<ref name=\"companion\">Zicree, Marc Scott: ''The Twilight Zone Companion''. Sillman-James Press, 1982 (second edition)</ref>\n\n[[Charles Beaumont]] praised the episode in ''The Magazine of Fantasy and Science-Fiction'', writing that he \"read Serling's first script... Old stuff? Of course. I thought so at the time... but there was one element in the story which kept me from my customary bitterness. The element was quality. Quality shone on every page. It shone in the dialogue and in the scene set-ups. And because of this, the story seemed fresh and new and powerful. There was one compromise, but it was made for the purpose of selling the series.\"<ref name=\"companion\"/>\n<!-- http://www.avclub.com/tvclub/the-twilight-zone-where-is-everybodyone-for-the-an-61553 -->\n\n== Further reading ==\n*DeVoe, Bill. (2008). ''Trivia from The Twilight Zone''. Albany, GA: Bear Manor Media. {{ISBN|978-1-59393-136-0}}\n*Grams, Martin. (2008). ''The Twilight Zone: Unlocking the Door to a Television Classic''. Churchville, MD: OTR Publishing. {{ISBN|978-0-9703310-9-0}}\n\n== References ==\n{{Reflist}}\n\n==External links==\n* {{IMDb episode|0734692}}\n* {{TV.com episode|12585}}\n\n{{The Twilight Zone (1959 TV series) episodes}}\n\n[[Category:The Twilight Zone (1959 TV series season 1) episodes]]\n[[Category:1959 American television episodes]]\n[[Category:American television pilots]]\n[[Category:Compositions by Bernard Herrmann]]\n[[Category:Solitude in fiction]]\n[[Category:Television episodes written by Rod Serling]]\n[[Category:Works about astronauts]]\n", "name_user": "Foofbun", "label": "safe", "comment": "\u2192\u200ePlot", "url_page": "//en.wikipedia.org/wiki/Where_Is_Everybody%3F"}
{"title_page": "1984 Singaporean general election", "text_new": "{{Infobox election\n| election_name      = 1984 Singaporean general election\n| country            = Singapore\n| type               = parliamentary\n| ongoing            = no\n| previous_election  = 1980 Singaporean general election\n| previous_year      = 1980\n| next_election      = 1988 Singaporean general election\n| next_year          = 1988\n| election_date      = 22 December 1984\n| turnout            = 95.6%\n| seats_for_election = 79 (Only 49 contested) seats to the [[Parliament of Singapore]]<br />40 seats needed for a majority\n| image1 = [[File:Lee Kuan Yew.jpg|150x150px]]\n| leader1 = [[Lee Kuan Yew]]\n| party1 = People's Action Party\n| leaders_seat1 = [[Tanjong Pagar Single Member Constituency|Tanjong Pagar]]\n| last_election1 = 75 seats, 77.7%\n| seats1 = 77\n| seat_change1 = {{increase}}2\n| popular_vote1 = 568,310\n| percentage1 = 64.8%\n| swing1 = {{decrease}}12.9%\n| colour1 = 0052A1\n| image2 = [[File:JoshuaBenjaminJeyaretnam-Singapore-20051107-cropped.jpg|150x150px]]\n| leader2 = [[Joshua Benjamin Jeyaretnam|J.B. Jeyaretnam]]\n| party2 = Workers' Party of Singapore\n| leaders_seat2 = [[Anson Single Member Constituency|Anson]]\n| last_election2 = 0 seat, 6.2%\n| seats2 = 1\n| seat_change2 = {{increase}}1\n| popular_vote2 = 110,868 \n| percentage2 = 12.6%\n| swing2 = {{increase}}6.4%\n| colour2 = 93B3D4\n| image3 = [[File:ChiamSeeTong-SDARally-20060502.jpg|150x150px]]\n| leader3 = [[Chiam See Tong]]\n| party3 = Singapore Democratic Party\n| leaders_seat3 = [[Potong Pasir Single Member Constituency|Potong Pasir]]\n| last_election3 = 0 seat, 1.8%\n| seats3 = 1\n| seat_change3 = {{increase}}1\n| popular_vote3 = 32,102\n| percentage3 = 3.7% \n| swing3             = {{increase}}1.9%\n| colour3 = FF0000\n| title              = [[Prime Minister of Singapore|Prime Minister]]\n| posttitle          = Elected [[Prime Minister of Singapore|Prime Minister]]\n| before_election    = [[Lee Kuan Yew]]\n| after_election     = [[Lee Kuan Yew]]\n| before_party       = People's Action Party\n| after_party        = People's Action Party\n}}\n{{Politics of Singapore}}\n'''General elections''' were held in [[Singapore]] on 22 December 1984. The result was a victory for the [[People's Action Party]], which won 77 of the 79 seats, marking the first time since [[1963 Singaporean general election|1963]] that at least one opposition candidate was elected to parliament, although the first presence of opposition was in [[1981 Anson by-election|1981]].\n\n==Background==\nIn his 1983 [[National Day Rally]] speech, Prime Minister [[Lee Kuan Yew]] lamented that declining birth rates and large number of graduate women remaining single or not marrying their intellectual equal could see Singapore's talent pool shrink. The PAP government then proceeded to launch the \"[[Population control in Singapore|Graduate Mother Scheme]]\" to entice graduate women with incentives to get married and grant graduate mothers priority in the best schools for their third child.<ref>{{cite news|title=Policies for the bedroom and beyond|url=https://www.todayonline.com/rememberinglky/policies-bedroom-and-beyond |publisher=[[Today (Singapore newspaper)|Today]]|date=23 March 2015|accessdate=7 April 2020}}</ref> The proposal was met with anger by the Singapore public (including many female graduates) and the PAP government drew accusations of elitism. Notably, prominent PAP stalwarts like Deputy Prime Minister [[S. Rajaratnam]] and also ex-minister [[Toh Chin Chye]] expressed opposition to the proposal.<ref>{{cite news|title=Policies for the bedroom and beyond|url=https://www.todayonline.com/rememberinglky/policies-bedroom-and-beyond |publisher=[[Today (Singapore newspaper)|Today]]|date=23 March 2015|accessdate=7 April 2020}}</ref><ref>{{cite web|title=Reproductive Rights|url=https://www.womensaction.sg/article/reproductive |publisher=[[Association of Women for Action and Research|AWARE]]|accessdate=7 April 2020}}</ref>\n\nIn March 1984, Health Minister [[Howe Yoon Chong]] released a controversial proposal to raise the age for the withdrawal of [[Central Provident Fund]] (CPF) savings from 55 to 60 years. At a news conference on 26 March 1984, Howe reasoned that Singaporeans could not depend only on their children in their old age. That suggestion, part of the 54-page report of the Committee on the Problems of the Aged<ref>{{cite book|author=Committee on the Problems of the Aged|title=Problems of the Aged : Report of the Committee on the Problems of the Aged|location=Singapore|publisher=[[Ministry of Health (Singapore)|Ministry of Health]]|year=1984|isbn=9971-88-022-9}}</ref> which he chaired, was eventually dropped. Taking up the suggestions in the report, the [[Singapore Government]] subsequently introduced the Minimum Sum scheme. This allows workers to withdraw some of their CPF funds at age 55, setting aside a certain minimum sum which can only be withdrawn at retirement age, currently at 62 years.<ref name=\"CNA 21 August 07\">{{cite news|title=Former Cabinet Minister Howe Yoon Chong dies at age 84|url=http://www.channelnewsasia.com/stories/singaporelocalnews/view/295214/1/.html|publisher=[[Channel NewsAsia]]|date=21 August 2007|accessdate=21 August 2007}}</ref><ref name=\"Julia Ng 22 August 07\">{{cite news|title=Late Howe Yoon Chong cared deeply for country's development: PM Lee|url=http://www.channelnewsasia.com/stories/singaporelocalnews/view/295462/1/.html|publisher=[[Channel NewsAsia]]|date=22 August 2007|accessdate=23 August 2007}}</ref>\n\nThese controversial proposals sparked debate and uproar in the Singapore electorate and were said to have contributed to a big dip in PAP's support and its share of votes plunged by more than 10% to below 65%, the biggest fall and the lowest for PAP since the [[1963 Singaporean general election|1963 General Election]]. In his memoirs, Lee Kuan Yew recalled that the swing against the PAP was larger than what he expected.\n\n===New candidates/outgoing incumbents===\nMinister of Finance [[Hon Sui Sen]] died during his term on 14 October 1983 and his seat of Havelock was vacated, but no by-election was held on the constituency, and announced to be merged into Delta constituency. [[Tony Tan]] succeeded Hon as the new Finance Minister.\n\nPM Lee's son [[Lee Hsien Loong]] (who went on to become the nation's third (and current) Prime Minister) made his debut in the [[Teck Ghee Single Member Constituency|seat of Teck Ghee]], while PAP stalwarts Dr [[Goh Keng Swee]] and [[Ong Pang Boon]] stepped down. In the only election among several preceding and succeeding ones, the election deposit ($1,500) remained unchanged. The [[Workers' Party of Singapore]] (WP) secretary-general J. B. Jeyaretnam successfully retained the [[Anson Single Member Constituency|Anson]] constituency with an increased majority, while the [[Singapore Democratic Party]] made its first in-road into Parliament with the victory of [[Chiam See Tong]], who would serve the [[Potong Pasir Single Member Constituency]] for the next 26 years until 2011. \n\n===[[Non-Constituency Member of Parliament]] scheme===\nA new [[Non-Constituency Member of Parliament]] scheme was introduced whereby between three and six seats, the exact number which was decided by the President of Singapore, would be offered to unsuccessful opposition candidates with the best scores and who garner at least 15% of the votes if any one party wins all the seats, subtracting one NCMP seat for every one opposition MP elected. Opposition parties dismissed the scheme for misleading voters into thinking that they could have opposition MPs without voting for them. M.P.D. Nair of WP who contested [[Jalan Kayu Single Member Constituency|Jalan Kayu]] was the first to be offered but declined. The offer was then made to [[Singapore United Front]]'s Tan Chee Kien who contested [[Kaki Bukit Single Member Constituency|Kaki Bukit]], who also declined, and no further offers were made.\n\n==Timeline==\n{| class=\"wikitable\"\n|-\n!Date\n!Event\n|-\n|4 December||Dissolution of the 5th Parliament\n|-\n|12 December||Nomination Day\n|-\n|22 December||Polling day\n|-\n|25 February 1985||Opening of 6th Parliament \n|}\n\n==Changes to Constituencies==\nThe newer constituencies are those with rapid developments of Ang Mo Kio, Tampines, Jurong East, Bedok & Jurong West (smaller developments), while other constituencies were dissolved, which was reflected in the table:\n{| class=\"wikitable\"\n|-\n! Constituency || Changes\n|-\n! colspan=\"2\"|New Constituencies\n|-\n| [[Bo Wen Single Member Constituency|Bo Wen]] || Formed from Ang Mo Kio, Kebun Baru & Yio Chu Kang\n|-\n| [[Changkat Single Member Constituency|Changkat]] || Formed from Tampines & Kaki Bukit\n|-\n|[[Eunos Single Member Constituency|Eunos]] || Formed from Kaki Bukit & Tampines\n|-\n|[[Fengshan Single Member Constituency|Fengshan]] || Formed from Bedok, Kampong Chai Chee & Tanah Merah\n|-\n|[[Hong Kah Single Member Constituency|Hong Kah]] || Formed from Boon Lay\n|-\n|[[Teck Ghee Single Member Constituency|Teck Ghee]] || Formed from Ang Mo Kio & Chong Boon\n|-\n|[[Yuhua Single Member Constituency|Yuhua]] || Formed from Boon Lay & Bukit Timah\n|-\n! colspan=\"2\"|Defunct Constituencies\n|-\n| [[Bukit Ho Swee Single Member Constituency|Bukit Ho Swee]] || Absorbed to Tiong Bahru and Kim Seng\n|-\n|[[Havelock Single Member Constituency|Havelock]] || Absorbed to Delta\n|-\n| [[Katong Single Member Constituency|Katong]] || Absorbed to Joo Chiat and Mountbatten\n|}\n\n==New/Outgoing MP==\n{| class=\"wikitable\"\n|-\n! Outgoing MPs !! New MPs\n|-\n| '''Retiring'''\n*[[Abdul Rahim Ishak]] (Siglap)\n*Chan Chee Seng (Jalan Besar)\n*Chau Sik Ting (Thomson)\n*Chiang Hai Deng (Ulu Pandan)\n*[[Chor Yeok Eng]] (Bukit Timah)\n*[[Goh Keng Swee]] (Kreta Ayer)\n*Ho See Beng (Khe Bong)\n*[[Howe Yoon Chong]] (Potong Pasir)\n*Hwang Soo Jin (Jalan Kayu)\n*Joseph Francis (Katong){{ref|1|^}}\n*[[Lee Khoon Choy]] (Braddell Heights)\n*Michael Liew (Boon Teck)\n*Mohammad Kasim Abdul Jabbar (Radin Mas)\n*Mohammad Mansor bin Sukaimi (Kampong Kembangan)\n*P Selvadurai (Kuo Chuan)\n*Rohan Kamis (Telok Blangah)\n*Saidi bin Shariff (Kaki Bukit)\n*Seah Mui Kok (Bukit Ho Swee){{ref|1|^}}\n*Sia Kah Hui (Paya Lebar)\n'''Deceased'''\n*[[Hon Sui Sen]] (Havelock){{ref|1|^}}\n| \n*[[Abdullah Tarmugi]]\n*[[Aline Wong]]\n*Arthur Beng\n*[[Chiam See Tong]]\n*[[Dixie Tan]]\n*Goh Choon Kang\n*Heng Chiang Meng\n*Ho Tat Kin\n*Koh Lam Son\n*[[Lee Boon Yang]]\n*[[Lee Hsien Loong]]\n*Leong Horn Kee\n*Philip Tan\n*S Vasoo\n*Tang Guan Seng\n*Wang Kai Yuen\n*[[Wong Kan Seng]]\n*Yatiman Yusof\n*[[Yeo Cheow Tong]]\n*[[Yu-Foo Yee Shoon]]\n*Zulkifi Mohammad\n|}\n<small>\n{{note|1|Note}}: A caret indicates that the constituency was removed and absorbed to other wards.\n</small>\n\n==Results==\nExcluding the 30 uncontested constituencies, the voter turnout was 95.6%, with 63.2% of the total electorate casting their votes.<ref name=\"NohlenGrotz2001\">{{cite book|author1=Dieter Nohlen|author2=Florian Grotz|author3=Christof Hartmann|title=Elections in Asia and the Pacific : A Data Handbook: Volume II: South East Asia, East Asia, and the South Pacific|url=https://books.google.com/books?id=ceNmuQEACAAJ|date=15 November 2001|publisher=OUP Oxford|isbn=978-0-19-924959-6|page=255}}</ref>\n<!-- tags placed so that election results may be transcluded in other articles -->\n<onlyinclude>{| class=wikitable style=text-align:right\n!Party\n!Candidates\n!Votes\n!%\n!Swing\n!Seats\n!+/\u2013\n|-\n|align=left|[[People's Action Party]]||79||568,310||64.8||-12.9||77||+2\n|-\n|align=left|[[Workers' Party of Singapore|Workers' Party]]||15||110,868||12.6||+6.4||1||+1\n|-\n|align=left|[[Singapore United Front]]||13||87,237||10.0||+5.7||0||0\n|-\n|align=left|[[Singapore Democratic Party]]||4||32,102||3.7||+1.9||1||+1\n|-\n|align=left|United People's Front||8||27,217||3.1||-1.4||0||0\n|-\n|align=left|[[Barisan Sosialis]]||4||24,212||2.8||+0.2||0||0\n|-\n|align=left|[[Singapore Justice Party]]||2||10,906||1.2||+0.4||0||0\n|-\n|align=left|[[Pertubuhan Kebangsaan Melayu Singapura]]||1||4,768||0.5||-1.6||0||0\n|-\n|align=left|Angkatan Islam||1||359||0.0||New||0||New\n|-\n|align=left|Independents||3||10,586||1.2||New||0||New\n|-\n|align=left|Invalid/blank votes||-||26,394||\u2013||\u2013||\u2013||\u2013\n|-\n|align=left|'''Total'''||'''130'''||'''909,980'''||'''100'''||-||'''79'''||'''+4'''\n|-\n|align=left|Registered voters/turnout||-||944,624||95.6||\u2013||\u2013||\u2013\n|-\n|colspan=7 align=left|Source: [http://www.singapore-elections.com/general-election/1984/votes.html Singapore Elections]\n|}</onlyinclude>\n\n==References==\n{{reflist}}\n\n{{Singaporean elections}}\n\n[[Category:1984 elections in Asia]]\n[[Category:Elections in Singapore|General Election 1984]]\n[[Category:1984 in Singapore]]\n", "text_old": "{{Infobox election\n| election_name      = 1984 Singaporean general election\n| country            = Singapore\n| type               = parliamentary\n| ongoing            = no\n| previous_election  = 1980 Singaporean general election\n| previous_year      = 1980\n| next_election      = 1988 Singaporean general election\n| next_year          = 1988\n| election_date      = 22 December 1984\n| turnout            = 95.6%\n| seats_for_election = 79 (Only 49 contested) seats to the [[Parliament of Singapore]]<br />40 seats needed for a majority\n| image1 = [[File:Lee Kuan Yew.jpg|150x150px]]\n| leader1 = [[Lee Kuan Yew]]\n| party1 = People's Action Party\n| leaders_seat1 = [[Tanjong Pagar Single Member Constituency|Tanjong Pagar]]\n| last_election1 = 75 seats, 77.7%\n| seats1 = 77\n| seat_change1 = {{increase}}2\n| popular_vote1 = 568,310\n| percentage1 = 64.8%\n| swing1 = {{decrease}}12.9%\n| colour1 = 0052A1\n| image2 = [[File:JoshuaBenjaminJeyaretnam-Singapore-20051107-cropped.jpg|150x150px]]\n| leader2 = [[Joshua Benjamin Jeyaretnam|J.B. Jeyaretnam]]\n| party2 = Workers' Party of Singapore\n| leaders_seat2 = [[Anson Single Member Constituency|Anson]]\n| last_election2 = 0 seat, 6.2%\n| seats2 = 1\n| seat_change2 = {{increase}}1\n| popular_vote2 = 110,868 \n| percentage2 = 12.6%\n| swing2 = {{increase}}6.4%\n| colour2 = 93B3D4\n| image3 = [[File:ChiamSeeTong-SDARally-20060502.jpg|150x150px]]\n| leader3 = [[Chiam See Tong]]\n| party3 = Singapore Democratic Party\n| leaders_seat3 = [[Potong Pasir Single Member Constituency|Potong Pasir]]\n| last_election3 = 0 seat, 1.8%\n| seats3 = 1\n| seat_change3 = {{increase}}1\n| popular_vote3 = 32,102\n| percentage3 = 3.7% \n| swing3             = {{increase}}1.9%\n| colour3 = FF0000\n| title              = [[Prime Minister of Singapore|Prime Minister]]\n| posttitle          = Elected [[Prime Minister of Singapore|Prime Minister]]\n| before_election    = [[Lee Kuan Yew]]\n| after_election     = [[Lee Kuan Yew]]\n| before_party       = People's Action Party\n| after_party        = People's Action Party\n}}\n{{Politics of Singapore}}\n'''General elections''' were held in [[Singapore]] on 22 December 1984. The result was a victory for the [[People's Action Party]], which won 77 of the 79 seats, marking the first time since [[1963 Singaporean general election|1963]] that at least one opposition candidate was elected to parliament, although the first presence of opposition was in [[1981 Anson by-election|1981]].\n\n==Background==\nIn his 1983 [[National Day Rally]] speech, Prime Minister [[Lee Kuan Yew]] lamented that declining birth rates and large number of graduate women remaining single or not marrying their intellectual equal could see Singapore's talent pool shrink. The PAP government then proceeded to launch the \"[[Population control in Singapore|Graduate Mother Scheme]]\" to entice graduate women with incentives to get married and grant graduate mothers priority in the best schools for their third child.<ref>{{cite news|title=Policies for the bedroom and beyond|url=https://www.todayonline.com/rememberinglky/policies-bedroom-and-beyond |publisher=[[Today (Singapore newspaper)|Today]]|date=23 March 2015|accessdate=7 April 2020}}</ref> The proposal was met with anger by the Singapore public (including many female graduates) and the PAP government drew accusations of elitism. Notably, prominent PAP stalwarts like Deputy Prime Minister [[S. Rajaratnam]] and also ex-minister [[Toh Chin Chye]] expressed opposition to the proposal.<ref>{{cite news|title=Policies for the bedroom and beyond|url=https://www.todayonline.com/rememberinglky/policies-bedroom-and-beyond |publisher=[[Today (Singapore newspaper)|Today]]|date=23 March 2015|accessdate=7 April 2020}}</ref><ref>{{cite web|title=Reproductive Rights|url=https://www.womensaction.sg/article/reproductive |publisher=[[Association of Women for Action and Research|AWARE]]|accessdate=7 April 2020}}</ref>\n\nIn March 1984, Health Minister [[Howe Yoon Chong]] released a controversial proposal to raise the age for the withdrawal of [[Central Provident Fund]] (CPF) savings from 55 to 60 years. At a news conference on 26 March 1984, Howe reasoned that Singaporeans could not depend only on their children in their old age. That suggestion, part of the 54-page report of the Committee on the Problems of the Aged<ref>{{cite book|author=Committee on the Problems of the Aged|title=Problems of the Aged : Report of the Committee on the Problems of the Aged|location=Singapore|publisher=[[Ministry of Health (Singapore)|Ministry of Health]]|year=1984|isbn=9971-88-022-9}}</ref> which he chaired, was eventually dropped. Taking up the suggestions in the report, the [[Singapore Government]] subsequently introduced the Minimum Sum scheme. This allows workers to withdraw some of their CPF funds at age 55, setting aside a certain minimum sum which can only be withdrawn at retirement age, currently at 62 years.<ref name=\"CNA 21 August 07\">{{cite news|title=Former Cabinet Minister Howe Yoon Chong dies at age 84|url=http://www.channelnewsasia.com/stories/singaporelocalnews/view/295214/1/.html|publisher=[[Channel NewsAsia]]|date=21 August 2007|accessdate=21 August 2007}}</ref><ref name=\"Julia Ng 22 August 07\">{{cite news|title=Late Howe Yoon Chong cared deeply for country's development: PM Lee|url=http://www.channelnewsasia.com/stories/singaporelocalnews/view/295462/1/.html|publisher=[[Channel NewsAsia]]|date=22 August 2007|accessdate=23 August 2007}}</ref>\n\nThese controversial proposals sparked debate and uproar in the Singapore electorate and were said to have contributed to a big dip in PAP's support and its share of votes plunged by more than 10% to below 65%, the biggest fall and the lowest for PAP since the [[1963 Singaporean general election|1963 General Election]]. In his memoirs, Lee Kuan Yew recalled that the swing against the PAP was larger than what he expected.\n\n===New candidates/outgoing incumbents===\nMinister of Finance [[Hon Sui Sen]] died during his term on 14 October 1983 and his seat of Havelock was vacated, but no by-election was held on the constituency, and announced to be merged into Delta constituency. [[Tony Tan]] succeeded Hon as the new Finance Minister.\n\nPM Lee's son [[Lee Hsien Loong]] (who went on to become the nation's third (and current) Prime Minister) made his debut in the [[Teck Ghee Single Member Constituency|seat of Teck Ghee]], while PAP stalwarts Dr [[Goh Keng Swee]] and [[Ong Pang Boon]] stepped down. In the only election among several preceding and succeeding ones, the election deposit ($1,500) remained unchanged. The [[Workers' Party of Singapore]] (WP) secretary-general J. B. Jeyaretnam successfully retained the [[Anson Single Member Constituency|Anson]] constituency with an increased majority, while the [[Singapore Democratic Party]] made its first in-road into Parliament with the victory of [[Chiam See Tong]], who would serve the [[Potong Pasir Single Member Constituency]] for the next 26 years until 2011. \n\n===[[Non-Constituency Member of Parliament]] scheme===\nA new [[Non-Constituency Member of Parliament]] scheme was introduced whereby between three and six seats, the exact number which was decided by the President of Singapore, would be offered to unsuccessful opposition candidates with the best scores and who garner at least 15% of the votes if any one party wins all the seats, subtracting one NCMP seat for every one opposition MP elected. Opposition parties dismissed the scheme for misleading voters into thinking that they could have opposition MPs without voting for them. M.P.D. Nair of WP who contested [[Jalan Kayu Single Member Constituency|Jalan Kayu]] was the first to be offered but declined. The offer was then made to [[Singapore United Front]]'s Tan Chee Kien who contested [[Kaki Bukit Single Member Constituency|Kaki Bukit]], who also declined, and no further offers were made.\n\n==Timeline==\n{| class=\"wikitable\"\n|-\n!Date\n!Event\n|-\n|4 December||Dissolution of the 5th Parliament\n|-\n|12 December||Nomination Day\n|-\n|22 December||Polling day\n|-\n|25 February 1985||Opening of 6th Parliament \n|}\n\n==Changes to Constituencies==\nThe newer constituencies are those with rapid developments of Ang Mo Kio, Tampines, Jurong East, Bedok & Jurong West (smaller developments), while other constituencies were dissolved, which was reflected in the table:\n{| class=\"wikitable\"\n|-\n! Constituency || Changes\n|-\n! colspan=\"2\"|New Constituencies\n|-\n| [[Bo Wen Single Member Constituency|Bo Wen]] || Formed from Ang Mo Kio, Kebun Baru & Yio Chu Kang\n|-\n| [[Changkat Single Member Constituency|Changkat]] || Formed from Tampines & Kaki Bukit\n|-\n|[[Eunos Single Member Constituency|Eunos]] || Formed fromf Kaki Bukit & Tampines\n|-\n|[[Fengshan Single Member Constituency|Fengshan]] || Formed from Bedok, Kampong Chai Chee & Tanah Merah\n|-\n|[[Hong Kah Single Member Constituency|Hong Kah]] || Formed from Boon Lay\n|-\n|[[Teck Ghee Single Member Constituency|Teck Ghee]] || Formed from Ang Mo Kio & Chong Boon\n|-\n|[[Yuhua Single Member Constituency|Yuhua]] || Formed from Boon Lay & Bukit Timah\n|-\n! colspan=\"2\"|Defunct Constituencies\n|-\n| [[Bukit Ho Swee Single Member Constituency|Bukit Ho Swee]] || Absorbed to Tiong Bahru and Kim Seng\n|-\n|[[Havelock Single Member Constituency|Havelock]] || Absorbed to Delta\n|-\n| [[Katong Single Member Constituency|Katong]] || Absorbed to Joo Chiat and Mountbatten\n|}\n\n==New/Outgoing MP==\n{| class=\"wikitable\"\n|-\n! Outgoing MPs !! New MPs\n|-\n| '''Retiring'''\n*[[Abdul Rahim Ishak]] (Siglap)\n*Chan Chee Seng (Jalan Besar)\n*Chau Sik Ting (Thomson)\n*Chiang Hai Deng (Ulu Pandan)\n*[[Chor Yeok Eng]] (Bukit Timah)\n*[[Goh Keng Swee]] (Kreta Ayer)\n*Ho See Beng (Khe Bong)\n*[[Howe Yoon Chong]] (Potong Pasir)\n*Hwang Soo Jin (Jalan Kayu)\n*Joseph Francis (Katong){{ref|1|^}}\n*[[Lee Khoon Choy]] (Braddell Heights)\n*Michael Liew (Boon Teck)\n*Mohammad Kasim Abdul Jabbar (Radin Mas)\n*Mohammad Mansor bin Sukaimi (Kampong Kembangan)\n*P Selvadurai (Kuo Chuan)\n*Rohan Kamis (Telok Blangah)\n*Saidi bin Shariff (Kaki Bukit)\n*Seah Mui Kok (Bukit Ho Swee){{ref|1|^}}\n*Sia Kah Hui (Paya Lebar)\n'''Deceased'''\n*[[Hon Sui Sen]] (Havelock){{ref|1|^}}\n| \n*[[Abdullah Tarmugi]]\n*[[Aline Wong]]\n*Arthur Beng\n*[[Chiam See Tong]]\n*[[Dixie Tan]]\n*Goh Choon Kang\n*Heng Chiang Meng\n*Ho Tat Kin\n*Koh Lam Son\n*[[Lee Boon Yang]]\n*[[Lee Hsien Loong]]\n*Leong Horn Kee\n*Philip Tan\n*S Vasoo\n*Tang Guan Seng\n*Wang Kai Yuen\n*[[Wong Kan Seng]]\n*Yatiman Yusof\n*[[Yeo Cheow Tong]]\n*[[Yu-Foo Yee Shoon]]\n*Zulkifi Mohammad\n|}\n<small>\n{{note|1|Note}}: A caret indicates that the constituency was removed and absorbed to other wards.\n</small>\n\n==Results==\nExcluding the 30 uncontested constituencies, the voter turnout was 95.6%, with 63.2% of the total electorate casting their votes.<ref name=\"NohlenGrotz2001\">{{cite book|author1=Dieter Nohlen|author2=Florian Grotz|author3=Christof Hartmann|title=Elections in Asia and the Pacific : A Data Handbook: Volume II: South East Asia, East Asia, and the South Pacific|url=https://books.google.com/books?id=ceNmuQEACAAJ|date=15 November 2001|publisher=OUP Oxford|isbn=978-0-19-924959-6|page=255}}</ref>\n<!-- tags placed so that election results may be transcluded in other articles -->\n<onlyinclude>{| class=wikitable style=text-align:right\n!Party\n!Candidates\n!Votes\n!%\n!Swing\n!Seats\n!+/\u2013\n|-\n|align=left|[[People's Action Party]]||79||568,310||64.8||-12.9||77||+2\n|-\n|align=left|[[Workers' Party of Singapore|Workers' Party]]||15||110,868||12.6||+6.4||1||+1\n|-\n|align=left|[[Singapore United Front]]||13||87,237||10.0||+5.7||0||0\n|-\n|align=left|[[Singapore Democratic Party]]||4||32,102||3.7||+1.9||1||+1\n|-\n|align=left|United People's Front||8||27,217||3.1||-1.4||0||0\n|-\n|align=left|[[Barisan Sosialis]]||4||24,212||2.8||+0.2||0||0\n|-\n|align=left|[[Singapore Justice Party]]||2||10,906||1.2||+0.4||0||0\n|-\n|align=left|[[Pertubuhan Kebangsaan Melayu Singapura]]||1||4,768||0.5||-1.6||0||0\n|-\n|align=left|Angkatan Islam||1||359||0.0||New||0||New\n|-\n|align=left|Independents||3||10,586||1.2||New||0||New\n|-\n|align=left|Invalid/blank votes||-||26,394||\u2013||\u2013||\u2013||\u2013\n|-\n|align=left|'''Total'''||'''130'''||'''909,980'''||'''100'''||-||'''79'''||'''+4'''\n|-\n|align=left|Registered voters/turnout||-||944,624||95.6||\u2013||\u2013||\u2013\n|-\n|colspan=7 align=left|Source: [http://www.singapore-elections.com/general-election/1984/votes.html Singapore Elections]\n|}</onlyinclude>\n\n==References==\n{{reflist}}\n\n{{Singaporean elections}}\n\n[[Category:1984 elections in Asia]]\n[[Category:Elections in Singapore|General Election 1984]]\n[[Category:1984 in Singapore]]\n", "name_user": "ShyestAnt", "label": "safe", "comment": "Spelling error", "url_page": "//en.wikipedia.org/wiki/1984_Singaporean_general_election"}
{"title_page": "Nora Illi", "text_new": "{{Use British English Oxford spelling|date=April 2020}}\n{{short description|Swiss Muslim activist}}\n{{Infobox person\n|image = Nora Illi.jpg\n|image_size = 220px\n|caption = \n|name = Nora Illi\n|birth_name = Nora G\u00f6gel\n|birth_date = {{Birth date|1984|04|03|df=yes}}\n|birth_place = [[Uster]], Switzerland\n|death_date = {{death date and age|df=y|2020|03|23|1984|04|03}}\n|death_place = [[Bremgarten bei Bern]], Switzerland<ref name=\":0\">{{cite web|title=Ber\u00fchmteste Burkatr\u00e4gerin der Schweiz, Nora Illi, im Alter von 35 Jahren gestorben|periodical=|publisher=|url=https://www.watson.ch/!471126834|url-status=|format=|access-date=|archive-url=|archive-date=|last=|date=|year=|language=de|pages=|quote=}}</ref>\n|main_interests = Islamic Preaching, [[Dawah]]\n| spouse = {{marriage |Qaasim Illi |July 2003}}\n|notable_ideas =\n|influences =\n|influenced =\n|signature =\n|website =\n}}\n\n'''Nora Illi''' (3 April 1984 \u2013 23 March 2020) was a Swiss convert to Islam and Islamic [[preacher]].<ref>{{Cite web |url=https://www.swissinfo.ch/eng/nora-illi_controversial-swiss-convert-to-islam-dies-aged-35/45640088 |title = Controversial Swiss convert to Islam dies aged 35}}</ref> She was chairwoman of the Islamic Central Council of Switzerland (ICCS). She took part in several T.V. talk shows and caused heated discussions with her intellectual and political views.\n\n==Early life==\nShe was born as Nora G\u00f6gel on 3 April 1984 in Uster, [[Canton of Z\u00fcrich]].<ref name=\"SAS\">{{cite web|title=Hinter dem Schleier|periodical=[[Schweiz am Sonntag]]|publisher=|url=http://www.schweizamsonntag.ch/ressort/aktuell/1708/|url-status=|format=|access-date=2016-11-08|archive-url=|archive-date=|last=Katia Murmann|date=2011-06-25|language=|pages=|quote=}}</ref><ref name=\"NY\" /> Her father was a well-known Swiss psychotherapist of German origins and her mother was a Swiss social worker.<ref name=\"SAS\" /> They had a divorce years later. Illi was [[baptized]] Catholic upon her own request. As a teen, she promoted individual freedom and anti-establishment views, and at the age of 18, Illi converted to Islam. \nIlli travelled to Dubai, and over there she experienced an [[Epiphany (feeling)|epiphany]] and became enlightened about Islam after she heard the Islamic Call to Prayer ([[Adhan]]). Upon returning to Switzerland, she converted to [[Islam]]. Two weeks later, her husband, Qaasim Illi (he was only her boyfriend then), also became an Islamic convert. Both were active members of the [[Islamic Central Council of Switzerland]] (ICCS).<ref>{{cite web|title=Vorstand IZRS|periodical=|publisher=izrs.ch|url=http://www.izrs.ch/vorstand.html|url-status=|access-date=2016-11-08|archive-url=|archive-date=|last=|date=|year=|language=|pages=|quote=}}</ref> By the age of twenty, Nora Illi wore the [[Niqab]] (face veil) in public. She continued her education in her home town until she was awarded a PhD in [[theology]] from the [[University of Zurich]]. \nIlli chaired the Department of Women Affairs at the Islamic Central Council of Switzerland (ICCS). After converting to Islam, she became an Islamic preacher. In a T.V. interview on the talk show of Anne Will in November 2016, Illi said \"I used to have prejudices against Muslims; I also used to think that Muslim women are all oppressed. However, I discovered that Islam treats women as pearls.\" She added that she came to the conclusion that there are some wrong issues and beliefs which stem from different cultures that have been attributed to Islam but have nothing to do with it in reality. \nIlli confirmed that because of Islam, she started to have self-assertion as a woman, adding that being a Muslim woman, she was never treated as a commodity. She stressed the fact that before she started to wear the face veil, men used to treat her as a commodity and they were attracted only to her body. \nIlli was hosted by several T .V. shows where she voiced several intellectual and political views for both the German and Swiss media. In November 2016, Illi's appearance on the best-known T.V. show of Anne Will caused a lot of controversy and uproar about whether radical opinions should be represented on a T.V. show. Some quotes by Illi were shown during the interview and were interpreted as propaganda for the radical views of the terrorist militia of the [[Islamic State of Iraq and the Levant|Islamic State]].<ref name=\"nzz161108\"/><ref name=\"nzz161107\"/> Several lawsuits were filed against her as a result of that discussion, but the Hamburg Public Prosecutor office suspended all preliminary investigations in February, 2017.<ref name=\"nzz161108\">Marcel Gyr: ''[http://www.nzz.ch/schweiz/verschleierte-nora-illi-bei-anne-will-bundesanwaltschaft-ist-irritiert-ld.127075 Verschleierte Nora Illi bei \u00abAnne Will\u00bb: Bundesanwaltschaft ist irritiert] \u2013 Der Auftritt der verschleierten Nora Illi am Sonntagabend im \u00f6ffentlichrechtlichen Fernsehen in Deutschland l\u00f6st auch bei der schweizerischen Bundesanwaltschaft Irritationen aus'', [[NZZ]] 8.11.16</ref><ref name=\"nzz161107\">Reiner Stadler: ''[http://www.nzz.ch/schweiz/aktuelle-themen/nora-illi-bei-anne-will-islamistischer-mummenschanz-und-mediale-helfer-ld.126837 Nora Illi bei \u00abAnne Will\u00bb: Islamistischer Mummenschanz und mediale Helfer] \u2013 Eine Schweizerin mit Burka enerviert die deutsche Medienarena. Sind Redaktionen nicht lernf\u00e4hig?'', [[NZZ]] 7.11.16</ref><ref>{{Cite web |url=https://www.spiegel.de/kultur/tv/anne-will-gast-nora-illi-die-menschenfaengerin-a-1120108.html |title = \"Anne Will\"-Gast Nora Illi im Nikab: Die Menschenf\u00e4ngerin in der Talkshow - DER SPIEGEL - Kultur}}</ref>\n\nHaving appeared on T.V. and in public events inside and outside Switzerland with a face veil on, Illi caused a lot of uproar. She was harassed and insulted on a daily basis because of her black face veil. \nIlli was an advocate of [[polygamy]], the practice of having multiple wives, but she rejected [[polyandry]], having multiple husbands. She was married to the [[computer scientist]], Qaasim Illi, who also worked for the Islamic Central Council of Switzerland. They had six children.<ref>{{cite web|title=Warum Islam? Drei Konvertitinnen erz\u00e4hlen|periodical=|publisher=[[Swissinfo]]|url=http://www.swissinfo.ch/ger/religion-und-gender_warum-islam--drei-konvertitinnen-erzaehlen/42184786|url-status=|format=|access-date=2016-11-08|archive-url=|archive-date=|last=Sibilla Bondolfi|date=2016-06-30|language=|pages=|quote=}}</ref>\n\n==Death==\nNora Illi died on 23 March 2020 at the age of 35 at one of Bern's hospitals after a long-term suffering with [[breast cancer]].<ref>{{cite web|title=IZRS: Nora Illi ist im Alter von 35 Jahren verstorben|periodical=Izrs.ch|publisher=|url=http://www.izrs.ch/nora-illi-ist-im-alter-von-35-jahren-verstorben.html|url-status=|access-date=|archive-url=|archive-date=|last=|date=24 March 2020|language=de|pages=|quote=}}</ref><ref name=\"NY\">{{Cite news |url=https://www.nytimes.com/2020/04/16/world/europe/nora-illi-dead.html |title = Nora Illi, Swiss Muslim Convert Who Sparked Controversy, Dies at 35|newspaper = The New York Times|date = 16 April 2020|last1 = Eddy|first1 = Melissa}}</ref>\n\n==References==\n{{Reflist}}\n\n==External links==\n* {{Twitter|NoraIlli}}\n* {{IMDb name|nm7508677}}\n\n{{DEFAULTSORT:Illi, Nora}}\n[[Category:Swiss Muslims]]\n[[Category:Converts to Islam from Catholicism]]\n[[Category:1984 births]]\n[[Category:2020 deaths]]\n[[Category:Swiss Muslim activists]]\n[[Category:Deaths from breast cancer]]\n", "text_old": "{{short description|Swiss Muslim activist}}\n{{Infobox person\n|image = Nora Illi.jpg\n|image_size = 220px\n|caption = \n|name = Nora Illi\n|birth_name = Nora G\u00f6gel\n|birth_date = {{Birth date|1984|04|03|df=yes}}\n|birth_place = [[Uster]], Switzerland\n|death_date = {{death date and age|df=y|2020|03|23|1984|04|03}}\n|death_place = [[Bremgarten bei Bern]], Switzerland<ref name=\":0\">{{cite web|title=Ber\u00fchmteste Burkatr\u00e4gerin der Schweiz, Nora Illi, im Alter von 35 Jahren gestorben|periodical=|publisher=|url=https://www.watson.ch/!471126834|url-status=|format=|access-date=|archive-url=|archive-date=|last=|date=|year=|language=de|pages=|quote=}}</ref>\n|main_interests = Islamic Preaching, [[Dawah]]\n| spouse = {{marriage |Qaasim Illi |July 2003}}\n|notable_ideas =\n|influences =\n|influenced =\n|signature =\n|website =\n}}\n\n'''Nora Illi''' (3 April 1984 \u2013 23 March 2020) was a Swiss convert to Islam and Islamic [[preacher]].<ref>{{Cite web | url=https://www.swissinfo.ch/eng/nora-illi_controversial-swiss-convert-to-islam-dies-aged-35/45640088 |title = Controversial Swiss convert to Islam dies aged 35}}</ref> She was chairwoman of the Islamic Central Council of Switzerland (ICCS). She took part in several T.V. talk shows and caused heated discussions with her intellectual and political views.\n\n==Early life==\nShe was born as Nora G\u00f6gel on 3 April 1984 in Uster, [[Canton of Z\u00fcrich]].<ref name=\"SAS\">{{cite web|title=Hinter dem Schleier|periodical=[[Schweiz am Sonntag]]|publisher=|url=http://www.schweizamsonntag.ch/ressort/aktuell/1708/|url-status=|format=|access-date=2016-11-08|archive-url=|archive-date=|last=Katia Murmann|date=2011-06-25|language=|pages=|quote=}}</ref><ref name=\"NY\" /> Her father was a well-known Swiss psychotherapist of German origins and her mother was a Swiss social worker.<ref name=\"SAS\" /> They had a divorce years later. Illi was [[baptized]] Catholic upon her own request. As a teen, she promoted individual freedom and anti-establishment views, and at the age of 18, Illi converted to Islam. \nIlli travelled to Dubai, and over there she experienced an [[Epiphany (feeling)|epiphany]] and became enlightened about Islam after she heard the Islamic Call to Prayer ([[Adhan]]). Upon returning to Switzerland, she converted to [[Islam]]. Two weeks later, her husband, Qaasim Illi (he was only her boyfriend then), also became an Islamic convert. Both were active members of the [[Islamic Central Council of Switzerland]] (ICCS).<ref>{{cite web|title=Vorstand IZRS|periodical=|publisher=izrs.ch|url=http://www.izrs.ch/vorstand.html|url-status=|access-date=2016-11-08|archive-url=|archive-date=|last=|date=|year=|language=|pages=|quote=}}</ref> By the age of twenty, Nora Illi wore the [[Niqab]] (face veil) in public. She continued her education in her home town until she was awarded a Ph.D. in [[theology]] from the [[University of Zurich]]. \nIlli chaired the Department of Women Affairs at the Islamic Central Council of Switzerland (ICCS). After converting to Islam, she became an Islamic preacher. In a T.V. interview on the talk show of Anne Will in November 2016, Illi said \"I used to have prejudices against Muslims; I also used to think that Muslim women are all oppressed. However, I discovered that Islam treats women as pearls.\" She added that she came to the conclusion that there are some wrong issues and beliefs which stem from different cultures that have been attributed to Islam but have nothing to do with it in reality. \nIlli confirmed that because of Islam, she started to have self-assertion as a woman, adding that being a Muslim woman, she was never treated as a commodity. She stressed the fact that before she started to wear the face veil, men used to treat her as a commodity and they were attracted only to her body. \nIlli was hosted by several T .V. shows where she voiced several intellectual and political views for both the German and Swiss media. In November 2016, Illi's appearance on the best-known T.V. show of Anne Will caused a lot of controversy and uproar about whether radical opinions should be represented on a T.V. show. Some quotes by Illi were shown during the interview and were interpreted as propaganda for the radical views of the terrorist militia of the [[Islamic State of Iraq and the Levant|Islamic State]].<ref name=\"nzz161108\"/><ref name=\"nzz161107\"/> Several lawsuits were filed against her as a result of that discussion, but the Hamburg Public Prosecutor office suspended all preliminary investigations in February, 2017.<ref name=\"nzz161108\">Marcel Gyr: ''[http://www.nzz.ch/schweiz/verschleierte-nora-illi-bei-anne-will-bundesanwaltschaft-ist-irritiert-ld.127075 Verschleierte Nora Illi bei \u00abAnne Will\u00bb: Bundesanwaltschaft ist irritiert] \u2013 Der Auftritt der verschleierten Nora Illi am Sonntagabend im \u00f6ffentlichrechtlichen Fernsehen in Deutschland l\u00f6st auch bei der schweizerischen Bundesanwaltschaft Irritationen aus'', [[NZZ]] 8.11.16</ref><ref name=\"nzz161107\">Reiner Stadler: ''[http://www.nzz.ch/schweiz/aktuelle-themen/nora-illi-bei-anne-will-islamistischer-mummenschanz-und-mediale-helfer-ld.126837 Nora Illi bei \u00abAnne Will\u00bb: Islamistischer Mummenschanz und mediale Helfer] \u2013 Eine Schweizerin mit Burka enerviert die deutsche Medienarena. Sind Redaktionen nicht lernf\u00e4hig?'', [[NZZ]] 7.11.16</ref><ref>{{Cite web |url=https://www.spiegel.de/kultur/tv/anne-will-gast-nora-illi-die-menschenfaengerin-a-1120108.html |title = \"Anne Will\"-Gast Nora Illi im Nikab: Die Menschenf\u00e4ngerin in der Talkshow - DER SPIEGEL - Kultur}}</ref>\n\nHaving appeared on T.V. and in public events inside and outside Switzerland with a face veil on, Illi caused a lot of uproar. She was harassed and insulted on a daily basis because of her black face veil. \nIlli was an advocate of [[polygamy]], the practice of having multiple wives, but she rejected [[polyandry]], having multiple husbands. She was married to the [[computer scientist]], Qaasim Illi, who also worked for the Islamic Central Council of Switzerland. They had six children.<ref>{{cite web|title=Warum Islam? Drei Konvertitinnen erz\u00e4hlen|periodical=|publisher=[[Swissinfo]]|url=http://www.swissinfo.ch/ger/religion-und-gender_warum-islam--drei-konvertitinnen-erzaehlen/42184786|url-status=|format=|access-date=2016-11-08|archive-url=|archive-date=|last=Sibilla Bondolfi|date=2016-06-30|language=|pages=|quote=}}</ref>\n\n==Death==\nNora Illi died on 23 March 2020 at the age of 35 at one of Bern's hospitals after a long-term suffering with [[breast cancer]].<ref>{{cite web|title=IZRS: Nora Illi ist im Alter von 35 Jahren verstorben|periodical=Izrs.ch|publisher=|url=http://www.izrs.ch/nora-illi-ist-im-alter-von-35-jahren-verstorben.html|url-status=|access-date=|archive-url=|archive-date=|last=|date=24 March 2020|language=de|pages=|quote=}}</ref><ref name=\"NY\">{{Cite news | url=https://www.nytimes.com/2020/04/16/world/europe/nora-illi-dead.html |title = Nora Illi, Swiss Muslim Convert Who Sparked Controversy, Dies at 35|newspaper = The New York Times|date = 16 April 2020|last1 = Eddy|first1 = Melissa}}</ref>\n\n==References==\n{{Reflist}}\n\n==External links==\n* {{Twitter|NoraIlli}}\n* {{IMDb name|nm7508677}}\n\n{{DEFAULTSORT:Illi, Nora}}\n[[Category:Swiss Muslims]]\n[[Category:Converts to Islam from Catholicism]]\n[[Category:1984 births]]\n[[Category:2020 deaths]]\n[[Category:Swiss Muslim activists]]\n[[Category:Deaths from breast cancer]]\n", "name_user": "Hammad", "label": "safe", "comment": "fixed", "url_page": "//en.wikipedia.org/wiki/Nora_Illi"}
{"title_page": "List of International Space Station expeditions", "text_new": "{{short description|Wikipedia list article}}\n{{lead rewrite|date=August 2019}}\nThis is a chronological '''list of expeditions to the [[International Space Station]] (ISS)'''. All permanent ISS crews are named {{nowrap|\"Expedition ''n''\"}}, where ''n'' is sequentially increased with each expedition. Resupply mission crews and [[space tourist]]s are excluded (see [[List of human spaceflights to the ISS]] for details). ISS commanders are listed in ''italics''. \"Duration\" refers to the crew and does not always correspond to \"Flight up\" or \"Flight down\".\n\n==Completed expeditions==\n{| class=\"wikitable\"\n|- style=\"background-color: #efefef\" valign=\"top\"\n!Expedition\n!Patch\n!Crew\n!Launch date\n!Flight up\n!Landing date\n!Flight down\n!Duration<br><small>(days)</small>\n|-\n![[Expedition 1]]\n|[[Image:Expedition 1 insignia.svg|50px]]\n|{{flagicon|USA}} ''[[William M. Shepherd]]''<br>{{flagicon|RUS}} [[Sergei Krikalev]]<br>{{flagicon|RUS}} [[Yuri Gidzenko]]\n|October 31, 2000<br>07:52 UTC\n|[[Soyuz TM-31]]\n|March 21, 2001<br>07:33 UTC\n|[[STS-102]]\n|style=\"text-align: right\"|140.98\n|-\n![[Expedition 2]]\n|[[Image:Expedition 2 insignia.svg|50px]]\n|{{flagicon|RUS}} ''[[Yuri Usachev]]''<br>{{flagicon|USA}} [[James S. Voss]]<br>{{flagicon|USA}} [[Susan J. Helms]]\n|March 8, 2001<br>11:42 UTC\n|[[STS-102]]\n|August 22, 2001<br>19:24 UTC\n|[[STS-105]]\n|style=\"text-align: right\"|167.28\n|-\n![[Expedition 3]]\n|[[Image:Iss expedition 3 mission patch.svg|50px]]\n|{{flagicon|USA}} ''[[Frank L. Culbertson]]''<br>{{flagicon|RUS}} [[Mikhail Tyurin]]<br>{{flagicon|RUS}} [[Vladimir Dezhurov]]\n|August 10, 2001<br>21:10 UTC\n|[[STS-105]]\n|December 17, 2001<br>17:56 UTC\n|[[STS-108]]\n|style=\"text-align: right\"|128.86\n|-\n![[Expedition 4]]\n|[[Image:Expedition 4 insignia.svg|50px]]\n|{{flagicon|RUS}} ''[[Yury Onufrienko]]''<br>{{flagicon|USA}} [[Carl E. Walz]]<br>{{flagicon|USA}} [[Daniel W. Bursch]]\n|December 5, 2001<br>22:19 UTC\n|[[STS-108]]\n|June 19, 2002<br>09:57 UTC\n|[[STS-111]]\n|style=\"text-align: right\"|195.82\n|-\n![[Expedition 5]]\n|[[Image:Expedition 5 insignia.svg|50px]]\n|{{flagicon|RUS}} ''[[Valery Korzun]]''<br>{{flagicon|RUS}} [[Sergei Treshchev]]<br>{{flagicon|USA}} [[Peggy Whitson]]\n|June 5, 2002<br>21:22 UTC\n|[[STS-111]]\n|December 7, 2002<br>19:37 UTC\n|[[STS-113]]\n|style=\"text-align: right\"|184.93\n|-\n![[Expedition 6]]\n|[[Image:Expedition 6 insignia.svg|50px]]\n|{{flagicon|USA}} ''[[Kenneth D. Bowersox]]''<br>{{flagicon|USA}} [[Donald R. Pettit]]<br>{{flagicon|RUS}} [[Nikolai Budarin]]\n|November 24, 2002<br>00:49 UTC\n|[[STS-113]]\n|May 4, 2003<br>02:04 UTC\n|[[Soyuz TMA-1]]\n|style=\"text-align: right\"|161.05\n|-\n![[Expedition 7]]\n|[[Image:Expedition 7 insignia.svg|50px]]\n|{{flagicon|RUS}} ''[[Yuri Malenchenko]]''<br>{{flagicon|USA}} [[Edward T. Lu]]\n|April 26, 2003<br>03:53 UTC\n|[[Soyuz TMA-2]]\n|October 28, 2003<br>02:40 UTC\n|[[Soyuz TMA-2]]\n|style=\"text-align: right\"|184.93\n|-\n![[Expedition 8]]\n|[[Image:Expedition 8 insignia.svg|50px]]\n|{{flagicon|USA}} ''[[C. Michael Foale]]''<br>{{flagicon|RUS}} [[Alexander Kaleri]]\n|October 18, 2003<br>05:38 UTC\n|[[Soyuz TMA-3]]\n|April 30, 2004<br>00:11 UTC\n|[[Soyuz TMA-3]]\n|style=\"text-align: right\"|194.77\n|-\n![[Expedition 9]]\n|[[Image:Expedition 9 insignia.svg|50px]]\n|{{flagicon|RUS}} ''[[Gennady Padalka]]''<br>{{flagicon|USA}} [[Michael Fincke|E. Michael Fincke]]\n|April 19, 2004<br>03:19 UTC\n|[[Soyuz TMA-4]]\n|October 24, 2004<br>00:32 UTC\n|[[Soyuz TMA-4]]\n|style=\"text-align: right\"|185.66\n|-\n![[Expedition 10]]\n|[[Image:ISS Expedition 10 patch.svg|50px]]\n|{{flagicon|USA}} ''[[Leroy Chiao]]''<br>{{flagicon|RUS}} [[Salizhan Sharipov]]\n|October 14, 2004<br> 03:06 UTC\n|[[Soyuz TMA-5]]\n|April 24, 2005<br>22:08 UTC\n|[[Soyuz TMA-5]]\n|style=\"text-align: right\"|192.79\n|-\n![[Expedition 11]]\n|[[Image:Expedition 11 insignia.svg|50px]]\n|{{flagicon|RUS}} ''[[Sergei Krikalev]]''<br>{{flagicon|USA}} [[John L. Phillips]]\n|April 15, 2005<br> 00:46 UTC\n|[[Soyuz TMA-6]]<br>\n|October 11, 2005 <br> 01:09 UTC\n|[[Soyuz TMA-6]]\n|style=\"text-align: right\"|179.02\n|-\n![[Expedition 12]]\n|[[Image:ISS Expedition 12 patch.svg|50px]]\n|{{flagicon|USA}} ''[[William S. McArthur]]''<br>{{flagicon|RUS}} [[Valeri Tokarev]]\n|October 1, 2005<br> 03:54 UTC\n|[[Soyuz TMA-7]]<br>\n|April 8, 2006 <br> 23:48 UTC\n|[[Soyuz TMA-7]]\n|style=\"text-align: right\"|189.01\n|-\n!rowspan=\"2\"|[[Expedition 13]]\n|rowspan=\"2\"|[[Image:ISS Expedition 13 Patch with Reiter.svg|50px]]\n|{{flagicon|RUS}} ''[[Pavel Vinogradov]]''<br>{{flagicon|USA}} [[Jeffrey N. Williams]]\n|March 30, 2006<br> 02:30 UTC\n|[[Soyuz TMA-8]]\n|{{nowrap|September 28, 2006}}<br> 01:13 UTC\n|[[Soyuz TMA-8]]\n|style=\"text-align: right\"|182.65\n|-\n|{{flagicon|GER}} [[Thomas Reiter]]\n|July 4, 2006 <br>18:38 UTC\n|[[STS-121]]\n|colspan=\"3\"|Transferred to Expedition 14\n|-\n!rowspan=\"3\"|{{nowrap|[[Expedition 14]]}}\n|rowspan=\"3\"|[[Image:ISS Expedition 14 patch.svg|50px]]\n|{{nowrap|{{flagicon|USA}} ''[[Michael E. Lopez-Alegria]]''}}<br>{{flagicon|RUS}} [[Mikhail Tyurin]]\n|{{nowrap|September 18, 2006}}<br> 04:09 UTC\n|[[Soyuz TMA-9]]\n|April 21, 2007<br>12:31 UTC\n|[[Soyuz TMA-9]]\n|style=\"text-align: right\"|215.35\n|-\n|{{flagicon|GER}} [[Thomas Reiter]]\n|colspan=\"2\"|Transferred from Expedition 13\n|December 21, 2006<br> 22:32 UTC\n|[[STS-116]]\n|style=\"text-align: right\"|171.16\n|-\n|{{flagicon|USA}} [[Sunita L. Williams]]\n|December 10, 2006<br>01:47 UTC\n|[[STS-116]]\n|colspan=\"3\"|Transferred to Expedition 15\n|-\n!rowspan=\"3\"|[[Expedition 15]]\n|rowspan=\"3\"|[[Image:ISS Expedition 15 patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Fyodor Yurchikhin]]''<br>{{flagicon|RUS}} [[Oleg Kotov]]<br>\n|April 7, 2007<br>17:31 UTC\n|{{nowrap|[[Soyuz TMA-10]]}}\n|October 21, 2007<br>10:36 UTC\n|{{nowrap|[[Soyuz TMA-10]]}}\n|style=\"text-align: right\"|196.71\n|-\n|{{flagicon|USA}} [[Sunita L. Williams]]\n|colspan=\"2\"|Transferred from Expedition 14\n|June 22, 2007<br>19:49 UTC\n|[[STS-117]]\n|style=\"text-align: right\"|194.75\n|-\n|{{flagicon|USA}} [[Clayton Anderson|Clayton C. Anderson]]\n|June 8, 2007<br>23:38 UTC\n|[[STS-117]]\n|colspan=\"3\"|Transferred to Expedition 16\n|-\n!rowspan=\"5\"|[[Expedition 16]]\n|rowspan=\"5\"|[[Image:ISS Expedition 16 patch.svg|50px]]\n|{{flagicon|USA}} ''[[Peggy Whitson]]''<br>{{flagicon|RUS}} [[Yuri Malenchenko]]\n|October 10, 2007<br>13:22 UTC\n|[[Soyuz TMA-11]]\n|April 19, 2008<br>08:30 UTC\n|[[Soyuz TMA-11]]\n|style=\"text-align: right\"|191.80\n|-\n|{{flagicon|USA}} [[Clayton Anderson|Clayton C. Anderson]]\n|colspan=\"2\"|Transferred from Expedition 15\n|November 7, 2007<br>18:01 UTC\n|[[STS-120]]\n|style=\"text-align: right\"|151.77\n|-\n|{{flagicon|USA}} [[Daniel M. Tani]]\n|October 23, 2007<br>15:38 UTC\n|[[STS-120]]\n|February 20, 2008<br>14:07 UTC\n|[[STS-122]]\n|style=\"text-align: right\"|119.94\n|-\n|{{flagicon|FRA}} [[L\u00e9opold Eyharts]]\n|February 7, 2008<br>19:45 UTC\n|[[STS-122]]\n|March 27, 2008<br>06:28 UTC\n|[[STS-123]]\n|style=\"text-align: right\"|48.55\n|-\n|{{flagicon|USA}} [[Garrett Reisman|Garrett E. Reisman]]\n|March 11, 2008<br>06:28 UTC\n|[[STS-123]]\n|colspan=\"3\"|Transferred to Expedition 17\n|-\n!rowspan=\"3\"|[[Expedition 17]]\n|rowspan=\"3\"|[[Image:ISS Expedition 17 patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Sergey Aleksandrovich Volkov|Sergey Volkov]]''<br>{{flagicon|RUS}} [[Oleg Kononenko]]\n|April 8, 2008<br>11:16 UTC\n|[[Soyuz TMA-12]]\n|October 24, 2008<br>03:37 UTC\n|[[Soyuz TMA-12]]\n|style=\"text-align: right\"|198.68\n|-\n|{{flagicon|USA}} [[Garrett Reisman|Garrett E. Reisman]]\n|colspan=\"2\"|Transferred from Expedition 16\n|June 14, 2008<br>15:16 UTC\n|[[STS-124]]\n|style=\"text-align: right\"|95.37\n|-\n|{{flagicon|USA}} [[Gregory E. Chamitoff]]\n|May 31, 2008<br>21:02 UTC\n|[[STS-124]]\n|colspan=\"3\"|Transferred to Expedition 18\n|-\n!rowspan=\"4\"|[[Expedition 18]]\n|rowspan=\"4\"| [[Image:ISS Expedition 18 patch.svg|50px]]\n|{{flagicon|USA}} ''[[Michael Fincke|E. Michael Fincke]]''<br>{{flagicon|RUS}} [[Yuri Lonchakov]]\n|October 12, 2008<br>07:01 UTC\n|[[Soyuz TMA-13]]\n|April 8, 2009<br>07:16 UTC\n|[[Soyuz TMA-13]]\n|style=\"text-align: right\"|178.01\n|-\n|{{flagicon|USA}} [[Gregory E. Chamitoff]]\n|colspan=\"2\"|Transferred from Expedition 17\n|November 30, 2008<br>21:25 UTC\n|[[STS-126]]\n|style=\"text-align: right\"|183.02\n|-\n|{{flagicon|USA}} [[Sandra H. Magnus]]\n|November 15, 2008<br>00:55 UTC\n|[[STS-126]]\n|March 28, 2009<br>19:13 UTC\n|[[STS-119]]\n|style=\"text-align: right\"|133.76\n|-\n|{{flagicon|JPN}} [[Koichi Wakata]]\n|March 15, 2009<br>23:43 UTC\n|[[STS-119]]\n|colspan=\"3\"|Transferred to Expedition 19\n|-\n!rowspan=\"2\"|[[Expedition 19]]\n|rowspan=\"2\"| [[Image:ISS Expedition 19 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Gennady Padalka]]''<br>{{flagicon|USA}} [[Michael R. Barratt]]\n|March 26, 2009<br>11:49 UTC\n|[[Soyuz TMA-14]]\n|colspan=\"3\" rowspan=\"2\"|Transferred to Expedition 20\n|-\n|{{flagicon|JPN}} [[Koichi Wakata]]\n|colspan=\"2\" height=\"44\"|Transferred from Expedition 18\n|-\n!rowspan=\"5\"|[[Expedition 20]]\n|rowspan=\"5\"|[[Image:ISS Expedition 20 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Gennady Padalka]]''<br>{{flagicon|USA}} [[Michael R. Barratt]]\n|colspan=\"2\" rowspan=\"2\"|Transferred from Expedition 19\n|October 11, 2009<br>04:32 UTC\n|[[Soyuz TMA-14]]\n|style=\"text-align: right\"|198.70\n|-\n|{{flagicon|JPN}} [[Koichi Wakata]]\n|height=\"44\"|July 31, 2009<br>14:48 UTC\n|[[STS-127]]\n|style=\"text-align: right\"|144.62\n|-\n|{{flagicon|USA}} [[Timothy L. Kopra]]\n|July 15, 2009<br>22:03 UTC\n|[[STS-127]]\n|September 12, 2009<br>00:53 UTC\n|[[STS-128]]\n|style=\"text-align: right\"|58.12\n|-\n|{{flagicon|BEL}} [[Frank De Winne]]<br>{{flagicon|RUS}} [[Roman Romanenko]]<br>{{flagicon|CAN}} [[Robert Thirsk|Robert B. Thirsk]]\n|May 27, 2009<br>10:34 UTC\n|[[Soyuz TMA-15]]\n|colspan=\"3\" rowspan=\"2\"|Transferred to Expedition 21\n|-\n|{{flagicon|USA}} [[Nicole P. Stott]]\n|August 29, 2009<br>03:59 UTC\n|[[STS-128]]\n|-\n!rowspan=\"3\"|[[Expedition 21]]\n|rowspan=\"3\"|[[Image:ISS Expedition 21 Patch.svg|50px]]\n|{{flagicon|BEL}} ''[[Frank De Winne]]''<br>{{flagicon|RUS}} [[Roman Romanenko]]<br>{{flagicon|CAN}} [[Robert Thirsk|Robert B. Thirsk]]\n|colspan=\"2\" rowspan=\"2\"|Transferred from Expedition 20\n|December 1, 2009<br>07:16 UTC\n|[[Soyuz TMA-15]]\n|style=\"text-align: right\"|187.86\n|-\n|{{flagicon|USA}} [[Nicole P. Stott]]\n|height=\"44\"|November 27, 2009<br>14:44 UTC\n|[[STS-129]]\n|style=\"text-align: right\"|90.45\n|-\n|{{flagicon|USA}} [[Jeffrey N. Williams]]<br>{{flagicon|RUS}} [[Maksim Surayev]]\n|September 30, 2009<br>07:14 UTC\n|[[Soyuz TMA-16]]\n|colspan=\"3\"|Transferred to Expedition 22\n|-\n!rowspan=\"2\"|[[Expedition 22]]\n|rowspan=\"2\"|[[Image:ISS Expedition 22 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Jeffrey N. Williams]]''<br>{{flagicon|RUS}} [[Maksim Surayev]]\n|colspan=\"2\"|Transferred from Expedition 21\n|March 18, 2010<br>11:24 UTC\n|[[Soyuz TMA-16]]\n|style=\"text-align: right\"|169.04\n|-\n|{{flagicon|RUS}} [[Oleg Kotov]]<br>{{flagicon|USA}} [[Timothy Creamer|Timothy J. Creamer]]<br>{{flagicon|JPN}} [[Soichi Noguchi]]\n|December 20, 2009<br>21:52 UTC\n|[[Soyuz TMA-17]]\n|colspan=\"3\"|Transferred to Expedition 23\n|-\n!rowspan=\"2\"|[[Expedition 23]]\n|rowspan=\"2\"|[[Image:ISS Expedition 23 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Oleg Kotov]]''<br>{{flagicon|USA}} [[Timothy Creamer|Timothy J. Creamer]]<br>{{flagicon|JPN}} [[Soichi Noguchi]]\n|colspan=\"2\"|Transferred from Expedition 22\n|June 2, 2010<br>03:25 UTC\n|[[Soyuz TMA-17]]\n|style=\"text-align: right\"|163.23\n|-\n|{{flagicon|RUS}} [[Aleksandr Skvortsov (cosmonaut)|Aleksandr Skvortsov]]<br>{{flagicon|RUS}} [[Mikhail Korniyenko]]<br>{{flagicon|USA}} [[Tracy Caldwell Dyson|Tracy E. Caldwell Dyson]]\n|April 2, 2010<br>04:05 UTC\n|[[Soyuz TMA-18]]\n|colspan=\"3\"|Transferred to Expedition 24\n|-\n!rowspan=\"2\"|[[Expedition 24]]\n|rowspan=\"2\"|[[Image:ISS Expedition 24 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Aleksandr Skvortsov (cosmonaut)|Aleksandr Skvortsov]]''<br>{{flagicon|RUS}} [[Mikhail Korniyenko]]<br>{{flagicon|USA}} [[Tracy Caldwell Dyson|Tracy E. Caldwell Dyson]]\n|colspan=\"2\"|Transferred from Expedition 23\n|September 25, 2010<br>05:23 UTC\n|[[Soyuz TMA-18]]\n|style=\"text-align: right\"|176.05\n|-\n|{{flagicon|USA}} [[Douglas H. Wheelock]]<br>{{flagicon|USA}} [[Shannon Walker]]<br>{{flagicon|RUS}} [[Fyodor Yurchikhin]]\n|June 15, 2010<br>21:35 UTC\n|[[Soyuz TMA-19]]\n|colspan=\"3\"|Transferred to Expedition 25\n|-\n!rowspan=\"2\"|[[Expedition 25]]\n|rowspan=\"2\"|[[Image:ISS Expedition 25 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Douglas H. Wheelock]]''<br>{{flagicon|USA}} [[Shannon Walker]]<br>{{flagicon|RUS}} [[Fyodor Yurchikhin]]\n|colspan=\"2\"|Transferred from Expedition 24\n|November 26, 2010<br>04:46 UTC\n|[[Soyuz TMA-19]]\n|style=\"text-align: right\"|163.30\n|-\n|{{flagicon|USA}} [[Scott Kelly (astronaut)|Scott J. Kelly]]<br>{{flagicon|RUS}} [[Aleksandr Kaleri]]<br>{{flagicon|RUS}} [[Oleg Skripochka]]\n|October 7, 2010<br>23:10 UTC\n|{{nowrap|[[Soyuz TMA-01M]]}}\n|colspan=\"3\"|Transferred to Expedition 26\n|-\n!rowspan=\"2\"|[[Expedition 26]]\n|rowspan=\"2\"|[[Image:ISS Expedition 26 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Scott Kelly (astronaut)|Scott J. Kelly]]''<br>{{flagicon|RUS}} [[Aleksandr Kaleri]]<br>{{flagicon|RUS}} [[Oleg Skripochka]]\n|colspan=\"2\"|Transferred from Expedition 25\n|March 16, 2011<br>07:54 UTC\n|{{nowrap|[[Soyuz TMA-01M]]}}\n|style=\"text-align: right\"|159.36\n|-\n|{{flagicon|RUS}} [[Dimitri Kondratyev]]<br>{{flagicon|USA}} [[Catherine G. Coleman]]<br>{{flagicon|ITA}} [[Paolo Nespoli]]\n|December 15, 2010<br>19:09 UTC\n|[[Soyuz TMA-20]]\n|colspan=\"3\"|Transferred to Expedition 27\n|-\n!rowspan=\"2\"|[[Expedition 27]]\n|rowspan=\"2\"|[[Image:ISS Expedition 27 Patch.png|50px]]\n|{{flagicon|RUS}} ''[[Dimitri Kondratyev]]''<br>{{flagicon|USA}} [[Catherine G. Coleman]]<br>{{flagicon|ITA}} [[Paolo Nespoli]]\n|colspan=\"2\"|Transferred from Expedition 26\n|May 24, 2011<br>02:27 UTC\n|[[Soyuz TMA-20]]\n|style=\"text-align: right\"|160.10\n|-\n|{{flagicon|RUS}} [[Andrei Borisenko]]<br>{{nowrap|{{flagicon|RUS}} [[Aleksandr Samokutyayev]]}}<br>{{flagicon|USA}} [[Ronald J. Garan]]\n|April 4, 2011<br>22:18 UTC\n|[[Soyuz TMA-21]]\n|colspan=\"3\"|Transferred to Expedition 28\n|-\n!rowspan=\"2\"|[[Expedition 28]]\n|rowspan=\"2\"|[[Image:ISS Expedition 28 Patch.png|50px]]\n|{{flagicon|RUS}} ''[[Andrei Borisenko]]''<br>{{flagicon|RUS}} [[Aleksandr Samokutyayev]]<br>{{flagicon|USA}} [[Ronald J. Garan]]\n|colspan=\"2\"|Transferred from Expedition 27\n|September 16, 2011<br>00:38 UTC\n|[[Soyuz TMA-21]]\n|style=\"text-align: right\"|164.10\n|-\n|{{flagicon|USA}} [[Michael E. Fossum]]<br>{{flagicon|RUS}} [[Sergey Alexandrovich Volkov|Sergey Volkov]]<br>{{flagicon|JPN}} [[Satoshi Furukawa]]\n|June 7, 2011<br>20:12 UTC\n|[[Soyuz TMA-02M]]\n|colspan=\"3\"|Transferred to Expedition 29\n|-\n!rowspan=\"2\"|[[Expedition 29]]\n|rowspan=\"2\"|[[Image:ISS Expedition 29 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Michael E. Fossum]]''<br>{{flagicon|RUS}} [[Sergey Alexandrovich Volkov|Sergey Volkov]]<br>{{flagicon|JPN}} [[Satoshi Furukawa]]\n|colspan=\"2\"|Transferred from Expedition 28\n|November 22, 2011<br>02:26 UTC\n|[[Soyuz TMA-02M]]\n|style=\"text-align: right\"|167.26\n|-\n|{{flagicon|USA}} [[Daniel C. Burbank]]<br>{{flagicon|RUS}} [[Anton Shkaplerov]]<br>{{flagicon|RUS}} [[Anatoli Ivanishin]]\n|November 14, 2011<br>04:14 UTC\n|[[Soyuz TMA-22]]\n|colspan=\"3\"|Transferred to Expedition 30\n|-\n!rowspan=\"2\"|[[Expedition 30]]\n|rowspan=\"2\"|[[Image:ISS Expedition 30 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Daniel C. Burbank]]''<br>{{flagicon|RUS}} [[Anton Shkaplerov]]<br>{{flagicon|RUS}} [[Anatoli Ivanishin]]\n|colspan=\"2\"|Transferred from Expedition 29\n|April 27, 2012<br>11:45 UTC\n|[[Soyuz TMA-22]]\n|style=\"text-align: right\"|165.31\n|-\n|{{flagicon|RUS}} [[Oleg Kononenko]]<br>{{flagicon|USA}} [[Donald R. Pettit]]<br>{{flagicon|NED}} [[Andr\u00e9 Kuipers]]\n|December 21, 2011<br>13:16 UTC\n|[[Soyuz TMA-03M]]\n|colspan=\"3\"|Transferred to Expedition 31\n|-\n!rowspan=\"2\"|[[Expedition 31]]\n|rowspan=\"2\"|[[Image:ISS Expedition 31 Patch.png|50px]]\n|{{flagicon|RUS}} ''[[Oleg Kononenko]]''<br>{{flagicon|USA}} [[Donald R. Pettit]]<br>{{flagicon|NED}} [[Andr\u00e9 Kuipers]]\n|colspan=\"2\"|Transferred from Expedition 30\n|July 1, 2012<br>08:14 UTC\n|[[Soyuz TMA-03M]]\n|style=\"text-align: right\"|192.83\n|-\n|{{flagicon|RUS}} [[Gennady Padalka]]<br>{{flagicon|RUS}} [[Sergei Revin]]<br>{{flagicon|USA}} [[Joseph Acaba]]\n|May 15, 2012<br>03:01 UTC\n|[[Soyuz TMA-04M]]\n|colspan=\"3\"|Transferred to Expedition 32\n|-\n!rowspan=\"2\"|[[Expedition 32]]\n|rowspan=\"2\"|[[Image:ISS Expedition 32 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Gennady Padalka]]''<br>{{flagicon|RUS}} [[Sergei Revin]]<br>{{flagicon|USA}} [[Joseph Acaba]]\n|colspan=\"2\"|Transferred from Expedition 31\n|September 17, 2012<br>02:53 UTC\n|[[Soyuz TMA-04M]]\n|style=\"text-align: right\"|124.99\n|-\n|{{flagicon|USA}} [[Sunita L. Williams]]<br>{{flagicon|RUS}} [[Yuri Malenchenko]]<br>{{flagicon|JPN}} [[Akihiko Hoshide]]\n|July 15, 2012<br>02:40 UTC\n|[[Soyuz TMA-05M]]\n|colspan=\"3\"|Transferred to Expedition 33\n|-\n!rowspan=\"2\"|[[Expedition 33]]\n|rowspan=\"2\"|[[Image:ISS Expedition 33 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Sunita L. Williams]]''<br>{{flagicon|RUS}} [[Yuri Malenchenko]]<br>{{flagicon|JPN}} [[Akihiko Hoshide]]\n|colspan=\"2\"|Transferred from Expedition 32\n|November 19, 2012<br>01:56 UTC\n|[[Soyuz TMA-05M]]\n|style=\"text-align: right\"|126.97\n|-\n|{{flagicon|USA}} [[Kevin A. Ford]]<br>{{flagicon|RUS}} [[Oleg Novitskiy]]<br>{{flagicon|RUS}} [[Evgeny Tarelkin]]\n|October 23, 2012<br>10:51 UTC<br>\n|[[Soyuz TMA-06M]]\n|colspan=\"3\"|Transferred to Expedition 34\n|-\n!rowspan=\"2\"|[[Expedition 34]]\n|rowspan=\"2\"|[[Image:ISS Expedition 34 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Kevin A. Ford]]''<br>{{flagicon|RUS}} [[Oleg Novitskiy]]<br>{{flagicon|RUS}} [[Evgeny Tarelkin]]\n|colspan=\"2\"|Transferred from Expedition 33\n|March 15, 2013<br>03:06 UTC<br>\n|[[Soyuz TMA-06M]]\n|style=\"text-align: right\"|143.18\n|-\n|{{flagicon|CAN}} [[Chris Hadfield]]<br>{{flagicon|RUS}} [[Roman Romanenko]]<br>{{flagicon|USA}} [[Thomas H. Marshburn]]\n|December 19, 2012<br>11:12 UTC<br>\n|[[Soyuz TMA-07M]]\n|colspan=\"3\"|Transferred to Expedition 35\n|-\n!rowspan=\"2\"|[[Expedition 35]]\n|rowspan=\"2\"|[[Image:ISS Expedition 35 Patch.svg|50px]]\n|{{flagicon|CAN}} ''[[Chris Hadfield]]''<br>{{flagicon|RUS}} [[Roman Romanenko]]<br>{{flagicon|USA}} [[Thomas H. Marshburn]]\n|colspan=\"2\"|Transferred from Expedition 34\n|May 14, 2013<br>03:31 UTC<br>\n|[[Soyuz TMA-07M]]\n|style=\"text-align: right\"|145.64\n|-\n|{{flagicon|RUS}} [[Pavel Vinogradov]]<br>{{flagicon|RUS}} [[Aleksandr Misurkin]]<br>{{flagicon|USA}} [[Christopher J. Cassidy]]\n| 28 March 2013<br>20:43 UTC\n|[[Soyuz TMA-08M]]\n|colspan=\"3\"|Transferred to Expedition 36\n|-\n!rowspan=\"2\"|[[Expedition 36]]\n|rowspan=\"2\"|[[Image:ISS Expedition 36 Patch.png|50px]]\n|{{flagicon|RUS}} ''[[Pavel Vinogradov]]''<br>{{flagicon|RUS}} [[Aleksandr Misurkin]]<br>{{flagicon|USA}} [[Christopher J. Cassidy]]\n|colspan=\"2\"|Transferred from Expedition 35\n|September 11, 2013<br>02:58 UTC\n|[[Soyuz TMA-08M]]\n|style=\"text-align: right\"|166.25\n|-\n|{{flagicon|RUS}} [[Fyodor Yurchikhin]]<br>{{flagicon|USA}} [[Karen L. Nyberg]]<br>{{flagicon|ITA}} [[Luca Parmitano]]\n|May 28, 2013<br>20:31 UTC\n|[[Soyuz TMA-09M]]\n|colspan=\"3\"|Transferred to Expedition 37\n|-\n!rowspan=\"2\"|[[Expedition 37]]\n|rowspan=\"2\"|[[Image:ISS Expedition 37 Patch.png|50px]]\n|{{flagicon|RUS}} ''[[Fyodor Yurchikhin]]''<br>{{flagicon|USA}} [[Karen L. Nyberg]]<br>{{flagicon|ITA}} [[Luca Parmitano]]\n|colspan=\"2\"|Transferred from Expedition 36\n|November 11, 2013<br>02:49 UTC\n|[[Soyuz TMA-09M]]\n|style=\"text-align: right\"|166.25\n|-\n|{{flagicon|RUS}} [[Oleg Kotov]]<br>{{flagicon|RUS}} [[Sergey Ryazansky]]<br>{{flagicon|USA}} [[Michael S. Hopkins]]\n|September 25, 2013<br>20:58 UTC\n|[[Soyuz TMA-10M]]\n|colspan=\"3\"|Transferred to Expedition 38\n|-\n!rowspan=\"2\"|[[Expedition 38]]\n|rowspan=\"2\"|[[Image:ISS Expedition 38 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Oleg Kotov]]''<br>{{flagicon|RUS}} [[Sergey Ryazansky]]<br>{{flagicon|USA}} [[Michael S. Hopkins]]\n|colspan=\"2\"|Transferred from Expedition 37\n|March 11, 2014<br>03:24 UTC\n|[[Soyuz TMA-10M]]\n|style=\"text-align: right\"|166.25\n|-\n|{{flagicon|JPN}} [[Koichi Wakata]]<br>{{flagicon|RUS}} [[Mikhail Tyurin]]<br>{{flagicon|USA}} [[Richard A. Mastracchio]]\n|November 6, 2013<br>04:14 UTC\n|[[Soyuz TMA-11M]]\n|colspan=\"3\"|Transferred to Expedition 39\n|-\n!rowspan=\"2\"|[[Expedition 39]]\n|rowspan=\"2\"|[[Image:ISS Expedition 39 Patch.svg|50px]]\n|{{flagicon|JPN}} ''[[Koichi Wakata]]''<br>{{flagicon|RUS}} [[Mikhail Tyurin]]<br>{{flagicon|USA}} [[Richard A. Mastracchio]]\n|colspan=\"2\"|Transferred from Expedition 38\n|May 14, 2014<br>01:58 UTC\n|[[Soyuz TMA-11M]]\n|style=\"text-align: right\"|187.91\n|-\n|{{flagicon|RUS}} [[Aleksandr Skvortsov (cosmonaut)|Aleksandr Skvortsov]]<br>{{flagicon|RUS}} [[Oleg Artemyev]]<br>{{flagicon|USA}} [[Steven R. Swanson]]\n|March 25, 2014<br>21:17 UTC\n|[[Soyuz TMA-12M]]\n|colspan=\"3\"|Transferred to Expedition 40\n|-\n!rowspan=\"2\"|[[Expedition 40]]\n|rowspan=\"2\"|[[Image:ISS Expedition 40 Patch.png|50px]] \n|{{flagicon|USA}} ''[[Steven R. Swanson]]''<br>{{flagicon|RUS}} [[Aleksandr Skvortsov (cosmonaut)|Aleksandr Skvortsov]]<br>{{flagicon|RUS}} [[Oleg Artemyev]]\n|colspan=\"2\"|Transferred from Expedition 39\n|September 11, 2014<br>02:23 UTC\n|[[Soyuz TMA-12M]]\n|style=\"text-align: right\"|169.20\n|-\n|{{flagicon|USA}} [[Gregory R. Wiseman]]<br>{{flagicon|RUS}} [[Maksim Surayev]]<br>{{flagicon|GER}} [[Alexander Gerst]]\n|May 28, 2014<br>19:57 UTC\n|[[Soyuz TMA-13M]]\n|colspan=\"3\"|Transferred to Expedition 41\n|-\n!rowspan=\"2\"|[[Expedition 41]]\n|rowspan=\"2\"|[[Image:ISS Expedition 41 Patch.svg|50px]] \n|{{flagicon|RUS}} ''[[Maksim Surayev]]''<br>{{flagicon|USA}} [[Gregory R. Wiseman]]<br>{{flagicon|GER}} [[Alexander Gerst]]\n|colspan=\"2\"|Transferred from Expedition 40\n|10 November 2014<br>03:58 UTC\n|[[Soyuz TMA-13M]]\n|style=\"text-align: right\"|165.33\n|-\n|{{flagicon|RUS}} [[Aleksandr Samokutyayev]]<br>{{flagicon|RUS}} [[Yelena Serova]]<br>{{flagicon|USA}} [[Barry E. Wilmore]]\n|25 September 2014<br>20:25 UTC\n|[[Soyuz TMA-14M]]\n|colspan=\"3\"|Transferred to Expedition 42\n|-\n!rowspan=\"2\"|[[Expedition 42]]\n|rowspan=\"2\"|[[Image:ISS Expedition 42 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Barry E. Wilmore]]''<br>{{flagicon|RUS}} [[Aleksandr Samokutyayev]]<br>{{flagicon|RUS}} [[Yelena Serova]]\n|colspan=\"2\"|Transferred from Expedition 41\n|12 March 2015<br>2:07 UTC\n|[[Soyuz TMA-14M]]\n|style=\"text-align: right\"|167.25\n|-\n|{{flagicon|RUS}} [[Anton Shkaplerov]]<br>{{flagicon|ITA}} [[Samantha Cristoforetti]]<br>{{flagicon|USA}} [[Terry W. Virts]]\n|23 November 2014<br>21:01 UTC\n|[[Soyuz TMA-15M]]\n|colspan=\"3\"|Transferred to Expedition 43\n|-\n!rowspan=\"3\"|[[Expedition 43]]\n|rowspan=\"3\"|[[Image:ISS Expedition 43 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Terry W. Virts]]''<br>{{flagicon|RUS}} [[Anton Shkaplerov]]<br>{{flagicon|ITA}} [[Samantha Cristoforetti]]\n|colspan=\"2\"|Transferred from Expedition 42\n|11 June 2015<br>13:44 UTC<ref name=\"landing\">{{cite web|url=http://www.nasa.gov/press-release/international-space-station-partners-adjust-spacecraft-schedule|title=International Space Station Partners Adjust Spacecraft Schedule|author=NASA|year=2015}}</ref><ref>{{Cite web|title = Expedition 43 Crew Departs Space Station, Lands Safely in Kazakhstan|url = http://www.nasa.gov/press-release/expedition-43-crew-departs-space-station-lands-safely-in-kazakhstan|accessdate = 2015-06-11}}</ref>\n|[[Soyuz TMA-15M]]\n|style=\"text-align: right\"|199.70\n|-\n|{{flagicon|RUS}} [[Gennady Padalka]]<br>\n|rowspan=\"2\"|27 March 2015<br>19:42 UTC\n|rowspan=\"2\"|[[Soyuz TMA-16M]]\n|colspan=\"3\"|Transferred to Expedition 44\n|-\n|{{flagicon|RUS}} [[Mikhail Korniyenko]]<br>{{flagicon|USA}} [[Scott J. Kelly]]\n|colspan=\"3\"|Transferred to Expeditions 44, 45 and 46<br>'''[[ISS year long mission|one year mission]]''' [[File:ISS Yearlong mission patch.png|40px]]\n|-\n!rowspan=\"3\"|[[Expedition 44]]\n|rowspan=\"3\"|[[Image:ISS Expedition 44 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Gennady Padalka]]''\n|rowspan=\"2\" colspan=\"2\"|Transferred from Expedition 43\n|12 September 2015<br>00:51 UTC<ref>{{cite web|last1=Harwood|first1=William|title=Soyuz lands safely in Kazakhstan|url=https://spaceflightnow.com/2015/09/12/soyuz-lands-safely-in-kazakhstan/|website=Spaceflight Now|publisher=Spaceflight Now Inc.|accessdate=3 November 2015}}</ref>\n|[[Soyuz TMA-16M]]\n|style=\"text-align: right\"|169\n|-\n|{{flagicon|RUS}} [[Mikhail Korniyenko]]<br>{{flagicon|USA}} [[Scott J. Kelly]]\n|colspan=\"3\"|Transferred to Expedition 45 and 46 <br> '''[[ISS year long mission|one year mission]]''' [[File:ISS Yearlong mission patch.png|40px]]\n|-\n|{{flagicon|RUS}} [[Oleg Kononenko]]<br>{{flagicon|JPN}} [[Kimiya Yui]]<br>{{flagicon|USA}} [[Kjell N. Lindgren]]\n|22 July 2015<br>21:02 UTC<ref>{{Cite web|title = Launch, Docking Returns Space Station Crew to Full Strength|url = http://www.nasa.gov/press-release/launch-docking-returns-international-space-station-crew-to-full-strength|accessdate = 2015-07-23}}</ref>\n|[[Soyuz TMA-17M]]\n|colspan=\"3\"|Transferred to Expedition 45\n|-\n!rowspan=\"3\"|[[Expedition 45]]\n|rowspan=\"3\"|[[Image:ISS Expedition 45 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Scott J. Kelly]]''<br>{{flagicon|RUS}} [[Mikhail Korniyenko]]\n|colspan=\"2\" rowspan=\"2\"|Transferred from Expedition 44\n|colspan=\"3\"|Transferred to Expedition 46\n|-\n|{{flagicon|RUS}} [[Oleg Kononenko]]<br>{{flagicon|JPN}} [[Kimiya Yui]]<br>{{flagicon|USA}} [[Kjell N. Lindgren]]\n|11 December 2015<br>13:12 UTC\n|[[Soyuz TMA-17M]]\n|style=\"text-align: right\"|141.66\n|-\n|{{flagicon|RUS}} [[Sergey Alexandrovich Volkov|Sergey Volkov]]\n|2 September 2015<br>04:37 UTC\n|[[Soyuz TMA-18M]]\n|colspan=\"3\"|Transferred to Expedition 46\n|-\n!rowspan=\"3\"|[[Expedition 46]]\n|rowspan=\"3\"|[[Image:ISS Expedition 46 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Scott Kelly (astronaut)|Scott J. Kelly]]''<br>{{flagicon|RUS}} [[Mikhail Korniyenko]]\n|colspan=\"2\" rowspan=\"2\"|Transferred from Expedition 45\n|rowspan=\"2\"|2 March 2016 04:25:27 UTC\n|rowspan=\"2\"|[[Soyuz TMA-18M]]\n|style=\"text-align: right\"|340<br> <ref group=\"n\">Kelly and Korniyenko were to remain aboard the ISS for approximately one year. This duration will measure the length of their cumulative stay in space from Expedition 43 through Expedition 46.</ref><ref>{{cite web|url=http://www.nasaspaceflight.com/2016/03/year-in-space-mission-end-soyuz-return-earth/|title=Year In Space mission ends with Soyuz TMA-18M return|publisher=nasaspaceflight.com|author=Gebhardt,Chris|date=2016-03-01|accessdate=2016-03-06}}</ref>\n|-\n|{{flagicon|RUS}} [[Sergey Alexandrovich Volkov|Sergey Volkov]]\n|style=\"text-align: right\"|181<br> <ref group=\"n\">This duration will measure the length of Soyuz TMA-18M from start to finish.</ref>\n|-\n|{{flagicon|RUS}} [[Yuri Malenchenko]]<br>{{flagicon|UK}} [[Timothy Peake]]<br>{{flagicon|USA}} [[Timothy Kopra]]\n|15 December 2015<br>11:03 UTC\n|[[Soyuz TMA-19M]]\n|colspan=\"3\"|Transferred to Expedition 47\n|-\n!rowspan=\"2\"|[[Expedition 47]]\n|rowspan=\"2\"|[[Image:ISS Expedition 47 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Timothy Kopra]]''<br>{{flagicon|UK}} [[Tim Peake]]<br>{{flagicon|RUS}} [[Yuri Malenchenko]]\n|colspan=\"2\"|Transferred from Expedition 46\n|18 June 2016<br>9:15 UTC<ref>{{Cite web|url=https://www.bbc.co.uk/news/science-environment-36519886|title=UK astronaut Tim Peake returns to Earth|accessdate=18 June 2016|publisher=BBC News}}</ref>\n|[[Soyuz TMA-19M]]\n|style=\"text-align: right\"|185.91\n|-\n|{{flagicon|RUS}} [[Aleksey Ovchinin]]<br>{{flagicon|RUS}} [[Oleg Skripochka]]<br>{{flagicon|USA}} [[Jeffrey Williams (astronaut)|Jeffrey Williams]]\n|18 March 2016 21:26:38 UTC\n|[[Soyuz TMA-20M]]\n|colspan=\"3\"|Transferred to Expedition 48\n|-\n!rowspan=\"2\"|[[Expedition 48]]\n|rowspan=\"2\"|[[Image:ISS Expedition 48 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Jeffrey Williams (astronaut)|Jeffrey Williams]]''<br>{{flagicon|RUS}} [[Oleg Skripochka]]<br>{{flagicon|RUS}} [[Aleksey Ovchinin]]\n|colspan=\"2\"|Transferred from Expedition 47\n|7 September 2016<br>01:13 UTC<ref>{{cite web|title=Expedition 48 Lands With Most Experienced NASA Astronaut|publisher=NASA|url=https://blogs.nasa.gov/spacestation/2016/09/06/expedition-48-lands-with-most-experienced-nasa-astronaut/|date=6 September 2016}}</ref>\n|[[Soyuz TMA-20M]]\n|style=\"text-align: right\"|172<br><ref>{{cite web|title=Roscosmos. Soyuz TMA-20M crew return|publisher=ROSCOSMOS|url=http://en.roscosmos.ru/20643/|date=7 September 2016}}</ref>\n|-\n|{{flagicon|RUS}} [[Anatoli Ivanishin]]<br>{{flagicon|JPN}} [[Takuya Onishi]]<br>{{flagicon|USA}} [[Kathleen Rubins]]\n|7 July 2016<br>1:36 UTC<ref>{{cite web|title=Crew Launches for Two-Day Ride to Station|publisher=NASA|url=https://blogs.nasa.gov/spacestation/2016/07/06/crew-launches-for-two-day-ride-to-station/|date=9 July 2016}}</ref>\n|[[Soyuz MS-01]]\n|colspan=\"3\"|Transferred to Expedition 49\n|-\n!rowspan=\"2\"|[[Expedition 49]]\n|rowspan=\"2\"|[[Image:ISS Expedition 49 Patch.png|50px]]\n|{{flagicon|RUS}} ''[[Anatoli Ivanishin]]''<br>{{flagicon|JPN}} [[Takuya Onishi]]<br>{{flagicon|USA}} [[Kathleen Rubins]]\n|colspan=\"2\"|Transferred from Expedition 48\n|30 October 2016<br>3:58 UTC<ref>{{cite web|title=NASA Astronaut Kate Rubins, Crewmates Safely Return From the Space Station|publisher=NASA|url=http://www.nasa.gov/press-release/nasa-astronaut-kate-rubins-crewmates-safely-return-from-the-space-station|date=30 October 2016}}</ref>\n|[[Soyuz MS-01]]\n|style=\"text-align: right\"|115<br>\n|-\n|{{flagicon|USA}} [[Shane Kimbrough]]<br>{{flagicon|RUS}} [[Andrei Borisenko]]<br>{{flagicon|RUS}} [[Sergey Nikolayevich Ryzhikov|Sergey Ryzhikov]]\n|19 October 2016<br>8:05 UTC<ref>{{cite web|title=Soyuz MS-02 spacecraft docks with Expedition 49/50 crew|publisher=nasaspaceflight|url=https://www.nasaspaceflight.com/2016/10/soyuz-ms-02-expeditions-4950-launch/|date=19 October 2016}}</ref>\n|[[Soyuz MS-02]]\n|colspan=\"3\"|Transferred to Expedition 50\n|-\n! rowspan=\"2\"|[[Expedition 50]] \n| rowspan=\"2\"|[[Image:ISS Expedition 50 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Shane Kimbrough]]''<br>{{flagicon|RUS}} [[Andrei Borisenko]]<br>{{flagicon|RUS}} [[Sergey Nikolayevich Ryzhikov|Sergey Ryzhikov]]\n| colspan=\"2\" |Transferred from Expedition 49\n|10 April 2017<br>11:20 UTC\n|[[Soyuz MS-02]]\n|style=\"text-align: right\"|173\n|-\n|{{flagicon|USA}} [[Peggy Whitson]]<br>{{flagicon|RUS}} [[Oleg Novitskiy]]<br>{{flagicon|FRA}} [[Thomas Pesquet]]\n|17 November 2016<br>20:17 UTC\n|[[Soyuz MS-03]]\n| colspan=\"3\" |Transferred to Expedition 51\n|-\n! rowspan=\"3\" |[[Expedition 51]]\n| rowspan=\"3\" |[[Image:ISS Expedition 51 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Peggy Whitson]]''\n| colspan=\"2\" rowspan=\"2\"|Transferred from Expedition 50\n| colspan=\"3\" |Transferred to Expedition 52\n|-\n|{{flagicon|RUS}} [[Oleg Novitskiy]]<br>{{flagicon|FRA}} [[Thomas Pesquet]]\n|2 June 2017 14:10 UTC\n|[[Soyuz MS-03]]\n|style=\"text-align: right\"|196.72\n|-\n|{{flagicon|RUS}} [[Fyodor Yurchikhin]]<br>{{flagicon|USA}} [[Jack D. Fischer]]\n|20 April 2017\n07:13 UTC\n|[[Soyuz MS-04]]\n| colspan=\"3\" |Transferred to Expedition 52\n|-\n! rowspan=\"3\" |[[Expedition 52]]\n| rowspan=\"3\" |[[Image:ISS Expedition 52 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Fyodor Yurchikhin]]''<br>{{flagicon|USA}} [[Jack D. Fischer]]\n| colspan=\"2\" rowspan=\"2\" |Transferred from Expedition 51\n| rowspan=\"2\" |3 September 2017 1:22 UTC\n| rowspan=\"2\" |[[Soyuz MS-04]]<ref name=\"ms04land\">{{cite web|author=1:13 PM ET |url=https://www.npr.org/sections/thetwo-way/2017/09/03/548295156/-american-space-ninja-peggy-whitson-back-on-earth-after-record-breaking-flight |title='American Space Ninja' Back On Earth After Record-Breaking Flight |publisher=NPR |date=2017-08-06 |accessdate=2017-09-03}}</ref>\n|style=\"text-align: right\"|135.3\n|-\n|{{Flagicon|USA}} [[Peggy Whitson]]\n|style=\"text-align: right\"|289.1<br> <ref group=n>Whitson remained onboard the ISS for three extra months. This duration is for the length of her cumulative stay in space from Expedition 50 through Expedition 52.</ref><ref name=\"spacefacts\">{{cite web|url=http://www.spacefacts.de/bios/astronauts/english/whitson_peggy.htm |title=Astronaut biography: Peggy Whitson |publisher=spacefacts.com |access-date=September 5, 2017}}</ref>\n|-\n|{{flagicon|USA}} [[Randolph Bresnik]]<br>{{flagicon|ITA}} [[Paolo Nespoli]]<br>{{flagicon|RUS}} [[Sergey Ryazansky]]\n|28 July 2017<br>15:41 UTC\n|[[Soyuz MS-05]]\n| colspan=\"3\" | Transferred to Expedition 53\n|-\n!rowspan=\"2\"|[[Expedition 53]]\n|rowspan=\"2\"|[[Image:ISS Expedition 53 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Randolph Bresnik]]''<br>{{flagicon|ITA}} [[Paolo Nespoli]]<br>{{flagicon|RUS}} [[Sergey Ryazansky]]\n|colspan=\"2\"|Transferred from Expedition 52\n||14 December 2017 08:38 UTC<ref>{{cite web |url=https://www.nasaspaceflight.com/2017/12/soyuz-ms-05-journey-back-earth/ |title=Soyuz MS-05 returns crew back to Earth |date=December 14, 2017 |accessdate=December 14, 2017}}</ref>\n|[[Soyuz MS-05]]\n|style=\"text-align: right\"|139\n|-\n|{{flagicon|RUS}} [[Alexander Misurkin]]<br>{{flagicon|USA}} [[Mark Vande Hei]]<br>{{flagicon|USA}} [[Joseph Acaba]]\n|12 September 2017<br>21:17 UTC\n|[[Soyuz MS-06]]\n|colspan=\"3\"|Transferred to Expedition 54\n|-\n!rowspan=\"2\"|[[Expedition 54]]\n|rowspan=\"2\"|[[Image:ISS Expedition 54 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Alexander Misurkin]]''<br>{{flagicon|USA}} [[Mark Vande Hei]]<br>{{flagicon|USA}} [[Joseph Acaba]]\n|colspan=\"2\"|Transferred from Expedition 53\n|28 February 2018 02:31 UTC<br />\n|[[Soyuz MS-06]]\n|style=\"text-align: right\"|168\n|-\n|{{flagicon|RUS}} [[Anton Shkaplerov]]<br>{{flagicon|USA}} [[Scott Tingle]]<br>{{flagicon|JPN}} [[Norishige Kanai]]\n|17 December 2017<br>7:21 UTC\n|[[Soyuz MS-07]]\n|colspan=\"3\"|Transferred to Expedition 55\n|-\n!rowspan=\"2\"|[[Expedition 55]]\n|rowspan=\"2\"|[[Image:ISS Expedition 55 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Anton Shkaplerov]]''<br>{{flagicon|USA}} [[Scott Tingle]]<br>{{flagicon|JPN}} [[Norishige Kanai]]\n|colspan=\"2\"|Transferred from Expedition 54\n|3 June 2018<br />12:39 UTC\n|[[Soyuz MS-07]]\n|style=\"text-align: right\"|168\n|-\n|{{flagicon|USA}} [[Andrew Feustel]]<br>{{flagicon|RUS}} [[Oleg Artemyev]]<br>{{flagicon|USA}} [[Richard R. Arnold|Richard Arnold]]\n|21 March 2018<br>17:44 UTC<ref name=\"launch\">{{cite \nweb|url=https://www.nasaspaceflight.com/2018/03/roscosmos-soyuz-ms-08-mission-first-crew-launch-2018/|title=Soyuz MS-08 mission, first crew launch of 2018, docks with ISS|date=March 21,\n2018|first=Chris |last=Gebhardt| publisher=nasaspaceflight.com}}</ref>\n|[[Soyuz MS-08]]\n|colspan=\"3\"|Transferred to Expedition 56\n|-\n!rowspan=\"2\"|[[Expedition 56]]\n|rowspan=\"2\"|[[Image:ISS Expedition 56 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Andrew Feustel]]''<br>{{flagicon|RUS}} [[Oleg Artemyev]]<br>{{flagicon|USA}} [[Richard R. Arnold|Richard Arnold]]\n|colspan=\"2\"|Transferred from Expedition 55\n|4 October 2018<br />11:44:45 UTC<ref name=\"Soyuz MS-08\">{{cite web |title=Soyuz MS-08 |url=http://spacefacts.de/mission/english/soyuz-ms-08.htm |website=spacefacts.de |accessdate=6 October 2018}}</ref>\n|[[Soyuz MS-08]]\n|style=\"text-align: right\"|196\n|-\n|{{flagicon|GER}} [[Alexander Gerst]]<br>{{flagicon|RUS}} [[Sergey Prokopyev (cosmonaut)|Sergey Prokopyev]]<br>{{flagicon|USA}} [[Serena M. Au\u00f1\u00f3n-Chancellor|Serena Au\u00f1\u00f3n-Chancellor]]\n|6 June 2018<br>11:12 UTC\n|[[Soyuz MS-09]]\n|colspan=\"3\"|Transferred to Expedition 57\n|-\n! rowspan=\"2\" |[[Expedition 57]]\n| rowspan=\"2\" |[[Image:ISS Expedition 57 Patch.svg|50px]]\n|{{flagicon|GER}} ''[[Alexander Gerst]]''<br>{{flagicon|RUS}} [[Sergey Prokopyev (cosmonaut)|Sergey Prokopyev]]<br>{{flagicon|USA}} [[Serena M. Au\u00f1\u00f3n-Chancellor|Serena Au\u00f1\u00f3n-Chancellor]]\n| colspan=\"2\" |Transferred from Expedition 56\n|20 December 2018<br/>05:02 UTC\n|[[Soyuz MS-09]]\n|style=\"text-align: right\"|197\n|-\n|{{flagicon|RUS}} [[Oleg Kononenko]]<br>{{flagicon|CAN}} [[David Saint-Jacques]]<br>{{flagicon|USA}} [[Anne McClain]]\n|3 December 2018<br/>11:31 UTC\n|[[Soyuz MS-11]]\n| colspan=\"3\" |Transferred to Expedition 58\n|-\n![[Expedition 58]]\n|[[File:ISS Expedition 58 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Oleg Kononenko]]''<br>{{flagicon|CAN}} [[David Saint-Jacques]]<br>{{flagicon|USA}} [[Anne McClain]]\n| colspan=\"2\"|Transferred from Expedition 57\n| colspan=\"3\" |Transferred to Expedition 59\n\n|-\n! rowspan=\"3\" |[[Expedition 59]]\n| rowspan=\"3\" |[[Image:ISS Expedition 59 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Oleg Kononenko]]''<br>{{flagicon|CAN}} [[David Saint-Jacques]]<br>{{flagicon|USA}} [[Anne McClain]]\n| colspan=\"2\" |Transferred from Expedition 58\n| 25 June 2019<br/>02:47:50 UTC<ref name=SF-MS11>[http://www.spacefacts.de/mission/english/soyuz-ms-11.htm Soyuz MS-11]</ref>\n| [[Soyuz MS-11]]\n| style=\"text-align: right\"| 203\n|-\n|{{flagicon|RUS}} [[Aleksey Ovchinin]]<br>{{flagicon|USA}} [[Nick Hague]]\n| rowspan=\"2\" |14 March 2019<br/>19:14 UTC\n| rowspan=\"2\" |[[Soyuz MS-12]]\n| colspan=\"3\" |Transferred to Expedition 60\n|-\n|{{flagicon|USA}} [[Christina Koch]]\n| colspan=\"3\" |Transferred to Expedition 60 and 61\n\n|-\n! rowspan=\"3\" |[[Expedition 60]]\n| rowspan=\"3\" |[[File:ISS Expedition 60 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Aleksey Ovchinin]]''<br>{{flagicon|USA}} [[Nick Hague]]\n| rowspan=\"2\" colspan=\"2\" |Transferred from Expedition 59\n|3 October 2019<br/>10:59 UTC<ref name=SF-MS12>[http://www.spacefacts.de/mission/english/soyuz-ms-12.htm Soyuz MS-12]</ref>\n|[[Soyuz MS-12]]\n|style=\"text-align: right\"| 202\n|-\n|{{flagicon|USA}} [[Christina Koch]]\n| rowspan=\"2\" colspan=\"3\" |Transferred to Expedition 61\n|-\n|{{flagicon|RUS}} [[Aleksandr Skvortsov (cosmonaut)|Aleksandr Skvortsov]]<br>{{flagicon|ITA}} [[Luca Parmitano]]<br>{{flagicon|USA}} [[Andrew R. Morgan|Drew Morgan]]\n|20 July 2019<br/>16:28:21 UTC<ref name=SF-MS13>[http://www.spacefacts.de/mission/english/soyuz-ms-13.htm Soyuz MS-13]</ref>\n|[[Soyuz MS-13]]\n\n|-\n! rowspan=\"4\" |[[Expedition 61]]\n| rowspan=\"4\" |[[File:ISS Expedition 61 Patch.svg|50px]]\n|{{flagicon|ITA}} ''[[Luca Parmitano]]''<br>{{flagicon|RUS}} [[Aleksandr Skvortsov (cosmonaut)|Aleksandr Skvortsov]]\n| colspan=\"2\" rowspan=\"3\" |Transferred from Expedition 60\n| rowspan=\"2\" | 6 February 2020  \n| rowspan=\"2\" |[[Soyuz MS-13]]\n|style=\"text-align: right\"| 200\n|-\n|{{flagicon|USA}} [[Christina Koch]]\n| style=\"text-align: right\"| 328\n|-\n|{{flagicon|USA}} [[Andrew R. Morgan|Drew Morgan]]\n| rowspan=\"2\" |17 April 2020<br/>05:16 UTC<ref name=nasa20190417>{{cite web |title=NASA Announces First Flight, Record-Setting Mission |url=https://www.nasa.gov/press-release/nasa-announces-first-flight-record-setting-mission |publisher=NASA |date=17 April 2019}}</ref>\n| rowspan=\"2\" |[[Soyuz MS-15]]\n|style=\"text-align: right\"|\n|-\n|{{flagicon|RUS}} [[Oleg Skripochka]]<br>{{flagicon|USA}} [[Jessica Meir]]\n|25 September 2019<br/>13:57:43 UTC<ref name=SF-MS15>[http://www.spacefacts.de/mission/english/soyuz-ms-15.htm Launch, orbit and landing data]</ref>\n|[[Soyuz MS-15]]\n|\n|}\n\n==Current expedition==\n{| class=\"wikitable\"\n|- style=\"background-color: #efefef\" valign=\"top\"\n!Expedition\n!Patch\n!Crew\n!Launch date\n!Flight up\n!Landing date\n!Flight down\n!Duration<br><small>(days)</small>\n|-\n! rowspan=\"3\" |[[Expedition 62]]\n| rowspan=\"3\" |[[File:ISS Expedition 62 Patch.png|50px]]\n|{{flagicon|RUS}} [[Anatoli Ivanishin]]<br>{{flagicon|RUS}} [[Ivan Vagner]]<br>{{flagicon|USA}} [[Christopher Cassidy]]\n|9 April 2020\n|[[Soyuz MS-16]]\n| colspan=\"3\" |Will transfer to Expedition 63\n|-\n|{{flagicon|USA}} [[Douglas G. Hurley]]<br>{{flagicon|USA}} [[Robert L. Behnken]]\n|20 May 2020\n|[[Crew_Dragon_Demo-2|DM-2]]\n|August 2020\n|[[Crew_Dragon_Demo-2|DM-2]]\n|40-60 days\n|-\n|}\n\n==Future expeditions==\n{| class=\"wikitable\"\n|- style=\"background-color: #efefef\" valign=\"top\"\n!Expedition\n!Patch\n!Crew\n!Launch date\n!Flight up\n!Landing date\n!Flight down\n!Duration<br><small>(days)</small>\n|-\n! rowspan=\"3\" |'''[[Expedition 63]]'''\n| rowspan=\"3\" |[[File:ISS Expedition 63 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Christopher Cassidy]]'' <br> {{flagicon|RUS}} [[Anatoli Ivanishin]]<br>{{flagicon|RUS}} [[Ivan Vagner]]\n| colspan=\"2\" |Will transfer from Expedition 62 <br/> 17 April 2020\n| 21 October 2020 (planned)<ref name=\"jaxa_exp63\">{{cite web|title=Increment 63 |url=https://iss.jaxa.jp/kibouser/information/increment/63.html|publisher=JAXA|language=ja|date=10 April 2020|access-date=10 April 2020}}</ref>\n|[[Soyuz MS-16]]\n|style=\"text-align: right\"|\n|-\n|{{flagicon|USA}} [[Michael S. Hopkins|Michael Hopkins]] <br> {{flagicon|USA}} [[Victor J. Glover|Victor Glover]] <br> {{flagicon|JPN}} [[Soichi Noguchi]] <br> {{flagicon|USA}} [[Shannon Walker]]\n|August 2020 (planned)<ref name=\"cnbc_coronavirus\">{{cite web|title=How NASA and SpaceX plan to launch astronauts in May despite a pandemic |url=https://www.cnbc.com/2020/04/03/nasa-spacex-to-launch-astronauts-in-may-despite-coronavirus-pandemic.html|first=Michael|last=Sheetz|date=3 April 2020|access-date=10 April 2020}}</ref>\n|[[USCV-1]]\n| colspan=\"3\" rowspan=\"2\" |Will transfer to Expedition 64 <br/> 21 October 2020 <ref name=\"jaxa_exp63\"/>\n|-\n|{{flagicon|RUS}} [[Nikolai Tikhonov (cosmonaut)|Nikolai Tikhonov]] <br> {{flagicon|RUS}} [[Andrei Babkin]] <br> {{flagicon|USA}} [[Steve Bowen]] \n|14 October 2020 (planned)<ref>{{cite news|url=https://ria.ru/20191022/1560048196.html|title=\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a: \u041d\u0410\u0421\u0410 \u0445\u043e\u0447\u0435\u0442 \u043a\u0443\u043f\u0438\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u043d\u043e \u043c\u0435\u0441\u0442\u043e \u0432 \u0440\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u043e\u043c \"\u0421\u043e\u044e\u0437\u0435\"|trans-title=Source: NASA wants to buy another Soyuz seat|agency=[[RIA Novosti]]|date=22 October 2019|accessdate=23 October 2019|language=ru}}</ref>\n|[[Soyuz MS-17]]\n|-\n! rowspan=\"2\" |'''[[Expedition 64]]'''\n| rowspan=\"2\" |\n|{{flagicon|USA}} [[Michael S. Hopkins|Michael Hopkins]] <br> {{flagicon|USA}} [[Victor J. Glover|Victor Glover]] <br> {{flagicon|JPN}} [[Soichi Noguchi]] <br> {{flagicon|USA}} [[Shannon Walker]]\n| colspan=\"2\" rowspan=\"2\" |Will transfer from Expedition 63 <br/> 21 October 2020 <ref name=\"jaxa_exp63\"/>\n|Early 2021 (planned) \n|[[USCV-1]]\n|style=\"text-align: right\"|\n|-\n|{{flagicon|RUS}} [[Nikolai Tikhonov (cosmonaut)|Nikolai Tikhonov]] <br> {{flagicon|RUS}} [[Andrei Babkin]] <br> {{flagicon|USA}} [[Steve Bowen]]\n| colspan=\"3\" |Will transfer to Expedition 65 <br/> Early 2021\n|-\n! rowspan=\"2\" |<div id=\"Expedition 65\">'''Expedition 65'''</div>\n| rowspan=\"2\" |\n|{{flagicon|RUS}} [[Nikolai Tikhonov (cosmonaut)|Nikolai Tikhonov]] <br> {{flagicon|RUS}} [[Andrei Babkin]] <br> {{flagicon|USA}} [[Steve Bowen]]  \n| colspan=\"2\" |Will transfer from Expedition 64 <br/> Early 2021\n| April 2021 (planned)\n|[[Soyuz MS-17]]\n|style=\"text-align: right\"|\n|-\n|TBD\n|Early 2021 (planned) \n|[[Commercial Crew Program|US-TBD]]\n| colspan=\"3\" |Will transfer to Expedition 66\n\n|}\n\n== See also ==\n* [[List of human spaceflights to the ISS]]\n* [[List of International Space Station crew]]\n* [[List of International Space Station visitors]]\n* [[List of Mir Expeditions]]\n* [[List of commanders of the ISS]]\n\n==Notes==\n{{reflist|group=\"n\"}}\n\n== Citations ==\n{{reflist}}\n\n== General references ==\n*[http://www.nasa.gov/mission_pages/station/expeditions/index.html NASA's space station crew page]\n*[http://www.spacefacts.de/schedule/e_iss.htm SpaceFacts]\n*[http://www.nasa.gov/mission_pages/station/press-releases NASA ISS Expedition Mission News releases]\n\n{{ISS expeditions}}\n{{Space exploration lists and timelines}}\n\n[[Category:Expeditions to the International Space Station| ]]\n[[Category:International Space Station|*]]\n[[Category:Lists of space missions|ISS]]\n[[Category:Spaceflight timelines|International Space Station expeditions]]\n", "text_old": "{{short description|Wikipedia list article}}\n{{lead rewrite|date=August 2019}}\nThis is a chronological '''list of expeditions to the [[International Space Station]] (ISS)'''. All permanent ISS crews are named {{nowrap|\"Expedition ''n''\"}}, where ''n'' is sequentially increased with each expedition. Resupply mission crews and [[space tourist]]s are excluded (see [[List of human spaceflights to the ISS]] for details). ISS commanders are listed in ''italics''. \"Duration\" refers to the crew and does not always correspond to \"Flight up\" or \"Flight down\".\n\n==Completed expeditions==\n{| class=\"wikitable\"\n|- style=\"background-color: #efefef\" valign=\"top\"\n!Expedition\n!Patch\n!Crew\n!Launch date\n!Flight up\n!Landing date\n!Flight down\n!Duration<br><small>(days)</small>\n|-\n![[Expedition 1]]\n|[[Image:Expedition 1 insignia.svg|50px]]\n|{{flagicon|USA}} ''[[William M. Shepherd]]''<br>{{flagicon|RUS}} [[Sergei Krikalev]]<br>{{flagicon|RUS}} [[Yuri Gidzenko]]\n|October 31, 2000<br>07:52 UTC\n|[[Soyuz TM-31]]\n|March 21, 2001<br>07:33 UTC\n|[[STS-102]]\n|style=\"text-align: right\"|140.98\n|-\n![[Expedition 2]]\n|[[Image:Expedition 2 insignia.svg|50px]]\n|{{flagicon|RUS}} ''[[Yuri Usachev]]''<br>{{flagicon|USA}} [[James S. Voss]]<br>{{flagicon|USA}} [[Susan J. Helms]]\n|March 8, 2001<br>11:42 UTC\n|[[STS-102]]\n|August 22, 2001<br>19:24 UTC\n|[[STS-105]]\n|style=\"text-align: right\"|167.28\n|-\n![[Expedition 3]]\n|[[Image:Iss expedition 3 mission patch.svg|50px]]\n|{{flagicon|USA}} ''[[Frank L. Culbertson]]''<br>{{flagicon|RUS}} [[Mikhail Tyurin]]<br>{{flagicon|RUS}} [[Vladimir Dezhurov]]\n|August 10, 2001<br>21:10 UTC\n|[[STS-105]]\n|December 17, 2001<br>17:56 UTC\n|[[STS-108]]\n|style=\"text-align: right\"|128.86\n|-\n![[Expedition 4]]\n|[[Image:Expedition 4 insignia.svg|50px]]\n|{{flagicon|RUS}} ''[[Yury Onufrienko]]''<br>{{flagicon|USA}} [[Carl E. Walz]]<br>{{flagicon|USA}} [[Daniel W. Bursch]]\n|December 5, 2001<br>22:19 UTC\n|[[STS-108]]\n|June 19, 2002<br>09:57 UTC\n|[[STS-111]]\n|style=\"text-align: right\"|195.82\n|-\n![[Expedition 5]]\n|[[Image:Expedition 5 insignia.svg|50px]]\n|{{flagicon|RUS}} ''[[Valery Korzun]]''<br>{{flagicon|RUS}} [[Sergei Treshchev]]<br>{{flagicon|USA}} [[Peggy Whitson]]\n|June 5, 2002<br>21:22 UTC\n|[[STS-111]]\n|December 7, 2002<br>19:37 UTC\n|[[STS-113]]\n|style=\"text-align: right\"|184.93\n|-\n![[Expedition 6]]\n|[[Image:Expedition 6 insignia.svg|50px]]\n|{{flagicon|USA}} ''[[Kenneth D. Bowersox]]''<br>{{flagicon|USA}} [[Donald R. Pettit]]<br>{{flagicon|RUS}} [[Nikolai Budarin]]\n|November 24, 2002<br>00:49 UTC\n|[[STS-113]]\n|May 4, 2003<br>02:04 UTC\n|[[Soyuz TMA-1]]\n|style=\"text-align: right\"|161.05\n|-\n![[Expedition 7]]\n|[[Image:Expedition 7 insignia.svg|50px]]\n|{{flagicon|RUS}} ''[[Yuri Malenchenko]]''<br>{{flagicon|USA}} [[Edward T. Lu]]\n|April 26, 2003<br>03:53 UTC\n|[[Soyuz TMA-2]]\n|October 28, 2003<br>02:40 UTC\n|[[Soyuz TMA-2]]\n|style=\"text-align: right\"|184.93\n|-\n![[Expedition 8]]\n|[[Image:Expedition 8 insignia.svg|50px]]\n|{{flagicon|USA}} ''[[C. Michael Foale]]''<br>{{flagicon|RUS}} [[Alexander Kaleri]]\n|October 18, 2003<br>05:38 UTC\n|[[Soyuz TMA-3]]\n|April 30, 2004<br>00:11 UTC\n|[[Soyuz TMA-3]]\n|style=\"text-align: right\"|194.77\n|-\n![[Expedition 9]]\n|[[Image:Expedition 9 insignia.svg|50px]]\n|{{flagicon|RUS}} ''[[Gennady Padalka]]''<br>{{flagicon|USA}} [[Michael Fincke|E. Michael Fincke]]\n|April 19, 2004<br>03:19 UTC\n|[[Soyuz TMA-4]]\n|October 24, 2004<br>00:32 UTC\n|[[Soyuz TMA-4]]\n|style=\"text-align: right\"|185.66\n|-\n![[Expedition 10]]\n|[[Image:ISS Expedition 10 patch.svg|50px]]\n|{{flagicon|USA}} ''[[Leroy Chiao]]''<br>{{flagicon|RUS}} [[Salizhan Sharipov]]\n|October 14, 2004<br> 03:06 UTC\n|[[Soyuz TMA-5]]\n|April 24, 2005<br>22:08 UTC\n|[[Soyuz TMA-5]]\n|style=\"text-align: right\"|192.79\n|-\n![[Expedition 11]]\n|[[Image:Expedition 11 insignia.svg|50px]]\n|{{flagicon|RUS}} ''[[Sergei Krikalev]]''<br>{{flagicon|USA}} [[John L. Phillips]]\n|April 15, 2005<br> 00:46 UTC\n|[[Soyuz TMA-6]]<br>\n|October 11, 2005 <br> 01:09 UTC\n|[[Soyuz TMA-6]]\n|style=\"text-align: right\"|179.02\n|-\n![[Expedition 12]]\n|[[Image:ISS Expedition 12 patch.svg|50px]]\n|{{flagicon|USA}} ''[[William S. McArthur]]''<br>{{flagicon|RUS}} [[Valeri Tokarev]]\n|October 1, 2005<br> 03:54 UTC\n|[[Soyuz TMA-7]]<br>\n|April 8, 2006 <br> 23:48 UTC\n|[[Soyuz TMA-7]]\n|style=\"text-align: right\"|189.01\n|-\n!rowspan=\"2\"|[[Expedition 13]]\n|rowspan=\"2\"|[[Image:ISS Expedition 13 Patch with Reiter.svg|50px]]\n|{{flagicon|RUS}} ''[[Pavel Vinogradov]]''<br>{{flagicon|USA}} [[Jeffrey N. Williams]]\n|March 30, 2006<br> 02:30 UTC\n|[[Soyuz TMA-8]]\n|{{nowrap|September 28, 2006}}<br> 01:13 UTC\n|[[Soyuz TMA-8]]\n|style=\"text-align: right\"|182.65\n|-\n|{{flagicon|GER}} [[Thomas Reiter]]\n|July 4, 2006 <br>18:38 UTC\n|[[STS-121]]\n|colspan=\"3\"|Transferred to Expedition 14\n|-\n!rowspan=\"3\"|{{nowrap|[[Expedition 14]]}}\n|rowspan=\"3\"|[[Image:ISS Expedition 14 patch.svg|50px]]\n|{{nowrap|{{flagicon|USA}} ''[[Michael E. Lopez-Alegria]]''}}<br>{{flagicon|RUS}} [[Mikhail Tyurin]]\n|{{nowrap|September 18, 2006}}<br> 04:09 UTC\n|[[Soyuz TMA-9]]\n|April 21, 2007<br>12:31 UTC\n|[[Soyuz TMA-9]]\n|style=\"text-align: right\"|215.35\n|-\n|{{flagicon|GER}} [[Thomas Reiter]]\n|colspan=\"2\"|Transferred from Expedition 13\n|December 21, 2006<br> 22:32 UTC\n|[[STS-116]]\n|style=\"text-align: right\"|171.16\n|-\n|{{flagicon|USA}} [[Sunita L. Williams]]\n|December 10, 2006<br>01:47 UTC\n|[[STS-116]]\n|colspan=\"3\"|Transferred to Expedition 15\n|-\n!rowspan=\"3\"|[[Expedition 15]]\n|rowspan=\"3\"|[[Image:ISS Expedition 15 patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Fyodor Yurchikhin]]''<br>{{flagicon|RUS}} [[Oleg Kotov]]<br>\n|April 7, 2007<br>17:31 UTC\n|{{nowrap|[[Soyuz TMA-10]]}}\n|October 21, 2007<br>10:36 UTC\n|{{nowrap|[[Soyuz TMA-10]]}}\n|style=\"text-align: right\"|196.71\n|-\n|{{flagicon|USA}} [[Sunita L. Williams]]\n|colspan=\"2\"|Transferred from Expedition 14\n|June 22, 2007<br>19:49 UTC\n|[[STS-117]]\n|style=\"text-align: right\"|194.75\n|-\n|{{flagicon|USA}} [[Clayton Anderson|Clayton C. Anderson]]\n|June 8, 2007<br>23:38 UTC\n|[[STS-117]]\n|colspan=\"3\"|Transferred to Expedition 16\n|-\n!rowspan=\"5\"|[[Expedition 16]]\n|rowspan=\"5\"|[[Image:ISS Expedition 16 patch.svg|50px]]\n|{{flagicon|USA}} ''[[Peggy Whitson]]''<br>{{flagicon|RUS}} [[Yuri Malenchenko]]\n|October 10, 2007<br>13:22 UTC\n|[[Soyuz TMA-11]]\n|April 19, 2008<br>08:30 UTC\n|[[Soyuz TMA-11]]\n|style=\"text-align: right\"|191.80\n|-\n|{{flagicon|USA}} [[Clayton Anderson|Clayton C. Anderson]]\n|colspan=\"2\"|Transferred from Expedition 15\n|November 7, 2007<br>18:01 UTC\n|[[STS-120]]\n|style=\"text-align: right\"|151.77\n|-\n|{{flagicon|USA}} [[Daniel M. Tani]]\n|October 23, 2007<br>15:38 UTC\n|[[STS-120]]\n|February 20, 2008<br>14:07 UTC\n|[[STS-122]]\n|style=\"text-align: right\"|119.94\n|-\n|{{flagicon|FRA}} [[L\u00e9opold Eyharts]]\n|February 7, 2008<br>19:45 UTC\n|[[STS-122]]\n|March 27, 2008<br>06:28 UTC\n|[[STS-123]]\n|style=\"text-align: right\"|48.55\n|-\n|{{flagicon|USA}} [[Garrett Reisman|Garrett E. Reisman]]\n|March 11, 2008<br>06:28 UTC\n|[[STS-123]]\n|colspan=\"3\"|Transferred to Expedition 17\n|-\n!rowspan=\"3\"|[[Expedition 17]]\n|rowspan=\"3\"|[[Image:ISS Expedition 17 patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Sergey Aleksandrovich Volkov|Sergey Volkov]]''<br>{{flagicon|RUS}} [[Oleg Kononenko]]\n|April 8, 2008<br>11:16 UTC\n|[[Soyuz TMA-12]]\n|October 24, 2008<br>03:37 UTC\n|[[Soyuz TMA-12]]\n|style=\"text-align: right\"|198.68\n|-\n|{{flagicon|USA}} [[Garrett Reisman|Garrett E. Reisman]]\n|colspan=\"2\"|Transferred from Expedition 16\n|June 14, 2008<br>15:16 UTC\n|[[STS-124]]\n|style=\"text-align: right\"|95.37\n|-\n|{{flagicon|USA}} [[Gregory E. Chamitoff]]\n|May 31, 2008<br>21:02 UTC\n|[[STS-124]]\n|colspan=\"3\"|Transferred to Expedition 18\n|-\n!rowspan=\"4\"|[[Expedition 18]]\n|rowspan=\"4\"| [[Image:ISS Expedition 18 patch.svg|50px]]\n|{{flagicon|USA}} ''[[Michael Fincke|E. Michael Fincke]]''<br>{{flagicon|RUS}} [[Yuri Lonchakov]]\n|October 12, 2008<br>07:01 UTC\n|[[Soyuz TMA-13]]\n|April 8, 2009<br>07:16 UTC\n|[[Soyuz TMA-13]]\n|style=\"text-align: right\"|178.01\n|-\n|{{flagicon|USA}} [[Gregory E. Chamitoff]]\n|colspan=\"2\"|Transferred from Expedition 17\n|November 30, 2008<br>21:25 UTC\n|[[STS-126]]\n|style=\"text-align: right\"|183.02\n|-\n|{{flagicon|USA}} [[Sandra H. Magnus]]\n|November 15, 2008<br>00:55 UTC\n|[[STS-126]]\n|March 28, 2009<br>19:13 UTC\n|[[STS-119]]\n|style=\"text-align: right\"|133.76\n|-\n|{{flagicon|JPN}} [[Koichi Wakata]]\n|March 15, 2009<br>23:43 UTC\n|[[STS-119]]\n|colspan=\"3\"|Transferred to Expedition 19\n|-\n!rowspan=\"2\"|[[Expedition 19]]\n|rowspan=\"2\"| [[Image:ISS Expedition 19 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Gennady Padalka]]''<br>{{flagicon|USA}} [[Michael R. Barratt]]\n|March 26, 2009<br>11:49 UTC\n|[[Soyuz TMA-14]]\n|colspan=\"3\" rowspan=\"2\"|Transferred to Expedition 20\n|-\n|{{flagicon|JPN}} [[Koichi Wakata]]\n|colspan=\"2\" height=\"44\"|Transferred from Expedition 18\n|-\n!rowspan=\"5\"|[[Expedition 20]]\n|rowspan=\"5\"|[[Image:ISS Expedition 20 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Gennady Padalka]]''<br>{{flagicon|USA}} [[Michael R. Barratt]]\n|colspan=\"2\" rowspan=\"2\"|Transferred from Expedition 19\n|October 11, 2009<br>04:32 UTC\n|[[Soyuz TMA-14]]\n|style=\"text-align: right\"|198.70\n|-\n|{{flagicon|JPN}} [[Koichi Wakata]]\n|height=\"44\"|July 31, 2009<br>14:48 UTC\n|[[STS-127]]\n|style=\"text-align: right\"|144.62\n|-\n|{{flagicon|USA}} [[Timothy L. Kopra]]\n|July 15, 2009<br>22:03 UTC\n|[[STS-127]]\n|September 12, 2009<br>00:53 UTC\n|[[STS-128]]\n|style=\"text-align: right\"|58.12\n|-\n|{{flagicon|BEL}} [[Frank De Winne]]<br>{{flagicon|RUS}} [[Roman Romanenko]]<br>{{flagicon|CAN}} [[Robert Thirsk|Robert B. Thirsk]]\n|May 27, 2009<br>10:34 UTC\n|[[Soyuz TMA-15]]\n|colspan=\"3\" rowspan=\"2\"|Transferred to Expedition 21\n|-\n|{{flagicon|USA}} [[Nicole P. Stott]]\n|August 29, 2009<br>03:59 UTC\n|[[STS-128]]\n|-\n!rowspan=\"3\"|[[Expedition 21]]\n|rowspan=\"3\"|[[Image:ISS Expedition 21 Patch.svg|50px]]\n|{{flagicon|BEL}} ''[[Frank De Winne]]''<br>{{flagicon|RUS}} [[Roman Romanenko]]<br>{{flagicon|CAN}} [[Robert Thirsk|Robert B. Thirsk]]\n|colspan=\"2\" rowspan=\"2\"|Transferred from Expedition 20\n|December 1, 2009<br>07:16 UTC\n|[[Soyuz TMA-15]]\n|style=\"text-align: right\"|187.86\n|-\n|{{flagicon|USA}} [[Nicole P. Stott]]\n|height=\"44\"|November 27, 2009<br>14:44 UTC\n|[[STS-129]]\n|style=\"text-align: right\"|90.45\n|-\n|{{flagicon|USA}} [[Jeffrey N. Williams]]<br>{{flagicon|RUS}} [[Maksim Surayev]]\n|September 30, 2009<br>07:14 UTC\n|[[Soyuz TMA-16]]\n|colspan=\"3\"|Transferred to Expedition 22\n|-\n!rowspan=\"2\"|[[Expedition 22]]\n|rowspan=\"2\"|[[Image:ISS Expedition 22 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Jeffrey N. Williams]]''<br>{{flagicon|RUS}} [[Maksim Surayev]]\n|colspan=\"2\"|Transferred from Expedition 21\n|March 18, 2010<br>11:24 UTC\n|[[Soyuz TMA-16]]\n|style=\"text-align: right\"|169.04\n|-\n|{{flagicon|RUS}} [[Oleg Kotov]]<br>{{flagicon|USA}} [[Timothy Creamer|Timothy J. Creamer]]<br>{{flagicon|JPN}} [[Soichi Noguchi]]\n|December 20, 2009<br>21:52 UTC\n|[[Soyuz TMA-17]]\n|colspan=\"3\"|Transferred to Expedition 23\n|-\n!rowspan=\"2\"|[[Expedition 23]]\n|rowspan=\"2\"|[[Image:ISS Expedition 23 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Oleg Kotov]]''<br>{{flagicon|USA}} [[Timothy Creamer|Timothy J. Creamer]]<br>{{flagicon|JPN}} [[Soichi Noguchi]]\n|colspan=\"2\"|Transferred from Expedition 22\n|June 2, 2010<br>03:25 UTC\n|[[Soyuz TMA-17]]\n|style=\"text-align: right\"|163.23\n|-\n|{{flagicon|RUS}} [[Aleksandr Skvortsov (cosmonaut)|Aleksandr Skvortsov]]<br>{{flagicon|RUS}} [[Mikhail Korniyenko]]<br>{{flagicon|USA}} [[Tracy Caldwell Dyson|Tracy E. Caldwell Dyson]]\n|April 2, 2010<br>04:05 UTC\n|[[Soyuz TMA-18]]\n|colspan=\"3\"|Transferred to Expedition 24\n|-\n!rowspan=\"2\"|[[Expedition 24]]\n|rowspan=\"2\"|[[Image:ISS Expedition 24 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Aleksandr Skvortsov (cosmonaut)|Aleksandr Skvortsov]]''<br>{{flagicon|RUS}} [[Mikhail Korniyenko]]<br>{{flagicon|USA}} [[Tracy Caldwell Dyson|Tracy E. Caldwell Dyson]]\n|colspan=\"2\"|Transferred from Expedition 23\n|September 25, 2010<br>05:23 UTC\n|[[Soyuz TMA-18]]\n|style=\"text-align: right\"|176.05\n|-\n|{{flagicon|USA}} [[Douglas H. Wheelock]]<br>{{flagicon|USA}} [[Shannon Walker]]<br>{{flagicon|RUS}} [[Fyodor Yurchikhin]]\n|June 15, 2010<br>21:35 UTC\n|[[Soyuz TMA-19]]\n|colspan=\"3\"|Transferred to Expedition 25\n|-\n!rowspan=\"2\"|[[Expedition 25]]\n|rowspan=\"2\"|[[Image:ISS Expedition 25 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Douglas H. Wheelock]]''<br>{{flagicon|USA}} [[Shannon Walker]]<br>{{flagicon|RUS}} [[Fyodor Yurchikhin]]\n|colspan=\"2\"|Transferred from Expedition 24\n|November 26, 2010<br>04:46 UTC\n|[[Soyuz TMA-19]]\n|style=\"text-align: right\"|163.30\n|-\n|{{flagicon|USA}} [[Scott Kelly (astronaut)|Scott J. Kelly]]<br>{{flagicon|RUS}} [[Aleksandr Kaleri]]<br>{{flagicon|RUS}} [[Oleg Skripochka]]\n|October 7, 2010<br>23:10 UTC\n|{{nowrap|[[Soyuz TMA-01M]]}}\n|colspan=\"3\"|Transferred to Expedition 26\n|-\n!rowspan=\"2\"|[[Expedition 26]]\n|rowspan=\"2\"|[[Image:ISS Expedition 26 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Scott Kelly (astronaut)|Scott J. Kelly]]''<br>{{flagicon|RUS}} [[Aleksandr Kaleri]]<br>{{flagicon|RUS}} [[Oleg Skripochka]]\n|colspan=\"2\"|Transferred from Expedition 25\n|March 16, 2011<br>07:54 UTC\n|{{nowrap|[[Soyuz TMA-01M]]}}\n|style=\"text-align: right\"|159.36\n|-\n|{{flagicon|RUS}} [[Dimitri Kondratyev]]<br>{{flagicon|USA}} [[Catherine G. Coleman]]<br>{{flagicon|ITA}} [[Paolo Nespoli]]\n|December 15, 2010<br>19:09 UTC\n|[[Soyuz TMA-20]]\n|colspan=\"3\"|Transferred to Expedition 27\n|-\n!rowspan=\"2\"|[[Expedition 27]]\n|rowspan=\"2\"|[[Image:ISS Expedition 27 Patch.png|50px]]\n|{{flagicon|RUS}} ''[[Dimitri Kondratyev]]''<br>{{flagicon|USA}} [[Catherine G. Coleman]]<br>{{flagicon|ITA}} [[Paolo Nespoli]]\n|colspan=\"2\"|Transferred from Expedition 26\n|May 24, 2011<br>02:27 UTC\n|[[Soyuz TMA-20]]\n|style=\"text-align: right\"|160.10\n|-\n|{{flagicon|RUS}} [[Andrei Borisenko]]<br>{{nowrap|{{flagicon|RUS}} [[Aleksandr Samokutyayev]]}}<br>{{flagicon|USA}} [[Ronald J. Garan]]\n|April 4, 2011<br>22:18 UTC\n|[[Soyuz TMA-21]]\n|colspan=\"3\"|Transferred to Expedition 28\n|-\n!rowspan=\"2\"|[[Expedition 28]]\n|rowspan=\"2\"|[[Image:ISS Expedition 28 Patch.png|50px]]\n|{{flagicon|RUS}} ''[[Andrei Borisenko]]''<br>{{flagicon|RUS}} [[Aleksandr Samokutyayev]]<br>{{flagicon|USA}} [[Ronald J. Garan]]\n|colspan=\"2\"|Transferred from Expedition 27\n|September 16, 2011<br>00:38 UTC\n|[[Soyuz TMA-21]]\n|style=\"text-align: right\"|164.10\n|-\n|{{flagicon|USA}} [[Michael E. Fossum]]<br>{{flagicon|RUS}} [[Sergey Alexandrovich Volkov|Sergey Volkov]]<br>{{flagicon|JPN}} [[Satoshi Furukawa]]\n|June 7, 2011<br>20:12 UTC\n|[[Soyuz TMA-02M]]\n|colspan=\"3\"|Transferred to Expedition 29\n|-\n!rowspan=\"2\"|[[Expedition 29]]\n|rowspan=\"2\"|[[Image:ISS Expedition 29 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Michael E. Fossum]]''<br>{{flagicon|RUS}} [[Sergey Alexandrovich Volkov|Sergey Volkov]]<br>{{flagicon|JPN}} [[Satoshi Furukawa]]\n|colspan=\"2\"|Transferred from Expedition 28\n|November 22, 2011<br>02:26 UTC\n|[[Soyuz TMA-02M]]\n|style=\"text-align: right\"|167.26\n|-\n|{{flagicon|USA}} [[Daniel C. Burbank]]<br>{{flagicon|RUS}} [[Anton Shkaplerov]]<br>{{flagicon|RUS}} [[Anatoli Ivanishin]]\n|November 14, 2011<br>04:14 UTC\n|[[Soyuz TMA-22]]\n|colspan=\"3\"|Transferred to Expedition 30\n|-\n!rowspan=\"2\"|[[Expedition 30]]\n|rowspan=\"2\"|[[Image:ISS Expedition 30 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Daniel C. Burbank]]''<br>{{flagicon|RUS}} [[Anton Shkaplerov]]<br>{{flagicon|RUS}} [[Anatoli Ivanishin]]\n|colspan=\"2\"|Transferred from Expedition 29\n|April 27, 2012<br>11:45 UTC\n|[[Soyuz TMA-22]]\n|style=\"text-align: right\"|165.31\n|-\n|{{flagicon|RUS}} [[Oleg Kononenko]]<br>{{flagicon|USA}} [[Donald R. Pettit]]<br>{{flagicon|NED}} [[Andr\u00e9 Kuipers]]\n|December 21, 2011<br>13:16 UTC\n|[[Soyuz TMA-03M]]\n|colspan=\"3\"|Transferred to Expedition 31\n|-\n!rowspan=\"2\"|[[Expedition 31]]\n|rowspan=\"2\"|[[Image:ISS Expedition 31 Patch.png|50px]]\n|{{flagicon|RUS}} ''[[Oleg Kononenko]]''<br>{{flagicon|USA}} [[Donald R. Pettit]]<br>{{flagicon|NED}} [[Andr\u00e9 Kuipers]]\n|colspan=\"2\"|Transferred from Expedition 30\n|July 1, 2012<br>08:14 UTC\n|[[Soyuz TMA-03M]]\n|style=\"text-align: right\"|192.83\n|-\n|{{flagicon|RUS}} [[Gennady Padalka]]<br>{{flagicon|RUS}} [[Sergei Revin]]<br>{{flagicon|USA}} [[Joseph Acaba]]\n|May 15, 2012<br>03:01 UTC\n|[[Soyuz TMA-04M]]\n|colspan=\"3\"|Transferred to Expedition 32\n|-\n!rowspan=\"2\"|[[Expedition 32]]\n|rowspan=\"2\"|[[Image:ISS Expedition 32 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Gennady Padalka]]''<br>{{flagicon|RUS}} [[Sergei Revin]]<br>{{flagicon|USA}} [[Joseph Acaba]]\n|colspan=\"2\"|Transferred from Expedition 31\n|September 17, 2012<br>02:53 UTC\n|[[Soyuz TMA-04M]]\n|style=\"text-align: right\"|124.99\n|-\n|{{flagicon|USA}} [[Sunita L. Williams]]<br>{{flagicon|RUS}} [[Yuri Malenchenko]]<br>{{flagicon|JPN}} [[Akihiko Hoshide]]\n|July 15, 2012<br>02:40 UTC\n|[[Soyuz TMA-05M]]\n|colspan=\"3\"|Transferred to Expedition 33\n|-\n!rowspan=\"2\"|[[Expedition 33]]\n|rowspan=\"2\"|[[Image:ISS Expedition 33 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Sunita L. Williams]]''<br>{{flagicon|RUS}} [[Yuri Malenchenko]]<br>{{flagicon|JPN}} [[Akihiko Hoshide]]\n|colspan=\"2\"|Transferred from Expedition 32\n|November 19, 2012<br>01:56 UTC\n|[[Soyuz TMA-05M]]\n|style=\"text-align: right\"|126.97\n|-\n|{{flagicon|USA}} [[Kevin A. Ford]]<br>{{flagicon|RUS}} [[Oleg Novitskiy]]<br>{{flagicon|RUS}} [[Evgeny Tarelkin]]\n|October 23, 2012<br>10:51 UTC<br>\n|[[Soyuz TMA-06M]]\n|colspan=\"3\"|Transferred to Expedition 34\n|-\n!rowspan=\"2\"|[[Expedition 34]]\n|rowspan=\"2\"|[[Image:ISS Expedition 34 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Kevin A. Ford]]''<br>{{flagicon|RUS}} [[Oleg Novitskiy]]<br>{{flagicon|RUS}} [[Evgeny Tarelkin]]\n|colspan=\"2\"|Transferred from Expedition 33\n|March 15, 2013<br>03:06 UTC<br>\n|[[Soyuz TMA-06M]]\n|style=\"text-align: right\"|143.18\n|-\n|{{flagicon|CAN}} [[Chris Hadfield]]<br>{{flagicon|RUS}} [[Roman Romanenko]]<br>{{flagicon|USA}} [[Thomas H. Marshburn]]\n|December 19, 2012<br>11:12 UTC<br>\n|[[Soyuz TMA-07M]]\n|colspan=\"3\"|Transferred to Expedition 35\n|-\n!rowspan=\"2\"|[[Expedition 35]]\n|rowspan=\"2\"|[[Image:ISS Expedition 35 Patch.svg|50px]]\n|{{flagicon|CAN}} ''[[Chris Hadfield]]''<br>{{flagicon|RUS}} [[Roman Romanenko]]<br>{{flagicon|USA}} [[Thomas H. Marshburn]]\n|colspan=\"2\"|Transferred from Expedition 34\n|May 14, 2013<br>03:31 UTC<br>\n|[[Soyuz TMA-07M]]\n|style=\"text-align: right\"|145.64\n|-\n|{{flagicon|RUS}} [[Pavel Vinogradov]]<br>{{flagicon|RUS}} [[Aleksandr Misurkin]]<br>{{flagicon|USA}} [[Christopher J. Cassidy]]\n| 28 March 2013<br>20:43 UTC\n|[[Soyuz TMA-08M]]\n|colspan=\"3\"|Transferred to Expedition 36\n|-\n!rowspan=\"2\"|[[Expedition 36]]\n|rowspan=\"2\"|[[Image:ISS Expedition 36 Patch.png|50px]]\n|{{flagicon|RUS}} ''[[Pavel Vinogradov]]''<br>{{flagicon|RUS}} [[Aleksandr Misurkin]]<br>{{flagicon|USA}} [[Christopher J. Cassidy]]\n|colspan=\"2\"|Transferred from Expedition 35\n|September 11, 2013<br>02:58 UTC\n|[[Soyuz TMA-08M]]\n|style=\"text-align: right\"|166.25\n|-\n|{{flagicon|RUS}} [[Fyodor Yurchikhin]]<br>{{flagicon|USA}} [[Karen L. Nyberg]]<br>{{flagicon|ITA}} [[Luca Parmitano]]\n|May 28, 2013<br>20:31 UTC\n|[[Soyuz TMA-09M]]\n|colspan=\"3\"|Transferred to Expedition 37\n|-\n!rowspan=\"2\"|[[Expedition 37]]\n|rowspan=\"2\"|[[Image:ISS Expedition 37 Patch.png|50px]]\n|{{flagicon|RUS}} ''[[Fyodor Yurchikhin]]''<br>{{flagicon|USA}} [[Karen L. Nyberg]]<br>{{flagicon|ITA}} [[Luca Parmitano]]\n|colspan=\"2\"|Transferred from Expedition 36\n|November 11, 2013<br>02:49 UTC\n|[[Soyuz TMA-09M]]\n|style=\"text-align: right\"|166.25\n|-\n|{{flagicon|RUS}} [[Oleg Kotov]]<br>{{flagicon|RUS}} [[Sergey Ryazansky]]<br>{{flagicon|USA}} [[Michael S. Hopkins]]\n|September 25, 2013<br>20:58 UTC\n|[[Soyuz TMA-10M]]\n|colspan=\"3\"|Transferred to Expedition 38\n|-\n!rowspan=\"2\"|[[Expedition 38]]\n|rowspan=\"2\"|[[Image:ISS Expedition 38 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Oleg Kotov]]''<br>{{flagicon|RUS}} [[Sergey Ryazansky]]<br>{{flagicon|USA}} [[Michael S. Hopkins]]\n|colspan=\"2\"|Transferred from Expedition 37\n|March 11, 2014<br>03:24 UTC\n|[[Soyuz TMA-10M]]\n|style=\"text-align: right\"|166.25\n|-\n|{{flagicon|JPN}} [[Koichi Wakata]]<br>{{flagicon|RUS}} [[Mikhail Tyurin]]<br>{{flagicon|USA}} [[Richard A. Mastracchio]]\n|November 6, 2013<br>04:14 UTC\n|[[Soyuz TMA-11M]]\n|colspan=\"3\"|Transferred to Expedition 39\n|-\n!rowspan=\"2\"|[[Expedition 39]]\n|rowspan=\"2\"|[[Image:ISS Expedition 39 Patch.svg|50px]]\n|{{flagicon|JPN}} ''[[Koichi Wakata]]''<br>{{flagicon|RUS}} [[Mikhail Tyurin]]<br>{{flagicon|USA}} [[Richard A. Mastracchio]]\n|colspan=\"2\"|Transferred from Expedition 38\n|May 14, 2014<br>01:58 UTC\n|[[Soyuz TMA-11M]]\n|style=\"text-align: right\"|187.91\n|-\n|{{flagicon|RUS}} [[Aleksandr Skvortsov (cosmonaut)|Aleksandr Skvortsov]]<br>{{flagicon|RUS}} [[Oleg Artemyev]]<br>{{flagicon|USA}} [[Steven R. Swanson]]\n|March 25, 2014<br>21:17 UTC\n|[[Soyuz TMA-12M]]\n|colspan=\"3\"|Transferred to Expedition 40\n|-\n!rowspan=\"2\"|[[Expedition 40]]\n|rowspan=\"2\"|[[Image:ISS Expedition 40 Patch.png|50px]] \n|{{flagicon|USA}} ''[[Steven R. Swanson]]''<br>{{flagicon|RUS}} [[Aleksandr Skvortsov (cosmonaut)|Aleksandr Skvortsov]]<br>{{flagicon|RUS}} [[Oleg Artemyev]]\n|colspan=\"2\"|Transferred from Expedition 39\n|September 11, 2014<br>02:23 UTC\n|[[Soyuz TMA-12M]]\n|style=\"text-align: right\"|169.20\n|-\n|{{flagicon|USA}} [[Gregory R. Wiseman]]<br>{{flagicon|RUS}} [[Maksim Surayev]]<br>{{flagicon|GER}} [[Alexander Gerst]]\n|May 28, 2014<br>19:57 UTC\n|[[Soyuz TMA-13M]]\n|colspan=\"3\"|Transferred to Expedition 41\n|-\n!rowspan=\"2\"|[[Expedition 41]]\n|rowspan=\"2\"|[[Image:ISS Expedition 41 Patch.svg|50px]] \n|{{flagicon|RUS}} ''[[Maksim Surayev]]''<br>{{flagicon|USA}} [[Gregory R. Wiseman]]<br>{{flagicon|GER}} [[Alexander Gerst]]\n|colspan=\"2\"|Transferred from Expedition 40\n|10 November 2014<br>03:58 UTC\n|[[Soyuz TMA-13M]]\n|style=\"text-align: right\"|165.33\n|-\n|{{flagicon|RUS}} [[Aleksandr Samokutyayev]]<br>{{flagicon|RUS}} [[Yelena Serova]]<br>{{flagicon|USA}} [[Barry E. Wilmore]]\n|25 September 2014<br>20:25 UTC\n|[[Soyuz TMA-14M]]\n|colspan=\"3\"|Transferred to Expedition 42\n|-\n!rowspan=\"2\"|[[Expedition 42]]\n|rowspan=\"2\"|[[Image:ISS Expedition 42 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Barry E. Wilmore]]''<br>{{flagicon|RUS}} [[Aleksandr Samokutyayev]]<br>{{flagicon|RUS}} [[Yelena Serova]]\n|colspan=\"2\"|Transferred from Expedition 41\n|12 March 2015<br>2:07 UTC\n|[[Soyuz TMA-14M]]\n|style=\"text-align: right\"|167.25\n|-\n|{{flagicon|RUS}} [[Anton Shkaplerov]]<br>{{flagicon|ITA}} [[Samantha Cristoforetti]]<br>{{flagicon|USA}} [[Terry W. Virts]]\n|23 November 2014<br>21:01 UTC\n|[[Soyuz TMA-15M]]\n|colspan=\"3\"|Transferred to Expedition 43\n|-\n!rowspan=\"3\"|[[Expedition 43]]\n|rowspan=\"3\"|[[Image:ISS Expedition 43 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Terry W. Virts]]''<br>{{flagicon|RUS}} [[Anton Shkaplerov]]<br>{{flagicon|ITA}} [[Samantha Cristoforetti]]\n|colspan=\"2\"|Transferred from Expedition 42\n|11 June 2015<br>13:44 UTC<ref name=\"landing\">{{cite web|url=http://www.nasa.gov/press-release/international-space-station-partners-adjust-spacecraft-schedule|title=International Space Station Partners Adjust Spacecraft Schedule|author=NASA|year=2015}}</ref><ref>{{Cite web|title = Expedition 43 Crew Departs Space Station, Lands Safely in Kazakhstan|url = http://www.nasa.gov/press-release/expedition-43-crew-departs-space-station-lands-safely-in-kazakhstan|accessdate = 2015-06-11}}</ref>\n|[[Soyuz TMA-15M]]\n|style=\"text-align: right\"|199.70\n|-\n|{{flagicon|RUS}} [[Gennady Padalka]]<br>\n|rowspan=\"2\"|27 March 2015<br>19:42 UTC\n|rowspan=\"2\"|[[Soyuz TMA-16M]]\n|colspan=\"3\"|Transferred to Expedition 44\n|-\n|{{flagicon|RUS}} [[Mikhail Korniyenko]]<br>{{flagicon|USA}} [[Scott J. Kelly]]\n|colspan=\"3\"|Transferred to Expeditions 44, 45 and 46<br>'''[[ISS year long mission|one year mission]]''' [[File:ISS Yearlong mission patch.png|40px]]\n|-\n!rowspan=\"3\"|[[Expedition 44]]\n|rowspan=\"3\"|[[Image:ISS Expedition 44 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Gennady Padalka]]''\n|rowspan=\"2\" colspan=\"2\"|Transferred from Expedition 43\n|12 September 2015<br>00:51 UTC<ref>{{cite web|last1=Harwood|first1=William|title=Soyuz lands safely in Kazakhstan|url=https://spaceflightnow.com/2015/09/12/soyuz-lands-safely-in-kazakhstan/|website=Spaceflight Now|publisher=Spaceflight Now Inc.|accessdate=3 November 2015}}</ref>\n|[[Soyuz TMA-16M]]\n|style=\"text-align: right\"|169\n|-\n|{{flagicon|RUS}} [[Mikhail Korniyenko]]<br>{{flagicon|USA}} [[Scott J. Kelly]]\n|colspan=\"3\"|Transferred to Expedition 45 and 46 <br> '''[[ISS year long mission|one year mission]]''' [[File:ISS Yearlong mission patch.png|40px]]\n|-\n|{{flagicon|RUS}} [[Oleg Kononenko]]<br>{{flagicon|JPN}} [[Kimiya Yui]]<br>{{flagicon|USA}} [[Kjell N. Lindgren]]\n|22 July 2015<br>21:02 UTC<ref>{{Cite web|title = Launch, Docking Returns Space Station Crew to Full Strength|url = http://www.nasa.gov/press-release/launch-docking-returns-international-space-station-crew-to-full-strength|accessdate = 2015-07-23}}</ref>\n|[[Soyuz TMA-17M]]\n|colspan=\"3\"|Transferred to Expedition 45\n|-\n!rowspan=\"3\"|[[Expedition 45]]\n|rowspan=\"3\"|[[Image:ISS Expedition 45 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Scott J. Kelly]]''<br>{{flagicon|RUS}} [[Mikhail Korniyenko]]\n|colspan=\"2\" rowspan=\"2\"|Transferred from Expedition 44\n|colspan=\"3\"|Transferred to Expedition 46\n|-\n|{{flagicon|RUS}} [[Oleg Kononenko]]<br>{{flagicon|JPN}} [[Kimiya Yui]]<br>{{flagicon|USA}} [[Kjell N. Lindgren]]\n|11 December 2015<br>13:12 UTC\n|[[Soyuz TMA-17M]]\n|style=\"text-align: right\"|141.66\n|-\n|{{flagicon|RUS}} [[Sergey Alexandrovich Volkov|Sergey Volkov]]\n|2 September 2015<br>04:37 UTC\n|[[Soyuz TMA-18M]]\n|colspan=\"3\"|Transferred to Expedition 46\n|-\n!rowspan=\"3\"|[[Expedition 46]]\n|rowspan=\"3\"|[[Image:ISS Expedition 46 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Scott Kelly (astronaut)|Scott J. Kelly]]''<br>{{flagicon|RUS}} [[Mikhail Korniyenko]]\n|colspan=\"2\" rowspan=\"2\"|Transferred from Expedition 45\n|rowspan=\"2\"|2 March 2016 04:25:27 UTC\n|rowspan=\"2\"|[[Soyuz TMA-18M]]\n|style=\"text-align: right\"|340<br> <ref group=\"n\">Kelly and Korniyenko were to remain aboard the ISS for approximately one year. This duration will measure the length of their cumulative stay in space from Expedition 43 through Expedition 46.</ref><ref>{{cite web|url=http://www.nasaspaceflight.com/2016/03/year-in-space-mission-end-soyuz-return-earth/|title=Year In Space mission ends with Soyuz TMA-18M return|publisher=nasaspaceflight.com|author=Gebhardt,Chris|date=2016-03-01|accessdate=2016-03-06}}</ref>\n|-\n|{{flagicon|RUS}} [[Sergey Alexandrovich Volkov|Sergey Volkov]]\n|style=\"text-align: right\"|181<br> <ref group=\"n\">This duration will measure the length of Soyuz TMA-18M from start to finish.</ref>\n|-\n|{{flagicon|RUS}} [[Yuri Malenchenko]]<br>{{flagicon|UK}} [[Timothy Peake]]<br>{{flagicon|USA}} [[Timothy Kopra]]\n|15 December 2015<br>11:03 UTC\n|[[Soyuz TMA-19M]]\n|colspan=\"3\"|Transferred to Expedition 47\n|-\n!rowspan=\"2\"|[[Expedition 47]]\n|rowspan=\"2\"|[[Image:ISS Expedition 47 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Timothy Kopra]]''<br>{{flagicon|UK}} [[Tim Peake]]<br>{{flagicon|RUS}} [[Yuri Malenchenko]]\n|colspan=\"2\"|Transferred from Expedition 46\n|18 June 2016<br>9:15 UTC<ref>{{Cite web|url=https://www.bbc.co.uk/news/science-environment-36519886|title=UK astronaut Tim Peake returns to Earth|accessdate=18 June 2016|publisher=BBC News}}</ref>\n|[[Soyuz TMA-19M]]\n|style=\"text-align: right\"|185.91\n|-\n|{{flagicon|RUS}} [[Aleksey Ovchinin]]<br>{{flagicon|RUS}} [[Oleg Skripochka]]<br>{{flagicon|USA}} [[Jeffrey Williams (astronaut)|Jeffrey Williams]]\n|18 March 2016 21:26:38 UTC\n|[[Soyuz TMA-20M]]\n|colspan=\"3\"|Transferred to Expedition 48\n|-\n!rowspan=\"2\"|[[Expedition 48]]\n|rowspan=\"2\"|[[Image:ISS Expedition 48 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Jeffrey Williams (astronaut)|Jeffrey Williams]]''<br>{{flagicon|RUS}} [[Oleg Skripochka]]<br>{{flagicon|RUS}} [[Aleksey Ovchinin]]\n|colspan=\"2\"|Transferred from Expedition 47\n|7 September 2016<br>01:13 UTC<ref>{{cite web|title=Expedition 48 Lands With Most Experienced NASA Astronaut|publisher=NASA|url=https://blogs.nasa.gov/spacestation/2016/09/06/expedition-48-lands-with-most-experienced-nasa-astronaut/|date=6 September 2016}}</ref>\n|[[Soyuz TMA-20M]]\n|style=\"text-align: right\"|172<br><ref>{{cite web|title=Roscosmos. Soyuz TMA-20M crew return|publisher=ROSCOSMOS|url=http://en.roscosmos.ru/20643/|date=7 September 2016}}</ref>\n|-\n|{{flagicon|RUS}} [[Anatoli Ivanishin]]<br>{{flagicon|JPN}} [[Takuya Onishi]]<br>{{flagicon|USA}} [[Kathleen Rubins]]\n|7 July 2016<br>1:36 UTC<ref>{{cite web|title=Crew Launches for Two-Day Ride to Station|publisher=NASA|url=https://blogs.nasa.gov/spacestation/2016/07/06/crew-launches-for-two-day-ride-to-station/|date=9 July 2016}}</ref>\n|[[Soyuz MS-01]]\n|colspan=\"3\"|Transferred to Expedition 49\n|-\n!rowspan=\"2\"|[[Expedition 49]]\n|rowspan=\"2\"|[[Image:ISS Expedition 49 Patch.png|50px]]\n|{{flagicon|RUS}} ''[[Anatoli Ivanishin]]''<br>{{flagicon|JPN}} [[Takuya Onishi]]<br>{{flagicon|USA}} [[Kathleen Rubins]]\n|colspan=\"2\"|Transferred from Expedition 48\n|30 October 2016<br>3:58 UTC<ref>{{cite web|title=NASA Astronaut Kate Rubins, Crewmates Safely Return From the Space Station|publisher=NASA|url=http://www.nasa.gov/press-release/nasa-astronaut-kate-rubins-crewmates-safely-return-from-the-space-station|date=30 October 2016}}</ref>\n|[[Soyuz MS-01]]\n|style=\"text-align: right\"|115<br>\n|-\n|{{flagicon|USA}} [[Shane Kimbrough]]<br>{{flagicon|RUS}} [[Andrei Borisenko]]<br>{{flagicon|RUS}} [[Sergey Nikolayevich Ryzhikov|Sergey Ryzhikov]]\n|19 October 2016<br>8:05 UTC<ref>{{cite web|title=Soyuz MS-02 spacecraft docks with Expedition 49/50 crew|publisher=nasaspaceflight|url=https://www.nasaspaceflight.com/2016/10/soyuz-ms-02-expeditions-4950-launch/|date=19 October 2016}}</ref>\n|[[Soyuz MS-02]]\n|colspan=\"3\"|Transferred to Expedition 50\n|-\n! rowspan=\"2\"|[[Expedition 50]] \n| rowspan=\"2\"|[[Image:ISS Expedition 50 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Shane Kimbrough]]''<br>{{flagicon|RUS}} [[Andrei Borisenko]]<br>{{flagicon|RUS}} [[Sergey Nikolayevich Ryzhikov|Sergey Ryzhikov]]\n| colspan=\"2\" |Transferred from Expedition 49\n|10 April 2017<br>11:20 UTC\n|[[Soyuz MS-02]]\n|style=\"text-align: right\"|173\n|-\n|{{flagicon|USA}} [[Peggy Whitson]]<br>{{flagicon|RUS}} [[Oleg Novitskiy]]<br>{{flagicon|FRA}} [[Thomas Pesquet]]\n|17 November 2016<br>20:17 UTC\n|[[Soyuz MS-03]]\n| colspan=\"3\" |Transferred to Expedition 51\n|-\n! rowspan=\"3\" |[[Expedition 51]]\n| rowspan=\"3\" |[[Image:ISS Expedition 51 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Peggy Whitson]]''\n| colspan=\"2\" rowspan=\"2\"|Transferred from Expedition 50\n| colspan=\"3\" |Transferred to Expedition 52\n|-\n|{{flagicon|RUS}} [[Oleg Novitskiy]]<br>{{flagicon|FRA}} [[Thomas Pesquet]]\n|2 June 2017 14:10 UTC\n|[[Soyuz MS-03]]\n|style=\"text-align: right\"|196.72\n|-\n|{{flagicon|RUS}} [[Fyodor Yurchikhin]]<br>{{flagicon|USA}} [[Jack D. Fischer]]\n|20 April 2017\n07:13 UTC\n|[[Soyuz MS-04]]\n| colspan=\"3\" |Transferred to Expedition 52\n|-\n! rowspan=\"3\" |[[Expedition 52]]\n| rowspan=\"3\" |[[Image:ISS Expedition 52 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Fyodor Yurchikhin]]''<br>{{flagicon|USA}} [[Jack D. Fischer]]\n| colspan=\"2\" rowspan=\"2\" |Transferred from Expedition 51\n| rowspan=\"2\" |3 September 2017 1:22 UTC\n| rowspan=\"2\" |[[Soyuz MS-04]]<ref name=\"ms04land\">{{cite web|author=1:13 PM ET |url=https://www.npr.org/sections/thetwo-way/2017/09/03/548295156/-american-space-ninja-peggy-whitson-back-on-earth-after-record-breaking-flight |title='American Space Ninja' Back On Earth After Record-Breaking Flight |publisher=NPR |date=2017-08-06 |accessdate=2017-09-03}}</ref>\n|style=\"text-align: right\"|135.3\n|-\n|{{Flagicon|USA}} [[Peggy Whitson]]\n|style=\"text-align: right\"|289.1<br> <ref group=n>Whitson remained onboard the ISS for three extra months. This duration is for the length of her cumulative stay in space from Expedition 50 through Expedition 52.</ref><ref name=\"spacefacts\">{{cite web|url=http://www.spacefacts.de/bios/astronauts/english/whitson_peggy.htm |title=Astronaut biography: Peggy Whitson |publisher=spacefacts.com |access-date=September 5, 2017}}</ref>\n|-\n|{{flagicon|USA}} [[Randolph Bresnik]]<br>{{flagicon|ITA}} [[Paolo Nespoli]]<br>{{flagicon|RUS}} [[Sergey Ryazansky]]\n|28 July 2017<br>15:41 UTC\n|[[Soyuz MS-05]]\n| colspan=\"3\" | Transferred to Expedition 53\n|-\n!rowspan=\"2\"|[[Expedition 53]]\n|rowspan=\"2\"|[[Image:ISS Expedition 53 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Randolph Bresnik]]''<br>{{flagicon|ITA}} [[Paolo Nespoli]]<br>{{flagicon|RUS}} [[Sergey Ryazansky]]\n|colspan=\"2\"|Transferred from Expedition 52\n||14 December 2017 08:38 UTC<ref>{{cite web |url=https://www.nasaspaceflight.com/2017/12/soyuz-ms-05-journey-back-earth/ |title=Soyuz MS-05 returns crew back to Earth |date=December 14, 2017 |accessdate=December 14, 2017}}</ref>\n|[[Soyuz MS-05]]\n|style=\"text-align: right\"|139\n|-\n|{{flagicon|RUS}} [[Alexander Misurkin]]<br>{{flagicon|USA}} [[Mark Vande Hei]]<br>{{flagicon|USA}} [[Joseph Acaba]]\n|12 September 2017<br>21:17 UTC\n|[[Soyuz MS-06]]\n|colspan=\"3\"|Transferred to Expedition 54\n|-\n!rowspan=\"2\"|[[Expedition 54]]\n|rowspan=\"2\"|[[Image:ISS Expedition 54 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Alexander Misurkin]]''<br>{{flagicon|USA}} [[Mark Vande Hei]]<br>{{flagicon|USA}} [[Joseph Acaba]]\n|colspan=\"2\"|Transferred from Expedition 53\n|28 February 2018 02:31 UTC<br />\n|[[Soyuz MS-06]]\n|style=\"text-align: right\"|168\n|-\n|{{flagicon|RUS}} [[Anton Shkaplerov]]<br>{{flagicon|USA}} [[Scott Tingle]]<br>{{flagicon|JPN}} [[Norishige Kanai]]\n|17 December 2017<br>7:21 UTC\n|[[Soyuz MS-07]]\n|colspan=\"3\"|Transferred to Expedition 55\n|-\n!rowspan=\"2\"|[[Expedition 55]]\n|rowspan=\"2\"|[[Image:ISS Expedition 55 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Anton Shkaplerov]]''<br>{{flagicon|USA}} [[Scott Tingle]]<br>{{flagicon|JPN}} [[Norishige Kanai]]\n|colspan=\"2\"|Transferred from Expedition 54\n|3 June 2018<br />12:39 UTC\n|[[Soyuz MS-07]]\n|style=\"text-align: right\"|168\n|-\n|{{flagicon|USA}} [[Andrew Feustel]]<br>{{flagicon|RUS}} [[Oleg Artemyev]]<br>{{flagicon|USA}} [[Richard R. Arnold|Richard Arnold]]\n|21 March 2018<br>17:44 UTC<ref name=\"launch\">{{cite \nweb|url=https://www.nasaspaceflight.com/2018/03/roscosmos-soyuz-ms-08-mission-first-crew-launch-2018/|title=Soyuz MS-08 mission, first crew launch of 2018, docks with ISS|date=March 21,\n2018|first=Chris |last=Gebhardt| publisher=nasaspaceflight.com}}</ref>\n|[[Soyuz MS-08]]\n|colspan=\"3\"|Transferred to Expedition 56\n|-\n!rowspan=\"2\"|[[Expedition 56]]\n|rowspan=\"2\"|[[Image:ISS Expedition 56 Patch.svg|50px]]\n|{{flagicon|USA}} ''[[Andrew Feustel]]''<br>{{flagicon|RUS}} [[Oleg Artemyev]]<br>{{flagicon|USA}} [[Richard R. Arnold|Richard Arnold]]\n|colspan=\"2\"|Transferred from Expedition 55\n|4 October 2018<br />11:44:45 UTC<ref name=\"Soyuz MS-08\">{{cite web |title=Soyuz MS-08 |url=http://spacefacts.de/mission/english/soyuz-ms-08.htm |website=spacefacts.de |accessdate=6 October 2018}}</ref>\n|[[Soyuz MS-08]]\n|style=\"text-align: right\"|196\n|-\n|{{flagicon|GER}} [[Alexander Gerst]]<br>{{flagicon|RUS}} [[Sergey Prokopyev (cosmonaut)|Sergey Prokopyev]]<br>{{flagicon|USA}} [[Serena M. Au\u00f1\u00f3n-Chancellor|Serena Au\u00f1\u00f3n-Chancellor]]\n|6 June 2018<br>11:12 UTC\n|[[Soyuz MS-09]]\n|colspan=\"3\"|Transferred to Expedition 57\n|-\n! rowspan=\"2\" |[[Expedition 57]]\n| rowspan=\"2\" |[[Image:ISS Expedition 57 Patch.svg|50px]]\n|{{flagicon|GER}} ''[[Alexander Gerst]]''<br>{{flagicon|RUS}} [[Sergey Prokopyev (cosmonaut)|Sergey Prokopyev]]<br>{{flagicon|USA}} [[Serena M. Au\u00f1\u00f3n-Chancellor|Serena Au\u00f1\u00f3n-Chancellor]]\n| colspan=\"2\" |Transferred from Expedition 56\n|20 December 2018<br/>05:02 UTC\n|[[Soyuz MS-09]]\n|style=\"text-align: right\"|197\n|-\n|{{flagicon|RUS}} [[Oleg Kononenko]]<br>{{flagicon|CAN}} [[David Saint-Jacques]]<br>{{flagicon|USA}} [[Anne McClain]]\n|3 December 2018<br/>11:31 UTC\n|[[Soyuz MS-11]]\n| colspan=\"3\" |Transferred to Expedition 58\n|-\n![[Expedition 58]]\n|[[File:ISS Expedition 58 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Oleg Kononenko]]''<br>{{flagicon|CAN}} [[David Saint-Jacques]]<br>{{flagicon|USA}} [[Anne McClain]]\n| colspan=\"2\"|Transferred from Expedition 57\n| colspan=\"3\" |Transferred to Expedition 59\n\n|-\n! rowspan=\"3\" |[[Expedition 59]]\n| rowspan=\"3\" |[[Image:ISS Expedition 59 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Oleg Kononenko]]''<br>{{flagicon|CAN}} [[David Saint-Jacques]]<br>{{flagicon|USA}} [[Anne McClain]]\n| colspan=\"2\" |Transferred from Expedition 58\n| 25 June 2019<br/>02:47:50 UTC<ref name=SF-MS11>[http://www.spacefacts.de/mission/english/soyuz-ms-11.htm Soyuz MS-11]</ref>\n| [[Soyuz MS-11]]\n| style=\"text-align: right\"| 203\n|-\n|{{flagicon|RUS}} [[Aleksey Ovchinin]]<br>{{flagicon|USA}} [[Nick Hague]]\n| rowspan=\"2\" |14 March 2019<br/>19:14 UTC\n| rowspan=\"2\" |[[Soyuz MS-12]]\n| colspan=\"3\" |Transferred to Expedition 60\n|-\n|{{flagicon|USA}} [[Christina Koch]]\n| colspan=\"3\" |Transferred to Expedition 60 and 61\n\n|-\n! rowspan=\"3\" |[[Expedition 60]]\n| rowspan=\"3\" |[[File:ISS Expedition 60 Patch.svg|50px]]\n|{{flagicon|RUS}} ''[[Aleksey Ovchinin]]''<br>{{flagicon|USA}} [[Nick Hague]]\n| rowspan=\"2\" colspan=\"2\" |Transferred from Expedition 59\n|3 October 2019<br/>10:59 UTC<ref name=SF-MS12>[http://www.spacefacts.de/mission/english/soyuz-ms-12.htm Soyuz MS-12]</ref>\n|[[Soyuz MS-12]]\n|style=\"text-align: right\"| 202\n|-\n|{{flagicon|USA}} [[Christina Koch]]\n| rowspan=\"2\" colspan=\"3\" |Transferred to Expedition 61\n|-\n|{{flagicon|RUS}} [[Aleksandr Skvortsov (cosmonaut)|Aleksandr Skvortsov]]<br>{{flagicon|ITA}} [[Luca Parmitano]]<br>{{flagicon|USA}} [[Andrew R. Morgan|Drew Morgan]]\n|20 July 2019<br/>16:28:21 UTC<ref name=SF-MS13>[http://www.spacefacts.de/mission/english/soyuz-ms-13.htm Soyuz MS-13]</ref>\n|[[Soyuz MS-13]]\n\n|-\n! rowspan=\"4\" |[[Expedition 61]]\n| rowspan=\"4\" |[[File:ISS Expedition 61 Patch.svg|50px]]\n|{{flagicon|ITA}} ''[[Luca Parmitano]]''<br>{{flagicon|RUS}} [[Aleksandr Skvortsov (cosmonaut)|Aleksandr Skvortsov]]\n| colspan=\"2\" rowspan=\"3\" |Transferred from Expedition 60\n| rowspan=\"2\" | 6 February 2020  \n| rowspan=\"2\" |[[Soyuz MS-13]]\n|style=\"text-align: right\"| 200\n|-\n|{{flagicon|USA}} [[Christina Koch]]\n| style=\"text-align: right\"| 328\n|-\n|{{flagicon|USA}} [[Andrew R. Morgan|Drew Morgan]]\n|rowspan=\"2\" |17 April 2020<ref name=nasa20190417>{{cite web |title=NASA Announces First Flight, Record-Setting Mission |url=https://www.nasa.gov/press-release/nasa-announces-first-flight-record-setting-mission |publisher=NASA |date=17 April 2019}}</ref> \n| rowspan=\"2\" |[[Soyuz MS-15]]\n|style=\"text-align: right\"|\n|-\n|{{flagicon|RUS}} [[Oleg Skripochka]]<br>{{flagicon|USA}} [[Jessica Meir]]\n|25 September 2019<br/>13:57:43 UTC<ref name=SF-MS15>[http://www.spacefacts.de/mission/english/soyuz-ms-15.htm Launch, orbit and landing data]</ref>\n|[[Soyuz MS-15]]\n|\n|}\n\n==Current expedition==\n{| class=\"wikitable\"\n|- style=\"background-color: #efefef\" valign=\"top\"\n!Expedition\n!Patch\n!Crew\n!Launch date\n!Flight up\n!Landing date\n!Flight down\n!Duration<br><small>(days)</small>\n|-\n! rowspan=\"3\" |[[Expedition 62]]\n| rowspan=\"3\" |[[File:ISS Expedition 62 Patch.png|50px]]\n|{{flagicon|RUS}} [[Anatoli Ivanishin]]<br>{{flagicon|RUS}} [[Ivan Vagner]]<br>{{flagicon|USA}} [[Christopher Cassidy]]\n|9 April 2020\n|[[Soyuz MS-16]]\n| colspan=\"3\" |Will transfer to Expedition 63\n|-\n|{{flagicon|USA}} [[Douglas G. Hurley]]<br>{{flagicon|USA}} [[Robert L. Behnken]]\n|20 May 2020\n|[[Crew_Dragon_Demo-2|DM-2]]\n|August 2020\n|[[Crew_Dragon_Demo-2|DM-2]]\n|40-60 days\n|-\n|}\n\n==Future expeditions==\n{| class=\"wikitable\"\n|- style=\"background-color: #efefef\" valign=\"top\"\n!Expedition\n!Patch\n!Crew\n!Launch date\n!Flight up\n!Landing date\n!Flight down\n!Duration<br><small>(days)</small>\n|-\n! rowspan=\"3\" |'''[[Expedition 63]]'''\n| rowspan=\"3\" |[[File:ISS Expedition 63 Patch.png|50px]]\n|{{flagicon|USA}} ''[[Christopher Cassidy]]'' <br> {{flagicon|RUS}} [[Anatoli Ivanishin]]<br>{{flagicon|RUS}} [[Ivan Vagner]]\n| colspan=\"2\" |Will transfer from Expedition 62 <br/> 17 April 2020\n| 21 October 2020 (planned)<ref name=\"jaxa_exp63\">{{cite web|title=Increment 63 |url=https://iss.jaxa.jp/kibouser/information/increment/63.html|publisher=JAXA|language=ja|date=10 April 2020|access-date=10 April 2020}}</ref>\n|[[Soyuz MS-16]]\n|style=\"text-align: right\"|\n|-\n|{{flagicon|USA}} [[Michael S. Hopkins|Michael Hopkins]] <br> {{flagicon|USA}} [[Victor J. Glover|Victor Glover]] <br> {{flagicon|JPN}} [[Soichi Noguchi]] <br> {{flagicon|USA}} [[Shannon Walker]]\n|August 2020 (planned)<ref name=\"cnbc_coronavirus\">{{cite web|title=How NASA and SpaceX plan to launch astronauts in May despite a pandemic |url=https://www.cnbc.com/2020/04/03/nasa-spacex-to-launch-astronauts-in-may-despite-coronavirus-pandemic.html|first=Michael|last=Sheetz|date=3 April 2020|access-date=10 April 2020}}</ref>\n|[[USCV-1]]\n| colspan=\"3\" rowspan=\"2\" |Will transfer to Expedition 64 <br/> 21 October 2020 <ref name=\"jaxa_exp63\"/>\n|-\n|{{flagicon|RUS}} [[Nikolai Tikhonov (cosmonaut)|Nikolai Tikhonov]] <br> {{flagicon|RUS}} [[Andrei Babkin]] <br> {{flagicon|USA}} [[Steve Bowen]] \n|14 October 2020 (planned)<ref>{{cite news|url=https://ria.ru/20191022/1560048196.html|title=\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a: \u041d\u0410\u0421\u0410 \u0445\u043e\u0447\u0435\u0442 \u043a\u0443\u043f\u0438\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u043d\u043e \u043c\u0435\u0441\u0442\u043e \u0432 \u0440\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u043e\u043c \"\u0421\u043e\u044e\u0437\u0435\"|trans-title=Source: NASA wants to buy another Soyuz seat|agency=[[RIA Novosti]]|date=22 October 2019|accessdate=23 October 2019|language=ru}}</ref>\n|[[Soyuz MS-17]]\n|-\n! rowspan=\"2\" |'''[[Expedition 64]]'''\n| rowspan=\"2\" |\n|{{flagicon|USA}} [[Michael S. Hopkins|Michael Hopkins]] <br> {{flagicon|USA}} [[Victor J. Glover|Victor Glover]] <br> {{flagicon|JPN}} [[Soichi Noguchi]] <br> {{flagicon|USA}} [[Shannon Walker]]\n| colspan=\"2\" rowspan=\"2\" |Will transfer from Expedition 63 <br/> 21 October 2020 <ref name=\"jaxa_exp63\"/>\n|Early 2021 (planned) \n|[[USCV-1]]\n|style=\"text-align: right\"|\n|-\n|{{flagicon|RUS}} [[Nikolai Tikhonov (cosmonaut)|Nikolai Tikhonov]] <br> {{flagicon|RUS}} [[Andrei Babkin]] <br> {{flagicon|USA}} [[Steve Bowen]]\n| colspan=\"3\" |Will transfer to Expedition 65 <br/> Early 2021\n|-\n! rowspan=\"2\" |<div id=\"Expedition 65\">'''Expedition 65'''</div>\n| rowspan=\"2\" |\n|{{flagicon|RUS}} [[Nikolai Tikhonov (cosmonaut)|Nikolai Tikhonov]] <br> {{flagicon|RUS}} [[Andrei Babkin]] <br> {{flagicon|USA}} [[Steve Bowen]]  \n| colspan=\"2\" |Will transfer from Expedition 64 <br/> Early 2021\n| April 2021 (planned)\n|[[Soyuz MS-17]]\n|style=\"text-align: right\"|\n|-\n|TBD\n|Early 2021 (planned) \n|[[Commercial Crew Program|US-TBD]]\n| colspan=\"3\" |Will transfer to Expedition 66\n\n|}\n\n== See also ==\n* [[List of human spaceflights to the ISS]]\n* [[List of International Space Station crew]]\n* [[List of International Space Station visitors]]\n* [[List of Mir Expeditions]]\n* [[List of commanders of the ISS]]\n\n==Notes==\n{{reflist|group=\"n\"}}\n\n== Citations ==\n{{reflist}}\n\n== General references ==\n*[http://www.nasa.gov/mission_pages/station/expeditions/index.html NASA's space station crew page]\n*[http://www.spacefacts.de/schedule/e_iss.htm SpaceFacts]\n*[http://www.nasa.gov/mission_pages/station/press-releases NASA ISS Expedition Mission News releases]\n\n{{ISS expeditions}}\n{{Space exploration lists and timelines}}\n\n[[Category:Expeditions to the International Space Station| ]]\n[[Category:International Space Station|*]]\n[[Category:Lists of space missions|ISS]]\n[[Category:Spaceflight timelines|International Space Station expeditions]]\n", "name_user": "AndrewRG10", "label": "safe", "comment": "Landing time", "url_page": "//en.wikipedia.org/wiki/List_of_International_Space_Station_expeditions"}
{"title_page": "Hudson Jeans", "text_new": "{{Infobox company\n| name = Hudson Jeans\n| logo = \n| logo_size =\n| logo_alt =\n| logo_caption = \n| logo_padding =\n| image = \n| image_size = \n| image_alt =\n| image_caption = \n| trading_name = \n| native_name = \n| native_name_lang =    <!-- Use ISO 639-1 code, e.g. \"fr\" for French. For multiple names in different languages, use {{lang|[code]|[name]}}. -->\n| romanized_name = \n| former_name = \n| type = \n| traded_as = \n| ISIN =\n| industry = Fashion Designing \n| genre =               <!-- Only used with media and publishing companies -->\n| fate = \n| predecessor =         <!-- or: | predecessors = -->\n| successor =           <!-- or: | successors = -->\n| founded = 2002           \n| founder = Peter Kim           \n| defunct =             <!-- {{end date|YYYY|MM|DD}} -->\n| hq_location = \n| hq_location_city = [[Los Angeles]], [[California]]\n| hq_location_country = [[United States]]\n| coordinates = \n| num_locations = \n| num_locations_year =   <!-- Year of num_locations data (when known) -->\n| area_served =         <!-- or: | areas_served = -->\n| key_people = \n| products = \n| brands = \n| production = \n| production_year =     <!-- Year of production data (when known) -->\n| services = \n| revenue = \n| revenue_year =        <!-- Year of revenue data (when known) -->\n| operating_income = \n| income_year =         <!-- Year of operating_income data (when known) -->\n| net_income =          <!-- or: | profit = -->\n| net_income_year =     <!-- or: | profit_year = --><!-- Year of net_income/profit data (when known) -->\n| aum =                 <!-- Only for financial-service companies -->\n| assets = \n| assets_year =         <!-- Year of assets data (when known) -->\n| equity = \n| equity_year =         <!-- Year of equity data (when known) -->\n| owner =               <!-- or: | owners = -->\n| members = \n| members_year =        <!-- Year of members data (when known) -->\n| num_employees = \n| num_employees_year =  <!-- Year of num_employees data (when known) -->\n| parent = \n| divisions = \n| subsid = \n| slogan =              <!-- or: | slogans = -->\n| module =              <!-- Used to embed other templates -->\n| website =            {{URL|http://www.hudsonjeans.com/}}\n| footnotes = \n| intl =                <!-- Set positively (\"true\"/\"yes\"/etc) if company is international, otherwise omit -->\n}}\n\n'''Hudson Jeans''' is a [[United States|US]]-based premium denim manufacturer.<ref name=\"FORBES\">{{cite magazine | title =Rebel With A Cause: Hudson Jeans CEO Peter Kim On Being \"Forever Forward\" With Denim | magazine =Forbes| date =28 January 2015 | url =https://www.forbes.com/sites/barrysamaha/2015/01/28/rebel-with-a-cause-hudson-jeans-ceo-peter-kim-on-being-forever-forward-with-denim/ | accessdate =24 December 2015}}</ref><ref name=\"LAT\">{{cite news | last =Stuart | first =Pfeifer | title =Hudson Jeans CEO Peter Kim fashions his own premium denim brand | newspaper =Los Angeles Times| date =22 August 2010 | url =http://articles.latimes.com/2010/aug/22/business/la-fi-himi-kim-20100822 | accessdate =24 December 2015}}</ref><ref name=\"LARA\">{{cite news | last =Cat | first =Wright | title =Inside Hudson Jeans's Super-Cool Commerce Headquarters | newspaper =| location = | pages = | language = | publisher =la.racked| date =5 January 2015 | url =http://la.racked.com/2015/1/5/7563033/ata-hudson-jeans#4377920 | accessdate =24 December 2015}}</ref><ref name=\"HL\">{{cite magazine | last =Laura | first =Schreffler | title =Peter Kim | magazine =Haute Living| date =1 December 2014 | url =http://hauteliving.com/2014/12/peter-kim/533704/ | accessdate =24 December 2015}}</ref>\n\n==History==\nHudson Jeans was founded in 2002 by Peter Kim with its base in [[Los Angeles]], [[California]].<ref name=\"LAT\"/><ref name=\"FO\">{{cite magazine | last =Winnie | first =Sun | title =Peter Kim, Hudson Jeans CEO: The Profile Of A High Net Worth Investor? | magazine =Forbes| date =6 November 2014 | url =https://www.forbes.com/sites/winniesun/2014/11/06/helping-high-net-worth-investors-protect-their-wealth/ | accessdate =24 December 2015}}</ref><ref name=\"FO\"/><ref>{{cite news | last =Mark | first =Scott | title =Peter Kim built Hudson Jeans in his own image, and customers are falling in love with his spirit | newspaper =| location = | pages = | language = | publisher =sbnonline| date =1 October 2014 | url =http://www.sbnonline.com/article/peter-kim-built-hudson-jeans-image-customers-falling-love-spirit/ | accessdate =24 December 2015}}</ref><ref name=\"AS\">{{cite news | last =Catherine | first =Jacobs | title =Hudson Jeans Profile | newspaper =| location = | pages = | language = | publisher =About Style| date = | url =http://jeans.about.com/od/DesignerJeans/p/Hudson-Jeans-Profile.htm | accessdate =24 December 2015}}</ref><ref name=\"GL\">{{cite magazine | last =Leah | first =Melby | title =The Female Body in Fashion: A Conversation on Photoshopping and What the Heck's Happening | magazine =Glamour| date =22 December 2014| url =http://www.glamour.com/fashion/blogs/dressed/2014/12/fashion-brands-photoshopping | accessdate =24 December 2015}}</ref> Till date, Ben Taverniti has been the Creative Director/Designer of the brand.<ref>{{cite news | last =Britt | first =Aboutaleb | title =Meet Ben Taverniti, Hudson's Head Designer | newspaper =| location = | pages = | language = | publisher =Fashionista| date =23 March 2010 | url =http://fashionista.com/2010/03/meet-ben-taverniti-hudsons-head-designer | accessdate =24 December 2015}}</ref><ref>{{cite news | last =Britt | first =Aboutaleb | title =Q&A Ben Taverniti, Creative Director \u2013 Hudson Jeans | newspaper =| location = | pages = | language = | publisher =Denimology| date =12 December 2012 | url =https://denimology.com/2011/12/qa_ben_taverniti_creative_director_-_hudson_jeans | accessdate =24 December 2015}}</ref>\n\nIn 2009, Fireman Capital Partners took a majority stake in Hudson Jeans.<ref name=\"UFM\">{{cite news | last = | first = | title =Joe's Jeans to acquire Hudson Jeans | newspaper =| location = | pages = | language = | publisher =us.fashionmag| date =16 July 2013| url =http://us.fashionmag.com/news/Joe-s-Jeans-to-acquire-Hudson-Jeans,345819.html#.VnqSebYrLVQ | accessdate =24 December 2015}}</ref> [[Reebok]] founder; [[Paul Fireman]] and his son, Dan; were at the head of the investment fund during the period.<ref name=\"UFM\"/>\n\nIn 2013, Joe\u2019s Jeans brand signed an agreement to acquire Hudson Jeans for the sum of 97.6 million dollars. Hudson Jeans' CEO; Peter Kim remained as head of the company and also became a member of the board of directors at Joe\u2019s Jeans.<ref name=\"UFM\"/><ref>{{cite news | last =Dana | first =Mattioli | title =Joe's Jeans to Buy Hudson Jeans - California Premium-Denim Company to Pay About $97.6 Million | newspaper =Wall Street Journal| url =https://www.wsj.com/articles/SB10001424127887323394504578608113675599472 | accessdate =24 December 2015}}</ref><ref>{{cite news | last = | first = | title =Breaking News: Joe\u2019s Jeans to buy Hudson Jeans | newspaper =| location = | pages = | language = | publisher =Trend board nyc| date = | url =http://trendboardnyc.com/joes-jeans-to-buy-hudson/ | accessdate =24 December 2015}}</ref>\n\n==Products and services==\nHudson Jeans offers denim line of designer jeans with trademark triangular back pockets, and a Union Jack logo. Customers known to wear Hudson Jeans include [[Cara Delevingne]] and [[Britney Spears]].<ref name=\"LAT\"/><ref name=\"AS\"/><ref>{{cite magazine | last =Adam | first =Berry | title =Hudson Jeans' Won't Use Models Anymore, Thanks To Its Down-To-Earth Brand Revamp | magazine =Bustle| date =29 July 2014 | url =http://www.bustle.com/articles/33659-hudson-jeans-wont-use-models-anymore-thanks-to-its-down-to-earth-brand-revamp | accessdate =24 December 2015}}</ref><ref>{{cite news | last =Adam | first =Berry | title =Hudson Jeans Turns 10 With Georgia May Jagger | newspaper =| location = | pages = | language = | publisher =perezhilton| date =20 July 2012 | url =http://perezhilton.com/cocoperez/2012-07-20-georgia-may-jagger-is-back-for-hudson-jeans-anniversary-campaign#.VnqSBLYrLVQ | accessdate =24 December 2015}}</ref> Hudson Jeans also worked with Georgia May Jagger as one of the brand's model.<ref>{{cite news | last =Lorelei | first =Marfil | title =Georgia May Jagger Returns for Another Hudson Jeans Campaign | newspaper =| location = | pages = | language = | publisher =WWD| date =15 July 2013 | url =http://wwd.com/globe-news/fashion-memopad/georgia-may-jagger-returns-for-another-hudson-jeans-campaign-7055142/ | accessdate =24 December 2015}}</ref><ref>{{cite magazine | last =Sarah | first =Deeks | title =Jagger For Hudson | magazine =Vogue| date =18 August 2010 | url =http://www.vogue.co.uk/news/2010/08/18/georgia-may-jagger-as-the-face-of-hudson | accessdate =24 December 2015}}</ref><ref>{{cite magazine | last =Tommye | first =Fitzpatrick | title =Exclusive Video: Beatboxing With Georgia May Jagger And Hudson Jeans | magazine =Elle| date =15 August 2012 | url =http://www.elle.com/fashion/news/a18187/exclusive-video-beatboxing-with-georgia-may-jagger-and-hudson-jeans/ | accessdate =24 December 2015}}</ref>\n\n==See also==\n* [[Jeans]]\n* [[Designer clothing]]\n\n<ref>{{cite web |last1=Jason |first1=Wu |title=Founding History of Hudson Jeans |url=https://pures.io/store/hudson-jeans |website=Pures |accessdate=17 April 2020}}</ref>==References==\n{{reflist|2}}\n\n==External links==\n* {{official website|http://www.hudsonjeans.com/}}\n\n[[Category:Companies established in 2002]]\n[[Category:2002 establishments in California]]\n[[Category:Companies based in Los Angeles]]\n", "text_old": "{{Infobox company\n| name = Hudson Jeans\n| logo = \n| logo_size =\n| logo_alt =\n| logo_caption = \n| logo_padding =\n| image = \n| image_size = \n| image_alt =\n| image_caption = \n| trading_name = \n| native_name = \n| native_name_lang =    <!-- Use ISO 639-1 code, e.g. \"fr\" for French. For multiple names in different languages, use {{lang|[code]|[name]}}. -->\n| romanized_name = \n| former_name = \n| type = \n| traded_as = \n| ISIN =\n| industry = Fashion Designing \n| genre =               <!-- Only used with media and publishing companies -->\n| fate = \n| predecessor =         <!-- or: | predecessors = -->\n| successor =           <!-- or: | successors = -->\n| founded = 2002           \n| founder = Peter Kim           \n| defunct =             <!-- {{end date|YYYY|MM|DD}} -->\n| hq_location = \n| hq_location_city = [[Los Angeles]], [[California]]\n| hq_location_country = [[United States]]\n| coordinates = \n| num_locations = \n| num_locations_year =   <!-- Year of num_locations data (when known) -->\n| area_served =         <!-- or: | areas_served = -->\n| key_people = \n| products = \n| brands = \n| production = \n| production_year =     <!-- Year of production data (when known) -->\n| services = \n| revenue = \n| revenue_year =        <!-- Year of revenue data (when known) -->\n| operating_income = \n| income_year =         <!-- Year of operating_income data (when known) -->\n| net_income =          <!-- or: | profit = -->\n| net_income_year =     <!-- or: | profit_year = --><!-- Year of net_income/profit data (when known) -->\n| aum =                 <!-- Only for financial-service companies -->\n| assets = \n| assets_year =         <!-- Year of assets data (when known) -->\n| equity = \n| equity_year =         <!-- Year of equity data (when known) -->\n| owner =               <!-- or: | owners = -->\n| members = \n| members_year =        <!-- Year of members data (when known) -->\n| num_employees = \n| num_employees_year =  <!-- Year of num_employees data (when known) -->\n| parent = \n| divisions = \n| subsid = \n| slogan =              <!-- or: | slogans = -->\n| module =              <!-- Used to embed other templates -->\n| website =            {{URL|http://www.hudsonjeans.com/}}\n| footnotes = \n| intl =                <!-- Set positively (\"true\"/\"yes\"/etc) if company is international, otherwise omit -->\n}}\n\n'''Hudson Jeans''' is a [[United States|US]]-based premium denim manufacturer.<ref name=\"FORBES\">{{cite magazine | title =Rebel With A Cause: Hudson Jeans CEO Peter Kim On Being \"Forever Forward\" With Denim | magazine =Forbes| date =28 January 2015 | url =https://www.forbes.com/sites/barrysamaha/2015/01/28/rebel-with-a-cause-hudson-jeans-ceo-peter-kim-on-being-forever-forward-with-denim/ | accessdate =24 December 2015}}</ref><ref name=\"LAT\">{{cite news | last =Stuart | first =Pfeifer | title =Hudson Jeans CEO Peter Kim fashions his own premium denim brand | newspaper =Los Angeles Times| date =22 August 2010 | url =http://articles.latimes.com/2010/aug/22/business/la-fi-himi-kim-20100822 | accessdate =24 December 2015}}</ref><ref name=\"LARA\">{{cite news | last =Cat | first =Wright | title =Inside Hudson Jeans's Super-Cool Commerce Headquarters | newspaper =| location = | pages = | language = | publisher =la.racked| date =5 January 2015 | url =http://la.racked.com/2015/1/5/7563033/ata-hudson-jeans#4377920 | accessdate =24 December 2015}}</ref><ref name=\"HL\">{{cite magazine | last =Laura | first =Schreffler | title =Peter Kim | magazine =Haute Living| date =1 December 2014 | url =http://hauteliving.com/2014/12/peter-kim/533704/ | accessdate =24 December 2015}}</ref>\n\n==History==\nHudson Jeans was founded in 2002 by Peter Kim with its base in [[Los Angeles]], [[California]].<ref name=\"LAT\"/><ref name=\"FO\">{{cite magazine | last =Winnie | first =Sun | title =Peter Kim, Hudson Jeans CEO: The Profile Of A High Net Worth Investor? | magazine =Forbes| date =6 November 2014 | url =https://www.forbes.com/sites/winniesun/2014/11/06/helping-high-net-worth-investors-protect-their-wealth/ | accessdate =24 December 2015}}</ref><ref name=\"FO\"/><ref>{{cite news | last =Mark | first =Scott | title =Peter Kim built Hudson Jeans in his own image, and customers are falling in love with his spirit | newspaper =| location = | pages = | language = | publisher =sbnonline| date =1 October 2014 | url =http://www.sbnonline.com/article/peter-kim-built-hudson-jeans-image-customers-falling-love-spirit/ | accessdate =24 December 2015}}</ref><ref name=\"AS\">{{cite news | last =Catherine | first =Jacobs | title =Hudson Jeans Profile | newspaper =| location = | pages = | language = | publisher =About Style| date = | url =http://jeans.about.com/od/DesignerJeans/p/Hudson-Jeans-Profile.htm | accessdate =24 December 2015}}</ref><ref name=\"GL\">{{cite magazine | last =Leah | first =Melby | title =The Female Body in Fashion: A Conversation on Photoshopping and What the Heck's Happening | magazine =Glamour| date =22 December 2014| url =http://www.glamour.com/fashion/blogs/dressed/2014/12/fashion-brands-photoshopping | accessdate =24 December 2015}}</ref> Till date, Ben Taverniti has been the Creative Director/Designer of the brand.<ref>{{cite news | last =Britt | first =Aboutaleb | title =Meet Ben Taverniti, Hudson's Head Designer | newspaper =| location = | pages = | language = | publisher =Fashionista| date =23 March 2010 | url =http://fashionista.com/2010/03/meet-ben-taverniti-hudsons-head-designer | accessdate =24 December 2015}}</ref><ref>{{cite news | last =Britt | first =Aboutaleb | title =Q&A Ben Taverniti, Creative Director \u2013 Hudson Jeans | newspaper =| location = | pages = | language = | publisher =Denimology| date =12 December 2012 | url =https://denimology.com/2011/12/qa_ben_taverniti_creative_director_-_hudson_jeans | accessdate =24 December 2015}}</ref>\n\nIn 2009, Fireman Capital Partners took a majority stake in Hudson Jeans.<ref name=\"UFM\">{{cite news | last = | first = | title =Joe's Jeans to acquire Hudson Jeans | newspaper =| location = | pages = | language = | publisher =us.fashionmag| date =16 July 2013| url =http://us.fashionmag.com/news/Joe-s-Jeans-to-acquire-Hudson-Jeans,345819.html#.VnqSebYrLVQ | accessdate =24 December 2015}}</ref> [[Reebok]] founder; [[Paul Fireman]] and his son, Dan; were at the head of the investment fund during the period.<ref name=\"UFM\"/>\n\nIn 2013, Joe\u2019s Jeans brand signed an agreement to acquire Hudson Jeans for the sum of 97.6 million dollars. Hudson Jeans' CEO; Peter Kim remained as head of the company and also became a member of the board of directors at Joe\u2019s Jeans.<ref name=\"UFM\"/><ref>{{cite news | last =Dana | first =Mattioli | title =Joe's Jeans to Buy Hudson Jeans - California Premium-Denim Company to Pay About $97.6 Million | newspaper =Wall Street Journal| url =https://www.wsj.com/articles/SB10001424127887323394504578608113675599472 | accessdate =24 December 2015}}</ref><ref>{{cite news | last = | first = | title =Breaking News: Joe\u2019s Jeans to buy Hudson Jeans | newspaper =| location = | pages = | language = | publisher =Trend board nyc| date = | url =http://trendboardnyc.com/joes-jeans-to-buy-hudson/ | accessdate =24 December 2015}}</ref>\n\n==Products and services==\nHudson Jeans offers denim line of designer jeans with trademark triangular back pockets, and a Union Jack logo. Customers known to wear Hudson Jeans include [[Cara Delevingne]] and [[Britney Spears]].<ref name=\"LAT\"/><ref name=\"AS\"/><ref>{{cite magazine | last =Adam | first =Berry | title =Hudson Jeans' Won't Use Models Anymore, Thanks To Its Down-To-Earth Brand Revamp | magazine =Bustle| date =29 July 2014 | url =http://www.bustle.com/articles/33659-hudson-jeans-wont-use-models-anymore-thanks-to-its-down-to-earth-brand-revamp | accessdate =24 December 2015}}</ref><ref>{{cite news | last =Adam | first =Berry | title =Hudson Jeans Turns 10 With Georgia May Jagger | newspaper =| location = | pages = | language = | publisher =perezhilton| date =20 July 2012 | url =http://perezhilton.com/cocoperez/2012-07-20-georgia-may-jagger-is-back-for-hudson-jeans-anniversary-campaign#.VnqSBLYrLVQ | accessdate =24 December 2015}}</ref> Hudson Jeans also worked with Georgia May Jagger as one of the brand's model.<ref>{{cite news | last =Lorelei | first =Marfil | title =Georgia May Jagger Returns for Another Hudson Jeans Campaign | newspaper =| location = | pages = | language = | publisher =WWD| date =15 July 2013 | url =http://wwd.com/globe-news/fashion-memopad/georgia-may-jagger-returns-for-another-hudson-jeans-campaign-7055142/ | accessdate =24 December 2015}}</ref><ref>{{cite magazine | last =Sarah | first =Deeks | title =Jagger For Hudson | magazine =Vogue| date =18 August 2010 | url =http://www.vogue.co.uk/news/2010/08/18/georgia-may-jagger-as-the-face-of-hudson | accessdate =24 December 2015}}</ref><ref>{{cite magazine | last =Tommye | first =Fitzpatrick | title =Exclusive Video: Beatboxing With Georgia May Jagger And Hudson Jeans | magazine =Elle| date =15 August 2012 | url =http://www.elle.com/fashion/news/a18187/exclusive-video-beatboxing-with-georgia-may-jagger-and-hudson-jeans/ | accessdate =24 December 2015}}</ref>\n\n==See also==\n* [[Jeans]]\n* [[Designer clothing]]\n\n==References==\n{{reflist|2}}\n\n==External links==\n* {{official website|http://www.hudsonjeans.com/}}\n\n[[Category:Companies established in 2002]]\n[[Category:2002 establishments in California]]\n[[Category:Companies based in Los Angeles]]\n", "name_user": "Xyssjkalal", "label": "safe", "comment": "\u2192\u200eReferences", "url_page": "//en.wikipedia.org/wiki/Hudson_Jeans"}
