{"title_page": "Lulu Antariksa", "text_new": "{{short description|American actress}}\n\n{{pp-pc1}}\n{{Notability|bio|date=March 2017}}{{Infobox person\n| name               = Lulu Antariksa\n| birth_name         = Lauren Marie-Elizabeth Antariksa\n| birth_date         = {{birth date and age|mf=yes|1995|09|22}}\n| nationality        = American\n| occupation         = Actress\n| years_active       = 2002 - present\n}}\n\n'''Lulu Antariksa''' (born Lauren Marie-Elizabeth Antariksa; August 22, 1995) is an American actress. She is best known for her role in [[The CW]] show ''[[Legacies (TV series)|Legacies]]'' as Penelope Park and was starring in the web series ''[[T@gged]]'' on the streaming website [[go90]].<ref>{{Cite web|url=https://en.m.wikipedia.org/wiki/Tagged_(web_series)#Production|title=Tagged (web series) - Wikipedia|website=en.m.wikipedia.org|language=en|access-date=2020-04-23}}</ref>\n\n==Early life and education==\nAntariksa was born in California<ref name=\"presskit\">{{cite web|url=http://nickpress-howtorock.com/bios.html|title=How to Rock \u2013 Press Site \u2013 Bios \u2013 Lulu Antariksa|date=January 2012|archiveurl=https://www.webcitation.org/653lopuoX?url=http://nickpress-howtorock.com/bios.html|archive-date=2012-01-29}}</ref> to an [[Native Indonesians|Indonesian]] father and a [[Germans|German]] mother.<ref>[http://blendedent.com/2012/06/20/interview-with-lulu-antariksa/ \"Interview with Lulu Antariksa\"]. Blended Entertainment. June 20, 2012. Retrieved 2013-08-26.</ref> Antariksa is trained in dancing and singing and plays guitar, piano, ukulele, saxophone, and bass.<ref name=\"presskit\"/> She became interested in acting while attending [[Valencia High School (Santa Clarita, California)|Valencia High School]] in [[California]].\n\n==Career==\nAntariksa's early roles from 2002 to 2008 were under the name Lauren Antariksa. \n\nAntariksa's breakout role was as Stevie Baskara in the 2012 [[Nickelodeon]] sitcom [[How to Rock]]. The show premiered February 4, 2012, and ran for 25 episodes. It was not renewed for a second season.<ref>{{Cite web|url=https://deadline.com/2012/08/nickelodeons-how-to-rock-cancelled-after-one-season-325169/|title=Nick's 'How To Rock' Cancelled After One Season|last=Andreeva|first=Nellie|last2=Andreeva|first2=Nellie|date=2012-08-27|website=Deadline|language=en|access-date=2020-03-02}}</ref><ref>{{Cite web|url=https://tvbythenumbers.zap2it.com/press-releases/nickelodeons-new-series-how-to-rock-premieres-saturday-february-4/|title=Nickelodeon\u2019s New Series \u2018How To Rock\u2019 Premieres Saturday, February 4|date=2011-12-22|website=TV By The Numbers|language=en|access-date=2020-03-02}}</ref> \n\nAntariksa's other television acting credits include ''[[American Family (2002 TV series)|American Family]]'', ''[[According to Jim]]'', ''[[ER (TV series)|ER]]'', ''[[Head Cases]]'', ''[[Monk (TV series)|Monk]]'', ''[[Zoey 101]]'', and ''[[Gemini Division]]''.<ref>{{cite news|url=https://movies.nytimes.com/person/1327304/Lauren-Antariksa |archive-url=https://archive.today/20120713145304/http://movies.nytimes.com/person/1327304/Lauren-Antariksa |url-status=dead |archive-date=2012-07-13 |title=Lauren Antariksa Movies & TV |newspaper=[[The New York Times]] |access-date=2011-02-06}}</ref> \n\nShe played the lead role in the 2018 [[Apocalyptic and post-apocalyptic fiction|post-apocalyptic]] thriller film ''[[What Still Remains]]'' alongside [[Colin O'Donoghue]]''.'' The film received mixed reviews, with the [[Los Angeles Times]]' review stating: \"...though it gets more tense in its second half, the movie overall is a bit too sedate. Still, a great cast... brings Mendoza\u2019s ideas to life,\"<ref>{{Cite web|url=https://www.latimes.com/entertainment/movies/la-et-mn-mini-what-still-remains-review-20180808-story.html|title=Review: Josh Mendoza's \u2018What Still Remains\u2019 goes beyond the post-apocalypse|date=2018-08-09|website=Los Angeles Times|language=en-US|access-date=2020-03-02}}</ref> while Rob Hunter for [[Film School Rejects]] wrote \"Antariksa does good work and convinces as a young woman who\u2019s fully able to care for herself while still being someone in need of human contact\".<ref>{{Cite web|url=https://filmschoolrejects.com/what-still-remains-review/|title='What Still Remains' Review: People, Unfortunately|date=2018-08-11|website=Film School Rejects|language=en-US|access-date=2020-03-02}}</ref> [[Screen Anarchy|Screenanarchy.com]]'s review stated: \"the lead performances are very solid\"<ref>{{Cite web|url=https://screenanarchy.com/2018/08/review-what-still-remains-quietly-becomes-gripping.html|title=Review: WHAT STILL REMAINS Quietly Becomes Gripping|date=2018-08-06|website=ScreenAnarchy|access-date=2020-03-02}}</ref> and [[Decider (website)|Decider]] called the film \"a hidden gem\".<ref>{{Cite web|url=https://decider.com/2018/12/26/what-still-remains-on-netflix/|title=\u2018What Still Remains\u2019 on Netflix Is a Great Follow-Up to \u2018Bird Box\u2019 (Whether You Loved It or Hated It)|date=2018-12-26|website=Decider|language=en|access-date=2020-03-02}}</ref>\n\nAntariksa was next seen in the role of Penelope Park in the first season of [[The CW]] television series ''[[Legacies (TV series)|Legacies]]''<ref>{{cite web |author=Gina Carbone |url=https://www.cinemablend.com/television/2468831/will-legacies-season-2-bring-back-penelope-julie-plec-gives-heartbroken-fans-hope |title=Will Legacies Season 2 Bring Back Penelope? Julie Plec Gives Heartbroken Fans Hope |work=Cinemablend |date=March 23, 2019 |access-date=2019-06-01}}</ref>. She then starred in the short film ''The Lonely Host,''<ref>{{Citation|title=The Lonely Host|url=http://www.imdb.com/title/tt10674254/|access-date=2020-03-02}}</ref> where one reviewer called her performance \"impeccable.\"<ref>{{Cite web|url=https://morbidlybeautiful.com/short-lonely-host/|title=Horror Short: The Lonely Host|date=2019-12-18|website=Morbidly Beautiful|language=en-US|access-date=2020-03-02}}</ref>  \n\nCurrently, Antariksa plays high-schooler Rowan Fricks in the [[go90]] [[web series]] ''[[T@gged]]''.<ref name=\":0\">[https://awesomenesstv.com/2016/08/11/5-facts-you-didnt-know-about-the-tagged-cast/ 5 Facts You Didn't Know About The T@gged Cast] {{Webarchive|url=https://web.archive.org/web/20161013002614/https://awesomenesstv.com/2016/08/11/5-facts-you-didnt-know-about-the-tagged-cast/|date=2016-10-13}}. Awesomenesstv.com (August 11, 2016). Retrieved on 2016-11-08.</ref>\n\n==Filmography==\n{| class=\"wikitable sortable\"\n|+Television roles\n|-\n! Year\n! Title\n! Role\n! class=\"unsortable\" | Notes\n|-\n| align=\"center\"|2002\n| ''[[American Family (2002 TV series)|American Family]]''\n| Lina\n| Episode: \"The Masked Eagle: Part 1\"\n|-\n| align=\"center\"|2003\n| ''[[According to Jim]]''\n| Madeline\n| Episode: \"[[List of According to Jim episodes#ep38|Slumber Party]]\"\n|-\n| align=\"center\"|2004\n| ''[[ER (TV series)|ER]]''\n| Anna\n| Episode: \"[[ER (season 10)#ep212|Touch and Go]]\"\n|-\n| align=\"center\"|2005\n| ''[[Head Cases]]''\n| Erica\n| Episode: \"Malpractice Makes Perfect\"\n|-\n| align=\"center\"|2006\n| ''[[Monk (TV series)|Monk]]''\n| Whispering Child #1 \n| Episode: \"[[Monk (season 5)#ep63|Mr. Monk and the Garbage Strike]]\"\n|-\n| align=\"center\"|2008\n| ''[[Zoey 101]]''\n| 7th Grade Girl \n| Episode: \"[[List of Zoey 101 episodes#ep53|Anger Management]]\"\n|-\n| align=\"center\"|2008\n| ''[[Gemini Division]]''\n| Young Anna\n| Episode: \"In the Region of Ice\"\n|-\n| align=\"center\"|2012\n| ''[[How to Rock]]''\n| Stevie Baskara \n| Main role (25 episodes)\n|-\n|align=\"center\"| 2012\n| ''[[Figure It Out]]''\n| Herself\n| Panelist; 7 episodes\n|-\n| align=\"center\"|2013\n| ''[[Jessie (2011 TV series)|Jessie]]''\n| Victoria Montesano\n| Episode: \"[[List of Jessie episodes#ep51|Break-Up and Shape-Up]]\"\n|-\n| align=\"center\"|2014\n| ''[[Kickin' It]]''\n| Grey Cole\n| Episode: \"[[List of Kickin' It episodes#ep65|Return of Spyfall]]\"\n|-\n| align=\"center\"|2016\n| ''[[Crazy Ex-Girlfriend (TV series)|Crazy Ex-Girlfriend]]''\n| Kayla\n| Episode: \"[[List of Crazy Ex-Girlfriend episodes#ep10|I'm Back at Camp with Josh!]]\"\n|-\n| align=\"center\"|2018\u20132019\n| ''[[Legacies (TV series)|Legacies]]''\n| Penelope Park\n| 7 episodes\n|}\n{| class=\"wikitable\"\n|+Film roles\n!Year\n!Title\n!Role\n!Notes\n|-\n|align=\"center\"|2018\n|''[[What Still Remains]]''\n|Anna\n|Lead role\n|-\n|align=\"center\"|2019\n|''The Lonely Host''\n|Silvia\n|Short film\n|-\n|align=\"center\"|2020\n|''Witch Hunt''\n|Jen\n|<ref>{{Citation|title=Witch Hunt|url=http://www.imdb.com/title/tt10160974/|access-date=2020-03-02}}</ref>\n|}\n{| class=\"wikitable sortable\"\n|+Web series roles\n|-\n!Year\n!Title\n!Role\n!Notes\n|-\n|align=\"center\"|2013\u20132015\n|''Side Effects''\n|Lexi Connolly\n|Main role\n|-\n|align=\"center\"|2016\u2013present\n|''[[T@gged]]''\n|Rowan Fricks\n|Main role<ref name=\":0\" />\n|-\n|align=\"center\"|2018\n|''Impulse''\n|Patty\n|Episode: \"Ep 1 - Pilot\"\n|}\n\n{| class=\"wikitable sortable\"\n|+ Music video roles\n|-\n! Year\n! Title\n! Director\n! class=\"unsortable\" | Notes\n|-\n| rowspan=\"3\" | 2012\n| \"Lightning\"\n| [[Kurt Hugo Schneider]]\n| Alex Goot's love interest\n|-\n| \"Maroon 5 Medley\"\n| Kurt Hugo Schneider\n| Cameo\n|-\n| \"All Your Love\"\n| Daniel Durston\n| Sung with Daniel Durston\n|}\n\n==References==\n{{Reflist}}\n\n==External links==\n*{{IMDb name|1984618}}\n*[https://www.monstersandcritics.com/smallscreen/who-plays-penelope-on-legacies-lulu-antariksa-is-a-very-private-person/ Who plays Penelope on Legacies? Lulu Antariksa is a very private person]\n\n{{authority control}}\n\n{{DEFAULTSORT:Antariksa, Lulu}}\n[[Category:1995 births]]\n[[Category:21st-century American actresses]]\n[[Category:Actresses from California]]\n[[Category:American child actresses]]\n[[Category:American television actresses]]\n[[Category:American people of German descent]]\n[[Category:American people of Indonesian descent]]\n[[Category:Living people]]\n[[Category:People from Santa Clarita, California]]\n[[Category:Actresses of German descent]]\n[[Category:American web series actresses]]\n\n\n{{US-screen-actor-stub}}\n", "text_old": "{{short description|American actress}}\n\n{{pp-pc1}}\n{{Notability|bio|date=March 2017}}{{Infobox person\n| name               = Lulu Antariksa\n| birth_name         = Lauren Marie-Elizabeth Antariksa\n| birth_date         = {{birth date and age|mf=yes|1995|09|22}}\n| nationality        = American\n| occupation         = Actress\n| years_active       = 2002 - present\n}}\n\n'''Lulu Antariksa''' (born Lauren Marie-Elizabeth Antariksa; August 22, 1995) is an American actress. She is best known for her role in [[The CW]] show ''[[Legacies (TV series)|Legacies]]'' as Penelope Park and is currently starring in the web series ''[[T@gged]]'' on the streaming website [[go90]].\n\n==Early life and education==\nAntariksa was born in California<ref name=\"presskit\">{{cite web|url=http://nickpress-howtorock.com/bios.html|title=How to Rock \u2013 Press Site \u2013 Bios \u2013 Lulu Antariksa|date=January 2012|archiveurl=https://www.webcitation.org/653lopuoX?url=http://nickpress-howtorock.com/bios.html|archive-date=2012-01-29}}</ref> to an [[Native Indonesians|Indonesian]] father and a [[Germans|German]] mother.<ref>[http://blendedent.com/2012/06/20/interview-with-lulu-antariksa/ \"Interview with Lulu Antariksa\"]. Blended Entertainment. June 20, 2012. Retrieved 2013-08-26.</ref> Antariksa is trained in dancing and singing and plays guitar, piano, ukulele, saxophone, and bass.<ref name=\"presskit\"/> She became interested in acting while attending [[Valencia High School (Santa Clarita, California)|Valencia High School]] in [[California]].\n\n==Career==\nAntariksa's early roles from 2002 to 2008 were under the name Lauren Antariksa. \n\nAntariksa's breakout role was as Stevie Baskara in the 2012 [[Nickelodeon]] sitcom [[How to Rock]]. The show premiered February 4, 2012, and ran for 25 episodes. It was not renewed for a second season.<ref>{{Cite web|url=https://deadline.com/2012/08/nickelodeons-how-to-rock-cancelled-after-one-season-325169/|title=Nick's 'How To Rock' Cancelled After One Season|last=Andreeva|first=Nellie|last2=Andreeva|first2=Nellie|date=2012-08-27|website=Deadline|language=en|access-date=2020-03-02}}</ref><ref>{{Cite web|url=https://tvbythenumbers.zap2it.com/press-releases/nickelodeons-new-series-how-to-rock-premieres-saturday-february-4/|title=Nickelodeon\u2019s New Series \u2018How To Rock\u2019 Premieres Saturday, February 4|date=2011-12-22|website=TV By The Numbers|language=en|access-date=2020-03-02}}</ref> \n\nAntariksa's other television acting credits include ''[[American Family (2002 TV series)|American Family]]'', ''[[According to Jim]]'', ''[[ER (TV series)|ER]]'', ''[[Head Cases]]'', ''[[Monk (TV series)|Monk]]'', ''[[Zoey 101]]'', and ''[[Gemini Division]]''.<ref>{{cite news|url=https://movies.nytimes.com/person/1327304/Lauren-Antariksa |archive-url=https://archive.today/20120713145304/http://movies.nytimes.com/person/1327304/Lauren-Antariksa |url-status=dead |archive-date=2012-07-13 |title=Lauren Antariksa Movies & TV |newspaper=[[The New York Times]] |access-date=2011-02-06}}</ref> \n\nShe played the lead role in the 2018 [[Apocalyptic and post-apocalyptic fiction|post-apocalyptic]] thriller film ''[[What Still Remains]]'' alongside [[Colin O'Donoghue]]''.'' The film received mixed reviews, with the [[Los Angeles Times]]' review stating: \"...though it gets more tense in its second half, the movie overall is a bit too sedate. Still, a great cast... brings Mendoza\u2019s ideas to life,\"<ref>{{Cite web|url=https://www.latimes.com/entertainment/movies/la-et-mn-mini-what-still-remains-review-20180808-story.html|title=Review: Josh Mendoza's \u2018What Still Remains\u2019 goes beyond the post-apocalypse|date=2018-08-09|website=Los Angeles Times|language=en-US|access-date=2020-03-02}}</ref> while Rob Hunter for [[Film School Rejects]] wrote \"Antariksa does good work and convinces as a young woman who\u2019s fully able to care for herself while still being someone in need of human contact\".<ref>{{Cite web|url=https://filmschoolrejects.com/what-still-remains-review/|title='What Still Remains' Review: People, Unfortunately|date=2018-08-11|website=Film School Rejects|language=en-US|access-date=2020-03-02}}</ref> [[Screen Anarchy|Screenanarchy.com]]'s review stated: \"the lead performances are very solid\"<ref>{{Cite web|url=https://screenanarchy.com/2018/08/review-what-still-remains-quietly-becomes-gripping.html|title=Review: WHAT STILL REMAINS Quietly Becomes Gripping|date=2018-08-06|website=ScreenAnarchy|access-date=2020-03-02}}</ref> and [[Decider (website)|Decider]] called the film \"a hidden gem\".<ref>{{Cite web|url=https://decider.com/2018/12/26/what-still-remains-on-netflix/|title=\u2018What Still Remains\u2019 on Netflix Is a Great Follow-Up to \u2018Bird Box\u2019 (Whether You Loved It or Hated It)|date=2018-12-26|website=Decider|language=en|access-date=2020-03-02}}</ref>\n\nAntariksa was next seen in the role of Penelope Park in the first season of [[The CW]] television series ''[[Legacies (TV series)|Legacies]]''<ref>{{cite web |author=Gina Carbone |url=https://www.cinemablend.com/television/2468831/will-legacies-season-2-bring-back-penelope-julie-plec-gives-heartbroken-fans-hope |title=Will Legacies Season 2 Bring Back Penelope? Julie Plec Gives Heartbroken Fans Hope |work=Cinemablend |date=March 23, 2019 |access-date=2019-06-01}}</ref>. She then starred in the short film ''The Lonely Host,''<ref>{{Citation|title=The Lonely Host|url=http://www.imdb.com/title/tt10674254/|access-date=2020-03-02}}</ref> where one reviewer called her performance \"impeccable.\"<ref>{{Cite web|url=https://morbidlybeautiful.com/short-lonely-host/|title=Horror Short: The Lonely Host|date=2019-12-18|website=Morbidly Beautiful|language=en-US|access-date=2020-03-02}}</ref>  \n\nCurrently, Antariksa plays high-schooler Rowan Fricks in the [[go90]] [[web series]] ''[[T@gged]]''.<ref name=\":0\">[https://awesomenesstv.com/2016/08/11/5-facts-you-didnt-know-about-the-tagged-cast/ 5 Facts You Didn't Know About The T@gged Cast] {{Webarchive|url=https://web.archive.org/web/20161013002614/https://awesomenesstv.com/2016/08/11/5-facts-you-didnt-know-about-the-tagged-cast/|date=2016-10-13}}. Awesomenesstv.com (August 11, 2016). Retrieved on 2016-11-08.</ref>\n\n==Filmography==\n{| class=\"wikitable sortable\"\n|+Television roles\n|-\n! Year\n! Title\n! Role\n! class=\"unsortable\" | Notes\n|-\n| align=\"center\"|2002\n| ''[[American Family (2002 TV series)|American Family]]''\n| Lina\n| Episode: \"The Masked Eagle: Part 1\"\n|-\n| align=\"center\"|2003\n| ''[[According to Jim]]''\n| Madeline\n| Episode: \"[[List of According to Jim episodes#ep38|Slumber Party]]\"\n|-\n| align=\"center\"|2004\n| ''[[ER (TV series)|ER]]''\n| Anna\n| Episode: \"[[ER (season 10)#ep212|Touch and Go]]\"\n|-\n| align=\"center\"|2005\n| ''[[Head Cases]]''\n| Erica\n| Episode: \"Malpractice Makes Perfect\"\n|-\n| align=\"center\"|2006\n| ''[[Monk (TV series)|Monk]]''\n| Whispering Child #1 \n| Episode: \"[[Monk (season 5)#ep63|Mr. Monk and the Garbage Strike]]\"\n|-\n| align=\"center\"|2008\n| ''[[Zoey 101]]''\n| 7th Grade Girl \n| Episode: \"[[List of Zoey 101 episodes#ep53|Anger Management]]\"\n|-\n| align=\"center\"|2008\n| ''[[Gemini Division]]''\n| Young Anna\n| Episode: \"In the Region of Ice\"\n|-\n| align=\"center\"|2012\n| ''[[How to Rock]]''\n| Stevie Baskara \n| Main role (25 episodes)\n|-\n|align=\"center\"| 2012\n| ''[[Figure It Out]]''\n| Herself\n| Panelist; 7 episodes\n|-\n| align=\"center\"|2013\n| ''[[Jessie (2011 TV series)|Jessie]]''\n| Victoria Montesano\n| Episode: \"[[List of Jessie episodes#ep51|Break-Up and Shape-Up]]\"\n|-\n| align=\"center\"|2014\n| ''[[Kickin' It]]''\n| Grey Cole\n| Episode: \"[[List of Kickin' It episodes#ep65|Return of Spyfall]]\"\n|-\n| align=\"center\"|2016\n| ''[[Crazy Ex-Girlfriend (TV series)|Crazy Ex-Girlfriend]]''\n| Kayla\n| Episode: \"[[List of Crazy Ex-Girlfriend episodes#ep10|I'm Back at Camp with Josh!]]\"\n|-\n| align=\"center\"|2018\u20132019\n| ''[[Legacies (TV series)|Legacies]]''\n| Penelope Park\n| 7 episodes\n|}\n{| class=\"wikitable\"\n|+Film roles\n!Year\n!Title\n!Role\n!Notes\n|-\n|align=\"center\"|2018\n|''[[What Still Remains]]''\n|Anna\n|Lead role\n|-\n|align=\"center\"|2019\n|''The Lonely Host''\n|Silvia\n|Short film\n|-\n|align=\"center\"|2020\n|''Witch Hunt''\n|Jen\n|<ref>{{Citation|title=Witch Hunt|url=http://www.imdb.com/title/tt10160974/|access-date=2020-03-02}}</ref>\n|}\n{| class=\"wikitable sortable\"\n|+Web series roles\n|-\n!Year\n!Title\n!Role\n!Notes\n|-\n|align=\"center\"|2013\u20132015\n|''Side Effects''\n|Lexi Connolly\n|Main role\n|-\n|align=\"center\"|2016\u2013present\n|''[[T@gged]]''\n|Rowan Fricks\n|Main role<ref name=\":0\" />\n|-\n|align=\"center\"|2018\n|''Impulse''\n|Patty\n|Episode: \"Ep 1 - Pilot\"\n|}\n\n{| class=\"wikitable sortable\"\n|+ Music video roles\n|-\n! Year\n! Title\n! Director\n! class=\"unsortable\" | Notes\n|-\n| rowspan=\"3\" | 2012\n| \"Lightning\"\n| [[Kurt Hugo Schneider]]\n| Alex Goot's love interest\n|-\n| \"Maroon 5 Medley\"\n| Kurt Hugo Schneider\n| Cameo\n|-\n| \"All Your Love\"\n| Daniel Durston\n| Sung with Daniel Durston\n|}\n\n==References==\n{{Reflist}}\n\n==External links==\n*{{IMDb name|1984618}}\n*[https://www.monstersandcritics.com/smallscreen/who-plays-penelope-on-legacies-lulu-antariksa-is-a-very-private-person/ Who plays Penelope on Legacies? Lulu Antariksa is a very private person]\n\n{{authority control}}\n\n{{DEFAULTSORT:Antariksa, Lulu}}\n[[Category:1995 births]]\n[[Category:21st-century American actresses]]\n[[Category:Actresses from California]]\n[[Category:American child actresses]]\n[[Category:American television actresses]]\n[[Category:American people of German descent]]\n[[Category:American people of Indonesian descent]]\n[[Category:Living people]]\n[[Category:People from Santa Clarita, California]]\n[[Category:Actresses of German descent]]\n[[Category:American web series actresses]]\n\n\n{{US-screen-actor-stub}}\n", "name_user": "WikiEditor1213", "label": "safe", "comment": "I provided the facts with the citation.", "url_page": "//en.wikipedia.org/wiki/Lulu_Antariksa"}
{"title_page": "List of tools for static code analysis", "text_new": "{{TOC right}}\n<!--\nEDITORS, PLEASE NOTE:\n\nThis article is covered under Wikipedia's [[Wikipedia:Manual of Style/Stand-alone lists|guidelines for standalone lists]]. This means that the only tools that should be listed here are ones that have their own articles on Wikipedia. This is not the place to have external links to a tool's homepage or anything like that. Tools that fail to meet this criteria (of having an article) may be deleted per our guidelines. If the tool has no article, consider [[WP:WTAF|writing one first]]. \n-->\nThis is a list of tools for [[static code analysis]].\n\n== Language ==\n\n=== Multi-language ===\n* [[Apache Yetus]]{{snd}} A collection of build and release tools. Included is the 'precommit' module that is used to execute full and partial/patch CI builds that provides static analysis of code via other open source tools as part of a configurable report. Built-in support for C, C++, Java, Perl, Python, Ruby, Shell, and XML. May be extended via a plug-in framework.\n* [[Axivion Bauhaus Suite]]{{snd}} A static code analysis tool suite for Ada, C, C++, C#, and Java code that performs various analyses such as architecture checking, interface analyses, [[Motor Industry Software Reliability Association|MISRA]] checking, and clone detection.\n*[[Cigital]] SecureAsist{{snd}} A lightweight IDE plugin that points out common security vulnerabilities in real time as the developer is coding. Supports Java, .NET, and PHP.\n* [[Code Dx]]{{snd}} Software application vulnerability correlation and management system that consolidates and normalizes software vulnerabilities detected by multiple [[Static program analysis|static]] application security testing (SAST) and [[Web application security scanner|dynamic]] application security testing (DAST) tools, as well as the results of manual code reviews. Supports C, C++, C#, Java, JavaScript, JSP, PHP, Python, Rails, Ruby, Scala, VB.NET and XML/XSL.<ref>{{cite web|url=https://codedx.com/supported-tools/|work=codedx.com|accessdate=Apr 25, 2017|title=Supported Application Security Testing Tools and Languages}}</ref>\n* [[CodeScene]]{{snd}} Behavioral code analysis based on revision control data. Can analyse any codebase, and supports X-Ray (or method-level analysis) for C, C++, C#, Java, Groovy, JavaScript, TypeScript, Objective-C, Scala, Python, Swift, Go, Visual Basic .Net, PHP, and Ruby.\n* [[Compuware]] Topaz for Program Analysis{{snd}} A static code analysis for PL/I and COBOL.  Produces visual displays of structure charts and logic/data flow and shows dependencies across programs.\n* [[ConQAT]]{{snd}} Continuous quality assessment toolkit that allows flexible configuration of quality analyses (architecture conformance, clone detection, quality metrics, etc.) and dashboards. Supports Java, C#, C++, JavaScript, ABAP, Ada and many other languages.\n* [[Coverity]]{{snd}} A static analysis tool for C, C++, C#, Objective-C, Java, Javascript, node.JS, Ruby, PHP, & Python.\n* [[Micro Focus]] [[Fortify Software]] Static Code Analyzer{{snd}} Helps developers identify software security vulnerabilities in more than 30 languages, including C, C++, Java, JSP, .NET, ASP.NET, classic [[Active Server Pages]] (ASP), ColdFusion, PHP, Visual Basic 6, VBScript, JavaScript, PL/SQL, T-SQL, Python, Objective-C, ABAP and COBOL and configuration files.\n* [[Micro Focus]] Enterprise Analyzer and COBOL Analyzer. Static code analysis and visualization tools for legacy and mainframe applications. Analyze code in different languages including COBOL, PL/I, Natural, RPG, Java, Assembler, Easytrieve, VB, C/C++, PL/SQL, C#, VB.NET, KornShell, Job schedulers and more.\n* [[GrammaTech]] [[CodeSonar]]{{snd}} Defect detection (buffer overruns, memory leaks, etc.), concurrency and security checks, architecture visualization and software metrics for C, C++, Objective-C, and Java source code.\n* [[Security AppScan|IBM Security AppScan]] (formerly known as IBM Rational AppScan) Source Edition{{snd}} Analyzes source code to identify security vulnerabilities while integrating security testing with software development processes and systems. Supports C, C++, .NET, Java, JSP, JavaScript, ColdFusion, Classic ASP, PHP, Perl, Visual Basic 6, PL/SQL, Python, T-SQL, and COBOL\n* [[Infer Static Analyzer|Facebook Infer]]{{snd}} A tool for Java, C, C++, and Objective-C. Targets null pointer problems, leaks, concurrency issues and API usage for Facebook's mobile apps. Available as open source on github.\n* [[Imagix 4D]]{{snd}} C, C++ and Java. Windows and Linux versions.\n* [[Kiuwan]]{{snd}} Software Analytics end-to-end platform for static code analysis and automated code review. It covers defect detection, application security & IT Risk Management, with enhanced life cycle and application governance features. Support for over 20 languages, including [[Objective-C]], [[Java (programming language)|Java]], [[JavaServer Pages|JSP]], [[JavaScript]], [[PHP]], [[C (programming language)|C]], [[C++]], [[ABAP]], [[COBOL]], [[Java Class Library|JCL]], [[C Sharp (programming language)|C#]], [[PL/SQL]], [[Transact-SQL]], [[SQL (programming language)|SQL]], [[Visual Basic]], [[Visual Basic .NET]], [[Android (operating system)]].\n* [[Klocwork]]{{snd}} Provides security vulnerability, standards compliance (MISRA, [[ISO 26262]] and others), defect detection and build-over-build trend analysis for C, C++, C#, Java.\n* [[Lint (software)|Lint]], as supplied with the [[Android (operating system)|Android]] [[Software development kit|SDK]].\n* [[LDRA Testbed]]{{snd}} A software analysis and testing tool suite for C, C++, Ada83, Ada95 and Assembler (Intel, Freescale, Texas Instruments).\n* [[MALPAS Software Static Analysis Toolset|MALPAS]]{{snd}} A software static analysis toolset for a variety of languages including Ada, C, Pascal and Assembler (Intel, PowerPC and Motorola). Used primarily for safety critical applications in Nuclear and Aerospace industries.\n* [[Moose (analysis)|Moose]]{{snd}} Moose started as a software analysis platform with many tools to manipulate, assess or visualize software. It can evolve to a more generic data analysis platform. Supported languages are C, C++, Java, Smalltalk, .NET, more may be added.\n* [[Parasoft]]{{snd}} Provides static analysis (pattern-based, flow-based, in-line, metrics) for C, C++, Java, .NET (C#, VB.NET, etc.), JSP, JavaScript, XML, and other languages for standards like MISRA, CWE, OWASP, and CERT. Through a [[Parasoft DTP|Development Testing Platform]], static code analysis functionality is integrated with [[unit testing]], [[code reviews|peer code review]], [[runtime error detection]] and [[Requirements traceability|traceability]].\n* [[PMD (software)#Copy/Paste Detector (CPD)|Copy/Paste Detector (CPD)]]{{snd}} [[PMD (software)|PMDs]] [[duplicate code]] detection for (e.g.) [[Java (programming language)|Java]], [[JavaServer Pages|JSP]], [[C (programming language)|C]], [[C++]], [[ColdFusion]], [[PHP]] and [[JavaScript]]<ref>{{cite web|url=http://sourceforge.net/projects/pmd/files/pmd/5.0.0/|accessdate=Dec 9, 2012|title=PMD - Browse /pmd/5.0.0 at SourceForge.net}}</ref> code.\n* [[Polyspace]]{{snd}} Uses [[abstract interpretation]] to detect and prove the absence of certain [[run time (program lifecycle phase)|run time errors]] in [[source code]] for C, C++, and Ada\n* [[Pretty Diff]]{{snd}} A language-specific [[Comparison of file comparison tools|code comparison]] tool that features language-specific analysis reporting in addition to language-specific [[Minification (programming)|minification]] and [[Prettyprint|beautification]] algorithms.\n* [[Protecode]]{{snd}} Analyzes the composition of software source code and binary files, searches for open source and third party code and their associated licensing obligations. Can also detect security vulnerabilities.\n* [[PVS-Studio]]{{snd}} A software analysis tool for C, C++, C++/CLI, C++/CX (Component Extensions), C#, Java.\n*[[RIPS]] - A static code analysis solution for PHP, Java and Node.js with many integration options for the automated detection of complex security vulnerabilities.\n* [[Rogue Wave Software]] OpenLogic{{snd}} Scans source code and binaries to identify open source code and licenses, manages open source policies and approvals, reports security vulnerabilities, and provides open source technical support.\n* [[Semmle]]{{snd}} Supports C, C++, C#, Java, JavaScript, Objective-C, and Python.\n* [[SideCI|SideCI&nbsp;]]\u2013 Static code analysis based automated code review tool for Ruby, Python, PHP, JavaScript, CoffeeScript and Go. Checks style, quality, dependencies, security and bugs.\n* [[SofCheck Inspector]]{{snd}} Static detection of logic errors, [[race condition]]s, and [[redundant code]] for [[Ada (programming language)|Ada]] and [[Java (programming language)|Java]]; automatically extracts [[precondition|pre]]-[[postcondition]]s from code.\n* [[SonarQube]]{{snd}} A continuous inspection engine that finds vulnerabilities, bugs and code smells.  Also tracks code complexity, unit test coverage and duplication. Supported languages: ABAP, Android (Java), C, C++, CSS, Objective-C, COBOL, C#, Flex, Forms, Groovy, Java, JavaScript, Natural, PHP, PL/SQL, Swift, Visual Basic 6, Web, XML, Python, Ruby, Go, Scala, Kotlin, Apex.\n* [[Sotoarc]]-Sotograph{{snd}} Architecture and quality in-depth analysis and monitoring for C, C++, C#, Java, ABAP.\n* [[SourceMeter]]&nbsp;- A proprietary platform-independent, command-line static source code analyzer for Java, C, C++, RPG IV (AS/400) and Python.\n* [[SQuORE]] is a multi-purpose and multi-language monitoring tool<ref name=\"squore\">Baldassari, Boris (2012). [http://www.squoring.com/images/documents/monitoring_sw_projects_with_squore.pdf \"SQuORE: a new approach to software project assessment\"]{{Dead link|date=March 2020 |bot=InternetArchiveBot |fix-attempted=yes }}, International Conference on Software and Systems Engineering and their Applications, Nov. 2012, Paris, France.</ref> for software projects.\n* [[Understand (software)|Understand]]{{snd}} A multi-platform tool for code analysis and comprehension of large code bases. Supported languages include Ada, Cobol, Ansi C, K&R C, Ansi C++, C#, FORTRAN, Java, Jovial, Pascal, PL/M, Python, VHDL, Objective C, Objective C++, HTML, PHP, JavaScript, and XML.\n* [[Veracode]]{{snd}} Finds security flaws in application binaries and bytecode without requiring source. Supported languages include C, C++, .NET (C#, [[C++/CLI]], VB.NET, ASP.NET), Java, JSP, [[ColdFusion]], [[PHP]], [[Ruby on Rails]], [[JavaScript]] and [[TypeScript]] (including [[AngularJS]], [[Node.js]] and [[Jquery]]), [[Python (programming language)|Python]], [[Perl]], [[Scala (programming language)|Scala]], [[Objective-C]], [[Swift (programming language)|Swift]], [[Active Server Pages]], [[Visual Basic 6]], [[COBOL]], and [[IBM RPG]], including mobile applications on the [[Android (operating system)|Android]] and [[iOS (Apple)|iOS]] platforms and written in [[JavaScript]] cross platform frameworks.<ref name=\"veracode\">{{cite web |url=http://www.veracode.com/products/binary-static-analysis-sast |title=White Box Testing/Binary Static Analysis (SAST) |work=Veracode.com |accessdate=2018-02-06}}</ref>\n* [[Yasca]]{{snd}} Yet Another Source Code Analyzer, a plugin-based framework to scan arbitrary file types, with plugins for C, C++, Java, JavaScript, ASP, PHP, HTML-CSS, ColdFusion, [[COBOL]], and other file types. It integrates with other scanners, including [[FindBugs]], [[PMD (software)|PMD]], and Pixy.\n\n=== [[.NET Framework|.NET]] ===\n* [[.NET Compiler Platform]] (Codename ''Roslyn''){{snd}} Open-source compiler framework for [[C Sharp (programming language)|C#]] and [[Visual Basic .NET]] developed by [[Microsoft]] .NET. Provides an API for analyzing and manipulating syntax.\n* [[CodeIt.Right]]{{snd}} Combines static code analysis and automatic refactoring to best practices which allows automatic correction of code errors and violations; supports C# and VB.NET.\n* [[CodeRush]]{{snd}} A plugin for [[Visual Studio]] which alerts users to violations of best practices.\n* [[FxCop]]{{snd}} Free static analysis for Microsoft .NET programs that compiles to [[Common Intermediate Language|CIL]]. Standalone and integrated in some [[Microsoft Visual Studio]] editions; by Microsoft.\n* [[NDepend]]{{snd}} Simplifies managing a complex .NET code base by analyzing and visualizing code dependencies, by defining design rules, by doing impact analysis, and by comparing different versions of the code. Integrates into [[Visual Studio]].\n* [[Parasoft]] dotTEST{{snd}} A static analysis, unit testing, and code review plugin for [[Visual Studio]]; works with languages for Microsoft .NET Framework and .NET Compact Framework, including C#, VB.NET, ASP.NET and Managed C++.\n* [[StyleCop]]{{snd}} Analyzes C# source code to enforce a set of style and consistency rules. It can be run from inside of [[Microsoft Visual Studio]] or integrated into an [[MSBuild]] project.\n\n=== [[Ada (programming language)|Ada]] ===\n* [[SPARK Toolset]]{{snd}} Verification tools for SPARK 2014{{snd}} a subset of Ada 2012 that leverages Ada's support for contracts. Designed to offer soundness, depth, modularity and efficiency of verification.\n* [[AdaControl]]{{snd}} A tool to control occurrences of various entities or programming patterns in Ada code, used for checking coding standards, enforcement of safety related rules, and support for various manual inspections. Features automatic fixing of violations.\n* [[CodePeer]]{{snd}} An advanced static analysis tool that detects potential run-time logic errors in Ada programs. \n* [[Fluctuat]]{{snd}} [[abstract interpretation|Abstract interpreter]] for the validation of numerical properties of programs.\n* [[LDRA Testbed]]{{snd}} A software analysis and testing tool suite for Ada83/95.\n* [[Polyspace]]{{snd}} Uses [[abstract interpretation]] to detect and prove the absence of certain [[run time (program lifecycle phase)|run time errors]] in [[source code]].\n* [[SofCheck Inspector]]{{snd}} (Bought by [[AdaCore]]) Static detection of logic errors, [[race condition]]s, and redundant code for Ada; automatically extracts [[precondition|pre]]-[[postcondition]]s from code.\n\n=== [[C (programming language)|C]], [[C++]] ===\n{| class=\"wikitable sortable\"\n! Tool\n! width=\"75\" | Latest release\n! [[Free software]]\n![[Cyclomatic complexity|Cyclomatic Complexity Number]]\n! [[Duplicate code|Duplicate<br />code]]\n! Notes\n\n|-\n![[Astr\u00e9e (static analysis)|Astr\u00e9e]]\n| \n| {{no}}; Proprietary\n|\n| \n| finds all potential [[runtime errors]] and data races by [[abstract interpretation]], can prove their absence, and can prove functional assertions; tailored towards safety-critical C code (e.g. avionics and automotive). Includes MISRA checker.\n\n|-\n![[Axivion Bauhaus Suite]]\n| \n| {{no}}; Proprietary\n|\n| \n| A static code analysis tool suite for Ada, C, C++, C#, and Java code that performs various analyses such as architecture checking, interface analyses, MISRA checking, and clone detection.\n\n|-\n![[BLAST model checker|BLAST]]{{snd}} Berkeley Lazy Abstraction Software verification Tool (retired)\n| 2.7.2\n| {{yes}}\n|\n| \n|An open-source software model checker for C programs based on lazy abstraction (follow-on project is CPAchecker.<ref>{{cite web |url=http://cpachecker.sosy-lab.org/|title=CPAchecker|date=2015-02-08}}</ref>).\n\n|-\n![[Clang]]\n| 8.0.0\n| {{yes}}\n|\n| \n|An open-source compiler that includes a static analyzer.\n\n|-\n![[CLion]]\n| 2019.1\n| {{no}}; Proprietary\n|\n| \n|An IDE with a built-in source code analysis.\n\n|-\n![[Coccinelle (software)|Coccinelle]]\n| 1.0.7\n| {{yes}}\n|\n| \n|An open-source source code pattern matching and transformation.\n\n|-\n! [[Coverity]]\n|2019.12<ref>{{Cite web|url=https://community.synopsys.com/s/question/0D52H00004v4kNZSAY/announcement-coverity-201912-is-now-available|title=SIG Customer Community|website=community.synopsys.com|access-date=2020-02-06}}</ref>\n| {{no}}; Proprietary\n|\n| \n|A static analysis tool for C/C++.\n\n|-\n! [[CPAchecker]]\n| \n| {{yes}}; Apache 2 License\n|\n| \n|A tool for execution path checking of C.\n\n|-\n![[Cppcheck]]\n|1.90\n| {{yes}};&nbsp;[[GNU General Public License|GPL]]\n| {{no}}\n| {{no}}\n|Open-source tool that checks for several types of errors, including use of [[Standard Template Library|STL]].\n\n|-\n! [[Cppdepend]]\n| 2019.1\n| {{no}};Proprietary\n|\n| \n|Simplifies managing a complex C/C++ code base by analyzing and visualizing code dependencies, by defining design rules, by doing impact analysis, and comparing different versions of the code.\n\n|-\n![[cpplint]]\n| \n| {{yes}}\n|\n| \n|An open-source tool that checks for compliance with Google's style guide for C++ coding.\n\n|-\n![[ECLAIR]]\n| \n| \n|\n| \n|A platform for the automatic analysis, verification, testing and transformation of C and C++ programs.\n\n|-\n![[Eclipse (software)|Eclipse]]\n| \n| {{yes}}\n|\n| \n|An open-source IDE that includes a static code analyzer.\n\n|-\n![[Fluctuat]]\n| \n| \n|\n| \n|[[abstract interpretation|Abstract interpreter]] for the validation of numerical properties of programs.\n\n|-\n![[Frama-C]]\n| \n| {{yes}}\n|\n| \n|An open-source static analysis framework for C.\n\n|-\n![[Red Lizard Software#Products|Goanna]]\n| \n| \n|\n| \n|A software analysis tool for C/C++.\n\n|-\n![[Helix QAC]]\n| \n| \n|\n| \n|Formerly PRQA QA\u00b7C and QA\u00b7C++, deep static analysis of C/C++ for quality assurance and guideline/coding standard enforcement with MISRA support.\n|-\n!  [[Infer Static Analyzer|Infer]]\n| \n| {{yes}}\n|\n| \n|Developed by an engineering team at Facebook with open-source contributors. Targets null pointer and other memory problems. Available as open-source on github.\n\n|-\n![[lint (software)|Lint]]\n| \n| \n|\n| \n|The original, from 1978, static code analyzer for C.\n|-\n! [[LDRA Testbed]]\n| v9.8.1<br />(2019-07-30)\n| \n|\n| \n|A software analysis and testing tool suite for C/C++, that performs static analysis, standards enforcement (eg MISRA C/C++) , dynamic analysis, unit testing and requirements traceability.\n|-\n! [[Parasoft C/C++test]]\n| 10.4.2\n| {{no}}; Proprietary\n|| \n|\n|A C/C++ tool that does static analysis, unit testing, code review, and runtime error detection; plugins available for [[Visual Studio]] and [[Eclipse (software)|Eclipse]]-based IDEs.\n\n|-\n![[PC-Lint]]\n| \n| {{no}}\n|\n| \n|A software analysis tool for C with partial support for C++2011.\n\n|-\n! [[Polyspace]]\n| \n| {{no}}\n|\n| \n|Uses [[abstract interpretation]] to detect and prove the absence of [[run time (program lifecycle phase)|run time errors]], Dead Code in [[source code]] as well as used to check all MISRA (2004, 2012) rules (directives, non directives).\n\n|-\n! [[SLAM project]]\n| \n| \n|\n| \n|a project of [[Microsoft Research]] for checking that software satisfies critical behavioral properties of the interfaces it uses.\n\n|-\n![[Sparse]]\n| \n| {{yes}}\n|\n| \n| An open-source tool designed to find faults in the [[Linux]] kernel.\n\n|-\n! [[SonarQube]]\n|8.1\n| {{no}}\n| {{yes}}\n| {{yes}}\n| An open-source tool which offers C/C++ support via a commercial license\n\n|-\n![[Splint (programming tool)|Splint]]\n|3.1.2\n| {{yes}}\n|\n| \n| An open-source tool statically checking C programs for security vulnerabilities and coding mistakes.\n|-\n![[Visual Studio]]\n| \n| {{yes}}\n|\n| \n| An IDE that provides static code analysis for C/C++ both in the editor environment and from the compiler command line.\n|}\n\n=== [[Java (programming language)|Java]] ===\n{| class=\"wikitable sortable\"\n! Tool\n! width=\"60\" | Latest release\n! [[Free software]]\n! [[Duplicate code|Duplicate<br />code]]\n! Notes\n\n|-\n! [[Checkstyle]]\n| 2020-01-26\n| {{yes}};&nbsp;[[GNU Lesser General Public License|LGPL]]\n| {{No}}\n| Besides some static code analysis, it can be used to show violations of a configured coding standard. Duplicate code detection was removed<ref>https://github.com/checkstyle/checkstyle/issues/523</ref> from Checkstyle.\n\n|-\n! [[Coverity]]\n| 2017-01-19\n| {{no}}; Proprietary\n| \n| Coverity is a static analysis and Static Application Security Testing (SAST) platform that finds critical defects and security weaknesses in code as it\u2019s written before they become vulnerabilities, crashes, or maintenance headaches.\n\n|-\n! [[Eclipse (software)|Eclipse]]\n| 2017-06-28\n| {{yes}}; [[Eclipse Public License|EPL]]\n| {{no}}\n| Cross-platform IDE with own set of several hundred code inspections available for analyzing code on-the-fly in the editor and bulk analysis of the whole project. Plugins for Checkstyle, FindBugs, and PMD.\n|-\n! [[FindBugs]]\n| 2015-03-06\n| {{yes}}; [[GNU Lesser General Public License|LGPL]]\n| \n| Based on [[Jakarta Project|Jakarta]] [[Byte Code Engineering Library|BCEL]] from the University of Maryland. [[SpotBugs]] is the spiritual successor of FindBugs, carrying on from the point where it left off with support of its community.\n\n|-\n! [[Infer Static Analyzer|Infer]] \n| 2017-10-19\n| {{yes}};&nbsp;[https://code.facebook.com/pages/850928938376556 BSD&nbsp;with&nbsp;additio-<br />nal&nbsp;patent clause]\n| \n| Developed by an engineering team at Facebook with open-source contributors. Targets null pointer exceptions, leaks, and thread safety issues.\n\n|-\n! [[IntelliJ IDEA]]\n| 2017-11-30\n| {{yes}}; [[Apache License#Version 2.0|ASL 2]]\n| {{yes}}\n| A leading Java IDE with built-in code inspection and analysis. Plugins for Checkstyle, FindBugs, and PMD.\n\n|-\n! [[JArchitect]]\n| 2017-06-11\n| {{no}}; Proprietary\n| \n| Simplifies managing a complex code base by analyzing and visualizing code dependencies, defining design rules, doing impact analysis, and by comparing different versions of the code.\n\n|-\n! [[Jtest]]\n| 2019-05-21\n| {{no}}; Proprietary\n| {{yes}}\n| Testing and static code analysis product by [[Parasoft]].\n\n|-\n! [[LDRA Testbed|LDRA&nbsp;Testbed]]\n| \n| {{no}}; Proprietary\n| \n| Analysis and testing tool suite.\n\n|-\n! [[PMD (software)|PMD]]\n| 2019-06-30\n| {{yes}};&nbsp;[[BSD licenses|BSD]],&nbsp;[[Apache License#Version 2.0|ASL&nbsp;2]],&nbsp;[[GNU Lesser General Public License|LGPL]]\n| {{yes}}\n| A static ruleset based source code analyzer that identifies potential problems.\n\n|-\n! [[RIPS]]\n| 2019-01-07\n| {{no}}; Proprietary\n|\n| Language-specific source code analysis solution with many integration options for accurate detection of complex security and quality issues.\n\n|-\n! [[SemmleCode]]\n| \n| {{no}}; Proprietary\n| \n| Object oriented code queries for static program analysis.\n\n|-\n! [[Soot (software)|Soot]]\n| \n| {{yes}}; [[GNU Lesser General Public License|LGPL]]\n| \n| A language manipulation and optimization framework consisting of intermediate languages.\n\n|-\n! [[SpotBugs]]\n| 2020-02-16\n| {{yes}}; [[GNU Lesser General Public License|LGPL]]\n| \n| Based on [[FindBugs]] and [[Byte Code Engineering Library|BCEL]] from the University of Maryland.\n\n|-\n! [[Squale]]\n| 2011-05-26\n| {{yes}}; [[GNU Lesser General Public License|LGPL]]\n| \n| A platform to manage software quality.\n\n|-\n! [[SourceMeter]]\n| 2016-02-01 \n| {{no}}; Proprietary\n| {{yes}}\n| A platform-independent, command-line static source code analyzer.\n\n|-\n! [[ThreadSafe]]\n| 2014-03-28\n| {{no}}; Proprietary\n| \n| A static analysis tool focused on finding concurrency bugs.\n|}\n\n=== [[JavaScript]] ===\n* [[ESLint]]{{snd}} JavaScript [[syntax checker]] and formatter.\n* [[Google Closure Tools#Closure Compiler|Google's Closure Compiler]]{{snd}} JavaScript optimizer that rewrites code to be faster and smaller, and checks use of native JavaScript functions.\n* [[JSHint]]{{snd}} A community driven fork of JSLint.\n* [[JSLint]]{{snd}} JavaScript syntax checker and validator.\n\n=== [https://www.mulesoft.com/ Mulesoft] ===\n\n*[https://integralzone.com/products/iz-analyzer/ IZ Analyzer] {{snd}}Automated Code Quality and [[Static program analysis|Code review tool]]. Available in [https://sonar-cloud.integralzone.com/iz/org/upgrade freemium] options.\n\n=== [[Objective-C]], Objective-C++ ===\n* [[Clang]]{{snd}} The free Clang project includes a static analyzer. As of version 3.2, this analyzer is included in [[Xcode]].<ref>{{cite web | url=https://developer.apple.com/mac/library/featuredarticles/StaticAnalysis/index.html | title=Static Analysis in Xcode | publisher=Apple | accessdate=2009-09-03}}</ref>\n* [[Infer Static Analyzer|Infer]]{{snd}} Developed by an engineering team at Facebook with open-source contributors. Targets null pointers, leaks, API usage and other lint checks. Available as open source on github.\n* [[GrammaTech]] CodeSonar{{snd}} A [[static program analysis]] tool for C,C++, Objective-C..., see above.\n\n=== Opa ===\n* [[Opa (programming language)|Opa]] includes its own static analyzer. As the language is intended for web application development, the strongly statically typed compiler checks the validity of high-level types for web data, and prevents by default many vulnerabilities such as [[Cross-site scripting|XSS]] attacks and database code injections.\n\n=== [[Package management system|Packaging]] ===\n* [[Lintian]]{{snd}} Checks Debian software packages for common inconsistencies and errors.\n* [[RPM Package Manager|Rpmlint]]{{snd}} Checks for common problems in rpm packages.\n\n=== [[Perl]] ===\n* [[Perl::Critic]]{{snd}} A tool to help enforce common Perl best practices. Most best practices are based on [[Damian Conway]]'s [[Perl Best Practices]] book.\n* [[PerlTidy]]{{snd}} Program that acts as a [[syntax checker]] and tester/enforcer for coding practices in Perl.\n* [[Padre (software)|Padre]]{{snd}} An IDE for Perl that also provides static code analysis to check for common beginner errors.\n\n=== [[PL/SQL]] ===\n*[[TOAD]]{{snd}} A PL/SQL development environment with a Code xPert component that reports on general code efficiency as well as specific programming issues.\n* [[Visual Expert]]{{snd}} A PL/SQL [[Static program analysis|code analysis]] tool<ref>{{Cite web|url=http://www.visual-expert.com/EN/stored-procedure-pl-sql-oracle-plsql/code-function-analysis-impact-source_wpcodeanalysis.html|title=Visual Expert for Oracle - PL/SQL Code Analyzer|last=|first=|date=2017-08-24|website=www.visual-expert.com|archive-url=|archive-date=|access-date=}}</ref> that reports on programming issues and helps understand and maintain complex code ([[Change impact analysis|Impact Analysis]], [[Software documentation|Source Code documentation]], [[Call graph|Call trees]], [[Create, read, update and delete|CRUD matrix]], etc.).\n\n=== [[Python (programming language)|Python]] ===\n* [[PyCharm]]{{snd}} Cross-platform Python IDE with code inspections available for analyzing code on-the-fly in the editor and bulk analysis of the whole project.\n* [[PyDev]]{{snd}} Eclipse-based Python IDE with code analysis available on-the-fly in the editor or at save time.\n* [[Pylint]]{{snd}} Static code analyzer. Quite stringent; includes many stylistic warnings as well.\n\n=== [[Transact-SQL]] ===\n* [[Visual Expert]]{{snd}} A SQLServer [[Static program analysis|code analysis]] tool<ref>{{Cite web|url=http://www.visual-expert.com/EN/stored-procedure-t-sql-server-mssql-tsql/sqlserver-code-function-impact-analysis-source_wpcodeanalysis.html|title=Visual Expert for SQL Server - Transact SQL Code Analyzer|last=|first=|date=2017-08-24|website=www.visual-expert.com|archive-url=|archive-date=|access-date=}}</ref> that reports on programming issues and helps understand and maintain complex code ([[Change impact analysis|Impact Analysis]], [[Software documentation|Source Code documentation]], [[Call graph|Call trees]], [[Create, read, update and delete|CRUD matrix]], etc.).\n\n== Formal methods tools ==\nTools that use [[Soundness|sound]], i.e. over-approximating a rigorous model, [[formal methods]] approach to static analysis (e.g., using static [[assertion (computing)|program assertions]]). Sound methods contain no false negatives for bug-free programs, at least with regards to the idealized mathematical model they are based on (there is no \"unconditional\" soundness). Note that there is no guarantee they will report '''all''' bugs for buggy programs, they will report at least one.\n\n* [[Astr\u00e9e (static analysis)|Astr\u00e9e]]{{snd}} finds all potential [[runtime errors]] by [[abstract interpretation]], can prove the absence of runtime errors and can prove functional assertions; tailored towards safety-critical C code (e.g. avionics).\n* [[CodePeer]]{{snd}} Statically determines and documents [[precondition|pre]]- and [[postcondition|post-condition]]s for [[Ada (programming language)|Ada]] subprograms; statically checks [[precondition]]s at all call sites.\n* [[ECLAIR]]{{snd}} Uses [[formal methods]]-based static code analysis techniques such as [[abstract interpretation]] and [[model checking]] combined with [[constraint satisfaction]] techniques to detect or prove the absence of certain [[run time (program lifecycle phase)|run time errors]] in [[source code]].\n* [[ESC/Java]] and [[ESC/Java2]]{{snd}} Based on [[Java Modeling Language]], an enriched version of Java\n* [[Frama-C]]{{snd}} An open-source static analysis framework for C.\n* [[KeY]]{{snd}} analysis platform for Java based on [[proof assistant|theorem proving]] with specifications in the [[Java Modeling Language]]; can generate [[unit test|test cases]] as counterexamples; stand-alone GUI or [[Eclipse (software)|Eclipse]] integration\n* [[MALPAS Software Static Analysis Toolset|MALPAS]]{{snd}} A formal methods tool that uses [[Graph (discrete mathematics)|directed graphs]] and [[regular algebra]] to prove that software under analysis correctly meets its mathematical specification.\n* [[Polyspace]]{{snd}} Uses [[abstract interpretation]], a formal methods based technique,<ref>{{cite book |chapter=The Role of Abstract Interpretation in Formal Methods |first=Patrick |last=Cousot |title=Fifth IEEE International Conference on Software Engineering and Formal Methods (SEFM 2007) |pages=135\u2013140 |year=2007 |publisher=IEEE International Conference on Software Engineering and Formal Methods |doi=10.1109/SEFM.2007.42 |isbn=978-0-7695-2884-7 }}</ref> to detect and prove the absence of certain [[run time (program lifecycle phase)|run time errors]] in [[source code]] for C/C++, and Ada\n* [[SPARK Toolset]] including the [[SPARK Examiner]]{{snd}} Based on the [[SPARK (programming language)|SPARK]] language, a subset of [[Ada (programming language)|Ada]].\n\n== See also ==\n\n* [[Automated code review]]\n* [[Best Coding Practices]]\n* [[Dynamic code analysis]]\n* [[Software metrics]]\n* [[Integrated development environment]] (IDE) and [[comparison of integrated development environments]]. IDEs will usually come with built-in support for static code analysis, or with an option to integrate such support. [[Eclipse (software)|Eclipse]] offers such integration mechanism for most different types of extensions (plug-ins).\n\n== References ==\n{{reflist}}\n\n== External links ==\n* [http://projects.webappsec.org/w/page/61622133/StaticCodeAnalysisList The Web Application Security Consortium's Static Code Analysis Tool List]\n*{{Curlie|Computers/Programming/Languages/Java/Development_Tools/Performance_and_Testing/Static_Checkers|Java Static Checkers}}\n* [http://samate.nist.gov/index.php/Source_Code_Security_Analyzers.html SAMATE-Source Code Security Analyzers]\n* [http://samate.nist.gov/SATE.html SATE{{snd}} Static Analysis Tool Exposition]\n* [http://www.cs.umd.edu/~jfoster/papers/issre04.pdf \"A Comparison of Bug Finding Tools for Java\"], by Nick Rutar, Christian Almazan, and Jeff Foster, [[University of Maryland, College Park|University of Maryland]].  Compares Bandera, [[ESC/Java]] 2, [[FindBugs]], JLint, and PMD.\n* [http://www.oreillynet.com/digitalmedia/blog/2004/03/minireview_of_java_bug_finders.html \"Mini-review of Java Bug Finders\"], by Rick Jelliffe, [[O'Reilly Media]].\n\n[[Category:Static program analysis tools| ]]\n", "text_old": "{{TOC right}}\n<!--\nEDITORS, PLEASE NOTE:\n\nThis article is covered under Wikipedia's [[Wikipedia:Manual of Style/Stand-alone lists|guidelines for standalone lists]]. This means that the only tools that should be listed here are ones that have their own articles on Wikipedia. This is not the place to have external links to a tool's homepage or anything like that. Tools that fail to meet this criteria (of having an article) may be deleted per our guidelines. If the tool has no article, consider [[WP:WTAF|writing one first]]. \n-->\nThis is a list of tools for [[static code analysis]].\n\n== Language ==\n\n=== Multi-language ===\n* [[Apache Yetus]]{{snd}} A collection of build and release tools. Included is the 'precommit' module that is used to execute full and partial/patch CI builds that provides static analysis of code via other open source tools as part of a configurable report. Built-in support for C, C++, Java, Perl, Python, Ruby, Shell, and XML. May be extended via a plug-in framework.\n* [[Axivion Bauhaus Suite]]{{snd}} A static code analysis tool suite for Ada, C, C++, C#, and Java code that performs various analyses such as architecture checking, interface analyses, [[Motor Industry Software Reliability Association|MISRA]] checking, and clone detection.\n*[[Cigital]] SecureAsist{{snd}} A lightweight IDE plugin that points out common security vulnerabilities in real time as the developer is coding. Supports Java, .NET, and PHP.\n* [[Code Dx]]{{snd}} Software application vulnerability correlation and management system that consolidates and normalizes software vulnerabilities detected by multiple [[Static program analysis|static]] application security testing (SAST) and [[Web application security scanner|dynamic]] application security testing (DAST) tools, as well as the results of manual code reviews. Supports C, C++, C#, Java, JavaScript, JSP, PHP, Python, Rails, Ruby, Scala, VB.NET and XML/XSL.<ref>{{cite web|url=https://codedx.com/supported-tools/|work=codedx.com|accessdate=Apr 25, 2017|title=Supported Application Security Testing Tools and Languages}}</ref>\n* [[CodeScene]]{{snd}} Behavioral code analysis based on revision control data. Can analyse any codebase, and supports X-Ray (or method-level analysis) for C, C++, C#, Java, Groovy, JavaScript, TypeScript, Objective-C, Scala, Python, Swift, Go, Visual Basic .Net, PHP, and Ruby.\n* [[Compuware]] Topaz for Program Analysis{{snd}} A static code analysis for PL/I and COBOL.  Produces visual displays of structure charts and logic/data flow and shows dependencies across programs.\n* [[ConQAT]]{{snd}} Continuous quality assessment toolkit that allows flexible configuration of quality analyses (architecture conformance, clone detection, quality metrics, etc.) and dashboards. Supports Java, C#, C++, JavaScript, ABAP, Ada and many other languages.\n* [[Coverity]]{{snd}} A static analysis tool for C, C++, C#, Objective-C, Java, Javascript, node.JS, Ruby, PHP, & Python.\n* [[Micro Focus]] [[Fortify Software]] Static Code Analyzer{{snd}} Helps developers identify software security vulnerabilities in more than 30 languages, including C, C++, Java, JSP, .NET, ASP.NET, classic [[Active Server Pages]] (ASP), ColdFusion, PHP, Visual Basic 6, VBScript, JavaScript, PL/SQL, T-SQL, Python, Objective-C, ABAP and COBOL and configuration files.\n* [[Micro Focus]] Enterprise Analyzer and COBOL Analyzer. Static code analysis and visualization tools for legacy and mainframe applications. Analyze code in different languages including COBOL, PL/I, Natural, RPG, Java, Assembler, Easytrieve, VB, C/C++, PL/SQL, C#, VB.NET, KornShell, Job schedulers and more.\n* [[GrammaTech]] [[CodeSonar]]{{snd}} Defect detection (buffer overruns, memory leaks, etc.), concurrency and security checks, architecture visualization and software metrics for C, C++, Objective-C, and Java source code.\n* [[Security AppScan|IBM Security AppScan]] (formerly known as IBM Rational AppScan) Source Edition{{snd}} Analyzes source code to identify security vulnerabilities while integrating security testing with software development processes and systems. Supports C, C++, .NET, Java, JSP, JavaScript, ColdFusion, Classic ASP, PHP, Perl, Visual Basic 6, PL/SQL, Python, T-SQL, and COBOL\n* [[Infer Static Analyzer|Facebook Infer]]{{snd}} A tool for Java, C, C++, and Objective-C. Targets null pointer problems, leaks, concurrency issues and API usage for Facebook's mobile apps. Available as open source on github.\n* [[Imagix 4D]]{{snd}} C, C++ and Java. Windows and Linux versions.\n* [[Kiuwan]]{{snd}} Software Analytics end-to-end platform for static code analysis and automated code review. It covers defect detection, application security & IT Risk Management, with enhanced life cycle and application governance features. Support for over 20 languages, including [[Objective-C]], [[Java (programming language)|Java]], [[JavaServer Pages|JSP]], [[JavaScript]], [[PHP]], [[C (programming language)|C]], [[C++]], [[ABAP]], [[COBOL]], [[Java Class Library|JCL]], [[C Sharp (programming language)|C#]], [[PL/SQL]], [[Transact-SQL]], [[SQL (programming language)|SQL]], [[Visual Basic]], [[Visual Basic .NET]], [[Android (operating system)]].\n* [[Klocwork]]{{snd}} Provides security vulnerability, standards compliance (MISRA, [[ISO 26262]] and others), defect detection and build-over-build trend analysis for C, C++, C#, Java.\n* [[Lint (software)|Lint]], as supplied with the [[Android (operating system)|Android]] [[Software development kit|SDK]].\n* [[LDRA Testbed]]{{snd}} A software analysis and testing tool suite for C, C++, Ada83, Ada95 and Assembler (Intel, Freescale, Texas Instruments).\n* [[MALPAS Software Static Analysis Toolset|MALPAS]]{{snd}} A software static analysis toolset for a variety of languages including Ada, C, Pascal and Assembler (Intel, PowerPC and Motorola). Used primarily for safety critical applications in Nuclear and Aerospace industries.\n* [[Moose (analysis)|Moose]]{{snd}} Moose started as a software analysis platform with many tools to manipulate, assess or visualize software. It can evolve to a more generic data analysis platform. Supported languages are C, C++, Java, Smalltalk, .NET, more may be added.\n* [[Parasoft]]{{snd}} Provides static analysis (pattern-based, flow-based, in-line, metrics) for C, C++, Java, .NET (C#, VB.NET, etc.), JSP, JavaScript, XML, and other languages for standards like MISRA, CWE, OWASP, and CERT. Through a [[Parasoft DTP|Development Testing Platform]], static code analysis functionality is integrated with [[unit testing]], [[code reviews|peer code review]], [[runtime error detection]] and [[Requirements traceability|traceability]].\n* [[PMD (software)#Copy/Paste Detector (CPD)|Copy/Paste Detector (CPD)]]{{snd}} [[PMD (software)|PMDs]] [[duplicate code]] detection for (e.g.) [[Java (programming language)|Java]], [[JavaServer Pages|JSP]], [[C (programming language)|C]], [[C++]], [[ColdFusion]], [[PHP]] and [[JavaScript]]<ref>{{cite web|url=http://sourceforge.net/projects/pmd/files/pmd/5.0.0/|accessdate=Dec 9, 2012|title=PMD - Browse /pmd/5.0.0 at SourceForge.net}}</ref> code.\n* [[Polyspace]]{{snd}} Uses [[abstract interpretation]] to detect and prove the absence of certain [[run time (program lifecycle phase)|run time errors]] in [[source code]] for C, C++, and Ada\n* [[Pretty Diff]]{{snd}} A language-specific [[Comparison of file comparison tools|code comparison]] tool that features language-specific analysis reporting in addition to language-specific [[Minification (programming)|minification]] and [[Prettyprint|beautification]] algorithms.\n* [[Protecode]]{{snd}} Analyzes the composition of software source code and binary files, searches for open source and third party code and their associated licensing obligations. Can also detect security vulnerabilities.\n* [[PVS-Studio]]{{snd}} A software analysis tool for C, C++, C++/CLI, C++/CX (Component Extensions), C#, Java.\n*[[RIPS]] - A static code analysis solution for PHP, Java and Node.js with many integration options for the automated detection of complex security vulnerabilities.\n* [[Rogue Wave Software]] OpenLogic{{snd}} Scans source code and binaries to identify open source code and licenses, manages open source policies and approvals, reports security vulnerabilities, and provides open source technical support.\n* [[Semmle]]{{snd}} Supports C, C++, C#, Java, JavaScript, Objective-C, and Python.\n* [[SideCI|SideCI&nbsp;]]\u2013 Static code analysis based automated code review tool for Ruby, Python, PHP, JavaScript, CoffeeScript and Go. Checks style, quality, dependencies, security and bugs.\n* [[SofCheck Inspector]]{{snd}} Static detection of logic errors, [[race condition]]s, and [[redundant code]] for [[Ada (programming language)|Ada]] and [[Java (programming language)|Java]]; automatically extracts [[precondition|pre]]-[[postcondition]]s from code.\n* [[SonarQube]]{{snd}} A continuous inspection engine that finds vulnerabilities, bugs and code smells.  Also tracks code complexity, unit test coverage and duplication. Supported languages: ABAP, Android (Java), C, C++, CSS, Objective-C, COBOL, C#, Flex, Forms, Groovy, Java, JavaScript, Natural, PHP, PL/SQL, Swift, Visual Basic 6, Web, XML, Python, Ruby, Go, Scala, Kotlin, Apex.\n* [[Sotoarc]]-Sotograph{{snd}} Architecture and quality in-depth analysis and monitoring for C, C++, C#, Java, ABAP.\n* [[SourceMeter]]&nbsp;- A proprietary platform-independent, command-line static source code analyzer for Java, C, C++, RPG IV (AS/400) and Python.\n* [[SQuORE]] is a multi-purpose and multi-language monitoring tool<ref name=\"squore\">Baldassari, Boris (2012). [http://www.squoring.com/images/documents/monitoring_sw_projects_with_squore.pdf \"SQuORE: a new approach to software project assessment\"]{{Dead link|date=March 2020 |bot=InternetArchiveBot |fix-attempted=yes }}, International Conference on Software and Systems Engineering and their Applications, Nov. 2012, Paris, France.</ref> for software projects.\n* [[Understand (software)|Understand]]{{snd}} A multi-platform tool for code analysis and comprehension of large code bases. Supported languages include Ada, Cobol, Ansi C, K&R C, Ansi C++, C#, FORTRAN, Java, Jovial, Pascal, PL/M, Python, VHDL, Objective C, Objective C++, HTML, PHP, JavaScript, and XML.\n* [[Veracode]]{{snd}} Finds security flaws in application binaries and bytecode without requiring source. Supported languages include C, C++, .NET (C#, [[C++/CLI]], VB.NET, ASP.NET), Java, JSP, [[ColdFusion]], [[PHP]], [[Ruby on Rails]], [[JavaScript]] and [[TypeScript]] (including [[AngularJS]], [[Node.js]] and [[Jquery]]), [[Python (programming language)|Python]], [[Perl]], [[Scala (programming language)|Scala]], [[Objective-C]], [[Swift (programming language)|Swift]], [[Active Server Pages]], [[Visual Basic 6]], [[COBOL]], and [[IBM RPG]], including mobile applications on the [[Android (operating system)|Android]] and [[iOS (Apple)|iOS]] platforms and written in [[JavaScript]] cross platform frameworks.<ref name=\"veracode\">{{cite web |url=http://www.veracode.com/products/binary-static-analysis-sast |title=White Box Testing/Binary Static Analysis (SAST) |work=Veracode.com |accessdate=2018-02-06}}</ref>\n* [[Yasca]]{{snd}} Yet Another Source Code Analyzer, a plugin-based framework to scan arbitrary file types, with plugins for C, C++, Java, JavaScript, ASP, PHP, HTML-CSS, ColdFusion, [[COBOL]], and other file types. It integrates with other scanners, including [[FindBugs]], [[PMD (software)|PMD]], and Pixy.\n\n=== [[.NET Framework|.NET]] ===\n* [[.NET Compiler Platform]] (Codename ''Roslyn''){{snd}} Open-source compiler framework for [[C Sharp (programming language)|C#]] and [[Visual Basic .NET]] developed by [[Microsoft]] .NET. Provides an API for analyzing and manipulating syntax.\n* [[CodeIt.Right]]{{snd}} Combines static code analysis and automatic refactoring to best practices which allows automatic correction of code errors and violations; supports C# and VB.NET.\n* [[CodeRush]]{{snd}} A plugin for [[Visual Studio]] which alerts users to violations of best practices.\n* [[FxCop]]{{snd}} Free static analysis for Microsoft .NET programs that compiles to [[Common Intermediate Language|CIL]]. Standalone and integrated in some [[Microsoft Visual Studio]] editions; by Microsoft.\n* [[NDepend]]{{snd}} Simplifies managing a complex .NET code base by analyzing and visualizing code dependencies, by defining design rules, by doing impact analysis, and by comparing different versions of the code. Integrates into [[Visual Studio]].\n* [[Parasoft]] dotTEST{{snd}} A static analysis, unit testing, and code review plugin for [[Visual Studio]]; works with languages for Microsoft .NET Framework and .NET Compact Framework, including C#, VB.NET, ASP.NET and Managed C++.\n* [[StyleCop]]{{snd}} Analyzes C# source code to enforce a set of style and consistency rules. It can be run from inside of [[Microsoft Visual Studio]] or integrated into an [[MSBuild]] project.\n\n=== [[Ada (programming language)|Ada]] ===\n* [[SPARK Toolset]]{{snd}} Verification tools for SPARK 2014{{snd}} a subset of Ada 2012 that leverages Ada's support for contracts. Designed to offer soundness, depth, modularity and efficiency of verification.\n* [[AdaControl]]{{snd}} A tool to control occurrences of various entities or programming patterns in Ada code, used for checking coding standards, enforcement of safety related rules, and support for various manual inspections. Features automatic fixing of violations.\n* [[CodePeer]]{{snd}} An advanced static analysis tool that detects potential run-time logic errors in Ada programs. \n* [[Fluctuat]]{{snd}} [[abstract interpretation|Abstract interpreter]] for the validation of numerical properties of programs.\n* [[LDRA Testbed]]{{snd}} A software analysis and testing tool suite for Ada83/95.\n* [[Polyspace]]{{snd}} Uses [[abstract interpretation]] to detect and prove the absence of certain [[run time (program lifecycle phase)|run time errors]] in [[source code]].\n* [[SofCheck Inspector]]{{snd}} (Bought by [[AdaCore]]) Static detection of logic errors, [[race condition]]s, and redundant code for Ada; automatically extracts [[precondition|pre]]-[[postcondition]]s from code.\n\n=== [[C (programming language)|C]], [[C++]] ===\n{| class=\"wikitable sortable\"\n! Tool\n! width=\"75\" | Latest release\n! [[Free software]]\n![[Cyclomatic complexity|Cyclomatic Complexity Number]]\n! [[Duplicate code|Duplicate<br />code]]\n! Notes\n\n|-\n![[Astr\u00e9e (static analysis)|Astr\u00e9e]]\n| \n| {{no}}; Proprietary\n|\n| \n| finds all potential [[runtime errors]] and data races by [[abstract interpretation]], can prove their absence, and can prove functional assertions; tailored towards safety-critical C code (e.g. avionics and automotive). Includes MISRA checker.\n\n|-\n![[Axivion Bauhaus Suite]]\n| \n| {{no}}; Proprietary\n|\n| \n| A static code analysis tool suite for Ada, C, C++, C#, and Java code that performs various analyses such as architecture checking, interface analyses, MISRA checking, and clone detection.\n\n|-\n![[BLAST model checker|BLAST]]{{snd}} Berkeley Lazy Abstraction Software verification Tool (retired)\n| 2.7.2\n| {{yes}}\n|\n| \n|An open-source software model checker for C programs based on lazy abstraction (follow-on project is CPAchecker.<ref>{{cite web |url=http://cpachecker.sosy-lab.org/|title=CPAchecker|date=2015-02-08}}</ref>).\n\n|-\n![[Clang]]\n| 8.0.0\n| {{yes}}\n|\n| \n|An open-source compiler that includes a static analyzer.\n\n|-\n![[CLion]]\n| 2019.1\n| {{no}}; Proprietary\n|\n| \n|An IDE with a built-in source code analysis.\n\n|-\n![[Coccinelle (software)|Coccinelle]]\n| 1.0.7\n| {{yes}}\n|\n| \n|An open-source source code pattern matching and transformation.\n\n|-\n! [[Coverity]]\n|2019.12<ref>{{Cite web|url=https://community.synopsys.com/s/question/0D52H00004v4kNZSAY/announcement-coverity-201912-is-now-available|title=SIG Customer Community|website=community.synopsys.com|access-date=2020-02-06}}</ref>\n| {{no}}; Proprietary\n|\n| \n|A static analysis tool for C/C++.\n\n|-\n! [[CPAchecker]]\n| \n| {{yes}}; Apache 2 License\n|\n| \n|A tool for execution path checking of C.\n\n|-\n![[Cppcheck]]\n|1.90\n| {{yes}};&nbsp;[[GNU General Public License|GPL]]\n| {{no}}\n| {{no}}\n|Open-source tool that checks for several types of errors, including use of [[Standard Template Library|STL]].\n\n|-\n! [[Cppdepend]]\n| 2019.1\n| {{no}};Proprietary\n|\n| \n|Simplifies managing a complex C/C++ code base by analyzing and visualizing code dependencies, by defining design rules, by doing impact analysis, and comparing different versions of the code.\n\n|-\n![[cpplint]]\n| \n| {{yes}}\n|\n| \n|An open-source tool that checks for compliance with Google's style guide for C++ coding.\n\n|-\n![[ECLAIR]]\n| \n| \n|\n| \n|A platform for the automatic analysis, verification, testing and transformation of C and C++ programs.\n\n|-\n![[Eclipse (software)|Eclipse]]\n| \n| {{yes}}\n|\n| \n|An open-source IDE that includes a static code analyzer.\n\n|-\n![[Fluctuat]]\n| \n| \n|\n| \n|[[abstract interpretation|Abstract interpreter]] for the validation of numerical properties of programs.\n\n|-\n![[Frama-C]]\n| \n| {{yes}}\n|\n| \n|An open-source static analysis framework for C.\n\n|-\n![[Red Lizard Software#Products|Goanna]]\n| \n| \n|\n| \n|A software analysis tool for C/C++.\n\n|-\n![[Helix QAC]]\n| \n| \n|\n| \n|Formerly PRQA QA\u00b7C and QA\u00b7C++, deep static analysis of C/C++ for quality assurance and guideline/coding standard enforcement with MISRA support.\n|-\n!  [[Infer Static Analyzer|Infer]]\n| \n| {{yes}}\n|\n| \n|Developed by an engineering team at Facebook with open-source contributors. Targets null pointer and other memory problems. Available as open-source on github.\n\n|-\n![[lint (software)|Lint]]\n| \n| \n|\n| \n|The original, from 1978, static code analyzer for C.\n|-\n! [[LDRA Testbed]]\n| v9.8.1<br />(2019-07-30)\n| \n|\n| \n|A software analysis and testing tool suite for C/C++, that performs static analysis, standards enforcement (eg MISRA C/C++) , dynamic analysis, unit testing and requirements traceability.\n|-\n! [[Parasoft C/C++test]]\n| 10.4.2\n| {{no}}; Proprietary\n|| \n|\n|A C/C++ tool that does static analysis, unit testing, code review, and runtime error detection; plugins available for [[Visual Studio]] and [[Eclipse (software)|Eclipse]]-based IDEs.\n\n|-\n![[PC-Lint]]\n| \n| {{no}}\n|\n| \n|A software analysis tool for C with partial support for C++2011.\n\n|-\n! [[Polyspace]]\n| \n| {{no}}\n|\n| \n|Uses [[abstract interpretation]] to detect and prove the absence of [[run time (program lifecycle phase)|run time errors]], Dead Code in [[source code]] as well as used to check all MISRA (2004, 2012) rules (directives, non directives).\n\n|-\n! [[SLAM project]]\n| \n| \n|\n| \n|a project of [[Microsoft Research]] for checking that software satisfies critical behavioral properties of the interfaces it uses.\n\n|-\n![[Sparse]]\n| \n| {{yes}}\n|\n| \n| An open-source tool designed to find faults in the [[Linux]] kernel.\n\n|-\n! [[SonarQube]]\n|8.1\n| {{no}}\n| {{yes}}\n| {{yes}}\n| An open-source tool which offers C/C++ support via a commercial license\n\n|-\n![[Splint (programming tool)|Splint]]\n|3.1.2\n| {{yes}}\n|\n| \n| An open-source tool statically checking C programs for security vulnerabilities and coding mistakes.\n|-\n![[Visual Studio]]\n| \n| {{yes}}\n|\n| \n| An IDE that provides static code analysis for C/C++ both in the editor environment and from the compiler command line.\n|}\n\n=== [[Java (programming language)|Java]] ===\n{| class=\"wikitable sortable\"\n! Tool\n! width=\"60\" | Latest release\n! [[Free software]]\n! [[Duplicate code|Duplicate<br />code]]\n! Notes\n\n|-\n! [[Checkstyle]]\n| 2020-01-26\n| {{yes}};&nbsp;[[GNU Lesser General Public License|LGPL]]\n| {{No}}\n| Besides some static code analysis, it can be used to show violations of a configured coding standard. Duplicate code detection was removed<ref>https://github.com/checkstyle/checkstyle/issues/523</ref> from Checkstyle.\n\n|-\n! [[Coverity]]\n| 2017-01-19\n| {{no}}; Proprietary\n| \n| Coverity is a static analysis and Static Application Security Testing (SAST) platform that finds critical defects and security weaknesses in code as it\u2019s written before they become vulnerabilities, crashes, or maintenance headaches.\n\n|-\n! [[Eclipse (software)|Eclipse]]\n| 2017-06-28\n| {{yes}}; [[Eclipse Public License|EPL]]\n| {{no}}\n| Cross-platform IDE with own set of several hundred code inspections available for analyzing code on-the-fly in the editor and bulk analysis of the whole project. Plugins for Checkstyle, FindBugs, and PMD.\n|-\n! [[FindBugs]]\n| 2015-03-06\n| {{yes}}; [[GNU Lesser General Public License|LGPL]]\n| \n| Based on [[Jakarta Project|Jakarta]] [[Byte Code Engineering Library|BCEL]] from the University of Maryland. [[SpotBugs]] is the spiritual successor of FindBugs, carrying on from the point where it left off with support of its community.\n\n|-\n! [[Infer Static Analyzer|Infer]] \n| 2017-10-19\n| {{yes}};&nbsp;[https://code.facebook.com/pages/850928938376556 BSD&nbsp;with&nbsp;additio-<br />nal&nbsp;patent clause]\n| \n| Developed by an engineering team at Facebook with open-source contributors. Targets null pointer exceptions, leaks, and thread safety issues.\n\n|-\n! [[IntelliJ IDEA]]\n| 2017-11-30\n| {{yes}}; [[Apache License#Version 2.0|ASL 2]]\n| {{yes}}\n| A leading Java IDE with built-in code inspection and analysis. Plugins for Checkstyle, FindBugs, and PMD.\n\n|-\n! [[JArchitect]]\n| 2017-06-11\n| {{no}}; Proprietary\n| \n| Simplifies managing a complex code base by analyzing and visualizing code dependencies, defining design rules, doing impact analysis, and by comparing different versions of the code.\n\n|-\n! [[Jtest]]\n| 2019-05-21\n| {{no}}; Proprietary\n| {{yes}}\n| Testing and static code analysis product by [[Parasoft]].\n\n|-\n! [[LDRA Testbed|LDRA&nbsp;Testbed]]\n| \n| {{no}}; Proprietary\n| \n| Analysis and testing tool suite.\n\n|-\n! [[PMD (software)|PMD]]\n| 2019-06-30\n| {{yes}};&nbsp;[[BSD licenses|BSD]],&nbsp;[[Apache License#Version 2.0|ASL&nbsp;2]],&nbsp;[[GNU Lesser General Public License|LGPL]]\n| {{yes}}\n| A static ruleset based source code analyzer that identifies potential problems.\n\n|-\n! [[RIPS]]\n| 2019-01-07\n| {{no}}; Proprietary\n|\n| Language-specific source code analysis solution with many integration options for accurate detection of complex security and quality issues.\n\n|-\n! [[SemmleCode]]\n| \n| {{no}}; Proprietary\n| \n| Object oriented code queries for static program analysis.\n\n|-\n! [[Soot (software)|Soot]]\n| \n| {{yes}}; [[GNU Lesser General Public License|LGPL]]\n| \n| A language manipulation and optimization framework consisting of intermediate languages.\n\n|-\n! [[SpotBugs]]\n| 2020-02-16\n| {{yes}}; [[GNU Lesser General Public License|LGPL]]\n| \n| Based on [[FindBugs]] and [[Byte Code Engineering Library|BCEL]] from the University of Maryland.\n\n|-\n! [[Squale]]\n| 2011-05-26\n| {{yes}}; [[GNU Lesser General Public License|LGPL]]\n| \n| A platform to manage software quality.\n\n|-\n! [[SourceMeter]]\n| 2016-02-01 \n| {{no}}; Proprietary\n| {{yes}}\n| A platform-independent, command-line static source code analyzer.\n\n|-\n! [[ThreadSafe]]\n| 2014-03-28\n| {{no}}; Proprietary\n| \n| A static analysis tool focused on finding concurrency bugs.\n|}\n\n=== [[JavaScript]] ===\n* [[ESLint]]{{snd}} JavaScript [[syntax checker]] and formatter.\n* [[Google Closure Tools#Closure Compiler|Google's Closure Compiler]]{{snd}} JavaScript optimizer that rewrites code to be faster and smaller, and checks use of native JavaScript functions.\n* [[JSHint]]{{snd}} A community driven fork of JSLint.\n* [[JSLint]]{{snd}} JavaScript syntax checker and validator.\n\n=== [[Objective-C]], Objective-C++ ===\n* [[Clang]]{{snd}} The free Clang project includes a static analyzer. As of version 3.2, this analyzer is included in [[Xcode]].<ref>{{cite web | url=https://developer.apple.com/mac/library/featuredarticles/StaticAnalysis/index.html | title=Static Analysis in Xcode | publisher=Apple | accessdate=2009-09-03}}</ref>\n* [[Infer Static Analyzer|Infer]]{{snd}} Developed by an engineering team at Facebook with open-source contributors. Targets null pointers, leaks, API usage and other lint checks. Available as open source on github.\n* [[GrammaTech]] CodeSonar{{snd}} A [[static program analysis]] tool for C,C++, Objective-C..., see above.\n\n=== Opa ===\n* [[Opa (programming language)|Opa]] includes its own static analyzer. As the language is intended for web application development, the strongly statically typed compiler checks the validity of high-level types for web data, and prevents by default many vulnerabilities such as [[Cross-site scripting|XSS]] attacks and database code injections.\n\n=== [[Package management system|Packaging]] ===\n* [[Lintian]]{{snd}} Checks Debian software packages for common inconsistencies and errors.\n* [[RPM Package Manager|Rpmlint]]{{snd}} Checks for common problems in rpm packages.\n\n=== [[Perl]] ===\n* [[Perl::Critic]]{{snd}} A tool to help enforce common Perl best practices. Most best practices are based on [[Damian Conway]]'s [[Perl Best Practices]] book.\n* [[PerlTidy]]{{snd}} Program that acts as a [[syntax checker]] and tester/enforcer for coding practices in Perl.\n* [[Padre (software)|Padre]]{{snd}} An IDE for Perl that also provides static code analysis to check for common beginner errors.\n\n=== [[PL/SQL]] ===\n*[[TOAD]]{{snd}} A PL/SQL development environment with a Code xPert component that reports on general code efficiency as well as specific programming issues.\n* [[Visual Expert]]{{snd}} A PL/SQL [[Static program analysis|code analysis]] tool<ref>{{Cite web|url=http://www.visual-expert.com/EN/stored-procedure-pl-sql-oracle-plsql/code-function-analysis-impact-source_wpcodeanalysis.html|title=Visual Expert for Oracle - PL/SQL Code Analyzer|last=|first=|date=2017-08-24|website=www.visual-expert.com|archive-url=|archive-date=|access-date=}}</ref> that reports on programming issues and helps understand and maintain complex code ([[Change impact analysis|Impact Analysis]], [[Software documentation|Source Code documentation]], [[Call graph|Call trees]], [[Create, read, update and delete|CRUD matrix]], etc.).\n\n=== [[Python (programming language)|Python]] ===\n* [[PyCharm]]{{snd}} Cross-platform Python IDE with code inspections available for analyzing code on-the-fly in the editor and bulk analysis of the whole project.\n* [[PyDev]]{{snd}} Eclipse-based Python IDE with code analysis available on-the-fly in the editor or at save time.\n* [[Pylint]]{{snd}} Static code analyzer. Quite stringent; includes many stylistic warnings as well.\n\n=== [[Transact-SQL]] ===\n* [[Visual Expert]]{{snd}} A SQLServer [[Static program analysis|code analysis]] tool<ref>{{Cite web|url=http://www.visual-expert.com/EN/stored-procedure-t-sql-server-mssql-tsql/sqlserver-code-function-impact-analysis-source_wpcodeanalysis.html|title=Visual Expert for SQL Server - Transact SQL Code Analyzer|last=|first=|date=2017-08-24|website=www.visual-expert.com|archive-url=|archive-date=|access-date=}}</ref> that reports on programming issues and helps understand and maintain complex code ([[Change impact analysis|Impact Analysis]], [[Software documentation|Source Code documentation]], [[Call graph|Call trees]], [[Create, read, update and delete|CRUD matrix]], etc.).\n\n== Formal methods tools ==\nTools that use [[Soundness|sound]], i.e. over-approximating a rigorous model, [[formal methods]] approach to static analysis (e.g., using static [[assertion (computing)|program assertions]]). Sound methods contain no false negatives for bug-free programs, at least with regards to the idealized mathematical model they are based on (there is no \"unconditional\" soundness). Note that there is no guarantee they will report '''all''' bugs for buggy programs, they will report at least one.\n\n* [[Astr\u00e9e (static analysis)|Astr\u00e9e]]{{snd}} finds all potential [[runtime errors]] by [[abstract interpretation]], can prove the absence of runtime errors and can prove functional assertions; tailored towards safety-critical C code (e.g. avionics).\n* [[CodePeer]]{{snd}} Statically determines and documents [[precondition|pre]]- and [[postcondition|post-condition]]s for [[Ada (programming language)|Ada]] subprograms; statically checks [[precondition]]s at all call sites.\n* [[ECLAIR]]{{snd}} Uses [[formal methods]]-based static code analysis techniques such as [[abstract interpretation]] and [[model checking]] combined with [[constraint satisfaction]] techniques to detect or prove the absence of certain [[run time (program lifecycle phase)|run time errors]] in [[source code]].\n* [[ESC/Java]] and [[ESC/Java2]]{{snd}} Based on [[Java Modeling Language]], an enriched version of Java\n* [[Frama-C]]{{snd}} An open-source static analysis framework for C.\n* [[KeY]]{{snd}} analysis platform for Java based on [[proof assistant|theorem proving]] with specifications in the [[Java Modeling Language]]; can generate [[unit test|test cases]] as counterexamples; stand-alone GUI or [[Eclipse (software)|Eclipse]] integration\n* [[MALPAS Software Static Analysis Toolset|MALPAS]]{{snd}} A formal methods tool that uses [[Graph (discrete mathematics)|directed graphs]] and [[regular algebra]] to prove that software under analysis correctly meets its mathematical specification.\n* [[Polyspace]]{{snd}} Uses [[abstract interpretation]], a formal methods based technique,<ref>{{cite book |chapter=The Role of Abstract Interpretation in Formal Methods |first=Patrick |last=Cousot |title=Fifth IEEE International Conference on Software Engineering and Formal Methods (SEFM 2007) |pages=135\u2013140 |year=2007 |publisher=IEEE International Conference on Software Engineering and Formal Methods |doi=10.1109/SEFM.2007.42 |isbn=978-0-7695-2884-7 }}</ref> to detect and prove the absence of certain [[run time (program lifecycle phase)|run time errors]] in [[source code]] for C/C++, and Ada\n* [[SPARK Toolset]] including the [[SPARK Examiner]]{{snd}} Based on the [[SPARK (programming language)|SPARK]] language, a subset of [[Ada (programming language)|Ada]].\n\n== See also ==\n\n* [[Automated code review]]\n* [[Best Coding Practices]]\n* [[Dynamic code analysis]]\n* [[Software metrics]]\n* [[Integrated development environment]] (IDE) and [[comparison of integrated development environments]]. IDEs will usually come with built-in support for static code analysis, or with an option to integrate such support. [[Eclipse (software)|Eclipse]] offers such integration mechanism for most different types of extensions (plug-ins).\n\n== References ==\n{{reflist}}\n\n== External links ==\n* [http://projects.webappsec.org/w/page/61622133/StaticCodeAnalysisList The Web Application Security Consortium's Static Code Analysis Tool List]\n*{{Curlie|Computers/Programming/Languages/Java/Development_Tools/Performance_and_Testing/Static_Checkers|Java Static Checkers}}\n* [http://samate.nist.gov/index.php/Source_Code_Security_Analyzers.html SAMATE-Source Code Security Analyzers]\n* [http://samate.nist.gov/SATE.html SATE{{snd}} Static Analysis Tool Exposition]\n* [http://www.cs.umd.edu/~jfoster/papers/issre04.pdf \"A Comparison of Bug Finding Tools for Java\"], by Nick Rutar, Christian Almazan, and Jeff Foster, [[University of Maryland, College Park|University of Maryland]].  Compares Bandera, [[ESC/Java]] 2, [[FindBugs]], JLint, and PMD.\n* [http://www.oreillynet.com/digitalmedia/blog/2004/03/minireview_of_java_bug_finders.html \"Mini-review of Java Bug Finders\"], by Rick Jelliffe, [[O'Reilly Media]].\n\n[[Category:Static program analysis tools| ]]\n", "name_user": "Bharat IntegralZone", "label": "unsafe", "comment": "(I have added IZ Analyzer, an automated code review and code quality tool for the mulesoft ecosystem.)", "url_page": "//en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis"}
{"title_page": "Bertrand Layec", "text_new": "{{Infobox football official\n| name                = Bertrand Layec\n| full_name           = <!-- if different -->\n| birth_date          = {{birth date and age|1965|7|3|df=y}}\n| birth_place         = [[Vannes]], [[France]]\n| otheroccupation     = \n| years1              = 1998\u20132010\n| league1             = [[Ligue 1]]\n| role1               = Referee\n| internationalyears1 = 2002\u20132010\n| confederation1      = [[UEFA]]\n| internationalrole1  = Referee\n}}\n\n'''Bertrand Layec''' (born 3 July 1965) is a former [[France|French]] [[association football|football]] [[referee (association football)|referee]]. He was registered as a F\u00e9d\u00e9ral 1 referee in [[France]] meaning he is eligible to officiate [[Ligue 1]] and [[Ligue 2]] matches, as well as matches in the [[Coupe de France]] and [[Coupe de la Ligue]]. Layec refereed his first match in Ligue 1 in 1998 and, in 2002, became a [[FIFA]] official. He refereed his last match on the final day of the [[2009\u201310 Ligue 1|2009\u201310 season]] and now serves as the president of the Direction Nationale de L'Arbitrage ({{lang-en|National Leadership of Arbitration}}) (DNA).<ref>{{cite news | url = http://paulzzz45.over-blog.com/article-dernier-match-pour-bertrand-layec-50368317.html | title = Dernier match pour Bertrand Layec | date = 13 May 2010 | work = Arbitre de Foot | accessdate = 13 December 2010 | language = French | url-status = dead| archiveurl = https://web.archive.org/web/20110715024335/http://paulzzz45.over-blog.com/article-dernier-match-pour-bertrand-layec-50368317.html | archivedate = 15 July 2011 | df =  }}</ref> Layec is currently{{update_inline|date=October 2016}} under investigation by the French justice system for [[defamation]] of character after distributing an abusive [[e-mail]] directed at Bruno Derrien, a former referee who  authored a controversial book directed at his profession.<ref>{{cite news | url = http://www.sport.fr/football/bertrand-layec-en-correctionnelle-199622.shtm | title = Bertrand Layec en correctionnelle | date = 18 October 2010 | work = Sport.fr | accessdate = 13 December 2010 | language = French | archive-url = https://web.archive.org/web/20110719173100/http://www.sport.fr/football/bertrand-layec-en-correctionnelle-199622.shtm | archive-date = 19 July 2011 | url-status = dead }}</ref>\n\nAt international level, Layec officiated at the [[2007 FIFA U-17 World Cup]],<ref>FIFA. [https://www.fifa.com/tournaments/archive/u17worldcup/korea2007/results/match=58907/report.html \"Match Report - New Zealand - England 0:5 (0:4)\"]. 21 August 2007. Retrieved on 24 May 2013.</ref> as well as [[UEFA Euro 2008 qualification|Euro 2008 qualifiers]]<ref>UEFA. [http://www.uefa.com/uefaeuro/season=2008/matches/round=2241/match=83740/index.html \"Sweden 1-1 Northern Ireland\"]. 17 October 2007. Retrieved on 24 May 2013.</ref> and [[2010 FIFA World Cup qualification (UEFA)|2010 World Cup qualifiers]].<ref>FIFA. [https://www.fifa.com/worldcup/preliminaries/europe/matches/round=250471/match=300042928/report.html \"Match Report - Spain - Belgium 5:0 (1:0)\"]. 5 September 2009. Retrieved on 24 May 2013.</ref>\n\n==References==\n{{reflist}}\n\n==External links==\n* {{webarchive|url=https://web.archive.org/web/20101207060804/http://www.fff.fr/arbitrage/actualite/ |title=DNA}} {{in language|fr}}\n* {{WorldReferee.com}}\n* {{WorldFootball.net referee}}\n* {{Soccerway referee|bertrand-layec/44576|archive=20191029024032}}\n* {{Soccerbase referee|827}}\n\n{{DEFAULTSORT:Layec, Bertand}}\n[[Category:1965 births]]\n[[Category:Living people]]\n[[Category:French football referees]]\n[[Category:People from Vannes]]\n[[Category:Sportspeople from Morbihan]]\n\n\n{{France-footy-bio-stub}}\n", "text_old": "{{Infobox football official\n| name               = Bertrand Layec\n| fullname           = Bertrand Layec\n| birth_date         = {{birth date and age|1965|7|3|df=y}}\n| birth_place        = [[Vannes]], [[France]]\n| otheroccupation    = \n| years1             = 1998\u20132010\n| league1            = [[Ligue 1]]\n| role1              = Referee\n| internationalyears1= 2002\u20132010\n| confederation1     = [[UEFA]]\n| internationalrole1 = Referee\n}}\n\n'''Bertrand Layec''' (born 3 July 1965) is a former [[France|French]] [[association football|football]] [[referee (association football)|referee]]. He was registered as a F\u00e9d\u00e9ral 1 referee in [[France]] meaning he is eligible to officiate [[Ligue 1]] and [[Ligue 2]] matches, as well as matches in the [[Coupe de France]] and [[Coupe de la Ligue]]. Layec refereed his first match in Ligue 1 in 1998 and, in 2002, became a [[FIFA]] official. He refereed his last match on the final day of the [[2009\u201310 Ligue 1|2009\u201310 season]] and now serves as the president of the Direction Nationale de L'Arbitrage ({{lang-en|National Leadership of Arbitration}}) (DNA).<ref>{{cite news | url = http://paulzzz45.over-blog.com/article-dernier-match-pour-bertrand-layec-50368317.html | title = Dernier match pour Bertrand Layec | date = 13 May 2010 | work = Arbitre de Foot | accessdate = 13 December 2010 | language = French | url-status = dead| archiveurl = https://web.archive.org/web/20110715024335/http://paulzzz45.over-blog.com/article-dernier-match-pour-bertrand-layec-50368317.html | archivedate = 15 July 2011 | df =  }}</ref> Layec is currently{{update_inline|date=October 2016}} under investigation by the French justice system for [[defamation]] of character after distributing an abusive [[e-mail]] directed at Bruno Derrien, a former referee who  authored a controversial book directed at his profession.<ref>{{cite news | url = http://www.sport.fr/football/bertrand-layec-en-correctionnelle-199622.shtm | title = Bertrand Layec en correctionnelle | date = 18 October 2010 | work = Sport.fr | accessdate = 13 December 2010 | language = French | archive-url = https://web.archive.org/web/20110719173100/http://www.sport.fr/football/bertrand-layec-en-correctionnelle-199622.shtm | archive-date = 19 July 2011 | url-status = dead }}</ref>\n\nAt international level, Layec officiated at the [[2007 FIFA U-17 World Cup]],<ref>FIFA. [https://www.fifa.com/tournaments/archive/u17worldcup/korea2007/results/match=58907/report.html \"Match Report - New Zealand - England 0:5 (0:4)\"]. 21 August 2007. Retrieved on 24 May 2013.</ref> as well as [[UEFA Euro 2008 qualification|Euro 2008 qualifiers]]<ref>UEFA. [http://www.uefa.com/uefaeuro/season=2008/matches/round=2241/match=83740/index.html \"Sweden 1-1 Northern Ireland\"]. 17 October 2007. Retrieved on 24 May 2013.</ref> and [[2010 FIFA World Cup qualification (UEFA)|2010 World Cup qualifiers]].<ref>FIFA. [https://www.fifa.com/worldcup/preliminaries/europe/matches/round=250471/match=300042928/report.html \"Match Report - Spain - Belgium 5:0 (1:0)\"]. 5 September 2009. Retrieved on 24 May 2013.</ref>\n\n==References==\n{{reflist}}\n\n==External links==\n* [https://web.archive.org/web/20101207060804/http://www.fff.fr/arbitrage/actualite/ DNA]\n\n{{DEFAULTSORT:Layec, Bertand}}\n[[Category:1965 births]]\n[[Category:Living people]]\n[[Category:French football referees]]\n[[Category:People from Vannes]]\n[[Category:Sportspeople from Morbihan]]\n\n\n{{France-footy-bio-stub}}\n", "name_user": "Zyxw", "label": "safe", "comment": "add referee link", "url_page": "//en.wikipedia.org/wiki/Bertrand_Layec"}
