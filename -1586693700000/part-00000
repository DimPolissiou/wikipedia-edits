{"title_page": "Xiaonanhai Dam", "text_new": "{{Infobox dam\n| name                 =Xiaonanhai Dam\n| name_official        =\n| image                =\n| image_size           =\n| image_caption        =\n| image_alt            =\n| location_map         =China\n| location_map_size    =\n| location_map_caption =\n| coordinates          = {{coord|29|03|36.30|N|105|56|32.31|E|type:landmark|display=inline,title}}\n| country              =People's Republic of China\n| location             =\n| status               =Cancelled\n| construction_began   =March 2012 (preliminary)\n| opening              =2019 est.\n| demolished           =\n| cost                 = [[Renminbi|RMB\u00a5]]32 billion<ref name=shi20120426scmp/>\n| owner                =\n| dam_type             =\n| dam_length           =<!-- {{Convert|67|m|ft|0|abbr=on}}-->\n| dam_height           ={{Convert|67|m|ft|0|abbr=on}}\n| dam_width_crest      =\n| dam_width_base       =\n| dam_volume           =\n| dam_crosses          =[[Yangtze River]]\n| spillway_count       =\n| spillway_type        =\n| spillway_capacity    =\n| res_name             =Xiaonanhai Reservoir\n| res_capacity_total   ={{Convert|1300|e6m3|acre.ft|0|abbr=on}}\n| res_capacity_inactive={{Convert|655|e6m3|acre.ft|0|abbr=on}}<ref>{{cite web|title=Chongqing Yangtze River Hydropower Project survey XIAONANHAI|url=http://www.cj-site.com/cjkjNews/201212/6796.html|publisher=hangjiang Spatial Information Technology Engineering Co., Ltd.|accessdate=12 August 2013|language=Chinese|date=22 December 2012}}</ref>\n| res_catchment        =\n| res_surface          =\n| res_max_depth        =\n| res_tidal_range      =\n| plant_operator       =\n| plant_commission     = \n| plant_decommission   =\n| plant_type           =\n| plant_turbines       =<!--  [[megawatt|MW]] [[Francis turbine]]s -->\n| plant_capacity       = 1,760 MW<ref name=hornby20120426cpost/>\n| plant_annual_gen     =\n| website              =\n| extra                =\n}}\nThe '''Xiaonanhai Dam''' was a proposed [[dam]] on the [[Yangtze River]] in [[Chongqing]], China. It was to have an associated 1,760 MW [[hydroelectric]] power station.<ref name=shi20120426scmp/> Preliminary construction on the dam began on 29 March 2012 and earliest completion was expected in 2019.<ref>{{cite web|title=Work begins on 1.76GW Xiaonanhai Dam along Yangtze River|url=http://asian-power.com/project/news/work-begins-176gw-xiaonanhai-dam-along-yangtze-river|publisher=Asian Power|accessdate=11 August 2013|date=12 April 2012}}</ref><ref>{{cite web|title=Commencement of Xiaonanhai Dam reduces hope for Yangtze|url=http://eng.greensos.cn/ShowArticle.aspx?articleId=1328|publisher=China Green News|accessdate=11 August 2013|date=12 August 2012}}</ref><ref>{{cite web|title=Chongqing, The Largest Hydropower Project Xiaonanhai Hydropower Grand Foundation|url=http://webcache.googleusercontent.com/search?q=cache:wlMy8hq1OTMJ:www.wuhanins.com/InsWeb3/en/index.php/index-view-aid-125.html+&cd=39&hl=en&ct=clnk&gl=us|publisher=The Three Gorges|accessdate=7 January 2015|language=Chinese|date=5 April 2012}}</ref> However, it was cancelled in March 2015 due to environmental concerns.<ref name=cancel>{{cite web|last1=Wong|first1=Edward|title=Environmental Order in China to Prevent Building of Contested Dam|url=https://www.nytimes.com/2015/04/11/world/asia/environmental-order-in-china-to-prevent-building-of-contested-dam.html?_r=0|publisher=New York Times|accessdate=10 April 2015|date=10 April 2015}}</ref>\n\n== Project initiation ==\nThe project, under responsibility of the Chongqing municipal government, was initiated under the stewardship of [[Bo Xilai]] prior to his fall from grace in 2012. The dam was to be constructed by [[China Three Gorges Corporation]] 40&nbsp;km upstream of the city, and 700&nbsp;km upstream from the [[Three Gorges Dam]].<ref name=shi20120426scmp/>\n\nWeng Lida, a former director of the water resources bureau at the Yangtze River Commission, said that senior China Three Gorges executives had succumbed to pressure from the Chongqing authorities. According to the ''South China Morning Post'', Chongqing's success in overcoming all major obstacles to the dam's construction is attributed to the personal intervention of Bo.<ref name=shi20120426scmp/>\n\n== Controversy ==\nThe project was strongly opposed by environmentalists, who saw it as a \"politically motivated decision\". It was highly controversial due to the environmental impact, the high cost-benefit ratio, as well as the secretive decision-making process under Bo.<ref name=shi20120426scmp/> A total of 338 freshwater fish species have been identified on the Yangtze. 189 live in the area \u2014 currently a preservation \u2014 and many of those are found in no other river basin in China.<ref name=wines20120426nyt/>\n\nAn official study by the Yangtze River Commission in 2003 concluded that the Xiaonanhai dam could not be recommended due to its \"unremarkable economic returns\". According to ''[[Chongqing Daily]]'', project cost per-kilowatt is triple that compared with other projects along the Yangtze: with total investment estimated at \u00a532 billion, the project will cost \u00a516,000 per-kilowatt of capacity, whereas the Three Gorges dam, [[Xiluodu Dam]] and [[Xiangjiaba]] cost \u00a54,950, \u00a53,538 and \u00a55,749 respectively.<ref name=shi20120426scmp/> Under pressure from environmental critics the central government in 2009.<ref name=wines20120426nyt/>\n\nOn 14 December 2011 the State Council approved changes to shrink the boundaries of a Yangtze River preserve, clearing the way for the construction of the dam and the flooding of much of the preserve.<ref name=wines20120426nyt/> Environmentalists also feared that the dam will seriously affect biodiversity and render extinct several endangered fish species, including the [[Chinese sturgeon]] and [[Chinese paddlefish]].<ref name=shi20120426scmp/> Critics were most bitter about the perceived silencing of leading mainland scientists who were previously allied with environmentalists in opposing the Xiaonanhai dam and the downsizing of a neighboring national fishery reserve to make way for the project.<ref name=shi20120426scmp/>\n\nA 30 March 2015 order given by the [[Ministry of Environmental Protection of the People's Republic of China|Ministry of Environmental Protection]] to cancel the dam surfaced in early April 2015. The order may be due to the project's encroachment on protected areas.<ref name=cancel/>\n\n==See also==\n{{stack|{{Portal|China|Water|Renewable energy}}}}\n*[[List of dams and reservoirs in China]]\n*[[List of power stations in China]]\n\n==References==\n{{Reflist|colwidth=25em|\nrefs=\n*<ref name=shi20120426scmp>{{cite news|title=Bo may be gone but his pet project is going ahead|last=Shi|first=Jiangtao|newspaper=South China Morning Post|date=26 April 2012|language=Chinese|url=https://www.scmp.com/article/999249/bo-may-be-gone-his-pet-project-going-ahead|accessdate=14 March 2020}}</ref>\n*<ref name=wines20120426nyt>{{cite news|last=Wines|first=Michael|date=29 December 2011|url=https://www.nytimes.com/2011/12/30/world/asia/china-moves-ahead-with-plan-for-dam.html?_r=1|title=China Proceeds on Plan for Disputed Yangtze Dam|newspaper=New York Times|accessdate=26 April 2012}}</ref>\n*<ref name=hornby20120426cpost>{{cite news|last1=Hornby|first1=Lucy|last2=Bai|first2=Jim|agency=Reuters|date=30 March 2012|title=China to flood reserve with latest Yangtze dam|accessdate=26 April 2012|url=https://www.reuters.com/article/us-china-dam/china-to-flood-nature-reserve-with-latest-yangtze-dam-idUSBRE82S0GG20120329}}</ref> \n}}\n<!--\n==External links==\n*\n-->\n\n{{Use dmy dates|date=April 2012}}\n\n[[Category:Hydroelectric power stations in Chongqing]]\n[[Category:Dams in China]]\n[[Category:Dams on the Yangtze River]]\n[[Category:Dam controversies]]\n[[Category:Cancelled projects in China]]\n[[Category:Cancelled hydroelectric power stations]]\n", "text_old": "{{Infobox dam\n| name                 =Xiaonanhai Dam\n| name_official        =\n| image                =\n| image_size           =\n| image_caption        =\n| image_alt            =\n| location_map         =China\n| location_map_size    =\n| location_map_caption =\n| coordinates          = {{coord|29|03|36.30|N|105|56|32.31|E|type:landmark|display=inline,title}}\n| country              =People's Republic of China\n| location             =\n| status               =Cancelled\n| construction_began   =March 2012 (preliminary)\n| opening              =2019 est.\n| demolished           =\n| cost                 = [[Renminbi|RMB\u00a5]]32 billion<ref name=shi20120426scmp/>\n| owner                =\n| dam_type             =\n| dam_length           =<!-- {{Convert|67|m|ft|0|abbr=on}}-->\n| dam_height           ={{Convert|67|m|ft|0|abbr=on}}\n| dam_width_crest      =\n| dam_width_base       =\n| dam_volume           =\n| dam_crosses          =[[Yangtze River]]\n| spillway_count       =\n| spillway_type        =\n| spillway_capacity    =\n| res_name             =Xiaonanhai Reservoir\n| res_capacity_total   ={{Convert|1300|e6m3|acre.ft|0|abbr=on}}\n| res_capacity_inactive={{Convert|655|e6m3|acre.ft|0|abbr=on}}<ref>{{cite web|title=Chongqing Yangtze River Hydropower Project survey XIAONANHAI|url=http://www.cj-site.com/cjkjNews/201212/6796.html|publisher=hangjiang Spatial Information Technology Engineering Co., Ltd.|accessdate=12 August 2013|language=Chinese|date=22 December 2012}}</ref>\n| res_catchment        =\n| res_surface          =\n| res_max_depth        =\n| res_tidal_range      =\n| plant_operator       =\n| plant_commission     = \n| plant_decommission   =\n| plant_type           =\n| plant_turbines       =<!--  [[megawatt|MW]] [[Francis turbine]]s -->\n| plant_capacity       = 1,760 MW<ref name=hornby20120426cpost/>\n| plant_annual_gen     =\n| website              =\n| extra                =\n}}\nThe '''Xiaonanhai Dam''' was a proposed [[dam]] on the [[Yangtze River]] in [[Chongqing]], China. It was to have an associated 1,760 MW [[hydroelectric]] power station.<ref name=shi20120426scmp/> Preliminary construction on the dam began on 29 March 2012 and earliest completion was expected in 2019.<ref>{{cite web|title=Work begins on 1.76GW Xiaonanhai Dam along Yangtze River|url=http://asian-power.com/project/news/work-begins-176gw-xiaonanhai-dam-along-yangtze-river|publisher=Asian Power|accessdate=11 August 2013|date=12 April 2012}}</ref><ref>{{cite web|title=Commencement of Xiaonanhai Dam reduces hope for Yangtze|url=http://eng.greensos.cn/ShowArticle.aspx?articleId=1328|publisher=China Green News|accessdate=11 August 2013|date=12 August 2012}}</ref><ref>{{cite web|title=Chongqing, The Largest Hydropower Project Xiaonanhai Hydropower Grand Foundation|url=http://webcache.googleusercontent.com/search?q=cache:wlMy8hq1OTMJ:www.wuhanins.com/InsWeb3/en/index.php/index-view-aid-125.html+&cd=39&hl=en&ct=clnk&gl=us|publisher=The Three Gorges|accessdate=7 January 2015|language=Chinese|date=5 April 2012}}</ref> However, it was cancelled in March 2015 due to environmental concerns.<ref name=cancel>{{cite web|last1=Wong|first1=Edward|title=Environmental Order in China to Prevent Building of Contested Dam|url=https://www.nytimes.com/2015/04/11/world/asia/environmental-order-in-china-to-prevent-building-of-contested-dam.html?_r=0|publisher=New York Times|accessdate=10 April 2015|date=10 April 2015}}</ref>\n\n== Project initiation ==\nThe project, under responsibility of the Chongqing municipal government, was initiated under the stewardship of [[Bo Xilai]] prior to his fall from grace in 2012. The dam was to be constructed by [[China Three Gorges Corporation]] 40&nbsp;km upstream of the city, and 700&nbsp;km upstream from the [[Three Gorges Dam]].<ref name=shi20120426scmp/>\n\nWeng Lida, a former director of the water resources bureau at the Yangtze River Commission, said that senior China Three Gorges executives had succumbed to pressure from the Chongqing authorities. According to the ''South China Morning Post'', Chongqing's success in overcoming all major obstacles to the dam's construction is attributed to the personal intervention of Bo.<ref name=shi20120426scmp/>\n\n== Controversy ==\nThe project was strongly opposed by environmentalists, who saw it as a \"politically motivated decision\". It was highly controversial due to the environmental impact, the high cost-benefit ratio, as well as the secretive decision-making process under Bo.<ref name=shi20120426scmp/> A total of 338 freshwater fish species have been identified on the Yangtze. 189 live in the area \u2014 currently a preservation \u2014 and many of those are found in no other river basin in China.<ref name=wines20120426nyt/>\n\nAn official study by the Yangtze River Commission in 2003 concluded that the Xiaonanhai dam could not be recommended due to its \"unremarkable economic returns\". According to ''[[Chongqing Daily]]'', project cost per-kilowatt is triple that compared with other projects along the Yangtze: with total investment estimated at \u00a532 billion, the project will cost \u00a516,000 per-kilowatt of capacity, whereas the Three Gorges dam, [[Xiluodu Dam]] and [[Xiangjiaba]] cost \u00a54,950, \u00a53,538 and \u00a55,749 respectively.<ref name=shi20120426scmp/> Under pressure from environmental critics the central government in 2009.<ref name=wines20120426nyt/>\n\nOn 14 December 2011 the State Council approved changes to shrink the boundaries of a Yangtze River preserve, clearing the way for the construction of the dam and the flooding of much of the preserve.<ref name=wines20120426nyt/> Environmentalists also feared that the dam will seriously affect biodiversity and render extinct several endangered fish species, including the [[Chinese sturgeon]] and [[Chinese paddlefish]].<ref name=shi20120426scmp/> Critics were most bitter about the perceived silencing of leading mainland scientists who were previously allied with environmentalists in opposing the Xiaonanhai dam and the downsizing of a neighboring national fishery reserve to make way for the project.<ref name=shi20120426scmp/>\n\nA 30 March 2015 order given by the [[Ministry of Environmental Protection of the People's Republic of China|Ministry of Environmental Protection]] to cancel the dam surfaced in early April 2015. The order may be due to the project's encroachment on protected areas.<ref name=cancel/>\n\n==See also==\n{{stack|{{Portal|China|Water|Renewable energy}}}}\n*[[List of dams and reservoirs in China]]\n*[[List of power stations in China]]\n\n==References==\n{{Reflist|colwidth=25em|\nrefs=\n*<ref name=shi20120426scmp>{{cite news|title=Bo may be gone but his pet project is going ahead|last=Shi|first=Jiangtao|newspaper=South China Morning Post|date=26 April 2012|language=Chinese|url=https://www.scmp.com/article/999249/bo-may-be-gone-his-pet-project-going-ahead|accessdate=14 March 2020}}</ref>\n*<ref name=wines20120426nyt>{{cite news|last=Wines|first=Michael|date=29 December 2011|url=https://www.nytimes.com/2011/12/30/world/asia/china-moves-ahead-with-plan-for-dam.html?_r=1|title=China Proceeds on Plan for Disputed Yangtze Dam|newspaper=New York Times|accessdate=26 April 2012}}</ref>\n*<ref name=hornby20120426cpost>{{cite news|last1=Hornby|first1=Lucy|last2=Bai|first2=Jim|agency=Reuters|date=30 March 2012|title=China to flood reserve with latest Yangtze dam|accessdate=26 April 2012|url=https://www.reuters.com/article/us-china-dam/china-to-flood-nature-reserve-with-latest-yangtze-dam-idUSBRE82S0GG20120329}}</ref> \n}}\n<!--\n==External links==\n*\n-->\n\n{{Use dmy dates|date=April 2012}}\n\n[[Category:Hydroelectric power stations in Chongqing]]\n[[Category:Dams in China]]\n[[Category:Dams on the Yangtze River]]\n[[Category:Cancelled dams]]\n[[Category:Dam controversies]]\n[[Category:Cancelled projects in China]]\n[[Category:Cancelled hydroelectric power stations]]\n", "name_user": "Macquaria", "label": "safe", "comment": "Category reorganization", "url_page": "//en.wikipedia.org/wiki/Xiaonanhai_Dam"}
{"title_page": "Programmable logic controller", "text_new": "[[File:Siemens Simatic S7-416-3.jpg|thumb|upright|PLC system in a rack, left-to-right: power supply unit (PSU), CPU, interface module (IM) and communication processor (CP).]]\n{{Manufacturing}}\n\nA '''programmable logic controller''' ('''PLC''') or '''programmable controller''' is an industrial [[digital computer]] which has been [[Rugged computer|ruggedized]] and adapted for the control of manufacturing processes, such as [[Assembly line|assembly lines]], or [[robotic]] devices, or any activity that requires high reliability, ease of programming and process fault diagnosis.\n\nPLCs can range from small modular devices with tens of [[Input/output|inputs and outputs (I/O)]], in a housing integral with the processor, to large rack-mounted modular devices with a count of thousands of I/O, and which are often networked to other PLC and [[SCADA]] systems.\n\nThey can be designed for many arrangements of digital and analog I/O, extended temperature ranges, immunity to [[Noise (electronics)|electrical noise]], and resistance to vibration and impact. Programs to control machine operation are typically stored in battery-backed-up or [[non-volatile memory]].\n\nPLCs were first developed in the automobile manufacturing industry to provide flexible, rugged and easily programmable controllers to replace hard-wired [[relay logic]] systems. Since then, they have been widely adopted as high-reliability automation controllers suitable for harsh environments.\n\nA PLC is an example of a \"hard\" [[Real-time computing|real-time]] system since output results must be produced in response to input conditions within a limited time, otherwise unintended operation will result.\n\n==Invention and early development==\nPLC originated in the late 1960s in the automotive industry in the USA and were designed to replace relay logic systems.<ref name=\":3\" /> Before, control logic for manufacturing was mainly composed of [[Relay|relays]], [[Cam timer|cam timers]], [[Drum sequencer (controller)|drum sequencers]], and dedicated closed-loop controllers. \n\nThe hard-wired nature made it difficult for design engineers to alter the process. Changes would require rewiring and careful updating of the documentation. If even one wire were out of place, or one relay failed, the whole system would become faulty. Often times technicians would spend hours troubleshooting by examining the schematics and comparing them to existing wiring.<ref>{{Cite web|url=https://www.controlsystemsandautomation.com/learn/plc/plc-programming-basics-i/|title=PLC Programming Basics Part I|date=2019-07-23|website=Control Systems & Automation|language=en-US|access-date=2020-02-23}}</ref> When general-purpose computers became available, they were soon applied to control sequential and combinatorial logic in industrial processes.{{Fact|date=February 2020}} These early computers required specialist programmers and strict control of working conditions, such as temperature, cleanliness, and power quality.{{Fact|date=February 2020}} \n\nThe PLC was developed with several advantages over earlier designs. It tolerated the industrial environment better than computers and was more reliable, compact and required less maintenance than relay systems. It was easily extensible with additional I/O modules, while relay systems required complicated hardware changes in case of reconfiguration. This allowed for easier iteration over manufacturing process design. Comparing to a computer, PLC in a rack format can be more easily extended with additional I/O in the form of I/O cards. With simple programming language focused on logic and switching operations it was more user-friendly than computers using [[General-purpose programming language|general-purpose programming languages]]. It also permitted for its operation to be monitored.<ref name=\":3\">{{Cite book|last=Parr|first=E. A.|url=https://books.google.pl/books?id=zLwtngK3T1UC|title=Industrial Control Handbook|publisher=Industrial Press Inc.|year=1999|isbn=0-8311-3085-7|location=|pages=450\u2013451}}</ref><ref>{{Harvnb|Bolton|2015|p=6}}</ref>\nEarly PLCs were programmed in [[ladder logic]], which strongly resembled a schematic diagram of relay logic. This program notation was chosen to reduce training demands for the existing technicians. Other PLCs used a form of [[instruction list]] programming, based on a stack-based logic solver.{{Fact|date=February 2020}}<h3>Modicon</h3>In 1968, GM Hydramatic <!--Don't link hydramatic transmission-->(the [[automatic transmission]] division of [[General Motors]]) issued a request for proposals for an electronic replacement for hard-wired relay systems based on a white paper written by engineer Edward R. Clark. The winning proposal came from Bedford Associates from [[Bedford, Massachusetts]]. The result was the first PLC\u2014built in 1969\u2013designated the 084, because it was Bedford Associates' eighty-fourth project.<ref name=\"EERef162\">M. A. Laughton, D. J. Warne (ed), ''Electrical Engineer's Reference book, 16th edition'',Newnes, 2003 Chapter 16 ''Programmable Controller''</ref><ref name=\":0\">{{Cite web|url=https://www.automationmag.com/855-the-father-of-invention-dick-morley-looks-back-on-the-40th-anniversary-of-the-plc/|title=The father of invention: Dick Morley looks back on the 40th anniversary of the PLC|last=Dunn|first=Alison|date=2009-06-12|website=Manufacturing Automation|language=en-US|url-status=live|archive-url=|archive-date=|access-date=2020-02-23}}</ref>\n\nBedford Associates started a company dedicated to developing, manufacturing, selling, and servicing this new product: '''{{visible anchor|Modicon}}''', which stood for modular digital controller. One of the people who worked on that project was [[Dick Morley]], who is considered to be the \"father\" of the PLC.<ref name=\":1\">{{Cite web|url=https://www.isa.org/standards-and-publications/isa-publications/intech-magazine/2003/august/cover-story-50th-anniversary-leaders-of-the-pack/|title=Leaders of the pack|last=Strothman|first=Jim|date=2003-08-01|website=ISA|url-status=live|archive-url=https://web.archive.org/web/20170808184918/https://www.isa.org/standards-and-publications/isa-publications/intech-magazine/2003/august/cover-story-50th-anniversary-leaders-of-the-pack/|archive-date=2017-08-08|access-date=2020-02-24}}</ref> The Modicon brand was sold in 1977 to [[Gould Electronics]] and later to [[Schneider Electric]], the current owner.<ref name=\":0\" />\n\nOne of the very first 084 models built is now on display at Schneider Electric's facility in [[North Andover, Massachusetts]]. It was presented to Modicon by [[General Motors|GM]], when the unit was retired after nearly twenty years of uninterrupted service. Modicon used the 84 moniker at the end of its product range until the 984 made its appearance.{{Fact|date=February 2020}}\n\n=== Allen-Bradley ===\nIn a parallel development [[Odo Josef Struger]] is sometimes known as the \"father of the programmable logic controller\" as well.<ref name=\":1\" /> He was involved in the invention of the [[Allen-Bradley|Allen{{Non breaking hyphen}}Bradley]] programmable logic controller during 1958 to 1960<ref name=\":2\">{{Cite web|url=https://www.controleng.com/articles/a-b-plc-inventor-dr-odo-struger-dies/|title=A-B PLC inventor, Dr. Odo Struger, dies|last=|first=|date=1999-02-01|website=Control Engineering|language=en-US|url-status=live|archive-url=https://web.archive.org/web/20200224210429/https://www.controleng.com/articles/a-b-plc-inventor-dr-odo-struger-dies/|archive-date=2020-02-24|access-date=2020-02-24}}</ref><ref name=\"nytimes2\">{{cite news|last=Brier|first=Steven E.|url=https://query.nytimes.com/gst/fullpage.html?res=9D00E6DF173FF934A15751C1A96E958260|title=O. Struger, 67, A Pioneer In Automation|date=1998-12-27|work=The New York Times|access-date=2020-02-24|url-status=live|quote=Dr. Odo J. Struger, who invented the programmable logic controller, which makes possible modern factory automation, amusement park rides and lavish stage effects in Broadway productions, died on December 8 in Cleveland. He was 67.}}</ref><ref name=\"anzovin2\">Anzovin, p. 100, item # 2189. ''Programmable logic controller was invented by the Austrian-born American engineer Odo J. Struger in 1958-60 at the Allen-Bradley company in Milwaukee, WI, USA. A programmable logic controller, or PLC, is a simple electronic device that allows precise numerical control of machinery. It is widely used to control everything from washing machines to roller coaster to automated manufacturing equipment.''</ref> and is credited with inventing the PLC acronym.<ref name=\":1\" /><ref name=\":2\" /> Allen-Bradley (now a brand owned by [[Rockwell Automation]]) became a major PLC manufacturer in the United States during his tenure.<ref name=\"short2\">{{cite web|url=http://www.jimpinto.com/writings/automationhistory.html|title=A short history of Automation growth|access-date=2008-06-20}}</ref> Struger played a leadership role in developing [[IEC 61131-3]] PLC programming language standards.<ref name=\":1\" />\n\n=== Early methods of programming ===\nMany early PLCs were not capable of graphical representation of the logic, and so it was instead represented as a series of logic expressions in some kind of Boolean format, similar to [[Boolean algebra]]. As programming terminals evolved, it became more common for ladder logic to be used, because it was a familiar format used for electro-mechanical control panels. Newer formats, such as state logic and Function Block (which is similar to the way logic is depicted when using digital integrated logic circuits) exist, but they are still{{When|date=February 2020}} not as popular as ladder logic. A primary reason for this is that PLCs solve the logic in a predictable and repeating sequence, and ladder logic allows the person writing the logic to see any issues with the timing of the logic sequence more easily than would be possible in other formats.{{Fact|date=February 2020}}\n\nUp to the mid-1990s, PLCs were programmed using proprietary programming panels or special-purpose programming [[Computer terminal|terminals]], which often had dedicated function keys representing the various logical elements of PLC programs.<ref name=\"EERef162\" /> Some proprietary programming terminals displayed the elements of PLC programs as graphic symbols, but plain [[ASCII art|ASCII]] character representations of contacts, coils, and wires were common. Programs were stored on [[Cassette tape cartridge|cassette tape cartridges]]. Facilities for printing and documentation were minimal due to lack of memory capacity. The oldest PLCs used [[non-volatile]] [[magnetic core memory]].\n\n== Architecture ==\nRegular programmable logic controller consists of:\n\n* a processor unit (CPU) which interprets inputs, executes the control program stored in memory and sends output signals,\n* a power supply unit which converts AC voltage to DC,\n* a memory unit storing data from inputs and program to be executed by the processor,\n* an input and output interfaces, where the controller receives and sends data from/to external devices,\n* a communications interface to receive and transmit data on communication networks from/to remote PLCs.<ref name=\":4\">{{Harvnb|Bolton|2015|p=7}}</ref>\n\nPLCs require programming device which is used to develop and later download the created program into the memory of the controller.<ref name=\":4\" />\n\nModern PLCs generally contain a [[real-time operating system]], such as [[OS-9]] or [[VxWorks]].<ref name=\":5\" />\n\n===Mechanical design===\n[[File:Siemens_sps_logo_8_12-24_RCE-03.jpg|thumb|Compact PLC with 8 inputs and 4 outputs.]]\n[[File:PLC_AB_InstaladoV1.JPG|alt=Modular PLC with EtherNet/IP module, digital and analog I/O, with some slots being empty.|thumb|Modular PLC with [[EtherNet/IP]] module, discrete and analog I/O, with some slots being empty.]]\nThere are two types of mechanical design for PLC systems. A ''single box'', or a ''brick'' is a small programmable controller that fits all units and interfaces into one compact casing, although, typically, additional expansion modules for inputs and outputs are available. Second design type \u2013 a ''modular'' PLC \u2013 has a chassis (also called a ''rack'') that provides space for modules with different functions, such as power supply, processor, selection of I/O modules and communication interfaces \u2013 which all can be customized for the particular application.<ref>{{Harvnb|Bolton|2015|pp=12\u201313}}</ref> Several racks can be administered by a single processor, and may have thousands of inputs and outputs. Either a special high speed serial I/O link or comparable communication method is used so that racks can be distributed away from the processor, reducing the wiring costs for large plants. Options are also available to mount I/O points directly to the machine and utilize quick disconnecting cables to sensors and valves, saving time for wiring and replacing components.{{Citation needed|date=April 2020}}\n\n===Discrete (digital) and analog signals===\n{{Overly detailed|section|details=an excessive explanations of scaling of values|date=April 2020}}\n[[Digital signal|Discrete (digital) signals]] behave as binary switches, yielding simply an On or Off signal (1 or 0, True or False, respectively). Push buttons, [[limit switch]]es, and [[photoelectric sensor]]s are examples of devices providing a discrete signal. Discrete signals are sent using either [[voltage]] or [[current (electricity)|current]], where a specific range is designated as ''On'' and another as ''Off''. For example, a PLC might use 24 V DC I/O, with values above 22 V DC representing ''On'', values below 2VDC representing ''Off'', and intermediate values undefined. Initially, PLCs had only digital I/O.\n\nAnalog signals are like volume controls, with a range of values between zero and full-scale. These are typically interpreted as integer values (counts) by the PLC, with various ranges of accuracy depending on the device and the number of bits available to store the data. As PLCs typically use 16-bit signed binary processors, the integer values are limited between -32,768 and +32,767. Pressure, temperature, flow, and weight are often represented by analog signals. Analog signals can use [[voltage]] or [[current (electricity)|current]] with a magnitude proportional to the value of the process signal. For example, an analog 0 to 10&nbsp;V or [[4-20 mA]] input would be [[analog-to-digital converter|converted]] into an integer value of 0 to 32767.  The programming inside the PLC will use a SCL or scaling function to take this 0-32767 value and transpose it into the desired units of the process so the operator or program can read it.  Proper integration will also include filter times to reduce noise as well as high and low limits to report faults.\n\n[[Current loop|Current inputs]] are less sensitive to electrical noise (e.g. from welders or electric motor starts) than voltage inputs.  Distance from the device and the controller is also a concern as the maximum travelling distance of a good quality 0-10V signal is very short compared to the 4-20mA signal.  The 4-20mA signal can also report if the wire is disconnected along the path as it would return a 0mA signal and a fault can be reported.\n\n===Timers and counters===\n{{Overly detailed|section|details=an excessive explanation of types of timers|date=April 2020}}\nThe main function of a timer is to keep an output on for a specific length of time.  A good example of this is a garage light, where you want power to be cut off after 2 minutes so as to give someone time to go into the house. The three different types of timers that are commonly used are a Delay-OFF, a Delay-ON, and a Delay-ON-Retentive. A Delay-OFF timer activates immediately when turned on, and will start counting down from a programmed time before cutting off once the enabling input is off. A Delay-ON timer is activated by input and starts accumulating time, counts up to a programmed time before cutting off, and is cleared when the enabling input is turned off. A Delay-ON-Retentive timer is activated by input and starts accumulating time, retains the accumulated value even if the (ladder-logic) rung goes false, and can be reset only by a RESET command.  Visible details for the rest of the program to use could include:\n\n*EN - ENable signal, indicated the timer has been enabled and can start timing, or if completed keep the DoNe status on.\n*PRE - PREset time, requested time value to be run before the timer is DoNe.  Could be in a TIME format (t#1h35m12s) or in seconds format (3500 = 3.5s)\n*ACC - ACCumulated time, how long the timer has been timing.  Same number formats as the PREset value.\n*DN - DoNe signal, indicates the timer has elapsed the preset value\n*TT - Timer Timing signal, indicates the timer is actively timing.  This is not on once the timer is done\n\nCounters are primarily used for counting items such as cans going into a box on an assembly line. This is important because once something is filled to its max the item needs to be moved on so something else can be filled. Many companies use counters in PLC's to count boxes, count how many feet of something is covered, or to count how many pallets are on a truck.  There are three types of counters, Up counters, Down counters, and Up/Down counters. Up counters count up to the preset value, turn on the CTU (CounT Up output) when the preset value is reached, and are cleared upon receiving a reset.  Down counters count down from a preset value, turns on the CTD (CounT Down output) when 0 is reached, and are cleared upon reset. Up/Down counters count up on CU, count down on CD, turn on CTUD (CounT Up/Down output) when the preset value is reached, and cleared on reset.<ref>Yanik, P. (2017, April 11). Timers and Counters. Cullowhee, NC, United States of America.</ref>\n\n===Redundancy===\nSome special processes need to work permanently with minimum unwanted down time. Therefore, it is necessary to design a system which is fault-tolerant and capable of handling the process with faulty modules. In such cases to increase the system availability in the event of hardware component failure, redundant CPU or I/O modules with the same functionality can be added to hardware configuration for preventing total or partial process shutdown due to hardware failure.  Other redundancy scenarios  could be related to safety critical processes, for example large hydraulic presses could require that both PLCs turn on an output before the press can come down in case one output does not turn off properly.\n\n==Programming==\n[[File:Automate industriel WAGO pour un syst\u00e8me de monitoring en industrie pharmaceutique.jpg|thumb|Industrial controller for a monitoring system in the pharmaceutical industry]]\nProgrammable logic controllers are intended to be used by engineers without programming background. For this reason, graphical programming language called [[Ladder logic|Ladder Diagram]] (LD, LAD) was first developed which resembles the schematic diagram of a system built with electromechanical relays. It was adopted by many manufacturers and later standardized in the [[IEC 61131-3]] control systems programming standard. {{As of|2015|}}, it is still widely used, thanks to its simplicity.<ref name=\":6\">{{Harvnb|Bolton|2015|pp=16\u201318}}</ref>\n\n{{As of|2015|}}, the majority of PLC systems adhere to the [[IEC 61131-3]] standard that defines 2 textual programming languages: [[Structured text|Structured Text]] (ST; similar to [[Pascal (programming language)|Pascal]]) and [[Instruction list|Instruction List]] (IL); as well as 3 graphical languages: [[Ladder logic|Ladder Diagram]], [[Function block diagram|Function Block Diagram]] (FBD) and [[Sequential function chart|Sequential Function Chart]] (SFC).<ref name=\":6\" /><ref>Keller, William L Jr. ''Grafcet, A Functional Chart for Sequential Processes'', 14th Annual International Programmable Controllers Conference Proceedings, 1984, p. 71-96.</ref> [[Instruction list|Instruction List]] (IL) was deprecated in the third edition of the standard.<ref>{{Cite web|url=https://plcopen.org/status-iec-61131-3-standard|title=Status IEC 61131-3 standard|last=|first=|date=2018-07-19|website=PLCopen|language=en|url-status=live|archive-url=|archive-date=|access-date=2020-04-01}}</ref>\n\nModern PLCs can be programmed in a variety of ways, from the relay-derived ladder logic to programming languages such as specially adapted dialects of [[BASIC]] and [[C (programming language)|C]].{{Citation needed|date=July 2009}}\n\nWhile the fundamental concepts of PLC programming are common to all manufacturers, differences in I/O addressing, memory organization, and instruction sets mean that PLC programs are never perfectly interchangeable between different makers. Even within the same product line of a single manufacturer, different models may not be directly compatible.{{Citation needed|date=July 2009}}\n\nPLC programs are typically written in programming device which can take form of a desktop console, a special software on a [[personal computer]], or a handheld programming device.<ref name=\":7\">{{Harvnb|Bolton|2015|pp=19\u201320}}</ref> Then, the program is downloaded to the PLC directly or over a network. It is stored either in non-volatile [[flash memory]] or battery-backed-up [[RAM]]. In some programmable controllers, the program is transferred from a personal computer to the PLC through a programming board which writes the program into a removable chip, such as [[EPROM]].\n\nProgram written on personal computer can be easily copied and backed up on external storage. Manufacturers develop programming software for their controllers. In addition to being able to program PLCs in multiple languages, they provide common features like hardware diagnostics and maintenance, software debugging, and offline simulation.<ref name=\":7\" />\n\nThe program can be uploaded for backup and restoration purposes.{{Citation needed|date=July 2009}}\n\n===Simulation===\nIn order to properly understand the operation of a PLC, it is necessary to spend considerable time [[Computer programming|programming]], testing and [[debugging]] PLC programs. PLC systems are inherently expensive, and down-time is often very costly. In addition, if a PLC is programmed incorrectly it can result in lost productivity and dangerous conditions. PLC simulation software such as PLCLogix can save time in the design of automated control applications and can also increase the level of safety associated with equipment since many \"what if\" scenarios can be tried and tested before the system is activated.<ref>{{cite book|last1=Lin|first1=Sally|url=https://books.google.com/books?id=CHYlTBxqrM8C&pg=PA553|title=Advances in Computer Science, Environment, Ecoinformatics, and Education, Part III: International Conference, CSEE 2011, Wuhan, China, August 21-22, 2011. Proceedings|last2=Huang|first2=Xiong|date=9 August 2011|publisher=Springer Science & Business Media|isbn=9783642233449|pages=15|via=Google Books}}</ref>\n\n===Control example shown in ladder diagram===\nThis is a programming example in [[ladder logic|ladder diagram]] which shows the control system. A ladder diagram is a method of drawing control circuits which pre-dates PLCs. The ladder diagram resembles the schematic diagram of a system built with electromechanical relays.\n\nAs an example, say a facility needs to store water in a tank. The water is drawn from the tank by another system, as needed, and our example system must manage the water level in the tank by controlling the valve that refills the tank. Shown are:\n\n*Two inputs (from the low and high level switches) represented by contacts of the float switches\n*An output to the fill valve, labelled as the fill valve which it controls\n*An \"internal\" contact, representing the output signal to the fill valve which is created in the program.\n*A logical control scheme created by the interconnection of these items in software\n\nIn ladder diagram, the contact symbols represent the state of bits in processor memory, which corresponds to the state of physical inputs to the system. If a discrete input is energized, the memory bit is a 1, and a \"normally open\" contact controlled by that bit will pass a logic \"true\" signal on to the next element of the ladder. Therefore, the contacts in the PLC program that \"read\" or look at the physical switch contacts in this case must be \"opposite\" or open in order to return a TRUE for the closed physical switches. Internal status bits, corresponding to the state of discrete outputs, are also available to the program.\n\nIn the example, the physical state of the float switch contacts must be considered when choosing \"normally open\" or \"normally closed\" symbols in the ladder diagram. The PLC has two discrete inputs from [[float switch]]es (Low Level and High Level). Both float switches (normally closed) open their contacts when the water level in the tank is above the physical location of the switch.\n\nWhen the water level is below both switches, the float switch physical contacts are both closed, and a true (logic 1) value is passed to the Fill Valve output. Water begins to fill the tank. The internal \"Fill Valve\" contact latches the circuit so that even when the \"Low Level\" contact opens (as the water passes the lower switch), the fill valve remains on. Since the High Level is also normally closed, water continues to flow as the water level remains between the two switch levels. Once the water level rises enough so that the \"High Level\" switch is off (opened), the PLC will shut the inlet to stop the water from overflowing; this is an example of seal-in (latching) logic. The output is sealed in until a high level condition breaks the circuit. After that the fill valve remains off until the level drops so low that the Low Level switch is activated, and the process repeats again.\n<pre style=\"width: 95%;\">\n\n| (N.C. physical   (N.C. physical                             |\n|   Switch)          Switch)                                  |\n|   Low Level       High Level                Fill Valve      |\n|------[ ]------|------[ ]----------------------(OUT)---------|\n|               |                                             |\n|               |                                             |\n|               |                                             |\n|   Fill Valve  |                                             |\n|------[ ]------|                                             |\n|                                                             |\n|                                                             |\n</pre>\n\nA complete program may contain thousands of rungs, evaluated in sequence. Typically the PLC processor will alternately scan all its inputs and update outputs, then evaluate the ladder logic; input changes during a program scan will not be effective until the next I/O update. A complete program scan may take only a few milliseconds, much faster than changes in the controlled process.\n\nProgrammable controllers vary in their capabilities for a \"rung\" of a ladder diagram. Some only allow a single output bit. There are typically limits to the number of series contacts in line, and the number of branches that can be used. Each element of the rung is evaluated sequentially. If elements change their state during evaluation of a rung, hard-to-diagnose faults can be generated, although sometimes (as above) the technique is useful. Some implementations forced evaluation from left-to-right as displayed and did not allow reverse flow of a logic signal (in multi-branched rungs) to affect the output.\n\n==Functionality==\n[[Image:PLC Control Panel.png|thumbnail|350|Control panel with PLC (grey elements in the center). The unit consists of separate elements, from left to right; [[power supply]], controller, [[relay]] units for in- and output]]\n[[File:Control-panel-plc.jpg|thumb|Control panel with a PLC user interface for [[thermal oxidiser|thermal oxidizer]] regulation.]]\nThe main difference from most other computing devices is that PLCs are intended-for and therefore tolerant-of more severe conditions (such as dust, moisture, heat, cold), while offering extensive [[input/output]] (I/O) to connect the PLC to [[sensor]]s and [[actuator]]s. PLC input can include simple digital elements such as [[limit switch]]es, analog variables from process sensors (such as temperature and pressure), and more complex data such as that from positioning or [[machine vision]] systems.<ref>Harms, Toni M. & Kinner, Russell H. P.E., ''Enhancing PLC Performance with Vision Systems''. 18th Annual ESD/HMI International Programmable Controllers Conference Proceedings, 1989, p. 387-399.</ref> PLC output can include elements such as indicator lamps, sirens, [[electric motor]]s, [[pneumatic]] or [[hydraulic]] cylinders, magnetic [[relay]]s, [[solenoid]]s, or [[analog signal|analog]] outputs. The input/output arrangements may be built into a simple PLC, or the PLC may have external [[I/O module]]s attached to a fieldbus or computer network that plugs into the PLC.\n\nThe functionality of the PLC has evolved over the years to include sequential relay control, motion control, [[process control]], [[distributed control system]]s, and [[computer network|networking]]. The data handling, storage, processing power, and communication capabilities of some modern PLCs are approximately equivalent to [[desktop computer]]s. PLC-like programming combined with remote I/O hardware, allow a general-purpose desktop computer to overlap some PLCs in certain applications. Desktop computer controllers have not been generally accepted in heavy industry because the desktop computers run on less stable operating systems than PLCs, and because the desktop computer hardware is typically not designed to the same levels of tolerance to temperature, humidity, vibration, and longevity as the processors used in PLCs. Operating systems such as Windows do not lend themselves to deterministic logic execution, with the result that the controller may not always respond to changes of input status with the consistency in timing expected from PLCs. Desktop logic applications find use in less critical situations, such as laboratory automation and use in small facilities where the application is less demanding and critical.{{citation needed|date=November 2014}}\n\n===Basic functions===\n\nThe most basic function of a programmable controller is to emulate the functions of electro-mechanical relays. Discrete inputs are given a unique address, and a PLC instruction can test if the input state is on or off. Just as a series of relay contacts perform a logical AND function, not allowing current to pass unless all the contacts are closed, so a series of \"examine if on\" instructions will energize its output storage bit if all the input bits are on. Similarly, a parallel set of instructions will perform a logical OR. In an electro-mechanical relay wiring diagram, a group of contacts controlling one coil is called a \"rung\" of a \"ladder diagram \", and this concept is also used to describe PLC logic.  Some models of PLC limit the number of series and parallel instructions in one \"rung\" of logic. The output of each rung sets or clears a storage bit, which may be associated with a physical output address or which may be an \"internal coil\" with no physical connection. Such internal coils can be used, for example, as a common element in multiple separate rungs.  Unlike physical relays, there is usually no limit to the number of times an input, output or internal coil can be referenced in a PLC program.\n\nSome PLCs enforce a strict left-to-right, top-to-bottom execution order for evaluating the rung logic.  This is different from electro-mechanical relay contacts, which in a sufficiently complex circuit may either pass current left-to-right or right-to-left, depending on the configuration of surrounding contacts.  The elimination of these \"sneak paths\" is either a bug or a feature, depending on programming style.\n\nMore advanced instructions of the PLC may be implemented as functional blocks, which carry out some operation when enabled by a logical input and which produce outputs to signal, for example, completion or errors, while manipulating variable internally that may not correspond to discrete logic.\n\n=== Communication ===\nPLCs use built-in ports, such as [[USB]], [[Ethernet]], [[RS-232]], [[RS-485]], or [[RS-422]] to communicate with external devices (sensors, actuators) and systems (programming software, [[SCADA]], [[User interface|HMI]]). Communication is carried over various industrial network protocols, like [[Modbus]], or [[EtherNet/IP]]. Many of these protocols are vendor specific.\n\nPLCs used in larger I/O systems may have [[peer-to-peer]] (P2P) communication between processors. This allows separate parts of a complex process to have individual control while allowing the subsystems to co-ordinate over the communication link. These communication links are also often used for [[User interface|HMI]] devices such as keypads or [[Personal computer|PC]]-type workstations.\n\nFormerly, some manufacturers offered dedicated communication modules as an add-on function where the processor had no network connection built-in.\n\n===User interface===\n{{See also|User interface|List of human-computer interaction topics}}\nPLCs may need to interact with people for the purpose of configuration, alarm reporting, or everyday control. A [[SCADA#Human-machine interface|human-machine interface]] (HMI) is employed for this purpose. HMIs are also referred to as man-machine interfaces (MMIs) and graphical user interfaces (GUIs). A simple system may use buttons and lights to interact with the user. Text displays are available as well as graphical touch screens. More complex systems use programming and monitoring software installed on a computer, with the PLC connected via a communication interface.\n\n==Process of a scan cycle==\n\nThere are 5 main steps in a scan cycle:\n\n# Reading inputs\n# Executing the program\n# Processing communication requests\n# Executing CPU diagnostics\n# Writing outputs\n\nA PLC program generally loops i.e. executes repeatedly, as long as the controlled system is running. At the start of each execution loop, the status of all physical inputs are copied to an area of memory, sometimes called the \"I/O Image Table\", which is accessible to the processor. The program then runs from its first instruction rung down to the last rung. It takes some time for the processor of the PLC to evaluate all the rungs and update the I/O image table with the status of outputs.<ref>Maher, Michael J. ''Real-Time Control and Communications''. 18th Annual ESD/SMI International Programmable Controllers Conference Proceedings, 1989, p. 431-436.</ref> Scan times of a few milliseconds may be encountered for small programs and fast processors, but for older processors and very large programs much longer scan times (on the order of 100 ms) may be encountered. Excessively long scan times may mean the response of the PLC to changing inputs or process conditions is too slow to be useful.\n\nAs PLCs became more advanced, methods were developed to change the sequence of ladder execution, and subroutines were implemented.<ref>Kinner, Russell H., P.E. ''Designing Programmable Controller Application Programs Using More than One Designer''. 14th Annual International Programmable Controllers Conference Proceedings, 1985, p. 97-110.</ref> This enhanced programming could be used to save scan time for high-speed processes; for example, parts of the program used only for setting up the machine could be segregated from those parts required to operate at higher speed. Newer PLCs now have the option to run the logic program synchronously with the IO scanning. This means that IO is updated in the background and the logic reads and writes values as required during the logic scanning.\n\nSpecial-purpose I/O modules may be used where the scan time of the PLC is too long to allow predictable performance. Precision timing modules, or counter modules for use with [[rotary encoder|shaft encoder]]s, are used where the scan time would be too long to reliably count pulses or detect the sense of rotation of an encoder. This allows even a relatively slow PLC to still interpret the counted values to control a machine, as the accumulation of pulses is done by a dedicated module that is unaffected by the speed of program execution on the PLC.\n\n==Security==\nPrior to the discovery of the [[Stuxnet]] [[computer worm]] in June 2010, security of PLCs received little attention. Modern PLCs generally contain a real-time operating systems, which can be vulnerable to exploits in similar way as desktop operating systems, like [[Microsoft Windows]]. PLCs can also be attacked by gaining control of a computer they communicate with.<ref name=\":5\">{{cite web |url=http://www.tofinosecurity.com/blog/plc-security-risk-controller-operating-systems |title=PLC Security Risk: Controller Operating Systems - Tofino Industrial Security Solution|website=www.tofinosecurity.com  |date=May 2011 |author=Byres}}</ref> {{As of|2011||since=y}}, this concerns grow as networking is becoming more commonplace in the PLC environment connecting the previously separate plant floor networks and office networks.<ref>{{Harvnb|Bolton|2015|p=15}}</ref>\n\n== Safety PLC ==\nIn recent years \"safety\" PLCs have started to become popular, either as standalone models or as functionality and safety-rated hardware added to existing controller architectures ([[Allen-Bradley]] Guardlogix, [[Siemens]] F-series etc.). These differ from conventional PLC types as being suitable for use in safety-critical applications for which PLCs have traditionally been supplemented with hard-wired [[Safety relay|safety relays]]. For example, a safety PLC might be used to control access to a robot cell with [[Trapped key interlocking|trapped-key access]], or perhaps to manage the shutdown response to an emergency stop on a conveyor production line. Such PLCs typically have a restricted regular instruction set augmented with safety-specific instructions designed to interface with emergency stops, light screens, and so forth. The flexibility that such systems offer has resulted in rapid growth of demand for these controllers.\n\n==PLC compared with other control systems==\n[[File:BMA Automation Allen Bradley PLC 3.JPG|thumb|200px|right|PLC installed in a control panel]]\n[[File:Control-panel.jpg|thumb|Control center with a PLC for a [[Regenerative thermal oxidiser|RTO]].]]\nPLCs are well adapted to a range of [[automation]] tasks. These are typically industrial processes in manufacturing where the cost of developing and maintaining the automation system is high relative to the total cost of the automation, and where changes to the system would be expected during its operational life. PLCs contain input and output devices compatible with industrial pilot devices and controls; little electrical design is required, and the design problem centers on expressing the desired sequence of operations. PLC applications are typically highly customized systems, so the cost of a packaged PLC is low compared to the cost of a specific custom-built controller design. On the other hand, in the case of mass-produced goods, customized control systems are economical. This is due to the lower cost of the components, which can be optimally chosen instead of a \"generic\" solution, and where the non-recurring engineering charges are spread over thousands or millions of units.{{Citation needed|date=February 2020}}\n\nProgrammable controllers are widely used in motion, positioning, or torque control. Some manufacturers produce motion control units to be integrated with PLC so that [[G-code]] (involving a [[CNC]] machine) can be used to instruct machine movements.<ref>{{Cite journal|last=Vosough and Vosough|date=November 2011|title=PLC and its Applications|url=http://www.ijmse.org/Volume2/Issue8/paper9.pdf|journal=International Journal of Multidisciplinary Sciences and Engineering|volume=2|pages=}}</ref>{{Citation needed|date=July 2009}}\n\n=== Cam timers ===\nFor high volume or very simple fixed automation tasks, different techniques are used. For example, a cheap consumer [[dishwasher]] would be controlled by an electromechanical [[cam timer]] costing only a few dollars in production quantities.{{Citation needed|date=February 2020}}\n\n=== Microcontrollers ===\nA [[microcontroller]]-based design would be appropriate where hundreds or thousands of units will be produced and so the development cost (design of power supplies, input/output hardware, and necessary testing and certification) can be spread over many sales, and where the end-user would not need to alter the control. Automotive applications are an example; millions of units are built each year, and very few end-users alter the programming of these controllers. However, some specialty vehicles such as transit buses economically use PLCs instead of custom-designed controls, because the volumes are low and the development cost would be uneconomical.<ref name=\"McMillan992\">Gregory K. McMillan, Douglas M. Considine (ed), ''Process/Industrial Instruments and Controls Handbook Fifth Edition'', McGraw-Hill, 1999 {{ISBN|0-07-012582-1}} Section 3 ''Controllers''</ref>\n\n=== Single-board computers ===\nVery complex process control, such as used in the chemical industry, may require algorithms and performance beyond the capability of even high-performance PLCs. Very high-speed or precision controls may also require customized solutions; for example, aircraft flight controls. [[Single-board computer|Single-board computers]] using semi-customized or fully proprietary hardware may be chosen for very demanding control applications where the high development and maintenance cost can be supported. \"Soft PLCs\" running on desktop-type computers can interface with industrial I/O hardware while executing programs within a version of commercial operating systems adapted for process control needs.<ref name=\"McMillan992\" />\n\nThe rising popularity of [[Single-board computer|single board computers]] has also had an influence on the development of PLCs. Traditional PLCs are generally [[Closed platform|closed platforms]], but some newer PLCs (e.g. ctrlX from [[Bosch Rexroth]], PFC200 from [[WAGO Kontakttechnik|Wago]], PLCnext from [[Phoenix Contact]], and Revolution Pi from Kunbus) provide the features of traditional PLCs on an [[open platform]].\n\n=== PID Controllers ===\nPLCs may include logic for single-variable feedback analog control loop, a [[PID controller]]. A PID loop could be used to control the temperature of a manufacturing process, for example. Historically PLCs were usually configured with only a few analog control loops; where processes required hundreds or thousands of loops, a [[distributed control system]] (DCS) would instead be used. As PLCs have become more powerful, the boundary between DCS and PLC applications has been blurred.{{Citation needed|date=July 2009}}\n\n===Programmable logic relays (PLR)===\n{{Original research section|date=March 2020}}In more recent years,{{When|date=February 2020}} small products called programmable logic relays (PLRs) or smart relays, have become more common and accepted. These are similar to PLCs and are used in light industry where only a few points of I/O are needed, and low cost is desired. These small devices are typically made in a common physical size and shape by several manufacturers, and branded by the makers of larger PLCs to fill out their low end product range. Most of these have 8 to 12 discrete inputs, 4 to 8 discrete outputs, and up to 2 analog inputs. Most such devices include a tiny postage-stamp-sized LCD screen for viewing simplified ladder logic (only a very small portion of the program being visible at a given time) and status of I/O points, and typically these screens are accompanied by a 4-way rocker push-button plus four more separate push-buttons, similar to the key buttons on a VCR remote control, and used to navigate and edit the logic. Most have a small plug for connecting via RS-232 or RS-485 to a personal computer so that programmers can use simple Windows applications for programming instead of being forced to use the tiny LCD and push-button set for this purpose. Unlike regular PLCs that are usually modular and greatly expandable, the PLRs are usually not modular or expandable, but their price can be two [[orders of magnitude]] less than a PLC, and they still offer robust design and deterministic execution of the logics.\n\nA variant of PLCs, used in remote locations is the [[remote terminal unit]] or RTU. An RTU is typically a low power, ruggedised PLC whose key function is to manage the communications links between the site and the central control system (typically [[SCADA]]) or in some modern systems, \"The Cloud\". Unlike factory automation using high speed [[Ethernet]], communications links to remote sites are often radio based and are less reliable. To account for the reduced reliability, RTU will buffer messages or switch to alternate communications paths. When buffering messages, the RTU will timestamp each message so that a full history of site events can be reconstructed. RTUs, being PLCs, have a wide range of I/O and are fully programmable, typically with languages from the [[IEC 61131-3]] standard that is common to many PLCs, RTUs and DCSs. In remote locations, it is common to use an RTU as a gateway for a PLC, where the PLC is performing all site control and the RTU is managing communications, time stamping events and monitoring ancillary equipment. On sites with only a handful of I/O, the RTU may also be the site PLC and will perform both communications and control functions.\n\n==See also==\n* [[Industrial control systems]]\n* [[Industrial safety systems]]\n* [[PLC technician]]\n* [[1-bit architecture]]\n\n==References==\n{{reflist}}\n\n=== Bibliography ===\n{{Refbegin|}}\n* {{Cite book|last=Bolton|first=William|url=https://books.google.pl/books?id=sDqnBQAAQBAJ|title=Programmable Logic Controllers|publisher=Newnes|year=2015|isbn=9780081003534|edition=6th, revised|location=|ref=harv|via=Google Books}}\n\n{{Refend}}\n\n==Further reading==\n* Daniel Kandray, ''Programmable Automation Technologies'', Industrial Press, 2010 {{ISBN|978-0-8311-3346-7}}, Chapter 8 ''Introduction to Programmable Logic Controllers''\n* Tom Mejer Antonsen, 2018 \"PLC Controls with Structured Text (ST)\", {{ISBN|978-87-4300-241-3}},  {{ISBN|978-87-4300-242-0}}\n* {{cite book |title=The Programmable Logic Controller: its prehistory, emergence and application |author-first=Mark John |author-last=Walker |date=2012-09-08 |type=PhD thesis |location=Department of Communication and Systems Faculty of Mathematics, Computing and Technology |publisher=[[The Open University]] |url=http://oro.open.ac.uk/54687/1/594090.pdf |access-date=2018-06-20 |url-status=live |archive-url=https://web.archive.org/web/20180620115412/http://oro.open.ac.uk/54687/1/594090.pdf |archive-date=2018-06-20}}\n\n== External links ==\n*[https://www.solisplc.com/what-is-plc-programming Complete guide to PLCs and PLC Programming]\n*[http://plccompare.com/embedded-plc-guide/ A simple guide to Embedded PLCs]\n\n{{Commons category|Programmable logic controller}}\n{{Wikiversity|Programmable logic controller (basics)}}\n\n{{DEFAULTSORT:Programmable Logic Controller}}\n[[Category:Industrial automation]]\n[[Category:Industrial computing]]\n[[Category:Programmable logic controllers]]\n[[Category:Wikipedia articles with ASCII art]]\n", "text_old": "[[File:Siemens Simatic S7-416-3.jpg|thumb|upright|PLC system in a rack, left-to-right: power supply unit (PSU), CPU, interface module (IM) and communication processor (CP).]]\n{{Manufacturing}}\n\nA '''programmable logic controller''' ('''PLC''') or '''programmable controller''' is an industrial [[digital computer]] which has been [[Rugged computer|ruggedized]] and adapted for the control of manufacturing processes, such as [[Assembly line|assembly lines]], or [[robotic]] devices, or any activity that requires high reliability, ease of programming and process fault diagnosis.\n\nPLCs can range from small modular devices with tens of [[Input/output|inputs and outputs (I/O)]], in a housing integral with the processor, to large rack-mounted modular devices with a count of thousands of I/O, and which are often networked to other PLC and [[SCADA]] systems.\n\nThey can be designed for many arrangements of digital and analog I/O, extended temperature ranges, immunity to [[Noise (electronics)|electrical noise]], and resistance to vibration and impact. Programs to control machine operation are typically stored in battery-backed-up or [[non-volatile memory]].\n\nPLCs were first developed in the automobile manufacturing industry to provide flexible, rugged and easily programmable controllers to replace hard-wired [[relay logic]] systems. Since then, they have been widely adopted as high-reliability automation controllers suitable for harsh environments.\n\nA PLC is an example of a \"hard\" [[Real-time computing|real-time]] system since output results must be produced in response to input conditions within a limited time, otherwise unintended operation will result.\n\n==Invention and early development==\nPLC originated in the late 1960s in the automotive industry in the USA and were designed to replace relay logic systems.<ref name=\":3\" /> Before, control logic for manufacturing was mainly composed of [[Relay|relays]], [[Cam timer|cam timers]], [[Drum sequencer (controller)|drum sequencers]], and dedicated closed-loop controllers. \n\nThe hard-wired nature made it difficult for design engineers to alter the process. Changes would require rewiring and careful updating of the documentation. If even one wire were out of place, or one relay failed, the whole system would become faulty. Often times technicians would spend hours troubleshooting by examining the schematics and comparing them to existing wiring.<ref>{{Cite web|url=https://www.controlsystemsandautomation.com/learn/plc/plc-programming-basics-i/|title=PLC Programming Basics Part I|date=2019-07-23|website=Control Systems & Automation|language=en-US|access-date=2020-02-23}}</ref> When general-purpose computers became available, they were soon applied to control sequential and combinatorial logic in industrial processes.{{Fact|date=February 2020}} These early computers required specialist programmers and strict control of working conditions, such as temperature, cleanliness, and power quality.{{Fact|date=February 2020}} \n\nThe PLC was developed with several advantages over earlier designs. It tolerated the industrial environment better than computers and was more reliable, compact and required less maintenance than relay systems. It was easily extensible with additional I/O modules, while relay systems required complicated hardware changes in case of reconfiguration. This allowed for easier iteration over manufacturing process design. Comparing to a computer, PLC in a rack format can be more easily extended with additional I/O in the form of I/O cards. With simple programming language focused on logic and switching operations it was more user-friendly than computers using [[General-purpose programming language|general-purpose programming languages]]. It also permitted for its operation to be monitored.<ref name=\":3\">{{Cite book|last=Parr|first=E. A.|url=https://books.google.pl/books?id=zLwtngK3T1UC|title=Industrial Control Handbook|publisher=Industrial Press Inc.|year=1999|isbn=0-8311-3085-7|location=|pages=450\u2013451}}</ref><ref>{{Harvnb|Bolton|2015|p=6}}</ref>\nEarly PLCs were programmed in [[ladder logic]], which strongly resembled a schematic diagram of relay logic. This program notation was chosen to reduce training demands for the existing technicians. Other PLCs used a form of [[instruction list]] programming, based on a stack-based logic solver.{{Fact|date=February 2020}}<h3>Modicon</h3>In 1968, GM Hydramatic <!--Don't link hydramatic transmission-->(the [[automatic transmission]] division of [[General Motors]]) issued a request for proposals for an electronic replacement for hard-wired relay systems based on a white paper written by engineer Edward R. Clark. The winning proposal came from Bedford Associates from [[Bedford, Massachusetts]]. The result was the first PLC\u2014built in 1969\u2013designated the 084, because it was Bedford Associates' eighty-fourth project.<ref name=\"EERef162\">M. A. Laughton, D. J. Warne (ed), ''Electrical Engineer's Reference book, 16th edition'',Newnes, 2003 Chapter 16 ''Programmable Controller''</ref><ref name=\":0\">{{Cite web|url=https://www.automationmag.com/855-the-father-of-invention-dick-morley-looks-back-on-the-40th-anniversary-of-the-plc/|title=The father of invention: Dick Morley looks back on the 40th anniversary of the PLC|last=Dunn|first=Alison|date=2009-06-12|website=Manufacturing Automation|language=en-US|url-status=live|archive-url=|archive-date=|access-date=2020-02-23}}</ref>\n\nBedford Associates started a company dedicated to developing, manufacturing, selling, and servicing this new product: '''{{visible anchor|Modicon}}''', which stood for modular digital controller. One of the people who worked on that project was [[Dick Morley]], who is considered to be the \"father\" of the PLC.<ref name=\":1\">{{Cite web|url=https://www.isa.org/standards-and-publications/isa-publications/intech-magazine/2003/august/cover-story-50th-anniversary-leaders-of-the-pack/|title=Leaders of the pack|last=Strothman|first=Jim|date=2003-08-01|website=ISA|url-status=live|archive-url=https://web.archive.org/web/20170808184918/https://www.isa.org/standards-and-publications/isa-publications/intech-magazine/2003/august/cover-story-50th-anniversary-leaders-of-the-pack/|archive-date=2017-08-08|access-date=2020-02-24}}</ref> The Modicon brand was sold in 1977 to [[Gould Electronics]] and later to [[Schneider Electric]], the current owner.<ref name=\":0\" />\n\nOne of the very first 084 models built is now on display at Schneider Electric's facility in [[North Andover, Massachusetts]]. It was presented to Modicon by [[General Motors|GM]], when the unit was retired after nearly twenty years of uninterrupted service. Modicon used the 84 moniker at the end of its product range until the 984 made its appearance.{{Fact|date=February 2020}}\n\n=== Allen-Bradley ===\nIn a parallel development [[Odo Josef Struger]] is sometimes known as the \"father of the programmable logic controller\" as well.<ref name=\":1\" /> He was involved in the invention of the [[Allen-Bradley|Allen{{Non breaking hyphen}}Bradley]] programmable logic controller during 1958 to 1960<ref name=\":2\">{{Cite web|url=https://www.controleng.com/articles/a-b-plc-inventor-dr-odo-struger-dies/|title=A-B PLC inventor, Dr. Odo Struger, dies|last=|first=|date=1999-02-01|website=Control Engineering|language=en-US|url-status=live|archive-url=https://web.archive.org/web/20200224210429/https://www.controleng.com/articles/a-b-plc-inventor-dr-odo-struger-dies/|archive-date=2020-02-24|access-date=2020-02-24}}</ref><ref name=\"nytimes2\">{{cite news|last=Brier|first=Steven E.|url=https://query.nytimes.com/gst/fullpage.html?res=9D00E6DF173FF934A15751C1A96E958260|title=O. Struger, 67, A Pioneer In Automation|date=1998-12-27|work=The New York Times|access-date=2020-02-24|url-status=live|quote=Dr. Odo J. Struger, who invented the programmable logic controller, which makes possible modern factory automation, amusement park rides and lavish stage effects in Broadway productions, died on December 8 in Cleveland. He was 67.}}</ref><ref name=\"anzovin2\">Anzovin, p. 100, item # 2189. ''Programmable logic controller was invented by the Austrian-born American engineer Odo J. Struger in 1958-60 at the Allen-Bradley company in Milwaukee, WI, USA. A programmable logic controller, or PLC, is a simple electronic device that allows precise numerical control of machinery. It is widely used to control everything from washing machines to roller coaster to automated manufacturing equipment.''</ref> and is credited with inventing the PLC acronym.<ref name=\":1\" /><ref name=\":2\" /> Allen-Bradley (now a brand owned by [[Rockwell Automation]]) became a major PLC manufacturer in the United States during his tenure.<ref name=\"short2\">{{cite web|url=http://www.jimpinto.com/writings/automationhistory.html|title=A short history of Automation growth|access-date=2008-06-20}}</ref> Struger played a leadership role in developing [[IEC 61131-3]] PLC programming language standards.<ref name=\":1\" />\n\n=== Early methods of programming ===\nMany early PLCs were not capable of graphical representation of the logic, and so it was instead represented as a series of logic expressions in some kind of Boolean format, similar to [[Boolean algebra]]. As programming terminals evolved, it became more common for ladder logic to be used, because it was a familiar format used for electro-mechanical control panels. Newer formats, such as state logic and Function Block (which is similar to the way logic is depicted when using digital integrated logic circuits) exist, but they are still{{When|date=February 2020}} not as popular as ladder logic. A primary reason for this is that PLCs solve the logic in a predictable and repeating sequence, and ladder logic allows the person writing the logic to see any issues with the timing of the logic sequence more easily than would be possible in other formats.{{Fact|date=February 2020}}\n\nUp to the mid-1990s, PLCs were programmed using proprietary programming panels or special-purpose programming [[Computer terminal|terminals]], which often had dedicated function keys representing the various logical elements of PLC programs.<ref name=\"EERef162\" /> Some proprietary programming terminals displayed the elements of PLC programs as graphic symbols, but plain [[ASCII art|ASCII]] character representations of contacts, coils, and wires were common. Programs were stored on [[Cassette tape cartridge|cassette tape cartridges]]. Facilities for printing and documentation were minimal due to lack of memory capacity. The oldest PLCs used [[non-volatile]] [[magnetic core memory]].\n\n== Architecture ==\nRegular programmable logic controller consists of:\n\n* a processor unit (CPU) which interprets inputs, executes the control program stored in memory and sends output signals,\n* a power supply unit which converts AC voltage to DC,\n* a memory unit storing data from inputs and program to be executed by the processor,\n* an input and output interfaces, where the controller receives and sends data from/to external devices,\n* a communications interface to receive and transmit data on communication networks from/to remote PLCs.<ref name=\":4\">{{Harvnb|Bolton|2015|p=7}}</ref>\n\nPLCs require programming device which is used to develop and later download the created program into the memory of the controller.<ref name=\":4\" />\n\nModern PLCs generally contain a [[real-time operating system]], such as [[OS-9]] or [[VxWorks]].<ref name=\":5\" />\n\n===Mechanical design===\n[[File:Siemens_sps_logo_8_12-24_RCE-03.jpg|thumb|Compact PLC with 8 inputs and 4 outputs.]]\n[[File:PLC_AB_InstaladoV1.JPG|alt=Modular PLC with EtherNet/IP module, digital and analog I/O, with some slots being empty.|thumb|Modular PLC with [[EtherNet/IP]] module, discrete and analog I/O, with some slots being empty.]]\nThere are two types of mechanical design for PLC systems. A ''single box'', or a ''brick'' is a small programmable controller that fits all units and interfaces into one compact casing, although, typically, additional expansion modules for inputs and outputs are available. Second design type \u2013 a ''modular'' PLC \u2013 has a chassis (also called a ''rack'') that provides space for modules with different functions, such as power supply, processor, selection of I/O modules and communication interfaces \u2013 which all can be customized for the particular application.<ref>{{Harvnb|Bolton|2015|pp=12\u201313}}</ref> Several racks can be administered by a single processor, and may have thousands of inputs and outputs. Either a special high speed serial I/O link or comparable communication method is used so that racks can be distributed away from the processor, reducing the wiring costs for large plants. Options are also available to mount I/O points directly to the machine and utilize quick disconnecting cables to sensors and valves, saving time for wiring and replacing components.{{Citation needed|date=April 2020}}\n\n===Discrete (digital) and analog signals===\n{{Overly detailed|section|details=an excessive explanations of scaling of values|date=April 2020}}\n[[Digital signal|Discrete (digital) signals]] behave as binary switches, yielding simply an On or Off signal (1 or 0, True or False, respectively). Push buttons, [[limit switch]]es, and [[photoelectric sensor]]s are examples of devices providing a discrete signal. Discrete signals are sent using either [[voltage]] or [[current (electricity)|current]], where a specific range is designated as ''On'' and another as ''Off''. For example, a PLC might use 24 V DC I/O, with values above 22 V DC representing ''On'', values below 2VDC representing ''Off'', and intermediate values undefined. Initially, PLCs had only digital I/O.\n\nAnalog signals are like volume controls, with a range of values between zero and full-scale. These are typically interpreted as integer values (counts) by the PLC, with various ranges of accuracy depending on the device and the number of bits available to store the data. As PLCs typically use 16-bit signed binary processors, the integer values are limited between -32,768 and +32,767. Pressure, temperature, flow, and weight are often represented by analog signals. Analog signals can use [[voltage]] or [[current (electricity)|current]] with a magnitude proportional to the value of the process signal. For example, an analog 0 to 10&nbsp;V or [[4-20 mA]] input would be [[analog-to-digital converter|converted]] into an integer value of 0 to 32767.  The programming inside the PLC will use a SCL or scaling function to take this 0-32767 value and transpose it into the desired units of the process so the operator or program can read it.  Proper integration will also include filter times to reduce noise as well as high and low limits to report faults.\n\n[[Current loop|Current inputs]] are less sensitive to electrical noise (e.g. from welders or electric motor starts) than voltage inputs.  Distance from the device and the controller is also a concern as the maximum travelling distance of a good quality 0-10V signal is very short compared to the 4-20mA signal.  The 4-20mA signal can also report if the wire is disconnected along the path as it would return a 0mA signal and a fault can be reported.\n\n===Timers and counters===\n{{Overly detailed|section|details=an excessive explanation of types of timers|date=April 2020}}\nThe main function of a timer is to keep an output on for a specific length of time.  A good example of this is a garage light, where you want power to be cut off after 2 minutes so as to give someone time to go into the house. The three different types of timers that are commonly used are a Delay-OFF, a Delay-ON, and a Delay-ON-Retentive. A Delay-OFF timer activates immediately when turned on, and will start counting down from a programmed time before cutting off once the enabling input is off. A Delay-ON timer is activated by input and starts accumulating time, counts up to a programmed time before cutting off, and is cleared when the enabling input is turned off. A Delay-ON-Retentive timer is activated by input and starts accumulating time, retains the accumulated value even if the (ladder-logic) rung goes false, and can be reset only by a RESET command.  Visible details for the rest of the program to use could include:\n\n*EN - ENable signal, indicated the timer has been enabled and can start timing, or if completed keep the DoNe status on.\n*PRE - PREset time, requested time value to be run before the timer is DoNe.  Could be in a TIME format (t#1h35m12s) or in seconds format (3500 = 3.5s)\n*ACC - ACCumulated time, how long the timer has been timing.  Same number formats as the PREset value.\n*DN - DoNe signal, indicates the timer has elapsed the preset value\n*TT - Timer Timing signal, indicates the timer is actively timing.  This is not on once the timer is done\n\nCounters are primarily used for counting items such as cans going into a box on an assembly line. This is important because once something is filled to its max the item needs to be moved on so something else can be filled. Many companies use counters in PLC's to count boxes, count how many feet of something is covered, or to count how many pallets are on a truck.  There are three types of counters, Up counters, Down counters, and Up/Down counters. Up counters count up to the preset value, turn on the CTU (CounT Up output) when the preset value is reached, and are cleared upon receiving a reset.  Down counters count down from a preset value, turns on the CTD (CounT Down output) when 0 is reached, and are cleared upon reset. Up/Down counters count up on CU, count down on CD, turn on CTUD (CounT Up/Down output) when the preset value is reached, and cleared on reset.<ref>Yanik, P. (2017, April 11). Timers and Counters. Cullowhee, NC, United States of America.</ref>\n\n===Redundancy===\nSome special processes need to work permanently with minimum unwanted down time. Therefore, it is necessary to design a system which is fault-tolerant and capable of handling the process with faulty modules. In such cases to increase the system availability in the event of hardware component failure, redundant CPU or I/O modules with the same functionality can be added to hardware configuration for preventing total or partial process shutdown due to hardware failure.  Other redundancy scenarios  could be related to safety critical processes, for example large hydraulic presses could require that both PLCs turn on an output before the press can come down in case one output does not turn off properly.\n\n==Programming==\n[[File:Automate industriel WAGO pour un syst\u00e8me de monitoring en industrie pharmaceutique.jpg|thumb|Industrial controller for a monitoring system in the pharmaceutical industry]]\nProgrammable logic controllers are intended to be used by engineers without programming background. For this reason, graphical programming language called [[Ladder logic|Ladder Diagram]] (LD, LAD) was first developed which resembles the schematic diagram of a system built with electromechanical relays. It was adopted by many manufacturers and later standardized in the [[IEC 61131-3]] control systems programming standard. {{As of|2015|}}, it is still widely used, thanks to its simplicity.<ref name=\":6\">{{Harvnb|Bolton|2015|pp=16\u201318}}</ref>\n\n{{As of|2015|}}, the majority of PLC systems adhere to the [[IEC 61131-3]] standard that defines 2 textual programming languages: [[Structured text|Structured Text]] (ST; similar to [[Pascal (programming language)|Pascal]]) and [[Instruction list|Instruction List]] (IL); as well as 3 graphical languages: [[Ladder logic|Ladder Diagram]], [[Function block diagram|Function Block Diagram]] (FBD) and [[Sequential function chart|Sequential Function Chart]] (SFC).<ref name=\":6\" /><ref>Keller, William L Jr. ''Grafcet, A Functional Chart for Sequential Processes'', 14th Annual International Programmable Controllers Conference Proceedings, 1984, p. 71-96.</ref> [[Instruction list|Instruction List]] (IL) was deprecated in the third edition of the standard.<ref>{{Cite web|url=https://plcopen.org/status-iec-61131-3-standard|title=Status IEC 61131-3 standard|last=|first=|date=2018-07-19|website=PLCopen|language=en|url-status=live|archive-url=|archive-date=|access-date=2020-04-01}}</ref>\n\nModern PLCs can be programmed in a variety of ways, from the relay-derived ladder logic to programming languages such as specially adapted dialects of [[BASIC]] and [[C (programming language)|C]].{{Citation needed|date=July 2009}}\n\nWhile the fundamental concepts of PLC programming are common to all manufacturers, differences in I/O addressing, memory organization, and instruction sets mean that PLC programs are never perfectly interchangeable between different makers. Even within the same product line of a single manufacturer, different models may not be directly compatible.{{Citation needed|date=July 2009}}\n\nPLC programs are typically written in programming device which can take form of a desktop console, a special software on a [[personal computer]], or a handheld programming device.<ref name=\":7\">{{Harvnb|Bolton|2015|pp=19\u201320}}</ref> Then, the program is downloaded to the PLC directly or over a network. It is stored either in non-volatile [[flash memory]] or battery-backed-up [[RAM]]. In some programmable controllers, the program is transferred from a personal computer to the PLC through a programming board which writes the program into a removable chip, such as [[EPROM]].\n\nProgram written on personal computer can be easily copied and backed up on external storage. Manufacturers develop programming software for their controllers. In addition to being able to program PLCs in multiple languages, they provide common features like hardware diagnostics and maintenance, software debugging, and offline simulation.<ref name=\":7\" />\n\nThe program can be uploaded for backup and restoration purposes.{{Citation needed|date=July 2009}}\n\n===Simulation===\nIn order to properly understand the operation of a PLC, it is necessary to spend considerable time [[Computer programming|programming]], testing and [[debugging]] PLC programs. PLC systems are inherently expensive, and down-time is often very costly. In addition, if a PLC is programmed incorrectly it can result in lost productivity and dangerous conditions. PLC simulation software such as PLCLogix can save time in the design of automated control applications and can also increase the level of safety associated with equipment since many \"what if\" scenarios can be tried and tested before the system is activated.<ref>{{cite book|last1=Lin|first1=Sally|url=https://books.google.com/books?id=CHYlTBxqrM8C&pg=PA553|title=Advances in Computer Science, Environment, Ecoinformatics, and Education, Part III: International Conference, CSEE 2011, Wuhan, China, August 21-22, 2011. Proceedings|last2=Huang|first2=Xiong|date=9 August 2011|publisher=Springer Science & Business Media|isbn=9783642233449|pages=15|via=Google Books}}</ref>\n\n===Control example shown in ladder diagram===\nThis is a programming example in [[ladder logic|ladder diagram]] which shows the control system. A ladder diagram is a method of drawing control circuits which pre-dates PLCs. The ladder diagram resembles the schematic diagram of a system built with electromechanical relays.\n\nAs an example, say a facility needs to store water in a tank. The water is drawn from the tank by another system, as needed, and our example system must manage the water level in the tank by controlling the valve that refills the tank. Shown are:\n\n*Two inputs (from the low and high level switches) represented by contacts of the float switches\n*An output to the fill valve, labelled as the fill valve which it controls\n*An \"internal\" contact, representing the output signal to the fill valve which is created in the program.\n*A logical control scheme created by the interconnection of these items in software\n\nIn ladder diagram, the contact symbols represent the state of bits in processor memory, which corresponds to the state of physical inputs to the system. If a discrete input is energized, the memory bit is a 1, and a \"normally open\" contact controlled by that bit will pass a logic \"true\" signal on to the next element of the ladder. Therefore, the contacts in the PLC program that \"read\" or look at the physical switch contacts in this case must be \"opposite\" or open in order to return a TRUE for the closed physical switches. Internal status bits, corresponding to the state of discrete outputs, are also available to the program.\n\nIn the example, the physical state of the float switch contacts must be considered when choosing \"normally open\" or \"normally closed\" symbols in the ladder diagram. The PLC has two discrete inputs from [[float switch]]es (Low Level and High Level). Both float switches (normally closed) open their contacts when the water level in the tank is above the physical location of the switch.\n\nWhen the water level is below both switches, the float switch physical contacts are both closed, and a true (logic 1) value is passed to the Fill Valve output. Water begins to fill the tank. The internal \"Fill Valve\" contact latches the circuit so that even when the \"Low Level\" contact opens (as the water passes the lower switch), the fill valve remains on. Since the High Level is also normally closed, water continues to flow as the water level remains between the two switch levels. Once the water level rises enough so that the \"High Level\" switch is off (opened), the PLC will shut the inlet to stop the water from overflowing; this is an example of seal-in (latching) logic. The output is sealed in until a high level condition breaks the circuit. After that the fill valve remains off until the level drops so low that the Low Level switch is activated, and the process repeats again.\n<pre style=\"width: 95%;\">\n\n| (N.C. physical   (N.C. physical                             |\n|   Switch)          Switch)                                  |\n|   Low Level       High Level                Fill Valve      |\n|------[ ]------|------[ ]----------------------(OUT)---------|\n|               |                                             |\n|               |                                             |\n|               |                                             |\n|   Fill Valve  |                                             |\n|------[ ]------|                                             |\n|                                                             |\n|                                                             |\n</pre>\n\nA complete program may contain thousands of rungs, evaluated in sequence. Typically the PLC processor will alternately scan all its inputs and update outputs, then evaluate the ladder logic; input changes during a program scan will not be effective until the next I/O update. A complete program scan may take only a few milliseconds, much faster than changes in the controlled process.\n\nProgrammable controllers vary in their capabilities for a \"rung\" of a ladder diagram. Some only allow a single output bit. There are typically limits to the number of series contacts in line, and the number of branches that can be used. Each element of the rung is evaluated sequentially. If elements change their state during evaluation of a rung, hard-to-diagnose faults can be generated, although sometimes (as above) the technique is useful. Some implementations forced evaluation from left-to-right as displayed and did not allow reverse flow of a logic signal (in multi-branched rungs) to affect the output.\n\n==Functionality==\n[[Image:PLC Control Panel.png|thumbnail|350|Control panel with PLC (grey elements in the center). The unit consists of separate elements, from left to right; [[power supply]], controller, [[relay]] units for in- and output]]\n[[File:Control-panel-plc.jpg|thumb|Control panel with a PLC user interface for [[thermal oxidiser|thermal oxidizer]] regulation.]]\nThe main difference from most other computing devices is that PLCs are intended-for and therefore tolerant-of more severe conditions (such as dust, moisture, heat, cold), while offering extensive [[input/output]] (I/O) to connect the PLC to [[sensor]]s and [[actuator]]s. PLC input can include simple digital elements such as [[limit switch]]es, analog variables from process sensors (such as temperature and pressure), and more complex data such as that from positioning or [[machine vision]] systems.<ref>Harms, Toni M. & Kinner, Russell H. P.E., ''Enhancing PLC Performance with Vision Systems''. 18th Annual ESD/HMI International Programmable Controllers Conference Proceedings, 1989, p. 387-399.</ref> PLC output can include elements such as indicator lamps, sirens, [[electric motor]]s, [[pneumatic]] or [[hydraulic]] cylinders, magnetic [[relay]]s, [[solenoid]]s, or [[analog signal|analog]] outputs. The input/output arrangements may be built into a simple PLC, or the PLC may have external [[I/O module]]s attached to a fieldbus or computer network that plugs into the PLC.\n\nThe functionality of the PLC has evolved over the years to include sequential relay control, motion control, [[process control]], [[distributed control system]]s, and [[computer network|networking]]. The data handling, storage, processing power, and communication capabilities of some modern PLCs are approximately equivalent to [[desktop computer]]s. PLC-like programming combined with remote I/O hardware, allow a general-purpose desktop computer to overlap some PLCs in certain applications. Desktop computer controllers have not been generally accepted in heavy industry because the desktop computers run on less stable operating systems than PLCs, and because the desktop computer hardware is typically not designed to the same levels of tolerance to temperature, humidity, vibration, and longevity as the processors used in PLCs. Operating systems such as Windows do not lend themselves to deterministic logic execution, with the result that the controller may not always respond to changes of input status with the consistency in timing expected from PLCs. Desktop logic applications find use in less critical situations, such as laboratory automation and use in small facilities where the application is less demanding and critical.{{citation needed|date=November 2014}}\n\n===Basic functions===\n\nThe most basic function of a programmable controller is to emulate the functions of electro-mechanical relays. Discrete inputs are given a unique address, and a PLC instruction can test if the input state is on or off. Just as a series of relay contacts perform a logical AND function, not allowing current to pass unless all the contacts are closed, so a series of \"examine if on\" instructions will energize its output storage bit if all the input bits are on. Similarly, a parallel set of instructions will perform a logical OR. In an electro-mechanical relay wiring diagram, a group of contacts controlling one coil is called a \"rung\" of a \"ladder diagram \", and this concept is also used to describe PLC logic.  Some models of PLC limit the number of series and parallel instructions in one \"rung\" of logic. The output of each rung sets or clears a storage bit, which may be associated with a physical output address or which may be an \"internal coil\" with no physical connection. Such internal coils can be used, for example, as a common element in multiple separate rungs.  Unlike physical relays, there is usually no limit to the number of times an input, output or internal coil can be referenced in a PLC program.\n\nSome PLCs enforce a strict left-to-right, top-to-bottom execution order for evaluating the rung logic.  This is different from electro-mechanical relay contacts, which in a sufficiently complex circuit may either pass current left-to-right or right-to-left, depending on the configuration of surrounding contacts.  The elimination of these \"sneak paths\" is either a bug or a feature, depending on programming style.\n\nMore advanced instructions of the PLC may be implemented as functional blocks, which carry out some operation when enabled by a logical input and which produce outputs to signal, for example, completion or errors, while manipulating variable internally that may not correspond to discrete logic.\n\n=== Communication ===\nPLCs use built-in ports, such as [[USB]], [[Ethernet]], [[RS-232]], [[RS-485]], or [[RS-422]] to communicate with external devices (sensors, actuators) and systems (programming software, [[SCADA]], [[User interface|HMI]]). Communication is carried over various industrial network protocols, like [[Modbus]], or [[EtherNet/IP]]. Many of these protocols are vendor specific.\n\nPLCs used in larger I/O systems may have [[peer-to-peer]] (P2P) communication between processors. This allows separate parts of a complex process to have individual control while allowing the subsystems to co-ordinate over the communication link. These communication links are also often used for [[User interface|HMI]] devices such as keypads or [[Personal computer|PC]]-type workstations.\n\nFormerly, some manufacturers offered dedicated communication modules as an add-on function where the processor had no network connection built-in.\n\n===User interface===\n{{See also|User interface|List of human-computer interaction topics}}\nPLCs may need to interact with people for the purpose of configuration, alarm reporting, or everyday control. A [[SCADA#Human-machine interface|human-machine interface]] (HMI) is employed for this purpose. HMIs are also referred to as man-machine interfaces (MMIs) and graphical user interfaces (GUIs). A simple system may use buttons and lights to interact with the user. Text displays are available as well as graphical touch screens. More complex systems use programming and monitoring software installed on a computer, with the PLC connected via a communication interface.\n\n==Process of a scan cycle==\n\nThere are 5 main steps in a scan cycle:\n\n# Reading inputs\n# Executing the program\n# Processing communication requests\n# Executing CPU diagnostics\n# Writing outputs\n\nA PLC program generally loops i.e. executes repeatedly, as long as the controlled system is running. At the start of each execution loop, the status of all physical inputs are copied to an area of memory, sometimes called the \"I/O Image Table\", which is accessible to the processor. The program then runs from its first instruction rung down to the last rung. It takes some time for the processor of the PLC to evaluate all the rungs and update the I/O image table with the status of outputs.<ref>Maher, Michael J. ''Real-Time Control and Communications''. 18th Annual ESD/SMI International Programmable Controllers Conference Proceedings, 1989, p. 431-436.</ref> Scan times of a few milliseconds may be encountered for small programs and fast processors, but for older processors and very large programs much longer scan times (on the order of 100 ms) may be encountered. Excessively long scan times may mean the response of the PLC to changing inputs or process conditions is too slow to be useful.\n\nAs PLCs became more advanced, methods were developed to change the sequence of ladder execution, and subroutines were implemented.<ref>Kinner, Russell H., P.E. ''Designing Programmable Controller Application Programs Using More than One Designer''. 14th Annual International Programmable Controllers Conference Proceedings, 1985, p. 97-110.</ref> This enhanced programming could be used to save scan time for high-speed processes; for example, parts of the program used only for setting up the machine could be segregated from those parts required to operate at higher speed. Newer PLCs now have the option to run the logic program synchronously with the IO scanning. This means that IO is updated in the background and the logic reads and writes values as required during the logic scanning.\n\nSpecial-purpose I/O modules may be used where the scan time of the PLC is too long to allow predictable performance. Precision timing modules, or counter modules for use with [[rotary encoder|shaft encoder]]s, are used where the scan time would be too long to reliably count pulses or detect the sense of rotation of an encoder. This allows even a relatively slow PLC to still interpret the counted values to control a machine, as the accumulation of pulses is done by a dedicated module that is unaffected by the speed of program execution on the PLC.\n\n==Security==\nPrior to the discovery of the [[Stuxnet]] [[computer worm]] in June 2010, security of PLCs received little attention. Modern PLCs generally contain a real-time operating systems, which can be vulnerable to exploits in similar way as desktop operating systems, like [[Microsoft Windows]]. PLCs can also be attacked by gaining control of a computer they communicate with.<ref name=\":5\">{{cite web |url=http://www.tofinosecurity.com/blog/plc-security-risk-controller-operating-systems |title=PLC Security Risk: Controller Operating Systems - Tofino Industrial Security Solution|website=www.tofinosecurity.com  |date=May 2011 |author=Byres}}</ref> {{As of|2011||since=y}}, this concerns grow as networking is becoming more commonplace in the PLC environment connecting the previously separate plant floor networks and office networks.<ref>{{Harvnb|Bolton|2015|p=15}}</ref>\n\n== Safety PLC ==\nIn recent years \"safety\" PLCs have started to become popular, either as standalone models or as functionality and safety-rated hardware added to existing controller architectures ([[Allen-Bradley]] Guardlogix, [[Siemens]] F-series etc.). These differ from conventional PLC types as being suitable for use in safety-critical applications for which PLCs have traditionally been supplemented with hard-wired [[Safety relay|safety relays]]. For example, a safety PLC might be used to control access to a robot cell with [[Trapped key interlocking|trapped-key access]], or perhaps to manage the shutdown response to an emergency stop on a conveyor production line. Such PLCs typically have a restricted regular instruction set augmented with safety-specific instructions designed to interface with emergency stops, light screens, and so forth. The flexibility that such systems offer has resulted in rapid growth of demand for these controllers.\n\n==PLC compared with other control systems==\n[[File:BMA Automation Allen Bradley PLC 3.JPG|thumb|200px|right|PLC installed in a control panel]]\n[[File:Control-panel.jpg|thumb|Control center with a PLC for a [[Regenerative thermal oxidiser|RTO]].]]\nPLCs are well adapted to a range of [[automation]] tasks. These are typically industrial processes in manufacturing where the cost of developing and maintaining the automation system is high relative to the total cost of the automation, and where changes to the system would be expected during its operational life. PLCs contain input and output devices compatible with industrial pilot devices and controls; little electrical design is required, and the design problem centers on expressing the desired sequence of operations. PLC applications are typically highly customized systems, so the cost of a packaged PLC is low compared to the cost of a specific custom-built controller design. On the other hand, in the case of mass-produced goods, customized control systems are economical. This is due to the lower cost of the components, which can be optimally chosen instead of a \"generic\" solution, and where the non-recurring engineering charges are spread over thousands or millions of units.{{Citation needed|date=February 2020}}\n\nProgrammable controllers are widely used in motion, positioning, or torque control. Some manufacturers produce motion control units to be integrated with PLC so that [[G-code]] (involving a [[CNC]] machine) can be used to instruct machine movements.<ref>{{Cite journal|last=Vosough and Vosough|date=November 2011|title=PLC and its Applications|url=http://www.ijmse.org/Volume2/Issue8/paper9.pdf|journal=International Journal of Multidisciplinary Sciences and Engineering|volume=2|pages=}}</ref>{{Citation needed|date=July 2009}}\n\n=== Cam timers ===\nFor high volume or very simple fixed automation tasks, different techniques are used. For example, a cheap consumer [[dishwasher]] would be controlled by an electromechanical [[cam timer]] costing only a few dollars in production quantities.{{Citation needed|date=February 2020}}\n\n=== Microcontrollers ===\nA [[microcontroller]]-based design would be appropriate where hundreds or thousands of units will be produced and so the development cost (design of power supplies, input/output hardware, and necessary testing and certification) can be spread over many sales, and where the end-user would not need to alter the control. Automotive applications are an example; millions of units are built each year, and very few end-users alter the programming of these controllers. However, some specialty vehicles such as transit buses economically use PLCs instead of custom-designed controls, because the volumes are low and the development cost would be uneconomical.<ref name=\"McMillan992\">Gregory K. McMillan, Douglas M. Considine (ed), ''Process/Industrial Instruments and Controls Handbook Fifth Edition'', McGraw-Hill, 1999 {{ISBN|0-07-012582-1}} Section 3 ''Controllers''</ref>\n\n=== Single-board computers ===\nVery complex process control, such as used in the chemical industry, may require algorithms and performance beyond the capability of even high-performance PLCs. Very high-speed or precision controls may also require customized solutions; for example, aircraft flight controls. [[Single-board computer|Single-board computers]] using semi-customized or fully proprietary hardware may be chosen for very demanding control applications where the high development and maintenance cost can be supported. \"Soft PLCs\" running on desktop-type computers can interface with industrial I/O hardware while executing programs within a version of commercial operating systems adapted for process control needs.<ref name=\"McMillan992\" />\n\nThe rising popularity of [[Single-board computer|single board computers]] has also had an influence on the development of PLCs. Traditional PLCs are generally [[Closed platform|closed platforms]], but some newer PLCs (e.g. ctrlX from [[Bosch Rexroth]], PFC200 from [[WAGO Kontakttechnik|Wago]], PLCnext from [[Phoenix Contact]], and Revolution Pi from Kunbus) provide the features of traditional PLCs on an [[open platform]].\n\n=== PID Controllers ===\nPLCs may include logic for single-variable feedback analog control loop, a [[PID controller]]. A PID loop could be used to control the temperature of a manufacturing process, for example. Historically PLCs were usually configured with only a few analog control loops; where processes required hundreds or thousands of loops, a [[distributed control system]] (DCS) would instead be used. As PLCs have become more powerful, the boundary between DCS and PLC applications has been blurred.{{Citation needed|date=July 2009}}\n\n===Programmable logic relays (PLR)===\n{{Original research section|date=March 2020}}In more recent years,{{When|date=February 2020}} small products called programmable logic relays (PLRs) or smart relays, have become more common and accepted. These are similar to PLCs and are used in light industry where only a few points of I/O are needed, and low cost is desired. These small devices are typically made in a common physical size and shape by several manufacturers, and branded by the makers of larger PLCs to fill out their low end product range. Most of these have 8 to 12 discrete inputs, 4 to 8 discrete outputs, and up to 2 analog inputs. Most such devices include a tiny postage-stamp-sized LCD screen for viewing simplified ladder logic (only a very small portion of the program being visible at a given time) and status of I/O points, and typically these screens are accompanied by a 4-way rocker push-button plus four more separate push-buttons, similar to the key buttons on a VCR remote control, and used to navigate and edit the logic. Most have a small plug for connecting via RS-232 or RS-485 to a personal computer so that programmers can use simple Windows applications for programming instead of being forced to use the tiny LCD and push-button set for this purpose. Unlike regular PLCs that are usually modular and greatly expandable, the PLRs are usually not modular or expandable, but their price can be two [[orders of magnitude]] less than a PLC, and they still offer robust design and deterministic execution of the logics.\n\nA variant of PLCs, used in remote locations is the [[remote terminal unit]] or RTU. An RTU is typically a low power, ruggedised PLC whose key function is to manage the communications links between the site and the central control system (typically [[SCADA]]) or in some modern systems, \"The Cloud\". Unlike factory automation using high speed [[Ethernet]], communications links to remote sites are often radio based and are less reliable. To account for the reduced reliability, RTU will buffer messages or switch to alternate communications paths. When buffering messages, the RTU will timestamp each message so that a full history of site events can be reconstructed. RTUs, being PLCs, have a wide range of I/O and are fully programmable, typically with languages from the [[IEC 61131-3]] standard that is common to many PLCs, RTUs and DCSs. In remote locations, it is common to use an RTU as a gateway for a PLC, where the PLC is performing all site control and the RTU is managing communications, time stamping events and monitoring ancillary equipment. On sites with only a handful of I/O, the RTU may also be the site PLC and will perform both communications and control functions.\n\n==See also==\n* [[Industrial control systems]]\n* [[Industrial safety systems]]\n* [[PLC technician]]\n* [[1-bit architecture]]\n\n==References==\n{{reflist}}\n\n=== Bibliography ===\n{{Refbegin|}}\n* {{Cite book|last=Bolton|first=William|url=https://books.google.pl/books?id=sDqnBQAAQBAJ|title=Programmable Logic Controllers|publisher=Newnes|year=2015|isbn=9780081003534|edition=6th, revised|location=|ref=harv|via=Google Books}}\n\n{{Refend}}\n\n==Further reading==\n* Daniel Kandray, ''Programmable Automation Technologies'', Industrial Press, 2010 {{ISBN|978-0-8311-3346-7}}, Chapter 8 ''Introduction to Programmable Logic Controllers''\n* Tom Mejer Antonsen, 2018 \"PLC Controls with Structured Text (ST)\", {{ISBN|978-87-4300-241-3}},  {{ISBN|978-87-4300-242-0}}\n* {{cite book |title=The Programmable Logic Controller: its prehistory, emergence and application |author-first=Mark John |author-last=Walker |date=2012-09-08 |type=PhD thesis |location=Department of Communication and Systems Faculty of Mathematics, Computing and Technology |publisher=[[The Open University]] |url=http://oro.open.ac.uk/54687/1/594090.pdf |access-date=2018-06-20 |url-status=live |archive-url=https://web.archive.org/web/20180620115412/http://oro.open.ac.uk/54687/1/594090.pdf |archive-date=2018-06-20}}\n\n== External links ==\n* [http://plccompare.com/embedded-plc-guide/ A simple guide to Embedded PLCs]\n\n{{Commons category|Programmable logic controller}}\n{{Wikiversity|Programmable logic controller (basics)}}\n\n{{DEFAULTSORT:Programmable Logic Controller}}\n[[Category:Industrial automation]]\n[[Category:Industrial computing]]\n[[Category:Programmable logic controllers]]\n[[Category:Wikipedia articles with ASCII art]]\n", "name_user": "VRomanov89", "label": "unsafe", "comment": "(\u2192\u200eExternal links:Added an external ressource that outlines PLCs as well as PLC programming in great detail.)", "url_page": "//en.wikipedia.org/wiki/Programmable_logic_controller"}
{"title_page": "Konjic Hydro Power Plant", "text_new": "{{Infobox power station\n| name = Konjic Hydro Power Plant\n| image = \n| image_caption = \n| coordinates = {{Coord|00|00|00|N|00|00|00|E|type:landmark|display=inline,title}}\n| country = \n| location = [[Konjic]]\n| cost = \n| owner = \n| operator = \n| employees = \n| status = Cancelled\n| th_fuel_primary = [[Hydropower]]\n| th_combined_cycle = \n| ps_units_operational = \n| ps_units_manu_model = \n| ps_electrical_capacity = 122 [[Watt#Megawatt|MW]]\n| ps_electrical_cap_fac = \n| ps_annual_generation = \n| construction_began = \n| commissioned = \n| decommissioned = \n}}\n\nThe '''Konjic Hydro Power Plant''' was proposed [[hydroelectric dam|hydroelectric power plant (HPP)]] on the [[Neretva]] river near [[Konjic]], [[Bosnia and Herzegovina]], and was supposed to be one of the largest HPPs in the country, with predesigned capacity of 122 [[Megawatt|MW]],<ref>[http://www.ebrdrenewables.com/sites/renew/Lists/Projects/DispForm.aspx?ID=319&Source=http%3A%2F%2Fwww%2Eebrdrenewables%2Ecom%2Fsites%2Frenew%2Fcountries%2FBosniaHerzegovina%2Fdefault%2Easpx Konjic Hydro Power Plant]</ref> but project was cancelled due to organized protests by various NGO's from Bosnia and Herzegovina and abroad.<ref>[http://www.zeleni-neretva.ba \"Zeleni-Neretva\" Konjic]</ref>\n\n==References==\n{{Reflist}}\n\n{{stack|{{Portal|Bosnia and Herzegovina|Water|Renewable energy}}}}\n{{coord missing|Bosnia and Herzegovina}}\n\n\n\n{{BosniaHerzegovina-struct-stub}}\n{{Hydroelectric-power-plant-stub}}\n[[Category:Cancelled hydroelectric power stations]]\n[[Category:Hydroelectric power stations in Bosnia and Herzegovina]]\n", "text_old": "{{Infobox power station\n| name = Konjic Hydro Power Plant\n| image = \n| image_caption = \n| coordinates = {{Coord|00|00|00|N|00|00|00|E|type:landmark|display=inline,title}}\n| country = \n| location = [[Konjic]]\n| cost = \n| owner = \n| operator = \n| employees = \n| status = Cancelled\n| th_fuel_primary = [[Hydropower]]\n| th_combined_cycle = \n| ps_units_operational = \n| ps_units_manu_model = \n| ps_electrical_capacity = 122 [[Watt#Megawatt|MW]]\n| ps_electrical_cap_fac = \n| ps_annual_generation = \n| construction_began = \n| commissioned = \n| decommissioned = \n}}\n\nThe '''Konjic Hydro Power Plant''' was proposed [[hydroelectric dam|hydroelectric power plant (HPP)]] on the [[Neretva]] river near [[Konjic]], [[Bosnia and Herzegovina]], and was supposed to be one of the largest HPPs in the country, with predesigned capacity of 122 [[Megawatt|MW]],<ref>[http://www.ebrdrenewables.com/sites/renew/Lists/Projects/DispForm.aspx?ID=319&Source=http%3A%2F%2Fwww%2Eebrdrenewables%2Ecom%2Fsites%2Frenew%2Fcountries%2FBosniaHerzegovina%2Fdefault%2Easpx Konjic Hydro Power Plant]</ref> but project was cancelled due to organized protests by various NGO's from Bosnia and Herzegovina and abroad.<ref>[http://www.zeleni-neretva.ba \"Zeleni-Neretva\" Konjic]</ref>\n\n==References==\n{{Reflist}}\n\n{{stack|{{Portal|Bosnia and Herzegovina|Water|Renewable energy}}}}\n{{coord missing|Bosnia and Herzegovina}}\n\n\n\n{{BosniaHerzegovina-struct-stub}}\n{{Hydroelectric-power-plant-stub}}\n[[Category:Cancelled hydroelectric power stations]]\n[[Category:Cancelled dams]]\n", "name_user": "Macquaria", "label": "safe", "comment": "Category reorganization", "url_page": "//en.wikipedia.org/wiki/Konjic_Hydro_Power_Plant"}
