{"title_page": "Nick Pope (footballer)", "text_new": "{{Use British English|date=November 2013}}\n{{Use dmy dates|date=November 2019}}\n{{Infobox football biography\n| name = Nick Pope\n| image = Nick Pope 23-04-2016 1.jpg\n| image_size = 200\n| caption = Pope playing for [[Charlton Athletic F.C.|Charlton Athletic]] in 2016\n| fullname = Nicholas David Pope<ref>{{cite web |url=https://www.premierleague.com/news/612828 |title=Updated squads for 2017/18 Premier League confirmed |publisher=Premier League |date=2 February 2018 |accessdate=10 February 2018}}</ref>\n| birth_date = {{birth date and age|1992|4|19|df=y}}<ref>{{cite web |url=https://www.11v11.com/players/nick-pope-238976/ |title=Nick Pope |website=11v11.com |publisher=AFS Enterprises |accessdate=30 March 2020}}</ref>\n| birth_place = [[Soham]], England\n| height = {{convert|1.97|m|order=flip}}<ref>{{cite web |url=https://www.premierleague.com/players/10079/Nick-Pope/overview |title=Nick Pope: Overview |publisher=Premier League |accessdate=30 March 2020}}</ref>\n| position = [[Goalkeeper (association football)|Goalkeeper]]<ref>{{Hugman|24977|accessdate=30 March 2020}}</ref>\n| currentclub = [[Burnley F.C.|Burnley]]\n| clubnumber = 1\n| youthyears1 = {{0|0000}}\u20132008\n| youthclubs1 = [[Ipswich Town F.C.|Ipswich Town]]\n| years1 = 2008\u20132011\n| clubs1 = [[Bury Town F.C.|Bury Town]]\n| caps1 = \n| goals1 = \n| years2 = 2011\u20132016\n| clubs2 = [[Charlton Athletic F.C.|Charlton Athletic]]\n| caps2 = 33\n| goals2 = 0\n| years3 = 2011\n| clubs3 = \u2192 [[Harrow Borough F.C.|Harrow Borough]] (loan)\n| caps3 = 15\n| goals3 = 0\n| years4 = 2011\u20132012\n| clubs4 = \u2192 [[Welling United F.C.|Welling United]] (loan)\n| caps4 = 2\n| goals4 = 0\n| years5 = 2012\n| clubs5 = \u2192 [[Welling United F.C.|Welling United]] (loan)\n| caps5 = 2\n| goals5 = 0\n| years6 = 2013\n| clubs6 = \u2192 [[Cambridge United F.C.|Cambridge United]] (loan)\n| caps6 = 9\n| goals6 = 0\n| years7 = 2013\n| clubs7 = \u2192 [[Aldershot Town F.C.|Aldershot Town]] (loan)\n| caps7 = 5\n| goals7 = 0\n| years8 = 2013\n| clubs8 = \u2192 [[York City F.C.|York City]] (loan)\n| caps8 = 2\n| goals8 = 0\n| years9 = 2014\n| clubs9 = \u2192 [[York City F.C.|York City]] (loan)\n| caps9 = 20\n| goals9 = 0\n| years10 = 2015\n| clubs10 = \u2192 [[Bury F.C.|Bury]] (loan)\n| caps10 = 22\n| goals10 = 0\n| years11 = 2016\u2013\n| clubs11 = [[Burnley F.C.|Burnley]]\n| caps11 = 64\n| goals11 = 0\n| nationalyears1 = 2018\u2013\n| nationalteam1 = [[England national football team|England]]\n| nationalcaps1 = 2\n| nationalgoals1 = 0\n| club-update = 09:43, 8 March 2020 (UTC)\n| nationalteam-update = 19:03, 17 November 2019 (UTC)\n}}\n'''Nicholas David Pope''' (born 19 April 1992) is an English professional [[Association football|footballer]] who plays as a [[Goalkeeper (association football)|goalkeeper]] for {{English football updater|Burnley}} club [[Burnley F.C.|Burnley]] and the [[England national football team|England national team]].\n\nPope started his career in [[Ipswich Town F.C.|Ipswich Town]]'s youth teams and after being released aged 16, he joined [[Bury Town F.C.|Bury Town]]. He signed for [[EFL League One|League One]] club [[Charlton Athletic F.C.|Charlton Athletic]] in May 2011, before having [[Loan (sports)|loan]] spells with [[Harrow Borough F.C.|Harrow Borough]], [[Welling United F.C.|Welling United]], [[Cambridge United F.C.|Cambridge United]], [[Aldershot Town F.C.|Aldershot Town]], [[York City F.C.|York City]], and [[Bury F.C.|Bury]]. Pope joined Burnley of the Premier League in July 2016.\n\n==Club career==\n===Early career===\nBorn in [[Soham]], Cambridgeshire,<ref name=\"Charlton keeper Nick Pope joins Cambridge United\">{{cite news |url=https://www.bbc.co.uk/sport/football/21698251 |title=Charlton keeper Nick Pope joins Cambridge United |publisher=BBC Sport |date=7 March 2013 |accessdate=16 July 2016}}</ref> Pope attended [[King's Ely|King's School]] in nearby [[Ely, Cambridgeshire|Ely]].<ref name=\"'Never give up on your dream' \u2013 ex Ipswich Town youngster Nick Pope ready for the Championship with Charlton Athletic\">{{cite news |url=http://www.greenun24.co.uk/ipswich-town/never_give_up_on_your_dream_ex_ipswich_town_youngster_nick_pope_ready_for_the_championship_with_charlton_athletic_1_1413798 |title='Never give up on your dream' \u2013 ex Ipswich Town youngster Nick Pope ready for the Championship with Charlton Athletic |first=Stuart |last=Watson |website=Green 'Un |publisher=Archant Community Media |date=18 June 2012 |accessdate=26 June 2018}}</ref> An [[Ipswich Town F.C.|Ipswich Town]] season ticket holder, he began his career at the club's youth set-up and remained with Ipswich until being released aged 16.<ref name=\"'Never give up on your dream' \u2013 ex Ipswich Town youngster Nick Pope ready for the Championship with Charlton Athletic\"/> Following his release by Ipswich,<ref name=\"'Never give up on your dream' \u2013 ex Ipswich Town youngster Nick Pope ready for the Championship with Charlton Athletic\"/> he joined [[Non-League football|non-League]] club [[Bury Town F.C.|Bury Town]] in 2008.<ref>{{cite web |url=https://www.kingsely.org/professional-footballer-and-old-elean-returns-to-inspire-junior-pupils/ |title=Professional footballer and Old Elean returns to inspire Junior pupils |publisher=King's Ely |date=21 May 2013 |accessdate=26 June 2018}}</ref> Having challenged and temporarily replaced Marcus Garnham, Pope proved he was capable at that level when he wore the number one shirt for Bury Town for a number of first-team matches after initially debuting for the team at just 16 years of age.{{citation needed|date=November 2013}} Manager Richard Wilkins described Pope as \"the most naturally-talented player to progress through the ranks at the [[West Suffolk College|West Suffolk Sports Academy]] and Bury Town\" and said \"I honestly think Nick Pope can go all the way to the top.\"<ref>{{cite news |url=http://www.elystandard.co.uk/sport/football/ely-teen-signs-for-charlton-athletic-1-917108 |title=Ely teen signs for Charlton Athletic |newspaper=Ely Standard |date=10 June 2011 |accessdate=26 June 2018}}</ref> Pope was also a member of the [[West Suffolk College]] squad and has represented an England Colleges squad.{{citation needed|date=September 2016}}\n\n===Charlton Athletic===\nOn 24 May 2011, [[EFL League One|League One]] club [[Charlton Athletic F.C.|Charlton Athletic]] signed Pope after he was spotted by scouts during a 2\u20131 win over [[Billericay Town F.C.|Billericay Town]].<ref>{{cite news |url=http://www.burytownfc.co.uk/index.php?option=com_content&view=article&id=11:nick-pope-signs-for-charlton-athletic&catid=2:first-team-news |title=Nick Pope signs for Charlton Athletic |first=Trevor |last=Collins |publisher=Bury Town F.C. |date=24 May 2011 |accessdate=22 November 2013 |archive-url=https://web.archive.org/web/20160305031829/http://burytownfc.co.uk/index.php?catid=2:first-team-news&id=11:nick-pope-signs-for-charlton-athletic&option=com_content&view=article |archivedate=5 March 2016}}</ref><ref name=\"Keeper Nick Pope's Valley move is better by degrees\">{{cite news |url=http://www.cambridge-news.co.uk/Sport/Football/Keeper-Nick-Popes-Valley-move-is-better-by-degrees-08062011.htm |title=Keeper Nick Pope's Valley move is better by degrees |first=Aaron |last=Mason |newspaper=Cambridge News |date=9 June 2011 |archiveurl=https://web.archive.org/web/20131202231421/http://www.cambridge-news.co.uk/Sport/Football/Keeper-Nick-Popes-Valley-move-is-better-by-degrees-08062011.htm |archivedate=2 December 2013}}</ref> He was then invited to a trial at Charlton.<ref name=\"Keeper Nick Pope's Valley move is better by degrees\"/> After impressing staff during a trial, he was signed on a two-year contract after the two clubs agreed a compensation package, which included Charlton taking on the [[Suffolk]] outfit in a pre-season [[Exhibition game#Association football|friendly]] ahead of the [[2012\u201313 Charlton Athletic F.C. season|2012\u201313 season]].{{citation needed|date=November 2013}} Charlton also paid for Pope to take a degree in [[sports science]] at the [[University of Roehampton]] alongside other courses which he had planned to take at the [[University of Nottingham]] before being signed by Charlton.<ref name=\"Keeper Nick Pope's Valley move is better by degrees\"/> On 7 February 2012, Pope signed a new two-year contract with Charlton.<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/16924885 |title=Charlton Athletic goalkeeper Nick Pope signs new deal |publisher=BBC Sport |date=7 February 2012 |accessdate=16 July 2016}}</ref> He made his Charlton and professional debut on 4 May 2013, in the last match of the 2012\u201313 season, as a 71st minute [[Substitute (association football)|substitute]] for [[David Button]] in a 4\u20131 home win for Charlton against already [[Promotion and relegation|relegated]] [[Bristol City F.C.|Bristol City]] in the [[EFL Championship|Championship]].<ref name=sb1213/><ref>{{cite news |url=https://www.bbc.co.uk/sport/football/22320513 |title=Charlton 4\u20131 Bristol City |publisher=BBC Sport |date=4 May 2013 |accessdate=16 July 2016}}</ref>\n\nPope signed a new three-year contract with Charlton in September 2013, and commented that \"It's a big club so to have a long-term future secure, for me, as a player developing, it's something you look for\".<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/24240737 |title=Nick Pope: Charlton Athletic goalkeeper signs new deal |publisher=BBC Sport |date=25 September 2013 |accessdate=16 July 2016}}</ref>\n\nOn 5 June 2014, Pope signed a new four-year contract, securing his future to Charlton until June 2018.<ref name=\"Charlton Athletic\">{{cite web |url=http://www.cafc.co.uk/news/article/20140605-nick-pope-contract-extension-1611918.aspx |title=Nick Pope commits to Charlton until 2018 |first=Iain |last=Liddle |publisher=Charlton Athletic F.C. |date=5 June 2014 |archiveurl=https://web.archive.org/web/20160809015159/http://www.cafc.co.uk/news/article/20140605-nick-pope-contract-extension-1611918.aspx |archivedate=9 August 2016}}</ref>\n\n====Loan spells====\n[[File:Nick Pope 26-04-2014 1.jpg|thumb|upright|Pope playing for [[York City F.C.|York City]] in 2014]]\n\nIn August 2011, Pope joined [[Isthmian League]] Premier Division club [[Harrow Borough F.C.|Harrow Borough]] on a [[Loan (sports)|loan]] deal lasting until 17 September 2011.<ref>{{cite web |url=http://www.cafc.co.uk/page/NewsDetail/0,,10267~2417528,00.html |title=Pope heads to Harrow |first=Matt |last=Wright |publisher=Charlton Athletic F.C. |date=24 August 2011 |archiveurl=https://web.archive.org/web/20120612091440/http://www.cafc.co.uk/page/NewsDetail/0,,10267~2417528,00.html |archivedate=12 June 2012}}</ref> Whilst there Pope kept three clean sheets and saved two penalty kicks in 19 appearances.<ref name=\"Player Info\"/> Pope was then meant to join [[Conference Premier]] club [[Kettering Town F.C.|Kettering Town]] in December 2011, but the deal could not be concluded due to Kettering being placed under a transfer embargo.<ref name=\"Pope pays visit to Welling\">{{cite news |url=http://www.kentsportsnews.com/pope-pays-visit-to-welling-22-12-2011/ |title=Pope pays visit to Welling |first=Steve |last=Wolfe |publisher=Kent Sports News |date=22 December 2011 |accessdate=5 May 2013}}</ref> As a result, he joined [[Conference South]] club [[Welling United F.C.|Welling United]] on 21 December 2011 on a 28-day loan instead.<ref name=\"Pope pays visit to Welling\"/> On 7 March 2013, Pope joined [[Cambridge United F.C.|Cambridge United]] in the Conference Premier on a one-month loan.<ref name=\"Charlton keeper Nick Pope joins Cambridge United\"/> Whilst at the club, he made nine appearances, keeping four [[Shutout#Association football|clean sheets]] in the process.<ref name=Soccerway/>\n\nOn 26 September 2013, Pope joined Conference Premier club [[Aldershot Town F.C.|Aldershot Town]] on a one-month loan.<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/24291336 |title=Aldershot Town sign Charlton goalkeeper Nick Pope on loan |publisher=BBC Sport |date=26 September 2013 |accessdate=16 July 2016}}</ref> He joined [[EFL League Two|League Two]] club [[York City F.C.|York City]] on 21 November 2013 on a one-month loan,<ref>{{cite web |url=http://www.yorkcityfootballclub.co.uk/news/article/nick-pope-in-on-loan-1188354.aspx |title=Nick Pope in on loan |publisher=York City F.C. |date=21 November 2013 |archiveurl=https://web.archive.org/web/20160701073030/http://www.yorkcityfootballclub.co.uk/news/article/nick-pope-in-on-loan-1188354.aspx |archivedate=1 July 2016}}</ref> but was recalled after only two matches by Charlton.<ref>{{cite news |url=http://www.skysports.com/football/news/12691/9046422/pope-recalled-by-addicks |title=Pope recalled by Addicks |publisher=Sky Sports |date=28 November 2013 |accessdate=16 July 2016}}</ref> On 16 January 2014, Pope rejoined York on loan for the rest of the [[2013\u201314 York City F.C. season|2013\u201314 season]],<ref>{{cite web |url=http://www.yorkcityfootballclub.co.uk/news/article/nick-pope-back-in-on-loan-1298261.aspx |title=Nick Pope back in on loan |publisher=York City F.C. |date=16 January 2014 |archiveurl=https://web.archive.org/web/20160701065312/http://www.yorkcityfootballclub.co.uk/news/article/nick-pope-back-in-on-loan-1298261.aspx |archivedate=1 July 2016}}</ref> keeping 16 clean sheets in 24 appearances.<ref name=\"Charlton Athletic\"/>\n\nOn 6 January 2015, Pope joined [[Bury F.C.|Bury]] on loan for the rest of the [[2014\u201315 Bury F.C. season|2014\u201315 season]].<ref>{{cite web |url=http://www.cafc.co.uk/news/article/marko-dmitrovic-signs-from-ujpest-nick-pope-signs-for-bury-on-loan-2185720.aspx |title=New goalkeeper signs, Pope departs on loan |first=Iain |last=Liddle |publisher=Charlton Athletic F.C. |date=6 January 2015 |archiveurl=https://web.archive.org/web/20170429220208/http://www.cafc.co.uk/news/article/marko-dmitrovic-signs-from-ujpest-nick-pope-signs-for-bury-on-loan-2185720.aspx |archivedate=29 April 2017}}</ref> He made his debut in a 1\u20131 home draw with [[Wycombe Wanderers F.C.|Wycombe Wanderers]] on 17 January 2015.<ref name=sb1415/> He made 22 appearances as Bury won promotion after finishing in third place in League Two.<ref>{{cite news |url=http://www.burytimes.co.uk/sport/12935982.Charlton_Athletic_goalkeeper_Nick_Pope_has_hope_of_possible_Bury_return/ |title=Charlton Athletic goalkeeper Nick Pope has hope of possible Bury return |first=Craig |last=Nelson |newspaper=Bury Times |date=7 May 2015 |accessdate=20 May 2015}}</ref>\n\n===Burnley===\nOn 19 July 2016, Pope joined newly promoted [[Premier League]] club [[Burnley F.C.|Burnley]] on a three-year contract for an undisclosed fee.<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/36835053 |title=Johann Berg Gudmundsson & Nick Pope: Burnley sign duo from Charlton |publisher=BBC Sport |date=19 July 2016 |accessdate=19 July 2016}}</ref> Pope made his Premier League debut on 10 September 2017, replacing the injured [[Tom Heaton]] in the first half of a 1\u20130 home win over [[Crystal Palace F.C.|Crystal Palace]].<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/41139096 |title=Burnley 1\u20130 Crystal Palace |first=Phil |last=Dawkes |publisher=BBC Sport |date=10 September 2017 |accessdate=10 September 2017}}</ref> He made his first Premier League start the following week, on 16 September 2017, in a 1\u20131 draw against [[Liverpool F.C.|Liverpool]] away from home.<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/41210051 |title=Liverpool 1\u20131 Burnley |first=Mike |last=Henson |publisher=BBC Sport |date=16 September 2017 |accessdate=18 September 2017}}</ref> On 9 October, Pope signed a new contract to keep him at Burnley until June 2020.<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/41558894 |title=Nick Pope: Burnley goalkeeper signs new three-year deal |publisher=BBC Sport |date=9 October 2017 |accessdate=11 December 2017}}</ref> He suffered a dislocated shoulder on 26 July 2018 after colliding with [[Sam Cosgrove]] during Burnley's 1\u20131 draw away to [[Aberdeen F.C.|Aberdeen]] in the [[2018\u201319 UEFA Champions League|UEFA Europa League]] second qualifying round first leg.<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/45000764 |title=Nick Pope: Burnley goalkeeper to see specialist over dislocated shoulder |publisher=BBC Sport |date=29 July 2018 |accessdate=30 July 2018}}</ref><ref>{{cite news |url=https://www.bbc.co.uk/sport/football/44938522 |title=Aberdeen 1\u20131 Burnley |first=Tom |last=English |publisher=BBC Sport |date=26 July 2018 |accessdate=30 July 2018}}</ref><ref>{{cite news |url=https://www.bbc.co.uk/sport/football/44975815 |title=Nick Pope: Burnley goalkeeper sustains 'serious' shoulder injury |publisher=BBC Sport |date=27 July 2018 |accessdate=30 July 2018}}</ref>\n\nIn May 2019 he signed a new contract with Burnley, initially running until 2023.<ref>{{cite web|url=https://www.bbc.co.uk/sport/football/48407011|title=Nick Pope: Burnley goalkeeper commits future to Premier League club|date=25 May 2019|publisher=BBC Sport}}</ref>\n\n==International career==\nPope was called up to the [[England national football team|England national team]] for the first time on 15 March 2018.<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/43344416 |title=England call-ups for uncapped quartet as Jack Wilshere earns recall |publisher=BBC Sport |date=15 March 2018 |accessdate=15 March 2018}}</ref> He was named in the 23-man England squad for the [[2018 FIFA World Cup]].<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/44138600 |title=England World Cup squad: Trent Alexander-Arnold in 23-man squad |publisher=BBC Sport |date=16 May 2018 |accessdate=16 May 2018}}</ref> Pope made his debut on 7 June 2018 as a 65th-minute substitute as England beat [[Costa Rica national football team|Costa Rica]] 2\u20130 in a pre-tournament friendly.<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/44246164 |title=England 2\u20130 Costa Rica |first=Phil |last=McNulty |publisher=BBC Sport |date=7 June 2018 |accessdate=7 June 2018}}</ref> Pope made his second international appearance in a 4\u20130 win against Kosovo for the final game in Euro Qualifying on 17 November 2019.<ref>{{cite news|url=https://www.bbc.co.uk/sport/football/50160458|title=Kosovo 0-4 England: Southgate's side conclude Euro 2020 qualifying campaign with win|date=17 November 2019|accessdate=20 November 2019|work=BBC Sport}}</ref>\n\n==Career statistics==\n===Club===\n{{updated|match played 7 March 2020}}\n\n{| class=wikitable style=text-align:center\n|+ Appearances and goals by club, season and competition\n|-\n!rowspan=2|Club\n!rowspan=2|Season\n!colspan=3|League\n!colspan=2|[[FA Cup]]\n!colspan=2|[[EFL Cup|League Cup]]\n!colspan=2|Other\n!colspan=2|Total\n|-\n!Division!!Apps!!Goals!!Apps!!Goals!!Apps!!Goals!!Apps!!Goals!!Apps!!Goals\n|-\n|rowspan=6|[[Charlton Athletic F.C.|Charlton Athletic]]\n|[[2011\u201312 Charlton Athletic F.C. season|2011\u201312]]<ref name=sb1112>{{soccerbase season|63387|2011|accessdate=16 September 2017}}</ref>\n|[[EFL League One|League One]]\n|0||0||0||0||colspan=2|\u2014||colspan=2|\u2014||0||0\n|-\n|[[2012\u201313 Charlton Athletic F.C. season|2012\u201313]]<ref name=sb1213>{{soccerbase season|63387|2012|accessdate=16 September 2017}}</ref>\n|[[EFL Championship|Championship]]\n|1||0||0||0||0||0||colspan=2|\u2014||1||0\n|-\n|[[2013\u201314 Charlton Athletic F.C. season|2013\u201314]]<ref name=sb1314>{{soccerbase season|63387|2013|accessdate=16 September 2017}}</ref>\n|Championship\n|0||0||0||0||0||0||colspan=2|\u2014||0||0\n|-\n|[[2014\u201315 Charlton Athletic F.C. season|2014\u201315]]<ref name=sb1415>{{soccerbase season|63387|2014|accessdate=16 September 2017}}</ref>\n|Championship\n|8||0||0||0||1||0||colspan=2|\u2014||9||0\n|-\n|[[2015\u201316 Charlton Athletic F.C. season|2015\u201316]]<ref name=sb1516>{{soccerbase season|63387|2015|accessdate=16 September 2017}}</ref>\n|Championship\n|24||0||1||0||3||0||colspan=2|\u2014||28||0\n|-\n!colspan=2|Total\n!33||0||1||0||4||0||colspan=2|\u2014||38||0\n|-\n|[[Harrow Borough F.C.|Harrow Borough]] (loan)\n|[[2011\u201312 Isthmian League#Premier Division|2011\u201312]]<ref name=\"Player Info\">{{cite web |url=http://www.pitchero.com/clubs/harrowborough/s/players-coaches-60083.html?archive_id=10701&player_id=674051 |title=Player info |publisher=Harrow Borough F.C. |via=Pitchero |archiveurl=https://archive.is/20130630040411/http://www.pitchero.com/clubs/harrowborough/s/players-coaches-60083.html?archive_id=10701&player_id=674051 |archivedate=30 June 2013}}</ref>\n|[[Isthmian League]] Premier Division\n|15||0||0||0||colspan=2|\u2014||4{{efn|One appearance in [[Isthmian League#League Cup|Isthmian League Cup]], three in [[FA Trophy]]}}||0||19||0\n|-\n|[[Welling United F.C.|Welling United]] (loan)\n|[[2011\u201312 Football Conference#Conference South|2011\u201312]]<ref name=\"Non-League Club Directory 2013\">{{cite book |editor1-first=Mike |editor1-last=Williams |editor2-first=Tony |editor2-last=Williams |title=Non-League Club Directory 2013 |year=2012 |publisher=Tony Williams Publications |location= |isbn=978-1-869833-77-0 |pages=334\u2013335}}</ref>\n|[[Conference South]]\n|4||0||colspan=2|\u2014||colspan=2|\u2014||colspan=2|\u2014||4||0\n|-\n|[[Cambridge United F.C.|Cambridge United]] (loan)\n|[[2012\u201313 Football Conference#Conference Premier|2012\u201313]]<ref name=Soccerway/>\n|[[Conference Premier]]\n|9||0||colspan=2|\u2014||colspan=2|\u2014||colspan=2|\u2014||9||0\n|-\n|[[Aldershot Town F.C.|Aldershot Town]] (loan)\n|[[2013\u201314 Football Conference#Conference Premier|2013\u201314]]<ref name=Soccerway>{{cite web |url=https://uk.soccerway.com/players/nick-pope/220636/ |title=N. Pope: Summary |website=Soccerway |publisher=Perform Group |accessdate=30 July 2018}}</ref>\n|Conference Premier\n|5||0||colspan=2|\u2014||colspan=2|\u2014||colspan=2|\u2014||5||0\n|-\n|[[York City F.C.|York City]] (loan)\n|[[2013\u201314 York City F.C. season|2013\u201314]]<ref name=sb1314/>\n|[[EFL League Two|League Two]]\n|22||0||colspan=2|\u2014||colspan=2|\u2014||2{{efn|Appearances in [[EFL League Two play-offs|League Two play-offs]]}}||0||24||0\n|-\n|[[Bury F.C.|Bury]] (loan)\n|[[2014\u201315 Bury F.C. season|2014\u201315]]<ref name=sb1415/>\n|League Two\n|22||0||colspan=2|\u2014||colspan=2|\u2014||colspan=2|\u2014||22||0\n|-\n|rowspan=5|[[Burnley F.C.|Burnley]]\n|[[2016\u201317 Burnley F.C. season|2016\u201317]]<ref name=sb1617>{{soccerbase season|63387|2016|accessdate=16 September 2017}}</ref>\n|[[Premier League]]\n|0||0||3||0||1||0||colspan=2|\u2014||4||0\n|-\n|[[2017\u201318 Burnley F.C. season|2017\u201318]]<ref name=sb1718>{{soccerbase season|63387|2017|accessdate=6 February 2019}}</ref>\n|Premier League\n|35||0||1||0||2||0||colspan=2|\u2014||38||0\n|-\n|[[2018\u201319 Burnley F.C. season|2018\u201319]]<ref name=sb1819>{{soccerbase season|63387|2018|accessdate=14 July 2019}}</ref>\n|Premier League\n|0||0||2||0||0||0||1{{efn|Appearance in [[UEFA Europa League]]}}||0||3||0\n|-\n|[[2019\u201320 Burnley F.C. season|2019\u201320]]<ref name=sb1920>{{soccerbase season|63387|2019|accessdate=17 November 2019}}</ref>\n|Premier League\n|29||0||0||0||0||0||colspan=2|\u2014||29||0\n|-\n!colspan=2|Total\n!64||0||6||0||3||0||1||0||74||0\n|-\n!colspan=3|Career total\n!174||0||7||0||7||0||7||0||195||0\n|}\n\n{{notelist}}\n\n===International===\n{{updated|match played 17 November 2019}}<ref>{{NFT player |id=71345 |name=Pope, Nick |accessdate=17 November 2019}}<br />{{cite news |url=https://www.bbc.co.uk/sport/football/50160458 |title=Kosovo 0\u20134 England |first=Phil |last=McNulty |website=BBC Sport |date=17 November 2019 |accessdate=17 November 2019}}</ref>\n\n{| class=wikitable style=text-align:center\n|+ Appearances and goals by national team and year\n|-\n!National team!!Year!!Apps!!Goals\n|-\n|rowspan=2|[[England national football team|England]]\n|2018||1||0\n|-\n|2019||1||0\n|-\n!colspan=2|Total||2||0\n|}\n\n==Honours==\n'''Bury'''\n*[[Football League Two]] third-place promotion: [[2014\u201315 Football League Two|2014\u201315]]<ref>{{cite book |editor-first=John |editor-last=Anderson |title=Sky Sports Football Yearbook 2015\u20132016 |year=2015 |publisher=Headline Publishing Group |location=London |isbn=978-1-4722-2416-3 |pages=98\u201399}}</ref>\n\n'''Individual'''\n*[[Burnley F.C.|Burnley]] Player of the Year: [[2017\u201318 Burnley F.C. season|2017\u201318]]<ref name=BurnleyPOTY>{{cite web |url=https://www.burnleyfootballclub.com/news/2018/may/double-delight-for-award-winner-pope--/ |title=Double delight for award winner Pope |publisher=Burnley F.C. |date=7 May 2018 |accessdate=16 May 2018}}</ref>\n*Burnley Players' Player of the Year: 2017\u201318<ref name=BurnleyPOTY/>\n\n==References==\n{{reflist}}\n\n==External links==\n{{commons category}}\n*[https://www.burnleyfootballclub.com/teams/first-team/goalkeeper/nick-pope/ Profile] at the Burnley F.C. website\n*[http://www.thefa.com/england/mens-seniors/squad/nick-pope Profile] at the Football Association website\n*{{Soccerbase}}\n\n{{Burnley F.C. squad}}\n{{England squad 2018 FIFA World Cup}}\n{{Burnley F.C. Player of the Year}}\n\n{{DEFAULTSORT:Pope, Nick}}\n[[Category:1992 births]]\n[[Category:Living people]]\n[[Category:People from Soham]]\n[[Category:Sportspeople from Cambridgeshire]]\n[[Category:English footballers]]\n[[Category:England international footballers]]\n[[Category:Association football goalkeepers]]\n[[Category:Ipswich Town F.C. players]]\n[[Category:Bury Town F.C. players]]\n[[Category:Charlton Athletic F.C. players]]\n[[Category:Harrow Borough F.C. players]]\n[[Category:Welling United F.C. players]]\n[[Category:Cambridge United F.C. players]]\n[[Category:Aldershot Town F.C. players]]\n[[Category:York City F.C. players]]\n[[Category:Bury F.C. players]]\n[[Category:Burnley F.C. players]]\n[[Category:Isthmian League players]]\n[[Category:National League (English football) players]]\n[[Category:English Football League players]]\n[[Category:Premier League players]]\n[[Category:2018 FIFA World Cup players]]\n[[Category:People educated at The King's School, Ely]]\n[[Category:Alumni of the University of Roehampton]]\n", "text_old": "{{Use British English|date=November 2013}}\n{{Use dmy dates|date=November 2019}}\n{{Infobox football biography\n| name = Nick Pope\n| image = Nick Pope 23-04-2016 1.jpg\n| image_size = 200\n| caption = Pope playing for [[Charlton Athletic F.C.|Charlton Athletic]] in 2016\n| fullname = Nicholas David Pope<ref>{{cite web |url=https://www.premierleague.com/news/612828 |title=Updated squads for 2017/18 Premier League confirmed |publisher=Premier League |date=2 February 2018 |accessdate=10 February 2018}}</ref>\n| birth_date = {{birth date and age|1992|4|19|df=y}}<ref>{{cite web |url=https://www.11v11.com/players/nick-pope-238976/ |title=Nick Pope |website=11v11.com |publisher=AFS Enterprises |accessdate=30 March 2020}}</ref>\n| birth_place = [[Soham]], England\n| height = {{convert|1.91|m|order=flip}}<ref>{{cite web |url=https://www.premierleague.com/players/10079/Nick-Pope/overview |title=Nick Pope: Overview |publisher=Premier League |accessdate=30 March 2020}}</ref>\n| position = [[Goalkeeper (association football)|Goalkeeper]]<ref>{{Hugman|24977|accessdate=30 March 2020}}</ref>\n| currentclub = [[Burnley F.C.|Burnley]]\n| clubnumber = 1\n| youthyears1 = {{0|0000}}\u20132008\n| youthclubs1 = [[Ipswich Town F.C.|Ipswich Town]]\n| years1 = 2008\u20132011\n| clubs1 = [[Bury Town F.C.|Bury Town]]\n| caps1 = \n| goals1 = \n| years2 = 2011\u20132016\n| clubs2 = [[Charlton Athletic F.C.|Charlton Athletic]]\n| caps2 = 33\n| goals2 = 0\n| years3 = 2011\n| clubs3 = \u2192 [[Harrow Borough F.C.|Harrow Borough]] (loan)\n| caps3 = 15\n| goals3 = 0\n| years4 = 2011\u20132012\n| clubs4 = \u2192 [[Welling United F.C.|Welling United]] (loan)\n| caps4 = 2\n| goals4 = 0\n| years5 = 2012\n| clubs5 = \u2192 [[Welling United F.C.|Welling United]] (loan)\n| caps5 = 2\n| goals5 = 0\n| years6 = 2013\n| clubs6 = \u2192 [[Cambridge United F.C.|Cambridge United]] (loan)\n| caps6 = 9\n| goals6 = 0\n| years7 = 2013\n| clubs7 = \u2192 [[Aldershot Town F.C.|Aldershot Town]] (loan)\n| caps7 = 5\n| goals7 = 0\n| years8 = 2013\n| clubs8 = \u2192 [[York City F.C.|York City]] (loan)\n| caps8 = 2\n| goals8 = 0\n| years9 = 2014\n| clubs9 = \u2192 [[York City F.C.|York City]] (loan)\n| caps9 = 20\n| goals9 = 0\n| years10 = 2015\n| clubs10 = \u2192 [[Bury F.C.|Bury]] (loan)\n| caps10 = 22\n| goals10 = 0\n| years11 = 2016\u2013\n| clubs11 = [[Burnley F.C.|Burnley]]\n| caps11 = 64\n| goals11 = 0\n| nationalyears1 = 2018\u2013\n| nationalteam1 = [[England national football team|England]]\n| nationalcaps1 = 2\n| nationalgoals1 = 0\n| club-update = 09:43, 8 March 2020 (UTC)\n| nationalteam-update = 19:03, 17 November 2019 (UTC)\n}}\n'''Nicholas David Pope''' (born 19 April 1992) is an English professional [[Association football|footballer]] who plays as a [[Goalkeeper (association football)|goalkeeper]] for {{English football updater|Burnley}} club [[Burnley F.C.|Burnley]] and the [[England national football team|England national team]].\n\nPope started his career in [[Ipswich Town F.C.|Ipswich Town]]'s youth teams and after being released aged 16, he joined [[Bury Town F.C.|Bury Town]]. He signed for [[EFL League One|League One]] club [[Charlton Athletic F.C.|Charlton Athletic]] in May 2011, before having [[Loan (sports)|loan]] spells with [[Harrow Borough F.C.|Harrow Borough]], [[Welling United F.C.|Welling United]], [[Cambridge United F.C.|Cambridge United]], [[Aldershot Town F.C.|Aldershot Town]], [[York City F.C.|York City]], and [[Bury F.C.|Bury]]. Pope joined Burnley of the Premier League in July 2016.\n\n==Club career==\n===Early career===\nBorn in [[Soham]], Cambridgeshire,<ref name=\"Charlton keeper Nick Pope joins Cambridge United\">{{cite news |url=https://www.bbc.co.uk/sport/football/21698251 |title=Charlton keeper Nick Pope joins Cambridge United |publisher=BBC Sport |date=7 March 2013 |accessdate=16 July 2016}}</ref> Pope attended [[King's Ely|King's School]] in nearby [[Ely, Cambridgeshire|Ely]].<ref name=\"'Never give up on your dream' \u2013 ex Ipswich Town youngster Nick Pope ready for the Championship with Charlton Athletic\">{{cite news |url=http://www.greenun24.co.uk/ipswich-town/never_give_up_on_your_dream_ex_ipswich_town_youngster_nick_pope_ready_for_the_championship_with_charlton_athletic_1_1413798 |title='Never give up on your dream' \u2013 ex Ipswich Town youngster Nick Pope ready for the Championship with Charlton Athletic |first=Stuart |last=Watson |website=Green 'Un |publisher=Archant Community Media |date=18 June 2012 |accessdate=26 June 2018}}</ref> An [[Ipswich Town F.C.|Ipswich Town]] season ticket holder, he began his career at the club's youth set-up and remained with Ipswich until being released aged 16.<ref name=\"'Never give up on your dream' \u2013 ex Ipswich Town youngster Nick Pope ready for the Championship with Charlton Athletic\"/> Following his release by Ipswich,<ref name=\"'Never give up on your dream' \u2013 ex Ipswich Town youngster Nick Pope ready for the Championship with Charlton Athletic\"/> he joined [[Non-League football|non-League]] club [[Bury Town F.C.|Bury Town]] in 2008.<ref>{{cite web |url=https://www.kingsely.org/professional-footballer-and-old-elean-returns-to-inspire-junior-pupils/ |title=Professional footballer and Old Elean returns to inspire Junior pupils |publisher=King's Ely |date=21 May 2013 |accessdate=26 June 2018}}</ref> Having challenged and temporarily replaced Marcus Garnham, Pope proved he was capable at that level when he wore the number one shirt for Bury Town for a number of first-team matches after initially debuting for the team at just 16 years of age.{{citation needed|date=November 2013}} Manager Richard Wilkins described Pope as \"the most naturally-talented player to progress through the ranks at the [[West Suffolk College|West Suffolk Sports Academy]] and Bury Town\" and said \"I honestly think Nick Pope can go all the way to the top.\"<ref>{{cite news |url=http://www.elystandard.co.uk/sport/football/ely-teen-signs-for-charlton-athletic-1-917108 |title=Ely teen signs for Charlton Athletic |newspaper=Ely Standard |date=10 June 2011 |accessdate=26 June 2018}}</ref> Pope was also a member of the [[West Suffolk College]] squad and has represented an England Colleges squad.{{citation needed|date=September 2016}}\n\n===Charlton Athletic===\nOn 24 May 2011, [[EFL League One|League One]] club [[Charlton Athletic F.C.|Charlton Athletic]] signed Pope after he was spotted by scouts during a 2\u20131 win over [[Billericay Town F.C.|Billericay Town]].<ref>{{cite news |url=http://www.burytownfc.co.uk/index.php?option=com_content&view=article&id=11:nick-pope-signs-for-charlton-athletic&catid=2:first-team-news |title=Nick Pope signs for Charlton Athletic |first=Trevor |last=Collins |publisher=Bury Town F.C. |date=24 May 2011 |accessdate=22 November 2013 |archive-url=https://web.archive.org/web/20160305031829/http://burytownfc.co.uk/index.php?catid=2:first-team-news&id=11:nick-pope-signs-for-charlton-athletic&option=com_content&view=article |archivedate=5 March 2016}}</ref><ref name=\"Keeper Nick Pope's Valley move is better by degrees\">{{cite news |url=http://www.cambridge-news.co.uk/Sport/Football/Keeper-Nick-Popes-Valley-move-is-better-by-degrees-08062011.htm |title=Keeper Nick Pope's Valley move is better by degrees |first=Aaron |last=Mason |newspaper=Cambridge News |date=9 June 2011 |archiveurl=https://web.archive.org/web/20131202231421/http://www.cambridge-news.co.uk/Sport/Football/Keeper-Nick-Popes-Valley-move-is-better-by-degrees-08062011.htm |archivedate=2 December 2013}}</ref> He was then invited to a trial at Charlton.<ref name=\"Keeper Nick Pope's Valley move is better by degrees\"/> After impressing staff during a trial, he was signed on a two-year contract after the two clubs agreed a compensation package, which included Charlton taking on the [[Suffolk]] outfit in a pre-season [[Exhibition game#Association football|friendly]] ahead of the [[2012\u201313 Charlton Athletic F.C. season|2012\u201313 season]].{{citation needed|date=November 2013}} Charlton also paid for Pope to take a degree in [[sports science]] at the [[University of Roehampton]] alongside other courses which he had planned to take at the [[University of Nottingham]] before being signed by Charlton.<ref name=\"Keeper Nick Pope's Valley move is better by degrees\"/> On 7 February 2012, Pope signed a new two-year contract with Charlton.<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/16924885 |title=Charlton Athletic goalkeeper Nick Pope signs new deal |publisher=BBC Sport |date=7 February 2012 |accessdate=16 July 2016}}</ref> He made his Charlton and professional debut on 4 May 2013, in the last match of the 2012\u201313 season, as a 71st minute [[Substitute (association football)|substitute]] for [[David Button]] in a 4\u20131 home win for Charlton against already [[Promotion and relegation|relegated]] [[Bristol City F.C.|Bristol City]] in the [[EFL Championship|Championship]].<ref name=sb1213/><ref>{{cite news |url=https://www.bbc.co.uk/sport/football/22320513 |title=Charlton 4\u20131 Bristol City |publisher=BBC Sport |date=4 May 2013 |accessdate=16 July 2016}}</ref>\n\nPope signed a new three-year contract with Charlton in September 2013, and commented that \"It's a big club so to have a long-term future secure, for me, as a player developing, it's something you look for\".<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/24240737 |title=Nick Pope: Charlton Athletic goalkeeper signs new deal |publisher=BBC Sport |date=25 September 2013 |accessdate=16 July 2016}}</ref>\n\nOn 5 June 2014, Pope signed a new four-year contract, securing his future to Charlton until June 2018.<ref name=\"Charlton Athletic\">{{cite web |url=http://www.cafc.co.uk/news/article/20140605-nick-pope-contract-extension-1611918.aspx |title=Nick Pope commits to Charlton until 2018 |first=Iain |last=Liddle |publisher=Charlton Athletic F.C. |date=5 June 2014 |archiveurl=https://web.archive.org/web/20160809015159/http://www.cafc.co.uk/news/article/20140605-nick-pope-contract-extension-1611918.aspx |archivedate=9 August 2016}}</ref>\n\n====Loan spells====\n[[File:Nick Pope 26-04-2014 1.jpg|thumb|upright|Pope playing for [[York City F.C.|York City]] in 2014]]\n\nIn August 2011, Pope joined [[Isthmian League]] Premier Division club [[Harrow Borough F.C.|Harrow Borough]] on a [[Loan (sports)|loan]] deal lasting until 17 September 2011.<ref>{{cite web |url=http://www.cafc.co.uk/page/NewsDetail/0,,10267~2417528,00.html |title=Pope heads to Harrow |first=Matt |last=Wright |publisher=Charlton Athletic F.C. |date=24 August 2011 |archiveurl=https://web.archive.org/web/20120612091440/http://www.cafc.co.uk/page/NewsDetail/0,,10267~2417528,00.html |archivedate=12 June 2012}}</ref> Whilst there Pope kept three clean sheets and saved two penalty kicks in 19 appearances.<ref name=\"Player Info\"/> Pope was then meant to join [[Conference Premier]] club [[Kettering Town F.C.|Kettering Town]] in December 2011, but the deal could not be concluded due to Kettering being placed under a transfer embargo.<ref name=\"Pope pays visit to Welling\">{{cite news |url=http://www.kentsportsnews.com/pope-pays-visit-to-welling-22-12-2011/ |title=Pope pays visit to Welling |first=Steve |last=Wolfe |publisher=Kent Sports News |date=22 December 2011 |accessdate=5 May 2013}}</ref> As a result, he joined [[Conference South]] club [[Welling United F.C.|Welling United]] on 21 December 2011 on a 28-day loan instead.<ref name=\"Pope pays visit to Welling\"/> On 7 March 2013, Pope joined [[Cambridge United F.C.|Cambridge United]] in the Conference Premier on a one-month loan.<ref name=\"Charlton keeper Nick Pope joins Cambridge United\"/> Whilst at the club, he made nine appearances, keeping four [[Shutout#Association football|clean sheets]] in the process.<ref name=Soccerway/>\n\nOn 26 September 2013, Pope joined Conference Premier club [[Aldershot Town F.C.|Aldershot Town]] on a one-month loan.<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/24291336 |title=Aldershot Town sign Charlton goalkeeper Nick Pope on loan |publisher=BBC Sport |date=26 September 2013 |accessdate=16 July 2016}}</ref> He joined [[EFL League Two|League Two]] club [[York City F.C.|York City]] on 21 November 2013 on a one-month loan,<ref>{{cite web |url=http://www.yorkcityfootballclub.co.uk/news/article/nick-pope-in-on-loan-1188354.aspx |title=Nick Pope in on loan |publisher=York City F.C. |date=21 November 2013 |archiveurl=https://web.archive.org/web/20160701073030/http://www.yorkcityfootballclub.co.uk/news/article/nick-pope-in-on-loan-1188354.aspx |archivedate=1 July 2016}}</ref> but was recalled after only two matches by Charlton.<ref>{{cite news |url=http://www.skysports.com/football/news/12691/9046422/pope-recalled-by-addicks |title=Pope recalled by Addicks |publisher=Sky Sports |date=28 November 2013 |accessdate=16 July 2016}}</ref> On 16 January 2014, Pope rejoined York on loan for the rest of the [[2013\u201314 York City F.C. season|2013\u201314 season]],<ref>{{cite web |url=http://www.yorkcityfootballclub.co.uk/news/article/nick-pope-back-in-on-loan-1298261.aspx |title=Nick Pope back in on loan |publisher=York City F.C. |date=16 January 2014 |archiveurl=https://web.archive.org/web/20160701065312/http://www.yorkcityfootballclub.co.uk/news/article/nick-pope-back-in-on-loan-1298261.aspx |archivedate=1 July 2016}}</ref> keeping 16 clean sheets in 24 appearances.<ref name=\"Charlton Athletic\"/>\n\nOn 6 January 2015, Pope joined [[Bury F.C.|Bury]] on loan for the rest of the [[2014\u201315 Bury F.C. season|2014\u201315 season]].<ref>{{cite web |url=http://www.cafc.co.uk/news/article/marko-dmitrovic-signs-from-ujpest-nick-pope-signs-for-bury-on-loan-2185720.aspx |title=New goalkeeper signs, Pope departs on loan |first=Iain |last=Liddle |publisher=Charlton Athletic F.C. |date=6 January 2015 |archiveurl=https://web.archive.org/web/20170429220208/http://www.cafc.co.uk/news/article/marko-dmitrovic-signs-from-ujpest-nick-pope-signs-for-bury-on-loan-2185720.aspx |archivedate=29 April 2017}}</ref> He made his debut in a 1\u20131 home draw with [[Wycombe Wanderers F.C.|Wycombe Wanderers]] on 17 January 2015.<ref name=sb1415/> He made 22 appearances as Bury won promotion after finishing in third place in League Two.<ref>{{cite news |url=http://www.burytimes.co.uk/sport/12935982.Charlton_Athletic_goalkeeper_Nick_Pope_has_hope_of_possible_Bury_return/ |title=Charlton Athletic goalkeeper Nick Pope has hope of possible Bury return |first=Craig |last=Nelson |newspaper=Bury Times |date=7 May 2015 |accessdate=20 May 2015}}</ref>\n\n===Burnley===\nOn 19 July 2016, Pope joined newly promoted [[Premier League]] club [[Burnley F.C.|Burnley]] on a three-year contract for an undisclosed fee.<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/36835053 |title=Johann Berg Gudmundsson & Nick Pope: Burnley sign duo from Charlton |publisher=BBC Sport |date=19 July 2016 |accessdate=19 July 2016}}</ref> Pope made his Premier League debut on 10 September 2017, replacing the injured [[Tom Heaton]] in the first half of a 1\u20130 home win over [[Crystal Palace F.C.|Crystal Palace]].<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/41139096 |title=Burnley 1\u20130 Crystal Palace |first=Phil |last=Dawkes |publisher=BBC Sport |date=10 September 2017 |accessdate=10 September 2017}}</ref> He made his first Premier League start the following week, on 16 September 2017, in a 1\u20131 draw against [[Liverpool F.C.|Liverpool]] away from home.<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/41210051 |title=Liverpool 1\u20131 Burnley |first=Mike |last=Henson |publisher=BBC Sport |date=16 September 2017 |accessdate=18 September 2017}}</ref> On 9 October, Pope signed a new contract to keep him at Burnley until June 2020.<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/41558894 |title=Nick Pope: Burnley goalkeeper signs new three-year deal |publisher=BBC Sport |date=9 October 2017 |accessdate=11 December 2017}}</ref> He suffered a dislocated shoulder on 26 July 2018 after colliding with [[Sam Cosgrove]] during Burnley's 1\u20131 draw away to [[Aberdeen F.C.|Aberdeen]] in the [[2018\u201319 UEFA Champions League|UEFA Europa League]] second qualifying round first leg.<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/45000764 |title=Nick Pope: Burnley goalkeeper to see specialist over dislocated shoulder |publisher=BBC Sport |date=29 July 2018 |accessdate=30 July 2018}}</ref><ref>{{cite news |url=https://www.bbc.co.uk/sport/football/44938522 |title=Aberdeen 1\u20131 Burnley |first=Tom |last=English |publisher=BBC Sport |date=26 July 2018 |accessdate=30 July 2018}}</ref><ref>{{cite news |url=https://www.bbc.co.uk/sport/football/44975815 |title=Nick Pope: Burnley goalkeeper sustains 'serious' shoulder injury |publisher=BBC Sport |date=27 July 2018 |accessdate=30 July 2018}}</ref>\n\nIn May 2019 he signed a new contract with Burnley, initially running until 2023.<ref>{{cite web|url=https://www.bbc.co.uk/sport/football/48407011|title=Nick Pope: Burnley goalkeeper commits future to Premier League club|date=25 May 2019|publisher=BBC Sport}}</ref>\n\n==International career==\nPope was called up to the [[England national football team|England national team]] for the first time on 15 March 2018.<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/43344416 |title=England call-ups for uncapped quartet as Jack Wilshere earns recall |publisher=BBC Sport |date=15 March 2018 |accessdate=15 March 2018}}</ref> He was named in the 23-man England squad for the [[2018 FIFA World Cup]].<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/44138600 |title=England World Cup squad: Trent Alexander-Arnold in 23-man squad |publisher=BBC Sport |date=16 May 2018 |accessdate=16 May 2018}}</ref> Pope made his debut on 7 June 2018 as a 65th-minute substitute as England beat [[Costa Rica national football team|Costa Rica]] 2\u20130 in a pre-tournament friendly.<ref>{{cite news |url=https://www.bbc.co.uk/sport/football/44246164 |title=England 2\u20130 Costa Rica |first=Phil |last=McNulty |publisher=BBC Sport |date=7 June 2018 |accessdate=7 June 2018}}</ref> Pope made his second international appearance in a 4\u20130 win against Kosovo for the final game in Euro Qualifying on 17 November 2019.<ref>{{cite news|url=https://www.bbc.co.uk/sport/football/50160458|title=Kosovo 0-4 England: Southgate's side conclude Euro 2020 qualifying campaign with win|date=17 November 2019|accessdate=20 November 2019|work=BBC Sport}}</ref>\n\n==Career statistics==\n===Club===\n{{updated|match played 7 March 2020}}\n\n{| class=wikitable style=text-align:center\n|+ Appearances and goals by club, season and competition\n|-\n!rowspan=2|Club\n!rowspan=2|Season\n!colspan=3|League\n!colspan=2|[[FA Cup]]\n!colspan=2|[[EFL Cup|League Cup]]\n!colspan=2|Other\n!colspan=2|Total\n|-\n!Division!!Apps!!Goals!!Apps!!Goals!!Apps!!Goals!!Apps!!Goals!!Apps!!Goals\n|-\n|rowspan=6|[[Charlton Athletic F.C.|Charlton Athletic]]\n|[[2011\u201312 Charlton Athletic F.C. season|2011\u201312]]<ref name=sb1112>{{soccerbase season|63387|2011|accessdate=16 September 2017}}</ref>\n|[[EFL League One|League One]]\n|0||0||0||0||colspan=2|\u2014||colspan=2|\u2014||0||0\n|-\n|[[2012\u201313 Charlton Athletic F.C. season|2012\u201313]]<ref name=sb1213>{{soccerbase season|63387|2012|accessdate=16 September 2017}}</ref>\n|[[EFL Championship|Championship]]\n|1||0||0||0||0||0||colspan=2|\u2014||1||0\n|-\n|[[2013\u201314 Charlton Athletic F.C. season|2013\u201314]]<ref name=sb1314>{{soccerbase season|63387|2013|accessdate=16 September 2017}}</ref>\n|Championship\n|0||0||0||0||0||0||colspan=2|\u2014||0||0\n|-\n|[[2014\u201315 Charlton Athletic F.C. season|2014\u201315]]<ref name=sb1415>{{soccerbase season|63387|2014|accessdate=16 September 2017}}</ref>\n|Championship\n|8||0||0||0||1||0||colspan=2|\u2014||9||0\n|-\n|[[2015\u201316 Charlton Athletic F.C. season|2015\u201316]]<ref name=sb1516>{{soccerbase season|63387|2015|accessdate=16 September 2017}}</ref>\n|Championship\n|24||0||1||0||3||0||colspan=2|\u2014||28||0\n|-\n!colspan=2|Total\n!33||0||1||0||4||0||colspan=2|\u2014||38||0\n|-\n|[[Harrow Borough F.C.|Harrow Borough]] (loan)\n|[[2011\u201312 Isthmian League#Premier Division|2011\u201312]]<ref name=\"Player Info\">{{cite web |url=http://www.pitchero.com/clubs/harrowborough/s/players-coaches-60083.html?archive_id=10701&player_id=674051 |title=Player info |publisher=Harrow Borough F.C. |via=Pitchero |archiveurl=https://archive.is/20130630040411/http://www.pitchero.com/clubs/harrowborough/s/players-coaches-60083.html?archive_id=10701&player_id=674051 |archivedate=30 June 2013}}</ref>\n|[[Isthmian League]] Premier Division\n|15||0||0||0||colspan=2|\u2014||4{{efn|One appearance in [[Isthmian League#League Cup|Isthmian League Cup]], three in [[FA Trophy]]}}||0||19||0\n|-\n|[[Welling United F.C.|Welling United]] (loan)\n|[[2011\u201312 Football Conference#Conference South|2011\u201312]]<ref name=\"Non-League Club Directory 2013\">{{cite book |editor1-first=Mike |editor1-last=Williams |editor2-first=Tony |editor2-last=Williams |title=Non-League Club Directory 2013 |year=2012 |publisher=Tony Williams Publications |location= |isbn=978-1-869833-77-0 |pages=334\u2013335}}</ref>\n|[[Conference South]]\n|4||0||colspan=2|\u2014||colspan=2|\u2014||colspan=2|\u2014||4||0\n|-\n|[[Cambridge United F.C.|Cambridge United]] (loan)\n|[[2012\u201313 Football Conference#Conference Premier|2012\u201313]]<ref name=Soccerway/>\n|[[Conference Premier]]\n|9||0||colspan=2|\u2014||colspan=2|\u2014||colspan=2|\u2014||9||0\n|-\n|[[Aldershot Town F.C.|Aldershot Town]] (loan)\n|[[2013\u201314 Football Conference#Conference Premier|2013\u201314]]<ref name=Soccerway>{{cite web |url=https://uk.soccerway.com/players/nick-pope/220636/ |title=N. Pope: Summary |website=Soccerway |publisher=Perform Group |accessdate=30 July 2018}}</ref>\n|Conference Premier\n|5||0||colspan=2|\u2014||colspan=2|\u2014||colspan=2|\u2014||5||0\n|-\n|[[York City F.C.|York City]] (loan)\n|[[2013\u201314 York City F.C. season|2013\u201314]]<ref name=sb1314/>\n|[[EFL League Two|League Two]]\n|22||0||colspan=2|\u2014||colspan=2|\u2014||2{{efn|Appearances in [[EFL League Two play-offs|League Two play-offs]]}}||0||24||0\n|-\n|[[Bury F.C.|Bury]] (loan)\n|[[2014\u201315 Bury F.C. season|2014\u201315]]<ref name=sb1415/>\n|League Two\n|22||0||colspan=2|\u2014||colspan=2|\u2014||colspan=2|\u2014||22||0\n|-\n|rowspan=5|[[Burnley F.C.|Burnley]]\n|[[2016\u201317 Burnley F.C. season|2016\u201317]]<ref name=sb1617>{{soccerbase season|63387|2016|accessdate=16 September 2017}}</ref>\n|[[Premier League]]\n|0||0||3||0||1||0||colspan=2|\u2014||4||0\n|-\n|[[2017\u201318 Burnley F.C. season|2017\u201318]]<ref name=sb1718>{{soccerbase season|63387|2017|accessdate=6 February 2019}}</ref>\n|Premier League\n|35||0||1||0||2||0||colspan=2|\u2014||38||0\n|-\n|[[2018\u201319 Burnley F.C. season|2018\u201319]]<ref name=sb1819>{{soccerbase season|63387|2018|accessdate=14 July 2019}}</ref>\n|Premier League\n|0||0||2||0||0||0||1{{efn|Appearance in [[UEFA Europa League]]}}||0||3||0\n|-\n|[[2019\u201320 Burnley F.C. season|2019\u201320]]<ref name=sb1920>{{soccerbase season|63387|2019|accessdate=17 November 2019}}</ref>\n|Premier League\n|29||0||0||0||0||0||colspan=2|\u2014||29||0\n|-\n!colspan=2|Total\n!64||0||6||0||3||0||1||0||74||0\n|-\n!colspan=3|Career total\n!174||0||7||0||7||0||7||0||195||0\n|}\n\n{{notelist}}\n\n===International===\n{{updated|match played 17 November 2019}}<ref>{{NFT player |id=71345 |name=Pope, Nick |accessdate=17 November 2019}}<br />{{cite news |url=https://www.bbc.co.uk/sport/football/50160458 |title=Kosovo 0\u20134 England |first=Phil |last=McNulty |website=BBC Sport |date=17 November 2019 |accessdate=17 November 2019}}</ref>\n\n{| class=wikitable style=text-align:center\n|+ Appearances and goals by national team and year\n|-\n!National team!!Year!!Apps!!Goals\n|-\n|rowspan=2|[[England national football team|England]]\n|2018||1||0\n|-\n|2019||1||0\n|-\n!colspan=2|Total||2||0\n|}\n\n==Honours==\n'''Bury'''\n*[[Football League Two]] third-place promotion: [[2014\u201315 Football League Two|2014\u201315]]<ref>{{cite book |editor-first=John |editor-last=Anderson |title=Sky Sports Football Yearbook 2015\u20132016 |year=2015 |publisher=Headline Publishing Group |location=London |isbn=978-1-4722-2416-3 |pages=98\u201399}}</ref>\n\n'''Individual'''\n*[[Burnley F.C.|Burnley]] Player of the Year: [[2017\u201318 Burnley F.C. season|2017\u201318]]<ref name=BurnleyPOTY>{{cite web |url=https://www.burnleyfootballclub.com/news/2018/may/double-delight-for-award-winner-pope--/ |title=Double delight for award winner Pope |publisher=Burnley F.C. |date=7 May 2018 |accessdate=16 May 2018}}</ref>\n*Burnley Players' Player of the Year: 2017\u201318<ref name=BurnleyPOTY/>\n\n==References==\n{{reflist}}\n\n==External links==\n{{commons category}}\n*[https://www.burnleyfootballclub.com/teams/first-team/goalkeeper/nick-pope/ Profile] at the Burnley F.C. website\n*[http://www.thefa.com/england/mens-seniors/squad/nick-pope Profile] at the Football Association website\n*{{Soccerbase}}\n\n{{Burnley F.C. squad}}\n{{England squad 2018 FIFA World Cup}}\n{{Burnley F.C. Player of the Year}}\n\n{{DEFAULTSORT:Pope, Nick}}\n[[Category:1992 births]]\n[[Category:Living people]]\n[[Category:People from Soham]]\n[[Category:Sportspeople from Cambridgeshire]]\n[[Category:English footballers]]\n[[Category:England international footballers]]\n[[Category:Association football goalkeepers]]\n[[Category:Ipswich Town F.C. players]]\n[[Category:Bury Town F.C. players]]\n[[Category:Charlton Athletic F.C. players]]\n[[Category:Harrow Borough F.C. players]]\n[[Category:Welling United F.C. players]]\n[[Category:Cambridge United F.C. players]]\n[[Category:Aldershot Town F.C. players]]\n[[Category:York City F.C. players]]\n[[Category:Bury F.C. players]]\n[[Category:Burnley F.C. players]]\n[[Category:Isthmian League players]]\n[[Category:National League (English football) players]]\n[[Category:English Football League players]]\n[[Category:Premier League players]]\n[[Category:2018 FIFA World Cup players]]\n[[Category:People educated at The King's School, Ely]]\n[[Category:Alumni of the University of Roehampton]]\n", "name_user": "2a00:23c4:7b05:5601:344b:ce58:50b3:4796", "label": "unsafe", "comment": "", "url_page": "//en.wikipedia.org/wiki/Nick_Pope_(footballer)"}
{"title_page": "Paul Weyland", "text_new": "'''Paul Wilhelm Gustav Weyland''' (20 January 1888, [[Berlin]] \u2013 6 December 1972, [[Bad Pyrmont]]) was the [[anti-semitism|anti-semitic]] leader of the Anti Einstein League.<ref name=Grundmann>{{cite book|last1=Grundmann|first1=Siegfried|title=The Einstein Dossiers: Science and Politics - Einstein's Berlin Period|date=2010|publisher=Springer|location=Berlin}}</ref>{{rp|108}}\n\nIn 1919 Weyland published the novel ''Hie Kreuz - hie Triglaff'' (The Cross against the [[Triglav (mythology)|Triglav]]), which gives a chauvinistic account of the historical events of the tenth century A.D. in [[Pomerania]]. It ends with an open allusion to the [[Silesian Uprisings|contemporary conflicts]] between Germans and Poles in Upper Silesia. A second book  ''Der Tanz als kulturelles Ausdrucksmittel'' (Dancing as an expression of culture) was promised, with a chapter on modern dance as a sign of cultural decline. However this book never appeared and Weyland was to move on to scientific theory.<ref name=Kleinert>{{cite web |url=http://www.physik.uni-halle.de/Fachgruppen/history/weyland.htm |title=Paul Weyland, the Einstein-Killer from Berlin |last=Kleinert |first=Andreas |website=Martin Luther University Halle-Wittenberg, Institute of Physics |access-date=2018-07-22 }}</ref>\n\nWeyland was a key figure involved in organising an anti-semitic campaign [[Criticism of the theory of relativity|against relativity]]. In August 1920 he organised a mass meeting at the [[Berliner Philharmonie]] to contest Einstein's theory of relativity. After ensuring the meeting had been well-advertised in the newspapers, Weyland delivered a vituperative attack on Einstein, described as \"with heavy artillery\" in one newspaper. This attack consisted primarily of unsubstantial insults against the theory of relativity alongside claims that it was promoted by a  \"the clique of [Einstein's] academic supporters\". Weyland claimed that the theory constituted a form of hypnotic [[Crowd manipulation|mass suggestion]] and Jewish arrogance, which was a product of an unsettling spiritually chaotic period and that it amongst other repellent ideas it was poisoning of German thought. It was this speech which culminated in the statement: \"Relativity theory is scientific Dadaism\".<ref name=Kleinert/>\n\nHe was later granted American citizenship.<ref name=Kleinert/>\n\n==References==\n{{reflist}}\n\n{{authority control}}\n\n{{DEFAULTSORT:Weyland, Paul}}\n[[Category:1888 births]]\n[[Category:1972 deaths]]\n[[Category:German nationalists]]\n[[Category:Sturmabteilung personnel]]\n[[Category:20th-century German novelists]]\n", "text_old": "'''Paul Wilhelm Gustav Weyland''' (20 January 1888, [[Berlin]] \u2013 6 December 1972, [[Bad Pyrmont]]) was the [[anti-semitism|anti-semitic]] leader of the Anti Einstein League.<ref name=Grundmann>{{cite book|last1=Grundmann|first1=Siegfried|title=The Einstein Dossiers: Science and Politics - Einstein's Berlin Period|date=2010|publisher=Springer|location=Berlin}}</ref>{{rp|108}}\n\nIn 1919 Weyland published the novel ''Hie Kreuz - hie Triglaff'' (The Cross against the [[Triglav (mythology)|Triglav]]), which gives a chauvinistic account of the historical events of the tenth century A.D. in [[Pomerania]]. It ends with an open allusion to the [[Silesian Uprisings|contemporary conflicts]] between Germans and Poles in Upper Silesia. A second book  ''Der Tanz als kulturelles Ausdrucksmittel'' (Dancing as an expression of culture) was promised, with a chapter on modern dance as a sign of cultural decline. However this book never appeared and Weyland was to move on to scientific theory.<ref name=Kleinert>{{cite web |url=http://www.physik.uni-halle.de/Fachgruppen/history/weyland.htm |title=Paul Weyland, the Einstein-Killer from Berlin |last=Kleinert |first=Andreas |website=Martin Luther University Halle-Wittenberg, Institute of Physics |access-date=2018-07-22 }}</ref>\n\nWeyland was a key figure involved in organising an anti-semitic campaign [[Criticism of the theory of relativity|against relativity]]. In August 1920 he organised a mass meeting at the [[Berliner Philharmonie]] to contest Einstein's theory of relativity. After ensuring the meeting had been well-advertised in the newspapers, Weyland delivered a vituperative attack on Einstein, described as \"with heavy artillery\" in one newspaper. This attack consisted primarily of unsubstantial insults against the theory of relativity alongside claims that it was promoted by a  \"the clique of [Einstein's] academic supporters\". Weyland claimed that the theory constituted a form of hypnotic [[Crowd manipulation|mass suggestion]] and Jewish arrogance, which was a product of an unsettling spiritually chaotic period and that it amongst other repellent ideas it was poisoning of German thought. It was this speech which culminated in the statement: \"Relativity theory is scientific Dadaism\".<ref name=Kleinert/>\n\n\n\nHe was later granted American citizenship.<ref name=Kleinert/>\n\n==References==\n{{reflist}}\n\n{{DEFAULTSORT:Weyland, Paul}}\n[[Category:1888 births]]\n[[Category:1972 deaths]]\n[[Category:German nationalists]]\n[[Category:Sturmabteilung personnel]]\n[[Category:20th-century German novelists]]\n", "name_user": "Ser Amantio di Nicolao", "label": "safe", "comment": "add authority control", "url_page": "//en.wikipedia.org/wiki/Paul_Weyland"}
{"title_page": "Matilda Centre", "text_new": "{{inuse}}\nThe '''Matilda Centre''' was a self-managed, grassroots social and community centre based at 111 Matilda Street in [[Sheffield]], [[South Yorkshire]], [[England]]. It was housed in the derelict former [[Sydney Works]] (the centre took the name of the street on which the building can still be found) building until June 2006 when, following the outcome of a court case ruling that they should be evicted, the collectives running the centre left.<ref>[http://www.matilda.aktivix.org/ Matilda centre Official Website]</ref>\n\nThe [[Collectives|anarchist collectives]] which ran the centre worked to promote various creative activities in the centre, including live music and art, political activities, [[open source software]] and also worked to maintain the building. <ref>[http://news.bbc.co.uk/2/hi/uk_news/england/south_yorkshire/5108216.stm BBC news]</ref>\n\n==Activities==\n\n==Occupation==\n\nIn June 2005, Sheffield hosted a meeting of the G8 Justice and Home Affair Ministers.<ref name=\"Waddington\">{{cite book |last1=Waddington |first1=David |page=145 |title=Policing public disorder : theory and practice |date=2013 |publisher=Willan |isbn=9781134020232}}</ref> The Matilda Street building was squatted as a convergence space for the protests against the meeting.\n\nCourt papers <ref>{{cite court|litigants=Yorkshire Forward vs Persons Unknown|court=Sheffield County Court \n|date=16 June 2006|url=https://matilda.aktivix.org.archived.website/collectives/matilda/squat/summons-22-june/matilda-court-summons-pdf.pdf|access-date=11 April 2020}}</ref>\n\n==References==\n{{Reflist}}\n\n==External links==\n*[http://www.matilda.aktivix.org/ Archived Matilda website]\n\n{{coord|53.3754|-1.4680|type:event_region:GB-SHF|display=title}}\n\n[[Category:Culture in Sheffield]]\n[[Category:Buildings and structures in Sheffield]]\n\n\n{{SouthYorkshire-struct-stub}}\n", "text_old": "{{inuse}}\nThe '''Matilda Centre''' was a self-managed, grassroots social and community centre based at 111 Matilda Street in [[Sheffield]], [[South Yorkshire]], [[England]]. It was housed in the derelict former [[Sydney Works]] (the centre took the name of the street on which the building can still be found) building until June 2006 when, following the outcome of a court case ruling that they should be evicted, the collectives running the centre left.<ref>[http://www.matilda.aktivix.org/ Matilda centre Official Website]</ref>\n\nThe [[Collectives|anarchist collectives]] which ran the centre worked to promote various creative activities in the centre, including live music and art, political activities, [[open source software]] and also worked to maintain the building. <ref>[http://news.bbc.co.uk/2/hi/uk_news/england/south_yorkshire/5108216.stm BBC news]</ref>\n\n==Activities==\n\n==Occupation==\n\nIn June 2005, Sheffield hosted a meeting of the G8 Justice and Home Affair Ministers.<ref name=\"Waddington\">{{cite book |last1=Waddington |first1=David |page=145 |title=Policing public disorder : theory and practice |date=2013 |publisher=Willan |isbn=9781134020232}}</ref> The Matilda Street building was squatted as a convergence space for the protests against the meeting.\n\nCourt papers {{cite court|litigants=Yorkshire Forward vs Persons Unknown|court=Sheffield County Court \n|date=16 June 2006|url=https://matilda.aktivix.org.archived.website/collectives/matilda/squat/summons-22-june/matilda-court-summons-pdf.pdf|access-date=11 April 2020}}\n\n==References==\n{{Reflist}}\n\n==External links==\n*[http://www.matilda.aktivix.org/ Archived Matilda website]\n\n{{coord|53.3754|-1.4680|type:event_region:GB-SHF|display=title}}\n\n[[Category:Culture in Sheffield]]\n[[Category:Buildings and structures in Sheffield]]\n\n\n{{SouthYorkshire-struct-stub}}\n", "name_user": "Mujinga", "label": "safe", "comment": "\u2192\u200eOccupation", "url_page": "//en.wikipedia.org/wiki/Matilda_Centre"}
{"title_page": "JPEG", "text_new": "{{other uses|JPEG (disambiguation)|JPG (disambiguation)}}\n{{short description|Lossy compression method for digital images}}\n{{Multiple issues|\n {{Overly detailed|date=December 2019}}\n {{More citations needed|date=December 2019}}\n}}\n{{Pp-pc1|small=yes}}\n{{Infobox file format\n|name = JPEG\n|screenshot = Felis silvestris silvestris small gradual decrease of quality.png\n|screenshot_size = 200px\n|caption = A photo of a [[European wildcat]] with the compression rate decreasing and hence quality increasing, from left to right\n|_noextcode = on\n|extension = {{code|.jpg}}, {{code|.jpeg}}, {{code|.jpe}}<br />{{code|.jif}}, {{code|.jfif}}, {{code|.jfi}}\n|mime = image/jpeg\n|typecode = {{code|JPEG}}\n|uniform type = public.jpeg\n|released = {{start date and age|1992|9|18}}\n|owner = [[Joint Photographic Experts Group]], [[IBM]], [[Mitsubishi Electric]], [[AT&T]], [[Canon Inc.]]<ref name=\"w3\" />\n|genre = [[Lossy compression|Lossy]] [[image compression]] [[image format|format]]\n|container for =\n|contained by =\n|extended from =\n|extended to =\n|magic = {{code|ff d8 ff}}\n|standard = ISO/IEC 10918, ITU-T T.81, ITU-T T.83, ITU-T T.84, ITU-T T.86\n|url = {{URL|http://www.jpeg.org/jpeg/}}\n}}\n[[File:Continuously varied JPEG compression for an abdominal CT scan - 1471-2342-12-24-S1.ogv|thumb|upright=0.9|Continuously varied JPEG compression (between Q=100 and Q=1) for an [[abdominal]] [[CT scan]]]]\n\n'''JPEG''' ({{IPAc-en|\u02c8|d\u0292|e\u026a|p|\u025b|\u0261}} {{respell|JAY|peg}})<ref>{{cite web|url=http://www.collinsdictionary.com/dictionary/english/jpeg|title=Definition of \"JPEG\"|work=[[Collins English Dictionary]]|accessdate=2013-05-23}}</ref> is a commonly used method of [[lossy compression]] for [[digital image]]s, particularly for those images produced by [[digital photography]]. The degree of compression can be adjusted, allowing a selectable tradeoff between storage size and [[image quality]]. JPEG typically achieves 10:1 compression with little perceptible loss in image quality.<ref>{{cite techreport |url=https://ntrs.nasa.gov/search.jsp?R=19920024689 |author1=Haines, Richard F. |author2=Chuang, Sherry L. |title=The effects of video compression on acceptability of images for monitoring life sciences experiments |number=NASA-TP-3239, A-92040, NAS 1.60:3239 |institution=[[NASA]] |date=1 July 1992 |access-date=2016-03-13 |quote=The JPEG still-image-compression levels, even with the large range of 5:1 to 120:1 in this study, yielded equally high levels of acceptability}}</ref> Since its introduction in 1992, JPEG has been the most widely used [[image compression]] standard in the world,<ref name=\"Hudson\" /><ref>{{cite web |title=The JPEG image format explained |url=https://home.bt.com/tech-gadgets/photography/what-is-a-jpeg-11364206889349 |website=[[BT.com]] |publisher=[[BT Group]] |accessdate=5 August 2019 |date=31 May 2018}}</ref> and the most widely used digital [[image format]], with several billion JPEG images produced every day as of 2015.<ref>{{cite news |last1=Baraniuk |first1=Chris |title=Copy protections could come to JPegs |url=https://www.bbc.co.uk/news/technology-34538705 |accessdate=13 September 2019 |work=[[BBC News]] |agency=[[BBC]] |date=15 October 2015}}</ref>\n\nThe term \"JPEG\" is an initialism/acronym for the [[Joint Photographic Experts Group]], which created the standard in 1992. The basis for JPEG is the [[discrete cosine transform]] (DCT),<ref name=\"w3\" /> a lossy image compression technique that was first proposed by [[N. Ahmed|Nasir Ahmed]] in 1972.<ref name=\"Ahmed\" /> JPEG was largely responsible for the proliferation of digital images and [[digital photo]]s across the Internet, and later [[social media]].<ref>{{cite web |title=What Is a JPEG? The Invisible Object You See Every Day |url=https://www.theatlantic.com/technology/archive/2013/09/what-is-a-jpeg-the-invisible-object-you-see-every-day/279954/ |accessdate=13 September 2019 |website=[[The Atlantic]] |date=24 September 2013}}</ref>\n\nJPEG compression is used in a number of [[image file formats]]. JPEG/[[Exif]] is the most common image format used by [[digital camera]]s and other photographic image capture devices; along with JPEG/[[JFIF]], it is the most common format for storing and transmitting [[photographic image]]s on the [[World Wide Web]].<ref>{{cite web|url=http://httparchive.org/interesting.php#imageformats|title=HTTP Archive \u2013 Interesting Stats|website=httparchive.org|access-date=2016-04-06}}</ref> These format variations are often not distinguished, and are simply called JPEG.\n\nThe [[Internet media type|MIME media type]] for JPEG is ''image/jpeg'', except in older [[Internet Explorer]] versions, which provides a MIME type of ''image/pjpeg'' when uploading JPEG images.<ref>[http://msdn.microsoft.com/en-us/library/ms775147%28v=vs.85%29.aspx#_replace MIME Type Detection in Internet Explorer: Uploaded MIME Types] (msdn.microsoft.com)</ref> JPEG files usually have a [[filename extension]] of {{code|.jpg}} or {{code|.jpeg}}. JPEG/JFIF supports a maximum image size of 65,535\u00d765,535 pixels,<ref>{{cite web|url=http://www.jpeg.org/public/jfif.pdf|title=JPEG File Interchange Format|last=Hamilton|first=Eric|website=jpeg.org|date=1 September 1992|location=[[Milpitas, California]]|access-date=11 April 2020|url-status=dead|archive-url=https://web.archive.org/web/20140903080533/http://www.jpeg.org/public/jfif.pdf|archive-date=3 September 2014}}</ref> hence up to 4 gigapixels for an [[aspect ratio (image)|aspect ratio]] of 1:1. In 2000, the JPEG group introduced a format intended to be a successor, [[JPEG 2000]], but it was unable to replace the original JPEG as the dominant image standard.<ref>{{cite web|title=Why JPEG 2000 Never Took Off|url=https://blog.ansi.org/2018/07/why-jpeg-2000-never-used-standard-iso-iec/ |website=[[American National Standards Institute]]|access-date=13 September 2019|date=10 July 2018}}</ref>\n\n== History ==\n=== Background ===\nThe original JPEG specification published in 1992 implements processes from various earlier [[research papers]] and [[patents]] cited by the [[CCITT]] (now [[ITU-T]]) and Joint Photographic Experts Group.<ref name=\"w3\">{{cite web |title=T.81 \u2013 DIGITAL COMPRESSION AND CODING OF CONTINUOUS-TONE STILL IMAGES \u2013 REQUIREMENTS AND GUIDELINES |url=https://www.w3.org/Graphics/JPEG/itu-t81.pdf |publisher=[[CCITT]] |date=September 1992 |accessdate=12 July 2019}}</ref> The main basis for JPEG's lossy compression algorithm is the discrete cosine transform (DCT),<ref name=\"w3\" /><ref name=\"Heise\">{{cite news |title=JPEG: 25 Jahre und kein bisschen alt |url=https://www.heise.de/newsticker/meldung/JPEG-25-Jahre-und-kein-bisschen-alt-3342519.html |accessdate=5 September 2019 |work=[[:de:Heise online|Heise online]] |date=October 2016 |language=de}}</ref> which was first proposed by [[N. Ahmed|Nasir Ahmed]] as an [[image compression]] technique in 1972.<ref name=\"Ahmed\">{{cite journal |last=Ahmed |first=Nasir |author-link=N. Ahmed |title=How I Came Up With the Discrete Cosine Transform |journal=[[Digital Signal Processing (journal)|Digital Signal Processing]] |date=January 1991 |volume=1 |issue=1 |pages=4\u20135 |doi=10.1016/1051-2004(91)90086-Z |url=https://www.scribd.com/doc/52879771/DCT-History-How-I-Came-Up-with-the-Discrete-Cosine-Transform}}</ref><ref name=\"Heise\" /> Ahmed developed a practical DCT algorithm with T. Natarajan of [[Kansas State University]] and [[K. R. Rao]] of the [[University of Texas]] in 1973.<ref name=\"Ahmed\" /> Their seminal 1974 paper<ref name=\"Ahmed Discrete\">{{Citation |first=Nasir |last=Ahmed |author1-link=N. Ahmed |first2=T. |last2=Natarajan |first3=K. R. |last3=Rao |author3-link=K. R. Rao |title=Discrete Cosine Transform |journal=IEEE Transactions on Computers |date=January 1974 |volume=C-23 |issue=1 |pages=90\u201393 |doi=10.1109/T-C.1974.223784}}</ref> is cited in the JPEG specification, along with several later research papers that did further work on DCT, including a 1977 paper by Wen-Hsiung Chen, C.H. Smith and S.C. Fralick that described a fast DCT algorithm,<ref name=\"w3\" /><ref name=\"Chen\">{{cite journal |last1=Chen |first1=Wen-Hsiung |last2=Smith |first2=C. |last3=Fralick |first3=S. |title=A Fast Computational Algorithm for the Discrete Cosine Transform |journal=IEEE Transactions on Communications |date=1977 |volume=25 |issue=9 |pages=1004\u20131009 |doi=10.1109/TCOM.1977.1093941 |issn=0090-6778}}</ref> as well as a 1978 paper by N.J. Narasinha and S.C. Fralick, and a 1984 paper by B.G. Lee.<ref name=\"w3\" /> The specification also cites a 1984 paper by Wen-Hsiung Chen and W.K. Pratt as an influence on its [[Quantization (image processing)|quantization]] algorithm,<ref name=\"w3\" /><ref name=\"Chen1984\">{{cite journal |last1=Chen |first1=Wen-Hsiung |last2=Pratt |first2=W.K. |title=Scene Adaptive Coder |journal=IEEE Transactions on Communications |date=1984 |volume=32 |issue=3 |pages=225\u2013232 |doi=10.1109/TCOM.1984.1096066 |issn=0090-6778}}</ref> and [[David A. Huffman]]'s 1952 paper for its [[Huffman coding]] algorithm.<ref name=\"w3\" />\n\nThe JPEG specification cites patents from several companies. The following patents provided the basis for its [[arithmetic coding]] algorithm.<ref name=\"w3\" />\n* [[IBM]]\n** {{US patent|4652856}} {{ndash}} February 4, 1986 {{ndash}} Kottappuram M. A. Mohiuddin and Jorma J. Rissanen {{ndash}} Multiplication-free multi-alphabet arithmetic code\n** {{US patent|4905297}} {{ndash}} February 27, 1990 {{ndash}} G. Langdon, J.L. Mitchell, W.B. Pennebaker, and Jorma J. Rissanen {{ndash}} Arithmetic coding encoder and decoder system\n** {{US patent|4935882}} {{ndash}} June 19, 1990 {{ndash}} W.B. Pennebaker and J.L. Mitchell {{ndash}} Probability adaptation for arithmetic coders\n* [[Mitsubishi Electric]]\n** {{Patent|JP|H02202267}} ([https://patents.google.com/patent/JPH02202267A 1021672]) {{ndash}} January 21, 1989 {{ndash}} Toshihiro Kimura, Shigenori Kino, Fumitaka Ono, Masayuki Yoshida {{ndash}} Coding system\n** {{Patent|JP|H03247123}} ([https://patents.google.com/patent/JPH0834434B2/en 2-46275]) {{ndash}} February 26, 1990 {{ndash}} Fumitaka Ono, Tomohiro Kimura, Masayuki Yoshida, and Shigenori Kino {{ndash}} Coding apparatus and coding method\n\nThe JPEG specification also cites three other patents from IBM. Other companies cited as patent holders include [[AT&T]] (two patents) and [[Canon Inc.]]<ref name=\"w3\" /> Absent from the list is {{US patent|4698672}}, filed by [[Compression Labs, Inc.|Compression Labs]]' Wen-Hsiung Chen and Daniel J. Klenke in October 1986. The patent describes a DCT-based image compression algorithm, and would later be a cause of controversy in 2002 (see ''[[#Patent controversy|Patent controversy]]'' below).<ref name=\"Lemos\">{{cite news |last1=Lemos |first1=Robert |title=Finding patent truth in JPEG claim |url=https://www.cnet.com/news/finding-patent-truth-in-jpeg-claim/ |accessdate=13 July 2019 |work=[[CNET]] |date=23 July 2002}}</ref> However, the JPEG specification did cite two earlier research papers by Wen-Hsiung Chen, published in 1977 and 1984.<ref name=\"w3\" />\n\n=== JPEG standard ===\n\"JPEG\" stands for Joint Photographic Experts Group, the name of the committee that created the JPEG standard and also other still picture coding standards. The \"Joint\" stood for [[ISO]] TC97 WG8 and CCITT SGVIII. Founded in 1986, the group developed the JPEG standard during the late 1980s. Among several [[transform coding]] techniques they examined, they selected the [[discrete cosine transform]] (DCT), as it was by far the most efficient practical compression technique. The group published the JPEG standard in 1992.<ref name=\"Hudson\">{{cite journal |last1=Hudson |first1=Graham |last2=L\u00e9ger |first2=Alain |last3=Niss |first3=Birger |last4=Sebesty\u00e9n |first4=Istv\u00e1n |last5=Vaaben |first5=J\u00f8rgen |title=JPEG-1 standard 25 years: past, present, and future reasons for a success |journal=[[Journal of Electronic Imaging]] |date=31 August 2018 |volume=27 |issue=4 |pages=1 |doi=10.1117/1.JEI.27.4.040901}}</ref>\n\nIn 1987, ISO TC 97 became ISO/IEC JTC1 and, in 1992, CCITT became ITU-T. Currently on the JTC1 side, JPEG is one of two sub-groups of [[International Organization for Standardization|ISO]]/[[International Electrotechnical Commission|IEC]] [[ISO/IEC JTC1|Joint Technical Committee 1]], Subcommittee 29, Working Group 1 ([[ISO/IEC JTC 1/SC 29]]/WG 1)&nbsp;\u2013 titled as ''Coding of still pictures''.<ref>{{cite web |url=http://kikaku.itscj.ipsj.or.jp/sc29/29w12901.htm |title=ISO/IEC JTC 1/SC 29/WG 1&nbsp;\u2013 Coding of Still Pictures (SC 29/WG 1 Structure) |author=ISO/IEC JTC 1/SC 29 |date=2009-05-07 |accessdate=2009-11-11 |url-status=dead |archiveurl=https://web.archive.org/web/20131231055215/http://kikaku.itscj.ipsj.or.jp/sc29/29w12901.htm |archivedate=2013-12-31}}</ref><ref name=\"ISO/IEC\">{{cite web |url=http://kikaku.itscj.ipsj.or.jp/sc29/29w42901.htm |title=Programme of Work, (Allocated to SC 29/WG 1) |author=ISO/IEC JTC 1/SC 29 |accessdate=2009-11-07 |url-status=dead |archiveurl=https://web.archive.org/web/20131231012300/http://kikaku.itscj.ipsj.or.jp/sc29/29w42901.htm |archivedate=2013-12-31}}</ref><ref>{{cite web |url=http://www.iso.org/iso/standards_development/technical_committees/list_of_iso_technical_committees/iso_technical_committee.htm?commid=45316 |title=JTC 1/SC 29&nbsp;\u2013 Coding of audio, picture, multimedia and hypermedia information |author=ISO |accessdate=2009-11-11}}</ref> On the ITU-T side, ITU-T SG16 is the respective body. The original JPEG Group was organized in 1986,<ref name=\"jpeg.org\">{{cite web |url=http://www.jpeg.org/jpeg/index.html | title=Joint Photographic Experts Group, JPEG Homepage | author=JPEG | accessdate=2009-11-08}}</ref> issuing the first JPEG standard in 1992, which was approved in September 1992 as '''[[ITU-T]] Recommendation T.81'''<ref>{{cite web |url=http://www.itu.int/rec/T-REC-T.81 |title=T.81 : Information technology&nbsp;\u2013 Digital compression and coding of continuous-tone still images&nbsp;\u2013 Requirements and guidelines| website=Itu.int|accessdate=2009-11-07}}</ref> and, in 1994, as '''ISO/IEC 10918-1'''.\n\nThe JPEG standard specifies the [[codec]], which defines how an image is compressed into a stream of [[byte]]s and decompressed back into an image, but not the file format used to contain that stream.<ref>{{cite book | title = JPEG still image data compression standard | edition = 3rd |author1=William B. Pennebaker |author2=Joan L. Mitchell|author2-link=Joan L. Mitchell | publisher = Springer | year = 1993 | isbn = 978-0-442-01272-4 | page = 291 |url=https://books.google.com/?id=AepB_PZ_WMkC&pg=PA291&dq=JPEG+%22did+not+specify+a+file+format%22#v=onepage&q=JPEG%20%22did%20not%20specify%20a%20file%20format%22&f=false}}</ref>\nThe Exif and JFIF standards define the commonly used file formats for interchange of JPEG-compressed images.\n\nJPEG standards are formally named as ''Information technology&nbsp;\u2013 Digital compression and coding of continuous-tone still images''. ISO/IEC 10918 consists of the following parts:\n\n{| class=\"wikitable sortable\" style=\"width:100%;\"\n|+Digital compression and coding of continuous-tone still images&nbsp;\u2013&nbsp;Parts<ref name=\"ISO/IEC\" /><ref name=\"jpeg.org\" /><ref>{{cite web |url=http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_tc_browse.htm?commid=45316 |title=JTC 1/SC 29&nbsp;\u2013 Coding of audio, picture, multimedia and hypermedia information |author=ISO | accessdate=2009-11-07}}</ref>\n|-\n! style=\"width:6%;\"| Part\n! style=\"width:15%;\"| ISO/IEC standard\n! style=\"width:10%;\"| ITU-T Rec.\n! style=\"width:8%;\"| First public release date\n! style=\"width:8%;\"| Latest amendment\n! style=\"width:30%;\"| Title\n! Description\n|-\n| Part 1\n| [http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=18902 ISO/IEC 10918-1:1994]\n| [http://www.itu.int/rec/T-REC-T.81 T.81 (09/92)]\n| {{dts|abbr=on|1992-09-18}}\n|\n| Requirements and guidelines\n|\n|-\n| Part 2\n| [http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=20689 ISO/IEC 10918-2:1995]\n| [http://www.itu.int/rec/T-REC-T.83 T.83 (11/94)]\n| {{dts|abbr=on|1994-11-11}}\n|\n| Compliance testing\n| Rules and checks for software conformance (to Part 1).\n|-\n| Part 3\n| [http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=25037 ISO/IEC 10918-3:1997]\n| [http://www.itu.int/rec/T-REC-T.84 T.84 (07/96)]\n| {{dts|abbr=on|1996-07-03}}\n| {{dts|abbr=on|1999-04-01}}\n| Extensions\n| Set of extensions to improve the Part 1, including the '''Still Picture Interchange File Format''' (SPIFF).<ref>{{cite web|url=https://www.loc.gov/preservation/digital/formats/fdd/fdd000019.shtml|title=SPIFF, Still Picture Interchange File Format |publisher= [[Library of Congress]] |access-date=2018-07-31 |archive-url=https://web.archive.org/web/20180731093543/https://www.loc.gov/preservation/digital/formats/fdd/fdd000019.shtml |archive-date=2018-07-31 |url-status=live|date=2012-01-30}}</ref>\n|-\n| Part 4\n| [http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=25431 ISO/IEC 10918-4:1999]\n| [http://www.itu.int/rec/T-REC-T.86 T.86 (06/98)]\n| {{dts|abbr=on|1998-06-18}}\n| {{dts|abbr=on|2012-06-29}}\n| Registration of JPEG profiles, SPIFF profiles, SPIFF tags, SPIFF colour spaces, APPn markers, SPIFF compression types and Registration Authorities (REGAUT)\n| methods for registering some of the parameters used to extend JPEG\n|-\n| Part 5\n| [http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=54989 ISO/IEC 10918-5:2013]\n| [http://www.itu.int/rec/T-REC-T.871 T.871 (05/11)]\n| {{dts|abbr=on|2011-05-14}}\n|\n| JPEG File Interchange Format (JFIF)\n| A popular format which has been the de facto file format for images encoded by the JPEG standard. In 2009, the JPEG Committee formally established an Ad Hoc Group to standardize JFIF as JPEG Part 5.<ref>{{cite press|url=http://www.jpeg.org/newsrel25.html |title=<!--48th WG1 meeting, Maui, USA&nbsp;\u2013 -->JPEG XR enters FDIS status: JPEG File Interchange Format (JFIF) to be standardized as JPEG Part 5 |author=JPEG <!-- Louis Sharpe (pr@jpeg.org) San Francisco, US --> |date=2009-04-24 |accessdate=2009-11-09 |url-status=dead |archiveurl=https://web.archive.org/web/20091008041637/http://www.jpeg.org/newsrel25.html |archivedate=2009-10-08}}</ref>\n|-\n| Part 6\n| [http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=59634 ISO/IEC 10918-6:2013]\n| [http://www.itu.int/rec/T-REC-T.872 T.872 (06/12)]\n| {{dts|abbr=on|2012-06}}\n|\n| Application to printing systems\n| Specifies a subset of features and application tools for the interchange of images encoded according to the ISO/IEC 10918-1 for printing.\n|}\n\n[[Ecma International]] <abbr title=\"Technical Report\">TR</abbr>/98 specifies the JPEG File Interchange Format (JFIF); the first edition was published in June 2009.<ref>{{cite web |url=http://www.ecma-international.org/publications/techreports/E-TR-098.htm |year=2009 |title=JPEG File Interchange Format (JFIF) |accessdate=2011-08-01 |work=ECMA TR/98 1st ed. |publisher=[[Ecma International]]}}</ref>\n\n=== Patent controversy ===\n<!-- Courtesy note per [[MOS:LINK2SECT]]: [[Patent troll]] links here -->\n\nIn 2002, [[Forgent Networks]] asserted that it owned and would enforce patent rights on the JPEG technology, arising from a patent that had been filed on October 27, 1986, and granted on October 6, 1987: {{US patent|4698672}} by Compression Labs' Wen-Hsiung Chen and Daniel J. Klenke.<ref name=\"Lemos\" /><ref>{{cite news |title=Forgent's JPEG Patent |url=https://pmt.sourceforge.io/SVG-patents/jpeg.html |accessdate=13 July 2019 |work=[[SourceForge]] |date=2002}}</ref> While Forgent did not own Compression Labs at the time, Chen later sold Compression Labs to Forgent, before Chen went on to work for [[Cisco]]. This led to Forgent acquiring ownership over the patent.<ref name=\"Lemos\" /> Forgent's 2002 announcement created a furor reminiscent of [[Unisys]]' attempts to assert its rights over the GIF image compression standard.\n\nThe JPEG committee investigated the patent claims in 2002 and were of the opinion that they were invalidated by [[prior art]],<ref>{{cite web |url=http://www.jpeg.org/newsrel1.html |title=Concerning recent patent claims |website=Jpeg.org |date=2002-07-19 |accessdate=2011-05-29 |url-status=dead |archiveurl=https://web.archive.org/web/20070714232941/http://www.jpeg.org/newsrel1.html |archivedate=2007-07-14}}</ref> a view shared by various experts.<ref name=\"Lemos\" /><ref>{{cite web|url=http://www.algovision-luratech.com/company/news/patentquarrel.jsp?OnlineShopId=164241031081525276 |title=JPEG and JPEG2000&nbsp;\u2013 Between Patent Quarrel and Change of Technology |accessdate=2017-04-16 |url-status=dead |archiveurl=https://web.archive.org/web/20040817154508/http://www.algovision-luratech.com/company/news/patentquarrel.jsp?OnlineShopId=164241031081525276 |archivedate=August 17, 2004}}</ref> The patent describes an image compression algorithm based on the discrete cosine transform (DCT),<ref name=\"Lemos\" /> a lossy image compression technique that originated from a 1974 paper by Nasir Ahmed, T. Natarajan and [[K. R. Rao]].<ref name=\"w3\" /><ref name=\"Heise\" /><ref name=\"Ahmed Discrete\" /> Wen-Hsiung Chen further developed their DCT technique, describing a fast DCT algorithm in a 1977 paper with C.H. Smith and S.C. Fralick.<ref name=\"Chen\" /><ref name=\"Lemos\" /> The 1992 JPEG specification cites both the 1974 Ahmed paper and the 1977 Chen paper for its DCT algorithm, as well as a 1984 paper by Chen and W.K. Pratt for its [[Quantization (signal processing)|quantization]] algorithm.<ref name=\"w3\" /><ref name=\"Chen1984\" /> Compression Labs was founded by Chen, and was the first company to commercialize DCT technology.<ref>{{cite journal |last1=Stankovi\u0107 |first1=Radomir S. |last2=Astola |first2=Jaakko T. |title=Reminiscences of the Early Work in DCT: Interview with K.R. Rao |journal=Reprints from the Early Days of Information Sciences |date=2012 |volume=60 |url=http://ticsp.cs.tut.fi/reports/ticsp-report-60-reprint-rao-corrected.pdf |accessdate=13 October 2019}}</ref> By the time Chen had filed his patent for a DCT-based image compression algorithm with Klenke in 1986, most of what would later become the JPEG standard had already been formulated in prior literature.<ref name=\"Lemos\" /> JPEG representative Richard Clark also claimed that Chen himself sat in one of the JPEG committees, but Forgent denied this claim.<ref name=\"Lemos\" />\n\nBetween 2002 and 2004, Forgent was able to obtain about US$105 million by licensing their patent to some 30 companies. In April 2004, Forgent sued 31 other companies to enforce further license payments. In July of the same year, a consortium of 21 large computer companies filed a countersuit, with the goal of invalidating the patent. In addition, Microsoft launched a separate lawsuit against Forgent in April 2005.<ref>{{cite web|title=Graphics patent suit fires back at Microsoft|publisher=[[CNET News]]|first=Dawn|last=Kawamoto|date=April 22, 2005|url=http://news.cnet.com/2100-1025_3-5681112.html|accessdate=2009-01-28}}</ref> In February 2006, the [[United States Patent and Trademark Office]] agreed to re-examine Forgent's JPEG patent at the request of the [[Public Patent Foundation]].<ref>{{cite web |title=Trademark Office Re-examines Forgent JPEG Patent |website=Publish.com |date=February 3, 2006 |url=http://www.publish.com/c/a/Graphics-Tools/Trademark-Office-Reexamines-Forgent-JPEG-Patent/ |accessdate=2009-01-28}}</ref> On May 26, 2006 the USPTO found the patent invalid based on prior art. The USPTO also found that Forgent knew about the prior art, yet it intentionally avoided telling the Patent Office. This makes any appeal to reinstate the patent highly unlikely to succeed.<ref>{{cite web |title=USPTO: Broadest Claims Forgent Asserts Against JPEG Standard Invalid |website=[[Groklaw.net]] |date=May 26, 2006 |url=http://www.groklaw.net/article.php?story=20060526105754880 |accessdate=2007-07-21}}</ref>\n\nForgent also possesses a similar patent granted by the [[European Patent Office]] in 1994, though it is unclear how enforceable it is.<ref>{{cite web|url=http://gauss.ffii.org/PatentView/EP266049 |title=Coding System for Reducing Redundancy |website=Gauss.ffii.org |date= |accessdate=2011-05-29}}</ref>\n\nAs of October 27, 2006, the U.S. patent's 20-year term appears to have expired, and in November 2006, Forgent agreed to abandon enforcement of patent claims against use of the JPEG standard.<ref>{{cite web |title=JPEG Patent Claim Surrendered |publisher=[[Public Patent Foundation]] |date=November 2, 2006 |url=http://www.pubpat.org/jpegsurrendered.htm |accessdate=2006-11-03}}</ref>\n\nThe JPEG committee has as one of its explicit goals that their standards (in particular their baseline methods) be implementable without payment of license fees, and they have secured appropriate license rights for their JPEG 2000 standard from over 20 large organizations.\n\nBeginning in August 2007, another company, Global Patent Holdings, LLC claimed that its patent ({{US patent|5,253,341}}) issued in 1993, is infringed by the downloading of JPEG images on either a website or through e-mail. If not invalidated, this patent could apply to any website that displays JPEG images. The patent was under reexamination by the U.S. Patent and Trademark Office from 2000\u20132007; in July 2007, the Patent Office revoked all of the original claims of the patent but found that an additional claim proposed by Global Patent Holdings (claim 17) was valid.<ref>{{Cite web|url=http://www.uspto.gov/web/patents/patog/week30/OG/html/1320-4/US05253341-20070724.html|archiveurl=https://web.archive.org/web/20080602141045/http://www.uspto.gov/web/patents/patog/week30/OG/html/1320-4/US05253341-20070724.html|url-status=dead|title=Ex Parte Reexamination Certificate for U.S. Patent No. 5,253,341|archivedate=June 2, 2008}}</ref>  Global Patent Holdings then filed a number of lawsuits based on claim 17 of its patent.\n\nIn its first two lawsuits following the reexamination, both filed in Chicago, Illinois, Global Patent Holdings sued the [[Green Bay Packers]], [[CDW]], [[Motorola]], [[Apple Inc.|Apple]], [[Orbitz]], [[Officemax]], [[Caterpillar Inc.|Caterpillar]], [[Kraft]] and [[Peapod]] as defendants. A third lawsuit was filed on December 5, 2007 in South Florida against [[ADT Security Services]], [[AutoNation]], [[Fanjul brothers|Florida Crystals]] Corp., HearUSA, [[MovieTickets.com]], [[Ocwen Financial Corp.]] and [[Tire Kingdom]], and a fourth lawsuit on January 8, 2008 in South Florida against the [[Boca Raton Resort & Club]]. A fifth lawsuit was filed against Global Patent Holdings in Nevada. That lawsuit was filed by [[Zappos.com]], Inc., which was allegedly threatened by Global Patent Holdings, and sought a judicial declaration that the '341 patent is invalid and not infringed.\n\nGlobal Patent Holdings had also used the '341 patent to sue or threaten outspoken critics of broad software patents, including Gregory Aharonian<ref>{{cite web|author=Workgroup |url=http://eupat.ffii.org/pikta/xrani/rozmanith/index.en.html |title=Rozmanith: Using Software Patents to Silence Critics |website=Eupat.ffii.org |accessdate=2011-05-29 |url-status=dead |archiveurl=https://web.archive.org/web/20110716123228/http://eupat.ffii.org/pikta/xrani/rozmanith/index.en.html |archivedate=2011-07-16}}</ref> and the anonymous operator of a website blog known as the \"[[Patent Troll Tracker]].\"<ref>{{cite web|url=http://www.law.com/jsp/article.jsp?id=1196762670106 |title=A Bounty of $5,000 to Name Troll Tracker: Ray Niro Wants To Know Who Is saying All Those Nasty Things About Him |website=Law.com |date= |accessdate=2011-05-29}}</ref> On December 21, 2007, patent lawyer Vernon Francissen of Chicago asked the U.S. Patent and Trademark Office to reexamine the sole remaining claim of the '341 patent on the basis of new prior art.<ref>{{cite web|last=Reimer |first=Jeremy |url=https://arstechnica.com/news.ars/post/20080205-hunting-trolls-uspto-asked-to-reexamine-broad-image-patent.html |title=Hunting trolls: USPTO asked to reexamine broad image patent |website=[[Arstechnica.com]] |date=2008-02-05 |accessdate=2011-05-29}}</ref>\n\nOn March 5, 2008, the U.S. Patent and Trademark Office agreed to reexamine the '341 patent, finding that the new prior art raised substantial new questions regarding the patent's validity.<ref>[[commons:Image:2008-03-05 USPTO Determination Granting Reexam of 5,253,341 C1.pdf|U.S. Patent Office&nbsp;\u2013 Granting Reexamination on 5,253,341 C1]]</ref> In light of the reexamination, the accused infringers in four of the five pending lawsuits have filed motions to suspend (stay) their cases until completion of the U.S. Patent and Trademark Office's review of the '341 patent. On April 23, 2008, a judge presiding over the two lawsuits in Chicago, Illinois granted the motions in those cases.<ref>{{cite web|url=http://www.techdirt.com/articles/20080427/143205960.shtml |title=Judge Puts JPEG Patent On Ice |website=Techdirt.com |date=2008-04-30 |accessdate=2011-05-29}}</ref> On July 22, 2008, the Patent Office issued the first \"Office Action\" of the second reexamination, finding the claim invalid based on nineteen separate grounds.<ref>{{cite web|url=http://techdirt.com/articles/20080731/0337491852.shtml |title=JPEG Patent's Single Claim Rejected (And Smacked Down For Good Measure) |website=[[Techdirt.com]] |date=2008-08-01 |accessdate=2011-05-29}}</ref> On Nov. 24, 2009, a Reexamination Certificate was issued cancelling all claims.\n\nBeginning in 2011 and continuing as of early 2013, an entity known as Princeton Digital Image Corporation,<ref>{{cite web |author=Workgroup |url=http://www.princetondigitalimage.com/ |title=Princeton Digital Image Corporation Home Page |date= |accessdate=2013-05-01 |archive-url=https://archive.is/20130411084058/http://www.princetondigitalimage.com/ |archive-date=2013-04-11 |url-status=dead }}</ref> based in Eastern Texas, began suing large numbers of companies for alleged infringement of {{US patent|4813056}}.  Princeton claims that the JPEG image compression standard infringes the '056 patent and has sued large numbers of websites, retailers, camera and device manufacturers and resellers.  The patent was originally owned and assigned to General Electric.  The patent expired in December 2007, but Princeton has sued large numbers of companies for \"past infringement\" of this patent.  (Under U.S. patent laws, a patent owner can sue for \"past infringement\" up to six years before the filing of a lawsuit, so Princeton could theoretically have continued suing companies until December 2013.)  As of March 2013, Princeton had suits pending in New York and Delaware against more than 55 companies.  General Electric's involvement in the suit is unknown, although court records indicate that it assigned the patent to Princeton in 2009 and retains certain rights in the patent.<ref>{{cite web|author=Workgroup |url=http://patentlaw.jmbm.com/2013/04/hps-motion-to-dismiss-for-lack.html/ |archive-url=https://web.archive.org/web/20160309142416/http://patentlaw.jmbm.com/2013/04/hps-motion-to-dismiss-for-lack.html |url-status=dead |archive-date=2016-03-09 |title=Article on Princeton Court Ruling Regarding GE License Agreement |accessdate=2013-05-01}}</ref>\n\n== Typical usage ==\nThe JPEG compression algorithm operates at its best on photographs and paintings of realistic scenes with smooth variations of tone and color. For web usage, where reducing the amount of data used for an image is important for responsive presentation, JPEG's compression benefits make JPEG popular. JPEG/Exif is also the most common format saved by digital cameras.\n\nHowever, JPEG is not well suited for line drawings and other textual or iconic graphics, where the sharp contrasts between adjacent pixels can cause noticeable artifacts. Such images are better saved in a [[Lossless data compression#Graphics|lossless graphics format]] such as [[TIFF]], [[Graphics Interchange Format|GIF]], [[Portable Network Graphics|PNG]], or a [[raw image format]]. The JPEG standard includes a lossless coding mode, but that mode is not supported in most products.\n\nAs the typical use of JPEG is a lossy compression method, which reduces the image fidelity, it is inappropriate for exact reproduction of imaging data (such as some scientific and medical imaging applications and certain technical [[image processing]] work).\n\nJPEG is also not well suited to files that will undergo multiple edits, as some image quality is lost each time the image is recompressed, particularly if the image is cropped or shifted, or if encoding parameters are changed&nbsp;\u2013 see [[digital generation loss]] for details. To prevent image information loss during sequential and repetitive editing, the first edit can be saved in a lossless format, subsequently edited in that format, then finally published as JPEG for distribution.\n\n== JPEG compression ==\nJPEG uses a lossy form of compression based on the [[discrete cosine transform]] (DCT). This mathematical operation converts each frame/field of the video source from the spatial (2D) domain into the [[frequency domain]] (a.k.a. transform domain). A perceptual model based loosely on the human psychovisual system discards high-frequency information, i.e. sharp transitions in intensity, and [[color hue]]. In the transform domain, the process of reducing information is called quantization. In simpler terms, quantization is a method for optimally reducing a large number scale (with different occurrences of each number) into a smaller one, and the transform-domain is a convenient representation of the image because the high-frequency coefficients, which contribute less to the overall picture than other coefficients, are characteristically small-values with high compressibility. The quantized coefficients are then sequenced and losslessly packed into the output [[bitstream]]. Nearly all software implementations of JPEG permit user control over the [[compression ratio]] (as well as other optional parameters), allowing the user to trade off picture-quality for smaller file size. In embedded applications (such as miniDV, which uses a similar DCT-compression scheme), the parameters are pre-selected and fixed for the application.\n\nThe compression method is usually lossy, meaning that some original image information is lost and cannot be restored, possibly affecting image quality. There is an optional [[Lossless JPEG|lossless]] mode defined in the JPEG standard. However, this mode is not widely supported in products.\n\n{{anchor|Progressive JPEG}}\nThere is also an [[interlace (bitmaps)|interlaced]] ''progressive'' JPEG format, in which data is compressed in multiple passes of progressively higher detail. This is ideal for large images that will be displayed while downloading over a slow connection, allowing a reasonable preview after receiving only a portion of the data. However, support for progressive JPEGs is not universal. When progressive JPEGs are received by programs that do not support them (such as versions of [[Internet Explorer for Mac|Internet Explorer]] before [[Windows 7]])<ref>{{cite web |url=http://msdn.microsoft.com/en-us/library/ee720036(v=vs.85).aspx | title = Progressive Decoding Overview | accessdate = 2012-03-23 | work = Microsoft Developer Network | publisher = Microsoft}}</ref> the software displays the image only after it has been completely downloaded.\n\nThere are also many [[medical imaging]], traffic and camera applications that create and process 12-bit JPEG images both grayscale and color. 12-bit JPEG format is included in an Extended part of the JPEG specification. The libjpeg codec supports 12-bit JPEG and there even exists a high-performance version.<ref>{{Cite web | last = Fastvideo | title = 12-bit JPEG encoder on GPU |date = May 2019|url= https://www.fastcompression.com/products/12-bit-jpeg-codec.htm | accessdate = 2019-05-06}}</ref>\n\n=== Lossless editing ===\n{{See also|jpegtran}}\n\nA number of alterations to a JPEG image can be performed losslessly (that is, without recompression and the associated quality loss) as long as the image size is a multiple of 1 MCU block (Minimum Coded Unit) (usually 16 pixels in both directions, for 4:2:0 [[chroma subsampling]]). Utilities that implement this include:\n* <code>[[jpegtran]]</code> and its GUI, Jpegcrop.\n* <code>[[IrfanView]]</code> using \"JPG Lossless Crop (PlugIn)\" and \"JPG Lossless Rotation (PlugIn)\", which require installing the JPG_TRANSFORM plugin.\n* <code>[[FastStone Image Viewer]]</code> using \"Lossless Crop to File\" and \"JPEG Lossless Rotate\".\n* <code>[[XnViewMP]]</code> using \"JPEG lossless transformations\".\n* <code>[[ACDSee]]</code> supports lossless rotation (but not lossless cropping) with its \"Force lossless JPEG operations\" option.\n\nBlocks can be rotated in 90-degree increments, flipped in the horizontal, vertical and diagonal axes and moved about in the image. Not all blocks from the original image need to be used in the modified one.\n\nThe top and left edge of a JPEG image must lie on an 8&nbsp;\u00d7&nbsp;8 pixel block boundary, but the bottom and right edge need not do so. This limits the possible '''lossless crop''' operations, and also prevents flips and rotations of an image whose bottom or right edge does not lie on a block boundary for all channels (because the edge would end up on top or left, where&nbsp;\u2013 as aforementioned&nbsp;\u2013 a block boundary is obligatory).\n\nRotations where the image width and height not a multiple of 8 or 16 (depending upon the chroma subsampling), are not lossless. Rotating such an image causes the blocks to be recomputed which results in loss of quality.<ref>{{cite web|url=http://petapixel.com/2012/08/14/why-you-should-always-rotate-original-jpeg-photos-losslessly/|title=Why You Should Always Rotate Original JPEG Photos Losslessly|date=|website=Petapixel.com|access-date=16 October 2017}}</ref>\n\nWhen using lossless cropping, if the bottom or right side of the crop region is not on a block boundary, then the rest of the data from the partially used blocks will still be present in the cropped file and can be recovered. It is also possible to transform between baseline and progressive formats without any loss of quality, since the only difference is the order in which the coefficients are placed in the file.\n\nFurthermore, several JPEG images can be losslessly joined together, as long as they were saved with the same quality and the edges coincide with block boundaries.\n\n== JPEG files ==\n<!-- This section is targeted by the redirect [[JPEG Interchange Format]] -->\n\nThe [[file format]] known as \"JPEG Interchange Format\" (JIF) is specified in Annex B of the standard. However, this \"pure\" file format is rarely used, primarily because of the difficulty of programming encoders and decoders that fully implement all aspects of the standard and because of certain shortcomings of the standard:\n* Color space definition\n* Component sub-sampling registration\n* Pixel aspect ratio definition.\n\nSeveral additional standards have evolved to address these issues. The first of these, released in 1992, was the [[JPEG File Interchange Format]] (or JFIF), followed in recent years by [[Exchangeable image file format]] (Exif) and [[International Color Consortium|ICC]] [[ICC Profile|color profiles]]. Both of these formats use the actual JIF byte layout, consisting of different ''markers'', but in addition, employ one of the JIF standard's extension points, namely the ''application markers'': JFIF uses APP0, while Exif uses APP1. Within these segments of the file that were left for future use in the JIF standard and are not read by it, these standards add specific metadata.\n\nThus, in some ways, JFIF is a cut-down version of the JIF standard in that it specifies certain constraints (such as not allowing all the different encoding modes), while in other ways, it is an extension of JIF due to the added metadata. The documentation for the original JFIF standard states:<ref>{{cite web |url= http://www.w3.org/Graphics/JPEG/jfif3.pdf | title = JFIF File Format as PDF}}</ref>\n\n:''JPEG File Interchange Format is a minimal file format which enables JPEG bitstreams to be exchanged between a wide variety of platforms and applications. This minimal format does not include any of the advanced features found in the TIFF JPEG specification or any application specific file format. Nor should it, for the only purpose of this simplified format is to allow the exchange of JPEG compressed images.''\n\nImage files that employ JPEG compression are commonly called \"JPEG files\", and are stored in variants of the JIF image format. Most image capture devices (such as digital cameras) that output JPEG are actually creating files in the Exif format, the format that the camera industry has standardized on for metadata interchange. On the other hand, since the Exif standard does not allow color profiles, most image editing software stores JPEG in JFIF format, and also includes the APP1 segment from the Exif file to include the metadata in an almost-compliant way; the JFIF standard is interpreted somewhat flexibly.<ref>{{cite web|url=http://www.faqs.org/faqs/jpeg-faq/part1/|title=JPEG image compression FAQ|author=Tom Lane|date=1999-03-29|accessdate=2007-09-11}} (q. 14: \"Why all the argument about file formats?\")</ref>\n\nStrictly speaking, the JFIF and Exif standards are incompatible, because each specifies that its marker segment (APP0 or APP1, respectively) appear first. In practice, most JPEG files contain a JFIF marker segment that precedes the Exif header. This allows older readers to correctly handle the older format JFIF segment, while newer readers also decode the following Exif segment, being less strict about requiring it to appear first.\n\n=== JPEG filename extensions ===\nThe most common filename extensions for files employing JPEG compression are '''{{code|.jpg}}''' and '''{{code|.jpeg}}''', though {{code|.jpe}}, {{code|.jfif}} and {{code|.jif}} are also used. It is also possible for JPEG data to be embedded in other file types&nbsp;\u2013 [[Tagged Image File Format|TIFF]] encoded files often embed a JPEG image as a [[thumbnail]] of the main image; and MP3 files can contain a JPEG of [[cover art]] in the [[ID3v2]] tag.\n\n=== Color profile ===\nMany JPEG files embed an [[ICC profile|ICC color profile]] ([[color space]]). Commonly used color profiles include [[sRGB color space|sRGB]] and [[Adobe RGB color space|Adobe RGB]]. Because these color spaces use a non-linear transformation, the [[dynamic range]] of an 8-bit JPEG file is about 11 [[f-number|stops]]; see [[gamma curve]].\n\n== Syntax and structure ==\nA JPEG image consists of a sequence of ''segments'', each beginning with a ''marker'', each of which begins with a 0xFF byte, followed by a byte indicating what kind of marker it is. Some markers consist of just those two bytes; others are followed by two bytes (high then low), indicating the length of marker-specific payload data that follows. (The length includes the two bytes for the length, but not the two bytes for the marker.) Some markers are followed by [[Entropy encoding|entropy-coded]] data; the length of such a marker does not include the entropy-coded data. Note that consecutive 0xFF bytes are used as fill bytes for [[Data padding|padding]] purposes, although this fill byte padding should only ever take place for markers immediately following entropy-coded scan data (see JPEG specification section B.1.1.2 and E.1.2 for details; specifically \"In all cases where markers are appended after the compressed data, optional 0xFF fill bytes may precede the marker\").\n\nWithin the entropy-coded data, after any 0xFF byte, a 0x00 byte is inserted by the encoder before the next byte, so that there does not appear to be a marker where none is intended, preventing framing errors. Decoders must skip this 0x00 byte. This technique, called [[byte stuffing]] (see JPEG specification section F.1.2.3), is only applied to the entropy-coded data, not to marker payload data. Note however that entropy-coded data has a few markers of its own; specifically the Reset markers (0xD0 through 0xD7), which are used to isolate independent chunks of entropy-coded data to allow parallel decoding, and encoders are free to insert these Reset markers at regular intervals (although not all encoders do this).\n\n{| class=\"wikitable\"\n|+ Common JPEG markers<ref>{{cite web |url= http://www.digicamsoft.com/itu/itu-t81-36.html | title = ISO/IEC 10918-1 : 1993(E) p.36}}</ref>\n! Short name\n! Bytes\n! Payload\n! Name\n! Comments\n|-\n! SOI\n| 0xFF, 0xD8 || ''none'' || Start Of Image\n|\n|-\n! SOF0\n| 0xFF, 0xC0 || ''variable size'' || Start Of Frame (baseline DCT)\n| Indicates that this is a baseline DCT-based JPEG, and specifies the width, height, number of components, and component subsampling (e.g., 4:2:0).\n|-\n! SOF2\n| 0xFF, 0xC2 || ''variable size'' || Start Of Frame (progressive DCT)\n| Indicates that this is a progressive DCT-based JPEG, and specifies the width, height, number of components, and component subsampling (e.g., 4:2:0).\n|-\n! DHT\n| 0xFF, 0xC4 || ''variable size'' || Define Huffman Table(s)\n| Specifies one or more Huffman tables.\n|-\n! DQT\n| 0xFF, 0xDB || ''variable size'' || Define Quantization Table(s)\n| Specifies one or more quantization tables.\n|-\n! DRI\n| 0xFF, 0xDD || 4 bytes || Define Restart Interval\n| Specifies the interval between RST''n'' markers, in Minimum Coded Units (MCUs). This marker is followed by two bytes indicating the fixed size so it can be treated like any other variable size segment.\n|-\n! SOS\n| 0xFF, 0xDA || ''variable size'' || Start Of Scan\n| Begins a top-to-bottom scan of the image. In baseline DCT JPEG images, there is generally a single scan. Progressive DCT JPEG images usually contain multiple scans. This marker specifies which slice of data it will contain, and is immediately followed by entropy-coded data.\n|-\n! RST''n''\n| 0xFF, 0xD''n'' (''n''=0..7) || ''none'' || Restart\n| Inserted every ''r'' macroblocks, where ''r'' is the restart interval set by a DRI marker. Not used if there was no DRI marker. The low three bits of the marker code cycle in value from 0 to 7.\n|-\n! APP''n''\n| 0xFF, 0xE''n'' || ''variable size'' || Application-specific\n| For example, an Exif JPEG file uses an APP1 marker to store metadata, laid out in a structure based closely on [[TIFF]].\n|-\n! COM\n| 0xFF, 0xFE || ''variable size'' || Comment\n| Contains a text comment.\n|-\n! EOI\n| 0xFF, 0xD9 || ''none'' || End Of Image\n|\n|}\n\nThere are other ''Start Of Frame'' markers that introduce other kinds of JPEG encodings.\n\nSince several vendors might use the same APP''n'' marker type, application-specific markers often begin with a standard or vendor name (e.g., \"Exif\" or \"Adobe\") or some other identifying string.\n\nAt a restart marker, block-to-block predictor variables are reset, and the bitstream is synchronized to a byte boundary. Restart markers provide means for recovery after bitstream error, such as transmission over an unreliable network or file corruption. Since the runs of macroblocks between restart markers may be independently decoded, these runs may be decoded in parallel.\n\n== JPEG codec example ==\n{{Unreferenced section|date=December 2019}}\nAlthough a JPEG file can be encoded in various ways, most commonly it is done with JFIF encoding. The encoding process consists of several steps:\n\n# The representation of the colors in the image is converted from [[RGB color model|RGB]] to [[YCbCr|{{YCbCr}}]], consisting of one [[Luma (video)|luma]] component (Y'), representing brightness, and two [[chrominance|chroma]] components, (C<sub>B</sub> and C<sub>R</sub>), representing color. This step is sometimes skipped.\n# The resolution of the chroma data is reduced, usually by a factor of 2 or 3. This reflects the fact that the eye is less sensitive to fine color details than to fine brightness details.\n# The image is split into blocks of 8\u00d78 pixels, and for each block, each of the Y, C<sub>B</sub>, and C<sub>R</sub> data undergoes the discrete cosine transform (DCT). A DCT is similar to a [[Fourier transform]] in the sense that it produces a kind of spatial frequency spectrum.\n# The amplitudes of the frequency components are quantized. Human vision is much more sensitive to small variations in color or brightness over large areas than to the strength of high-frequency brightness variations. Therefore, the magnitudes of the high-frequency components are stored with a lower accuracy than the low-frequency components. The quality setting of the encoder (for example 50 or 95 on a scale of 0\u2013100 in the Independent JPEG Group's library<ref>{{cite web |url= http://apodeline.free.fr/DOC/libjpeg/libjpeg-3.html | title = Advanced Features: Compression parameter selection | work = Using the IJG JPEG Library | author = Thomas G. Lane.}}</ref>) affects to what extent the resolution of each frequency component is reduced. If an excessively low quality setting is used, the high-frequency components are discarded altogether.\n# The resulting data for all 8\u00d78 blocks is further compressed with a lossless algorithm, a variant of [[Huffman encoding]].\nThe decoding process reverses these steps, except the ''quantization'' because it is irreversible. In the remainder of this section, the encoding and decoding processes are described in more detail.\n\n=== Encoding ===\nMany of the options in the JPEG standard are not commonly used, and as mentioned above, most image software uses the simpler JFIF format when creating a JPEG file, which among other things specifies the encoding method. Here is a brief description of one of the more common methods of encoding when applied to an input that has 24 [[bits per pixel]] (eight each of red, green, and blue). This particular option is a [[lossy data compression]] method.\n\n==== Color space transformation ====\nFirst, the image should be converted from RGB into a different color space called [[YCbCr|{{YCbCr}}]] (or, informally, YCbCr). It has three components Y', C<sub>B</sub> and C<sub>R</sub>: the Y' component represents the brightness of a pixel, and the C<sub>B</sub> and C<sub>R</sub> components represent the [[chrominance]] (split into blue and red components). This is basically the same color space as used by [[digital television|digital color television]] as well as digital video including [[DVD Video|video DVDs]], and is similar to the way color is represented in analog [[PAL]] video and [[Multiplexed Analogue Components|MAC]] (but not by analog [[NTSC]], which uses the [[YIQ]] color space). The {{YCbCr}} color space conversion allows greater compression without a significant effect on perceptual image quality (or greater perceptual image quality for the same compression). The compression is more efficient because the brightness information, which is more important to the eventual perceptual quality of the image, is confined to a single channel. This more closely corresponds to the perception of color in the human visual system. The color transformation also improves compression by statistical [[decorrelation]].\n\nA particular conversion to {{YCbCr}} is specified in the JFIF standard, and should be performed for the resulting JPEG file to have maximum compatibility. However, some JPEG implementations in \"highest quality\" mode do not apply this step and instead keep the color information in the RGB color model,<ref>{{Cite book|url=https://books.google.com/?id=bYxMVVzdV80C&lpg=PA53&dq=A%20particular%20conversion%20to%20Y%E2%80%B2CBCR%20is%20specified%20in%20the%20JFIF%20standard,%20and%20should%20be%20performed%20for%20the%20resulting%20JPEG%20file%20to%20have%20maximum%20compatibility.&pg=PA53#v=onepage&q=A%20particular%20conversion%20to%20Y%E2%80%B2CBCR%20is%20specified%20in%20the%20JFIF%20standard,%20and%20should%20be%20performed%20for%20the%20resulting%20JPEG%20file%20to%20have%20maximum%20compatibility.%20A%20particular%20conversion%20to%20Y%E2%80%B2CBCR%20is%20specified%20in%20the%20JFIF%20standard,%20and%20should%20be%20performed%20for%20the%20resulting%20JPEG%20file%20to%20have%20maximum%20compatibility.%20%20A%20particular%20conversion%20to%20Y%E2%80%B2CBCR%20is%20specified%20in%20the%20JFIF%20standard,%20and%20should%20be%20performed%20for%20the%20resulting%20JPEG%20file%20to%20have%20maximum%20compatibility.%20&f=false|title=E \u2013 Learning Modules: Dlr Associates Series|last=Ryan|first=Dan|date=2012-06-20|publisher=AuthorHouse|isbn=978-1-4685-7520-0|language=en}}</ref> where the image is stored in separate channels for red, green and blue brightness components. This results in less efficient compression, and would not likely be used when file size is especially important.\n\n==== Downsampling ====\n{{Unreferenced section|date=December 2019}}\nDue to the densities of color- and brightness-sensitive receptors in the human eye, humans can see considerably more fine detail in the brightness of an image (the Y' component) than in the hue and color saturation of an image (the Cb and Cr components). Using this knowledge, encoders can be designed to compress images more efficiently.\n\nThe transformation into the [[YCbCr|{{YCbCr}} color model]] enables the next usual step, which is to reduce the spatial resolution of the Cb and Cr components (called \"[[downsampling]]\" or \"chroma subsampling\"). The ratios at which the downsampling is ordinarily done for JPEG images are [[YUV 4:4:4|4:4:4]] (no downsampling), [[YUV 4:2:2|4:2:2]] (reduction by a factor of 2 in the horizontal direction), or (most commonly) [[YUV 4:2:0|4:2:0]] (reduction by a factor of 2 in both the horizontal and vertical directions). For the rest of the compression process, Y', Cb and Cr are processed separately and in a very similar manner.\n\n==== Block splitting ====\n{{Unreferenced section|date=December 2019}}\nAfter [[Chroma Subsampling|subsampling]], each [[Channel (digital image)|channel]] must be split into 8\u00d78 blocks. Depending on chroma subsampling, this yields Minimum Coded Unit (MCU) blocks of size 8\u00d78 (4:4:4&nbsp;\u2013 no subsampling), 16\u00d78 (4:2:2), or most commonly 16\u00d716 (4:2:0). In [[video compression]] MCUs are called [[macroblock]]s.\n\nIf the data for a channel does not represent an integer number of blocks then the encoder must fill the remaining area of the incomplete blocks with some form of dummy data. Filling the edges with a fixed color (for example, black) can create [[ringing artifact]]s along the visible part of the border;\nrepeating the edge pixels is a common technique that reduces (but does not necessarily completely eliminate) such artifacts, and more sophisticated border filling techniques can also be applied.\n\n==== Discrete cosine transform ====\n[[File:JPEG example subimage.svg|thumb|upright=1.16|The 8\u00d78 sub-image shown in 8-bit grayscale]]\n\nNext, each 8\u00d78 block of each component (Y, Cb, Cr) is converted to a [[frequency-domain]] representation, using a normalized, two-dimensional type-II discrete cosine transform (DCT), see Citation 1 in [[Discrete cosine transform#Citations|discrete cosine transform]]. The DCT is sometimes referred to as \"type-II DCT\" in the context of a family of transforms as in [[Discrete cosine transform#DCT-II|discrete cosine transform]], and the corresponding inverse (IDCT) is denoted as \"type-III DCT\".\n\nAs an example, one such 8\u00d78 8-bit subimage might be:\n\n:<math>\n\\left[\n\\begin{array}{rrrrrrrr}\n 52 & 55 & 61 & 66 & 70 & 61 & 64 & 73 \\\\\n 63 & 59 & 55 & 90 & 109 & 85 & 69 & 72 \\\\\n 62 & 59 & 68 & 113 & 144 & 104 & 66 & 73 \\\\\n 63 & 58 & 71 & 122 & 154 & 106 & 70 & 69 \\\\\n 67 & 61 & 68 & 104 & 126 & 88 & 68 & 70 \\\\\n 79 & 65 & 60 & 70 & 77 & 68 & 58 & 75 \\\\\n 85 & 71 & 64 & 59 & 55 & 61 & 65 & 83 \\\\\n 87 & 79 & 69 & 68 & 65 & 76 & 78 & 94\n\\end{array}\n\\right].\n</math>\n\nBefore computing the DCT of the 8\u00d78 block, its values are shifted from a positive range to one centered on zero. For an 8-bit image, each entry in the original block falls in the range <math>[0, 255]</math>. The midpoint of the range (in this case, the value 128) is subtracted from each entry to produce a data range that is centered on zero, so that the modified range is <math>[-128, 127]</math>. This step reduces the dynamic range requirements in the DCT processing stage that follows.\n\nThis step results in the following values:\n\n:<math>g=\n\\begin{array}{c}\nx \\\\\n\\longrightarrow \\\\\n\\left[\n\\begin{array}{rrrrrrrr}\n -76 & -73 & -67 & -62 & -58 & -67 & -64 & -55 \\\\\n -65 & -69 & -73 & -38 & -19 & -43 & -59 & -56 \\\\\n -66 & -69 & -60 & -15 & 16 & -24 & -62 & -55 \\\\\n -65 & -70 & -57 & -6 & 26 & -22 & -58 & -59 \\\\\n -61 & -67 & -60 & -24 & -2 & -40 & -60 & -58 \\\\\n -49 & -63 & -68 & -58 & -51 & -60 & -70 & -53 \\\\\n -43 & -57 & -64 & -69 & -73 & -67 & -63 & -45 \\\\\n -41 & -49 & -59 & -60 & -63 & -52 & -50 & -34\n\\end{array}\n\\right]\n\\end{array}\n\\Bigg\\downarrow y.\n</math>\n\n[[File:Dctjpeg.png|thumb|upright=0.99|The DCT transforms an 8\u00d78 block of input values to a [[linear combination]] of these 64 patterns. The patterns are referred to as the two-dimensional DCT ''basis functions'', and the output values are referred to as ''transform coefficients''. The horizontal index is <math>u</math> and the vertical index is <math>v</math>.]]\n\nThe next step is to take the two-dimensional DCT, which is given by:\n\n:<math>\\ G_{u,v} =\n \\frac{1}{4}\n \\alpha(u)\n \\alpha(v)\n \\sum_{x=0}^7\n \\sum_{y=0}^7\n g_{x,y}\n \\cos \\left[\\frac{(2x+1)u\\pi}{16} \\right]\n \\cos \\left[\\frac{(2y+1)v\\pi}{16} \\right]\n</math>\n\nwhere\n* <math>\\ u</math> is the horizontal [[spatial frequency]], for the integers <math>\\ 0 \\leq u < 8</math>.\n* <math>\\ v</math> is the vertical spatial frequency, for the integers <math>\\ 0 \\leq v < 8</math>.\n* <math>\n\\alpha(u) =\n\\begin{cases}\n \\frac{1}{\\sqrt{2}}, & \\mbox{if }u=0 \\\\\n 1, & \\mbox{otherwise}\n\\end{cases}\n</math> is a normalizing scale factor to make the transformation [[orthonormal]]\n* <math>\\ g_{x,y}</math> is the pixel value at coordinates <math>\\ (x,y)</math>\n* <math>\\ G_{u,v}</math> is the DCT coefficient at coordinates <math>\\ (u,v).</math>\n\nIf we perform this transformation on our matrix above, we get the following (rounded to the nearest two digits beyond the decimal point):\n\n:<math>G=\n\\begin{array}{c}\nu \\\\\n\\longrightarrow \\\\\n\\left[\n\\begin{array}{rrrrrrrr}\n-415.38 & -30.19 & -61.20 & 27.24 & 56.12 & -20.10 & -2.39 & 0.46 \\\\\n4.47 & -21.86 & -60.76 & 10.25 & 13.15 & -7.09 & -8.54 & 4.88 \\\\\n-46.83 & 7.37 & 77.13 & -24.56 & -28.91 & 9.93 & 5.42 & -5.65 \\\\\n-48.53 & 12.07 & 34.10 & -14.76 & -10.24 & 6.30 & 1.83 & 1.95 \\\\\n12.12 & -6.55 & -13.20 & -3.95 & -1.87 & 1.75 & -2.79 & 3.14 \\\\\n-7.73 & 2.91 & 2.38 & -5.94 & -2.38 & 0.94 & 4.30 & 1.85 \\\\\n-1.03 & 0.18 & 0.42 & -2.42 & -0.88 & -3.02 & 4.12 & -0.66 \\\\\n-0.17 & 0.14 & -1.07 & -4.19 & -1.17 & -0.10 & 0.50 & 1.68\n\\end{array}\n\\right]\n\\end{array}\n\\Bigg\\downarrow v.\n</math>\n\nNote the top-left corner entry with the rather large magnitude. This is the DC coefficient (also called the constant component), which defines the basic hue for the entire block. The remaining 63 coefficients are the AC coefficients (also called the alternating components).<ref>{{cite web|url=http://forum.doom9.org/showthread.php?p=184647#post184647|title=DC / AC Frequency Questions \u2013 Doom9's Forum|website=forum.doom9.org|accessdate=16 October 2017}}</ref>  The advantage of the DCT is its tendency to aggregate most of the signal in one corner of the result, as may be seen above. The quantization step to follow accentuates this effect while simultaneously reducing the overall size of the DCT coefficients, resulting in a signal that is easy to compress efficiently in the entropy stage.\n\nThe DCT temporarily increases the bit-depth of the data, since the DCT coefficients of an 8-bit/component image take up to 11 or more bits (depending on fidelity of the DCT calculation) to store. This may force the codec to temporarily use 16-bit numbers to hold these coefficients, doubling the size of the image representation at this point; these values are typically reduced back to 8-bit values by the quantization step. The temporary increase in size at this stage is not a performance concern for most JPEG implementations, since typically only a very small part of the image is stored in full DCT form at any given time during the image encoding or decoding process.\n\n==== Quantization ====\n{{Unreferenced section|date=December 2019}}\nThe human eye is good at seeing small differences in [[brightness]] over a relatively large area, but not so good at distinguishing the exact strength of a high frequency brightness variation. This allows one to greatly reduce the amount of information in the high frequency components. This is done by simply dividing each component in the frequency domain by a constant for that component, and then rounding to the nearest integer. This rounding operation is the only lossy operation in the whole process (other than chroma subsampling) if the DCT computation is performed with sufficiently high precision. As a result of this, it is typically the case that many of the higher frequency components are rounded to zero, and many of the rest become small positive or negative numbers, which take many fewer bits to represent.\n\nThe elements in the [[quantization matrix]] control the compression ratio, with larger values producing greater compression.  A typical quantization matrix (for a quality of 50% as specified in the original JPEG Standard), is as follows:\n\n:<math>Q=\n\\begin{bmatrix}\n 16 & 11 & 10 & 16 & 24 & 40 & 51 & 61 \\\\\n 12 & 12 & 14 & 19 & 26 & 58 & 60 & 55 \\\\\n 14 & 13 & 16 & 24 & 40 & 57 & 69 & 56 \\\\\n 14 & 17 & 22 & 29 & 51 & 87 & 80 & 62 \\\\\n 18 & 22 & 37 & 56 & 68 & 109 & 103 & 77 \\\\\n 24 & 35 & 55 & 64 & 81 & 104 & 113 & 92 \\\\\n 49 & 64 & 78 & 87 & 103 & 121 & 120 & 101 \\\\\n 72 & 92 & 95 & 98 & 112 & 100 & 103 & 99\n\\end{bmatrix}.\n</math>\n\nThe quantized DCT coefficients are computed with\n\n:<math>B_{j,k} = \\mathrm{round} \\left( \\frac{G_{j,k}}{Q_{j,k}} \\right) \\mbox{ for } j=0,1,2,\\ldots,7; k=0,1,2,\\ldots,7</math>\n\nwhere <math>G</math> is the unquantized DCT coefficients; <math>Q</math> is the quantization matrix above; and <math>B</math> is the quantized DCT coefficients.\n\nUsing this quantization matrix with the DCT coefficient matrix from above results in:\n[[File:idct-animation.gif|frame|Left: a final image is built up from a series of basis functions. Right: each of the DCT basis functions that comprise the image, and the corresponding weighting coefficient. Middle: the basis function, after multiplication by the coefficient: this component is added to the final image. For clarity, the 8\u00d78 macroblock in this example is magnified by 10x using bilinear interpolation.]]\n:<math>B=\n\\left[\n\\begin{array}{rrrrrrrr}\n-26 & -3 & -6 & 2 & 2 & -1 & 0 & 0 \\\\\n0 & -2 & -4 & 1 & 1 & 0 & 0 & 0 \\\\\n-3 & 1 & 5 & -1 & -1 & 0 & 0 & 0 \\\\\n-3 & 1 & 2 & -1 & 0 & 0 & 0 & 0 \\\\\n1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\n\\end{array}\n\\right].\n</math>\n\nFor example, using \u2212415 (the DC coefficient) and rounding to the nearest integer\n\n:<math>\n\\mathrm{round}\n\\left(\n \\frac{-415.37}{16}\n\\right)\n=\n\\mathrm{round}\n\\left(\n -25.96\n\\right)\n=\n-26.\n</math>\n\nNotice that most of the higher-frequency elements of the sub-block (i.e., those with an ''x'' or ''y'' spatial frequency greater than 4) are quantized into zero values.\n\n==== Entropy coding ====\n{{Unreferenced section|date=December 2019}}{{Main|Entropy encoding}}\n[[File:JPEG ZigZag.svg|thumb|right|Zigzag ordering of JPEG image components]]\n\nEntropy coding is a special form of [[lossless data compression]]. It involves arranging the image components in a \"[[zigzag]]\" order employing [[run-length encoding]] (RLE) algorithm that groups similar frequencies together, inserting length coding zeros, and then using Huffman coding on what is left.\n\nThe JPEG standard also allows, but does not require, decoders to support the use of arithmetic coding, which is mathematically superior to Huffman coding. However, this feature has rarely been used, as it was historically covered by patents requiring royalty-bearing licenses, and because it is slower to encode and decode compared to Huffman coding. Arithmetic coding typically makes files about 5\u20137% smaller.\n\nThe previous quantized DC coefficient is used to predict the current quantized DC coefficient. The difference between the two is encoded rather than the actual value. The encoding of the 63 quantized AC coefficients does not use such prediction differencing.\n\nThe zigzag sequence for the above quantized coefficients are shown below. (The format shown is just for ease of understanding/viewing.)\n\n:{| style=\"text-align: right\"\n|-\n|style=\"width: 2em\"| \u221226 || style=\"width: 2em\"| || style=\"width: 2em\"| || style=\"width: 2em\"| || style=\"width: 2em\"| || style=\"width: 2em\"| || style=\"width: 2em\"| || style=\"width: 2em\"|\n|-\n| \u22123 || 0\n|-\n| \u22123 || \u22122 || \u22126\n|-\n| 2 || \u22124 || 1 || \u22123\n|-\n| 1 || 1 || 5 || 1 || 2\n|-\n| \u22121 || 1 || \u22121 || 2 || 0 || 0\n|-\n| 0 || 0 || 0 || \u22121 || \u22121 || 0 || 0\n|-\n| 0 || 0 || 0 || 0 || 0 || 0 || 0 || 0\n|-\n| 0 || 0 || 0 || 0 || 0 || 0 || 0\n|-\n| 0 || 0 || 0 || 0 || 0 || 0\n|-\n| 0 || 0 || 0 || 0 || 0\n|-\n| 0 || 0 || 0 || 0\n|-\n| 0 || 0 || 0\n|-\n| 0 || 0\n|-\n| 0\n|}\n\nIf the ''i''-th block is represented by <math>B_i</math> and positions within each block are represented by <math>(p,q)</math> where <math>p = 0, 1, ..., 7</math> and <math>q = 0, 1, ..., 7</math>, then any coefficient in the DCT image can be represented as <math>B_i (p,q)</math>. Thus, in the above scheme, the order of encoding pixels (for the {{mvar|i}}-th block) is <math>B_i (0,0)</math>, <math>B_i (0,1)</math>, <math>B_i (1,0)</math>, <math>B_i (2,0)</math>, <math>B_i (1,1)</math>, <math>B_i (0,2)</math>, <math>B_i (0,3)</math>, <math>B_i (1,2)</math> and so on.\n\n[[File:JPEG process.svg|thumb|upright=1.59|''Baseline sequential'' JPEG encoding and decoding processes]]\n\nThis encoding mode is called baseline ''sequential'' encoding. Baseline JPEG also supports ''progressive'' encoding. While sequential encoding encodes coefficients of a single block at a time (in a zigzag manner), progressive encoding encodes similar-positioned batch of coefficients of all blocks in one go (called a ''scan''), followed by the next batch of coefficients of all blocks, and so on. For example, if the image is divided into N 8\u00d78 blocks <math>B_0,B_1,B_2,...,B_{n-1}</math>, then a 3-scan progressive encoding encodes DC component, <math>B_i (0,0)</math> for all blocks, i.e., for all <math>i = 0, 1, 2, ..., N-1</math>, in first scan. This is followed by the second scan which encoding a few more components (assuming four more components, they are <math>B_i (0,1)</math> to <math>B_i (1,1)</math>, still in a zigzag manner) coefficients of all blocks (so the sequence is: <math>B_0 (0,1),B_0 (1,0),B_0 (2,0),B_0 (1,1),B_1 (0,1),B_1 (1,0),...,B_N (2,0),B_N (1,1)</math>), followed by all the remained coefficients of all blocks in the last scan.\n\nOnce all similar-positioned coefficients have been encoded, the next position to be encoded is the one occurring next in the zigzag traversal as indicated in the figure above. It has been found that ''baseline progressive'' JPEG encoding usually gives better compression as compared to ''baseline sequential'' JPEG due to the ability to use different Huffman tables (see below) tailored for different frequencies on each \"scan\" or \"pass\" (which includes similar-positioned coefficients), though the difference is not too large.\n\nIn the rest of the article, it is assumed that the coefficient pattern generated is due to sequential mode.\n\nIn order to encode the above generated coefficient pattern, JPEG uses Huffman encoding.  The JPEG standard provides general-purpose Huffman tables; encoders may also choose to generate Huffman tables optimized for the actual frequency distributions in images being encoded.\n\nThe process of encoding the zig-zag quantized data begins with a run-length encoding explained below, where:\n* {{mvar|x}} is the non-zero, quantized AC coefficient.\n* ''RUNLENGTH'' is the number of zeroes that came before this non-zero AC coefficient.\n* ''SIZE'' is the number of bits required to represent {{mvar|x}}.\n* ''AMPLITUDE'' is the bit-representation of {{mvar|x}}.\n\nThe run-length encoding works by examining each non-zero AC coefficient {{mvar|x}} and determining how many zeroes came before the previous AC coefficient.  With this information, two symbols are created:\n\n:{| style=\"text-align: center\" class=\"wikitable\"\n|-\n! Symbol 1 || Symbol 2\n|-\n| (RUNLENGTH, SIZE) || (AMPLITUDE)\n|}\n\nBoth ''RUNLENGTH'' and ''SIZE'' rest on the same byte, meaning that each only contains four bits of information.  The higher bits deal with the number of zeroes, while the lower bits denote the number of bits necessary to encode the value of {{mvar|x}}.\n\nThis has the immediate implication of ''Symbol 1'' being only able store information regarding the first 15 zeroes preceding the non-zero AC coefficient.  However, JPEG defines two special Huffman code words.  One is for ending the sequence prematurely when the remaining coefficients are zero (called \"End-of-Block\" or \"EOB\"), and another when the run of zeroes goes beyond 15 before reaching a non-zero AC coefficient.  In such a case where 16 zeroes are encountered before a given non-zero AC coefficient, ''Symbol 1'' is encoded \"specially\" as: (15, 0)(0).\n\nThe overall process continues until \"EOB\"{{snd}} denoted by (0, 0){{snd}} is reached.\n\nWith this in mind, the sequence from earlier becomes:\n\n:(0, 2)(-3);(1, 2)(-3);(0, 1)(-2);(0, 2)(-6);(0, 1)(2);(0, 1)(-4);(0, 1)(1);(0, 2)(-3);(0, 1)(1);(0, 1)(1);\n:(0, 2)(5);(0, 1)(1);(0, 1)(2);(0, 1)(-1);(0, 1)(1);(0, 1)(-1);(0, 1)(2);(5, 1)(-1);(0, 1)(-1);(0, 0);\n\n(The first value in the matrix, \u221226, is the DC coefficient; it is not encoded the same way.  See above.)\n\nFrom here, frequency calculations are made based on occurrences of the coefficients.  In our example block, most of the quantized coefficients are small numbers that are not preceded immediately by a zero coefficient. These more-frequent cases will be represented by shorter code words.\n\n=== Compression ratio and artifacts ===\n[[File:Lichtenstein jpeg difference.png|upright=1.16|thumb|This image shows the pixels that are different between a non-compressed image and the same image JPEG compressed with a quality setting of 50. Darker means a larger difference. Note especially the changes occurring near sharp edges and having a block-like shape.]]\n[[File:Lichtenstein img processing test.png|upright=1.16|thumb|The original image]]\n[[File:Jpegvergroessert.jpg|thumb|upright=0.87|The compressed 8\u00d78 squares are visible in the scaled-up picture, together with other visual artifacts of the [[lossy compression]].]]\n\nThe resulting compression ratio can be varied according to need by being more or less aggressive in the divisors used in the quantization phase. Ten to one compression usually results in an image that cannot be distinguished by eye from the original. A compression ratio of 100:1 is usually possible, but will look distinctly [[Compression artifact|artifacted]] compared to the original. The appropriate level of compression depends on the use to which the image will be put.\n\n{{external media\n|image1=[http://i.cmpnet.com/videsignline/2006/02/algolith-fig2.jpg Illustration of edge busyness]<ref name=\"Dinh and Patry\" />\n}}\n\nThose who use the World Wide Web may be familiar with the irregularities known as compression artifacts that appear in JPEG images, which may take the form of noise around contrasting edges (especially curves and corners), or \"blocky\" images. These are due to the quantization step of the JPEG algorithm. They are especially noticeable around sharp corners between contrasting colors (text is a good example, as it contains many such corners). The analogous artifacts in [[MPEG]] video are referred to as ''[[mosquito noise]],'' as the resulting \"edge busyness\" and spurious dots, which change over time, resemble mosquitoes swarming around the object.<ref name=\"Dinh and Patry\">Phuc-Tue Le Dinh and Jacques Patry. [http://www.videsignline.com/howto/180207350 Video compression artifacts and MPEG noise reduction]. Video Imaging DesignLine. February 24, 2006. Retrieved May 28, 2009.</ref><ref>\"'''3.9 mosquito noise:''' Form of edge busyness distortion sometimes associated with movement, characterized by moving artifacts and/or blotchy noise patterns superimposed over the objects (resembling a mosquito flying around a person's head and shoulders).\" [http://eu.sabotage.org/www/ITU/P/P0930e.pdf ITU-T Rec. P.930 (08/96) Principles of a reference impairment system for video] {{webarchive|url=https://web.archive.org/web/20100216033245/http://eu.sabotage.org/www/ITU/P/P0930e.pdf |date=2010-02-16}}</ref>\n\nThese artifacts can be reduced by choosing a lower level of compression; they may be completely avoided by saving an image using a lossless file format, though this will result in a larger file size. The images created with [[Ray tracing (graphics)|ray-tracing]] programs have noticeable blocky shapes on the terrain. Certain low-intensity compression artifacts might be acceptable when simply viewing the images, but can be emphasized if the image is subsequently processed, usually resulting in unacceptable quality. Consider the example below, demonstrating the effect of lossy compression on an [[edge detection]] processing step.\n\n{| class=\"wikitable\" style=\"text-align:center\"\n|-\n! Image !! Lossless compression !! Lossy compression\n|-\n! Original\n| [[File:Lossless-circle.png|100px]] || [[File:Lossy-circle.jpg|100px]]\n|-\n! Processed by<br />[[Canny edge detector]]\n| [[File:Lossless-circle-canny.png|100px]] || [[File:Lossy-circle-canny.png|100px]]\n|}\n\nSome programs allow the user to vary the amount by which individual blocks are compressed. Stronger compression is applied to areas of the image that show fewer artifacts. This way it is possible to manually reduce JPEG file size with less loss of quality.\n\nSince the quantization stage ''always'' results in a loss of information, JPEG standard is always a lossy compression codec. (Information is lost both in quantizing and rounding of the floating-point numbers.) Even if the quantization matrix is a [[matrix of ones]], information will still be lost in the rounding step.\n{{clear}}\n\n=== Decoding ===\n{{Unreferenced section|date=December 2019}}\nDecoding to display the image consists of doing all the above in reverse.\n\nTaking the DCT coefficient matrix (after adding the difference of the DC coefficient back in)\n\n:<math>\n\\left[\n\\begin{array}{rrrrrrrr}\n-26 & -3 & -6 & 2 & 2 & -1 & 0 & 0 \\\\\n0 & -2 & -4 & 1 & 1 & 0 & 0 & 0 \\\\\n-3 & 1 & 5 & -1 & -1 & 0 & 0 & 0 \\\\\n-3 & 1 & 2 & -1 & 0 & 0 & 0 & 0 \\\\\n1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\n\\end{array}\n\\right]\n</math>\n\nand taking the [[Hadamard product (matrices)|entry-for-entry product]] with the quantization matrix from above results in\n\n:<math>\n\\left[\n\\begin{array}{rrrrrrrr}\n-416 & -33 & -60 & 32 & 48 & -40 & 0 & 0 \\\\\n0 & -24 & -56 & 19 & 26 & 0 & 0 & 0 \\\\\n-42 & 13 & 80 & -24 & -40 & 0 & 0 & 0 \\\\\n-42 & 17 & 44 & -29 & 0 & 0 & 0 & 0 \\\\\n18 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\n\\end{array}\n\\right]\n</math>\n\nwhich closely resembles the original DCT coefficient matrix for the top-left portion.\n\nThe next step is to take the two-dimensional inverse DCT (a 2D type-III DCT), which is given by:\n\n<math>f_{x,y} =\n \\frac{1}{4}\n \\sum_{u=0}^7\n \\sum_{v=0}^7\n \\alpha(u) \\alpha(v) F_{u,v}\n \\cos \\left[\\frac{(2x+1)u\\pi}{16} \\right]\n \\cos \\left[\\frac{(2y+1)v\\pi}{16} \\right]\n</math>\n\nwhere\n* <math>\\ x</math> is the pixel row, for the integers <math>\\ 0 \\leq x < 8</math>.\n* <math>\\ y</math> is the pixel column, for the integers <math>\\ 0 \\leq y < 8</math>.\n* <math>\\ \\alpha(u)</math> is defined as above, for the integers <math>\\ 0 \\leq u < 8</math>.\n* <math>\\ F_{u,v}</math> is the reconstructed approximate coefficient at coordinates <math>\\ (u,v).</math>\n* <math>\\ f_{x,y}</math> is the reconstructed pixel value at coordinates <math>\\ (x,y)</math>\n\nRounding the output to integer values (since the original had integer values) results in an image with values (still shifted down by 128)\n\n{{Multiple image|align=right|direction=vertical|image1=JPEG example image.jpg|alt1=|image2=JPEG example image decompressed.jpg|alt2=|width=180|footer=Slight differences are noticeable between the original (top) and decompressed image (bottom), which is most readily seen in the bottom-left corner.}}\n\n:<math>\n\\left[\n\\begin{array}{rrrrrrrr}\n-66 & -63 & -71 & -68 & -56 & -65 & -68 & -46 \\\\\n-71 & -73 & -72 & -46 & -20 & -41 & -66 & -57 \\\\\n-70 & -78 & -68 & -17 & 20 & -14 & -61 & -63 \\\\\n-63 & -73 & -62 & -8 & 27 & -14 & -60 & -58 \\\\\n-58 & -65 & -61 & -27 & -6 & -40 & -68 & -50 \\\\\n-57 & -57 & -64 & -58 & -48 & -66 & -72 & -47 \\\\\n-53 & -46 & -61 & -74 & -65 & -63 & -62 & -45 \\\\\n-47 & -34 & -53 & -74 & -60 & -47 & -47 & -41\n\\end{array}\n\\right]\n</math>\n\nand adding 128 to each entry\n\n:<math>\n\\left[\n\\begin{array}{rrrrrrrr}\n62 & 65 & 57 & 60 & 72 & 63 & 60 & 82 \\\\\n57 & 55 & 56 & 82 & 108 & 87 & 62 & 71 \\\\\n58 & 50 & 60 & 111 & 148 & 114 & 67 & 65 \\\\\n65 & 55 & 66 & 120 & 155 & 114 & 68 & 70 \\\\\n70 & 63 & 67 & 101 & 122 & 88 & 60 & 78 \\\\\n71 & 71 & 64 & 70 & 80 & 62 & 56 & 81 \\\\\n75 & 82 & 67 & 54 & 63 & 65 & 66 & 83 \\\\\n81 & 94 & 75 & 54 & 68 & 81 & 81 & 87\n\\end{array}\n\\right].\n</math>\n\nThis is the decompressed subimage. In general, the decompression process may produce values outside the original input range of <math>[0, 255]</math>. If this occurs, the decoder needs to clip the output values so as to keep them within that range to prevent overflow when storing the decompressed image with the original bit depth.\n\nThe decompressed subimage can be compared to the original subimage (also see images to the right) by taking the difference (original \u2212 uncompressed) results in the following error values:\n\n:<math>\n\\left[\n\\begin{array}{rrrrrrrr}\n-10 & -10 & 4 & 6 & -2 & -2 & 4 & -9 \\\\\n6 & 4 & -1 & 8 & 1 & -2 & 7 & 1 \\\\\n4 & 9 & 8 & 2 & -4 & -10 & -1 & 8 \\\\\n-2 & 3 & 5 & 2 & -1 & -8 & 2 & -1 \\\\\n-3 & -2 & 1 & 3 & 4 & 0 & 8 & -8 \\\\\n8 & -6 & -4 & -0 & -3 & 6 & 2 & -6 \\\\\n10 & -11 & -3 & 5 & -8 & -4 & -1 & -0 \\\\\n6 & -15 & -6 & 14 & -3 & -5 & -3 & 7\n\\end{array}\n\\right]\n</math>\n\nwith an average absolute error of about 5 values per pixels (i.e., <math>\\frac{1}{64} \\sum_{x=0}^7 \\sum_{y=0}^7 |e(x,y)| = 4.8750</math>).\n\nThe error is most noticeable in the bottom-left corner where the bottom-left pixel becomes darker than the pixel to its immediate right.\n\n=== Required precision ===\n{{Unreferenced section|date=December 2019}}\nThe encoding description in the JPEG standard does not fix the precision needed for the output compressed image. However, the JPEG standard (and the similar MPEG standards) includes some precision requirements for the ''de''coding, including all parts of the decoding process (variable length decoding, inverse DCT, dequantization, renormalization of outputs); the output from the reference algorithm must not exceed:\n* a maximum of one bit of difference for each pixel component\n* low mean square error over each 8\u00d78-pixel block\n* very low mean error over each 8\u00d78-pixel block\n* very low mean square error over the whole image\n* extremely low mean error over the whole image\n\nThese assertions are tested on a large set of randomized input images, to handle the worst cases. The former IEEE 1180\u20131990 standard contained some similar precision requirements. The precision has a consequence on the implementation of decoders, and it is critical because some encoding processes (notably used for encoding sequences of images like MPEG) need to be able to construct, on the encoder side, a reference decoded image. In order to support 8-bit precision per pixel component output, dequantization and inverse DCT transforms are typically implemented with at least 14-bit precision in optimized decoders.\n\n== Effects of JPEG compression ==\nJPEG compression artifacts blend well into photographs with detailed non-uniform textures, allowing higher compression ratios. Notice how a higher compression ratio first affects the high-frequency textures in the upper-left corner of the image, and how the contrasting lines become more fuzzy. The very high compression ratio severely affects the quality of the image, although the overall colors and image form are still recognizable. However, the precision of colors suffer less (for a human eye) than the precision of contours (based on luminance). This justifies the fact that images should be first transformed in a color model separating the luminance from the chromatic information, before subsampling the chromatic planes (which may also use lower quality quantization) in order to preserve the precision of the luminance plane with more information bits.\n\n=== Sample photographs ===\n\n[[File:Visual impact of a jpeg compression on Photoshop.jpg|thumb|upright=0.9|Visual impact of a jpeg compression in Photoshop on a picture of 4480x4480 pixels]]\n\nFor information, the uncompressed 24-bit RGB bitmap image below (73,242 pixels) would require 219,726 bytes (excluding all other information headers). The filesizes indicated below include the internal JPEG information headers and some [[metadata]]. For highest quality images (Q=100), about 8.25 bits per color pixel is required{{Citation needed|date=November 2019}}. On grayscale images, a minimum of 6.5 bits per pixel is enough (a comparable Q=100 quality color information requires about 25% more encoded bits). The highest quality image below (Q=100) is encoded at nine bits per color pixel, the medium quality image (Q=25) uses one bit per color pixel. For most applications, the quality factor should not go below 0.75 bit per pixel (Q=12.5), as demonstrated by the low quality image. The image at lowest quality uses only 0.13 bit per pixel, and displays very poor color. This is useful when the image will be displayed in a significantly scaled-down size. A method for creating better quantization matrices for a given image quality using [[PSNR]] instead of the Q factor is described in Minguill\u00f3n & Pujol (2001).<ref>{{cite journal|author=Juli\u00e0 Minguill\u00f3n, Jaume Pujol|title=JPEG standard uniform quantization error modeling with applications to sequential and progressive operation modes|journal=Electronic Imaging|date=April 2001|volume=10|number=2|pages=475\u2013485|hdl=10609/6263|bibcode=2001JEI....10..475M|doi=10.1117/1.1344592|url=http://openaccess.uoc.edu/webapps/o2/bitstream/10609/6263/6/jei-jpeg.pdf}}</ref>\n\n::{| class=\"wikitable\"\n|+ align=\"bottom\"| Note: The above images are not [[Institute of Electrical and Electronics Engineers|IEEE]] / [[ITU-R|CCIR]] / [[European Broadcasting Union|EBU]]&nbsp;[[standard test image|test images]], and the encoder settings are not specified or available.\n|-\n! Image !! Quality !! Size (bytes) !! Compression ratio !! Comment\n|-\n| [[File:JPEG example JPG RIP 100.jpg|80px]]\n| Highest quality (Q&nbsp;=&nbsp;100)\n| 81,447\n| 2.7:1\n| Extremely minor artifacts\n|-\n| [[File:JPEG example JPG RIP 050.jpg|80px]]\n| High quality (Q&nbsp;=&nbsp;50)\n| 14,679\n| 15:1\n| Initial signs of subimage artifacts\n|-\n| [[File:JPEG example JPG RIP 025.jpg|80px]]\n| Medium quality (Q&nbsp;=&nbsp;25)\n| 9,407\n| 23:1\n| Stronger artifacts; loss of high frequency information\n|-\n| [[File:JPEG example JPG RIP 010.jpg|80px]]\n| Low quality (Q&nbsp;=&nbsp;10)\n| 4,787\n| 46:1\n| Severe high frequency loss leads to obvious artifacts on subimage boundaries (\"macroblocking\")\n|-\n| [[File:JPEG example JPG RIP 001.jpg|80px]]\n| Lowest quality (Q&nbsp;=&nbsp;1)\n| 1,523\n| 144:1\n| Extreme loss of color and detail; the leaves are nearly unrecognizable.\n|}\n\nThe medium quality photo uses only 4.3% of the storage space required for the uncompressed image, but has little noticeable loss of detail or visible artifacts. However, once a certain threshold of compression is passed, compressed images show increasingly visible defects. See the article on [[rate\u2013distortion theory]] for a mathematical explanation of this threshold effect. A particular limitation of JPEG in this regard is its non-overlapped 8\u00d78 block transform structure. More modern designs such as JPEG 2000 and [[JPEG XR]] exhibit a more graceful degradation of quality as the bit usage decreases&nbsp;\u2013 by using transforms with a larger spatial extent for the lower frequency coefficients and by using overlapping transform basis functions.\n\n== Lossless further compression ==\nFrom 2004 to 2008, new research emerged on ways to further compress the data contained in JPEG images without modifying the represented image.<ref name=\"Bauermann\">I. Bauermann and E. Steinbacj. Further Lossless Compression of JPEG Images. Proc. of Picture Coding Symposium (PCS 2004), San Francisco, US, December 15\u201317, 2004.</ref><ref name=\"Ponomarenko\">N. Ponomarenko, K. Egiazarian, V. Lukin and J. Astola. Additional Lossless Compression of JPEG Images, Proc. of the 4th Intl. Symposium on Image and Signal Processing and Analysis (ISPA 2005), Zagreb, Croatia, pp. 117\u2013120, September 15\u201317, 2005.</ref><ref name=\"Stirner\">M. Stirner and G. Seelmann. Improved Redundancy Reduction for JPEG Files. Proc. of Picture Coding Symposium (PCS 2007), Lisbon, Portugal, November 7\u20139, 2007</ref><ref name=\"Matsuda\">Ichiro Matsuda, Yukio Nomoto, Kei Wakabayashi and Susumu Itoh. Lossless Re-encoding of JPEG images using block-adaptive intra prediction. Proceedings of the 16th European Signal Processing Conference (EUSIPCO 2008).</ref> This has applications in scenarios where the original image is only available in JPEG format, and its size needs to be reduced for archiving or transmission. Standard general-purpose compression tools cannot significantly compress JPEG files.\n\nTypically, such schemes take advantage of improvements to the naive scheme for coding DCT coefficients, which fails to take into account:\n* Correlations between magnitudes of adjacent coefficients in the same block;\n* Correlations between magnitudes of the same coefficient in adjacent blocks;\n* Correlations between magnitudes of the same coefficient/block in different channels;\n* The DC coefficients when taken together resemble a downscale version of the original image multiplied by a scaling factor. Well-known schemes for [[Lossless compression#Graphics|lossless coding of continuous-tone images]] can be applied, achieving somewhat better compression than the [[Huffman code]]d [[DPCM]] used in JPEG.\n\nSome standard but rarely used options already exist in JPEG to improve the efficiency of coding DCT coefficients: the arithmetic coding option, and the progressive coding option (which produces lower bitrates because values for each coefficient are coded independently, and each coefficient has a significantly different distribution). Modern methods have improved on these techniques by reordering coefficients to group coefficients of larger magnitude together;<ref name=\"Bauermann\" /> using adjacent coefficients and blocks to predict new coefficient values;<ref name=\"Stirner\" /> dividing blocks or coefficients up among a small number of independently coded models based on their statistics and adjacent values;<ref name=\"Ponomarenko\" /><ref name=\"Stirner\" /> and most recently, by decoding blocks, predicting subsequent blocks in the spatial domain, and then encoding these to generate predictions for DCT coefficients.<ref name=\"Matsuda\" />\n\nTypically, such methods can compress existing JPEG files between 15 and 25 percent, and for JPEGs compressed at low-quality settings, can produce improvements of up to 65%.<ref name=\"Stirner\" /><ref name=\"Matsuda\" />\n\nA freely available tool called packJPG is based on the 2007 paper \"Improved Redundancy Reduction for JPEG Files.\"<ref>{{cite web|url=http://www.elektronik.htw-aalen.de/packjpg/ |title=Latest Binary Releases of packJPG: V2.3a |date=January 3, 2008 |url-status=dead |archiveurl=https://web.archive.org/web/20090123232605/http://www.elektronik.htw-aalen.de/packjpg/ |archivedate=January 23, 2009}}</ref> A 2016 paper titled \"JPEG on steroids\" using [[JPEG XT#Reference software|ISO libjpeg]] shows that current techniques, lossy or not, can make JPEG nearly as efficient as [[JPEG XR]].<ref>{{cite journal |last1=Richter |first1=Thomas |title=JPEG on STEROIDS: Common optimization techniques for JPEG image compression |journal=2016 IEEE International Conference on Image Processing (ICIP) |date=September 2016 |pages=61\u201365 |doi=10.1109/ICIP.2016.7532319 |lay-url=https://encode.su/threads/2634-JPEG-on-Steroids?p=50763&viewfull=1}}</ref> [[#JPEG XL|JPEG XL]] is a new file format that promises to losslessly re-encode a JPEG with efficient back-conversion to JPEG.\n\n== Derived formats ==\n\n=== For stereoscopic 3D ===\n\n==== JPEG Stereoscopic ====\n[[File:JPS-sample.jpg|thumb|An example of a stereoscopic .JPS file]]\nJPS is a stereoscopic JPEG image used for creating 3D effects from 2D images. It contains two static images, one for the left eye and one for the right eye; encoded as two side-by-side images in a single JPG file.\nJPEG Stereoscopic (JPS, extension .jps) is a JPEG-based format for [[stereoscopy|stereoscopic]] images.<ref>{{cite web |author1=J. Siragusa |author2=D. C. Swift |url=http://vrex.com/developer/sterdesc.pdf |title=General Purpose Stereoscopic Data Descriptor |work=VRex, Inc., Elmsford, New York City |date=1997 |archiveurl=https://web.archive.org/web/20111030182549/http://vrex.com/developer/sterdesc.pdf |archivedate=2011-10-30}}</ref><ref>Tim Kemp, [http://ephehm.com/jps/ JPS files]</ref> It has a range of configurations stored in the JPEG APP3 marker field, but usually contains one image of double width, representing two images of identical size in cross-eyed (i.e. left frame on the right half of the image and vice versa) side-by-side arrangement. This file format can be viewed as a JPEG without any special software, or can be processed for rendering in other modes.\n\n==== JPEG Multi-Picture Format ====\n<!-- This section is linked from [[MPO]] -->\nJPEG Multi-Picture Format (MPO, extension .mpo) is a JPEG-based format for storing multiple images in a single file. It contains two or more JPEG files concatenated together.<ref>{{cite web|url=http://www.cipa.jp/std/documents/e/DC-X007-KEY_E.pdf |title=Multi-Picture Format |date=2009 |accessdate=2019-12-26}}</ref><ref>{{citation |url=http://www.mtbs3d.com/phpbb/viewtopic.php?f=3&t=4124&start=15 |title=MPO2Stereo: Convert Fujifilm MPO files to JPEG stereo pairs|website=Mtbs3d.com|accessdate=12 January 2010}}</ref> It also defines a JPEG APP2 marker segment for image description. Various devices use it to store 3D images, such as [[Fujifilm FinePix Real 3D W1]], [[HTC Evo 3D]], JVC GY-HMZ1U AVCHD/MVC extension camcorder, [[Nintendo 3DS]], [[Sony PlayStation 3]],<ref>{{cite web|url=https://manuals.playstation.net/document/en/ps3/current/photo/filetypes.html |title=PS3 Types of files that can be displayed |date=2019 |accessdate=2020-02-29}}</ref> [[Sony PlayStation Vita]],<ref>{{cite web|url=https://manuals.playstation.net/document/en/psvita/photos/filetypes.html |title=Types of files you can view with the Photos application |date=2019 |accessdate=2020-02-29}}</ref> [[Panasonic Lumix DMC-TZ20]], [[Panasonic Lumix DMC-TZ30|DMC-TZ30]], [[Panasonic Lumix DMC-TZ60|DMC-TZ60]], DMC-TS4 (FT4), and [[Sony]] DSC-HX7V. Other devices use it to store \"preview images\" that can be displayed on a TV.\n\nIn the last few years, due to the growing use of stereoscopic images, much effort has been spent by the scientific community to develop algorithms for stereoscopic image compression.<ref>{{citation |url=http://iplab.dmi.unict.it/publication/503 |title=A new fast matching method for adaptive compression of stereoscopic images|journal=Three-Dimensional Image Processing|volume=9393|pages=93930K|author1=Alessandro Ortis |author2=Sebastiano Battiato |publisher=SPIE \u2013 Three-Dimensional Image Processing, Measurement (3DIPM), and Applications 2015|accessdate=30 April 2015|bibcode=2015SPIE.9393E..0KO|year=2015|doi=10.1117/12.2086372|series=Three-Dimensional Image Processing, Measurement (3DIPM), and Applications 2015}}</ref><ref>{{citation |url=http://iplab.dmi.unict.it/publication/49 |title=Adaptive Compression of Stereoscopic Images|author1=Alessandro Ortis |author2=Francesco Rundo |author3=Giuseppe Di Giore |author4=Sebastiano Battiato |publisher=International Conference on Image Analysis and Processing (ICIAP) 2013|accessdate=30 April 2015}}</ref>\n\n=== JPEG XT ===\n{{Main|JPEG XT}}\n\nJPEG XT (ISO/IEC 18477) was published in June 2015; it extends base JPEG format with support for higher integer bit depths (up to 16 bit), high dynamic range imaging and floating-point coding, lossless coding, and alpha channel coding. Extensions are backward compatible with the base JPEG/JFIF file format and 8-bit lossy compressed image. JPEG XT uses an extensible file format based on JFIF. Extension layers are used to modify the JPEG 8-bit base layer and restore the high-resolution image. Existing software is forward compatible and can read the JPEG XT binary stream, though it would only decode the base 8-bit layer.<ref>{{cite web|url=https://jpeg.org/jpegxt/|title=JPEG \u2013 JPEG XT|website=jpeg.org}}</ref>\n\n=== JPEG XL ===\n{{main|JPEG XL}}\nSince August 2017, JTC1/SC29/WG1 issued a series of draft calls for proposals on JPEG XL{{snd}}the next generation image compression standard with substantially better compression efficiency (60% improvement) comparing to JPEG.<ref>{{cite web|url=https://jpeg.org/items/20180423_cfp_jpeg_xl.html|title=JPEG \u2013 Next-Generation Image Compression (JPEG XL) Final Draft Call for Proposals|website=Jpeg.org|accessdate=29 May 2018}}</ref> The standard is expected to exceed the still image compression performance shown by [[HEVC]] HM, [[Daala]] and [[WebP]], and unlike previous efforts attempting to replace JPEG, to provide lossless more efficient recompression transport and storage option for traditional JPEG images.<ref>{{cite book|chapter=JPEG XL next-generation image compression architecture and coding tools| first1=Jyrki|title = Applications of Digital Image Processing XLII|pages = 20|last1=Alakuijala| first2=Ruud|last2=van Asseldonk| first3=Sami|last3=Boukortt| first4=Martin|last4=Bruse| first5=Iulia-Maria|last5=Com\u0219a| first6=Moritz|last6=Firsching| first7=Thomas|last7=Fischbacher| first8=Evgenii|last8=Kliuchnikov| first9=Sebastian|last9=Gomez| first10=Robert|last10=Obryk| first11=Krzysztof|last11=Potempa| first12=Alexander|last12=Rhatushnyak| first13=Jon|last13=Sneyers| first14=Zoltan|last14=Szabadka| first15=Lode|last15=Vandervenne| first16=Luca|last16=Versari| first17=Jan|last17=Wassenberg| date=2019-09-06|doi = 10.1117/12.2529237|isbn = 978-1-5106-2967-7}}</ref><ref>{{cite web|url=https://qiita.com/fg11894/items/5ae0be6b620535880d0d|title=Google Pik\u8a66\u3057\u3066\u307f\u305f |accessdate=22 August 2019}}</ref><ref name=\"Rhatushnyak\">{{cite arXiv|title=Committee Draft of JPEG XL Image Coding System|eprint = 1908.03565|last1 = Rhatushnyak|first1 = Alexander|last2 = Wassenberg|first2 = Jan|last3 = Sneyers|first3 = Jon|last4 = Alakuijala|first4 = Jyrki|last5 = Vandevenne|first5 = Lode|last6 = Versari|first6 = Luca|last7 = Obryk|first7 = Robert|last8 = Szabadka|first8 = Zoltan|last9 = Kliuchnikov|first9 = Evgenii|last10 = Comsa|first10 = Iulia-Maria|last11 = Potempa|first11 = Krzysztof|last12 = Bruse|first12 = Martin|last13 = Firsching|first13 = Moritz|last14 = Khasanova|first14 = Renata|author15 = Ruud van Asseldonk|last16 = Boukortt|first16 = Sami|last17 = Gomez|first17 = Sebastian|last18 = Fischbacher|first18 = Thomas|class = eess.IV|year = 2019}}</ref> The core requirements include support for very high-resolution images (at least 40 MP), 8\u201310 bits per component, RGB/YCbCr/ICtCp color encoding, animated images, alpha channel coding, [[Rec.709]] color space ([[sRGB]]) and gamma function (2.4-power), [[Rec.2100]] [[wide color gamut]] color space (Rec.2020) and [[high dynamic range]] transfer functions (PQ and HLG), and high-quality compression of synthetic images, such as bitmap fonts and gradients. The standard should also offer higher bit depths (12\u201316 bit integer and floating point), additional color spaces and transfer functions (such as Log C from [[Arri Alexa|Arri]]), embedded preview images, lossless alpha channel encoding, image region coding, and low-complexity encoding. Any patented technologies would be licensed on a [[royalty-free]] basis. The proposals were submitted by September 2018, leading to a committee draft in July 2019, with current target publication date in October 2019.<ref>{{cite web|url=https://jpeg.org/downloads/jpegxl/jpegxl-cfp.pdf|title=N79010 Final Call for Proposals for a Next-Generation Image Coding Standard (JPEG XL) |work=ISO/IEC JTC 1/SC 29/WG 1 (ITU-T SG16)|accessdate=29 May 2018}}</ref><ref name=\"Rhatushnyak\" />\n\n=== Incompatible JPEG standards ===\nThe Joint Photography Experts Group is also responsible for some other formats bearing the JPEG name, including [[JPEG 2000]], [[JPEG XR]], and [[JPEG XS]].\n\n== Implementations ==\nA very important implementation of a JPEG codec is the free programming library ''[[libjpeg]]'' of the Independent JPEG Group. It was first published in 1991 and was key for the success of the standard.<ref>{{cite web|url=http://jpeg.org/jpeg|title=Overview of JPEG|website=jpeg.org|accessdate=2017-10-16}}</ref> This library or a direct derivative of it is used in countless applications. Recent versions introduce proprietary extensions [[libjpeg#history|which broke ABI compatibility with previous versions]].\n\nIn March 2017, Google released the open source project [[Guetzli]], which trades off a much longer encoding time for smaller file size (similar to what [[Zopfli]] does for PNG and other lossless data formats).<ref>{{cite web|url=https://research.googleblog.com/2017/03/announcing-guetzli-new-open-source-jpeg.html|title=Announcing Guetzli: A New Open Source JPEG Encoder|website=Research.googleblog.com|accessdate=16 October 2017}}</ref>\n\nISO/IEC [[Joint Photography Experts Group]] maintains a reference software implementation which can encode both base JPEG (ISO/IEC 10918-1 and 18477-1) and [[JPEG XT]] extensions (ISO/IEC 18477 Parts 2 and 6-9), as well as [[JPEG-LS]] (ISO/IEC 14495).<ref>{{cite web|url=https://jpeg.org/jpegxt/software.html|title=JPEG \u2013 JPEG XT|website=jpeg.org}}</ref>\n\n== See also ==\n{{Commons category|JPEG compression}}\n* [[Better Portable Graphics]], a format based on intra-frame encoding of the HEVC\n* [[C-Cube]], an early implementer of JPEG in chip form\n* [[Comparison of graphics file formats]]\n* [[Comparison of layout engines (graphics)]]\n* [[Deblocking filter (video)]], the similar deblocking methods could be applied to JPEG\n* [[Design rule for Camera File system]] (DCF)\n* [[File extensions]]\n* [[Graphics editing program]]\n* [[High Efficiency Image File Format]], image container format for [[High Efficiency Video Coding|HEVC]] and other image coding formats\n* [[Lenna (test image)]], the traditional standard image used to test image processing algorithms\n* Lossless Image Codec [[FELICS]]\n* [[Motion JPEG]]\n\n== References ==\n{{reflist|colwidth=30em}}\n\n== External links ==\n* [https://www.w3.org/Graphics/JPEG/itu-t81.pdf JPEG Standard (JPEG ISO/IEC 10918-1 ITU-T Recommendation T.81)] at W3.org\n* [https://www.jpeg.org/ Official Joint Photographic Experts Group (JPEG) site]\n* [https://www.w3.org/Graphics/JPEG/jfif3.pdf JFIF File Format] at W3.org\n* [https://code.google.com/p/micro-jpeg-visualizer/ JPEG viewer in 250 lines of easy to understand Python code]\n* [https://code.google.com/p/jpeg-compressor/ Public domain JPEG compressor in a single C++ source file, along with a matching decompressor] at code.google.com\n* [https://opensource.apple.com/source/WebCore/WebCore-1C25/platform/image-decoders/jpeg/ JPEG decoder open source code, copyright (C) 1995\u20131997, Thomas G. Lane]\n\n{{Compression formats}}\n{{Graphics file formats}}\n\n[[Category:JPEG| ]]\n[[Category:Articles containing video clips]]\n[[Category:Computer-related introductions in 1992]]\n[[Category:Discovery and invention controversies]]\n[[Category:American inventions]]\n[[Category:Indian inventions]]\n[[Category:Japanese inventions]]\n[[Category:Taiwanese inventions]]\n[[Category:ITU-T recommendations]]\n[[Category:ITU-T Recommendations Series]]\n[[Category:IEC standards]]\n[[Category:ISO standards]]\n[[Category:Lossy compression algorithms]]\n[[Category:Image compression]]\n[[Category:Open formats]]\n[[Category:Raster graphics file formats]]\n", "text_old": "{{other uses|JPEG (disambiguation)|JPG (disambiguation)}}\n{{short description|Lossy compression method for digital images}}\n{{Multiple issues|\n {{Overly detailed|date=December 2019}}\n {{More citations needed|date=December 2019}}\n}}\n{{Pp-pc1|small=yes}}\n{{Infobox file format\n|name=JPEG\n|screenshot = [[File:Felis silvestris silvestris small gradual decrease of quality.png|border|200px]]\n|caption = A photo of a [[European wildcat]] with the compression rate decreasing and hence quality increasing, from left to right\n|_noextcode = on\n|extension = {{code|.jpg}}, {{code|.jpeg}}, {{code|.jpe}}<br />{{code|.jif}}, {{code|.jfif}}, {{code|.jfi}}\n|mime = image/jpeg\n|typecode = {{code|JPEG}}\n|uniform type = public.jpeg\n|released = {{start date and age|1992|9|18}}\n|owner = [[Joint Photographic Experts Group]], [[IBM]], [[Mitsubishi Electric]], [[AT&T]], [[Canon Inc.]]<ref name=\"w3\" />\n|genre = [[Lossy compression|Lossy]] [[image compression]] [[image format|format]]\n|container for =\n|contained by =\n|extended from =\n|extended to =\n|magic = {{code|ff d8 ff}}\n|standard = ISO/IEC 10918, ITU-T T.81, ITU-T T.83, ITU-T T.84, ITU-T T.86\n|url={{URL|http://www.jpeg.org/jpeg/}}\n}}\n[[File:Continuously varied JPEG compression for an abdominal CT scan - 1471-2342-12-24-S1.ogv|thumb|upright=0.9|Continuously varied JPEG compression (between Q=100 and Q=1) for an [[abdominal]] [[CT scan]]]]\n\n'''JPEG''' ({{IPAc-en|\u02c8|d\u0292|e\u026a|p|\u025b|\u0261}} {{respell|JAY|peg}})<ref>{{cite web|url=http://www.collinsdictionary.com/dictionary/english/jpeg|title=Definition of \"JPEG\"|work=[[Collins English Dictionary]]|accessdate=2013-05-23}}</ref> is a commonly used method of [[lossy compression]] for [[digital image]]s, particularly for those images produced by [[digital photography]]. The degree of compression can be adjusted, allowing a selectable tradeoff between storage size and [[image quality]]. JPEG typically achieves 10:1 compression with little perceptible loss in image quality.<ref>{{cite techreport |url=https://ntrs.nasa.gov/search.jsp?R=19920024689 |author1=Haines, Richard F. |author2=Chuang, Sherry L. |title=The effects of video compression on acceptability of images for monitoring life sciences experiments |number=NASA-TP-3239, A-92040, NAS 1.60:3239 |institution=[[NASA]] |date=1 July 1992 |access-date=2016-03-13 |quote=The JPEG still-image-compression levels, even with the large range of 5:1 to 120:1 in this study, yielded equally high levels of acceptability}}</ref> Since its introduction in 1992, JPEG has been the most widely used [[image compression]] standard in the world,<ref name=\"Hudson\" /><ref>{{cite web |title=The JPEG image format explained |url=https://home.bt.com/tech-gadgets/photography/what-is-a-jpeg-11364206889349 |website=[[BT.com]] |publisher=[[BT Group]] |accessdate=5 August 2019 |date=31 May 2018}}</ref> and the most widely used digital [[image format]], with several billion JPEG images produced every day as of 2015.<ref>{{cite news |last1=Baraniuk |first1=Chris |title=Copy protections could come to JPegs |url=https://www.bbc.co.uk/news/technology-34538705 |accessdate=13 September 2019 |work=[[BBC News]] |agency=[[BBC]] |date=15 October 2015}}</ref>\n\nThe term \"JPEG\" is an initialism/acronym for the [[Joint Photographic Experts Group]], which created the standard in 1992. The basis for JPEG is the [[discrete cosine transform]] (DCT),<ref name=\"w3\" /> a lossy image compression technique that was first proposed by [[N. Ahmed|Nasir Ahmed]] in 1972.<ref name=\"Ahmed\" /> JPEG was largely responsible for the proliferation of digital images and [[digital photo]]s across the Internet, and later [[social media]].<ref>{{cite web |title=What Is a JPEG? The Invisible Object You See Every Day |url=https://www.theatlantic.com/technology/archive/2013/09/what-is-a-jpeg-the-invisible-object-you-see-every-day/279954/ |accessdate=13 September 2019 |website=[[The Atlantic]] |date=24 September 2013}}</ref>\n\nJPEG compression is used in a number of [[image file formats]]. JPEG/[[Exif]] is the most common image format used by [[digital camera]]s and other photographic image capture devices; along with JPEG/[[JFIF]], it is the most common format for storing and transmitting [[photographic image]]s on the [[World Wide Web]].<ref>{{cite web|url=http://httparchive.org/interesting.php#imageformats|title=HTTP Archive \u2013 Interesting Stats|website=httparchive.org|access-date=2016-04-06}}</ref> These format variations are often not distinguished, and are simply called JPEG.\n\nThe [[Internet media type|MIME media type]] for JPEG is ''image/jpeg'', except in older [[Internet Explorer]] versions, which provides a MIME type of ''image/pjpeg'' when uploading JPEG images.<ref>[http://msdn.microsoft.com/en-us/library/ms775147%28v=vs.85%29.aspx#_replace MIME Type Detection in Internet Explorer: Uploaded MIME Types] (msdn.microsoft.com)</ref> JPEG files usually have a [[filename extension]] of {{code|.jpg}} or {{code|.jpeg}}. JPEG/JFIF supports a maximum image size of 65,535\u00d765,535 pixels,<ref>{{cite web|url=http://www.jpeg.org/public/jfif.pdf|title=Wayback Machine|date=3 September 2014|accessdate=16 October 2017|url-status=bot: unknown|archiveurl=https://web.archive.org/web/20140903080533/http://www.jpeg.org/public/jfif.pdf|archivedate=3 September 2014}}</ref> hence up to 4 gigapixels for an [[aspect ratio (image)|aspect ratio]] of 1:1. In 2000, the JPEG group introduced a format intended to be a successor, [[JPEG 2000]], but it was unable to replace the original JPEG as the dominant image standard.<ref>{{cite web |title=Why JPEG 2000 Never Took Off |url=https://blog.ansi.org/2018/07/why-jpeg-2000-never-used-standard-iso-iec/ |website=[[American National Standards Institute]] |accessdate=13 September 2019 |date=10 July 2018}}</ref>\n\n== History ==\n=== Background ===\nThe original JPEG specification published in 1992 implements processes from various earlier [[research papers]] and [[patents]] cited by the [[CCITT]] (now [[ITU-T]]) and Joint Photographic Experts Group.<ref name=\"w3\">{{cite web |title=T.81 \u2013 DIGITAL COMPRESSION AND CODING OF CONTINUOUS-TONE STILL IMAGES \u2013 REQUIREMENTS AND GUIDELINES |url=https://www.w3.org/Graphics/JPEG/itu-t81.pdf |publisher=[[CCITT]] |date=September 1992 |accessdate=12 July 2019}}</ref> The main basis for JPEG's lossy compression algorithm is the discrete cosine transform (DCT),<ref name=\"w3\" /><ref name=\"Heise\">{{cite news |title=JPEG: 25 Jahre und kein bisschen alt |url=https://www.heise.de/newsticker/meldung/JPEG-25-Jahre-und-kein-bisschen-alt-3342519.html |accessdate=5 September 2019 |work=[[:de:Heise online|Heise online]] |date=October 2016 |language=de}}</ref> which was first proposed by [[N. Ahmed|Nasir Ahmed]] as an [[image compression]] technique in 1972.<ref name=\"Ahmed\">{{cite journal |last=Ahmed |first=Nasir |author-link=N. Ahmed |title=How I Came Up With the Discrete Cosine Transform |journal=[[Digital Signal Processing (journal)|Digital Signal Processing]] |date=January 1991 |volume=1 |issue=1 |pages=4\u20135 |doi=10.1016/1051-2004(91)90086-Z |url=https://www.scribd.com/doc/52879771/DCT-History-How-I-Came-Up-with-the-Discrete-Cosine-Transform}}</ref><ref name=\"Heise\" /> Ahmed developed a practical DCT algorithm with T. Natarajan of [[Kansas State University]] and [[K. R. Rao]] of the [[University of Texas]] in 1973.<ref name=\"Ahmed\" /> Their seminal 1974 paper<ref name=\"Ahmed Discrete\">{{Citation |first=Nasir |last=Ahmed |author1-link=N. Ahmed |first2=T. |last2=Natarajan |first3=K. R. |last3=Rao |author3-link=K. R. Rao |title=Discrete Cosine Transform |journal=IEEE Transactions on Computers |date=January 1974 |volume=C-23 |issue=1 |pages=90\u201393 |doi=10.1109/T-C.1974.223784}}</ref> is cited in the JPEG specification, along with several later research papers that did further work on DCT, including a 1977 paper by Wen-Hsiung Chen, C.H. Smith and S.C. Fralick that described a fast DCT algorithm,<ref name=\"w3\" /><ref name=\"Chen\">{{cite journal |last1=Chen |first1=Wen-Hsiung |last2=Smith |first2=C. |last3=Fralick |first3=S. |title=A Fast Computational Algorithm for the Discrete Cosine Transform |journal=IEEE Transactions on Communications |date=1977 |volume=25 |issue=9 |pages=1004\u20131009 |doi=10.1109/TCOM.1977.1093941 |issn=0090-6778}}</ref> as well as a 1978 paper by N.J. Narasinha and S.C. Fralick, and a 1984 paper by B.G. Lee.<ref name=\"w3\" /> The specification also cites a 1984 paper by Wen-Hsiung Chen and W.K. Pratt as an influence on its [[Quantization (image processing)|quantization]] algorithm,<ref name=\"w3\" /><ref name=\"Chen1984\">{{cite journal |last1=Chen |first1=Wen-Hsiung |last2=Pratt |first2=W.K. |title=Scene Adaptive Coder |journal=IEEE Transactions on Communications |date=1984 |volume=32 |issue=3 |pages=225\u2013232 |doi=10.1109/TCOM.1984.1096066 |issn=0090-6778}}</ref> and [[David A. Huffman]]'s 1952 paper for its [[Huffman coding]] algorithm.<ref name=\"w3\" />\n\nThe JPEG specification cites patents from several companies. The following patents provided the basis for its [[arithmetic coding]] algorithm.<ref name=\"w3\" />\n* [[IBM]]\n** {{US patent|4652856}} {{ndash}} February 4, 1986 {{ndash}} Kottappuram M. A. Mohiuddin and Jorma J. Rissanen {{ndash}} Multiplication-free multi-alphabet arithmetic code\n** {{US patent|4905297}} {{ndash}} February 27, 1990 {{ndash}} G. Langdon, J.L. Mitchell, W.B. Pennebaker, and Jorma J. Rissanen {{ndash}} Arithmetic coding encoder and decoder system\n** {{US patent|4935882}} {{ndash}} June 19, 1990 {{ndash}} W.B. Pennebaker and J.L. Mitchell {{ndash}} Probability adaptation for arithmetic coders\n* [[Mitsubishi Electric]]\n** {{Patent|JP|H02202267}} ([https://patents.google.com/patent/JPH02202267A 1021672]) {{ndash}} January 21, 1989 {{ndash}} Toshihiro Kimura, Shigenori Kino, Fumitaka Ono, Masayuki Yoshida {{ndash}} Coding system\n** {{Patent|JP|H03247123}} ([https://patents.google.com/patent/JPH0834434B2/en 2-46275]) {{ndash}} February 26, 1990 {{ndash}} Fumitaka Ono, Tomohiro Kimura, Masayuki Yoshida, and Shigenori Kino {{ndash}} Coding apparatus and coding method\n\nThe JPEG specification also cites three other patents from IBM. Other companies cited as patent holders include [[AT&T]] (two patents) and [[Canon Inc.]]<ref name=\"w3\" /> Absent from the list is {{US patent|4698672}}, filed by [[Compression Labs, Inc.|Compression Labs]]' Wen-Hsiung Chen and Daniel J. Klenke in October 1986. The patent describes a DCT-based image compression algorithm, and would later be a cause of controversy in 2002 (see ''[[#Patent controversy|Patent controversy]]'' below).<ref name=\"Lemos\">{{cite news |last1=Lemos |first1=Robert |title=Finding patent truth in JPEG claim |url=https://www.cnet.com/news/finding-patent-truth-in-jpeg-claim/ |accessdate=13 July 2019 |work=[[CNET]] |date=23 July 2002}}</ref> However, the JPEG specification did cite two earlier research papers by Wen-Hsiung Chen, published in 1977 and 1984.<ref name=\"w3\" />\n\n=== JPEG standard ===\n\"JPEG\" stands for Joint Photographic Experts Group, the name of the committee that created the JPEG standard and also other still picture coding standards. The \"Joint\" stood for [[ISO]] TC97 WG8 and CCITT SGVIII. Founded in 1986, the group developed the JPEG standard during the late 1980s. Among several [[transform coding]] techniques they examined, they selected the [[discrete cosine transform]] (DCT), as it was by far the most efficient practical compression technique. The group published the JPEG standard in 1992.<ref name=\"Hudson\">{{cite journal |last1=Hudson |first1=Graham |last2=L\u00e9ger |first2=Alain |last3=Niss |first3=Birger |last4=Sebesty\u00e9n |first4=Istv\u00e1n |last5=Vaaben |first5=J\u00f8rgen |title=JPEG-1 standard 25 years: past, present, and future reasons for a success |journal=[[Journal of Electronic Imaging]] |date=31 August 2018 |volume=27 |issue=4 |pages=1 |doi=10.1117/1.JEI.27.4.040901}}</ref>\n\nIn 1987, ISO TC 97 became ISO/IEC JTC1 and, in 1992, CCITT became ITU-T. Currently on the JTC1 side, JPEG is one of two sub-groups of [[International Organization for Standardization|ISO]]/[[International Electrotechnical Commission|IEC]] [[ISO/IEC JTC1|Joint Technical Committee 1]], Subcommittee 29, Working Group 1 ([[ISO/IEC JTC 1/SC 29]]/WG 1)&nbsp;\u2013 titled as ''Coding of still pictures''.<ref>{{cite web |url=http://kikaku.itscj.ipsj.or.jp/sc29/29w12901.htm |title=ISO/IEC JTC 1/SC 29/WG 1&nbsp;\u2013 Coding of Still Pictures (SC 29/WG 1 Structure) |author=ISO/IEC JTC 1/SC 29 |date=2009-05-07 |accessdate=2009-11-11 |url-status=dead |archiveurl=https://web.archive.org/web/20131231055215/http://kikaku.itscj.ipsj.or.jp/sc29/29w12901.htm |archivedate=2013-12-31}}</ref><ref name=\"ISO/IEC\">{{cite web |url=http://kikaku.itscj.ipsj.or.jp/sc29/29w42901.htm |title=Programme of Work, (Allocated to SC 29/WG 1) |author=ISO/IEC JTC 1/SC 29 |accessdate=2009-11-07 |url-status=dead |archiveurl=https://web.archive.org/web/20131231012300/http://kikaku.itscj.ipsj.or.jp/sc29/29w42901.htm |archivedate=2013-12-31}}</ref><ref>{{cite web |url=http://www.iso.org/iso/standards_development/technical_committees/list_of_iso_technical_committees/iso_technical_committee.htm?commid=45316 |title=JTC 1/SC 29&nbsp;\u2013 Coding of audio, picture, multimedia and hypermedia information |author=ISO |accessdate=2009-11-11}}</ref> On the ITU-T side, ITU-T SG16 is the respective body. The original JPEG Group was organized in 1986,<ref name=\"jpeg.org\">{{cite web |url=http://www.jpeg.org/jpeg/index.html | title=Joint Photographic Experts Group, JPEG Homepage | author=JPEG | accessdate=2009-11-08}}</ref> issuing the first JPEG standard in 1992, which was approved in September 1992 as '''[[ITU-T]] Recommendation T.81'''<ref>{{cite web |url=http://www.itu.int/rec/T-REC-T.81 |title=T.81 : Information technology&nbsp;\u2013 Digital compression and coding of continuous-tone still images&nbsp;\u2013 Requirements and guidelines| website=Itu.int|accessdate=2009-11-07}}</ref> and, in 1994, as '''ISO/IEC 10918-1'''.\n\nThe JPEG standard specifies the [[codec]], which defines how an image is compressed into a stream of [[byte]]s and decompressed back into an image, but not the file format used to contain that stream.<ref>{{cite book | title = JPEG still image data compression standard | edition = 3rd |author1=William B. Pennebaker |author2=Joan L. Mitchell|author2-link=Joan L. Mitchell | publisher = Springer | year = 1993 | isbn = 978-0-442-01272-4 | page = 291 |url=https://books.google.com/?id=AepB_PZ_WMkC&pg=PA291&dq=JPEG+%22did+not+specify+a+file+format%22#v=onepage&q=JPEG%20%22did%20not%20specify%20a%20file%20format%22&f=false}}</ref>\nThe Exif and JFIF standards define the commonly used file formats for interchange of JPEG-compressed images.\n\nJPEG standards are formally named as ''Information technology&nbsp;\u2013 Digital compression and coding of continuous-tone still images''. ISO/IEC 10918 consists of the following parts:\n\n{| class=\"wikitable sortable\" style=\"width:100%;\"\n|+Digital compression and coding of continuous-tone still images&nbsp;\u2013&nbsp;Parts<ref name=\"ISO/IEC\" /><ref name=\"jpeg.org\" /><ref>{{cite web |url=http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_tc_browse.htm?commid=45316 |title=JTC 1/SC 29&nbsp;\u2013 Coding of audio, picture, multimedia and hypermedia information |author=ISO | accessdate=2009-11-07}}</ref>\n|-\n! style=\"width:6%;\"| Part\n! style=\"width:15%;\"| ISO/IEC standard\n! style=\"width:10%;\"| ITU-T Rec.\n! style=\"width:8%;\"| First public release date\n! style=\"width:8%;\"| Latest amendment\n! style=\"width:30%;\"| Title\n! Description\n|-\n| Part 1\n| [http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=18902 ISO/IEC 10918-1:1994]\n| [http://www.itu.int/rec/T-REC-T.81 T.81 (09/92)]\n| {{dts|abbr=on|1992-09-18}}\n|\n| Requirements and guidelines\n|\n|-\n| Part 2\n| [http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=20689 ISO/IEC 10918-2:1995]\n| [http://www.itu.int/rec/T-REC-T.83 T.83 (11/94)]\n| {{dts|abbr=on|1994-11-11}}\n|\n| Compliance testing\n| Rules and checks for software conformance (to Part 1).\n|-\n| Part 3\n| [http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=25037 ISO/IEC 10918-3:1997]\n| [http://www.itu.int/rec/T-REC-T.84 T.84 (07/96)]\n| {{dts|abbr=on|1996-07-03}}\n| {{dts|abbr=on|1999-04-01}}\n| Extensions\n| Set of extensions to improve the Part 1, including the '''Still Picture Interchange File Format''' (SPIFF).<ref>{{cite web|url=https://www.loc.gov/preservation/digital/formats/fdd/fdd000019.shtml|title=SPIFF, Still Picture Interchange File Format |publisher= [[Library of Congress]] |access-date=2018-07-31 |archive-url=https://web.archive.org/web/20180731093543/https://www.loc.gov/preservation/digital/formats/fdd/fdd000019.shtml |archive-date=2018-07-31 |url-status=live|date=2012-01-30}}</ref>\n|-\n| Part 4\n| [http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=25431 ISO/IEC 10918-4:1999]\n| [http://www.itu.int/rec/T-REC-T.86 T.86 (06/98)]\n| {{dts|abbr=on|1998-06-18}}\n| {{dts|abbr=on|2012-06-29}}\n| Registration of JPEG profiles, SPIFF profiles, SPIFF tags, SPIFF colour spaces, APPn markers, SPIFF compression types and Registration Authorities (REGAUT)\n| methods for registering some of the parameters used to extend JPEG\n|-\n| Part 5\n| [http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=54989 ISO/IEC 10918-5:2013]\n| [http://www.itu.int/rec/T-REC-T.871 T.871 (05/11)]\n| {{dts|abbr=on|2011-05-14}}\n|\n| JPEG File Interchange Format (JFIF)\n| A popular format which has been the de facto file format for images encoded by the JPEG standard. In 2009, the JPEG Committee formally established an Ad Hoc Group to standardize JFIF as JPEG Part 5.<ref>{{cite press|url=http://www.jpeg.org/newsrel25.html |title=<!--48th WG1 meeting, Maui, USA&nbsp;\u2013 -->JPEG XR enters FDIS status: JPEG File Interchange Format (JFIF) to be standardized as JPEG Part 5 |author=JPEG <!-- Louis Sharpe (pr@jpeg.org) San Francisco, US --> |date=2009-04-24 |accessdate=2009-11-09 |url-status=dead |archiveurl=https://web.archive.org/web/20091008041637/http://www.jpeg.org/newsrel25.html |archivedate=2009-10-08}}</ref>\n|-\n| Part 6\n| [http://www.iso.org/iso/home/store/catalogue_tc/catalogue_detail.htm?csnumber=59634 ISO/IEC 10918-6:2013]\n| [http://www.itu.int/rec/T-REC-T.872 T.872 (06/12)]\n| {{dts|abbr=on|2012-06}}\n|\n| Application to printing systems\n| Specifies a subset of features and application tools for the interchange of images encoded according to the ISO/IEC 10918-1 for printing.\n|}\n\n[[Ecma International]] <abbr title=\"Technical Report\">TR</abbr>/98 specifies the JPEG File Interchange Format (JFIF); the first edition was published in June 2009.<ref>{{cite web |url=http://www.ecma-international.org/publications/techreports/E-TR-098.htm |year=2009 |title=JPEG File Interchange Format (JFIF) |accessdate=2011-08-01 |work=ECMA TR/98 1st ed. |publisher=[[Ecma International]]}}</ref>\n\n=== Patent controversy ===\n<!-- Courtesy note per [[MOS:LINK2SECT]]: [[Patent troll]] links here -->\n\nIn 2002, [[Forgent Networks]] asserted that it owned and would enforce patent rights on the JPEG technology, arising from a patent that had been filed on October 27, 1986, and granted on October 6, 1987: {{US patent|4698672}} by Compression Labs' Wen-Hsiung Chen and Daniel J. Klenke.<ref name=\"Lemos\" /><ref>{{cite news |title=Forgent's JPEG Patent |url=https://pmt.sourceforge.io/SVG-patents/jpeg.html |accessdate=13 July 2019 |work=[[SourceForge]] |date=2002}}</ref> While Forgent did not own Compression Labs at the time, Chen later sold Compression Labs to Forgent, before Chen went on to work for [[Cisco]]. This led to Forgent acquiring ownership over the patent.<ref name=\"Lemos\" /> Forgent's 2002 announcement created a furor reminiscent of [[Unisys]]' attempts to assert its rights over the GIF image compression standard.\n\nThe JPEG committee investigated the patent claims in 2002 and were of the opinion that they were invalidated by [[prior art]],<ref>{{cite web |url=http://www.jpeg.org/newsrel1.html |title=Concerning recent patent claims |website=Jpeg.org |date=2002-07-19 |accessdate=2011-05-29 |url-status=dead |archiveurl=https://web.archive.org/web/20070714232941/http://www.jpeg.org/newsrel1.html |archivedate=2007-07-14}}</ref> a view shared by various experts.<ref name=\"Lemos\" /><ref>{{cite web|url=http://www.algovision-luratech.com/company/news/patentquarrel.jsp?OnlineShopId=164241031081525276 |title=JPEG and JPEG2000&nbsp;\u2013 Between Patent Quarrel and Change of Technology |accessdate=2017-04-16 |url-status=bot: unknown |archiveurl=https://web.archive.org/web/20040817154508/http://www.algovision-luratech.com/company/news/patentquarrel.jsp?OnlineShopId=164241031081525276 |archivedate=August 17, 2004}}</ref> The patent describes an image compression algorithm based on the discrete cosine transform (DCT),<ref name=\"Lemos\" /> a lossy image compression technique that originated from a 1974 paper by Nasir Ahmed, T. Natarajan and [[K. R. Rao]].<ref name=\"w3\" /><ref name=\"Heise\" /><ref name=\"Ahmed Discrete\" /> Wen-Hsiung Chen further developed their DCT technique, describing a fast DCT algorithm in a 1977 paper with C.H. Smith and S.C. Fralick.<ref name=\"Chen\" /><ref name=\"Lemos\" /> The 1992 JPEG specification cites both the 1974 Ahmed paper and the 1977 Chen paper for its DCT algorithm, as well as a 1984 paper by Chen and W.K. Pratt for its [[Quantization (signal processing)|quantization]] algorithm.<ref name=\"w3\" /><ref name=\"Chen1984\" /> Compression Labs was founded by Chen, and was the first company to commercialize DCT technology.<ref>{{cite journal |last1=Stankovi\u0107 |first1=Radomir S. |last2=Astola |first2=Jaakko T. |title=Reminiscences of the Early Work in DCT: Interview with K.R. Rao |journal=Reprints from the Early Days of Information Sciences |date=2012 |volume=60 |url=http://ticsp.cs.tut.fi/reports/ticsp-report-60-reprint-rao-corrected.pdf |accessdate=13 October 2019}}</ref> By the time Chen had filed his patent for a DCT-based image compression algorithm with Klenke in 1986, most of what would later become the JPEG standard had already been formulated in prior literature.<ref name=\"Lemos\" /> JPEG representative Richard Clark also claimed that Chen himself sat in one of the JPEG committees, but Forgent denied this claim.<ref name=\"Lemos\" />\n\nBetween 2002 and 2004, Forgent was able to obtain about US$105 million by licensing their patent to some 30 companies. In April 2004, Forgent sued 31 other companies to enforce further license payments. In July of the same year, a consortium of 21 large computer companies filed a countersuit, with the goal of invalidating the patent. In addition, Microsoft launched a separate lawsuit against Forgent in April 2005.<ref>{{cite web|title=Graphics patent suit fires back at Microsoft|publisher=[[CNET News]]|first=Dawn|last=Kawamoto|date=April 22, 2005|url=http://news.cnet.com/2100-1025_3-5681112.html|accessdate=2009-01-28}}</ref> In February 2006, the [[United States Patent and Trademark Office]] agreed to re-examine Forgent's JPEG patent at the request of the [[Public Patent Foundation]].<ref>{{cite web |title=Trademark Office Re-examines Forgent JPEG Patent |website=Publish.com |date=February 3, 2006 |url=http://www.publish.com/c/a/Graphics-Tools/Trademark-Office-Reexamines-Forgent-JPEG-Patent/ |accessdate=2009-01-28}}</ref> On May 26, 2006 the USPTO found the patent invalid based on prior art. The USPTO also found that Forgent knew about the prior art, yet it intentionally avoided telling the Patent Office. This makes any appeal to reinstate the patent highly unlikely to succeed.<ref>{{cite web |title=USPTO: Broadest Claims Forgent Asserts Against JPEG Standard Invalid |website=[[Groklaw.net]] |date=May 26, 2006 |url=http://www.groklaw.net/article.php?story=20060526105754880 |accessdate=2007-07-21}}</ref>\n\nForgent also possesses a similar patent granted by the [[European Patent Office]] in 1994, though it is unclear how enforceable it is.<ref>{{cite web|url=http://gauss.ffii.org/PatentView/EP266049 |title=Coding System for Reducing Redundancy |website=Gauss.ffii.org |date= |accessdate=2011-05-29}}</ref>\n\nAs of October 27, 2006, the U.S. patent's 20-year term appears to have expired, and in November 2006, Forgent agreed to abandon enforcement of patent claims against use of the JPEG standard.<ref>{{cite web |title=JPEG Patent Claim Surrendered |publisher=[[Public Patent Foundation]] |date=November 2, 2006 |url=http://www.pubpat.org/jpegsurrendered.htm |accessdate=2006-11-03}}</ref>\n\nThe JPEG committee has as one of its explicit goals that their standards (in particular their baseline methods) be implementable without payment of license fees, and they have secured appropriate license rights for their JPEG 2000 standard from over 20 large organizations.\n\nBeginning in August 2007, another company, Global Patent Holdings, LLC claimed that its patent ({{US patent|5,253,341}}) issued in 1993, is infringed by the downloading of JPEG images on either a website or through e-mail. If not invalidated, this patent could apply to any website that displays JPEG images. The patent was under reexamination by the U.S. Patent and Trademark Office from 2000\u20132007; in July 2007, the Patent Office revoked all of the original claims of the patent but found that an additional claim proposed by Global Patent Holdings (claim 17) was valid.<ref>{{Cite web|url=http://www.uspto.gov/web/patents/patog/week30/OG/html/1320-4/US05253341-20070724.html|archiveurl=https://web.archive.org/web/20080602141045/http://www.uspto.gov/web/patents/patog/week30/OG/html/1320-4/US05253341-20070724.html|url-status=dead|title=Ex Parte Reexamination Certificate for U.S. Patent No. 5,253,341|archivedate=June 2, 2008}}</ref>  Global Patent Holdings then filed a number of lawsuits based on claim 17 of its patent.\n\nIn its first two lawsuits following the reexamination, both filed in Chicago, Illinois, Global Patent Holdings sued the [[Green Bay Packers]], [[CDW]], [[Motorola]], [[Apple Inc.|Apple]], [[Orbitz]], [[Officemax]], [[Caterpillar Inc.|Caterpillar]], [[Kraft]] and [[Peapod]] as defendants. A third lawsuit was filed on December 5, 2007 in South Florida against [[ADT Security Services]], [[AutoNation]], [[Fanjul brothers|Florida Crystals]] Corp., HearUSA, [[MovieTickets.com]], [[Ocwen Financial Corp.]] and [[Tire Kingdom]], and a fourth lawsuit on January 8, 2008 in South Florida against the [[Boca Raton Resort & Club]]. A fifth lawsuit was filed against Global Patent Holdings in Nevada. That lawsuit was filed by [[Zappos.com]], Inc., which was allegedly threatened by Global Patent Holdings, and sought a judicial declaration that the '341 patent is invalid and not infringed.\n\nGlobal Patent Holdings had also used the '341 patent to sue or threaten outspoken critics of broad software patents, including Gregory Aharonian<ref>{{cite web|author=Workgroup |url=http://eupat.ffii.org/pikta/xrani/rozmanith/index.en.html |title=Rozmanith: Using Software Patents to Silence Critics |website=Eupat.ffii.org |accessdate=2011-05-29 |url-status=dead |archiveurl=https://web.archive.org/web/20110716123228/http://eupat.ffii.org/pikta/xrani/rozmanith/index.en.html |archivedate=2011-07-16}}</ref> and the anonymous operator of a website blog known as the \"[[Patent Troll Tracker]].\"<ref>{{cite web|url=http://www.law.com/jsp/article.jsp?id=1196762670106 |title=A Bounty of $5,000 to Name Troll Tracker: Ray Niro Wants To Know Who Is saying All Those Nasty Things About Him |website=Law.com |date= |accessdate=2011-05-29}}</ref> On December 21, 2007, patent lawyer Vernon Francissen of Chicago asked the U.S. Patent and Trademark Office to reexamine the sole remaining claim of the '341 patent on the basis of new prior art.<ref>{{cite web|last=Reimer |first=Jeremy |url=https://arstechnica.com/news.ars/post/20080205-hunting-trolls-uspto-asked-to-reexamine-broad-image-patent.html |title=Hunting trolls: USPTO asked to reexamine broad image patent |website=[[Arstechnica.com]] |date=2008-02-05 |accessdate=2011-05-29}}</ref>\n\nOn March 5, 2008, the U.S. Patent and Trademark Office agreed to reexamine the '341 patent, finding that the new prior art raised substantial new questions regarding the patent's validity.<ref>[[commons:Image:2008-03-05 USPTO Determination Granting Reexam of 5,253,341 C1.pdf|U.S. Patent Office&nbsp;\u2013 Granting Reexamination on 5,253,341 C1]]</ref> In light of the reexamination, the accused infringers in four of the five pending lawsuits have filed motions to suspend (stay) their cases until completion of the U.S. Patent and Trademark Office's review of the '341 patent. On April 23, 2008, a judge presiding over the two lawsuits in Chicago, Illinois granted the motions in those cases.<ref>{{cite web|url=http://www.techdirt.com/articles/20080427/143205960.shtml |title=Judge Puts JPEG Patent On Ice |website=Techdirt.com |date=2008-04-30 |accessdate=2011-05-29}}</ref> On July 22, 2008, the Patent Office issued the first \"Office Action\" of the second reexamination, finding the claim invalid based on nineteen separate grounds.<ref>{{cite web|url=http://techdirt.com/articles/20080731/0337491852.shtml |title=JPEG Patent's Single Claim Rejected (And Smacked Down For Good Measure) |website=[[Techdirt.com]] |date=2008-08-01 |accessdate=2011-05-29}}</ref> On Nov. 24, 2009, a Reexamination Certificate was issued cancelling all claims.\n\nBeginning in 2011 and continuing as of early 2013, an entity known as Princeton Digital Image Corporation,<ref>{{cite web |author=Workgroup |url=http://www.princetondigitalimage.com/ |title=Princeton Digital Image Corporation Home Page |date= |accessdate=2013-05-01 |archive-url=https://archive.is/20130411084058/http://www.princetondigitalimage.com/ |archive-date=2013-04-11 |url-status=dead }}</ref> based in Eastern Texas, began suing large numbers of companies for alleged infringement of {{US patent|4813056}}.  Princeton claims that the JPEG image compression standard infringes the '056 patent and has sued large numbers of websites, retailers, camera and device manufacturers and resellers.  The patent was originally owned and assigned to General Electric.  The patent expired in December 2007, but Princeton has sued large numbers of companies for \"past infringement\" of this patent.  (Under U.S. patent laws, a patent owner can sue for \"past infringement\" up to six years before the filing of a lawsuit, so Princeton could theoretically have continued suing companies until December 2013.)  As of March 2013, Princeton had suits pending in New York and Delaware against more than 55 companies.  General Electric's involvement in the suit is unknown, although court records indicate that it assigned the patent to Princeton in 2009 and retains certain rights in the patent.<ref>{{cite web|author=Workgroup |url=http://patentlaw.jmbm.com/2013/04/hps-motion-to-dismiss-for-lack.html/ |archive-url=https://web.archive.org/web/20160309142416/http://patentlaw.jmbm.com/2013/04/hps-motion-to-dismiss-for-lack.html |url-status=dead |archive-date=2016-03-09 |title=Article on Princeton Court Ruling Regarding GE License Agreement |accessdate=2013-05-01}}</ref>\n\n== Typical usage ==\nThe JPEG compression algorithm operates at its best on photographs and paintings of realistic scenes with smooth variations of tone and color. For web usage, where reducing the amount of data used for an image is important for responsive presentation, JPEG's compression benefits make JPEG popular. JPEG/Exif is also the most common format saved by digital cameras.\n\nHowever, JPEG is not well suited for line drawings and other textual or iconic graphics, where the sharp contrasts between adjacent pixels can cause noticeable artifacts. Such images are better saved in a [[Lossless data compression#Graphics|lossless graphics format]] such as [[TIFF]], [[Graphics Interchange Format|GIF]], [[Portable Network Graphics|PNG]], or a [[raw image format]]. The JPEG standard includes a lossless coding mode, but that mode is not supported in most products.\n\nAs the typical use of JPEG is a lossy compression method, which reduces the image fidelity, it is inappropriate for exact reproduction of imaging data (such as some scientific and medical imaging applications and certain technical [[image processing]] work).\n\nJPEG is also not well suited to files that will undergo multiple edits, as some image quality is lost each time the image is recompressed, particularly if the image is cropped or shifted, or if encoding parameters are changed&nbsp;\u2013 see [[digital generation loss]] for details. To prevent image information loss during sequential and repetitive editing, the first edit can be saved in a lossless format, subsequently edited in that format, then finally published as JPEG for distribution.\n\n== JPEG compression ==\nJPEG uses a lossy form of compression based on the [[discrete cosine transform]] (DCT). This mathematical operation converts each frame/field of the video source from the spatial (2D) domain into the [[frequency domain]] (a.k.a. transform domain). A perceptual model based loosely on the human psychovisual system discards high-frequency information, i.e. sharp transitions in intensity, and [[color hue]]. In the transform domain, the process of reducing information is called quantization. In simpler terms, quantization is a method for optimally reducing a large number scale (with different occurrences of each number) into a smaller one, and the transform-domain is a convenient representation of the image because the high-frequency coefficients, which contribute less to the overall picture than other coefficients, are characteristically small-values with high compressibility. The quantized coefficients are then sequenced and losslessly packed into the output [[bitstream]]. Nearly all software implementations of JPEG permit user control over the [[compression ratio]] (as well as other optional parameters), allowing the user to trade off picture-quality for smaller file size. In embedded applications (such as miniDV, which uses a similar DCT-compression scheme), the parameters are pre-selected and fixed for the application.\n\nThe compression method is usually lossy, meaning that some original image information is lost and cannot be restored, possibly affecting image quality. There is an optional [[Lossless JPEG|lossless]] mode defined in the JPEG standard. However, this mode is not widely supported in products.\n\n{{anchor|Progressive JPEG}}\nThere is also an [[interlace (bitmaps)|interlaced]] ''progressive'' JPEG format, in which data is compressed in multiple passes of progressively higher detail. This is ideal for large images that will be displayed while downloading over a slow connection, allowing a reasonable preview after receiving only a portion of the data. However, support for progressive JPEGs is not universal. When progressive JPEGs are received by programs that do not support them (such as versions of [[Internet Explorer for Mac|Internet Explorer]] before [[Windows 7]])<ref>{{cite web |url=http://msdn.microsoft.com/en-us/library/ee720036(v=vs.85).aspx | title = Progressive Decoding Overview | accessdate = 2012-03-23 | work = Microsoft Developer Network | publisher = Microsoft}}</ref> the software displays the image only after it has been completely downloaded.\n\nThere are also many [[medical imaging]], traffic and camera applications that create and process 12-bit JPEG images both grayscale and color. 12-bit JPEG format is included in an Extended part of the JPEG specification. The libjpeg codec supports 12-bit JPEG and there even exists a high-performance version.<ref>{{Cite web | last = Fastvideo | title = 12-bit JPEG encoder on GPU |date = May 2019|url= https://www.fastcompression.com/products/12-bit-jpeg-codec.htm | accessdate = 2019-05-06}}</ref>\n\n=== Lossless editing ===\n{{See also|jpegtran}}\n\nA number of alterations to a JPEG image can be performed losslessly (that is, without recompression and the associated quality loss) as long as the image size is a multiple of 1 MCU block (Minimum Coded Unit) (usually 16 pixels in both directions, for 4:2:0 [[chroma subsampling]]). Utilities that implement this include:\n* <code>[[jpegtran]]</code> and its GUI, Jpegcrop.\n* <code>[[IrfanView]]</code> using \"JPG Lossless Crop (PlugIn)\" and \"JPG Lossless Rotation (PlugIn)\", which require installing the JPG_TRANSFORM plugin.\n* <code>[[FastStone Image Viewer]]</code> using \"Lossless Crop to File\" and \"JPEG Lossless Rotate\".\n* <code>[[XnViewMP]]</code> using \"JPEG lossless transformations\".\n* <code>[[ACDSee]]</code> supports lossless rotation (but not lossless cropping) with its \"Force lossless JPEG operations\" option.\n\nBlocks can be rotated in 90-degree increments, flipped in the horizontal, vertical and diagonal axes and moved about in the image. Not all blocks from the original image need to be used in the modified one.\n\nThe top and left edge of a JPEG image must lie on an 8&nbsp;\u00d7&nbsp;8 pixel block boundary, but the bottom and right edge need not do so. This limits the possible '''lossless crop''' operations, and also prevents flips and rotations of an image whose bottom or right edge does not lie on a block boundary for all channels (because the edge would end up on top or left, where&nbsp;\u2013 as aforementioned&nbsp;\u2013 a block boundary is obligatory).\n\nRotations where the image width and height not a multiple of 8 or 16 (depending upon the chroma subsampling), are not lossless. Rotating such an image causes the blocks to be recomputed which results in loss of quality.<ref>{{cite web|url=http://petapixel.com/2012/08/14/why-you-should-always-rotate-original-jpeg-photos-losslessly/|title=Why You Should Always Rotate Original JPEG Photos Losslessly|date=|website=Petapixel.com|access-date=16 October 2017}}</ref>\n\nWhen using lossless cropping, if the bottom or right side of the crop region is not on a block boundary, then the rest of the data from the partially used blocks will still be present in the cropped file and can be recovered. It is also possible to transform between baseline and progressive formats without any loss of quality, since the only difference is the order in which the coefficients are placed in the file.\n\nFurthermore, several JPEG images can be losslessly joined together, as long as they were saved with the same quality and the edges coincide with block boundaries.\n\n== JPEG files ==\n<!-- This section is targeted by the redirect [[JPEG Interchange Format]] -->\n\nThe [[file format]] known as \"JPEG Interchange Format\" (JIF) is specified in Annex B of the standard. However, this \"pure\" file format is rarely used, primarily because of the difficulty of programming encoders and decoders that fully implement all aspects of the standard and because of certain shortcomings of the standard:\n* Color space definition\n* Component sub-sampling registration\n* Pixel aspect ratio definition.\n\nSeveral additional standards have evolved to address these issues. The first of these, released in 1992, was the [[JPEG File Interchange Format]] (or JFIF), followed in recent years by [[Exchangeable image file format]] (Exif) and [[International Color Consortium|ICC]] [[ICC Profile|color profiles]]. Both of these formats use the actual JIF byte layout, consisting of different ''markers'', but in addition, employ one of the JIF standard's extension points, namely the ''application markers'': JFIF uses APP0, while Exif uses APP1. Within these segments of the file that were left for future use in the JIF standard and are not read by it, these standards add specific metadata.\n\nThus, in some ways, JFIF is a cut-down version of the JIF standard in that it specifies certain constraints (such as not allowing all the different encoding modes), while in other ways, it is an extension of JIF due to the added metadata. The documentation for the original JFIF standard states:<ref>{{cite web |url= http://www.w3.org/Graphics/JPEG/jfif3.pdf | title = JFIF File Format as PDF}}</ref>\n\n:''JPEG File Interchange Format is a minimal file format which enables JPEG bitstreams to be exchanged between a wide variety of platforms and applications. This minimal format does not include any of the advanced features found in the TIFF JPEG specification or any application specific file format. Nor should it, for the only purpose of this simplified format is to allow the exchange of JPEG compressed images.''\n\nImage files that employ JPEG compression are commonly called \"JPEG files\", and are stored in variants of the JIF image format. Most image capture devices (such as digital cameras) that output JPEG are actually creating files in the Exif format, the format that the camera industry has standardized on for metadata interchange. On the other hand, since the Exif standard does not allow color profiles, most image editing software stores JPEG in JFIF format, and also includes the APP1 segment from the Exif file to include the metadata in an almost-compliant way; the JFIF standard is interpreted somewhat flexibly.<ref>{{cite web|url=http://www.faqs.org/faqs/jpeg-faq/part1/|title=JPEG image compression FAQ|author=Tom Lane|date=1999-03-29|accessdate=2007-09-11}} (q. 14: \"Why all the argument about file formats?\")</ref>\n\nStrictly speaking, the JFIF and Exif standards are incompatible, because each specifies that its marker segment (APP0 or APP1, respectively) appear first. In practice, most JPEG files contain a JFIF marker segment that precedes the Exif header. This allows older readers to correctly handle the older format JFIF segment, while newer readers also decode the following Exif segment, being less strict about requiring it to appear first.\n\n=== JPEG filename extensions ===\nThe most common filename extensions for files employing JPEG compression are '''{{code|.jpg}}''' and '''{{code|.jpeg}}''', though {{code|.jpe}}, {{code|.jfif}} and {{code|.jif}} are also used. It is also possible for JPEG data to be embedded in other file types&nbsp;\u2013 [[Tagged Image File Format|TIFF]] encoded files often embed a JPEG image as a [[thumbnail]] of the main image; and MP3 files can contain a JPEG of [[cover art]] in the [[ID3v2]] tag.\n\n=== Color profile ===\nMany JPEG files embed an [[ICC profile|ICC color profile]] ([[color space]]). Commonly used color profiles include [[sRGB color space|sRGB]] and [[Adobe RGB color space|Adobe RGB]]. Because these color spaces use a non-linear transformation, the [[dynamic range]] of an 8-bit JPEG file is about 11 [[f-number|stops]]; see [[gamma curve]].\n\n== Syntax and structure ==\nA JPEG image consists of a sequence of ''segments'', each beginning with a ''marker'', each of which begins with a 0xFF byte, followed by a byte indicating what kind of marker it is. Some markers consist of just those two bytes; others are followed by two bytes (high then low), indicating the length of marker-specific payload data that follows. (The length includes the two bytes for the length, but not the two bytes for the marker.) Some markers are followed by [[Entropy encoding|entropy-coded]] data; the length of such a marker does not include the entropy-coded data. Note that consecutive 0xFF bytes are used as fill bytes for [[Data padding|padding]] purposes, although this fill byte padding should only ever take place for markers immediately following entropy-coded scan data (see JPEG specification section B.1.1.2 and E.1.2 for details; specifically \"In all cases where markers are appended after the compressed data, optional 0xFF fill bytes may precede the marker\").\n\nWithin the entropy-coded data, after any 0xFF byte, a 0x00 byte is inserted by the encoder before the next byte, so that there does not appear to be a marker where none is intended, preventing framing errors. Decoders must skip this 0x00 byte. This technique, called [[byte stuffing]] (see JPEG specification section F.1.2.3), is only applied to the entropy-coded data, not to marker payload data. Note however that entropy-coded data has a few markers of its own; specifically the Reset markers (0xD0 through 0xD7), which are used to isolate independent chunks of entropy-coded data to allow parallel decoding, and encoders are free to insert these Reset markers at regular intervals (although not all encoders do this).\n\n{| class=\"wikitable\"\n|+ Common JPEG markers<ref>{{cite web |url= http://www.digicamsoft.com/itu/itu-t81-36.html | title = ISO/IEC 10918-1 : 1993(E) p.36}}</ref>\n! Short name\n! Bytes\n! Payload\n! Name\n! Comments\n|-\n! SOI\n| 0xFF, 0xD8 || ''none'' || Start Of Image\n|\n|-\n! SOF0\n| 0xFF, 0xC0 || ''variable size'' || Start Of Frame (baseline DCT)\n| Indicates that this is a baseline DCT-based JPEG, and specifies the width, height, number of components, and component subsampling (e.g., 4:2:0).\n|-\n! SOF2\n| 0xFF, 0xC2 || ''variable size'' || Start Of Frame (progressive DCT)\n| Indicates that this is a progressive DCT-based JPEG, and specifies the width, height, number of components, and component subsampling (e.g., 4:2:0).\n|-\n! DHT\n| 0xFF, 0xC4 || ''variable size'' || Define Huffman Table(s)\n| Specifies one or more Huffman tables.\n|-\n! DQT\n| 0xFF, 0xDB || ''variable size'' || Define Quantization Table(s)\n| Specifies one or more quantization tables.\n|-\n! DRI\n| 0xFF, 0xDD || 4 bytes || Define Restart Interval\n| Specifies the interval between RST''n'' markers, in Minimum Coded Units (MCUs). This marker is followed by two bytes indicating the fixed size so it can be treated like any other variable size segment.\n|-\n! SOS\n| 0xFF, 0xDA || ''variable size'' || Start Of Scan\n| Begins a top-to-bottom scan of the image. In baseline DCT JPEG images, there is generally a single scan. Progressive DCT JPEG images usually contain multiple scans. This marker specifies which slice of data it will contain, and is immediately followed by entropy-coded data.\n|-\n! RST''n''\n| 0xFF, 0xD''n'' (''n''=0..7) || ''none'' || Restart\n| Inserted every ''r'' macroblocks, where ''r'' is the restart interval set by a DRI marker. Not used if there was no DRI marker. The low three bits of the marker code cycle in value from 0 to 7.\n|-\n! APP''n''\n| 0xFF, 0xE''n'' || ''variable size'' || Application-specific\n| For example, an Exif JPEG file uses an APP1 marker to store metadata, laid out in a structure based closely on [[TIFF]].\n|-\n! COM\n| 0xFF, 0xFE || ''variable size'' || Comment\n| Contains a text comment.\n|-\n! EOI\n| 0xFF, 0xD9 || ''none'' || End Of Image\n|\n|}\n\nThere are other ''Start Of Frame'' markers that introduce other kinds of JPEG encodings.\n\nSince several vendors might use the same APP''n'' marker type, application-specific markers often begin with a standard or vendor name (e.g., \"Exif\" or \"Adobe\") or some other identifying string.\n\nAt a restart marker, block-to-block predictor variables are reset, and the bitstream is synchronized to a byte boundary. Restart markers provide means for recovery after bitstream error, such as transmission over an unreliable network or file corruption. Since the runs of macroblocks between restart markers may be independently decoded, these runs may be decoded in parallel.\n\n== JPEG codec example ==\n{{Unreferenced section|date=December 2019}}\nAlthough a JPEG file can be encoded in various ways, most commonly it is done with JFIF encoding. The encoding process consists of several steps:\n\n# The representation of the colors in the image is converted from [[RGB color model|RGB]] to [[YCbCr|{{YCbCr}}]], consisting of one [[Luma (video)|luma]] component (Y'), representing brightness, and two [[chrominance|chroma]] components, (C<sub>B</sub> and C<sub>R</sub>), representing color. This step is sometimes skipped.\n# The resolution of the chroma data is reduced, usually by a factor of 2 or 3. This reflects the fact that the eye is less sensitive to fine color details than to fine brightness details.\n# The image is split into blocks of 8\u00d78 pixels, and for each block, each of the Y, C<sub>B</sub>, and C<sub>R</sub> data undergoes the discrete cosine transform (DCT). A DCT is similar to a [[Fourier transform]] in the sense that it produces a kind of spatial frequency spectrum.\n# The amplitudes of the frequency components are quantized. Human vision is much more sensitive to small variations in color or brightness over large areas than to the strength of high-frequency brightness variations. Therefore, the magnitudes of the high-frequency components are stored with a lower accuracy than the low-frequency components. The quality setting of the encoder (for example 50 or 95 on a scale of 0\u2013100 in the Independent JPEG Group's library<ref>{{cite web |url= http://apodeline.free.fr/DOC/libjpeg/libjpeg-3.html | title = Advanced Features: Compression parameter selection | work = Using the IJG JPEG Library | author = Thomas G. Lane.}}</ref>) affects to what extent the resolution of each frequency component is reduced. If an excessively low quality setting is used, the high-frequency components are discarded altogether.\n# The resulting data for all 8\u00d78 blocks is further compressed with a lossless algorithm, a variant of [[Huffman encoding]].\nThe decoding process reverses these steps, except the ''quantization'' because it is irreversible. In the remainder of this section, the encoding and decoding processes are described in more detail.\n\n=== Encoding ===\nMany of the options in the JPEG standard are not commonly used, and as mentioned above, most image software uses the simpler JFIF format when creating a JPEG file, which among other things specifies the encoding method. Here is a brief description of one of the more common methods of encoding when applied to an input that has 24 [[bits per pixel]] (eight each of red, green, and blue). This particular option is a [[lossy data compression]] method.\n\n==== Color space transformation ====\nFirst, the image should be converted from RGB into a different color space called [[YCbCr|{{YCbCr}}]] (or, informally, YCbCr). It has three components Y', C<sub>B</sub> and C<sub>R</sub>: the Y' component represents the brightness of a pixel, and the C<sub>B</sub> and C<sub>R</sub> components represent the [[chrominance]] (split into blue and red components). This is basically the same color space as used by [[digital television|digital color television]] as well as digital video including [[DVD Video|video DVDs]], and is similar to the way color is represented in analog [[PAL]] video and [[Multiplexed Analogue Components|MAC]] (but not by analog [[NTSC]], which uses the [[YIQ]] color space). The {{YCbCr}} color space conversion allows greater compression without a significant effect on perceptual image quality (or greater perceptual image quality for the same compression). The compression is more efficient because the brightness information, which is more important to the eventual perceptual quality of the image, is confined to a single channel. This more closely corresponds to the perception of color in the human visual system. The color transformation also improves compression by statistical [[decorrelation]].\n\nA particular conversion to {{YCbCr}} is specified in the JFIF standard, and should be performed for the resulting JPEG file to have maximum compatibility. However, some JPEG implementations in \"highest quality\" mode do not apply this step and instead keep the color information in the RGB color model,<ref>{{Cite book|url=https://books.google.com/?id=bYxMVVzdV80C&lpg=PA53&dq=A%20particular%20conversion%20to%20Y%E2%80%B2CBCR%20is%20specified%20in%20the%20JFIF%20standard,%20and%20should%20be%20performed%20for%20the%20resulting%20JPEG%20file%20to%20have%20maximum%20compatibility.&pg=PA53#v=onepage&q=A%20particular%20conversion%20to%20Y%E2%80%B2CBCR%20is%20specified%20in%20the%20JFIF%20standard,%20and%20should%20be%20performed%20for%20the%20resulting%20JPEG%20file%20to%20have%20maximum%20compatibility.%20A%20particular%20conversion%20to%20Y%E2%80%B2CBCR%20is%20specified%20in%20the%20JFIF%20standard,%20and%20should%20be%20performed%20for%20the%20resulting%20JPEG%20file%20to%20have%20maximum%20compatibility.%20%20A%20particular%20conversion%20to%20Y%E2%80%B2CBCR%20is%20specified%20in%20the%20JFIF%20standard,%20and%20should%20be%20performed%20for%20the%20resulting%20JPEG%20file%20to%20have%20maximum%20compatibility.%20&f=false|title=E \u2013 Learning Modules: Dlr Associates Series|last=Ryan|first=Dan|date=2012-06-20|publisher=AuthorHouse|isbn=978-1-4685-7520-0|language=en}}</ref> where the image is stored in separate channels for red, green and blue brightness components. This results in less efficient compression, and would not likely be used when file size is especially important.\n\n==== Downsampling ====\n{{Unreferenced section|date=December 2019}}\nDue to the densities of color- and brightness-sensitive receptors in the human eye, humans can see considerably more fine detail in the brightness of an image (the Y' component) than in the hue and color saturation of an image (the Cb and Cr components). Using this knowledge, encoders can be designed to compress images more efficiently.\n\nThe transformation into the [[YCbCr|{{YCbCr}} color model]] enables the next usual step, which is to reduce the spatial resolution of the Cb and Cr components (called \"[[downsampling]]\" or \"chroma subsampling\"). The ratios at which the downsampling is ordinarily done for JPEG images are [[YUV 4:4:4|4:4:4]] (no downsampling), [[YUV 4:2:2|4:2:2]] (reduction by a factor of 2 in the horizontal direction), or (most commonly) [[YUV 4:2:0|4:2:0]] (reduction by a factor of 2 in both the horizontal and vertical directions). For the rest of the compression process, Y', Cb and Cr are processed separately and in a very similar manner.\n\n==== Block splitting ====\n{{Unreferenced section|date=December 2019}}\nAfter [[Chroma Subsampling|subsampling]], each [[Channel (digital image)|channel]] must be split into 8\u00d78 blocks. Depending on chroma subsampling, this yields Minimum Coded Unit (MCU) blocks of size 8\u00d78 (4:4:4&nbsp;\u2013 no subsampling), 16\u00d78 (4:2:2), or most commonly 16\u00d716 (4:2:0). In [[video compression]] MCUs are called [[macroblock]]s.\n\nIf the data for a channel does not represent an integer number of blocks then the encoder must fill the remaining area of the incomplete blocks with some form of dummy data. Filling the edges with a fixed color (for example, black) can create [[ringing artifact]]s along the visible part of the border;\nrepeating the edge pixels is a common technique that reduces (but does not necessarily completely eliminate) such artifacts, and more sophisticated border filling techniques can also be applied.\n\n==== Discrete cosine transform ====\n[[File:JPEG example subimage.svg|thumb|upright=1.16|The 8\u00d78 sub-image shown in 8-bit grayscale]]\n\nNext, each 8\u00d78 block of each component (Y, Cb, Cr) is converted to a [[frequency-domain]] representation, using a normalized, two-dimensional type-II discrete cosine transform (DCT), see Citation 1 in [[Discrete cosine transform#Citations|discrete cosine transform]]. The DCT is sometimes referred to as \"type-II DCT\" in the context of a family of transforms as in [[Discrete cosine transform#DCT-II|discrete cosine transform]], and the corresponding inverse (IDCT) is denoted as \"type-III DCT\".\n\nAs an example, one such 8\u00d78 8-bit subimage might be:\n\n:<math>\n\\left[\n\\begin{array}{rrrrrrrr}\n 52 & 55 & 61 & 66 & 70 & 61 & 64 & 73 \\\\\n 63 & 59 & 55 & 90 & 109 & 85 & 69 & 72 \\\\\n 62 & 59 & 68 & 113 & 144 & 104 & 66 & 73 \\\\\n 63 & 58 & 71 & 122 & 154 & 106 & 70 & 69 \\\\\n 67 & 61 & 68 & 104 & 126 & 88 & 68 & 70 \\\\\n 79 & 65 & 60 & 70 & 77 & 68 & 58 & 75 \\\\\n 85 & 71 & 64 & 59 & 55 & 61 & 65 & 83 \\\\\n 87 & 79 & 69 & 68 & 65 & 76 & 78 & 94\n\\end{array}\n\\right].\n</math>\n\nBefore computing the DCT of the 8\u00d78 block, its values are shifted from a positive range to one centered on zero. For an 8-bit image, each entry in the original block falls in the range <math>[0, 255]</math>. The midpoint of the range (in this case, the value 128) is subtracted from each entry to produce a data range that is centered on zero, so that the modified range is <math>[-128, 127]</math>. This step reduces the dynamic range requirements in the DCT processing stage that follows.\n\nThis step results in the following values:\n\n:<math>g=\n\\begin{array}{c}\nx \\\\\n\\longrightarrow \\\\\n\\left[\n\\begin{array}{rrrrrrrr}\n -76 & -73 & -67 & -62 & -58 & -67 & -64 & -55 \\\\\n -65 & -69 & -73 & -38 & -19 & -43 & -59 & -56 \\\\\n -66 & -69 & -60 & -15 & 16 & -24 & -62 & -55 \\\\\n -65 & -70 & -57 & -6 & 26 & -22 & -58 & -59 \\\\\n -61 & -67 & -60 & -24 & -2 & -40 & -60 & -58 \\\\\n -49 & -63 & -68 & -58 & -51 & -60 & -70 & -53 \\\\\n -43 & -57 & -64 & -69 & -73 & -67 & -63 & -45 \\\\\n -41 & -49 & -59 & -60 & -63 & -52 & -50 & -34\n\\end{array}\n\\right]\n\\end{array}\n\\Bigg\\downarrow y.\n</math>\n\n[[File:Dctjpeg.png|thumb|upright=0.99|The DCT transforms an 8\u00d78 block of input values to a [[linear combination]] of these 64 patterns. The patterns are referred to as the two-dimensional DCT ''basis functions'', and the output values are referred to as ''transform coefficients''. The horizontal index is <math>u</math> and the vertical index is <math>v</math>.]]\n\nThe next step is to take the two-dimensional DCT, which is given by:\n\n:<math>\\ G_{u,v} =\n \\frac{1}{4}\n \\alpha(u)\n \\alpha(v)\n \\sum_{x=0}^7\n \\sum_{y=0}^7\n g_{x,y}\n \\cos \\left[\\frac{(2x+1)u\\pi}{16} \\right]\n \\cos \\left[\\frac{(2y+1)v\\pi}{16} \\right]\n</math>\n\nwhere\n* <math>\\ u</math> is the horizontal [[spatial frequency]], for the integers <math>\\ 0 \\leq u < 8</math>.\n* <math>\\ v</math> is the vertical spatial frequency, for the integers <math>\\ 0 \\leq v < 8</math>.\n* <math>\n\\alpha(u) =\n\\begin{cases}\n \\frac{1}{\\sqrt{2}}, & \\mbox{if }u=0 \\\\\n 1, & \\mbox{otherwise}\n\\end{cases}\n</math> is a normalizing scale factor to make the transformation [[orthonormal]]\n* <math>\\ g_{x,y}</math> is the pixel value at coordinates <math>\\ (x,y)</math>\n* <math>\\ G_{u,v}</math> is the DCT coefficient at coordinates <math>\\ (u,v).</math>\n\nIf we perform this transformation on our matrix above, we get the following (rounded to the nearest two digits beyond the decimal point):\n\n:<math>G=\n\\begin{array}{c}\nu \\\\\n\\longrightarrow \\\\\n\\left[\n\\begin{array}{rrrrrrrr}\n-415.38 & -30.19 & -61.20 & 27.24 & 56.12 & -20.10 & -2.39 & 0.46 \\\\\n4.47 & -21.86 & -60.76 & 10.25 & 13.15 & -7.09 & -8.54 & 4.88 \\\\\n-46.83 & 7.37 & 77.13 & -24.56 & -28.91 & 9.93 & 5.42 & -5.65 \\\\\n-48.53 & 12.07 & 34.10 & -14.76 & -10.24 & 6.30 & 1.83 & 1.95 \\\\\n12.12 & -6.55 & -13.20 & -3.95 & -1.87 & 1.75 & -2.79 & 3.14 \\\\\n-7.73 & 2.91 & 2.38 & -5.94 & -2.38 & 0.94 & 4.30 & 1.85 \\\\\n-1.03 & 0.18 & 0.42 & -2.42 & -0.88 & -3.02 & 4.12 & -0.66 \\\\\n-0.17 & 0.14 & -1.07 & -4.19 & -1.17 & -0.10 & 0.50 & 1.68\n\\end{array}\n\\right]\n\\end{array}\n\\Bigg\\downarrow v.\n</math>\n\nNote the top-left corner entry with the rather large magnitude. This is the DC coefficient (also called the constant component), which defines the basic hue for the entire block. The remaining 63 coefficients are the AC coefficients (also called the alternating components).<ref>{{cite web|url=http://forum.doom9.org/showthread.php?p=184647#post184647|title=DC / AC Frequency Questions \u2013 Doom9's Forum|website=forum.doom9.org|accessdate=16 October 2017}}</ref>  The advantage of the DCT is its tendency to aggregate most of the signal in one corner of the result, as may be seen above. The quantization step to follow accentuates this effect while simultaneously reducing the overall size of the DCT coefficients, resulting in a signal that is easy to compress efficiently in the entropy stage.\n\nThe DCT temporarily increases the bit-depth of the data, since the DCT coefficients of an 8-bit/component image take up to 11 or more bits (depending on fidelity of the DCT calculation) to store. This may force the codec to temporarily use 16-bit numbers to hold these coefficients, doubling the size of the image representation at this point; these values are typically reduced back to 8-bit values by the quantization step. The temporary increase in size at this stage is not a performance concern for most JPEG implementations, since typically only a very small part of the image is stored in full DCT form at any given time during the image encoding or decoding process.\n\n==== Quantization ====\n{{Unreferenced section|date=December 2019}}\nThe human eye is good at seeing small differences in [[brightness]] over a relatively large area, but not so good at distinguishing the exact strength of a high frequency brightness variation. This allows one to greatly reduce the amount of information in the high frequency components. This is done by simply dividing each component in the frequency domain by a constant for that component, and then rounding to the nearest integer. This rounding operation is the only lossy operation in the whole process (other than chroma subsampling) if the DCT computation is performed with sufficiently high precision. As a result of this, it is typically the case that many of the higher frequency components are rounded to zero, and many of the rest become small positive or negative numbers, which take many fewer bits to represent.\n\nThe elements in the [[quantization matrix]] control the compression ratio, with larger values producing greater compression.  A typical quantization matrix (for a quality of 50% as specified in the original JPEG Standard), is as follows:\n\n:<math>Q=\n\\begin{bmatrix}\n 16 & 11 & 10 & 16 & 24 & 40 & 51 & 61 \\\\\n 12 & 12 & 14 & 19 & 26 & 58 & 60 & 55 \\\\\n 14 & 13 & 16 & 24 & 40 & 57 & 69 & 56 \\\\\n 14 & 17 & 22 & 29 & 51 & 87 & 80 & 62 \\\\\n 18 & 22 & 37 & 56 & 68 & 109 & 103 & 77 \\\\\n 24 & 35 & 55 & 64 & 81 & 104 & 113 & 92 \\\\\n 49 & 64 & 78 & 87 & 103 & 121 & 120 & 101 \\\\\n 72 & 92 & 95 & 98 & 112 & 100 & 103 & 99\n\\end{bmatrix}.\n</math>\n\nThe quantized DCT coefficients are computed with\n\n:<math>B_{j,k} = \\mathrm{round} \\left( \\frac{G_{j,k}}{Q_{j,k}} \\right) \\mbox{ for } j=0,1,2,\\ldots,7; k=0,1,2,\\ldots,7</math>\n\nwhere <math>G</math> is the unquantized DCT coefficients; <math>Q</math> is the quantization matrix above; and <math>B</math> is the quantized DCT coefficients.\n\nUsing this quantization matrix with the DCT coefficient matrix from above results in:\n[[File:idct-animation.gif|frame|Left: a final image is built up from a series of basis functions. Right: each of the DCT basis functions that comprise the image, and the corresponding weighting coefficient. Middle: the basis function, after multiplication by the coefficient: this component is added to the final image. For clarity, the 8\u00d78 macroblock in this example is magnified by 10x using bilinear interpolation.]]\n:<math>B=\n\\left[\n\\begin{array}{rrrrrrrr}\n-26 & -3 & -6 & 2 & 2 & -1 & 0 & 0 \\\\\n0 & -2 & -4 & 1 & 1 & 0 & 0 & 0 \\\\\n-3 & 1 & 5 & -1 & -1 & 0 & 0 & 0 \\\\\n-3 & 1 & 2 & -1 & 0 & 0 & 0 & 0 \\\\\n1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\n\\end{array}\n\\right].\n</math>\n\nFor example, using \u2212415 (the DC coefficient) and rounding to the nearest integer\n\n:<math>\n\\mathrm{round}\n\\left(\n \\frac{-415.37}{16}\n\\right)\n=\n\\mathrm{round}\n\\left(\n -25.96\n\\right)\n=\n-26.\n</math>\n\nNotice that most of the higher-frequency elements of the sub-block (i.e., those with an ''x'' or ''y'' spatial frequency greater than 4) are quantized into zero values.\n\n==== Entropy coding ====\n{{Unreferenced section|date=December 2019}}{{Main|Entropy encoding}}\n[[File:JPEG ZigZag.svg|thumb|right|Zigzag ordering of JPEG image components]]\n\nEntropy coding is a special form of [[lossless data compression]]. It involves arranging the image components in a \"[[zigzag]]\" order employing [[run-length encoding]] (RLE) algorithm that groups similar frequencies together, inserting length coding zeros, and then using Huffman coding on what is left.\n\nThe JPEG standard also allows, but does not require, decoders to support the use of arithmetic coding, which is mathematically superior to Huffman coding. However, this feature has rarely been used, as it was historically covered by patents requiring royalty-bearing licenses, and because it is slower to encode and decode compared to Huffman coding. Arithmetic coding typically makes files about 5\u20137% smaller.\n\nThe previous quantized DC coefficient is used to predict the current quantized DC coefficient. The difference between the two is encoded rather than the actual value. The encoding of the 63 quantized AC coefficients does not use such prediction differencing.\n\nThe zigzag sequence for the above quantized coefficients are shown below. (The format shown is just for ease of understanding/viewing.)\n\n:{| style=\"text-align: right\"\n|-\n|style=\"width: 2em\"| \u221226 || style=\"width: 2em\"| || style=\"width: 2em\"| || style=\"width: 2em\"| || style=\"width: 2em\"| || style=\"width: 2em\"| || style=\"width: 2em\"| || style=\"width: 2em\"|\n|-\n| \u22123 || 0\n|-\n| \u22123 || \u22122 || \u22126\n|-\n| 2 || \u22124 || 1 || \u22123\n|-\n| 1 || 1 || 5 || 1 || 2\n|-\n| \u22121 || 1 || \u22121 || 2 || 0 || 0\n|-\n| 0 || 0 || 0 || \u22121 || \u22121 || 0 || 0\n|-\n| 0 || 0 || 0 || 0 || 0 || 0 || 0 || 0\n|-\n| 0 || 0 || 0 || 0 || 0 || 0 || 0\n|-\n| 0 || 0 || 0 || 0 || 0 || 0\n|-\n| 0 || 0 || 0 || 0 || 0\n|-\n| 0 || 0 || 0 || 0\n|-\n| 0 || 0 || 0\n|-\n| 0 || 0\n|-\n| 0\n|}\n\nIf the ''i''-th block is represented by <math>B_i</math> and positions within each block are represented by <math>(p,q)</math> where <math>p = 0, 1, ..., 7</math> and <math>q = 0, 1, ..., 7</math>, then any coefficient in the DCT image can be represented as <math>B_i (p,q)</math>. Thus, in the above scheme, the order of encoding pixels (for the {{mvar|i}}-th block) is <math>B_i (0,0)</math>, <math>B_i (0,1)</math>, <math>B_i (1,0)</math>, <math>B_i (2,0)</math>, <math>B_i (1,1)</math>, <math>B_i (0,2)</math>, <math>B_i (0,3)</math>, <math>B_i (1,2)</math> and so on.\n\n[[File:JPEG process.svg|thumb|upright=1.59|''Baseline sequential'' JPEG encoding and decoding processes]]\n\nThis encoding mode is called baseline ''sequential'' encoding. Baseline JPEG also supports ''progressive'' encoding. While sequential encoding encodes coefficients of a single block at a time (in a zigzag manner), progressive encoding encodes similar-positioned batch of coefficients of all blocks in one go (called a ''scan''), followed by the next batch of coefficients of all blocks, and so on. For example, if the image is divided into N 8\u00d78 blocks <math>B_0,B_1,B_2,...,B_{n-1}</math>, then a 3-scan progressive encoding encodes DC component, <math>B_i (0,0)</math> for all blocks, i.e., for all <math>i = 0, 1, 2, ..., N-1</math>, in first scan. This is followed by the second scan which encoding a few more components (assuming four more components, they are <math>B_i (0,1)</math> to <math>B_i (1,1)</math>, still in a zigzag manner) coefficients of all blocks (so the sequence is: <math>B_0 (0,1),B_0 (1,0),B_0 (2,0),B_0 (1,1),B_1 (0,1),B_1 (1,0),...,B_N (2,0),B_N (1,1)</math>), followed by all the remained coefficients of all blocks in the last scan.\n\nOnce all similar-positioned coefficients have been encoded, the next position to be encoded is the one occurring next in the zigzag traversal as indicated in the figure above. It has been found that ''baseline progressive'' JPEG encoding usually gives better compression as compared to ''baseline sequential'' JPEG due to the ability to use different Huffman tables (see below) tailored for different frequencies on each \"scan\" or \"pass\" (which includes similar-positioned coefficients), though the difference is not too large.\n\nIn the rest of the article, it is assumed that the coefficient pattern generated is due to sequential mode.\n\nIn order to encode the above generated coefficient pattern, JPEG uses Huffman encoding.  The JPEG standard provides general-purpose Huffman tables; encoders may also choose to generate Huffman tables optimized for the actual frequency distributions in images being encoded.\n\nThe process of encoding the zig-zag quantized data begins with a run-length encoding explained below, where:\n* {{mvar|x}} is the non-zero, quantized AC coefficient.\n* ''RUNLENGTH'' is the number of zeroes that came before this non-zero AC coefficient.\n* ''SIZE'' is the number of bits required to represent {{mvar|x}}.\n* ''AMPLITUDE'' is the bit-representation of {{mvar|x}}.\n\nThe run-length encoding works by examining each non-zero AC coefficient {{mvar|x}} and determining how many zeroes came before the previous AC coefficient.  With this information, two symbols are created:\n\n:{| style=\"text-align: center\" class=\"wikitable\"\n|-\n! Symbol 1 || Symbol 2\n|-\n| (RUNLENGTH, SIZE) || (AMPLITUDE)\n|}\n\nBoth ''RUNLENGTH'' and ''SIZE'' rest on the same byte, meaning that each only contains four bits of information.  The higher bits deal with the number of zeroes, while the lower bits denote the number of bits necessary to encode the value of {{mvar|x}}.\n\nThis has the immediate implication of ''Symbol 1'' being only able store information regarding the first 15 zeroes preceding the non-zero AC coefficient.  However, JPEG defines two special Huffman code words.  One is for ending the sequence prematurely when the remaining coefficients are zero (called \"End-of-Block\" or \"EOB\"), and another when the run of zeroes goes beyond 15 before reaching a non-zero AC coefficient.  In such a case where 16 zeroes are encountered before a given non-zero AC coefficient, ''Symbol 1'' is encoded \"specially\" as: (15, 0)(0).\n\nThe overall process continues until \"EOB\"{{snd}} denoted by (0, 0){{snd}} is reached.\n\nWith this in mind, the sequence from earlier becomes:\n\n:(0, 2)(-3);(1, 2)(-3);(0, 1)(-2);(0, 2)(-6);(0, 1)(2);(0, 1)(-4);(0, 1)(1);(0, 2)(-3);(0, 1)(1);(0, 1)(1);\n:(0, 2)(5);(0, 1)(1);(0, 1)(2);(0, 1)(-1);(0, 1)(1);(0, 1)(-1);(0, 1)(2);(5, 1)(-1);(0, 1)(-1);(0, 0);\n\n(The first value in the matrix, \u221226, is the DC coefficient; it is not encoded the same way.  See above.)\n\nFrom here, frequency calculations are made based on occurrences of the coefficients.  In our example block, most of the quantized coefficients are small numbers that are not preceded immediately by a zero coefficient. These more-frequent cases will be represented by shorter code words.\n\n=== Compression ratio and artifacts ===\n[[File:Lichtenstein jpeg difference.png|upright=1.16|thumb|This image shows the pixels that are different between a non-compressed image and the same image JPEG compressed with a quality setting of 50. Darker means a larger difference. Note especially the changes occurring near sharp edges and having a block-like shape.]]\n[[File:Lichtenstein img processing test.png|upright=1.16|thumb|The original image]]\n[[File:Jpegvergroessert.jpg|thumb|upright=0.87|The compressed 8\u00d78 squares are visible in the scaled-up picture, together with other visual artifacts of the [[lossy compression]].]]\n\nThe resulting compression ratio can be varied according to need by being more or less aggressive in the divisors used in the quantization phase. Ten to one compression usually results in an image that cannot be distinguished by eye from the original. A compression ratio of 100:1 is usually possible, but will look distinctly [[Compression artifact|artifacted]] compared to the original. The appropriate level of compression depends on the use to which the image will be put.\n\n{{external media\n|image1=[http://i.cmpnet.com/videsignline/2006/02/algolith-fig2.jpg Illustration of edge busyness]<ref name=\"Dinh and Patry\" />\n}}\n\nThose who use the World Wide Web may be familiar with the irregularities known as compression artifacts that appear in JPEG images, which may take the form of noise around contrasting edges (especially curves and corners), or \"blocky\" images. These are due to the quantization step of the JPEG algorithm. They are especially noticeable around sharp corners between contrasting colors (text is a good example, as it contains many such corners). The analogous artifacts in [[MPEG]] video are referred to as ''[[mosquito noise]],'' as the resulting \"edge busyness\" and spurious dots, which change over time, resemble mosquitoes swarming around the object.<ref name=\"Dinh and Patry\">Phuc-Tue Le Dinh and Jacques Patry. [http://www.videsignline.com/howto/180207350 Video compression artifacts and MPEG noise reduction]. Video Imaging DesignLine. February 24, 2006. Retrieved May 28, 2009.</ref><ref>\"'''3.9 mosquito noise:''' Form of edge busyness distortion sometimes associated with movement, characterized by moving artifacts and/or blotchy noise patterns superimposed over the objects (resembling a mosquito flying around a person's head and shoulders).\" [http://eu.sabotage.org/www/ITU/P/P0930e.pdf ITU-T Rec. P.930 (08/96) Principles of a reference impairment system for video] {{webarchive|url=https://web.archive.org/web/20100216033245/http://eu.sabotage.org/www/ITU/P/P0930e.pdf |date=2010-02-16}}</ref>\n\nThese artifacts can be reduced by choosing a lower level of compression; they may be completely avoided by saving an image using a lossless file format, though this will result in a larger file size. The images created with [[Ray tracing (graphics)|ray-tracing]] programs have noticeable blocky shapes on the terrain. Certain low-intensity compression artifacts might be acceptable when simply viewing the images, but can be emphasized if the image is subsequently processed, usually resulting in unacceptable quality. Consider the example below, demonstrating the effect of lossy compression on an [[edge detection]] processing step.\n\n{| class=\"wikitable\" style=\"text-align:center\"\n|-\n! Image !! Lossless compression !! Lossy compression\n|-\n! Original\n| [[File:Lossless-circle.png|100px]] || [[File:Lossy-circle.jpg|100px]]\n|-\n! Processed by<br />[[Canny edge detector]]\n| [[File:Lossless-circle-canny.png|100px]] || [[File:Lossy-circle-canny.png|100px]]\n|}\n\nSome programs allow the user to vary the amount by which individual blocks are compressed. Stronger compression is applied to areas of the image that show fewer artifacts. This way it is possible to manually reduce JPEG file size with less loss of quality.\n\nSince the quantization stage ''always'' results in a loss of information, JPEG standard is always a lossy compression codec. (Information is lost both in quantizing and rounding of the floating-point numbers.) Even if the quantization matrix is a [[matrix of ones]], information will still be lost in the rounding step.\n{{clear}}\n\n=== Decoding ===\n{{Unreferenced section|date=December 2019}}\nDecoding to display the image consists of doing all the above in reverse.\n\nTaking the DCT coefficient matrix (after adding the difference of the DC coefficient back in)\n\n:<math>\n\\left[\n\\begin{array}{rrrrrrrr}\n-26 & -3 & -6 & 2 & 2 & -1 & 0 & 0 \\\\\n0 & -2 & -4 & 1 & 1 & 0 & 0 & 0 \\\\\n-3 & 1 & 5 & -1 & -1 & 0 & 0 & 0 \\\\\n-3 & 1 & 2 & -1 & 0 & 0 & 0 & 0 \\\\\n1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\n\\end{array}\n\\right]\n</math>\n\nand taking the [[Hadamard product (matrices)|entry-for-entry product]] with the quantization matrix from above results in\n\n:<math>\n\\left[\n\\begin{array}{rrrrrrrr}\n-416 & -33 & -60 & 32 & 48 & -40 & 0 & 0 \\\\\n0 & -24 & -56 & 19 & 26 & 0 & 0 & 0 \\\\\n-42 & 13 & 80 & -24 & -40 & 0 & 0 & 0 \\\\\n-42 & 17 & 44 & -29 & 0 & 0 & 0 & 0 \\\\\n18 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\n\\end{array}\n\\right]\n</math>\n\nwhich closely resembles the original DCT coefficient matrix for the top-left portion.\n\nThe next step is to take the two-dimensional inverse DCT (a 2D type-III DCT), which is given by:\n\n<math>f_{x,y} =\n \\frac{1}{4}\n \\sum_{u=0}^7\n \\sum_{v=0}^7\n \\alpha(u) \\alpha(v) F_{u,v}\n \\cos \\left[\\frac{(2x+1)u\\pi}{16} \\right]\n \\cos \\left[\\frac{(2y+1)v\\pi}{16} \\right]\n</math>\n\nwhere\n* <math>\\ x</math> is the pixel row, for the integers <math>\\ 0 \\leq x < 8</math>.\n* <math>\\ y</math> is the pixel column, for the integers <math>\\ 0 \\leq y < 8</math>.\n* <math>\\ \\alpha(u)</math> is defined as above, for the integers <math>\\ 0 \\leq u < 8</math>.\n* <math>\\ F_{u,v}</math> is the reconstructed approximate coefficient at coordinates <math>\\ (u,v).</math>\n* <math>\\ f_{x,y}</math> is the reconstructed pixel value at coordinates <math>\\ (x,y)</math>\n\nRounding the output to integer values (since the original had integer values) results in an image with values (still shifted down by 128)\n\n{{Multiple image|align=right|direction=vertical|image1=JPEG example image.jpg|alt1=|image2=JPEG example image decompressed.jpg|alt2=|width=180|footer=Slight differences are noticeable between the original (top) and decompressed image (bottom), which is most readily seen in the bottom-left corner.}}\n\n:<math>\n\\left[\n\\begin{array}{rrrrrrrr}\n-66 & -63 & -71 & -68 & -56 & -65 & -68 & -46 \\\\\n-71 & -73 & -72 & -46 & -20 & -41 & -66 & -57 \\\\\n-70 & -78 & -68 & -17 & 20 & -14 & -61 & -63 \\\\\n-63 & -73 & -62 & -8 & 27 & -14 & -60 & -58 \\\\\n-58 & -65 & -61 & -27 & -6 & -40 & -68 & -50 \\\\\n-57 & -57 & -64 & -58 & -48 & -66 & -72 & -47 \\\\\n-53 & -46 & -61 & -74 & -65 & -63 & -62 & -45 \\\\\n-47 & -34 & -53 & -74 & -60 & -47 & -47 & -41\n\\end{array}\n\\right]\n</math>\n\nand adding 128 to each entry\n\n:<math>\n\\left[\n\\begin{array}{rrrrrrrr}\n62 & 65 & 57 & 60 & 72 & 63 & 60 & 82 \\\\\n57 & 55 & 56 & 82 & 108 & 87 & 62 & 71 \\\\\n58 & 50 & 60 & 111 & 148 & 114 & 67 & 65 \\\\\n65 & 55 & 66 & 120 & 155 & 114 & 68 & 70 \\\\\n70 & 63 & 67 & 101 & 122 & 88 & 60 & 78 \\\\\n71 & 71 & 64 & 70 & 80 & 62 & 56 & 81 \\\\\n75 & 82 & 67 & 54 & 63 & 65 & 66 & 83 \\\\\n81 & 94 & 75 & 54 & 68 & 81 & 81 & 87\n\\end{array}\n\\right].\n</math>\n\nThis is the decompressed subimage. In general, the decompression process may produce values outside the original input range of <math>[0, 255]</math>. If this occurs, the decoder needs to clip the output values so as to keep them within that range to prevent overflow when storing the decompressed image with the original bit depth.\n\nThe decompressed subimage can be compared to the original subimage (also see images to the right) by taking the difference (original \u2212 uncompressed) results in the following error values:\n\n:<math>\n\\left[\n\\begin{array}{rrrrrrrr}\n-10 & -10 & 4 & 6 & -2 & -2 & 4 & -9 \\\\\n6 & 4 & -1 & 8 & 1 & -2 & 7 & 1 \\\\\n4 & 9 & 8 & 2 & -4 & -10 & -1 & 8 \\\\\n-2 & 3 & 5 & 2 & -1 & -8 & 2 & -1 \\\\\n-3 & -2 & 1 & 3 & 4 & 0 & 8 & -8 \\\\\n8 & -6 & -4 & -0 & -3 & 6 & 2 & -6 \\\\\n10 & -11 & -3 & 5 & -8 & -4 & -1 & -0 \\\\\n6 & -15 & -6 & 14 & -3 & -5 & -3 & 7\n\\end{array}\n\\right]\n</math>\n\nwith an average absolute error of about 5 values per pixels (i.e., <math>\\frac{1}{64} \\sum_{x=0}^7 \\sum_{y=0}^7 |e(x,y)| = 4.8750</math>).\n\nThe error is most noticeable in the bottom-left corner where the bottom-left pixel becomes darker than the pixel to its immediate right.\n\n=== Required precision ===\n{{Unreferenced section|date=December 2019}}\nThe encoding description in the JPEG standard does not fix the precision needed for the output compressed image. However, the JPEG standard (and the similar MPEG standards) includes some precision requirements for the ''de''coding, including all parts of the decoding process (variable length decoding, inverse DCT, dequantization, renormalization of outputs); the output from the reference algorithm must not exceed:\n* a maximum of one bit of difference for each pixel component\n* low mean square error over each 8\u00d78-pixel block\n* very low mean error over each 8\u00d78-pixel block\n* very low mean square error over the whole image\n* extremely low mean error over the whole image\n\nThese assertions are tested on a large set of randomized input images, to handle the worst cases. The former IEEE 1180\u20131990 standard contained some similar precision requirements. The precision has a consequence on the implementation of decoders, and it is critical because some encoding processes (notably used for encoding sequences of images like MPEG) need to be able to construct, on the encoder side, a reference decoded image. In order to support 8-bit precision per pixel component output, dequantization and inverse DCT transforms are typically implemented with at least 14-bit precision in optimized decoders.\n\n== Effects of JPEG compression ==\nJPEG compression artifacts blend well into photographs with detailed non-uniform textures, allowing higher compression ratios. Notice how a higher compression ratio first affects the high-frequency textures in the upper-left corner of the image, and how the contrasting lines become more fuzzy. The very high compression ratio severely affects the quality of the image, although the overall colors and image form are still recognizable. However, the precision of colors suffer less (for a human eye) than the precision of contours (based on luminance). This justifies the fact that images should be first transformed in a color model separating the luminance from the chromatic information, before subsampling the chromatic planes (which may also use lower quality quantization) in order to preserve the precision of the luminance plane with more information bits.\n\n=== Sample photographs ===\n\n[[File:Visual impact of a jpeg compression on Photoshop.jpg|thumb|upright=0.9|Visual impact of a jpeg compression in Photoshop on a picture of 4480x4480 pixels]]\n\nFor information, the uncompressed 24-bit RGB bitmap image below (73,242 pixels) would require 219,726 bytes (excluding all other information headers). The filesizes indicated below include the internal JPEG information headers and some [[metadata]]. For highest quality images (Q=100), about 8.25 bits per color pixel is required{{Citation needed|date=November 2019}}. On grayscale images, a minimum of 6.5 bits per pixel is enough (a comparable Q=100 quality color information requires about 25% more encoded bits). The highest quality image below (Q=100) is encoded at nine bits per color pixel, the medium quality image (Q=25) uses one bit per color pixel. For most applications, the quality factor should not go below 0.75 bit per pixel (Q=12.5), as demonstrated by the low quality image. The image at lowest quality uses only 0.13 bit per pixel, and displays very poor color. This is useful when the image will be displayed in a significantly scaled-down size. A method for creating better quantization matrices for a given image quality using [[PSNR]] instead of the Q factor is described in Minguill\u00f3n & Pujol (2001).<ref>{{cite journal|author=Juli\u00e0 Minguill\u00f3n, Jaume Pujol|title=JPEG standard uniform quantization error modeling with applications to sequential and progressive operation modes|journal=Electronic Imaging|date=April 2001|volume=10|number=2|pages=475\u2013485|hdl=10609/6263|bibcode=2001JEI....10..475M|doi=10.1117/1.1344592|url=http://openaccess.uoc.edu/webapps/o2/bitstream/10609/6263/6/jei-jpeg.pdf}}</ref>\n\n::{| class=\"wikitable\"\n|+ align=\"bottom\"| Note: The above images are not [[Institute of Electrical and Electronics Engineers|IEEE]] / [[ITU-R|CCIR]] / [[European Broadcasting Union|EBU]]&nbsp;[[standard test image|test images]], and the encoder settings are not specified or available.\n|-\n! Image !! Quality !! Size (bytes) !! Compression ratio !! Comment\n|-\n| [[File:JPEG example JPG RIP 100.jpg|80px]]\n| Highest quality (Q&nbsp;=&nbsp;100)\n| 81,447\n| 2.7:1\n| Extremely minor artifacts\n|-\n| [[File:JPEG example JPG RIP 050.jpg|80px]]\n| High quality (Q&nbsp;=&nbsp;50)\n| 14,679\n| 15:1\n| Initial signs of subimage artifacts\n|-\n| [[File:JPEG example JPG RIP 025.jpg|80px]]\n| Medium quality (Q&nbsp;=&nbsp;25)\n| 9,407\n| 23:1\n| Stronger artifacts; loss of high frequency information\n|-\n| [[File:JPEG example JPG RIP 010.jpg|80px]]\n| Low quality (Q&nbsp;=&nbsp;10)\n| 4,787\n| 46:1\n| Severe high frequency loss leads to obvious artifacts on subimage boundaries (\"macroblocking\")\n|-\n| [[File:JPEG example JPG RIP 001.jpg|80px]]\n| Lowest quality (Q&nbsp;=&nbsp;1)\n| 1,523\n| 144:1\n| Extreme loss of color and detail; the leaves are nearly unrecognizable.\n|}\n\nThe medium quality photo uses only 4.3% of the storage space required for the uncompressed image, but has little noticeable loss of detail or visible artifacts. However, once a certain threshold of compression is passed, compressed images show increasingly visible defects. See the article on [[rate\u2013distortion theory]] for a mathematical explanation of this threshold effect. A particular limitation of JPEG in this regard is its non-overlapped 8\u00d78 block transform structure. More modern designs such as JPEG 2000 and [[JPEG XR]] exhibit a more graceful degradation of quality as the bit usage decreases&nbsp;\u2013 by using transforms with a larger spatial extent for the lower frequency coefficients and by using overlapping transform basis functions.\n\n== Lossless further compression ==\nFrom 2004 to 2008, new research emerged on ways to further compress the data contained in JPEG images without modifying the represented image.<ref name=\"Bauermann\">I. Bauermann and E. Steinbacj. Further Lossless Compression of JPEG Images. Proc. of Picture Coding Symposium (PCS 2004), San Francisco, US, December 15\u201317, 2004.</ref><ref name=\"Ponomarenko\">N. Ponomarenko, K. Egiazarian, V. Lukin and J. Astola. Additional Lossless Compression of JPEG Images, Proc. of the 4th Intl. Symposium on Image and Signal Processing and Analysis (ISPA 2005), Zagreb, Croatia, pp. 117\u2013120, September 15\u201317, 2005.</ref><ref name=\"Stirner\">M. Stirner and G. Seelmann. Improved Redundancy Reduction for JPEG Files. Proc. of Picture Coding Symposium (PCS 2007), Lisbon, Portugal, November 7\u20139, 2007</ref><ref name=\"Matsuda\">Ichiro Matsuda, Yukio Nomoto, Kei Wakabayashi and Susumu Itoh. Lossless Re-encoding of JPEG images using block-adaptive intra prediction. Proceedings of the 16th European Signal Processing Conference (EUSIPCO 2008).</ref> This has applications in scenarios where the original image is only available in JPEG format, and its size needs to be reduced for archiving or transmission. Standard general-purpose compression tools cannot significantly compress JPEG files.\n\nTypically, such schemes take advantage of improvements to the naive scheme for coding DCT coefficients, which fails to take into account:\n* Correlations between magnitudes of adjacent coefficients in the same block;\n* Correlations between magnitudes of the same coefficient in adjacent blocks;\n* Correlations between magnitudes of the same coefficient/block in different channels;\n* The DC coefficients when taken together resemble a downscale version of the original image multiplied by a scaling factor. Well-known schemes for [[Lossless compression#Graphics|lossless coding of continuous-tone images]] can be applied, achieving somewhat better compression than the [[Huffman code]]d [[DPCM]] used in JPEG.\n\nSome standard but rarely used options already exist in JPEG to improve the efficiency of coding DCT coefficients: the arithmetic coding option, and the progressive coding option (which produces lower bitrates because values for each coefficient are coded independently, and each coefficient has a significantly different distribution). Modern methods have improved on these techniques by reordering coefficients to group coefficients of larger magnitude together;<ref name=\"Bauermann\" /> using adjacent coefficients and blocks to predict new coefficient values;<ref name=\"Stirner\" /> dividing blocks or coefficients up among a small number of independently coded models based on their statistics and adjacent values;<ref name=\"Ponomarenko\" /><ref name=\"Stirner\" /> and most recently, by decoding blocks, predicting subsequent blocks in the spatial domain, and then encoding these to generate predictions for DCT coefficients.<ref name=\"Matsuda\" />\n\nTypically, such methods can compress existing JPEG files between 15 and 25 percent, and for JPEGs compressed at low-quality settings, can produce improvements of up to 65%.<ref name=\"Stirner\" /><ref name=\"Matsuda\" />\n\nA freely available tool called packJPG is based on the 2007 paper \"Improved Redundancy Reduction for JPEG Files.\"<ref>{{cite web|url=http://www.elektronik.htw-aalen.de/packjpg/ |title=Latest Binary Releases of packJPG: V2.3a |date=January 3, 2008 |url-status=dead |archiveurl=https://web.archive.org/web/20090123232605/http://www.elektronik.htw-aalen.de/packjpg/ |archivedate=January 23, 2009}}</ref> A 2016 paper titled \"JPEG on steroids\" using [[JPEG XT#Reference software|ISO libjpeg]] shows that current techniques, lossy or not, can make JPEG nearly as efficient as [[JPEG XR]].<ref>{{cite journal |last1=Richter |first1=Thomas |title=JPEG on STEROIDS: Common optimization techniques for JPEG image compression |journal=2016 IEEE International Conference on Image Processing (ICIP) |date=September 2016 |pages=61\u201365 |doi=10.1109/ICIP.2016.7532319 |lay-url=https://encode.su/threads/2634-JPEG-on-Steroids?p=50763&viewfull=1}}</ref> [[#JPEG XL|JPEG XL]] is a new file format that promises to losslessly re-encode a JPEG with efficient back-conversion to JPEG.\n\n== Derived formats ==\n\n=== For stereoscopic 3D ===\n\n==== JPEG Stereoscopic ====\n[[File:JPS-sample.jpg|thumb|An example of a stereoscopic .JPS file]]\nJPS is a stereoscopic JPEG image used for creating 3D effects from 2D images. It contains two static images, one for the left eye and one for the right eye; encoded as two side-by-side images in a single JPG file.\nJPEG Stereoscopic (JPS, extension .jps) is a JPEG-based format for [[stereoscopy|stereoscopic]] images.<ref>{{cite web |author1=J. Siragusa |author2=D. C. Swift |url=http://vrex.com/developer/sterdesc.pdf |title=General Purpose Stereoscopic Data Descriptor |work=VRex, Inc., Elmsford, New York City |date=1997 |archiveurl=https://web.archive.org/web/20111030182549/http://vrex.com/developer/sterdesc.pdf |archivedate=2011-10-30}}</ref><ref>Tim Kemp, [http://ephehm.com/jps/ JPS files]</ref> It has a range of configurations stored in the JPEG APP3 marker field, but usually contains one image of double width, representing two images of identical size in cross-eyed (i.e. left frame on the right half of the image and vice versa) side-by-side arrangement. This file format can be viewed as a JPEG without any special software, or can be processed for rendering in other modes.\n\n==== JPEG Multi-Picture Format ====\n<!-- This section is linked from [[MPO]] -->\nJPEG Multi-Picture Format (MPO, extension .mpo) is a JPEG-based format for storing multiple images in a single file. It contains two or more JPEG files concatenated together.<ref>{{cite web|url=http://www.cipa.jp/std/documents/e/DC-X007-KEY_E.pdf |title=Multi-Picture Format |date=2009 |accessdate=2019-12-26}}</ref><ref>{{citation |url=http://www.mtbs3d.com/phpbb/viewtopic.php?f=3&t=4124&start=15 |title=MPO2Stereo: Convert Fujifilm MPO files to JPEG stereo pairs|website=Mtbs3d.com|accessdate=12 January 2010}}</ref> It also defines a JPEG APP2 marker segment for image description. Various devices use it to store 3D images, such as [[Fujifilm FinePix Real 3D W1]], [[HTC Evo 3D]], JVC GY-HMZ1U AVCHD/MVC extension camcorder, [[Nintendo 3DS]], [[Sony PlayStation 3]],<ref>{{cite web|url=https://manuals.playstation.net/document/en/ps3/current/photo/filetypes.html |title=PS3 Types of files that can be displayed |date=2019 |accessdate=2020-02-29}}</ref> [[Sony PlayStation Vita]],<ref>{{cite web|url=https://manuals.playstation.net/document/en/psvita/photos/filetypes.html |title=Types of files you can view with the Photos application |date=2019 |accessdate=2020-02-29}}</ref> [[Panasonic Lumix DMC-TZ20]], [[Panasonic Lumix DMC-TZ30|DMC-TZ30]], [[Panasonic Lumix DMC-TZ60|DMC-TZ60]], DMC-TS4 (FT4), and [[Sony]] DSC-HX7V. Other devices use it to store \"preview images\" that can be displayed on a TV.\n\nIn the last few years, due to the growing use of stereoscopic images, much effort has been spent by the scientific community to develop algorithms for stereoscopic image compression.<ref>{{citation |url=http://iplab.dmi.unict.it/publication/503 |title=A new fast matching method for adaptive compression of stereoscopic images|journal=Three-Dimensional Image Processing|volume=9393|pages=93930K|author1=Alessandro Ortis |author2=Sebastiano Battiato |publisher=SPIE \u2013 Three-Dimensional Image Processing, Measurement (3DIPM), and Applications 2015|accessdate=30 April 2015|bibcode=2015SPIE.9393E..0KO|year=2015|doi=10.1117/12.2086372|series=Three-Dimensional Image Processing, Measurement (3DIPM), and Applications 2015}}</ref><ref>{{citation |url=http://iplab.dmi.unict.it/publication/49 |title=Adaptive Compression of Stereoscopic Images|author1=Alessandro Ortis |author2=Francesco Rundo |author3=Giuseppe Di Giore |author4=Sebastiano Battiato |publisher=International Conference on Image Analysis and Processing (ICIAP) 2013|accessdate=30 April 2015}}</ref>\n\n=== JPEG XT ===\n{{Main|JPEG XT}}\n\nJPEG XT (ISO/IEC 18477) was published in June 2015; it extends base JPEG format with support for higher integer bit depths (up to 16 bit), high dynamic range imaging and floating-point coding, lossless coding, and alpha channel coding. Extensions are backward compatible with the base JPEG/JFIF file format and 8-bit lossy compressed image. JPEG XT uses an extensible file format based on JFIF. Extension layers are used to modify the JPEG 8-bit base layer and restore the high-resolution image. Existing software is forward compatible and can read the JPEG XT binary stream, though it would only decode the base 8-bit layer.<ref>{{cite web|url=https://jpeg.org/jpegxt/|title=JPEG \u2013 JPEG XT|website=jpeg.org}}</ref>\n\n=== JPEG XL ===\n{{main|JPEG XL}}\nSince August 2017, JTC1/SC29/WG1 issued a series of draft calls for proposals on JPEG XL{{snd}}the next generation image compression standard with substantially better compression efficiency (60% improvement) comparing to JPEG.<ref>{{cite web|url=https://jpeg.org/items/20180423_cfp_jpeg_xl.html|title=JPEG \u2013 Next-Generation Image Compression (JPEG XL) Final Draft Call for Proposals|website=Jpeg.org|accessdate=29 May 2018}}</ref> The standard is expected to exceed the still image compression performance shown by [[HEVC]] HM, [[Daala]] and [[WebP]], and unlike previous efforts attempting to replace JPEG, to provide lossless more efficient recompression transport and storage option for traditional JPEG images.<ref>{{cite book|chapter=JPEG XL next-generation image compression architecture and coding tools| first1=Jyrki|title = Applications of Digital Image Processing XLII|pages = 20|last1=Alakuijala| first2=Ruud|last2=van Asseldonk| first3=Sami|last3=Boukortt| first4=Martin|last4=Bruse| first5=Iulia-Maria|last5=Com\u0219a| first6=Moritz|last6=Firsching| first7=Thomas|last7=Fischbacher| first8=Evgenii|last8=Kliuchnikov| first9=Sebastian|last9=Gomez| first10=Robert|last10=Obryk| first11=Krzysztof|last11=Potempa| first12=Alexander|last12=Rhatushnyak| first13=Jon|last13=Sneyers| first14=Zoltan|last14=Szabadka| first15=Lode|last15=Vandervenne| first16=Luca|last16=Versari| first17=Jan|last17=Wassenberg| date=2019-09-06|doi = 10.1117/12.2529237|isbn = 978-1-5106-2967-7}}</ref><ref>{{cite web|url=https://qiita.com/fg11894/items/5ae0be6b620535880d0d|title=Google Pik\u8a66\u3057\u3066\u307f\u305f |accessdate=22 August 2019}}</ref><ref name=\"Rhatushnyak\">{{cite arXiv|title=Committee Draft of JPEG XL Image Coding System|eprint = 1908.03565|last1 = Rhatushnyak|first1 = Alexander|last2 = Wassenberg|first2 = Jan|last3 = Sneyers|first3 = Jon|last4 = Alakuijala|first4 = Jyrki|last5 = Vandevenne|first5 = Lode|last6 = Versari|first6 = Luca|last7 = Obryk|first7 = Robert|last8 = Szabadka|first8 = Zoltan|last9 = Kliuchnikov|first9 = Evgenii|last10 = Comsa|first10 = Iulia-Maria|last11 = Potempa|first11 = Krzysztof|last12 = Bruse|first12 = Martin|last13 = Firsching|first13 = Moritz|last14 = Khasanova|first14 = Renata|author15 = Ruud van Asseldonk|last16 = Boukortt|first16 = Sami|last17 = Gomez|first17 = Sebastian|last18 = Fischbacher|first18 = Thomas|class = eess.IV|year = 2019}}</ref> The core requirements include support for very high-resolution images (at least 40 MP), 8\u201310 bits per component, RGB/YCbCr/ICtCp color encoding, animated images, alpha channel coding, [[Rec.709]] color space ([[sRGB]]) and gamma function (2.4-power), [[Rec.2100]] [[wide color gamut]] color space (Rec.2020) and [[high dynamic range]] transfer functions (PQ and HLG), and high-quality compression of synthetic images, such as bitmap fonts and gradients. The standard should also offer higher bit depths (12\u201316 bit integer and floating point), additional color spaces and transfer functions (such as Log C from [[Arri Alexa|Arri]]), embedded preview images, lossless alpha channel encoding, image region coding, and low-complexity encoding. Any patented technologies would be licensed on a [[royalty-free]] basis. The proposals were submitted by September 2018, leading to a committee draft in July 2019, with current target publication date in October 2019.<ref>{{cite web|url=https://jpeg.org/downloads/jpegxl/jpegxl-cfp.pdf|title=N79010 Final Call for Proposals for a Next-Generation Image Coding Standard (JPEG XL) |work=ISO/IEC JTC 1/SC 29/WG 1 (ITU-T SG16)|accessdate=29 May 2018}}</ref><ref name=\"Rhatushnyak\" />\n\n=== Incompatible JPEG standards ===\nThe Joint Photography Experts Group is also responsible for some other formats bearing the JPEG name, including [[JPEG 2000]], [[JPEG XR]], and [[JPEG XS]].\n\n== Implementations ==\nA very important implementation of a JPEG codec is the free programming library ''[[libjpeg]]'' of the Independent JPEG Group. It was first published in 1991 and was key for the success of the standard.<ref>{{cite web|url=http://jpeg.org/jpeg|title=Overview of JPEG|website=jpeg.org|accessdate=2017-10-16}}</ref> This library or a direct derivative of it is used in countless applications. Recent versions introduce proprietary extensions [[libjpeg#history|which broke ABI compatibility with previous versions]].\n\nIn March 2017, Google released the open source project [[Guetzli]], which trades off a much longer encoding time for smaller file size (similar to what [[Zopfli]] does for PNG and other lossless data formats).<ref>{{cite web|url=https://research.googleblog.com/2017/03/announcing-guetzli-new-open-source-jpeg.html|title=Announcing Guetzli: A New Open Source JPEG Encoder|website=Research.googleblog.com|accessdate=16 October 2017}}</ref>\n\nISO/IEC [[Joint Photography Experts Group]] maintains a reference software implementation which can encode both base JPEG (ISO/IEC 10918-1 and 18477-1) and [[JPEG XT]] extensions (ISO/IEC 18477 Parts 2 and 6-9), as well as [[JPEG-LS]] (ISO/IEC 14495).<ref>{{cite web|url=https://jpeg.org/jpegxt/software.html|title=JPEG \u2013 JPEG XT|website=jpeg.org}}</ref>\n\n== See also ==\n{{Commons category|JPEG compression}}\n* [[Better Portable Graphics]], a format based on intra-frame encoding of the HEVC\n* [[C-Cube]], an early implementer of JPEG in chip form\n* [[Comparison of graphics file formats]]\n* [[Comparison of layout engines (graphics)]]\n* [[Deblocking filter (video)]], the similar deblocking methods could be applied to JPEG\n* [[Design rule for Camera File system]] (DCF)\n* [[File extensions]]\n* [[Graphics editing program]]\n* [[High Efficiency Image File Format]], image container format for [[High Efficiency Video Coding|HEVC]] and other image coding formats\n* [[Lenna (test image)]], the traditional standard image used to test image processing algorithms\n* Lossless Image Codec [[FELICS]]\n* [[Motion JPEG]]\n\n== References ==\n{{reflist|colwidth=30em}}\n\n== External links ==\n* [https://www.w3.org/Graphics/JPEG/itu-t81.pdf JPEG Standard (JPEG ISO/IEC 10918-1 ITU-T Recommendation T.81)] at W3.org\n* [https://www.jpeg.org/ Official Joint Photographic Experts Group (JPEG) site]\n* [https://www.w3.org/Graphics/JPEG/jfif3.pdf JFIF File Format] at W3.org\n* [https://code.google.com/p/micro-jpeg-visualizer/ JPEG viewer in 250 lines of easy to understand Python code]\n* [https://code.google.com/p/jpeg-compressor/ Public domain JPEG compressor in a single C++ source file, along with a matching decompressor] at code.google.com\n* [https://opensource.apple.com/source/WebCore/WebCore-1C25/platform/image-decoders/jpeg/ JPEG decoder open source code, copyright (C) 1995\u20131997, Thomas G. Lane]\n\n{{Compression formats}}\n{{Graphics file formats}}\n\n[[Category:JPEG| ]]\n[[Category:Articles containing video clips]]\n[[Category:Computer-related introductions in 1992]]\n[[Category:Discovery and invention controversies]]\n[[Category:American inventions]]\n[[Category:Indian inventions]]\n[[Category:Japanese inventions]]\n[[Category:Taiwanese inventions]]\n[[Category:ITU-T recommendations]]\n[[Category:ITU-T Recommendations Series]]\n[[Category:IEC standards]]\n[[Category:ISO standards]]\n[[Category:Lossy compression algorithms]]\n[[Category:Image compression]]\n[[Category:Open formats]]\n[[Category:Raster graphics file formats]]\n", "name_user": "Brainulator9", "label": "safe", "comment": "infobox and cite cleanup", "url_page": "//en.wikipedia.org/wiki/JPEG"}
{"title_page": "William Michell", "text_new": "{{About||[[William Michell (MP for Derbyshire)]]|Derbyshire (UK Parliament constituency)|those of a similar name|William Mitchell (disambiguation)}}\n{{Use dmy dates|date=December 2017}}\n{{Use British English|date=December 2017}}\n\n'''William Michell''' (14 February 1796 \u2013 4 November 1872) was a British physician and [[Member of Parliament]].\n\nThe son of Bennet Michell, he was born in [[Bodmin]] in 1796. He wrote a paper on the use of [[ergot]] in childbirth in 1828; that year he was also admitted to [[Emmanuel College, Cambridge]], receiving an [[Bachelor of Medicine and Surgery|MB]] in 1834, and an [[Doctor of Medicine|MD]] in 1839.<ref>{{acad|id=MCL828W|name=Michell, William}}</ref> Michell was admitted an [[Membership of the Royal College of Surgeons|MRCS]] in 1843. He was elected an MP for [[Bodmin (UK Parliament constituency)|Bodmin]] in 1852.\n\nIn 1859, faced with a petition against him by [[James Wyld]] for corrupt practices during the elections, he agreed not to defend his seat if Wyld would withdraw the petition. Attacked by [[John Arthur Roebuck]], who saw in this an attempt to escape charges, Michell replied that his means were insufficient to sustain the expenses necessary to defend himself against the petition. Roebuck's motion to prevent him from resigning was defeated, and he left Parliament by becoming [[Steward of the Chiltern Hundreds]]. He died in [[Plymouth, England|Plymouth]] in 1872.\n\n==References==\n{{Portal|Cornwall}}\n{{reflist}}\n*{{Rayment|date=February 2012}}\n*{{cite book | title=Modern English Biography v. 2 | first=Frederic | last=Boase | publisher=Netherton & Worth | year=1897 | page=865 | url=https://books.google.com/books?id=_IVmAAAAMAAJ | accessdate=2008-08-24}}\n*''Hansard's Parliamentary Debates'', 5 August 1859. \"Election Compromises\u2014Bodmin Election\".\n\n{{S-start}}\n{{s-par|uk}}\n{{succession box\n | title=[[Member of Parliament]] for [[Bodmin (UK Parliament constituency)|Bodmin]]\n | years=1852\u20131857\n | alongside = [[Sir Charles Graves-Sawle, 2nd Baronet|Charles Graves-Sawle]]\n | before=[[James Wyld]] | before2=[[Henry Charles Lacy]]\n | after=[[John Cranch Walker Vivian|John Vivian]] | after2=[[James Wyld]]\n}}\n{{succession box\n | title=[[Member of Parliament]] for [[Bodmin (UK Parliament constituency)|Bodmin]]\n | years=1859\n | alongside = [[Frederick Leveson-Gower (Bodmin)|Hon. Frederick Leveson-Gower]]\n | before=[[John Cranch Walker Vivian|John Vivian]] | before2=[[James Wyld]]\n | after=[[Frederick Leveson-Gower (Bodmin)|Hon. Frederick Leveson-Gower]] | after2=[[James Wyld]]\n}}\n{{S-end}}\n\n{{DEFAULTSORT:Michell, William}}\n[[Category:1796 births]]\n[[Category:1872 deaths]]\n[[Category:Alumni of Emmanuel College, Cambridge]]\n[[Category:Members of the Parliament of the United Kingdom for constituencies in Cornwall]]\n[[Category:UK MPs 1852\u20131857]]\n[[Category:UK MPs 1857\u20131859]]\n[[Category:People from Bodmin]]\n", "text_old": "{{About||[[William Michell (MP for Derbyshire)]]|Derbyshire (UK Parliament constituency)|those of a similar name|William Mitchell (disambiguation)}}\n{{Use dmy dates|date=December 2017}}\n{{Use British English|date=December 2017}}\n\n'''William Michell''' (14 February 1796 \u2013 4 November 1872) was a British physician and [[Member of Parliament]].\n\nThe son of Bennet Michell, he was born in [[Bodmin]] in 1796. He wrote a paper on the use of [[ergot]] in childbirth in 1828; that year he was also admitted to [[Emmanuel College, Cambridge]], receiving an [[Bachelor of Medicine and Surgery|MB]] in 1834, and an [[Doctor of Medicine|MD]] in 1839.<ref>{{acad|id=MCL828W|name=Michell, William}}</ref> Michell was admitted an [[Membership of the Royal College of Surgeons|MRCS]] in 1843. He was elected an MP for [[Bodmin (UK Parliament constituency)|Bodmin]] in 1852.\n\nIn 1859, faced with a petition against him by [[James Wyld]] for corrupt practices during the elections, he agreed not to defend his seat if Wyld would withdraw the petition. Attacked by [[John Arthur Roebuck]], who saw in this an attempt to escape charges, Michell replied that his means were insufficient to sustain the expenses necessary to defend himself against the petition. Roebuck's motion to prevent him from resigning was defeated, and he left Parliament by becoming [[Steward of the Chiltern Hundreds]]. He died in [[Plymouth, England|Plymouth]] in 1872.\n\n==References==\n{{reflist}}\n*{{Rayment|date=February 2012}}\n*{{cite book | title=Modern English Biography v. 2 | first=Frederic | last=Boase | publisher=Netherton & Worth | year=1897 | page=865 | url=https://books.google.com/books?id=_IVmAAAAMAAJ | accessdate=2008-08-24}}\n*''Hansard's Parliamentary Debates'', 5 August 1859. \"Election Compromises\u2014Bodmin Election\".\n\n{{S-start}}\n{{s-par|uk}}\n{{succession box\n | title=[[Member of Parliament]] for [[Bodmin (UK Parliament constituency)|Bodmin]]\n | years=1852\u20131857\n | alongside = [[Sir Charles Graves-Sawle, 2nd Baronet|Charles Graves-Sawle]]\n | before=[[James Wyld]] | before2=[[Henry Charles Lacy]]\n | after=[[John Cranch Walker Vivian|John Vivian]] | after2=[[James Wyld]]\n}}\n{{succession box\n | title=[[Member of Parliament]] for [[Bodmin (UK Parliament constituency)|Bodmin]]\n | years=1859\n | alongside = [[Frederick Leveson-Gower (Bodmin)|Hon. Frederick Leveson-Gower]]\n | before=[[John Cranch Walker Vivian|John Vivian]] | before2=[[James Wyld]]\n | after=[[Frederick Leveson-Gower (Bodmin)|Hon. Frederick Leveson-Gower]] | after2=[[James Wyld]]\n}}\n{{S-end}}\n\n{{DEFAULTSORT:Michell, William}}\n[[Category:1796 births]]\n[[Category:1872 deaths]]\n[[Category:Alumni of Emmanuel College, Cambridge]]\n[[Category:Members of the Parliament of the United Kingdom for constituencies in Cornwall]]\n[[Category:UK MPs 1852\u20131857]]\n[[Category:UK MPs 1857\u20131859]]\n[[Category:People from Bodmin]]\n", "name_user": "Gazamp", "label": "safe", "comment": "\u2192\u200eReferences:AddedPortal:Cornwall", "url_page": "//en.wikipedia.org/wiki/William_Michell"}
{"title_page": "Aspartate transaminase", "text_new": "{{enzyme\n| Name = aspartate transaminase\n| EC_number = 2.6.1.1\n| CAS_number = 9000-97-9\n| IUBMB_EC_number = 2/6/1/1\n| GO_code = 0004069\n| image = Aspartate transaminase.png\n| width = \n| caption =  Aspartate aminotransferase from ''[[E. coli|Escherichia coli]]'' bound with cofactor [[Pyridoxal-phosphate|pyridoxal 5-phosphate]].<ref name=\"pmid7909946\">{{PDB|1AAM}}{{cite journal |vauthors=Almo SC, Smith DL, Danishefsky AT, Ringe D | title = The structural basis for the altered substrate specificity of the R292D active site mutant of aspartate aminotransferase from E. coli | journal = Protein Eng. | volume = 7 | issue = 3 | pages = 405\u2013412 |date=March 1994 | pmid = 7909946 | doi = 10.1093/protein/7.3.405| url =  }}</ref>\n|name=}}\n\n'''Aspartate transaminase''' ('''AST''') or '''aspartate aminotransferase''', also known as '''AspAT/ASAT/AAT''' or '''(serum) glutamic oxaloacetic transaminase''' ('''GOT''', '''SGOT'''), is a [[pyridoxal phosphate]] (PLP)-dependent [[transaminase]] enzyme ({{EC number|2.6.1.1}}) that was first described by Arthur Karmen and colleagues in 1954.<ref>{{cite journal|last1=KARMEN|first1=A|last2=WROBLEWSKI|first2=F|last3=LADUE|first3=JS|title=Transaminase activity in human blood.|journal=The Journal of Clinical Investigation|date=January 1955|volume=34|issue=1|pages=126\u201331|pmid=13221663|doi=10.1172/jci103055|pmc=438594}}</ref><ref>{{cite journal|last1=KARMEN|first1=A|title=A note on the spectrometric assay of glutamic-oxalacetic\u00f1nn transaminase in human blood serum.|journal=The Journal of Clinical Investigation|date=January 1955|volume=34|issue=1|pages=131\u20133|pmid=13221664|pmc=438594|doi=10.1172/JCI103055}}</ref><ref>{{cite journal|last1=LADUE|first1=JS|last2=WROBLEWSKI|first2=F|last3=KARMEN|first3=A|title=Serum glutamic oxaloacetic transaminase activity in human acute transmural myocardial infarction.|journal=Science|date=24 September 1954|volume=120|issue=3117|pages=497\u20139|pmid=13195683|doi=10.1126/science.120.3117.497}}</ref> AST catalyzes the reversible transfer of an \u03b1-amino group between aspartate and glutamate and, as such, is an important enzyme in amino acid metabolism. AST is found in the [[liver]], [[heart]], [[skeletal muscle]], [[kidneys]], [[brain]], and red blood cells. Serum AST level, serum ALT ([[alanine transaminase]]) level, and their ratio ([[AST/ALT ratio]]) are commonly measured clinically as [[biomarker]]s for liver health. The tests are part of [[blood test|blood panels]].\n\n==Function==\nAspartate transaminase catalyzes the interconversion of [[aspartate]] and [[\u03b1-ketoglutarate]] to [[oxaloacetate]] and [[glutamate]].\n\nL-Aspartate (Asp) + \u03b1-ketoglutarate \u2194 oxaloacetate + L-glutamate (Glu)\n\n[[File:Aspartate aminotransferase reaction.png|thumb|450px|Reaction catalyzed by aspartate aminotransferase]]\n\nAs a prototypical transaminase, AST relies on PLP (Vitamin B6) as a cofactor to transfer the amino group from aspartate or glutamate to the corresponding [[ketoacid]]. In the process, the cofactor shuttles between PLP and the [[pyridoxamine phosphate]] (PMP) form.<ref name=\"pmid6143829\">{{cite journal| author=Kirsch JF| title=Mechanism of action of aspartate aminotransferase proposed on the basis of its spatial structure | journal=J Mol Biol | year= 1984 | volume= 174 | issue= 3 | pages= 497\u2013525 | pmid=6143829 | doi= 10.1016/0022-2836(84)90333-4| pmc= |name-list-format=vanc| author2=Eichele G| author3=Ford G| author4=Vincent MG| author5=Jansonius JN| author6=Gehring H| display-authors=6| last7=Christen| first7=P  }}</ref> The amino group transfer catalyzed by this enzyme is crucial in both amino acid degradation and biosynthesis. In amino acid degradation, following the conversion of \u03b1-ketoglutarate to glutamate, glutamate subsequently undergoes oxidative deamination to form [[ammonium]] ions, which are excreted as [[urea]]. In the reverse reaction, aspartate may be synthesized from oxaloacetate, which is a key intermediate in the [[citric acid cycle]].<ref name=\"Biochemistry\">{{cite book | last1 = Berg | first1 = JM | last2 = Tymoczko | first2 = JL | last3 = Stryer | first3 = L | title = Biochemistry | publisher = W.H. Freeman | year = 2006 | pages = 656\u2013660 | isbn = 978-0-7167-8724-2}}</ref>\n\n==Isoenzymes==\nTwo isoenzymes are present in a wide variety of eukaryotes.  In humans:\n\n* [[GOT1]]/cAST, the [[cytosol]]ic isoenzyme derives mainly from [[red blood cell]]s and [[heart]].\n* [[GOT2]]/mAST, the [[Mitochondrion|mitochondrial]] isoenzyme is present predominantly in liver.\n\nThese isoenzymes are thought to have evolved from a common ancestral AST via gene duplication, and they share a sequence homology of approximately 45%.<ref name=\"pmid2197992\">{{cite journal|vauthors=Hayashi H, Wada H, Yoshimura T, Esaki N, Soda K | title=Recent topics in pyridoxal 5'-phosphate enzyme studies | journal=Annu Rev Biochem | year= 1990 | volume= 59 | issue=  | pages= 87\u2013110 | pmid=2197992 | doi=10.1146/annurev.bi.59.070190.000511 | pmc= | url= }}</ref>\n\nAST has also been found in a number of microorganisms, including ''[[E. coli]]'', ''[[Haloferax|H. mediterranei]]'',<ref name=\"pmid1909112\">{{cite journal|vauthors=Muriana FJ, Alvarez-Ossorio MC, Relimpio AM | title=Purification and characterization of aspartate aminotransferase from the halophile archaebacterium Haloferax mediterranei | journal=Biochem J | year= 1991 | volume= 278 | issue=  1| pages= 149\u201354 | pmid=1909112 | doi= 10.1042/bj2780149| pmc=1151461 | url= }}</ref> and ''[[Thermus thermophilus|T. thermophilus]]''.<ref name=\"pmid8907187\">{{cite journal|vauthors=Okamoto A, Kato R, Masui R, Yamagishi A, Oshima T, Kuramitsu S | title=An aspartate aminotransferase from an extremely thermophilic bacterium, Thermus thermophilus HB8 | journal=J Biochem | year= 1996 | volume= 119 | issue= 1 | pages= 135\u201344 | pmid=8907187 | doi= 10.1093/oxfordjournals.jbchem.a021198| pmc= | url= }}</ref> In ''E. coli'', the enzyme is encoded by the ''aspC''gene and has also been shown to exhibit the activity of an [[aromatic-amino-acid transaminase]] ({{EC number|2.6.1.57}}).<ref name=\"pmid15983\">{{cite journal|vauthors=Gelfand DH, Steinberg RA | title=Escherichia coli mutants deficient in the aspartate and aromatic amino acid aminotransferases | journal=J Bacteriol | year= 1977 | volume= 130 | issue= 1 | pages= 429\u201340 | pmid=15983 | doi= | pmc=235221 | url= }}</ref>\n\n==Structure==\n[[File:Aspartate aminotransferase.png|thumb|450px|right|Structure of aspartate transaminase from chicken heart mitochondria]]\n\n[[X-ray crystallography]] studies have been performed to determine the structure of aspartate transaminase from various sources, including chicken mitochondria,<ref name=\"pmid1593633\">{{cite journal|vauthors=McPhalen CA, Vincent MG, Jansonius JN | title=X-ray structure refinement and comparison of three forms of mitochondrial aspartate aminotransferase | journal=J Mol Biol | year= 1992 | volume= 225 | issue= 2 | pages= 495\u2013517 | pmid=1593633 | doi= 10.1016/0022-2836(92)90935-D| pmc= }}</ref> pig heart cytosol,<ref name=\"pmid9211866\">{{cite journal| author=Rhee S| title=Refinement and comparisons of the crystal structures of pig cytosolic aspartate aminotransferase and its complex with 2-methylaspartate | journal=J Biol Chem | year= 1997 | volume= 272 | issue= 28 | pages= 17293\u2013302 | pmid=9211866 | doi= 10.1074/jbc.272.28.17293| pmc= | url=|name-list-format=vanc| author2=Silva MM| author3=Hyde CC| author4=Rogers PH| author5=Metzler CM| author6=Metzler DE| display-authors=6| last7=Arnone| first7=A }}</ref> and ''E. coli''.<ref name=\"pmid3071527\">{{cite journal| author=Kamitori S| title=Three-dimensional structure of aspartate aminotransferase from Escherichia coli at 2.8 A resolution | journal=J Biochem | year= 1988 | volume= 104 | issue= 3 | pages= 317\u20138 | pmid=3071527 | doi= 10.1093/oxfordjournals.jbchem.a122464| pmc= | url=|name-list-format=vanc| author2=Hirotsu K| author3=Higuchi T| author4=Kondo K| author5=Inoue K| author6=Kuramitsu S| display-authors=6| last7=Kagamiyama| first7=H| last8=Higuchi| first8=Y| last9=Yasuoka| first9=N }}</ref><ref name=\"pmid1993208\">{{cite journal|vauthors=Danishefsky AT, Onnufer JJ, Petsko GA, Ringe D | title=Activity and structure of the active-site mutants R386Y and R386F of Escherichia coli aspartate aminotransferase | journal=Biochemistry | year= 1991 | volume= 30 | issue= 7 | pages= 1980\u20131985 | pmid=1993208 | doi= 10.1021/bi00221a035| pmc= | url= }}</ref>  Overall, the three-dimensional polypeptide structure for all species is quite similar.  AST is [[Protein dimer|dimeric]], consisting of two identical subunits, each with approximately 400 amino acid residues and a molecular weight of approximately 45 kD.<ref name=\"pmid2197992\"/>  Each subunit is composed of a large and a small domain, as well as a third domain consisting of the N-terminal residues 3-14; these few residues form a strand, which links and stabilizes the two subunits of the dimer.  The large domain, which includes residues 48-325, binds the PLP cofactor via an [[aldimine]] linkage to the \u03b5-amino group of Lys258.  Other residues in this domain \u2013 Asp 222 and Tyr 225 \u2013 also interact with PLP via [[hydrogen bonding]].  The small domain consists of residues 15-47 and 326-410 and represents a flexible region that shifts the enzyme from an \"open\" to a \"closed\" conformation upon substrate binding.<ref name=\"pmid1593633\"/><ref name=\"pmid1993208\"/><ref name=\"pmid1522585\">{{cite journal|vauthors=McPhalen CA, Vincent MG, Picot D, Jansonius JN, Lesk AM, Chothia C | title=Domain closure in mitochondrial aspartate aminotransferase | journal=J Mol Biol | year= 1992 | volume= 227 | issue= 1 | pages= 197\u2013213 | pmid=1522585 | doi= 10.1016/0022-2836(92)90691-C| pmc= }}</ref>\n\nThe two independent active sites are positioned near the interface between the two domains.   Within each active site, a couple arginine residues are responsible for the enzyme\u2019s specificity for [[dicarboxylic acid]] substrates:  Arg386 interacts with the substrate\u2019s proximal (\u03b1-)carboxylate group, while Arg292 complexes with the distal (side-chain) carboxylate.<ref name=\"pmid1593633\"/><ref name=\"pmid1993208\"/>\n\nIn terms of secondary structure, AST contains both \u03b1 and \u03b2 elements.  Each domain has a central sheet of \u03b2-strands with \u03b1-helices packed on either side.\n\n==Mechanism==\nAspartate transaminase, as with all transaminases, operates via dual substrate recognition; that is, it is able to recognize and selectively bind two amino acids (Asp and Glu) with different side-chains.<ref name=\"pmid15889412\">{{cite journal|vauthors=Hirotsu K, Goto M, Okamoto A, Miyahara I | title=Dual substrate recognition of aminotransferases | journal=Chem Rec | year= 2005 | volume= 5 | issue= 3 | pages= 160\u2013172 | pmid=15889412 | doi=10.1002/tcr.20042 | pmc= | url= }}</ref> In either case, the transaminase reaction consists of two similar half-reactions that constitute what is referred to as a [[ping-pong mechanism]].  In the first half-reaction, amino acid 1 (e.g., L-Asp) reacts with the enzyme-PLP complex to generate ketoacid 1 (oxaloacetate) and the modified enzyme-PMP.  In the second half-reaction, ketoacid 2 (\u03b1-ketoglutarate) reacts with enzyme-PMP to produce amino acid 2 (L-Glu), regenerating the original enzyme-PLP in the process.  Formation of a racemic product (D-Glu) is very rare.<ref name=\"pmid1735441\">{{cite journal|vauthors=Kochhar S, Christen P | title=Mechanism of racemization of amino acids by aspartate aminotransferase | journal=Eur J Biochem | year= 1992 | volume= 203 | issue= 3 | pages= 563\u2013569 | pmid=1735441 | doi= 10.1111/j.1432-1033.1992.tb16584.x| pmc= | url= }}</ref>\n\nThe specific steps for the half-reaction of Enzyme-PLP + aspartate \u21cc Enzyme-PMP + oxaloacetate are as follows (see figure); the other half-reaction (not shown) proceeds in the reverse manner, with \u03b1-ketoglutarate as the substrate.<ref name=\"pmid6143829\"/><ref name=\"Biochemistry\"/>\n\n[[File:Aspartate aminotransferase mechanism.png|thumb|center|1000px|Reaction mechanism for aspartate aminotransferase]]\n\n#Internal [[aldimine]] formation:  First, the \u03b5-amino group of Lys258 forms a [[Schiff base]] linkage with the aldehyde carbon to generate an internal aldimine.\n#Transaldimination:  The internal aldimine then becomes an external aldimine when the \u03b5-amino group of Lys258 is displaced by the amino group of aspartate.  This transaldimination reaction occurs via a [[nucleophilic attack]] by the deprotonated amino group of Asp and proceeds through a tetrahedral intermediate.  As this point, the carboxylate groups of Asp are stabilized by the [[guanidinium]] groups of the enzyme\u2019s Arg386 and Arg 292 residues.\n#[[Quinonoid zwitterion|Quinonoid]] formation:  The hydrogen attached to the a-carbon of Asp is then abstracted (Lys258 is thought to be the proton acceptor) to form a quinonoid intermediate.\n#[[Ketimine]] formation:  The quinonoid is reprotonated, but now at the aldehyde carbon, to form the ketimine intermediate.\n#Ketimine [[hydrolysis]]:  Finally, the ketimine is hydrolyzed to form PMP and oxaloacetate.\n\nThis mechanism is thought to have multiple partially [[rate-determining step]]s.<ref name=\"pmid8611515\">{{cite journal|vauthors=Goldberg JM, Kirsch JF | title=The reaction catalyzed by Escherichia coli aspartate aminotransferase has multiple partially rate-determining steps, while that catalyzed by the Y225F mutant is dominated by ketimine hydrolysis | journal=Biochemistry | year= 1996 | volume= 35 | issue= 16 | pages= 5280\u20135291 | pmid=8611515 | doi=10.1021/bi952138d | pmc= }}</ref>  However, it has been shown that the substrate binding step (transaldimination) drives the catalytic reaction forward.<ref name=\"pmid12488449\">{{cite journal|vauthors=Hayashi H, Mizuguchi H, Miyahara I, Nakajima Y, Hirotsu K, Kagamiyama H | title=Conformational change in aspartate aminotransferase on substrate binding induces strain in the catalytic group and enhances catalysis | journal=J Biol Chem | year= 2003 | volume= 278 | issue= 11 | pages= 9481\u20139488 | pmid=12488449 | doi=10.1074/jbc.M209235200 | pmc= }}</ref>\n\n==Clinical significance==\nAST is similar to [[alanine transaminase]] (ALT) in that both enzymes are associated with liver [[parenchymal]] cells. The difference is that ALT is found predominantly in the liver, with clinically negligible quantities found in the kidneys, heart, and skeletal muscle, while AST is found in the liver, heart ([[myocardium|cardiac muscle]]), skeletal muscle, kidneys, brain, and red blood cells.<ref>http://dynaweb.ebscohost.com/Detail?sid=923b5a81-7daf-46b7-bdb2-86d8649da6ef@sessionmgr13&vid=&db=dme&ss=AN+%22316452%22&sl=ll{{dead link|date=October 2016|bot=InternetArchiveBot |fix-attempted=yes }}</ref> As a result, ALT is a more specific indicator of liver [[inflammation]] than AST, as AST may be elevated also in diseases affecting other organs, such as [[myocardial infarction]], [[acute pancreatitis]], acute [[hemolytic anemia]], severe burns, [[Renal disease|acute renal disease]], musculoskeletal diseases, and trauma.<ref>{{cite web|url=http://www.rnceus.com/lf/lfast.html|title=AST/ALT|website=www.rnceus.com}}</ref>\n\nAST was defined as a biochemical marker for the diagnosis of acute myocardial infarction in 1954. However, the use of AST for such a diagnosis is now redundant and has been superseded by the [[Troponin test|cardiac troponins]].<ref>{{cite journal |author=Gaze DC|title=The role of existing and novel cardiac biomarkers for cardioprotection|journal=Current Opinion in Investigational Drugs |volume=8 |issue=9 |pages=711\u20137 |year=2007 |pmid=17729182}}</ref>\n\nAST is commonly measured clinically as a part of diagnostic [[liver function tests]], to determine liver health.  However, it is important to keep in mind that the source of AST (and, to a lesser extent, ALT) in blood tests may reflect pathology in organs other than the liver.  In fact, when the AST is higher than ALT, a muscle source of these enzymes should be considered. For example, muscle inflammation due to [[dermatomyositis]] may cause AST>ALT. This is a good reminder that AST and ALT are not good measures of liver function because they do not reliably reflect the synthetic ability of the liver and they may come from tissues other than liver (such as muscle).\n\nLaboratory tests should always be interpreted using the reference range from the laboratory that performed the test. Example reference ranges are shown below:\n\n{| class=\"wikitable\"\n |-\n |'''Patient type'''||[[Reference range]]s<ref name=gpnotebook-ast>[http://www.gpnotebook.co.uk/simplepage.cfm?ID=322240579 GPnotebook > reference range (AST)] Retrieved on Dec 7, 2009</ref>\n |-\n | Male || 8\u201340 IU/L\n |-\n | Female || 6\u201334 IU/L\n|}\n\n==See also==\n* [[Alanine transaminase]] (ALT/ALAT/SGPT)\n* [[Transaminases]]\n\n==References==\n{{reflist}}\n\n==Further reading==\n* {{cite book | last1 = Jansonius | first1 = JN | last2 = Vincent | first2 = MG | chapter = Structural basis for catalysis by aspartate aminotransferase |title=Biological Macromolecules and Assemblies |volume=3 |editor= Jurnak FA |editor2=McPherson A | publisher = Wiley | year = 1987 | location = New York | pages = 187\u2013285 | isbn = 978-0-471-85142-4}}<!--| accessdate = 2011-05-18 -->\n* {{cite journal |vauthors=Kuramitsu S, Okuno S, Ogawa T, Ogawa H, Kagamiyama H |title=Aspartate aminotransferase of Escherichia coli: nucleotide sequence of the aspC gene |journal=J. Biochem. |volume=97 |issue=4 |pages=1259\u201362 |year=1985 |pmid=3897210|doi=10.1093/oxfordjournals.jbchem.a135173 }}\n* {{cite journal |vauthors=Kondo K, Wakabayashi S, Yagi T, Kagamiyama H |title=The complete amino acid sequence of aspartate aminotransferase from Escherichia coli: sequence comparison with pig isoenzymes |journal=Biochem. Biophys. Res. Commun. |volume=122 |issue=1 |pages=62\u201367 |year=1984 |pmid=6378205 |doi=10.1016/0006-291X(84)90439-X}}\n* {{cite journal |vauthors=Inoue K, Kuramitsu S, Okamoto A, Hirotsu K, Higuchi T, Kagamiyama H |title=Site-directed mutagenesis of Escherichia coli aspartate aminotransferase: role of Tyr70 in the catalytic processes |journal=Biochemistry |volume=30 |issue=31 |pages=7796\u20137801 |year=1991 |pmid=1868057 |doi=10.1021/bi00245a019}}\n\n==External links==\n{{Commons category}}\n*{{MeshName|Aspartate+Transaminase}}\n*[http://labtestsonline.org/understanding/analytes/ast/tab/test AST] - Lab Tests Online\n*[https://www.nlm.nih.gov/medlineplus/ency/article/003472.htm AST: MedlinePlus Medical Encyclopedia]\n\n{{Mitochondrial enzymes}}\n{{Citric acid cycle enzymes}}\n{{Amino acid metabolism enzymes}}\n{{Blood tests}}\n{{Nitrogenous transferases}}\n{{Enzymes}}\n{{Glutamate metabolism and transport modulators}}\n{{Portal bar|Biology|border=no}}\n\n{{Use dmy dates|date=April 2017}}\n\n{{DEFAULTSORT:Aspartate Transaminase}}\n[[Category:Liver function tests]]\n[[Category:EC 2.6.1]]\n[[Category:Glutamate (neurotransmitter)]]\n\n- Created by Benzamino\n", "text_old": "{{enzyme\n| Name = aspartate transaminase\n| EC_number = 2.6.1.1\n| CAS_number = 9000-97-9\n| IUBMB_EC_number = 2/6/1/1\n| GO_code = 0004069\n| image = Aspartate transaminase.png\n| width = \n| caption =  Aspartate aminotransferase from ''[[E. coli|Escherichia coli]]'' bound with cofactor [[Pyridoxal-phosphate|pyridoxal 5-phosphate]].<ref name=\"pmid7909946\">{{PDB|1AAM}}{{cite journal |vauthors=Almo SC, Smith DL, Danishefsky AT, Ringe D | title = The structural basis for the altered substrate specificity of the R292D active site mutant of aspartate aminotransferase from E. coli | journal = Protein Eng. | volume = 7 | issue = 3 | pages = 405\u2013412 |date=March 1994 | pmid = 7909946 | doi = 10.1093/protein/7.3.405| url =  }}</ref>\n|name=}}\n\n'''Aspartate transaminase''' ('''AST''') or '''aspartate aminotransferase''', also known as '''AspAT/ASAT/AAT''' or '''(serum) glutamic oxaloacetic transaminase''' ('''GOT''', '''SGOT'''), is a [[pyridoxal phosphate]] (PLP)-dependent [[transaminase]] enzyme ({{EC number|2.6.1.1}}) that was first described by Arthur Karmen and colleagues in 1954.<ref>{{cite journal|last1=KARMEN|first1=A|last2=WROBLEWSKI|first2=F|last3=LADUE|first3=JS|title=Transaminase activity in human blood.|journal=The Journal of Clinical Investigation|date=January 1955|volume=34|issue=1|pages=126\u201331|pmid=13221663|doi=10.1172/jci103055|pmc=438594}}</ref><ref>{{cite journal|last1=KARMEN|first1=A|title=A note on the spectrometric assay of glutamic-oxalacetic\u00f1nn transaminase in human blood serum.|journal=The Journal of Clinical Investigation|date=January 1955|volume=34|issue=1|pages=131\u20133|pmid=13221664|pmc=438594|doi=10.1172/JCI103055}}</ref><ref>{{cite journal|last1=LADUE|first1=JS|last2=WROBLEWSKI|first2=F|last3=KARMEN|first3=A|title=Serum glutamic oxaloacetic transaminase activity in human acute transmural myocardial infarction.|journal=Science|date=24 September 1954|volume=120|issue=3117|pages=497\u20139|pmid=13195683|doi=10.1126/science.120.3117.497}}</ref> AST catalyzes the reversible transfer of an \u03b1-amino group between aspartate and glutamate and, as such, is an important enzyme in amino acid metabolism. AST is found in the [[liver]], [[heart]], [[skeletal muscle]], [[kidneys]], [[brain]], and red blood cells. Serum AST level, serum ALT ([[alanine transaminase]]) level, and their ratio ([[AST/ALT ratio]]) are commonly measured clinically as [[biomarker]]s for liver health. The tests are part of [[blood test|blood panels]].\n\n==Function==\nAspartate transaminase catalyzes the interconversion of [[aspartate]] and [[\u03b1-ketoglutarate]] to [[oxaloacetate]] and [[glutamate]].\n\nL-Aspartate (Asp) + \u03b1-ketoglutarate \u2194 oxaloacetate + L-glutamate (Glu)\n\n[[File:Aspartate aminotransferase reaction.png|thumb|450px|Reaction catalyzed by aspartate aminotransferase]]\n\nAs a prototypical transaminase, AST relies on PLP (Vitamin B6) as a cofactor to transfer the amino group from aspartate or glutamate to the corresponding [[ketoacid]]. In the process, the cofactor shuttles between PLP and the [[pyridoxamine phosphate]] (PMP) form.<ref name=\"pmid6143829\">{{cite journal| author=Kirsch JF| title=Mechanism of action of aspartate aminotransferase proposed on the basis of its spatial structure | journal=J Mol Biol | year= 1984 | volume= 174 | issue= 3 | pages= 497\u2013525 | pmid=6143829 | doi= 10.1016/0022-2836(84)90333-4| pmc= |name-list-format=vanc| author2=Eichele G| author3=Ford G| author4=Vincent MG| author5=Jansonius JN| author6=Gehring H| display-authors=6| last7=Christen| first7=P  }}</ref> The amino group transfer catalyzed by this enzyme is crucial in both amino acid degradation and biosynthesis. In amino acid degradation, following the conversion of \u03b1-ketoglutarate to glutamate, glutamate subsequently undergoes oxidative deamination to form [[ammonium]] ions, which are excreted as [[urea]]. In the reverse reaction, aspartate may be synthesized from oxaloacetate, which is a key intermediate in the [[citric acid cycle]].<ref name=\"Biochemistry\">{{cite book | last1 = Berg | first1 = JM | last2 = Tymoczko | first2 = JL | last3 = Stryer | first3 = L | title = Biochemistry | publisher = W.H. Freeman | year = 2006 | pages = 656\u2013660 | isbn = 978-0-7167-8724-2}}</ref>\n\n==Isoenzymes==\nTwo isoenzymes are present in a wide variety of eukaryotes.  In humans:\n\n* [[GOT1]]/cAST, the [[cytosol]]ic isoenzyme derives mainly from [[red blood cell]]s and [[heart]].\n* [[GOT2]]/mAST, the [[Mitochondrion|mitochondrial]] isoenzyme is present predominantly in liver.\n\nThese isoenzymes are thought to have evolved from a common ancestral AST via gene duplication, and they share a sequence homology of approximately 45%.<ref name=\"pmid2197992\">{{cite journal|vauthors=Hayashi H, Wada H, Yoshimura T, Esaki N, Soda K | title=Recent topics in pyridoxal 5'-phosphate enzyme studies | journal=Annu Rev Biochem | year= 1990 | volume= 59 | issue=  | pages= 87\u2013110 | pmid=2197992 | doi=10.1146/annurev.bi.59.070190.000511 | pmc= | url= }}</ref>\n\nAST has also been found in a number of microorganisms, including ''[[E. coli]]'', ''[[Haloferax|H. mediterranei]]'',<ref name=\"pmid1909112\">{{cite journal|vauthors=Muriana FJ, Alvarez-Ossorio MC, Relimpio AM | title=Purification and characterization of aspartate aminotransferase from the halophile archaebacterium Haloferax mediterranei | journal=Biochem J | year= 1991 | volume= 278 | issue=  1| pages= 149\u201354 | pmid=1909112 | doi= 10.1042/bj2780149| pmc=1151461 | url= }}</ref> and ''[[Thermus thermophilus|T. thermophilus]]''.<ref name=\"pmid8907187\">{{cite journal|vauthors=Okamoto A, Kato R, Masui R, Yamagishi A, Oshima T, Kuramitsu S | title=An aspartate aminotransferase from an extremely thermophilic bacterium, Thermus thermophilus HB8 | journal=J Biochem | year= 1996 | volume= 119 | issue= 1 | pages= 135\u201344 | pmid=8907187 | doi= 10.1093/oxfordjournals.jbchem.a021198| pmc= | url= }}</ref> In ''E. coli'', the enzyme is encoded by the ''aspC''gene and has also been shown to exhibit the activity of an [[aromatic-amino-acid transaminase]] ({{EC number|2.6.1.57}}).<ref name=\"pmid15983\">{{cite journal|vauthors=Gelfand DH, Steinberg RA | title=Escherichia coli mutants deficient in the aspartate and aromatic amino acid aminotransferases | journal=J Bacteriol | year= 1977 | volume= 130 | issue= 1 | pages= 429\u201340 | pmid=15983 | doi= | pmc=235221 | url= }}</ref>\n\n==Structure==\n[[File:Aspartate aminotransferase.png|thumb|450px|right|Structure of aspartate transaminase from chicken heart mitochondria]]\n\n[[X-ray crystallography]] studies have been performed to determine the structure of aspartate transaminase from various sources, including chicken mitochondria,<ref name=\"pmid1593633\">{{cite journal|vauthors=McPhalen CA, Vincent MG, Jansonius JN | title=X-ray structure refinement and comparison of three forms of mitochondrial aspartate aminotransferase | journal=J Mol Biol | year= 1992 | volume= 225 | issue= 2 | pages= 495\u2013517 | pmid=1593633 | doi= 10.1016/0022-2836(92)90935-D| pmc= }}</ref> pig heart cytosol,<ref name=\"pmid9211866\">{{cite journal| author=Rhee S| title=Refinement and comparisons of the crystal structures of pig cytosolic aspartate aminotransferase and its complex with 2-methylaspartate | journal=J Biol Chem | year= 1997 | volume= 272 | issue= 28 | pages= 17293\u2013302 | pmid=9211866 | doi= 10.1074/jbc.272.28.17293| pmc= | url=|name-list-format=vanc| author2=Silva MM| author3=Hyde CC| author4=Rogers PH| author5=Metzler CM| author6=Metzler DE| display-authors=6| last7=Arnone| first7=A }}</ref> and ''E. coli''.<ref name=\"pmid3071527\">{{cite journal| author=Kamitori S| title=Three-dimensional structure of aspartate aminotransferase from Escherichia coli at 2.8 A resolution | journal=J Biochem | year= 1988 | volume= 104 | issue= 3 | pages= 317\u20138 | pmid=3071527 | doi= 10.1093/oxfordjournals.jbchem.a122464| pmc= | url=|name-list-format=vanc| author2=Hirotsu K| author3=Higuchi T| author4=Kondo K| author5=Inoue K| author6=Kuramitsu S| display-authors=6| last7=Kagamiyama| first7=H| last8=Higuchi| first8=Y| last9=Yasuoka| first9=N }}</ref><ref name=\"pmid1993208\">{{cite journal|vauthors=Danishefsky AT, Onnufer JJ, Petsko GA, Ringe D | title=Activity and structure of the active-site mutants R386Y and R386F of Escherichia coli aspartate aminotransferase | journal=Biochemistry | year= 1991 | volume= 30 | issue= 7 | pages= 1980\u20131985 | pmid=1993208 | doi= 10.1021/bi00221a035| pmc= | url= }}</ref>  Overall, the three-dimensional polypeptide structure for all species is quite similar.  AST is [[Protein dimer|dimeric]], consisting of two identical subunits, each with approximately 400 amino acid residues and a molecular weight of approximately 45 kD.<ref name=\"pmid2197992\"/>  Each subunit is composed of a large and a small domain, as well as a third domain consisting of the N-terminal residues 3-14; these few residues form a strand, which links and stabilizes the two subunits of the dimer.  The large domain, which includes residues 48-325, binds the PLP cofactor via an [[aldimine]] linkage to the \u03b5-amino group of Lys258.  Other residues in this domain \u2013 Asp 222 and Tyr 225 \u2013 also interact with PLP via [[hydrogen bonding]].  The small domain consists of residues 15-47 and 326-410 and represents a flexible region that shifts the enzyme from an \"open\" to a \"closed\" conformation upon substrate binding.<ref name=\"pmid1593633\"/><ref name=\"pmid1993208\"/><ref name=\"pmid1522585\">{{cite journal|vauthors=McPhalen CA, Vincent MG, Picot D, Jansonius JN, Lesk AM, Chothia C | title=Domain closure in mitochondrial aspartate aminotransferase | journal=J Mol Biol | year= 1992 | volume= 227 | issue= 1 | pages= 197\u2013213 | pmid=1522585 | doi= 10.1016/0022-2836(92)90691-C| pmc= }}</ref>\n\nThe two independent active sites are positioned near the interface between the two domains.   Within each active site, a couple arginine residues are responsible for the enzyme\u2019s specificity for [[dicarboxylic acid]] substrates:  Arg386 interacts with the substrate\u2019s proximal (\u03b1-)carboxylate group, while Arg292 complexes with the distal (side-chain) carboxylate.<ref name=\"pmid1593633\"/><ref name=\"pmid1993208\"/>\n\nIn terms of secondary structure, AST contains both \u03b1 and \u03b2 elements.  Each domain has a central sheet of \u03b2-strands with \u03b1-helices packed on either side.\n\n==Mechanism==\nAspartate transaminase, as with all transaminases, operates via dual substrate recognition; that is, it is able to recognize and selectively bind two amino acids (Asp and Glu) with different side-chains.<ref name=\"pmid15889412\">{{cite journal|vauthors=Hirotsu K, Goto M, Okamoto A, Miyahara I | title=Dual substrate recognition of aminotransferases | journal=Chem Rec | year= 2005 | volume= 5 | issue= 3 | pages= 160\u2013172 | pmid=15889412 | doi=10.1002/tcr.20042 | pmc= | url= }}</ref> In either case, the transaminase reaction consists of two similar half-reactions that constitute what is referred to as a [[ping-pong mechanism]].  In the first half-reaction, amino acid 1 (e.g., L-Asp) reacts with the enzyme-PLP complex to generate ketoacid 1 (oxaloacetate) and the modified enzyme-PMP.  In the second half-reaction, ketoacid 2 (\u03b1-ketoglutarate) reacts with enzyme-PMP to produce amino acid 2 (L-Glu), regenerating the original enzyme-PLP in the process.  Formation of a racemic product (D-Glu) is very rare.<ref name=\"pmid1735441\">{{cite journal|vauthors=Kochhar S, Christen P | title=Mechanism of racemization of amino acids by aspartate aminotransferase | journal=Eur J Biochem | year= 1992 | volume= 203 | issue= 3 | pages= 563\u2013569 | pmid=1735441 | doi= 10.1111/j.1432-1033.1992.tb16584.x| pmc= | url= }}</ref>\n\nThe specific steps for the half-reaction of Enzyme-PLP + aspartate \u21cc Enzyme-PMP + oxaloacetate are as follows (see figure); the other half-reaction (not shown) proceeds in the reverse manner, with \u03b1-ketoglutarate as the substrate.<ref name=\"pmid6143829\"/><ref name=\"Biochemistry\"/>\n\n[[File:Aspartate aminotransferase mechanism.png|thumb|center|1000px|Reaction mechanism for aspartate aminotransferase]]\n\n#Internal [[aldimine]] formation:  First, the \u03b5-amino group of Lys258 forms a [[Schiff base]] linkage with the aldehyde carbon to generate an internal aldimine.\n#Transaldimination:  The internal aldimine then becomes an external aldimine when the \u03b5-amino group of Lys258 is displaced by the amino group of aspartate.  This transaldimination reaction occurs via a [[nucleophilic attack]] by the deprotonated amino group of Asp and proceeds through a tetrahedral intermediate.  As this point, the carboxylate groups of Asp are stabilized by the [[guanidinium]] groups of the enzyme\u2019s Arg386 and Arg 292 residues.\n#[[Quinonoid zwitterion|Quinonoid]] formation:  The hydrogen attached to the a-carbon of Asp is then abstracted (Lys258 is thought to be the proton acceptor) to form a quinonoid intermediate.\n#[[Ketimine]] formation:  The quinonoid is reprotonated, but now at the aldehyde carbon, to form the ketimine intermediate.\n#Ketimine [[hydrolysis]]:  Finally, the ketimine is hydrolyzed to form PMP and oxaloacetate.\n\nThis mechanism is thought to have multiple partially [[rate-determining step]]s.<ref name=\"pmid8611515\">{{cite journal|vauthors=Goldberg JM, Kirsch JF | title=The reaction catalyzed by Escherichia coli aspartate aminotransferase has multiple partially rate-determining steps, while that catalyzed by the Y225F mutant is dominated by ketimine hydrolysis | journal=Biochemistry | year= 1996 | volume= 35 | issue= 16 | pages= 5280\u20135291 | pmid=8611515 | doi=10.1021/bi952138d | pmc= }}</ref>  However, it has been shown that the substrate binding step (transaldimination) drives the catalytic reaction forward.<ref name=\"pmid12488449\">{{cite journal|vauthors=Hayashi H, Mizuguchi H, Miyahara I, Nakajima Y, Hirotsu K, Kagamiyama H | title=Conformational change in aspartate aminotransferase on substrate binding induces strain in the catalytic group and enhances catalysis | journal=J Biol Chem | year= 2003 | volume= 278 | issue= 11 | pages= 9481\u20139488 | pmid=12488449 | doi=10.1074/jbc.M209235200 | pmc= }}</ref>\n\n==Clinical significance==\nAST is similar to [[alanine transaminase]] (ALT) in that both enzymes are associated with liver [[parenchymal]] cells. The difference is that ALT is found predominantly in the liver, with clinically negligible quantities found in the kidneys, heart, and skeletal muscle, while AST is found in the liver, heart ([[myocardium|cardiac muscle]]), skeletal muscle, kidneys, brain, and red blood cells.<ref>http://dynaweb.ebscohost.com/Detail?sid=923b5a81-7daf-46b7-bdb2-86d8649da6ef@sessionmgr13&vid=&db=dme&ss=AN+%22316452%22&sl=ll{{dead link|date=October 2016|bot=InternetArchiveBot |fix-attempted=yes }}</ref> As a result, ALT is a more specific indicator of liver [[inflammation]] than AST, as AST may be elevated also in diseases affecting other organs, such as [[myocardial infarction]], [[acute pancreatitis]], acute [[hemolytic anemia]], severe burns, [[Renal disease|acute renal disease]], musculoskeletal diseases, and trauma.<ref>{{cite web|url=http://www.rnceus.com/lf/lfast.html|title=AST/ALT|website=www.rnceus.com}}</ref>\n\nAST was defined as a biochemical marker for the diagnosis of acute myocardial infarction in 1954. However, the use of AST for such a diagnosis is now redundant and has been superseded by the [[Troponin test|cardiac troponins]].<ref>{{cite journal |author=Gaze DC|title=The role of existing and novel cardiac biomarkers for cardioprotection|journal=Current Opinion in Investigational Drugs |volume=8 |issue=9 |pages=711\u20137 |year=2007 |pmid=17729182}}</ref>\n\nAST is commonly measured clinically as a part of diagnostic [[liver function tests]], to determine liver health.  However, it is important to keep in mind that the source of AST (and, to a lesser extent, ALT) in blood tests may reflect pathology in organs other than the liver.  In fact, when the AST is higher than ALT, a muscle source of these enzymes should be considered. For example, muscle inflammation due to [[dermatomyositis]] may cause AST>ALT. This is a good reminder that AST and ALT are not good measures of liver function because they do not reliably reflect the synthetic ability of the liver and they may come from tissues other than liver (such as muscle).\n\nLaboratory tests should always be interpreted using the reference range from the laboratory that performed the test. Example reference ranges are shown below:\n\n{| class=\"wikitable\"\n |-\n |'''Patient type'''||[[Reference range]]s<ref name=gpnotebook-ast>[http://www.gpnotebook.co.uk/simplepage.cfm?ID=322240579 GPnotebook > reference range (AST)] Retrieved on Dec 7, 2009</ref>\n |-\n | Male || 8\u201340 IU/L\n |-\n | Female || 6\u201334 IU/L\n|}\n\n==See also==\n* [[Alanine transaminase]] (ALT/ALAT/SGPT)\n* [[Transaminases]]\n\n==References==\n{{reflist}}\n\n==Further reading==\n* {{cite book | last1 = Jansonius | first1 = JN | last2 = Vincent | first2 = MG | chapter = Structural basis for catalysis by aspartate aminotransferase |title=Biological Macromolecules and Assemblies |volume=3 |editor= Jurnak FA |editor2=McPherson A | publisher = Wiley | year = 1987 | location = New York | pages = 187\u2013285 | isbn = 978-0-471-85142-4}}<!--| accessdate = 2011-05-18 -->\n* {{cite journal |vauthors=Kuramitsu S, Okuno S, Ogawa T, Ogawa H, Kagamiyama H |title=Aspartate aminotransferase of Escherichia coli: nucleotide sequence of the aspC gene |journal=J. Biochem. |volume=97 |issue=4 |pages=1259\u201362 |year=1985 |pmid=3897210|doi=10.1093/oxfordjournals.jbchem.a135173 }}\n* {{cite journal |vauthors=Kondo K, Wakabayashi S, Yagi T, Kagamiyama H |title=The complete amino acid sequence of aspartate aminotransferase from Escherichia coli: sequence comparison with pig isoenzymes |journal=Biochem. Biophys. Res. Commun. |volume=122 |issue=1 |pages=62\u201367 |year=1984 |pmid=6378205 |doi=10.1016/0006-291X(84)90439-X}}\n* {{cite journal |vauthors=Inoue K, Kuramitsu S, Okamoto A, Hirotsu K, Higuchi T, Kagamiyama H |title=Site-directed mutagenesis of Escherichia coli aspartate aminotransferase: role of Tyr70 in the catalytic processes |journal=Biochemistry |volume=30 |issue=31 |pages=7796\u20137801 |year=1991 |pmid=1868057 |doi=10.1021/bi00245a019}}\n\n==External links==\n{{Commons category}}\n*{{MeshName|Aspartate+Transaminase}}\n*[http://labtestsonline.org/understanding/analytes/ast/tab/test AST] - Lab Tests Online\n*[https://www.nlm.nih.gov/medlineplus/ency/article/003472.htm AST: MedlinePlus Medical Encyclopedia]\n\n{{Mitochondrial enzymes}}\n{{Citric acid cycle enzymes}}\n{{Amino acid metabolism enzymes}}\n{{Blood tests}}\n{{Nitrogenous transferases}}\n{{Enzymes}}\n{{Glutamate metabolism and transport modulators}}\n{{Portal bar|Biology|border=no}}\n\n{{Use dmy dates|date=April 2017}}\n\n{{DEFAULTSORT:Aspartate Transaminase}}\n[[Category:Liver function tests]]\n[[Category:EC 2.6.1]]\n[[Category:Glutamate (neurotransmitter)]]\n", "name_user": "85.242.243.111", "label": "unsafe", "comment": "", "url_page": "//en.wikipedia.org/wiki/Aspartate_transaminase"}
{"title_page": "Pedro V\u00edctor Debrigode Dugi", "text_new": "{{Expand Spanish|Pedro V\u00edctor Debrigode|date=December 2011}}\n'''Pedro V\u00edctor Debrigode''' (1914\u20131982) was a Spanish novelist.\n\n==Pseudonyms==\nHe used a very wide range of [[pseudonyms]], the most prominent was Peter Debry, but he also signed his works as PVDebrigaw, Arnold Briggs, Arnaldo Visconti, Geo Marvik, Peter Briggs, V. Debrigaw, and Vic Peterson.\n\n==Imprisonment and Trial==\nWas enlisted in the ranks of the national side at the start of the [[Spanish Civil War|Civil War]], after seeking his transfer to Spain was involved in strange circumstances that led him to be charged with [[espionage]]. After being released for lack of evidence, he tried to go to France, but failed again, being arrested on charges including espionage, dereliction of duty and misappropriation of funds. After passing through various criminal convictions, he finally was released in October 1945.\n\n\n{{authority control}}\n\n{{DEFAULTSORT:Debrigode, Pedro V\u00edctor}}\n[[Category:1914 births]]\n[[Category:1982 deaths]]\n[[Category:Spanish novelists]]\n[[Category:Spanish male novelists]]\n[[Category:20th-century Spanish novelists]]\n[[Category:20th-century Spanish male writers]]\n\n\n{{Spain-writer-stub}}\n", "text_old": "{{Expand Spanish|Pedro V\u00edctor Debrigode|date=December 2011}}\n'''Pedro V\u00edctor Debrigode''' (1914\u20131982) was a Spanish novelist.\n\n==Pseudonyms==\nHe used a very wide range of [[pseudonyms]], the most prominent was Peter Debry, but he also signed his works as PVDebrigaw, Arnold Briggs, Arnaldo Visconti, Geo Marvik, Peter Briggs, V. Debrigaw, and Vic Peterson.\n\n==Imprisonment and Trial==\nWas enlisted in the ranks of the national side at the start of the [[Spanish Civil War|Civil War]], after seeking his transfer to Spain was involved in strange circumstances that led him to be charged with [[espionage]]. After being released for lack of evidence, he tried to go to France, but failed again, being arrested on charges including espionage, dereliction of duty and misappropriation of funds. After passing through various criminal convictions, he finally was released in October 1945.\n\n{{DEFAULTSORT:Debrigode, Pedro V\u00edctor}}\n[[Category:1914 births]]\n[[Category:1982 deaths]]\n[[Category:Spanish novelists]]\n[[Category:Spanish male novelists]]\n[[Category:20th-century Spanish novelists]]\n[[Category:20th-century Spanish male writers]]\n\n\n{{Spain-writer-stub}}\n", "name_user": "Ser Amantio di Nicolao", "label": "safe", "comment": "\u2192\u200eImprisonment and Trial:add authority control", "url_page": "//en.wikipedia.org/wiki/Pedro_V%C3%ADctor_Debrigode_Dugi"}
